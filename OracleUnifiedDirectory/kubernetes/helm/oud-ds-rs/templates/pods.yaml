#
# Copyright (c) 2020, Oracle and/or its affiliates.
#
# Licensed under the Universal Permissive License v 1.0 as shown at 
# https://oss.oracle.com/licenses/upl
#
{{- $root := . -}}
{{- range $replicaIndex, $replicaN := until (.Values.replicaCount|int) }}
{{- $replicaIndx := (add $replicaIndex 1) -}}
#
apiVersion: v1
kind: Pod
metadata:
  name: {{ include "oud-ds-rs.fullname" $root }}-{{ $replicaIndx }}
  labels:
    {{- include "oud-ds-rs.labels" $root | nindent 4 }}
    oud/instance: {{ include "oud-ds-rs.fullname" $root }}-{{ $replicaIndx }}
spec:
  restartPolicy: {{ $root.Values.restartPolicyName }}
  {{- with $root.Values.imagePullSecrets }}
  imagePullSecrets:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  serviceAccountName: {{ include "oud-ds-rs.serviceAccountName" $root }}
  securityContext:
    {{- toYaml $root.Values.podSecurityContext | nindent 4 }}
  containers:
    - name: {{ $root.Chart.Name }}
      securityContext:
        {{- toYaml $root.Values.securityContext | nindent 8 }}
      image: "{{ $root.Values.image.repository }}:{{ $root.Values.image.tag }}"
      imagePullPolicy: {{ $root.Values.image.pullPolicy }}
      ports:
        - name: adminldaps
          containerPort: {{ $root.Values.oudPorts.adminldaps }}
          protocol: TCP
        - name: adminhttps
          containerPort: {{ $root.Values.oudPorts.adminhttps }}
          protocol: TCP
        - name: ldap
          containerPort: {{ $root.Values.oudPorts.ldap }}
          protocol: TCP
        - name: ldaps
          containerPort: {{ $root.Values.oudPorts.ldaps }}
          protocol: TCP
        - name: http
          containerPort: {{ $root.Values.oudPorts.http }}
          protocol: TCP
        - name: https
          containerPort: {{ $root.Values.oudPorts.https }}
          protocol: TCP
        - name: replication
          containerPort: {{ $root.Values.oudPorts.replication }}
          protocol: TCP
      {{- if $root.Values.replOUD.envVarsConfigMap }}
      envFrom:
      - configMapRef:
          name: {{ $root.Values.replOUD.envVarsConfigMap }}
      {{- end }}
      env:
        {{- with $root.Values.replOUD.envVars }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
        - name: instanceType
          value: AddDS2RS
        - name: sleepBeforeConfig
          value: {{ ( mul ($root.Values.oudConfig.sleepBeforeConfig|int) $replicaIndx ) | quote }}
        - name: OUD_INSTANCE_NAME
          value: {{ include "oud-ds-rs.fullname" $root }}-{{ $replicaIndx }}
        - name: hostname
          value: {{ include "oud-ds-rs.fullname" $root }}-{{ $replicaIndx }}
        - name: baseDN
          value: {{ $root.Values.oudConfig.baseDN }}
        {{- if $root.Values.secret.enabled }}
        - name: rootUserDN
          valueFrom:
            secretKeyRef:
              {{- if $root.Values.secret.name }}
              name: {{ $root.Values.secret.name }}
              key: rootUserDN
              {{- else }}
              name:  {{ include "oud-ds-rs.fullname" $root }}-creds
              key: rootUserDN
              {{- end }}
        {{- else }}
        - name: rootUserDN
          value: {{ $root.Values.rootUserDN }}
        {{- end }}
        {{- if $root.Values.secret.enabled }}
        - name: rootUserPassword
          valueFrom:
            secretKeyRef:
              {{- if $root.Values.secret.name }}
              name: {{ $root.Values.secret.name }}
              key: rootUserPassword
              {{- else }}
              name:  {{ include "oud-ds-rs.fullname" $root }}-creds
              key: rootUserPassword
              {{- end }}
        {{- else }}
        - name: rootUserPassword
          value: {{ $root.Values.rootUserPassword }}
        {{- end }}
        {{- if $root.Values.secret.enabled }}
        - name: adminUID
          valueFrom:
            secretKeyRef:
              {{- if $root.Values.secret.name }}
              name: {{ $root.Values.secret.name }}
              key: adminUID
              {{- else }}
              name:  {{ include "oud-ds-rs.fullname" $root }}-creds
              key: adminUID
              {{- end }}
        {{- else }}
        - name: adminUID
          value: {{ $root.Values.adminUID }}
        {{- end }}
        {{- if $root.Values.secret.enabled }}
        - name: adminPassword
          valueFrom:
            secretKeyRef:
              {{- if $root.Values.secret.name }}
              name: {{ $root.Values.secret.name }}
              key: adminPassword
              {{- else }}
              name:  {{ include "oud-ds-rs.fullname" $root }}-creds
              key: adminPassword
              {{- end }}
        {{- else }}
        - name: adminPassword
          value: {{ $root.Values.adminPassword }}
        {{- end }}
        {{- if $root.Values.secret.enabled }}
        - name: bindDN1
          valueFrom:
            secretKeyRef:
              {{- if $root.Values.secret.name }}
              name: {{ $root.Values.secret.name }}
              key: bindDN1
              {{- else }}
              name:  {{ include "oud-ds-rs.fullname" $root }}-creds
              key: bindDN1
              {{- end }}
        {{- else }}
          {{- if $root.Values.bindDN1 }}
        - name: bindDN1
          value: {{ $root.Values.bindDN1 }}
          {{ else }}
        - name: bindDN1
          value: {{ $root.Values.rootUserDN }}
          {{- end }}
        {{ end }}
        {{- if $root.Values.secret.enabled }}
        - name: bindPassword1
          valueFrom:
            secretKeyRef:
              {{- if $root.Values.secret.name }}
              name: {{ $root.Values.secret.name }}
              key: bindPassword1
              {{- else }}
              name:  {{ include "oud-ds-rs.fullname" $root }}-creds
              key: bindPassword1
              {{- end }}
        {{- else }}
          {{- if $root.Values.bindPassword1 }}
        - name: bindPassword1
          value: {{ $root.Values.bindPassword1 }}
          {{ else }}
        - name: bindPassword1
          value: {{ $root.Values.rootUserPassword }}
          {{- end }}
        {{- end }}
       {{- if $root.Values.secret.enabled }}
        - name: bindDN2
          valueFrom:
            secretKeyRef:
              {{- if $root.Values.secret.name }}
              name: {{ $root.Values.secret.name }}
              key: bindDN2
              {{- else }}
              name:  {{ include "oud-ds-rs.fullname" $root }}-creds
              key: bindDN2
              {{- end }}
        {{- else }}
          {{- if $root.Values.bindDN2 }}
        - name: bindDN2
          value: {{ $root.Values.bindDN2 }}
          {{ else }}
        - name: bindDN2
          value: {{ $root.Values.rootUserDN }}
          {{- end }}
        {{ end }}
        {{- if $root.Values.secret.enabled }}
        - name: bindPassword2
          valueFrom:
            secretKeyRef:
              {{- if $root.Values.secret.name }}
              name: {{ $root.Values.secret.name }}
              key: bindPassword2
              {{- else }}
              name:  {{ include "oud-ds-rs.fullname" $root }}-creds
              key: bindPassword2
              {{- end }}
        {{- else }} 
          {{- if $root.Values.bindPassword2 }}
        - name: bindPassword2
          value: {{ $root.Values.bindPassword2 }}
          {{ else }}
        - name: bindPassword2
          value: {{ $root.Values.rootUserPassword }}
          {{- end }}
        {{- end }}
        {{- if $root.Values.sourceHost }}
        - name: sourceHost
          value: {{ $root.Values.sourceHost }}
        {{ else }}
        - name: sourceHost
          value: {{ include "oud-ds-rs.fullname" $root }}-0
        {{- end }}
        {{- if $root.Values.sourceServerPorts }}
        - name: sourceServerPorts
          value: {{ $root.Values.sourceServerPorts }}
        {{ else }}
        - name: sourceServerPorts
          value: {{ include "oud-ds-rs.fullname" $root }}-0:{{ $root.Values.oudPorts.adminldaps }}
        {{- end }}
        {{- if $root.Values.sourceAdminConnectorPort }}
        - name: sourceAdminConnectorPort
          value: {{ $root.Values.sourceAdminConnectorPort }}
        {{ else }}
        - name: sourceAdminConnectorPort
          value: {{ $root.Values.oudPorts.adminldaps | quote }}
        {{- end }}
        {{- if $root.Values.sourceReplicationPort }}
        - name: sourceReplicationPort
          value: {{ $root.Values.sourceReplicationPort }}
        {{ else }}
        - name: sourceReplicationPort
          value: {{ $root.Values.oudPorts.replication | quote }}
        {{- end }}
        - name: sampleData
          value: NONE
        - name: adminConnectorPort
          value: {{ $root.Values.oudPorts.adminldaps | quote }}
        - name: httpAdminConnectorPort
          value: {{ $root.Values.oudPorts.adminhttps | quote }}
        - name: ldapPort
          value: {{ $root.Values.oudPorts.ldap | quote }}
        - name: ldapsPort
          value: {{ $root.Values.oudPorts.ldaps | quote }}
        - name: httpPort
          value: {{ $root.Values.oudPorts.http | quote }}
        - name: httpsPort
          value: {{ $root.Values.oudPorts.https | quote }}
        - name: replicationPort
          value: {{ $root.Values.oudPorts.replication | quote }}
        - name: dsreplication_1
          value: verify --hostname ${sourceHost} --port ${sourceAdminConnectorPort} --baseDN ${baseDN} --serverToRemove ${hostname}:${adminConnectorPort} --connectTimeout 600000 --readTimeout 600000
        - name: dsreplication_2
          value: enable --host1 ${sourceHost} --port1 ${sourceAdminConnectorPort} --replicationPort1 ${sourceReplicationPort} --host2 ${hostname} --port2 ${adminConnectorPort} --replicationPort2 ${replicationPort} --baseDN ${baseDN} --connectTimeout 600000 --readTimeout 600000
        - name: dsreplication_3
          value: initialize --hostSource ${initializeFromHost} --portSource ${sourceAdminConnectorPort} --hostDestination ${hostname} --portDestination ${adminConnectorPort} --baseDN ${baseDN} --connectTimeout 600000 --readTimeout 600000
        - name: dsreplication_4
          value: verify --hostname ${hostname} --port ${adminConnectorPort} --baseDN ${baseDN} --connectTimeout 600000 --readTimeout 600000
        - name: post_dsreplication_dsconfig_1
          value: set-replication-domain-prop --domain-name ${baseDN} --set group-id:{{ ($root.Values.replOUD.groupId|int) }}
        - name: post_dsreplication_dsconfig_2
          value: set-replication-server-prop --set group-id:{{ ($root.Values.replOUD.groupId|int) }}
      volumeMounts:
        - mountPath: /u01/oracle/user_projects
        {{- if $root.Values.persistence.enabled }}
          {{- if $root.Values.persistence.pvname }}
          name: {{ $root.Values.persistence.pvname }}
          {{ else }}
          name: {{ include "oud-ds-rs.fullname" $root }}-pv
          {{- end }}
        {{- else }}
          name: oud-storage
          subPath: user_projects
        {{- end }}
        {{- if $root.Values.configVolume.enabled }}
        - mountPath: {{ $root.Values.configVolume.mountPath }}
          {{- if $root.Values.configVolume.pvname }}
          name: {{ $root.Values.configVolume.pvname }}
          {{ else }}
          name: {{ include "oud-ds-rs.fullname" $root }}-pv-config
          {{- end }}
        {{- end }}
      livenessProbe:
        tcpSocket:
          port: ldap
        initialDelaySeconds: {{ ( add ( mul ($root.Values.oudConfig.sleepBeforeConfig|int) $replicaIndx ) ($root.Values.deploymentConfig.livenessProbeInitialDelay|int) ) }}
        timeoutSeconds: 15
        periodSeconds: 30
        failureThreshold: 1
      readinessProbe:
        tcpSocket:
          port: ldap
        initialDelaySeconds: {{ ( add ( mul ($root.Values.oudConfig.sleepBeforeConfig|int) $replicaIndx ) ($root.Values.deploymentConfig.startupTime|int) ) }}
        timeoutSeconds: 15
        periodSeconds: 30
      readinessProbe:
        tcpSocket:
          port: adminldaps
        initialDelaySeconds: {{ ( add ( mul ($root.Values.oudConfig.sleepBeforeConfig|int) $replicaIndx ) ($root.Values.deploymentConfig.startupTime|int) ) }}
        timeoutSeconds: 15
        periodSeconds: 30
      readinessProbe:
        tcpSocket:
          port: http
        initialDelaySeconds: {{ ( add ( mul ($root.Values.oudConfig.sleepBeforeConfig|int) $replicaIndx ) ($root.Values.deploymentConfig.startupTime|int) ) }}
        timeoutSeconds: 15
        periodSeconds: 30
      readinessProbe:
        exec:
          command:
            - "/u01/oracle/container-scripts/checkOUDInstance.sh"
        initialDelaySeconds: {{ ( add ( mul ($root.Values.oudConfig.sleepBeforeConfig|int) $replicaIndx ) ($root.Values.deploymentConfig.startupTime|int) ) }}
        timeoutSeconds: 30
        periodSeconds: 60
        failureThreshold: 10
  volumes:
    {{- if $root.Values.persistence.enabled }}
      {{- if $root.Values.persistence.pvname }}
    - name: {{ $root.Values.persistence.pvname }}
      {{ else }}
    - name: {{ include "oud-ds-rs.fullname" $root }}-pv
      {{- end }}
      persistentVolumeClaim:
        {{- if $root.Values.persistence.pvcname }}
        claimName: {{ $root.Values.persistence.pvcname }}
        {{ else }}
        claimName: {{ include "oud-ds-rs.fullname" $root }}-pvc
        {{- end }}
    {{- else }}
    - name: oud-storage
      emptyDir: {}
    {{- end }}
    {{- if $root.Values.configVolume.enabled }}
      {{- if $root.Values.configVolume.pvname }}
    - name: {{ $root.Values.configVolume.pvname }}
      {{ else }}
    - name: {{ include "oud-ds-rs.fullname" $root }}-pv-config
      {{- end }}
      persistentVolumeClaim:
        {{- if $root.Values.configVolume.pvcname }}
        claimName: {{ $root.Values.configVolume.pvcname }}
        {{ else }}
        claimName: {{ include "oud-ds-rs.fullname" $root }}-pvc-config
        {{- end }}
    {{- end }}
  {{- with $root.Values.nodeSelector }}
  nodeSelector:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with $root.Values.affinity }}
  affinity:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with $root.Values.tolerations }}
  tolerations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
---
{{- end }}

