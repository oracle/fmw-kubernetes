[
{
	"uri": "/fmw-kubernetes/soa-domains/edg-guide/topology/",
	"title": "Topology",
	"tags": [],
	"description": "Topology for Oracle SOA Suite Enterprise Deployment on Kubernetes.",
	"content": "Assumptions The most relevant assumptions for the Oracle SOA Suite Kubernetes Enterprise Deployment Guide (EDG) topology are related to the database and web tiers. Typical on-premises production systems keep their high end database (such as RAC, RAC+DG, Exadata, Autonomous Database) out of the Kubernetes cluster and manage that tier separately. This implies that the database runs separately from the Kubernetes cluster hosting the application tier. The database provisioning and configuration process is out of the scope of the Oracle SOA Suite Kubernetes setup. Typically, it is administered and maintained by different teams and the Oracle SOA Suite Enterprise Deployment Guide would need to consume just the scan address and database service to be used for the RCU and data source creation. Similarly, the demilitarized zone (DMZ) will likely remain untouched: Customer investments in load balancers (LBRs) are well consolidated, and the security and DMZ policies are well established. Using an HTTP proxy in the DMZ has become a standard. Additionally, Single Sign On (such as OAM and others) may remain for some time and those are best addressed in the web tier than as part of the Kubernetes cluster.\nDue to total cost of ownership reasons, the Kubernetes control plane uses a stacked etcd. External etcd is also possible but, given RAFT protocol\u0026rsquo;s reliability, this option requires a significant amount of additional setup work and three additional nodes just to host the etcd system.\nTopology Diagram Tier Description Control Plane The control plane consists of three nodes where the Kubernetes API server is deployed, front-ended by a load balancer (LBR). The LBR exposes the required virtual IP address (VIP) and virtual server (VS) for both the Oracle SOA Suite and the control plane itself (although an internal-only VS can also be used). This URL must be site or data center agnostic in preparation for disaster protection. The control plane and worker nodes must be able to resolve this hostname name properly AND SHOULD NOT USE IPs for it. As explained in the assumptions section, the etcd tier is stacked with the kube-api servers. Each control plane node runs Kubernetes kube-api, kube-controller, kube-scheduler, and etcd instances pointing to local etcd mounts. The etcd has been tested by the Maximum Availability Architecture (MAA) team on DBFS, NFS, and local file systems. No significant performance differences were observed between the two options for an Oracle SOA Suite system. However, this decision may require additional analysis in each customer case depending on the usage by other apps in the same cluster. Using etcd directly on DBFS allows shipping etcd directly to secondary data centers and allows flashing back quickly to previous versions of the control plane using DB technology. However, it creates a dependency between etcd and the database that is discouraged. The etcd snapshots CAN, however, be placed on DBFS to simplify the continuous shipping of copies to secondary regions and leaving it to Data Guard. These are the options that will be applicable or not depending on the customer needs:\n Place etcd on root or local volumes, ship snapshots with regular rsyncs over reliable networks. Place etcd on NFS, ship snapshots with regular rsyncs over reliable networks. Place etcd on NFS or local volume, copy snapshots to DBFS for shipping to secondary. Application tier.  Application Tier Oracle SOA Suite internal applications and custom deployments on SOA (composites) and WebLogic (ears, jars, wars) are run on three worker nodes in the Kubernetes cluster. The typical allocation on Kubernetes places the WebLogic Administration Server on the first node and each of the servers in the Oracle SOA Suite and/or Service Bus clusters in the other two. This can vary depending on the workloads and kube controller and scheduler decisions.\n$ kubectl get pods -A -o wide | grep soa soans soaedgdomain-adminserver 1/1 Running 0 19h 10.244.3.127 olk8-w1 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; soans soaedgdomain-create-soa-infra-domain-job-6pq9z 0/1 Completed 0 67d 10.244.4.2 olk8-w2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; soans soaedgdomain-soa-server1 1/1 Running 0 22h 10.244.5.161 olk8-w3 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; soans soaedgdomain-soa-server2 1/1 Running 0 22h 10.244.4.178 olk8-w2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; The application tier is critically dependent on the Kubernetes DNS pods to be able to resolve the scan address for the RAC database.\nA dual configuration for persistent volumes is used to avoid a single point of failure in the Oracle SOA Suite domain configuration. Two separate NFS devices are used for high availability. Refer to the Configure redundant persistent volume for details.\nThe internal Oracle SOA Suite and Service Bus clusters use some of the configuration best practices prescribed for on-premises systems. Refer to the Enterprise Deployment Guide for Oracle SOA Suite 12c (12.2.1.4):\n  Automatic Service Migration is used for the Java Message Service (JMS) and Java Transaction API (JTA) Services.\n  All the persistent stores are JDBC persistent stores.\n  Node manager is used to monitor the managed server\u0026rsquo;s health.\n  There are significant differences with an on-premises enterprise deployment. The most relevant are:\n  WebLogic Kubernetes Operator is used to manage the lifecycle of the managed servers, instead of the WebLogic Administration Console or WLST.\n  Scale out procedures are based on the Kubernetes cluster.\n  The WebLogic Administration Server does NOT use its own/separate WebLogic domain directory.\n  Listen addresses and hostnames are \u0026ldquo;virtual\u0026rdquo; out-of-the-box, which provides a significant advantage when considering disaster protection.\n  The OHS/DMZ tier routes to the back-end WebLogic clusters and Administration Server, using a precise node port available in the different nodes.\n  External subsystems: LBR, OHS, and Database Oracle SOA Suite interacts with the following external artifacts: front-end LBR, OHS/DMZ-proxy, Database, and external authenticators.\n  The LBR is used both to route to kube-api and as a standard Oracle SOA Suite front end.\n  The front-end LBR Oracle SOA Suite configuration is identical to an on-premises system. For more information, see the Enterprise Deployment Guide for Oracle SOA Suite 12c 12.2.1.4.\n  For kube-api access, the LBR uses a layer4 (TCP) listener. This listener forwards to the backend control plane nodes. Note: Use hostnames and avoid IP address.\n  The Database tier consists of a RAC Database that hosts JMS/JTA persistent stores, OPSS, and MDS information. The setup of this RAC database is out of the scope of these procedures. All the standard MAA best practices for database services, processes, and DB configuration for a SOA cluster are applicable on Kubernetes. For more details, see the Enterprise Deployment Guide for Oracle SOA Suite 12c 12.2.1.4.\n  External auth providers can be used as described in the Oracle SOA Suite EDG procedures.\n  Single Sign-On through OHS with OAM is possible, as in a standard on-premises Oracle SOA Suite deployment.\n  OHS routes to precise node ports for the SOA Cluster, OSB Cluster, and Administration Server. This is based on the fact that Oracle SOA Suite exposes very few services, which do not change much through the system\u0026rsquo;s lifecycle. This also avoids overhead and dependencies on ingress and additional third party controllers. The OHS configuration is similar to a standard on-premises configuration, except that it disables the Dynamic Server list and uses the list of worker nodes with the precise node port for each cluster.\n  "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/oracle-cloud/prepare-oke-environment/",
	"title": "Preparing an OKE environment",
	"tags": [],
	"description": "Running WebLogic Kubernetes Operator managed WebCenter Content domain on Oracle Kubernetes Engine (OKE).",
	"content": "Contents  Create Public SSH Key to access all the Bastion and Worker nodes Create a compartment for OKE Create Container Clusters (OKE) Create Bastion Node to access Cluster Setup OCI CLI to download kubeconfig and access OKE Cluster  Create Public SSH Key to access all the Bastion and Worker nodes Create SSH key using ssh-keygen on linux terminal to access (ssh) the Compute instances (worker/bastion) in OCI.\nssh-keygen -t rsa -N \u0026#34;\u0026#34; -b 2048 -C demokey -f id_rsa Create a compartment for OKE Within your tenancy, there must be a compartment to contain the necessary network resources (VCN, subnets, internet gateway, route table, security lists).\n Go to OCI console, and use the top-left Menu to select the Identity \u0026gt; Compartments option. Click the Create Compartment button. Enter the compartment name(For example, WCCStorage) and description(OKE compartment), the click the Create Compartment button.  Create Container Clusters (OKE)  In the Console, open the navigation menu. Go to Developer Services and click Kubernetes Clusters (OKE).  Choose a Compartment you have permission to work in. Here we will use WCCStorage compartment. On the Cluster List page, select your Compartment and click Create Cluster. In the Create Cluster dialog, select Quick Create and click Launch Workflow.  On the Create Cluster page specify the values as per your environment (like the sample values shown below)  NAME: WCCOKEPHASE1 COMPARTMENT: WCCStorage KUBERNETES VERSION: v1.23.4 CHOOSE VISIBILITY TYPE: Private SHAPE: VM.Standard.E3.Flex (Choose the available shape for worker node pool. The list shows only those shapes available in your tenancy that are supported by Container Engine for Kubernetes. See Supported Images and Shapes for Worker Nodes.) NUMBER OF NODES: 3 (The number of worker nodes to create in the node pool, placed in the regional subnet created for the \u0026lsquo;quick cluster\u0026rsquo;). Click Show Advanced Options and enter PUBLIC SSK KEY: ssh-rsa AA\u0026hellip;\u0026hellip;bmVnWgX/ demokey (The public key id_rsa.pub created at Step1)    Click Next to review the details you entered for the new cluster.\n Click Create Cluster to create the new network resources and the new cluster.  Container Engine for Kubernetes starts creating resources (as shown in the Creating cluster and associated network resources dialog). Click Close to return to the Console.  Initially, the new cluster appears in the Console with a status of Creating. When the cluster has been created, it has a status of Active.  Click on the Node Pools on Resources and then View to view the Node Pool and worker node status  You can view the status of Worker node and make sure all Node State in Active and Kubernetes Node Condition is Ready.The worker node gets listed in the kubectl command once the Kubernetes Node Condition is Ready.  To access the Cluster, Click on Access Cluster on the Cluster WCCOKEPHASE1 page.  We will be creating the bastion node and then access the Cluster.  Create Bastion Node to access Cluster Setup a bastion node for accessing internal resources. We will create the bastion node in same VCN following below steps, so that we can ssh into worker nodes. Here we will choose CIDR Block: 10.0.22.0/24 . You can choose a different block, if you want.\n  Click on the VCN Name from the Cluster Page as shown below   Next Click on Security List and then Create Security List   Create a bastion-private-sec-list security with below Ingress and Egress Rules.\nIngress Rules:\nEgress Rules:   Create a bastion-public-sec-list security with below Ingress and Egress Rules.\nIngress Rules:\nEgress Rules:   Create the bastion-route-table with Internet Gateway, so that we can add to bastion instance for internet access   Next create a Regional Public Subnet for bastion instance with name bastion-subnet with below details:\n CIDR BLOCK: 10.0.22.0/24 ROUTE TABLE: oke-bastion-routetables SUBNET ACCESS: PUBLIC SUBNET Security List: bastion-public-sec-list DHCP OPTIONS: Select the Default DHCP Options     Next Click on the Private Subnet which has Worker Nodes   And then add the bastion-private-sec-list to Worker Private Subnet, so that bastion instance can access the Worker nodes   Next Create Compute Instance oke-bastion with below details\n Name: BastionHost Image: Oracle Linux 7.X Availability Domain: Choose any AD which has limit for creating Instance VIRTUAL CLOUD NETWORK COMPARTMENT: WCCStorage( i.e., OKE Compartment) SELECT A VIRTUAL CLOUD NETWORK: Select VCN created by Quick Cluster SUBNET COMPARTMENT: WCCStorage ( i.e., OKE Compartment) SUBNET: bastion-subnet (create above) SELECT ASSIGN A PUBLIC IP ADDRESS SSH KEYS: Copy content of id_rsa.pub created in Step1     Once bastion Instance BastionHost is created, get the Public IP to ssh into the bastion instance   Login to bastion host as below\nssh -i \u0026lt;your_ssh_bastion.key\u0026gt; opc@123.456.xxx.xxx   Setup OCI CLI  Install OCI CLI bash -c \u0026#34;$(curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh)\u0026#34;  Respond to the Installation Script Prompts. To download the kubeconfig later after setup, we need to setup the oci config file. Follow the below command and enter the details when prompted $ oci setup config    Click here to see the Sample Output   $ oci setup config This command provides a walkthrough of creating a valid CLI config file. The following links explain where to find the information required by this script: User API Signing Key, OCID and Tenancy OCID: https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#Other Region: https://docs.cloud.oracle.com/Content/General/Concepts/regions.htm General config documentation: https://docs.cloud.oracle.com/Content/API/Concepts/sdkconfig.htm Enter a location for your config [/home/opc/.oci/config]: Enter a user OCID: ocid1.user.oc1..aaaaaaaao3qji52eu4ulgqvg3k4yf7xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Enter a tenancy OCID: ocid1.tenancy.oc1..aaaaaaaaf33wodv3uhljnn5etiuafoxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Enter a region (e.g. ap-hyderabad-1, ap-melbourne-1, ap-mumbai-1, ap-osaka-1, ap-seoul-1, ap-sydney-1, ap-tokyo-1, ca-montreal-1, ca-toronto-1, eu-amsterdam-1, eu-frankfurt-1, eu-zurich-1, me-jeddah-1, sa-saopaulo-1, uk-gov-london-1, uk-london-1, us-ashburn-1, us-gov-ashburn-1, us-gov-chicago-1, us-gov-phoenix-1, us-langley-1, us-luke-1, us-phoenix-1): us-phoenix-1 Do you want to generate a new API Signing RSA key pair? (If you decline you will be asked to supply the path to an existing key.) [Y/n]: Y Enter a directory for your keys to be created [/home/opc/.oci]: Enter a name for your key [oci_api_key]: Public key written to: /home/opc/.oci/oci_api_key_public.pem Enter a passphrase for your private key (empty for no passphrase): Private key written to: /home/opc/.oci/oci_api_key.pem Fingerprint: 74:d2:f2:db:62:a9:c4:bd:9b:4f:6c:d8:31:1d:a1:d8 Config written to /home/opc/.oci/config If you haven't already uploaded your API Signing public key through the console, follow the instructions on the page linked below in the section 'How to upload the public key': https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#How2     Now you need to upload the created public key in $HOME/.oci (oci_api_key_public.pem) to OCI console Login to OCI Console and navigate to User Settings, which is in the drop down under your OCI userprofile, located at the top-right corner of the page.  On User Details page, Click Api Keys link, located near bottom-left corner of the page and then Click the Add API Key button. Copy the content of oci_api_key_public.pem and Click Add.  Now you can use the oci cli to access the OCI resources. To access the Cluster, Click on Access Cluster on the Cluster WCCOKEPHASE1 page  To access the Cluster from Bastion node perform steps as per the Local Access. $ oci -v $ mkdir -p $HOME/.kube $ oci ce cluster create-kubeconfig --cluster-id ocid1.cluster.oc1.phx.aaaaaaaaae4xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxrqgjtd --file $HOME/.kube/config --region us-phoenix-1 --token-version 2.0.0 $ export KUBECONFIG=$HOME/.kube/config  Install kubectl Client to access the Cluster $ curl -LO https://dl.k8s.io/release/v1.15.7/bin/linux/amd64/kubectl $ sudo mv kubectl /bin/ $ sudo chmod +x /bin/kubectl  Access the Cluster from bastion node $ kubectl get nodes NAME STATUS ROLES AGE VERSION 10.0.10.197 Ready node 14d v1.23.4 10.0.10.206 Ready node 14d v1.23.4 10.0.10.50 Ready node 14d v1.23.4  Install required add-ons for Oracle WebCenter Content Cluster setup  Install helm v3 $ wget https://get.helm.sh/helm-v3.5.4-linux-amd64.tar.gz $ tar -zxvf helm-v3.5.4-linux-amd64.tar.gz $ sudo mv linux-amd64/helm /bin/helm $ helm version version.BuildInfo{Version:\u0026#34;v3.5.4\u0026#34;, GitCommit:\u0026#34;1b5edb69df3d3a08df77c9902dc17af864ff05d1\u0026#34;, GitTreeState:\u0026#34;clean\u0026#34;, GoVersion:\u0026#34;go1.15.11\u0026#34;}  Install git sudo yum install git -y     "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/appendix/wcc-cluster-sizing-info/",
	"title": "Domain resource sizing",
	"tags": [],
	"description": "Describes the resourse sizing information for Oracle WebCenter Content domain setup on Kubernetes cluster.",
	"content": "Oracle WebCenter Content cluster sizing recommendations    Oracle WCC Normal Usage Moderate Usage High Usage     Administration Server No of CPU core(s) : 1, Memory : 4GB No of CPU core(s) : 1, Memory : 4GB No of CPU core(s) : 1, Memory : 4GB   Number of Managed Servers 2 3 5   Configurations per Managed Server No of CPU core(s) : 2, Memory : 16GB No of CPU core(s) : 4, Memory : 16GB No of CPU core(s) : 6, Memory : 16-32GB   PV Storage Minimum 250GB Minimum 250GB Minimum 500GB    "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/adminguide/configure-load-balancer/",
	"title": "Set up a load balancer",
	"tags": [],
	"description": "Configure different load balancers for Oracle WebCenter Content domains.",
	"content": "WebLogic Kubernetes Operator managed Oracle WebCenter Content domain supports ingress-based load balancers such as Traefik and NGINX (kubernetes/ingress-nginx).\n Traefik  Configure the ingress-based Traefik load balancer for Oracle WebCenter Content domains.\n NGINX  Configure the ingress-based NGINX load balancer for Oracle WebCenter Content domain.\n "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/patch-and-upgrade/patch-an-image/patch-wcsites-product-image/",
	"title": "Patch a Oracle WebCenter Sites product Docker image",
	"tags": [],
	"description": "Upgrade the underlying Oracle WebCenter Sites product image in a running Oracle WebCenter Sites Kubernetes environment.",
	"content": "These instructions describe how to upgrade a new release of Oracle WebCenter Sites product Docker image in a running Oracle WebCenter Sites Kubernetes environment. A rolling upgrade approach is used to upgrade managed server pods of the domain.\nIt is expecting a Zero down time as a rolling upgrade approach is used.\n Prerequisites  Make sure Oracle WebCenter Sites domain is created and all the admin and managed pods are up and running. Make sure the database used for the Oracle WebCenter Sites domain deployment is up and running during the upgrade process.  Prepare the upgrade-domain-inputs.yaml Modify the kubernetes/create-wcsites-domain/domain-home-on-pv/upgrade/upgrade-domain-inputs.yaml. Below are given default values.\n# Name of the Admin Server adminServerName: adminserver # Unique ID identifying a domain. # This ID must not contain an underscope (\u0026#34;_\u0026#34;), and must be lowercase and unique across all domains in a Kubernetes cluster. domainUID: wcsitesinfra # Number of managed servers to generate for the domain configuredManagedServerCount: 3 #Number of managed servers running at the time of upgrade managedServerRunning: 3 # Base string used to generate managed server names managedServerNameBase: wcsites-server # Oracle WebCenter Sites Docker image. # Refer to build Oracle WebCenter Sites Docker image https://github.com/oracle/docker-images/tree/master/OracleWebCenterSites # for details on how to obtain or create the image. # tag image to a new tag for example: oracle/wcsites:12.2.1.4-230418 image: oracle/wcsites:12.2.1.4-230418 # Image pull policy # Legal values are \u0026#34;IfNotPresent\u0026#34;, \u0026#34;Always\u0026#34;, or \u0026#34;Never\u0026#34; imagePullPolicy: IfNotPresent # Name of the domain namespace namespace: wcsites-ns Run the upgrade script Run the upgrade script with the modified upgrade-domain-inputs.yaml file and wait for the script to be finished.\n$ sh kubernetes/create-wcsites-domain/domain-home-on-pv/upgrade/upgrade.sh -i upgrade-domain-inputs.yaml Monitor the pods rolling out incrementaly.\n$ kubectl get pods -n wcsites-ns -w Configure WebCenter Sites patch Configure WebCenter Sites patch by hitting url http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT}/sites/sitespatchsetup\n"
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/oracle-cloud/filesystem/",
	"title": "Preparing a file system",
	"tags": [],
	"description": "Running WebLogic Kubernetes Operator managed Oracle WebCenter Content domains on OKE",
	"content": "Create Filesystem and security list for FSS  Note: Make sure you create the filesystem and security list in the OKE created VCN\n   Login to OCI Console and go to Storage and Click File System   Click Create File System   You can create File System and Mount Targets with the default values. But in case you want to rename the file System and mount targets, follow below steps.\n Note: Make sure the Virtual Cloud Network in Mount Target refers to the one where your OKE Cluster is created and you will be accessing this file system.\n   Edit and change the File System name. You can choose any name of your choice. Following instructions will assume that the File System name chosen is WCCFS.   Edit and change the Mount Target name to WCCFS and make sure the Virtual Cloud Network selected is the one where all the instances are created. Select Public Subnet and Click Create   Once the File System is created, it lands at below page. Click on WCCFS link.   Click on Mount Commands which gives details on how to mount this file system on your instances.   Mount Command pop up gives details on what must be configured on security list to access the mount targets from instances. Note down the mount command which need to be executed on the instance   Note down the mount path and NFS server from the COMMAND TO MOUNT THE FILE SYSTEM. We will use this as NFS for Domain Home with below details. Sample from the above mount command.\n NFSServer: 10.0.20.xxx Mount Path: /WCCFS    Create the security list fss_seclist with below Ingress Rules as given in the Mount commands pop up   Create the Egress rules as below as given in the Mount commands pop up.   Make sure to add the created security list fss_security list to each subnets as shown below: Otherwise the created security list rules will not apply to the instances.   Once the security list fss_security list is added into the subnet, login to the instances and mount the file systems on to Bastion Node.\n Note: Please make sure to replace the sample NFS server address (10.0.20.235, as shown in the example below) according to your environment.\n # Run below command in same order(sequence) as a root user. # login as root sudo su # Install NFS Utils yum install nfs-utils # Create directory where you want the mount the file system sudo mkdir -p /mnt/WCCFS # Mount Command sudo mount 10.0.20.235:/WCCFS /mnt/WCCFS # Alternatively you can use: \u0026quot;mount 10.0.20.235:/WCCFS /mnt/WCCFS\u0026quot;. To persist on reboot add into /etc/fstab echo \u0026quot;10.0.20.235:/WCCFS /mnt/WCCFS nfs nfsvers=3 0 0\u0026quot; \u0026gt;\u0026gt; /etc/fstab mount -a # Change proper permissions so that all users can access the share volume sudo chown -R 1000:0 /mnt/WCCFS   Confirm that /WCCFS is now pointing to created File System\n[root@bastionhost WCCFS]# cd /mnt/WCCFS/ [root@bastionhost WCCFS]# df -h . Filesystem Size Used Avail Use% Mounted on 10.0.20.235:/WCCFS 8.0E 0 8.0E 0% /mnt/WCCFS   "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/oracle-cloud/oke/",
	"title": "Preparing an OKE environment",
	"tags": [],
	"description": "Running WebLogic Kubernetes Operator managed WebCenter Sites domains on OKE",
	"content": "Overview Create Public SSH Key to access all the Bastion/Worker nodes  Create SSH key using ssh-keygen on linux terminal.  Generating public/private rsa key pair. Your identification has been saved in \u0026lt;path\u0026gt;/id_rsa. Your public key has been saved in \u0026lt;path\u0026gt;/id_rsa.pub. The key fingerprint is: SHA256:xCi1gf1QFafbRwOM3WjUTgqEInwi6UklbuxbBeMzA6M demokey The key\u0026#39;s randomart image is: +---[RSA 2048]----+ | +++oo..++*++ | | ++==+==. oo=.+ | |Eo+o*+++o .o +o | | oo * .. o.... | | . . S . . . | | o . | | . | | | | | +----[SHA256]-----+  This will generate id_rsa and id_rsa.pub in  You will be using id_rsa.pub while creating the instance and id_rsa which is a private key, will be used during login to the instance later.  Create a compartment for OKE Within your tenancy, there must be a compartment to contain the necessary network resources (VCN, subnets, internet gateway, route table, security lists).\n Go to OCI console, and use the top-left Menu to select the Identity \u0026gt; Compartments option. Click the Create Compartment button. Enter the compartment name(WCSCDev) and description(OKE compartment), the click the Create Compartment button.  Create Virtual Cloud Network  From OCI console, use navigation menu. Under Solutions, Platform and Edge, go to Networking and click Virtual Cloud Networks (VCN) Choose a WCSCDev Compartment and then click Create Virtual Cloud Network Choose a WCSCDev Compartment and then click Networking QuickStart ? VCN with Internet Connectivity ? Start Workflow  Add Name (ex. WCNVCN)  Click Next ? Review and Create.  Create Container Clusters (OKE)  From OCI console, use navigation menu. Under Solutions, Platform and Edge, go to Developer Services and click Container Clusters (OKE) Choose a WCSCDev Compartment and then click Create Cluster *In the Cluster Creation dialog, change the placeholder value in the Name field and enter WCSOKECluster instead.  Initially, the Cluster is in \u0026ldquo;Creating\u0026rdquo; state and no buttons are accessible. Once its state is \u0026ldquo;Active\u0026rdquo;, then all the button gets are enabled.   Create Bastion Node Setup a bastion node for accessing internal resources.\nSetup OCI CLI to download kubeconfig and access OKE Cluster  Login to Bastion Node Install OCI CLI  $ bash -c \u0026#34;$(curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh)\u0026#34;  Respond to the Installation Script Prompts. To download the kubeconfig later after setup, we need to setup the oci config file. Follow the below command and enter the details when prompted.  $ oci setup config This command provides a walkthrough of creating a valid CLI config file. The following links explain where to find the information required by this script: User OCID and Tenancy OCID: https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#Other Region: https://docs.cloud.oracle.com/Content/General/Concepts/regions.htm General config documentation: https://docs.cloud.oracle.com/Content/API/Concepts/sdkconfig.htm Enter a location for your config [/home/opc/.oci/config]: Enter a user OCID: ocid1.user.xxxxx5n3a Enter a tenancy OCID: ocid1.tenancy.xxxxxxmffq Enter a region (e.g. ap-mumbai-1, ap-seoul-1, ap-sydney-1, ap-tokyo-1, ca-toronto-1, eu-frankfurt-1, eu-zurich-1, sa-saopaulo-1, uk-london-1, us-ashburn-1, us-gov-ashburn-1, us-gov-chicago-1, us-gov-phoenix-1, us-langley-1, us-luke-1, us-phoenix-1): us-phoenix-1 Do you want to generate a new RSA key pair? (If you decline you will be asked to supply the path to an existing key.) [Y/n]: Y Enter a directory for your keys to be created [/home/opc/.oci]: Enter a name for your key [oci_api_key]: Public key written to: /home/opc/.oci/oci_api_key_public.pem Enter a passphrase for your private key (empty for no passphrase): Private key written to: /home/opc/.oci/oci_api_key.pem Fingerprint: 30:b9:a6:80:6e:b7:bb:7d:f9:79:6b:84:48:30:03:16 Config written to /home/opc/.oci/config If you haven\u0026#39;t already uploaded your public key through the console, follow the instructions on the page linked below in the section \u0026#39;How to upload the public key\u0026#39;: https://docs.cloud.oracle.com/Content/API/Concepts/apisigningkey.htm#How2  Now you need to upload the created public key in $HOME/.oci (oci_api_key_public.pem) to OCI console. Login to Console and navigate to User Settings, which is in the drop down under your OCI username in the top nav On User Details page, select \u0026ldquo;Api Keys\u0026rdquo; in the left nav and then Click the \u0026ldquo;Add Public Key\u0026rdquo; button and then copy the content of \u0026ldquo;oci_api_key_public.pem\u0026rdquo;. Click \u0026ldquo;Add\u0026rdquo;. Now you can use the oci cli to access the OCI resources.  Setup Access Kubeconfig (OKE Cluster) Install docker  Login to Bastion Node Login to instance and install the latest docker-engine and start docker service  #install docker-engine sudo yum -y install docker-engine #Enable and start docker service sudo systemctl enable docker sudo systemctl start docker #Add opc to docker group sudo /sbin/usermod -a -G docker opc  Logout and log back into the host - to ensure user is added to group correctly Check your Docker Version.  $ docker version Client: Docker Engine - Community Version: 19.03.1-ol API version: 1.40 Go version: go1.12.5 Git commit: ead9442 Built: Wed Sep 11 06:40:28 2019 OS/Arch: linux/amd64 Experimental: false Server: Docker Engine - Community Engine: Version: 19.03.1-ol API version: 1.40 (minimum version 1.12) Go version: go1.12.5 Git commit: ead9442 Built: Wed Sep 11 06:38:43 2019 OS/Arch: linux/amd64 Experimental: false Default Registry: docker.io containerd: Version: v1.2.0-rc.0-108-gc444666 GitCommit: c4446665cb9c30056f4998ed953e6d4ff22c7c39 runc: Version: spec: 1.0.1-dev GitCommit: docker-init: Version: 0.18.0 GitCommit: fec3683  If your instances are on corporate network then Configuring Proxy Requirements (run as root)  ### Create the drop-in file /etc/systemd/system/docker.service.d/http-proxy.conf that contains proxy details: cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/systemd/system/docker.service.d/http-proxy.conf [Service] Environment=\u0026#34;HTTP_PROXY=http://\u0026lt;your-company-domain\u0026gt;:80\u0026#34; Environment=\u0026#34;HTTPS_PROXY=http://\u0026lt;your-company-domain\u0026gt;:80\u0026#34; Environment=\u0026#34;NO_PROXY=localhost,127.0.0.0/8,.\u0026lt;no-proxy-domain\u0026gt;,/var/run/docker.sock\u0026#34; EOF  Restart docker daemon to load latest changes  $ sudo systemctl daemon-reload $ sudo systemctl restart docker  Verify if the proxy is configured with docker  $ docker info|grep -i proxy Install Kubernetes Packages  Login to Bastion Node Add the external kubernetes repository (run as root)  cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=1 repo_gpgcheck=1 gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg exclude=kube* EOF  Set SELinux in permissive mode (effectively disabling it)  export PATH=/sbin:$PATH setenforce 0 sudo sed -i \u0026#39;s/^SELINUX=enforcing$/SELINUX=permissive/\u0026#39; /etc/selinux/config  Export proxy (if your instances are on corporate network) and install latest kubeadm, kubelet and kubectl  VERSION=1.18.4-0 sudo yum install -y kubelet-$VERSION kubeadm-$VERSION kubectl-$VERSION --disableexcludes=kubernetes ### enable kubelet service so that it auto-restart on reboot sudo systemctl enable --now kubelet  Ensure net.bridge.bridge-nf-call-iptables is set to 1 in your sysctl to avoid traffic routing issues ( run as root user)  cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 EOF sysctl --system  Update the kubelet with \u0026ndash;fail-swap-on flag to false and restart kubelet (starting in 1.8, kubelet fails to start with swap enabled)  ### run as a root user ### Update --fail-swap-on=false into /etc/sysconfig/kubelet sed -i \u0026#39;s/KUBELET_EXTRA_ARGS=/KUBELET_EXTRA_ARGS=\u0026#34;--fail-swap-on=false\u0026#34;/\u0026#39; /etc/sysconfig/kubelet cat /etc/sysconfig/kubelet ### Reload and restart kubelet systemctl daemon-reload systemctl restart kubelet Setup bastion Node to Access Kubeconfig  From OCI console, use navigation menu. Under Solutions, Platform and Edge, go to Developer Services and click Container Clusters (OKE), click on \u0026lsquo;WCSOKECluster\u0026rsquo;  Now click on \u0026ldquo;Access Cluster\u0026rdquo; then click on \u0026ldquo;Local Access\u0026rdquo;, gives details on how to download the kubeconfig to access the cluster.   $ oci -v $ mkdir -p $HOME/.kube $ oci ce cluster create-kubeconfig --cluster-id ocid1.cluster.oc1.phx.xxxxxx --file $HOME/.kube/config --region us-phoenix-1 --token-version 2.0.0 $ export KUBECONFIG=$HOME/.kube/config  Once the kubeconfig is setup, you can access the Cluster with kubectl commands from any host or laptop.  $ kubectl get nodes NAME STATUS ROLES AGE VERSION 10.0.10.2 Ready node 111m v1.18.4 10.0.10.3 Ready node 111m v1.18.4 10.0.10.4 Ready node 111m v1.18.4 Create Filesystem and security list for FSS Setup Filesystem\nCreation of OCIR Setup the OCIR for managing Docker images.\n"
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/oracle-cloud/ocir/",
	"title": "Preparing OCIR",
	"tags": [],
	"description": "Running WebLogic Kubernetes Operator managed Oracle WebCenter Content domains on OKE",
	"content": "Publish images to OCIR Push all the required images to OCIR and subsequently use from there. Follow the below steps for pushing the images to OCIR\nCreate an \u0026ldquo;Auth token\u0026rdquo; Create an \u0026ldquo;Auth token\u0026rdquo; which will be used as docker password to push and pull images from OCIR. Login to OCI Console and navigate to User Settings, which is in the drop down under your OCI user-profile, located at the top-right corner of the OCI console page.  On User Details page, Click Auth Tokens link located near bottom-left corner of the page and then Click the Generate Token button: Enter a Name and Click \u0026ldquo;Generate Token\u0026rdquo;  Token will get generated  Copy the generated token.  NOTE: It will only be displayed this one time, and you will need to copy it to a secure place for further use.\n   Using the OCIR Using the Docker CLI to login to OCIR ( for phoenix : phx.ocir.io , ashburn: iad.ocir.io etc)\n docker login phx.ocir.io When promoted for username enter docker username as OCIR RepoName/oci username ( eg., axcmmdmzqtqb/oracleidentitycloudservice/myemailid@oracle.com) When prompted for your password, enter the generated Auth Token Now you can tag the WCC Docker image and push to OCIR. Sample steps as below  $ docker login phx.ocir.io $ username - axcmmdmzqtqb/oracleidentitycloudservice/myemailid@oracle.com $ password - abCXYz942,vcde (Token Generated for OCIR using user setting) $ docker tag oracle/wccontent:12.2.1.4.0-20210311104247 phx.ocir.io/axcmmdmzqtqb/oracle/wccontent:12.2.1.4.0-20210311104247 $ docker push phx.ocir.io/axcmmdmzqtqb/oracle/wccontent:12.2.1.4.0-20210311104247 This has to be done on Bastion Node for all the images.\nVerify the OCIR Images Get the OCIR repository name by logging in to Oracle Cloud Infrastructure Console. In the OCI Console, open the Navigation menu. Under Solutions and Platform, go to Developer Services and click Container Registry (OCIR) and select the your Compartment.\n"
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/installguide/prerequisites/",
	"title": "Requirements and limitations",
	"tags": [],
	"description": "Understand the system requirements and limitations for deploying and running Oracle WebCenter Sites domains with the WebLogic Kubernetes Operator, including the WebCenter Sites domain cluster sizing recommendations.",
	"content": "Contents  Introduction System Requirements Limitations WebCenter Sites Cluster Sizing Recommendations  Introduction This document describes the special considerations for deploying and running a WebCenter Sites domain with the WebLogic Kubernetes Operator. Other than those considerations listed here, WebCenter Sites domains work in the same way as Fusion Middleware Infrastructure domains and WebLogic Server domains.\nIn this release, WebCenter Sites domains are supported using the domain on a persistent volume model only where a WebCenter Sites domain is located in a persistent volume (PV).\nSystem Requirements  Oracle Linux 7 (UL6+) and Red Hat Enterprise Linux 7 (UL3+ only with standalone Kubernetes) are supported. Kubernetes 1.21.10+, 1.22.7+, 1.23.4+, 1.24.0+, and 1.25.0+ (check with kubectl version). Docker 19.03.11+ (check with docker version) or CRI-O 1.20.2+ (check with crictl version | grep RuntimeVersion). Flannel networking v0.13.0-amd64 or later (check with Docker images | grep flannel). Helm 3.10+ (check with helm version --client --short). Oracle WebLogic Kubernetes Operator 4.0.6 (see operator releases page). Oracle WebCenterSites 12.2.1.4 Docker image (built either using imagetool or the buildDockerImage script). You must have the cluster-admin role to install the operator. The operator does not need the cluster-admin role at runtime. We do not currently support running WebCenterSites in non-Linux containers. These proxy setup are used for pulling the required binaries and source code from the respective repositories:  export NO_PROXY=\u0026quot;localhost,127.0.0.0/8,$(hostname -i),.your-company.com,/var/run/docker.sock\u0026rdquo; export no_proxy=\u0026quot;localhost,127.0.0.0/8,$(hostname -i),.your-company.com,/var/run/docker.sock\u0026rdquo; export http_proxy=http://www-proxy-your-company.com:80 export https_proxy=http://www-proxy-your-company.com:80 export HTTP_PROXY=http://www-proxy-your-company.com:80 export HTTPS_PROXY=http://www-proxy-your-company.com:80     NOTE: Add your host IP by using hostname -i and also nslookup IP addresses to the no_proxy, NO_PROXY list above.\n Limitations Compared to running a WebLogic Server domain in Kubernetes using the Operator, the following limitations currently exist for WebCenter Sites domain:\n Domain in image model is not supported in this version of the Operator. Only configured clusters are supported. Dynamic clusters are not supported for WebCenter Sites domains. Note that you can still use all of the scaling features. You just need to define the maximum size of your cluster at domain creation time. We do not currently support running WebCenter Sites in non-Linux containers. Deploying and running a WebCenter Sites domain is supported only in Operator versions 4.0.6 and later. The WebLogic Logging Exporter currently supports WebLogic Server logs only. Other logs will not be sent to Elasticsearch. Note, however, that you can use a sidecar with a log handling tool like Logstash or Fluentd to get logs. The WebLogic Monitoring Exporter currently supports the WebLogic MBean trees only. Support for JRF MBeans has not been added yet.  WebCenter Sites Cluster Sizing Recommendations    WebCenter Sites Normal Usage Moderate Usage High Usage     Admin Server No of CPU(s) : 1, Memory : 4GB No of CPU(s) : 1, Memory : 4GB No of CPU(s) : 1, Memory : 4GB   Managed Server No of Servers : 2, No of CPU(s) : 2, Memory : 16GB No of Servers : 2, No of CPU(s) : 4, Memory : 16GB No of Servers : 3, No of CPU(s) : 6, Memory : 16-32GB   PV Storage Minimum 250GB Minimum 250GB Minimum 500GB    "
},
{
	"uri": "/fmw-kubernetes/soa-domains/installguide/prerequisites/",
	"title": "Requirements and pricing",
	"tags": [],
	"description": "Understand the system requirements, limitations, licensing, and pricing for deploying and running Oracle SOA Suite domains with the WebLogic Kubernetes Operator, including the SOA cluster sizing.",
	"content": "This section provides information about the system requirements, limitations, licensing, and pricing for deploying and running Oracle SOA Suite domains with the WebLogic Kubernetes Operator.\nSystem requirements for Oracle SOA Suite domains Release 25.1.2 has the following system requirements:\n Kubernetes 1.24.0+, 1.25.0+, 1.26.2+, 1.27.2+, 1.28.2+, 1.29.1+, 1.30.1+ and 1.31.1+ (check with kubectl version). Docker 19.03.11+ (check with docker version) or CRI-O 1.20.2+ (check with crictl version | grep RuntimeVersion). Flannel networking v0.13.0-amd64 or later (check with docker images | grep flannel), Calico networking v3.16.1 or later. Helm 3.10.2+ (check with helm version --client --short). WebLogic Kubernetes Operator 4.2.13 (see the operator releases 4.2.13 pages). You must have the cluster-admin role to install the operator. The operator does not need the cluster-admin role at runtime. For more information, see the role-based access control (RBAC) documentation. We do not currently support running SOA in non-Linux containers. Container images based on Oracle Linux 8 are now supported. My Oracle Support and the Oracle Container Registry host container images based on Oracle Linux 8. Additionally, see the Oracle SOA Suite documentation for other requirements, such as database version.  See here for resource sizing information for Oracle SOA Suite domains set up on a Kubernetes cluster.\nLimitations Compared to running a WebLogic Server domain in Kubernetes using the operator, the following limitations currently exist for Oracle SOA Suite domains:\n In this release, Oracle SOA Suite domains are supported using the domain on a persistent volume model only, where the domain home is located in a persistent volume (PV). The \u0026ldquo;domain in image\u0026rdquo; and \u0026ldquo;model in image\u0026rdquo; models are not supported. Also, \u0026ldquo;WebLogic Deploy Tooling (WDT)\u0026rdquo; based deployments are currently not supported. Only configured clusters are supported. Dynamic clusters are not supported for Oracle SOA Suite domains. Note that you can still use all of the scaling features, but you need to define the maximum size of your cluster at domain creation time. Mixed clusters (configured servers targeted to a dynamic cluster) are not supported. The WebLogic Logging Exporter project has been archived. Users are encouraged to use Fluentd or Logstash. The WebLogic Monitoring Exporter currently supports WebLogic MBean trees only. Support for JRF and Oracle SOA Suite MBeans is not available. Also, a metrics dashboard specific to Oracle SOA Suite is not available. Instead, use the WebLogic Server dashboard to monitor the Oracle SOA Suite server metrics in Grafana. Some features such as multicast, multitenancy, production redeployment, and Node Manager (although it is used internally for the liveness probe and to start WebLogic Server instances) are not supported in this release. Features such as Java Messaging Service whole server migration and consensus leasing are not supported in this release. Maximum availability architecture (Oracle SOA Suite EDG setup) is available for preview. Enabling or disabling the memory resiliency for Oracle Service Bus using the Enterprise Manager Console is not supported in this release. Zero downtime upgrade (ZDT) of the domain is not supported.  For up-to-date information about the features of WebLogic Server that are supported in Kubernetes environments, see My Oracle Support Doc ID 2349228.1.\nPricing and licensing The WebLogic Kubernetes Operator and Oracle Linux are open source and free; WebLogic Server requires licenses in any environment. All WebLogic Server licenses are suitable for deploying WebLogic to containers and Kubernetes, including free single desktop Oracle Technology Network (OTN) developer licenses. See the following sections for more detailed information:\n Oracle SOA Suite Oracle Linux Oracle Java WebLogic Kubernetes Operator Oracle SOA Suite images Additional references  Oracle SOA Suite Oracle SOA Suite is licensed as an option to Oracle WebLogic Suite. Valid licenses are needed in at least one of the following combinations:\n WebLogic Suite and Oracle SOA Suite WebLogic Suite and Oracle Service Bus WebLogic Suite and Oracle BPEL Engine  For more information, see the Fusion Middleware Licensing Information User Manual - Oracle SOA Suite and the following sections.\nOracle Linux Oracle Linux is under open source license and is completely free to download and use.\nNote that Oracle SOA Suite licenses that include support do not include customer entitlements for direct access to Oracle Linux support or Unbreakable Linux Network (to directly access the standalone Oracle Linux patches). The latest Oracle Linux patches are included with the latest Oracle SOA Suite images.\nOracle Java Oracle support for Java is included with Oracle SOA Suite licenses when Java is used for running WebLogic and Coherence servers or clients.\nFor more information, see the Fusion Middleware Licensing Information User Manual.\nOracle SOA Suite images Oracle provides two different types of Oracle SOA Suite images:\n  Critical Patch Update (CPU) images: Images with the latest Oracle SOA Suite, Fusion Middleware Infrastructure, Coherence PSUs, and other fixes released by the Critical Patch Update (CPU) program. CPU images are intended for production use.\n  General Availability (GA) images: Images that are not intended for production use and do not include Oracle SOA Suite, WebLogic, Fusion Middleware Infrastructure, or Coherence PSUs.\n  All Oracle SOA Suite licenses, including free Oracle Technology Network (OTN) developer licenses, include access to the latest General Availability (GA) Oracle SOA Suite images, which bundle Java SE.\nCustomers with access to Oracle SOA Suite support additionally have:\n Access to Critical Patch Update (CPU) Oracle SOA Suite images, which bundle Java SE. Access to Oracle SOA Suite patches. Oracle support for Oracle SOA Suite images.  WebLogic Kubernetes Operator The WebLogic Kubernetes Operator is open source and free, licensed under the Universal Permissive license (UPL), Version 1.0. For support details, see Get help.\nAdditional references  Supported Virtualization and Partitioning Technologies for Oracle Fusion Middleware (search for keyword \u0026lsquo;Kubernetes\u0026rsquo;) Running and Licensing Oracle Programs in Containers and Kubernetes  "
},
{
	"uri": "/fmw-kubernetes/",
	"title": "Oracle Fusion Middleware on Kubernetes",
	"tags": [],
	"description": "This document lists all the Oracle Fusion Middleware products deployment supported on Kubernetes.",
	"content": "Oracle Fusion Middleware on Kubernetes Oracle supports the deployment of the following Oracle Fusion Middleware products on Kubernetes. Click on the appropriate document link below to get started on setting up the product.\n Oracle SOA Suite  The Oracle WebLogic Kubernetes Operator (the “operator”) supports deployment of Oracle SOA Suite components such as Oracle Service-Oriented Architecture (SOA), Oracle Service Bus, and Oracle Enterprise Scheduler (ESS). Follow the instructions in this guide to set up these Oracle SOA Suite domains on Kubernetes.\n Oracle WebCenter Content  WebLogic Kubernetes Operator (the “operator”) supports deployment of Oracle WebCenter Content servers such as Oracle WebCenter Content(Content Server) and Oracle WebCenter Content(Inbound Refinery Server). Follow the instructions in this guide to set up Oracle WebCenter Content domain on Kubernetes.\n Oracle WebCenter Portal  The WebLogic Kubernetes operator (the “operator”) supports deployment of Oracle WebCenter Portal. Follow the instructions in this guide to set up Oracle WebCenter Portal domain on Kubernetes.\n Oracle Identity Management on Kubernetes  This document lists all the Oracle Identity Management products deployment supported on Kubernetes.\n Oracle WebCenter Sites  The WebLogic Kubernetes Operator supports deployment of Oracle WebCenter Sites. Follow the instructions in this guide to set up Oracle WebCenter Sites domains on Kubernetes.\n Oracle HTTP Server  Oracle HTTP Server can be deployed on a Kubernetes cluster. Follow the instructions in this guide to set up Oracle HTTP Server on Kubernetes.\n "
},
{
	"uri": "/fmw-kubernetes/soa-domains/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "Review the latest changes and known issues for Oracle SOA Suite on Kubernetes.\nRecent changes    Date Version Change     January 31, 2025 25.1.2 Supports Oracle SOA Suite 12.2.1.4 domains deployment using January 2025 PSU and known bug fixes. Support for WebLogic Kubernetes Operator 4.2.13. Oracle SOA Suite 12.2.1.4 Docker image for this release can be downloaded from My Oracle Support (MOS patch 37480757 for Oracle Linux 8) and container-registry.oracle.com.   October 31, 2024 24.4.2 Supports Oracle SOA Suite 12.2.1.4 domains deployment using October 2024 PSU and known bug fixes. Support for WebLogic Kubernetes Operator 4.2.9. Oracle SOA Suite 12.2.1.4 Docker image for this release can be downloaded from My Oracle Support (MOS patch 37153681 for Oracle Linux 7 and MOS patch 37153750 for Oracle Linux 8) and container-registry.oracle.com.   August 31, 2024 24.3.2 Supports Oracle SOA Suite 12.2.1.4 domains deployment using July 2024 PSU and known bug fixes. Support for WebLogic Kubernetes Operator 4.2.4. Oracle SOA Suite 12.2.1.4 Docker image for this release can be downloaded from My Oracle Support (MOS patch 36825148 for Oracle Linux 7 and MOS patch 36825236 for Oracle Linux 8) and container-registry.oracle.com.   May 31, 2024 24.2.2 Supports Oracle SOA Suite 12.2.1.4 domains deployment using April 2024 PSU and known bug fixes. Support for WebLogic Kubernetes Operator 4.2.2. Oracle SOA Suite 12.2.1.4 Docker image for this release can be downloaded from My Oracle Support (MOS patch 36568531 for Oracle Linux 7 and MOS patch 36732083 for Oracle Linux 8) and container-registry.oracle.com.   February 29, 2024 24.1.2 Supports Oracle SOA Suite 12.2.1.4 domains deployment using January 2024 PSU and known bug fixes. Support for WebLogic Kubernetes Operator 4.1.7. Oracle SOA Suite 12.2.1.4 Docker image for this release can be downloaded from My Oracle Support (MOS patch 36182324 for Oracle Linux 7 and MOS patch 36182412 for Oracle Linux 8) and container-registry.oracle.com.   November 30, 2023 23.4.2 Supports Oracle SOA Suite 12.2.1.4 domains deployment using October 2023 PSU and known bug fixes. Support for WebLogic Kubernetes Operator 4.1.4. Oracle SOA Suite 12.2.1.4 Docker image for this release can be downloaded from My Oracle Support (MOS patch 35908803 for Oracle Linux 7 and MOS patch 35915091 for Oracle Linux 8) and container-registry.oracle.com.   August 31, 2023 23.3.2 Supports Oracle SOA Suite 12.2.1.4 domains deployment using July 2023 PSU and known bug fixes. Support for WebLogic Kubernetes Operator 4.1.0. Oracle SOA Suite 12.2.1.4 Docker image for this release can be downloaded from My Oracle Support (MOS patch 35729956 for Oracle Linux 7 and MOS patch 35730025 for Oracle Linux 8) and container-registry.oracle.com.   May 31, 2023 23.2.2 Supports Oracle SOA Suite 12.2.1.4 domains deployment using April 2023 PSU and known bug fixes. Support for WebLogic Kubernetes Operator 4.0.6. Container images based on Oracle Linux 8 are now supported. Oracle SOA Suite 12.2.1.4 Docker image for this release can be downloaded from My Oracle Support (MOS patch 35269141 for Oracle Linux 7 and MOS patch 35285229  for Oracle Linux 8) and container-registry.oracle.com.   February 28, 2023 23.1.2 Supports Oracle SOA Suite 12.2.1.4 domains deployment using January 2023 PSU and known bug fixes. Support for WebLogic Kubernetes Operator 4.0.4. Oracle SOA Suite 12.2.1.4 Docker image for this release can be downloaded from My Oracle Support (MOS patch 34980883) and container-registry.oracle.com.   November 30, 2022 22.4.2 Supports Oracle SOA Suite 12.2.1.4 domains deployment using October 2022 PSU and known bug fixes. Support for WebLogic Kubernetes Operator 3.4.4. Oracle SOA Suite 12.2.1.4 container images are now only available from container-registry.oracle.com and are no longer available from My Oracle Support.   August 31, 2022 22.3.2 Supports Oracle SOA Suite 12.2.1.4 domains deployment using July 2022 PSU and known bug fixes. Enterprise Deployment Guide as preview release. Oracle SOA Suite 12.2.1.4 Docker image for this release can be downloaded from My Oracle Support (MOS patch 34410491).   May 31, 2022 22.2.2 Supports Oracle SOA Suite 12.2.1.4 domains deployment using April 2022 PSU and known bug fixes. Oracle SOA Suite 12.2.1.4 Docker image for this release can be downloaded from My Oracle Support (MOS patch 34077593).   February 25, 2022 22.1.2 Supports Oracle SOA Suite 12.2.1.4 domains deployment using January 2022 PSU and known bug fixes. Oracle SOA Suite 12.2.1.4 Docker image for this release can be downloaded from My Oracle Support (MOS patch 33749496).   November 30, 2021 21.4.2 Supports Oracle SOA Suite 12.2.1.4 domains deployment using October 2021 PSU and known bug fixes. Oracle SOA Suite 12.2.1.4 Docker image for this release can be downloaded from My Oracle Support (MOS patch 33467899).   August 6, 2021 21.3.2 Supports Oracle SOA Suite 12.2.1.4 domains deployment using July 2021 PSU and known bug fixes. Oracle SOA Suite 12.2.1.4 Docker image for this release can be downloaded from My Oracle Support (MOS patch 33125465).   May 31, 2021 21.2.2 Supports Oracle SOA Suite 12.2.1.4 domains deployment using April 2021 PSU and known bug fixes. Oracle SOA Suite 12.2.1.4 Docker image for this release can be downloaded from My Oracle Support (MOS patch 32794257).   February 28, 2021 21.1.2 Supports Oracle SOA Suite 12.2.1.4 domains deployment using January 2021 PSU and known bug fixes. Oracle SOA Suite 12.2.1.4 Docker image for this release can be downloaded from My Oracle Support (MOS patch 32398542).   November 30, 2020 20.4.2 Supports Oracle SOA Suite 12.2.1.4 domains deployment using October 2020 PSU and known bug fixes. Added HEALTHCHECK support for Oracle SOA Suite docker image. Oracle SOA Suite 12.2.1.4 Docker image for this release can be downloaded from My Oracle Support (MOS patch 32215749).   October 3, 2020 20.3.3 Certified Oracle WebLogic Kubernetes Operator version 3.0.1. Kubernetes 1.14.8+, 1.15.7+, 1.16.0+, 1.17.0+, and 1.18.0+ support. Flannel is the only supported CNI in this release. SSL enabling for the Administration Server and Managed Servers is supported. Only Oracle SOA Suite 12.2.1.4 is supported.    Known issues  Overriding tuning parameters is not supported using configuration overrides Deployments in WebLogic administration console display unexpected error Enterprise Manager console may display ADF_FACES-30200 error Configure the external URL access for Oracle SOA Suite composite applications Configure the external access for the Oracle Enterprise Scheduler WebServices WSDL URLs Missing gif images in Oracle Service Bus console pipeline configuration page  "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "Review the latest changes and known issues for Oracle WebCenter Sites on Kubernetes.\nRecent changes    Date Version Introduces backward incompatibilities Change     May 10, 2023 23.2.2 no Supports Oracle WebCenter Sites 12.2.1.4 domains deployment using April 2023 PSU and known bug fixes - certified for Oracle WebLogic Kubernetes Operator version 4.0.6. Oracle WebCenter Sites 12.2.1.4 container image for this release can be downloaded from My Oracle Support (MOS patch 35370108) and container-registry.oracle.com. Terraform scripts for Deploying Oracle WebCenter Sites 12.2.1.4 on Oracle Cloud Infrastructure Container Engine for Kubernetes (OKE). Terraform Scripts can be downloaded from GitHub repository.   May 30, 2022 22.2.2 no Supports Oracle WebCenter Sites 12.2.1.4 domains deployment using April 2022 PSU and known bug fixes - certified for Oracle WebLogic Kubernetes Operator version 3.3.0. Oracle WebCenter Sites 12.2.1.4 container image for this release can be downloaded from My Oracle Support (MOS patch 34223930).   Dec 10, 2021 21.4.3 no Certified Oracle WebLogic Kubernetes Operator version 3.3.0. Kubernetes 1.16.0+, 1.17.0+, and 1.18.0+ support. Flannel is the only supported CNI in this release. Only Webcenter Sites 12.2.1.4 is supported.   Jan 15, 2021 21.1.1 no Certified Oracle WebLogic Kubernetes Operator version 3.0.1. Kubernetes 1.14.8+, 1.15.7+, 1.16.0+, 1.17.0+, and 1.18.0+ support. Flannel is the only supported CNI in this release. Only Webcenter Sites 12.2.1.4 is supported.    Known issues    Issue Description     Publishing via LoadBalancer Endpoint Currenly publishing is only supported via NodePort as described in section For Publishing Setting in WebCenter Sites on page.    "
},
{
	"uri": "/fmw-kubernetes/soa-domains/adminguide/deploying-composites/supportjdev/",
	"title": "Deploy using JDeveloper",
	"tags": [],
	"description": "Deploy Oracle SOA Suite and Oracle Service Bus composite applications from Oracle JDeveloper to Oracle SOA Suite in the WebLogic Kubernetes Operator environment.",
	"content": "Learn how to deploy Oracle SOA Suite and Oracle Service Bus composite applications from Oracle JDeveloper (running outside the Kubernetes network) to an Oracle SOA Suite instance in the WebLogic Kubernetes Operator environment.\nUse JDeveloper for development and test environments only. For a production environment, you should deploy using Application Control and WLST methods.\n Deploy Oracle SOA Suite and Oracle Service Bus composite applications to Oracle SOA Suite from JDeveloper To deploy Oracle SOA Suite and Oracle Service Bus composite applications from Oracle JDeveloper, the Administration Server must be configured to expose a T3 channel. The WebLogic Kubernetes Operator provides an option to expose a T3 channel for the Administration Server using the exposeAdminT3Channel setting during domain creation, then the matching T3 service can be used to connect. By default, when exposeAdminT3Channel is set, the WebLogic Kubernetes Operator environment exposes the NodePort for the T3 channel of the NetworkAccessPoint at 30012 (use t3ChannelPort to configure the port to a different value).\nIf you miss enabling exposeAdminT3Channel during domain creation, follow Expose a T3/T3S Channel for the Administration Server to expose a T3 channel manually.\nPrerequisites   Get the Kubernetes cluster master address and verify the T3 port that will be used for creating application server connections. Use the following command to get the T3 port:\n$ kubectl get service \u0026lt;domainUID\u0026gt;-\u0026lt;AdministrationServerName\u0026gt;-external -n \u0026lt;namespace\u0026gt;-o jsonpath='{.spec.ports[0].nodePort}' For example:\n$ kubectl get service soainfra-adminserver-external -n soans -o jsonpath='{.spec.ports[0].nodePort}'   Oracle SOA Suite in the WebLogic Kubernetes Operator environment is deployed in a Reference Configuration domain. If a SOA project is developed in Classic mode JDeveloper displays a Mismatch notification in the Deploy Composite Wizard. By default, JDeveloper is in Classic mode. To develop SOA projects in Reference Configuration mode, you must manually enable this feature in JDeveloper: a. From the File menu, select Tools, then Preferences. b. Select Reference Configuration Settings. c. Select Enable Reference Configuration settings in adapters.\n  JDeveloper needs to access the Servers during deployment. In the WebLogic Kubernetes Operator environment, Administration and Managed Servers are pods and cannot be accessed directly by JDeveloper. As a workaround, you must configure the reachability of the Managed Servers:\nThe Managed Server T3 port is not exposed by default and opening this will have a security risk as the authentication method here is based on a userid/password. It is not recommended to do this on production instances.\n   Decide on an external IP address to be used to configure access to the Managed Servers. Master or worker node IP address can be used to configure Managed Server reachability. In these steps, the Kubernetes cluster master IP is used for demonstration.\n  Get the pod names of the Administration Server and Managed Servers (that is, \u0026lt;domainUID\u0026gt;-\u0026lt;server name\u0026gt;), which will be used to map in /etc/hosts.\n  Update /etc/hosts (or in Windows, C:\\Windows\\System32\\Drivers\\etc\\hosts) on the host where JDeveloper is running with the entries below, where\n\u0026lt;Master IP\u0026gt; \u0026lt;Administration Server pod name\u0026gt; \u0026lt;Master IP\u0026gt; \u0026lt;Managed Server1 pod name\u0026gt; \u0026lt;Master IP\u0026gt; \u0026lt;Managed Server2 pod name\u0026gt; Sample /etc/hosts entries looks as follows, where X.X.X.X is the master node IP address:\nX.X.X.X soainfra-adminserver X.X.X.X soainfra-soa-server1 X.X.X.X soainfra-soa-server2   Get the Kubernetes service name of the Oracle SOA Suite cluster to access externally with the master IP (or external IP):\n$ kubectl get service \u0026lt;domainUID\u0026gt;-cluster-\u0026lt;soa-cluster\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get service soainfra-cluster-soa-cluster -n soans   Create a Kubernetes service to expose the Oracle SOA Suite cluster service (\u0026lt;domainUID\u0026gt;-cluster-\u0026lt;soa-cluster\u0026gt;) externally with same port as the Managed Server:\n$ kubectl expose service \u0026lt;domainUID\u0026gt;-cluster-\u0026lt;soa-cluster\u0026gt; --name \u0026lt;domainUID\u0026gt;-\u0026lt;soa-cluster\u0026gt;-ext --external-ip=\u0026lt;Master IP\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl expose service soainfra-cluster-soa-cluster --name soainfra-cluster-soa-cluster-ext --external-ip=X.X.X.X -n soans  In a production environment, exposing the SOA cluster service with an external IP address is not recommended, as it can cause message drops on the SOA Managed Servers.\n     Create an application server connection in JDeveloper   Create a new application server connection (for example wls-k8s-op-connection) in JDeveloper:   In the configuration page, provide the WebLogic Hostname as the Kubernetes Master Address.\n  Update the Port as the T3 port (default is 30012) obtained in Prerequisites.\n  Enter the WebLogic Domain value (domainUID).\n  Test the connection to verify it is successful.   Deploy SOA composite applications using JDeveloper   In JDeveloper, right-click the SOA project you want to deploy and select Deploy to display the deployment wizard.   In the Deployment Action page, select Deploy to Application Server and click Next.   In the Deployment Configuration page, select the appropriate options and click Next.   In the Select server page, select the application server connection (wls-k8s-op-connection) that was created earlier and click Next.   If the Prerequisites were configured correctly, the lookup discovers the Managed Servers for deploying the composite.   Using the application server connection, the Managed Servers (Oracle SOA Suite cluster) are listed on the SOA Servers page. Select the Oracle SOA Suite cluster and click Next.   On the Summary page, click Finish to start deploying the composites to the Oracle SOA Suite cluster.   Verify logs on JDeveloper to confirm successful deployment.   Enter the soa-infra URLs in a browser to confirm the composites are deployed on both servers of the Oracle SOA Suite cluster.   Deploy Oracle Service Bus composite applications using JDeveloper   In JDeveloper, right-click the Oracle Service Bus project you want to deploy and select Deploy to display the deployment wizard.   In the Deployment Action page, select Deploy to Application Server and click Next.   In the Select Server page, select the application server connection (wls-k8s-op-connection) that was created earlier and click Next.   On the Summary page, click Finish to start deploying the composites to the Oracle Service Bus cluster.   In JDeveloper, verify logs to confirm successful deployment.   In the Oracle Service Bus Console, click Launch Test Console to verify that the Oracle Service Bus composite application is deployed successfully.   "
},
{
	"uri": "/fmw-kubernetes/soa-domains/appendix/soa-cluster-sizing-info/",
	"title": "Domain resource sizing",
	"tags": [],
	"description": "Describes the resourse sizing information for Oracle SOA Suite domains setup on Kubernetes cluster.",
	"content": "Oracle SOA cluster sizing minimum requirements    Oracle SOA Normal Usage Moderate Usage High Usage     Administration Server No of CPU core(s) : 1, Memory : 4GB No of CPU core(s) : 1, Memory : 4GB No of CPU core(s) : 1, Memory : 4GB   Number of Managed Servers 2 2 4   Configurations per Managed Server No of CPU core(s) : 2, Memory : 16GB No of CPU core(s) : 4, Memory : 16GB No of CPU core(s) : 6, Memory : 16-32GB   PV Storage Minimum 250GB Minimum 250GB Minimum 500GB    "
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/appendix/wcp-cluster-sizing-info/",
	"title": "Domain resource sizing",
	"tags": [],
	"description": "Describes the resourse sizing information for the Oracle WebCenter Portal domain setup on Kubernetes cluster.",
	"content": "Oracle WebCenter Portal cluster sizing recommendations    WebCenter Portal Normal Usage Moderate Usage High Usage     Admin Server No of CPU(s) : 1, Memory : 4GB No of CPU(s) : 1, Memory : 4GB No of CPU(s) : 1, Memory : 4GB   Number of Managed Server No of Servers : 2 No of Servers : 2 No of Servers : 3   Configurations per Managed Server No of CPU(s) : 2, Memory : 16GB No of CPU(s) : 4, Memory : 16GB No of CPU(s) : 6, Memory : 16-32GB   PV Storage Minimum 250GB Minimum 250GB Minimum 500GB    "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/appendix/wcsites-cluster-sizing-info/",
	"title": "Domain resource sizing",
	"tags": [],
	"description": "Describes the resourse sizing information for Oracle WebCenter Sites domains setup on Kubernetes cluster.",
	"content": "Oracle WebCenter Sites cluster sizing recommendations    Oracle WebCenter Sites Normal Usage Moderate Usage High Usage     Administration Server No of CPU core(s) : 1, Memory : 4GB No of CPU core(s) : 1, Memory : 4GB No of CPU core(s) : 1, Memory : 4GB   Managed Server No of Servers : 2, No of CPU core(s) : 2, Memory : 16GB No of Servers : 2, No of CPU core(s) : 4, Memory : 16GB No of Servers : 3, No of CPU core(s) : 6, Memory : 16-32GB   PV Storage Minimum 250GB Minimum 250GB Minimum 500GB    "
},
{
	"uri": "/fmw-kubernetes/soa-domains/patch_and_upgrade/patch-an-image/",
	"title": "Patch an image",
	"tags": [],
	"description": "Create a patched Oracle SOA Suite image using the WebLogic Image Tool.",
	"content": "Oracle releases Oracle SOA Suite images regularly with the latest bundle and recommended interim patches in My Oracle Support (MOS). However, if you need to create images with new bundle and interim patches, you can build these images using the WebLogic Image Tool.\nIf you have access to the Oracle SOA Suite patches, you can patch an existing Oracle SOA Suite image with a bundle patch and interim patches. Oracle recommends that you use the WebLogic Image Tool to patch the Oracle SOA Suite image.\n Recommendations:\n Use the WebLogic Image Tool create feature for patching the Oracle SOA Suite Docker image with a bundle patch and multiple interim patches. This is the recommended approach because it optimizes the size of the image. Use the WebLogic Image Tool update feature for patching the Oracle SOA Suite Docker image with a single interim patch. Note that the patched image size may increase considerably due to additional image layers introduced by the patch application tool.   Apply the patched Oracle SOA Suite image To update an Oracle SOA Suite domain with a patched image, first make sure the patched image is pulled or created and available on the nodes in your Kubernetes cluster. Once the patched image is available, you can follow these steps to update the Oracle SOA Suite domain with a patched image:\n Stop all servers Update user permissions of the domain PV storage Address post-installation requirements Apply the patched image  Stop all servers  Note: The following steps are applicable only for non-Zero Downtime Patching. For Zero Downtime Patching, go to Address post-installation requirements.\n Before applying the patch, stop all servers in the domain:\n  In the domain.yaml configuration file, update the spec.serverStartPolicy field value to NEVER (for Operator 3.x) or Never (for Operator 4.x).\n  Shut down the domain (stop all servers) by applying the updated domain.yaml file:\n$ kubectl apply -f domain.yaml   Update user permissions of the domain PV storage The Oracle SOA Suite image for release 24.1.2 has an oracle user with UID 1000, with the default group set to root. Before applying the patched image, update the user permissions of the domain persistent volume (PV) to set the group to root:\n$ sudo chown -R 1000:0 /scratch/k8s_dir/SOA Address post-installation requirements If the patches in the patched Oracle SOA Suite image have any post-installation steps, follow these steps:\n Create a Kubernetes pod with domain home access Perform post-installation steps  Create a Kubernetes pod with domain home access   Get domain home persistence volume claim details for the Oracle SOA Suite domain.\nFor example, to list the persistent volume claim details in the namespace soans:\n$ kubectl get pvc -n soans Sample output showing the persistent volume claim is soainfra-domain-pvc:\nNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE soainfra-domain-pvc Bound soainfra-domain-pv 10Gi RWX soainfra-domain-storage-class xxd   Create a YAML soapostinstall.yaml using the domain home persistence volume claim.\nFor example, using soainfra-domain-pvc per the sample output:\n Note: Replace soasuite:12.2.1.4-30761841 with the patched image in the following sample YAML:\n apiVersion: v1 kind: Pod metadata: labels: run: soapostinstall name: soapostinstall namespace: soans spec: containers: - image: soasuite:12.2.1.4-30761841 name: soapostinstall command: [\u0026quot;/bin/bash\u0026quot;, \u0026quot;-c\u0026quot;, \u0026quot;sleep infinity\u0026quot;] imagePullPolicy: IfNotPresent volumeMounts: - name: soainfra-domain-storage-volume mountPath: /u01/oracle/user_projects volumes: - name: soainfra-domain-storage-volume persistentVolumeClaim: claimName: soainfra-domain-pvc   Apply the YAML to create the Kubernetes pod:\n$ kubectl apply -f soapostinstall.yaml   Perform post-installation steps If you need to perform any post-installation steps on the domain home:\n  Start a bash shell in the soapostinstall pod:\n$ kubectl exec -it -n soans soapostinstall -- bash This opens a bash shell in the running soapostinstall pod:\n[oracle@soapostinstall oracle]$   Use the bash shell of the soapostinstall pod and perform the required steps on the domain home.\n  After successful completion of the post-installation steps, you can delete the soapostinstall pod:\n$ kubectl delete -f soapostinstall.yaml   Apply the patched image After completing the required SOA schema upgrade and post-installation steps, start up the domain:\n  In the domain.yaml configuration file, update the image field value with the patched image:\nFor example:\n image: soasuite:12.2.1.4-30761841   In case of non-Zero Downtime Patching, update the spec.serverStartPolicy field value to IF_NEEDED (for Operator 3.x) or IfNeeded (for Operator 4.x) in domain.yaml.\n  Apply the updated domain.yaml configuration file to start up the domain.\n$ kubectl apply -f domain.yaml  Note: In case of non-Zero Downtime Patching, the complete domain startup happens, as the servers in the domain were stopped earlier. For Zero Downtime Patching, the servers in the domain are rolling restarted.\n   Verify the domain is updated with the patched image:\n$ kubectl describe domain \u0026lt;domainUID\u0026gt; -n \u0026lt;domain-namespace\u0026gt;|grep \u0026quot;Image:\u0026quot; Sample output:\n$ kubectl describe domain soainfra -n soans |grep \u0026quot;Image:\u0026quot; Image: soasuite:12.2.1.4-30761841 $   "
},
{
	"uri": "/fmw-kubernetes/soa-domains/adminguide/configure-load-balancer/",
	"title": "Set up a load balancer",
	"tags": [],
	"description": "Configure different load balancers for Oracle SOA Suite domains.",
	"content": "The WebLogic Kubernetes Operator supports ingress-based load balancers such as Traefik and NGINX (kubernetes/ingress-nginx). It also supports Apache web tier load balancer.\n Traefik  Configure the ingress-based Traefik load balancer for Oracle SOA Suite domains.\n NGINX  Configure the ingress-based NGINX load balancer for Oracle SOA Suite domains.\n Apache web tier  Configure the Apache web tier load balancer for Oracle SOA Suite domains.\n "
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/manage-wcportal-domains/configure-load-balancer/",
	"title": "Set up a load balancer",
	"tags": [],
	"description": "Configure different load balancers for the Oracle WebCenter Portal domain.",
	"content": "The WebLogic Kubernetes Operator supports ingress-based load balancers such as Traefik and NGINX (kubernetes/ingress-nginx) . It also supports the Apache webtier load balancer.\n Traefik  Configure the ingress-based Traefik load balancer for an Oracle WebCenter Portal domain.\n NGINX  Configure the ingress-based NGINX load balancer for an Oracle WebCenter Portal domain.\n Apache webtier  Configure the Apache webtier load balancer for an Oracle WebCenter Portal domain.\n "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/adminguide/configure-load-balancer/",
	"title": "Set up a load balancer",
	"tags": [],
	"description": "Configure different load balancers for Oracle WebCenter Sites domains",
	"content": "The Oracle WebLogic Server Kubernetes operator supports ingress-based load balancers such as Traefik and NGINX (kubernetes/ingress-nginx).\n Traefik  Configure the ingress-based Traefik load balancer for Oracle WebCenter Sites domains.\n NGINX  Configure the ingress-based NGINX load balancer for Oracle WebCenter Sites domains.\n Apache webtier  Configure the Apache webtier load balancer for Oracle WebCenter Sites domains.\n "
},
{
	"uri": "/fmw-kubernetes/soa-domains/adminguide/configure-load-balancer/traefik/",
	"title": "Traefik",
	"tags": [],
	"description": "Configure the ingress-based Traefik load balancer for Oracle SOA Suite domains.",
	"content": "This section provides information about how to install and configure the ingress-based Traefik load balancer (version 2.2.1 or later for production deployments) to load balance Oracle SOA Suite domain clusters. You can configure Traefik for non-SSL, SSL termination, and end-to-end SSL access of the application URL.\nFollow these steps to set up Traefik as a load balancer for an Oracle SOA Suite domain in a Kubernetes cluster:\n Install the Traefik (ingress-based) load balancer Create an Ingress for the domain Verify domain application URL access Uninstall the Traefik ingress Uninstall Traefik  Install the Traefik (ingress-based) load balancer   Use Helm to install the Traefik (ingress-based) load balancer. Use the values.yaml file in the sample but set kubernetes.namespaces specifically.\n$ cd ${WORKDIR} $ kubectl create namespace traefik $ helm repo add traefik https://helm.traefik.io/traefik --force-update Sample output:\n\u0026#34;traefik\u0026#34; has been added to your repositories   Install Traefik:\n$ helm install traefik traefik/traefik \\  --namespace traefik \\  --values charts/traefik/values.yaml \\  --set \u0026#34;kubernetes.namespaces={traefik}\u0026#34; \\  --set \u0026#34;service.type=NodePort\u0026#34; --wait    Click here to see the sample output.   LAST DEPLOYED: Sun Sep 13 21:32:00 2020 NAMESPACE: traefik STATUS: deployed REVISION: 1 TEST SUITE: None    A sample values.yaml for deployment of Traefik:\nimage: name: traefik pullPolicy: IfNotPresent ingressRoute: dashboard: enabled: true # Additional ingressRoute annotations (e.g. for kubernetes.io/ingress.class) annotations: {} # Additional ingressRoute labels (e.g. for filtering IngressRoute by custom labels) labels: {} providers: kubernetesCRD: enabled: true kubernetesIngress: enabled: true # IP used for Kubernetes Ingress endpoints ports: traefik: port: 9000 expose: true # The exposed port for this service exposedPort: 9000 # The port protocol (TCP/UDP) protocol: TCP web: port: 8000 # hostPort: 8000 expose: true exposedPort: 30305 nodePort: 30305 # The port protocol (TCP/UDP) protocol: TCP # Use nodeport if set. This is useful if you have configured Traefik in a # LoadBalancer # nodePort: 32080 # Port Redirections # Added in 2.2, you can make permanent redirects via entrypoints. # https://docs.traefik.io/routing/entrypoints/#redirection # redirectTo: websecure websecure: port: 8443 # # hostPort: 8443 expose: true exposedPort: 30443 # The port protocol (TCP/UDP) protocol: TCP nodePort: 30443   Verify the Traefik status and find the port number of the SSL and non-SSL services:\n$ kubectl get all -n traefik    Click here to see the sample output.   NAME READY STATUS RESTARTS AGE pod/traefik-5fc4947cf9-fbl9r 1/1 Running 5 7d17h NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/traefik NodePort 10.100.195.70 \u0026lt;none\u0026gt; 9000:31288/TCP,30305:30305/TCP,30443:30443/TCP 7d17h NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/traefik 1/1 1 1 7d17h NAME DESIRED CURRENT READY AGE replicaset.apps/traefik-5fc4947cf9 1 1 1 7d17h      Access the Traefik dashboard through the URL http://\u0026lt;MASTERNODE-HOSTNAME\u0026gt;:31288, with the HTTP host traefik.example.com:\n$ curl -H \u0026#34;host: \u0026lt;MASTERNODE-HOSTNAME\u0026gt;\u0026#34; http://\u0026lt;MASTERNODE-HOSTNAME\u0026gt;:31288/dashboard/  Note: Make sure that you specify a fully qualified node name for \u0026lt;MASTERNODE-HOSTNAME\u0026gt;\n   Configure Traefik to manage ingresses created in this namespace, where traefik is the Traefik namespace and soans is the namespace of the domain:\n  $ helm upgrade traefik traefik/traefik --namespace traefik --reuse-values \\  --set \u0026#34;kubernetes.namespaces={traefik,soans}\u0026#34;    Click here to see the sample output.   Release \u0026#34;traefik\u0026#34; has been upgraded. Happy Helming! NAME: traefik LAST DEPLOYED: Sun Sep 13 21:32:12 2020 NAMESPACE: traefik STATUS: deployed REVISION: 2 TEST SUITE: None    Create an ingress for the domain Create an ingress for the domain in the domain namespace by using the sample Helm chart. Here path-based routing is used for ingress. Sample values for default configuration are shown in the file ${WORKDIR}/charts/ingress-per-domain/values.yaml. By default, type is TRAEFIK, sslType is NONSSL, and domainType is soa. These values can be overridden by passing values through the command line or can be edited in the sample file values.yaml based on the type of configuration (NONSSL, SSL, and E2ESSL).\nIf needed, you can update the ingress YAML file to define more path rules (in section spec.rules.host.http.paths) based on the domain application URLs that need to be accessed. The template YAML file for the Traefik (ingress-based) load balancer is located at ${WORKDIR}/charts/ingress-per-domain/templates/traefik-ingress.yaml.\n Note: See here for all the configuration parameters.\n   Choose an appropriate LOADBALANCER_HOSTNAME for accessing the Oracle SOA Suite domain application URLs.\n$ export LOADBALANCER_HOSTNAME=\u0026lt;LOADBALANCER_HOSTNAME\u0026gt; For example, if you are executing the commands from a master node terminal, where the master hostname is LOADBALANCER_HOSTNAME:\n$ export LOADBALANCER_HOSTNAME=$(hostname -f)   Install ingress-per-domain using Helm for NONSSL configuration:\n$ cd ${WORKDIR} $ helm install soa-traefik-ingress \\  charts/ingress-per-domain \\  --namespace soans \\  --values charts/ingress-per-domain/values.yaml \\  --set \u0026#34;traefik.hostname=${LOADBALANCER_HOSTNAME}\u0026#34; Sample output:\nNAME: soa-traefik-ingress LAST DEPLOYED: Mon Jul 20 11:44:13 2020 NAMESPACE: soans STATUS: deployed REVISION: 1 TEST SUITE: None   For secured access (SSL termination and E2ESSL) to the Oracle SOA Suite application, create a certificate, and generate a Kubernetes secret:\n$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \u0026#34;/CN=*\u0026#34; $ kubectl -n soans create secret tls soainfra-tls-cert --key /tmp/tls1.key --cert /tmp/tls1.crt   Create the Traefik TLSStore custom resource.\nIn case of SSL termination, Traefik should be configured to use the user-defined SSL certificate. If the user-defined SSL certificate is not configured, Traefik will create a default SSL certificate. To configure a user-defined SSL certificate for Traefik, use the TLSStore custom resource. The Kubernetes secret created with the SSL certificate should be referenced in the TLSStore object. Run the following command to create the TLSStore:\n$ cat \u0026lt;\u0026lt;EOF | kubectl apply -f - apiVersion: traefik.containo.us/v1alpha1 kind: TLSStore metadata: name: default namespace: soans spec: defaultCertificate: secretName: soainfra-tls-cert EOF   Install ingress-per-domain using Helm for SSL configuration.\nThe Kubernetes secret name should be updated in the template file.\nThe template file also contains the following annotations:\ntraefik.ingress.kubernetes.io/router.entrypoints: websecure traefik.ingress.kubernetes.io/router.tls: \u0026#34;true\u0026#34; traefik.ingress.kubernetes.io/router.middlewares: soans-wls-proxy-ssl@kubernetescrd The entry point for SSL termination access and the Middleware name should be updated in the annotation. The Middleware name should be in the form \u0026lt;namespace\u0026gt;-\u0026lt;middleware name\u0026gt;@kubernetescrd.\n$ cd ${WORKDIR} $ helm install soa-traefik-ingress \\  charts/ingress-per-domain \\  --namespace soans \\  --values charts/ingress-per-domain/values.yaml \\  --set \u0026#34;traefik.hostname=${LOADBALANCER_HOSTNAME}\u0026#34; \\  --set sslType=SSL Sample output:\nNAME: soa-traefik-ingress LAST DEPLOYED: Mon Jul 20 11:44:13 2020 NAMESPACE: soans STATUS: deployed REVISION: 1 TEST SUITE: None   Install ingress-per-domain using Helm for E2ESSL configuration.\n Note: To use the E2ESSL configuration, you must have created the Oracle SOA Suite domain with sslEnabled set to true. See Create Oracle SOA Suite domains for details.\n $ cd ${WORKDIR} $ helm install soa-traefik-ingress \\  charts/ingress-per-domain \\  --namespace soans \\  --values charts/ingress-per-domain/values.yaml \\  --set sslType=E2ESSL Sample output:\nNAME: soa-traefik-ingress LAST DEPLOYED: Fri Apr 9 09:47:27 2021 NAMESPACE: soans STATUS: deployed REVISION: 1 TEST SUITE: None   For NONSSL access to the Oracle SOA Suite application, get the details of the services by the ingress:\n$ kubectl describe ingress soainfra-traefik -n soans    Click here to see all services supported by the above deployed ingress.   Name: soainfra-traefik Namespace: soans Address: Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026#34;default-http-backend\u0026#34; not found\u0026gt;) Rules: Host Path Backends ---- ---- -------- www.example.com /console soainfra-adminserver:7001 (10.244.0.45:7001) /em soainfra-adminserver:7001 (10.244.0.45:7001) /weblogic/ready soainfra-adminserver:7001 (10.244.0.45:7001) soainfra-cluster-soa-cluster:7003 (10.244.0.46:7003,10.244.0.47:7003) /soa-infra soainfra-cluster-soa-cluster:7003 (10.244.0.46:7003,10.244.0.47:7003) /soa/composer soainfra-cluster-soa-cluster:7003 (10.244.0.46:7003,10.244.0.47:7003) /integration/worklistapp soainfra-cluster-soa-cluster:7003 (10.244.0.46:7003,10.244.0.47:7003) Annotations: kubernetes.io/ingress.class: traefik Events: \u0026lt;none\u0026gt;      For SSL access to the Oracle SOA Suite application, get the details of the services by the above deployed ingress:\n$ kubectl describe ingress soainfra-traefik -n soans    Click here to see all services supported by the above deployed ingress.    ``` Name: soainfra-traefik Namespace: soans Address: Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) TLS: soainfra-tls-cert terminates www.example.com Rules: Host Path Backends ---- ---- -------- www.example.com /console soainfra-adminserver:7001 () /em soainfra-adminserver:7001 () /weblogic/ready soainfra-adminserver:7001 () soainfra-cluster-soa-cluster:7003 () /soa-infra soainfra-cluster-soa-cluster:7003 () /soa/composer soainfra-cluster-soa-cluster:7003 () /integration/worklistapp soainfra-cluster-soa-cluster:7003 () Annotations: kubernetes.io/ingress.class: traefik meta.helm.sh/release-name: soa-traefik-ingress meta.helm.sh/release-namespace: soans traefik.ingress.kubernetes.io/router.entrypoints: websecure traefik.ingress.kubernetes.io/router.middlewares: soans-wls-proxy-ssl@kubernetescrd traefik.ingress.kubernetes.io/router.tls: true Events: \u0026lt;none\u0026gt; ```      For E2ESSL access to the Oracle SOA Suite application, get the details of the services by the above deployed ingress:\n$ kubectl describe IngressRouteTCP soainfra-traefik -n soans\t   Click here to see all services supported by the above deployed ingress.    ``` Name: soa-cluster-routetcp Namespace: soans Labels: app.kubernetes.io/managed-by=Helm Annotations: meta.helm.sh/release-name: soa-traefik-ingress meta.helm.sh/release-namespace: soans API Version: traefik.containo.us/v1alpha1 Kind: IngressRouteTCP Metadata: Creation Timestamp: 2021-04-09T09:47:27Z Generation: 1 Managed Fields: API Version: traefik.containo.us/v1alpha1 Fields Type: FieldsV1 fieldsV1: f:metadata: f:annotations: .: f:meta.helm.sh/release-name: f:meta.helm.sh/release-namespace: f:labels: .: f:app.kubernetes.io/managed-by: f:spec: .: f:entryPoints: f:routes: f:tls: .: f:passthrough: Manager: Go-http-client Operation: Update Time: 2021-04-09T09:47:27Z Resource Version: 548305 Self Link: /apis/traefik.containo.us/v1alpha1/namespaces/soans/ingressroutetcps/soa-cluster-routetcp UID: 933e524c-b773-474b-a87f-560d69f08d4b Spec: Entry Points: websecure Routes: Match: HostSNI(`HostName`) Services: Termination Delay: 400 Name: soainfra-adminserver Port: 7002 Weight: 3 Tls: Passthrough: true Events: \u0026lt;none\u0026gt; ```      To confirm that the load balancer noticed the new ingress and is successfully routing to the domain server pods, you can send a request to the URL for the \u0026ldquo;WebLogic ReadyApp framework\u0026rdquo;, which should return an HTTP 200 status code, as follows:\n$ curl -v http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_PORT}/weblogic/ready * Trying 149.87.129.203... \u0026gt; GET http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_PORT}/weblogic/ready HTTP/1.1 \u0026gt; User-Agent: curl/7.29.0 \u0026gt; Accept: */* \u0026gt; Proxy-Connection: Keep-Alive \u0026gt; host: ${LOADBALANCER_HOSTNAME} \u0026gt; \u0026lt; HTTP/1.1 200 OK \u0026lt; Date: Sat, 14 Mar 2020 08:35:03 GMT \u0026lt; Vary: Accept-Encoding \u0026lt; Content-Length: 0 \u0026lt; Proxy-Connection: Keep-Alive \u0026lt; * Connection #0 to host localhost left intact   Verify domain application URL access For NONSSL configuration After setting up the Traefik (ingress-based) load balancer, verify that the domain application URLs are accessible through the non-SSL load balancer port 30305 for HTTP access. The sample URLs for Oracle SOA Suite domain of type soa are:\nhttp://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_NON_SSLPORT}/weblogic/ready http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_NON_SSLPORT}/console http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_NON_SSLPORT}/em http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_NON_SSLPORT}/soa-infra http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_NON_SSLPORT}/soa/composer http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_NON_SSLPORT}/integration/worklistapp For SSL configuration After setting up the Traefik (ingress-based) load balancer, verify that the domain applications are accessible through the SSL load balancer port 30443 for HTTPS access. The sample URLs for Oracle SOA Suite domain of type soa are:\nhttps://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_SSLPORT}/weblogic/ready https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_SSLPORT}/console https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_SSLPORT}/em https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_SSLPORT}/soa-infra https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_SSLPORT}/soa/composer https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_SSLPORT}/integration/worklistapp For E2ESSL configuration After setting up the Traefik (ingress-based) load balancer, verify that the domain applications are accessible through the SSL load balancer port 30443 for HTTPS access.\n  To access the application URLs from the browser, update /etc/hosts on the browser host (in Windows, C:\\Windows\\System32\\Drivers\\etc\\hosts) with the entries below\nX.X.X.X admin.domain.org X.X.X.X soa.domain.org X.X.X.X osb.domain.org  Note: The value of X.X.X.X is the host ipaddress on which this ingress is deployed.\n  Note: If you are behind any corporate proxy, make sure to update the browser proxy settings appropriately to access the host names updated /etc/hosts file.\n   The sample URLs for Oracle SOA Suite domain of type soa are:\nhttps://admin.org:${LOADBALANCER_SSLPORT}/weblogic/ready https://admin.org:${LOADBALANCER_SSLPORT}/console https://admin.org:${LOADBALANCER_SSLPORT}/em https://soa.org:${LOADBALANCER_SSLPORT}/soa-infra https://soa.org:${LOADBALANCER_SSLPORT}/soa/composer https://soa.org:${LOADBALANCER_SSLPORT}/integration/worklistapp Uninstall the Traefik ingress Uninstall and delete the ingress deployment:\n$ helm delete soa-traefik-ingress -n soans Uninstall Traefik $ helm delete traefik -n traefik "
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/manage-wcportal-domains/configure-load-balancer/traefik/",
	"title": "Traefik",
	"tags": [],
	"description": "Configure the ingress-based Traefik load balancer for an Oracle WebCenter Portal domain.",
	"content": "To load balance Oracle WebCenter Portal domain clusters, you can install the ingress-based Traefik load balancer (version 2.2.1 or later for production deployments) and configure it for non-SSL, SSL termination, and end-to-end SSL access of the application URL. Follow these steps to set up Traefik as a load balancer for an Oracle WebCenter Portal domain in a Kubernetes cluster:\n  Non-SSL and SSL termination\n Install the Traefik (ingress-based) load balancer Configure Traefik to manage ingresses Create an Ingress for the domain Verify domain application URL access Uninstall the Traefik ingress    End-to-end SSL configuration\n Install the Traefik load balancer for End-to-end SSL Configure Traefik to manage domain Create IngressRouteTCP Verify end-to-end SSL access Uninstall Traefik    Non-SSL and SSL termination Install the Traefik (ingress-based) load balancer   Use Helm to install the Traefik (ingress-based) load balancer. You can use the following values.yaml sample file and set kubernetes.namespaces as required.\n$ cd ${WORKDIR} $ kubectl create namespace traefik $ helm repo add traefik https://containous.github.io/traefik-helm-chart Sample output:\n\u0026#34;traefik\u0026#34; has been added to your repositories   Install Traefik:\n$ helm install traefik traefik/traefik \\  --namespace traefik \\  --values charts/traefik/values.yaml \\  --set \u0026#34;kubernetes.namespaces={traefik}\u0026#34; \\  --set \u0026#34;service.type=NodePort\u0026#34; --wait    Click here to see the sample output.   LAST DEPLOYED: Sun Sep 13 21:32:00 2020 NAMESPACE: traefik STATUS: deployed REVISION: 1 TEST SUITE: None    A sample values.yaml for deployment of Traefik 2.2.x looks like this:\nimage: name: traefik tag: 2.2.8 pullPolicy: IfNotPresent ingressRoute: dashboard: enabled: true annotations: {} labels: {} providers: kubernetesCRD: enabled: true kubernetesIngress: enabled: true ports: traefik: port: 9000 expose: true exposedPort: 9000 protocol: TCP web: port: 8000 expose: true exposedPort: 30305 nodePort: 30305 protocol: TCP websecure: port: 8443 expose: true exposedPort: 30443 protocol: TCP nodePort: 30443   Verify the Traefik status and find the port number of the SSL and non-SSL services:\n$ kubectl get all -n traefik    Click here to see the sample output.   NAME READY STATUS RESTARTS AGE pod/traefik-f9cf58697-29dlx 1/1 Running 0 35s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/traefik NodePort 10.100.113.37 \u0026lt;none\u0026gt; 9000:30070/TCP,30305:30305/TCP,30443:30443/TCP 35s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/traefik 1/1 1 1 36s NAME DESIRED CURRENT READY AGE replicaset.apps/traefik-f9cf58697 1 1 1 36s      Access the Traefik dashboard through the URL http://$(hostname -f):30070, with the HTTP host traefik.example.com:\n$ curl -H \u0026#34;host: $(hostname -f)\u0026#34; http://$(hostname -f):30070/dashboard/  Note: Make sure that you specify a fully qualified node name for $(hostname -f)\n   Configure Traefik to manage ingresses Configure Traefik to manage ingresses created in this namespace. In the following sample, traefik is the Traefik namespace and wcpns is the namespace of the domain:\n$ helm upgrade traefik traefik/traefik \\ --reuse-values \\ --namespace traefik \\ --set \u0026#34;kubernetes.namespaces={traefik,wcpns}\u0026#34; \\ --wait    Click here to see the sample output.   Release \u0026#34;traefik\u0026#34; has been upgraded. Happy Helming! NAME: traefik LAST DEPLOYED: Tue Jan 12 04:33:15 2021 NAMESPACE: traefik STATUS: deployed REVISION: 2 TEST SUITE: None    Create an ingress for the domain Create an ingress for the domain in the domain namespace by using the sample Helm chart. Here path-based routing is used for ingress. Sample values for default configuration are shown in the file ${WORKDIR}/charts/ingress-per-domain/values.yaml. By default, type is TRAEFIK , tls is Non-SSL. You can override these values by passing values through the command line or edit them in the sample values.yaml file based on the type of configuration (non-SSL or SSL).\n NOTE: This is not an exhaustive list of rules. You can enhance it based on the application URLs that need to be accessed externally.\n If needed, you can update the ingress YAML file to define more path rules (in section spec.rules.host.http.paths) based on the domain application URLs that need to be accessed. The template YAML file for the Traefik (ingress-based) load balancer is located at ${WORKDIR}/charts/ingress-per-domain/templates/traefik-ingress.yaml You can add new path rules like shown below .\n- path: /NewPathRule backend: serviceName: \u0026#39;Backend Service Name\u0026#39; servicePort: \u0026#39;Backend Service Port\u0026#39;   Install ingress-per-domain using Helm for non-SSL configuration:\n$ cd ${WORKDIR} $ helm install wcp-traefik-ingress \\  charts/ingress-per-domain \\  --namespace wcpns \\  --values charts/ingress-per-domain/values.yaml \\  --set \u0026#34;traefik.hostname=$(hostname -f)\u0026#34; Sample output:\nNAME: wcp-traefik-ingress LAST DEPLOYED: Mon Jul 20 11:44:13 2020 NAMESPACE: wcpns STATUS: deployed REVISION: 1 TEST SUITE: None   For secured access (SSL) to the Oracle WebCenter Portal application, create a certificate and generate a Kubernetes secret:\n$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \u0026#34;/CN=*\u0026#34; $ kubectl -n wcpns create secret tls wcp-domain-tls-cert --key /tmp/tls1.key --cert /tmp/tls1.crt  Note: The value of CN is the host on which this ingress is to be deployed.\n   Create the Traefik TLSStore custom resource.\nIn case of SSL termination, Traefik should be configured to use the user-defined SSL certificate. If the user-defined SSL certificate is not configured, Traefik creates a default SSL certificate. To configure a user-defined SSL certificate for Traefik, use the TLSStore custom resource. The Kubernetes secret created with the SSL certificate should be referenced in the TLSStore object. Run the following command to create the TLSStore:\n$ cat \u0026lt;\u0026lt;EOF | kubectl apply -f - apiVersion: traefik.containo.us/v1alpha1 kind: TLSStore metadata: name: default namespace: wcpns spec: defaultCertificate: secretName: wcp-domain-tls-cert EOF   Install ingress-per-domain using Helm for SSL configuration.\nThe Kubernetes secret name should be updated in the template file.\nThe template file also contains the following annotations:\ntraefik.ingress.kubernetes.io/router.entrypoints: websecure traefik.ingress.kubernetes.io/router.tls: \u0026#34;true\u0026#34; traefik.ingress.kubernetes.io/router.middlewares: wcpns-wls-proxy-ssl@kubernetescrd The entry point for SSL access and the Middleware name should be updated in the annotation. The Middleware name should be in the form \u0026lt;namespace\u0026gt;-\u0026lt;middleware name\u0026gt;@kubernetescrd.\n$ cd ${WORKDIR} $ helm install wcp-traefik-ingress \\  charts/ingress-per-domain \\  --namespace wcpns \\  --values charts/ingress-per-domain/values.yaml \\  --set \u0026#34;traefik.hostname=$(hostname -f)\u0026#34; \\  --set sslType=SSL Sample output:\nNAME: wcp-traefik-ingress LAST DEPLOYED: Mon Jul 20 11:44:13 2020 NAMESPACE: wcpns STATUS: deployed REVISION: 1 TEST SUITE: None   For non-SSL access to the Oracle WebCenter Portal application, get the details of the services by the ingress:\n$ kubectl describe ingress wcp-domain-traefik -n wcpns    Click here to see all services supported by the above deployed ingress.   Name: wcp-domain-traefik Namespace: wcpns Address: Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026#34;default-http-backend\u0026#34; not found\u0026gt;) Rules: Host Path Backends ---- ---- -------- www.example.com /webcenter wcp-domain-cluster-wcp-cluster:8888 (10.244.0.52:8888,10.244.0.53:8888) /console wcp-domain-adminserver:7001 (10.244.0.51:7001) /rsscrawl wcp-domain-cluster-wcp-cluster:8888 (10.244.0.52:8888,10.244.0.53:8888) /rest wcp-domain-cluster-wcp-cluster:8888 (10.244.0.52:8888,10.244.0.53:8888) /webcenterhelp wcp-domain-cluster-wcp-cluster:8888 (10.244.0.52:8888,10.244.0.53:8888) /em wcp-domain-adminserver:7001 (10.244.0.51:7001) /wsrp-tools wcp-domain-cluster-wcportlet-cluster:8889 (10.244.0.52:8889,10.244.0.53:8889) /portalTools wcp-domain-cluster-wcportlet-cluster:8889 (10.244.0.52:8889,10.244.0.53:8889) Annotations: kubernetes.io/ingress.class: traefik meta.helm.sh/release-name: wcp-traefik-ingress meta.helm.sh/release-namespace: wcpns Events: \u0026lt;none\u0026gt;      For SSL access to the Oracle WebCenter Portal application, get the details of the services by the above deployed ingress:\n$ kubectl describe ingress wcp-domain-traefik -n wcpns    Click here to see all services supported by the above deployed ingress.   Name: wcp-domain-traefik Namespace: wcpns Address: Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) TLS: wcp-domain-tls-cert terminates www.example.com Rules: Host Path Backends ---- ---- -------- www.example.com /webcenter wcp-domain-cluster-wcp-cluster:8888 (10.244.0.52:8888,10.244.0.53:8888) /console wcp-domain-adminserver:7001 (10.244.0.51:7001) /rsscrawl wcp-domain-cluster-wcp-cluster:8888 (10.244.0.52:8888,10.244.0.53:8888) /rest wcp-domain-cluster-wcp-cluster:8888 (10.244.0.52:8888,10.244.0.53:8888) /webcenterhelp wcp-domain-cluster-wcp-cluster:8888 (10.244.0.52:8888,10.244.0.53:8888) /em wcp-domain-adminserver:7001 (10.244.0.51:7001) /wsrp-tools wcp-domain-cluster-wcportlet-cluster:8889 (10.244.0.52:8889,10.244.0.53:8889) /portalTools wcp-domain-cluster-wcportlet-cluster:8889 (10.244.0.52:8889,10.244.0.53:8889) Annotations: kubernetes.io/ingress.class: traefik meta.helm.sh/release-name: wcp-traefik-ingress meta.helm.sh/release-namespace: wcpns traefik.ingress.kubernetes.io/router.entrypoints: websecure traefik.ingress.kubernetes.io/router.middlewares: wcpns-wls-proxy-ssl@kubernetescrd traefik.ingress.kubernetes.io/router.tls: true Events: \u0026lt;none\u0026gt;      To confirm that the load balancer noticed the new ingress and is successfully routing to the domain server pods, you can send a request to the URL for the WebLogic ReadyApp framework, which should return an HTTP 200 status code, as follows:\n$ curl -v http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_PORT}/weblogic/ready * Trying 149.87.129.203... \u0026gt; GET http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_PORT}/weblogic/ready HTTP/1.1 \u0026gt; User-Agent: curl/7.29.0 \u0026gt; Accept: */* \u0026gt; Proxy-Connection: Keep-Alive \u0026gt; host: $(hostname -f) \u0026gt; \u0026lt; HTTP/1.1 200 OK \u0026lt; Date: Sat, 14 Mar 2020 08:35:03 GMT \u0026lt; Vary: Accept-Encoding \u0026lt; Content-Length: 0 \u0026lt; Proxy-Connection: Keep-Alive \u0026lt; * Connection #0 to host localhost left intact   Verify domain application URL access For non-SSL configuration After setting up the Traefik (ingress-based) load balancer, verify that the domain application URLs are accessible through the non-SSL load balancer port 30305 for HTTP access. The sample URLs for Oracle WebCenter Portal domain are:\nhttp://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/webcenter http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/console http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/em http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/rsscrawl http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/rest http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/webcenterhelp http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/wsrp-tools http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/portalTools For SSL configuration After setting up the Traefik (ingress-based) load balancer, verify that the domain applications are accessible through the SSL load balancer port 30443 for HTTPS access. The sample URLs for Oracle WebCenter Portal domain are:\nhttps://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/webcenter https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/console https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/em https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/rsscrawl https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/rest https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/webcenterhelp https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/wsrp-tools https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/portalTools Uninstall the Traefik ingress Uninstall and delete the ingress deployment:\n$ helm delete wcp-traefik-ingress -n wcpns End-to-end SSL configuration Install the Traefik load balancer for end-to-end SSL   Use Helm to install the Traefik (ingress-based) load balancer. You can use the values.yaml sample file and set kubernetes.namespaces as required.\n$ cd ${WORKDIR} $ kubectl create namespace traefik $ helm repo add traefik https://containous.github.io/traefik-helm-chart Sample output:\n\u0026#34;traefik\u0026#34; has been added to your repositories   Install Traefik:\n$ helm install traefik traefik/traefik \\  --namespace traefik \\  --values charts/traefik/values.yaml \\  --set \u0026#34;kubernetes.namespaces={traefik}\u0026#34; \\  --set \u0026#34;service.type=NodePort\u0026#34; --wait    Click here to see the sample output.   LAST DEPLOYED: Sun Sep 13 21:32:00 2020 NAMESPACE: traefik STATUS: deployed REVISION: 1 TEST SUITE: None      Verify the Traefik operator status and find the port number of the SSL and non-SSL services:\n$ kubectl get all -n traefik    Click here to see the sample output.   NAME READY STATUS RESTARTS AGE pod/traefik-845f5d6dbb-swb96 1/1 Running 0 32s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/traefik NodePort 10.99.52.249 \u0026lt;none\u0026gt; 9000:31288/TCP,30305:30305/TCP,30443:30443/TCP 32s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/traefik 1/1 1 1 33s NAME DESIRED CURRENT READY AGE replicaset.apps/traefik-845f5d6dbb 1 1 1 33s      Access the Traefik dashboard through the URL http://$(hostname -f):31288, with the HTTP host traefik.example.com:\n$ curl -H \u0026#34;host: $(hostname -f)\u0026#34; http://$(hostname -f):31288/dashboard/  Note: Make sure that you specify a fully qualified node name for $(hostname -f).\n   Configure Traefik to manage the domain Configure Traefik to manage the domain application service created in this namespace. In the following sample, traefik is the Traefik namespace and wcpns is the namespace of the domain:\n$ helm upgrade traefik traefik/traefik --namespace traefik --reuse-values \\ --set \u0026#34;kubernetes.namespaces={traefik,wcpns}\u0026#34;    Click here to see the sample output.   Release \u0026quot;traefik\u0026quot; has been upgraded. Happy Helming! NAME: traefik LAST DEPLOYED: Sun Sep 13 21:32:12 2020 NAMESPACE: traefik STATUS: deployed REVISION: 2 TEST SUITE: None    Create IngressRouteTCP   For each backend service, create different ingresses, as Traefik does not support multiple paths or rules with annotation ssl-passthrough. For example, for wcp-domain-adminserver and wcp-domain-cluster-wcp-cluster, different ingresses must be created.\n  To enable SSL passthrough in Traefik, you can configure a TCP router. A sample YAML for IngressRouteTCP is available at ${WORKDIR}/charts/ingress-per-domain/tls/traefik-tls.yaml. The following should be updated in traefik-tls.yaml:\n The service name and the SSL port should be updated in the services. The load balancer host name should be updated in the HostSNI rule.  Sample traefik-tls.yaml:\napiVersion: traefik.containo.us/v1alpha1 kind: IngressRouteTCP metadata: name: wcp-domain-cluster-routetcp namespace: wcpns spec: entryPoints: - websecure routes: - match: HostSNI(`${LOADBALANCER_HOSTNAME}`) services: - name: wcp-domain-cluster-wcp-cluster port: 8888 weight: 3 TerminationDelay: 400 tls: passthrough: true   Create the IngressRouteTCP:\n$ kubectl apply -f traefik-tls.yaml   Verify end-to-end SSL access Verify the access to application URLs exposed through the configured service. The configured WCP cluster service enables you to access the following WCP domain URLs:\nhttps://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/webcenter https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/rsscrawl https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/rest https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/webcenterhelp Uninstall Traefik $ helm delete traefik -n traefik $ cd ${WORKDIR}/charts/ingress-per-domain/tls $ kubectl delete -f traefik-tls.yaml "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/adminguide/configure-load-balancer/traefik/",
	"title": "Traefik",
	"tags": [],
	"description": "Configure the ingress-based Traefik load balancer for Oracle WebCenter Sites domains.",
	"content": "This section provides information about how to install and configure the ingress-based Traefik load balancer (version 2.2.1 or later for production deployments) to load balance Oracle WebCenter Sites domain clusters. You can configure Traefik for access of the application URL.\nFollow these steps to set up Traefik as a load balancer for an Oracle WebCenter Sites domain in a Kubernetes cluster:\nSetting Up Loadbalancer Traefik for the WebCenter Sites Domain on K8S Follow these steps to set up Traefik as a loadbalancer for the Oracle WebCenter Sites domain:\n Install the Traefik Load Balancer Configure Traefik to Manage Ingresses Create an Ingress for the Domain Verify that You can Access the Domain URL  Install the Traefik Load Balancer   Use helm to install the Traefik load balancer. For detailed information, see this document. Use the values.yaml file in the sample but set kubernetes.namespaces specifically.\n Add the repo\n $ cd ${WORKDIR}/weblogic-kubernetes-operator $ kubectl create namespace traefik $ helm repo add traefik https://helm.traefik.io/traefik  Update the repo\n $ helm repo update  Helm Install for Traefik\n $ helm install traefik traefik/traefik \\  --namespace traefik \\  --values kubernetes/charts/traefik/values.yaml \\  --set \u0026#34;kubernetes.namespaces={traefik}\u0026#34; \\  --set \u0026#34;service.type=NodePort\u0026#34; --wait NAME:traefik-operator LAST DEPLOYED: Fri Jun 19 00:17:57 2020 NAMESPACE: traefik STATUS: deployed REVISION: 1 TEST SUITE: None   Access the Traefik dashboard through the URL http://$(hostname -f):30305, with the HTTP host traefik.example.com. NOTE: Make sure you specify full qualified node name for $(hostname -f).\n$ curl -H \u0026#39;host: $(hostname -f)\u0026#39; http://$(hostname -f):30305/ \u0026lt;a href=\u0026#34;/dashboard/\u0026#34;\u0026gt;Found\u0026lt;/a\u0026gt;. $   Configure Traefik to Manage Ingresses Configure Traefik to manage Ingresses created in this namespace: Note: Here traefik is the Traefik namespace, wcsites-ns is the namespace of the domain.\n Helm upgrade for traefik\n $ helm upgrade traefik traefik/traefik --namespace traefik --reuse-values \\  --set \u0026#34;kubernetes.namespaces={traefik,wcsites-ns}\u0026#34; NAME:traefik-operator LAST DEPLOYED: Fri Jun 19 00:18:50 2020 NAMESPACE: traefik STATUS: deployed REVISION: 2 TEST SUITE: None Create an Ingress for the Domain   Create an ingress for the domain in the domain namespace by using the sample Helm chart. Here path-based routing is used for ingress. Sample values for default configuration are shown in the file ${WORKDIR}/kubernetes/charts/ingress-per-domain/values.yaml. By default, type is TRAEFIK, sslType is NONSSL, and domainType is wcs. These values can be overridden by passing values through the command line or can be edited in the sample file values.yaml.\nIf needed, you can update the ingress YAML file to define more path rules (in section spec.rules.host.http.paths) based on the domain application URLs that need to be accessed. The template YAML file for the Traefik (ingress-based) load balancer is located at ${WORKDIR}/kubernetes/charts/ingress-per-domain/templates/traefik-ingress.yaml.\nFor detailed instructions about ingress, see this page.\nFor now, you can update the kubernetes/charts/ingress-per-domain/values.yaml with appropriate values.\n  Update the kubernetes/charts/ingress-per-domain/templates/traefik-ingress.yaml with the url routes to be load balanced.\nNOTE: This is not an exhaustive list of rules. You can enhance it based on the application urls that need to be accessed externally. These rules hold good for domain type wcs.\n  Install \u0026ldquo;ingress-per-domain\u0026rdquo; using helm.\n Helm Install ingress-per-domain\n $ helm install wcsitesinfra-ingress kubernetes/charts/ingress-per-domain \\  --namespace wcsites-ns \\  --values kubernetes/charts/ingress-per-domain/values.yaml \\  --set \u0026#34;traefik.hostname=$(hostname -f)\u0026#34; NAME: wcsitesinfra-ingress LAST DEPLOYED: Fri Jun 19 00:18:50 2020 NAMESPACE: wcsites-ns STATUS: deployed REVISION: 1 TEST SUITE: None   To confirm that the load balancer noticed the new Ingress and is successfully routing to the domain\u0026rsquo;s server pods, you can send a request to the URL for the \u0026ldquo;WebLogic ReadyApp framework\u0026rdquo; which should return a HTTP 200 status code, as shown in the example below:\n  -bash-4.2$ curl -v http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT}/weblogic/ready * Trying 149.87.129.203... \u0026gt; GET http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT}/weblogic/ready HTTP/1.1 \u0026gt; User-Agent: curl/7.29.0 \u0026gt; Accept: */* \u0026gt; Proxy-Connection: Keep-Alive \u0026gt; host: $(hostname -f) \u0026gt; \u0026lt; HTTP/1.1 200 OK \u0026lt; Date: Sat, 14 Mar 2020 08:35:03 GMT \u0026lt; Vary: Accept-Encoding \u0026lt; Content-Length: 0 \u0026lt; Proxy-Connection: Keep-Alive \u0026lt; * Connection #0 to host localhost left intact Verify that You can Access the Domain URL After setting up the Traefik loadbalancer, verify that the domain applications are accessible through the loadbalancer port 30305. Through load balancer (Traefik port 30305), the following URLs are available for setting up domains of WebCenter Sites domain types:\nhttp://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT}/weblogic/ready http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT}/console http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT}/em http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT}/sites/version.jsp "
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/manage-wcportal-domains/monitoring-and-publishing-logs/publishing-logs/fluentd/",
	"title": " Fluentd",
	"tags": [],
	"description": "Describes how to configure a WebCenter Portal domain to use Fluentd to send log information to Elasticsearch.",
	"content": "Overview You can configure your WebLogic domain to use Fluentd so it can send the log information to Elasticsearch.\nHere\u0026rsquo;s how this works:\n fluentd runs as a separate container in the Administration Server and Managed Server pods. The log files reside on a volume that is shared between the weblogic-server and fluentd containers. fluentd tails the domain logs files and exports them to Elasticsearch. A ConfigMap contains the filter and format rules for exporting log records.  Prerequisites It is assumed that you are editing an existing WebCenter Portal domain. However, you can make all the changes to the domain YAML before creating the domain. A complete example of a domain definition with fluentd configuration is at the end of this document.\nThese identifiers are used in the sample commands.\n wcpns: WebCenter Portal domain namespace wcp-domain: domainUID wcp-domain-domain-credentials: Kubernetes secret   The sample Elasticsearch configuration is:\nelasticsearchhost: elasticsearch.wcp-domain.sample.com elasticsearchport: 443 elasticsearchuser: username elasticsearchpassword: password Install Elasticsearch and Kibana To install Elasticsearch and Kibana, run the following command:\n$ kubectl apply -f kubernetes/samples/scripts/elasticsearch-and-kibana/elasticsearch_and_kibana.yaml Configure log files to use a volume The domain log files must be written to a volume that can be shared between the weblogic-server and fluentd containers. The following elements are required to accomplish this:\n logHome must be a path that can be shared between containers. logHomeEnabled must be set to true so that the logs are written outside the pod and persist across pod restarts. A volume must be defined on which the log files will reside. In the example, emptyDir is a volume that gets created when a Pod is created. It will persist across pod restarts but deleting the pod would delete the emptyDir content. The volumeMounts mounts the named volume created with emptyDir and establishes the base path for accessing the volume.  NOTE: For brevity, only the paths to the relevant configuration are here.\nFor Example, run : kubectl edit domain wcp-domain -n wcpns and make the following edits:\nspec: logHome: /u01/oracle/user_projects/domains/logs/wcp-domain logHomeEnabled: true serverPod: volumes: - emptyDir: {} name: weblogic-domain-storage-volume volumeMounts: - mountPath: /scratch name: weblogic-domain-storage-volume Add Elasticsearch secrets to WebLogic domain credentials Configure the fluentd container to look for Elasticsearch parameters in the domain credentials. Edit the domain credentials and add the parameters shown in the example below.\nFor example, run: kubectl edit secret wcp-domain-domain-credentials -n wcpns and add the base64 encoded values of each Elasticsearch parameter:\nelasticsearchhost: ZWxhc3RpY3NlYXJjaC5ib2JzLWJvb2tzLnNhbXBsZS5jb20= elasticsearchport: NDQz elasticsearchuser: Ym9i elasticsearchpassword: d2VsY29tZTE= Create Fluentd configuration Create a ConfigMap named fluentd-config in the namespace of the domain. The ConfigMap contains the parsing rules and Elasticsearch configuration.\nHere\u0026rsquo;s an explanation of some elements defined in the ConfigMap:\n The @type tail indicates that tail is used to obtain updates to the log file. The path of the log file obtained from the LOG_PATH environment variable that is defined in the fluentd container. The tag value of log records obtained from the DOMAIN_UID environment variable that is defined in the fluentd container. The \u0026lt;parse\u0026gt; section defines how to interpret and tag each element of a log record. The \u0026lt;match **\u0026gt; section contains the configuration information for connecting to Elasticsearch and defines the index name of each record to be the domainUID. The scheme indicates type of connection between fluentd and Elasticsearch.  The following is an example of how to create the ConfigMap:\ncat \u0026lt;\u0026lt;EOF | kubectl apply -f - apiVersion: v1 kind: ConfigMap metadata: labels: weblogic.domainUID: wcp-domain weblogic.resourceVersion: domain-v2 name: fluentd-config namespace: wcpns data: fluentd.conf: | \u0026lt;match fluent.**\u0026gt; @type null \u0026lt;/match\u0026gt; \u0026lt;source\u0026gt; @type tail path \u0026#34;#{ENV[\u0026#39;LOG_PATH\u0026#39;]}\u0026#34; pos_file /tmp/server.log.pos read_from_head true tag \u0026#34;#{ENV[\u0026#39;DOMAIN_UID\u0026#39;]}\u0026#34; # multiline_flush_interval 20s \u0026lt;parse\u0026gt; @type multiline format_firstline /^####/ format1 /^####\u0026lt;(?\u0026lt;timestamp\u0026gt;(.*?))\u0026gt;/ format2 / \u0026lt;(?\u0026lt;level\u0026gt;(.*?))\u0026gt;/ format3 / \u0026lt;(?\u0026lt;subSystem\u0026gt;(.*?))\u0026gt;/ format4 / \u0026lt;(?\u0026lt;serverName\u0026gt;(.*?))\u0026gt;/ format5 / \u0026lt;(?\u0026lt;serverName2\u0026gt;(.*?))\u0026gt;/ format6 / \u0026lt;(?\u0026lt;threadName\u0026gt;(.*?))\u0026gt;/ format7 / \u0026lt;(?\u0026lt;info1\u0026gt;(.*?))\u0026gt;/ format8 / \u0026lt;(?\u0026lt;info2\u0026gt;(.*?))\u0026gt;/ format9 / \u0026lt;(?\u0026lt;info3\u0026gt;(.*?))\u0026gt;/ format10 / \u0026lt;(?\u0026lt;sequenceNumber\u0026gt;(.*?))\u0026gt;/ format11 / \u0026lt;(?\u0026lt;severity\u0026gt;(.*?))\u0026gt;/ format12 / \u0026lt;(?\u0026lt;messageID\u0026gt;(.*?))\u0026gt;/ format13 / \u0026lt;(?\u0026lt;message\u0026gt;(.*?))\u0026gt;/ \u0026lt;/parse\u0026gt; \u0026lt;/source\u0026gt; \u0026lt;match **\u0026gt; @type elasticsearch host \u0026#34;#{ENV[\u0026#39;ELASTICSEARCH_HOST\u0026#39;]}\u0026#34; port \u0026#34;#{ENV[\u0026#39;ELASTICSEARCH_PORT\u0026#39;]}\u0026#34; user \u0026#34;#{ENV[\u0026#39;ELASTICSEARCH_USER\u0026#39;]}\u0026#34; password \u0026#34;#{ENV[\u0026#39;ELASTICSEARCH_PASSWORD\u0026#39;]}\u0026#34; index_name \u0026#34;#{ENV[\u0026#39;DOMAIN_UID\u0026#39;]}\u0026#34; scheme http \u0026lt;/match\u0026gt; EOF Mount the ConfigMap as a volume in the weblogic-server container Edit the domain definition and configure a volume for the ConfigMap containing the fluentd configuration.\nNOTE: For brevity, only the paths to the relevant configuration are shown.\nFor example, run: kubectl edit domain wcp-domain -n wcpns and add the following portions to the domain definition.\nspec: serverPod: volumes: - configMap: defaultMode: 420 name: fluentd-config name: fluentd-config-volume Add fluentd container Add a container to the domain to run fluentd in the Administration Server and Managed Server pods.\nThe container definition:\n Defines a LOG_PATH environment variable that points to the log location of bobbys-front-end. Defines ELASTICSEARCH_HOST, ELASTICSEARCH_PORT, ELASTICSEARCH_USER, and ELASTICSEARCH_PASSWORD environment variables that are all retrieving their values from the secret wcp-domain-domain-credentials. Includes volume mounts for the fluentd-config ConfigMap and the volume containing the domain logs.  NOTE: For brevity, only the paths to the relevant configuration are shown.\nFor example, run: kubectl edit domain wcp-domain -n wcpcns and add the following container definition.\nspec: serverPod: containers: - args: - -c - /etc/fluent.conf env: - name: DOMAIN_UID valueFrom: fieldRef: fieldPath: metadata.labels[\u0026#39;weblogic.domainUID\u0026#39;] - name: SERVER_NAME valueFrom: fieldRef: fieldPath: metadata.labels[\u0026#39;weblogic.serverName\u0026#39;] - name: LOG_PATH value: /u01/oracle/user_projects/domains/logs/wcp-domain/$(SERVER_NAME).log - name: FLUENTD_CONF value: fluentd.conf - name: FLUENT_ELASTICSEARCH_SED_DISABLE value: \u0026#34;true\u0026#34; - name: ELASTICSEARCH_HOST valueFrom: secretKeyRef: key: elasticsearchhost name: wcp-domain-domain-credentials - name: ELASTICSEARCH_PORT valueFrom: secretKeyRef: key: elasticsearchport name: wcp-domain-domain-credentials - name: ELASTICSEARCH_USER valueFrom: secretKeyRef: key: elasticsearchuser name: wcp-domain-domain-credentials optional: true - name: ELASTICSEARCH_PASSWORD valueFrom: secretKeyRef: key: elasticsearchpassword name: wcp-domain-domain-credentials optional: true image: fluent/fluentd-kubernetes-daemonset:v1.3.3-debian-elasticsearch-1.3 imagePullPolicy: IfNotPresent name: fluentd resources: {} volumeMounts: - mountPath: /fluentd/etc/fluentd.conf name: fluentd-config-volume subPath: fluentd.conf - mountPath: /scratch name: weblogic-domain-storage-volume Verify logs exported to Elasticsearch The logs are sent to Elasticsearch after you start the Administration Server and Managed Server pods after making the changes described previously.\nYou can check if the fluentd container is successfully tailing the log by executing a command like kubectl logs -f wcp-domain-adminserver -n wcpns fluentd. The log output should look similar to this:\n2019-10-01 16:23:44 +0000 [info]: #0 starting fluentd worker pid=13 ppid=9 worker=0 2019-10-01 16:23:44 +0000 [warn]: #0 /scratch/logs/bobs-bookstore/managed-server1.log not found. Continuing without tailing it. 2019-10-01 16:23:44 +0000 [info]: #0 fluentd worker is now running worker=0 2019-10-01 16:24:01 +0000 [info]: #0 following tail of /scratch/logs/bobs-bookstore/managed-server1.log When you connect to Kibana, you will see an index created for the domainUID.\nDomain example The following is a complete example of a domain custom resource with a fluentd container configured.\napiVersion: weblogic.oracle/v8 kind: Domain metadata: labels: weblogic.domainUID: wcp-domain name: wcp-domain namespace: wcpns spec: domainHome: /u01/oracle/user_projects/domains/wcp-domain domainHomeSourceType: PersistentVolume image: \u0026#34;oracle/wcportal:12.2.1.4\u0026#34; imagePullPolicy: \u0026#34;IfNotPresent\u0026#34; webLogicCredentialsSecret: name: wcp-domain-domain-credentials includeServerOutInPodLog: true logHomeEnabled: true httpAccessLogInLogHome: true logHome: /u01/oracle/user_projects/domains/logs/wcp-domain dataHome: \u0026#34;\u0026#34; serverStartPolicy: \u0026#34;IF_NEEDED\u0026#34; adminServer: serverStartState: \u0026#34;RUNNING\u0026#34; clusters: - clusterName: wcp_cluster serverStartState: \u0026#34;RUNNING\u0026#34; serverPod: affinity: podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 100 podAffinityTerm: labelSelector: matchExpressions: - key: \u0026#34;weblogic.clusterName\u0026#34; operator: In values: - $(CLUSTER_NAME) topologyKey: \u0026#34;kubernetes.io/hostname\u0026#34; replicas: 2 serverPod: containers: - args: - -c - /etc/fluent.conf env: - name: DOMAIN_UID valueFrom: fieldRef: fieldPath: metadata.labels[\u0026#39;weblogic.domainUID\u0026#39;] - name: SERVER_NAME valueFrom: fieldRef: fieldPath: metadata.labels[\u0026#39;weblogic.serverName\u0026#39;] - name: LOG_PATH value: /u01/oracle/user_projects/domains/logs/wcp-domain/$(SERVER_NAME).log - name: FLUENTD_CONF value: fluentd.conf - name: FLUENT_ELASTICSEARCH_SED_DISABLE value: \u0026#34;true\u0026#34; - name: ELASTICSEARCH_HOST valueFrom: secretKeyRef: key: elasticsearchport name: wcp-domain-domain-credentials - name: ELASTICSEARCH_PORT valueFrom: secretKeyRef: key: elasticsearchhost name: wcp-domain-domain-credentials - name: ELASTICSEARCH_USER valueFrom: secretKeyRef: key: elasticsearchuser name: wcp-domain-domain-credentials - name: ELASTICSEARCH_PASSWORD valueFrom: secretKeyRef: key: elasticsearchpassword name: wcp-domain-domain-credentials image: fluent/fluentd-kubernetes-daemonset:v1.11.5-debian-elasticsearch6-1.0 imagePullPolicy: IfNotPresent name: fluentd resources: {} volumeMounts: - mountPath: /fluentd/etc/fluentd.conf name: fluentd-config-volume subPath: fluentd.conf - mountPath: /u01/oracle/user_projects/domains name: weblogic-domain-storage-volume env: - name: JAVA_OPTIONS value: -Dweblogic.StdoutDebugEnabled=false - name: USER_MEM_ARGS value: \u0026#39;-Djava.security.egd=file:/dev/./urandom -Xms1g -Xmx2g\u0026#39; volumeMounts: - mountPath: /u01/oracle/user_projects/domains name: weblogic-domain-storage-volume volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: wcp-domain-domain-pvc - emptyDir: {} name: weblogic-domain-storage-volume - configMap: defaultMode: 420 name: fluentd-config name: fluentd-config-volume serverStartPolicy: IF_NEEDED webLogicCredentialsSecret: name: wcp-domain-domain-credentials Get the Kibana dashboard port information as shown below: -bash-4.2$ kubectl get pods -w NAME READY STATUS RESTARTS AGE elasticsearch-8bdb7cf54-mjs6s 1/1 Running 0 4m3s kibana-dbf8964b6-n8rcj 1/1 Running 0 4m3s -bash-4.2$ kubectl get svc NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE elasticsearch ClusterIP 10.100.11.154 \u0026lt;none\u0026gt; 9200/TCP,9300/TCP 4m32s kibana NodePort 10.97.205.0 \u0026lt;none\u0026gt; 5601:31884/TCP 4m32s kubernetes ClusterIP 10.96.0.1 \u0026lt;none\u0026gt; 443/TCP 71d You can access the Kibana dashboard at http://mycompany.com:kibana-nodeport/. In our example, the node port is 31884.\nCreate an Index Pattern in Kibana Create an index pattern wcp-domain* in Kibana by navigating to the dashboard through the Management option. When the servers are started, the log data is shown on the Kibana dashboard.\n"
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/manage-wcportal-domains/monitoring-and-publishing-logs/monitoring-domain/",
	"title": " Monitor a WebCenter Portal domain",
	"tags": [],
	"description": "Monitor an WebCenter Portal instance using Prometheus and Grafana.",
	"content": "You can monitor a WebCenter Portal domain using Prometheus and Grafana by exporting the metrics from the domain instance using the WebLogic Monitoring Exporter. This sample shows you how to set up the WebLogic Monitoring Exporter to push the data to Prometheus.\nPrerequisites This document assumes that the Prometheus Operator is deployed on the Kubernetes cluster. If it is not already deployed, follow the steps below for deploying the Prometheus Operator.\nPrepare to use the setup monitoring script The sample scripts for setup monitoring for OracleWebCenterPortal domain are available at ${WORKDIR}/monitoring-service.\nYou must edit monitoring-inputs.yaml(or a copy of it) to provide the details of your domain. Refer to the configuration parameters below to understand the information that you must provide in this file.\nConfiguration parameters The following parameters can be provided in the inputs file.\n   Parameter Description Default     domainUID domainUID of the OracleWebCenterPortal domain. wcp-domain   domainNamespace Kubernetes namespace of the OracleWebCenterPortal domain. wcpns   setupKubePrometheusStack Boolean value indicating whether kube-prometheus-stack (Prometheus, Grafana and Alertmanager) to be installed true   additionalParamForKubePrometheusStack The script install\u0026rsquo;s kube-prometheus-stack with service.type as NodePort and values for service.nodePort as per the parameters defined in monitoring-inputs.yaml. Use additionalParamForKubePrometheusStack parameter to further configure with additional parameters as per values.yaml. Sample value to disable NodeExporter, Prometheus-Operator TLS support and Admission webhook support for PrometheusRules resources is --set nodeExporter.enabled=false --set prometheusOperator.tls.enabled=false --set prometheusOperator.admissionWebhooks.enabled=false    monitoringNamespace Kubernetes namespace for monitoring setup. monitoring   adminServerName Name of the Administration Server. AdminServer   adminServerPort Port number for the Administration Server inside the Kubernetes cluster. 7001   wcpClusterName Name of the wcpCluster. wcp_cluster   wcpManagedServerPort Port number of the managed servers in the wcpCluster. 8888   wlsMonitoringExporterTowcpCluster Boolean value indicating whether to deploy WebLogic Monitoring Exporter to wcpCluster. false   wcpPortletClusterName Name of the wcpPortletCluster. wcportlet-cluster   wcpManagedServerPort Port number of the Portlet managed servers in the wcpPortletCluster. 8889   wlsMonitoringExporterTowcpPortletCluster Boolean value indicating whether to deploy WebLogic Monitoring Exporter to wcpPortletCluster. false   exposeMonitoringNodePort Boolean value indicating if the Monitoring Services (Prometheus, Grafana and Alertmanager) is exposed outside of the Kubernetes cluster. false   prometheusNodePort Port number of the Prometheus outside the Kubernetes cluster. 32101   grafanaNodePort Port number of the Grafana outside the Kubernetes cluster. 32100   alertmanagerNodePort Port number of the Alertmanager outside the Kubernetes cluster. 32102   weblogicCredentialsSecretName Name of the Kubernetes secret which has Administration Server’s user name and password. wcp-domain-domain-credentials    Note that the values specified in the monitoring-inputs.yaml file will be used to install kube-prometheus-stack (Prometheus, Grafana and Alertmanager) and deploying WebLogic Monitoring Exporter into the OracleWebCenterPortal domain. Hence make the domain specific values to be same as that used during domain creation.\nRun the setup monitoring script Update the values in monitoring-inputs.yaml as per your requirement and run the setup-monitoring.sh script, specifying your inputs file:\n$ cd ${WORKDIR}/monitoring-service $ ./setup-monitoring.sh \\  -i monitoring-inputs.yaml The script will perform the following steps:\n Helm install prometheus-community/kube-prometheus-stack of version \u0026ldquo;16.5.0\u0026rdquo; if setupKubePrometheusStack is set to true. Deploys WebLogic Monitoring Exporter to Administration Server. Deploys WebLogic Monitoring Exporter to wcpCluster if wlsMonitoringExporterTowcpCluster is set to true. Deploys WebLogic Monitoring Exporter to wcpPortletCluster if wlsMonitoringExporterTowcpPortletCluster is set to true. Exposes the Monitoring Services (Prometheus at 32101, Grafana at 32100 and Alertmanager at 32102) outside of the Kubernetes cluster if exposeMonitoringNodePort is set to true. Imports the WebLogic Server Grafana Dashboard if setupKubePrometheusStack is set to true.  Verify the results The setup monitoring script will report failure if there was any error. However, verify that required resources were created by the script.\nVerify the kube-prometheus-stack To confirm that prometheus-community/kube-prometheus-stack was installed when setupKubePrometheusStack is set to true, run the following command:\n$ helm ls -n monitoring Sample output:\n$ helm ls -n monitoring NAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION monitoring monitoring 1 2021-06-18 12:58:35.177221969 +0000 UTC deployed kube-prometheus-stack-16.5.0 0.48.0 $ Verify the Prometheus, Grafana and Alertmanager setup When exposeMonitoringNodePort was set to true, verify that monitoring services are accessible outside of the Kubernetes cluster:\n 32100 is the external port for Grafana and with credentials admin:admin 32101 is the external port for Prometheus 32102 is the external port for Alertmanager  Verify the service discovery of WebLogic Monitoring Exporter Verify whether prometheus is able to discover wls-exporter and collect the metrics:\n  Access the Prometheus dashboard at http://mycompany.com:32101/\n  Navigate to Status to see the Service Discovery details.\n  Verify that wls-exporter is listed in the discovered services.\n  Verify the WebLogic Server dashoard You can access the Grafana dashboard at http://mycompany.com:32100/.\n  Log in to Grafana dashboard with username: admin and password: admin.\n  Navigate to \u0026ldquo;WebLogic Server Dashboard\u0026rdquo; under General and verify.\nThis displays the WebLogic Server Dashboard.\n  Delete the monitoring setup To delete the monitoring setup created by Run the setup monitoring script, run the below command:\n$ cd ${WORKDIR}/monitoring-service $ ./delete-monitoring.sh \\  -i monitoring-inputs.yaml "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/configure-design-console/using-the-design-console-with-nginx-non-ssl/",
	"title": "a. Using Design Console with NGINX(non-SSL)",
	"tags": [],
	"description": "Configure Design Console with NGINX(non-SSL).",
	"content": "Configure an NGINX ingress (non-SSL) to allow Design Console to connect to your Kubernetes cluster.\n  Prerequisites\n  Setup routing rules for the Design Console ingress\n  Create the ingress\n  Update the T3 channel\n  Restart the OIG Managed Server\n  Design Console client\na. Using an on-premises installed Design Console\nb. Using a container image for Design Console\n  Login to the Design Console\n  Prerequisites If you haven\u0026rsquo;t already configured an NGINX ingress controller (Non-SSL) for OIG, follow Using an Ingress with NGINX (non-SSL).\nMake sure you know the master hostname and ingress port for NGINX before proceeding e.g http://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}.\nNote: In all steps below if you are using a load balancer for your ingress instead of NodePort then replace ${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT} with `${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT}.\nSetup routing rules for the Design Console ingress   Setup routing rules by running the following commands:\n$ cd $WORKDIR/kubernetes/design-console-ingress Edit values.yaml and ensure that tls: NONSSL and domainUID: governancedomain are set, for example:\n# Load balancer type. Supported values are: NGINX type: NGINX # Type of Configuration Supported Values are : NONSSL,SSL # tls: NONSSL tls: NONSSL # TLS secret name if the mode is SSL secretName: dc-tls-cert # WLS domain as backend to the load balancer wlsDomain: domainUID: governancedomain oimClusterName: oim_cluster oimServerT3Port: 14002   Create the ingress   Run the following command to create the ingress:\n$ cd $WORKDIR $ helm install governancedomain-nginx-designconsole kubernetes/design-console-ingress --namespace oigns --values kubernetes/design-console-ingress/values.yaml For example:\nThe output will look similar to the following:\nNAME: governancedomain-nginx-designconsole LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oigns STATUS: deployed REVISION: 1 TEST SUITE: None   Run the following command to show the ingress is created successfully:\n$ kubectl describe ing governancedomain-nginx-designconsole -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe ing governancedomain-nginx-designconsole -n oigns The output will look similar to the following:\nName: governancedomain-nginx-designconsole Namespace: oigns Address: Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) Rules: Host Path Backends ---- ---- -------- * governancedomain-cluster-oim-cluster:14002 (10.244.1.25:14002) Annotations: kubernetes.io/ingress.class: nginx meta.helm.sh/release-name: governancedomain-nginx-designconsole meta.helm.sh/release-namespace: oigns nginx.ingress.kubernetes.io/affinity: cookie nginx.ingress.kubernetes.io/enable-access-log: false Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 13s nginx-ingress-controller Scheduled for sync   Update the T3 channel   Log in to the WebLogic Console using http://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/console.\n  Navigate to Environment, click Servers, and then select oim_server1.\n  Click Protocols, and then Channels.\n  Click the default T3 channel called T3Channel.\n  Click Lock and Edit.\n  Set the External Listen Address to the ingress controller hostname ${MASTERNODE-HOSTNAME}.\n  Set the External Listen Port to the ingress controller port ${MASTERNODE-PORT}.\n  Click Save.\n  Click Activate Changes.\n  Restart the OIG Managed Server Restart the OIG Managed Server for the above changes to take effect:\n$ cd $WORKDIR/kubernetes/domain-lifecycle $ ./restartServer.sh -s oim_server1 -d \u0026lt;domain_uid\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ cd $WORKDIR/kubernetes/domain-lifecycle ./restartServer.sh -s oim_server1 -d governancedomain -n oigns Make sure the \u0026lt;domain_uid\u0026gt;-oim-server1 has a READY status of 1/1 before continuing:\n$ kubectl get pods -n oigns | grep oim-server1 The output will look similar to the following:\ngovernancedomain-oim-server1 1/1 Running 0 8m Design Console client It is possible to use Design Console from an on-premises install, or from a container image.\nUsing an on-premises installed Design Console   Install Design Console on an on-premises machine\n  Follow Login to the Design Console.\n  Using a container image for Design Console Using Docker The Design Console can be run from a container using X windows emulation.\n  On the parent machine where the Design Console is to be displayed, run xhost +.\n  Find which worker node the \u0026lt;domain\u0026gt;-oim-server1 pod is running. For example:\n$ kubectl get pods -n oigns -o wide | grep governancedomain-oim-server1 The output will look similar to the following:\ngovernancedomain-oim-server1 1/1 Running 0 31m 10.244.2.98 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt;   On the worker node returned above e.g worker-node2, execute the following command to find the OIG container image name:\n$ docker images Then execute the following command to start a container to run Design Console:\n$ docker run -u root --name oigdcbase -it \u0026lt;image\u0026gt; bash For example:\n$ docker run -u root -it --name oigdcbase container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January\u0026#39;25\u0026gt; bash This will take you into a bash shell inside the container:\nbash-4.2#   Inside the container set the proxy, for example:\nbash-4.2# export https_proxy=http://proxy.example.com:80   Install the relevant X windows packages in the container:\nbash-4.2# yum install libXext libXrender libXtst   Execute the following outside the container to create a new Design Console image from the container:\n$ docker commit \u0026lt;container_name\u0026gt; \u0026lt;design_console_image_name\u0026gt; For example:\n$ docker commit oigdcbase oigdc   Exit the container bash session:\nbash-4.2# exit   Start a new container using the Design Console image:\n$ docker run --name oigdc -it oigdc /bin/bash This will take you into a bash shell for the container:\nbash-4.2#   In the container run the following to export the DISPLAY:\n$ export DISPLAY=\u0026lt;parent_machine_hostname:1\u0026gt;   Start the Design Console from the container:\nbash-4.2# cd idm/designconsole bash-4.2# sh xlclient.sh The Design Console login should be displayed. Now follow Login to the Design Console.\n  Using podman   On the parent machine where the Design Console is to be displayed, run xhost +.\n  Find which worker node the \u0026lt;domain\u0026gt;-oim-server1 pod is running. For example:\n$ kubectl get pods -n oigns -o wide | grep governancedomain-oim-server1 The output will look similar to the following:\ngovernancedomain-oim-server1 1/1 Running 0 31m 10.244.2.98 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt;   On the worker node returned above e.g worker-node2, execute the following command to find the OIG container image name:\n$ podman images Then execute the following command to start a container to run Design Console:\n$ podman run -u root --name oigdcbase -it \u0026lt;image\u0026gt; bash For example:\n$ podman run -u root -it --name oigdcbase container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January\u0026#39;25\u0026gt; bash This will take you into a bash shell inside the container:\nbash-4.2#   Inside the container set the proxy, for example:\nbash-4.2# export https_proxy=http://proxy.example.com:80   Install the relevant X windows packages in the container:\nbash-4.2# yum install libXext libXrender libXtst   Execute the following outside the container to create a new Design Console image from the container:\n$ podman commit \u0026lt;container_name\u0026gt; \u0026lt;design_console_image_name\u0026gt; For example:\n$ podman commit oigdcbase oigdc   Exit the container bash session:\nbash-4.2# exit   Start a new container using the Design Console image:\n$ podman run --name oigdc -it oigdc /bin/bash This will take you into a bash shell for the container:\nbash-4.2#   In the container run the following to export the DISPLAY:\n$ export DISPLAY=\u0026lt;parent_machine_hostname:1\u0026gt;   Start the Design Console from the container:\nbash-4.2# cd idm/designconsole bash-4.2# sh xlclient.sh The Design Console login should be displayed. Now follow Login to the Design Console.\n  Login to the Design Console   Launch the Design Console and in the Oracle Identity Manager Design Console login page enter the following details:\nEnter the following details and click Login:\n Server URL: \u0026lt;url\u0026gt; User ID: xelsysadm Password: \u0026lt;password\u0026gt;.  where \u0026lt;url\u0026gt; is http://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}\n  If successful the Design Console will be displayed.\n  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "The WebLogic Kubernetes Operator supports deployment of Oracle Access Management (OAM) 12.2.1.4. Follow the instructions in this guide to set up these Oracle Access Management domains on Kubernetes.",
	"content": "The WebLogic Kubernetes Operator supports deployment of Oracle Access Management (OAM) 12.2.1.4.\nIn this release, OAM domains are supported using the “domain on a persistent volume” model only, where the domain home is located in a persistent volume (PV).\nDomain on persistent volume (Domain on PV) is an operator domain home source type, which requires that the domain home exists on a persistent volume. The domain home can be created either manually using the Weblogic Scripting Tool (WLST) scripts or automatically by specifying the section, domain.spec.configuration.initializeDomainOnPV, in the domain resource YAML file. The initial domain topology and resources are described using WebLogic Deploy Tooling (WDT) models.\nNOTE: The initializeDomainOnPV section provides a one time only domain home initialization. The operator creates the domain when the domain resource is first deployed. After the domain is created, this section is ignored. Subsequent domain lifecycle updates must be controlled by the WebLogic Server Administration Console, WebLogic Scripting Tool (WLST), or other mechanisms.\nThe WebLogic Kubernetes Operator has several key features to assist you with deploying and managing Oracle Access Management domains in a Kubernetes environment. You can:\n Create OAM instances in a Kubernetes persistent volume. This persistent volume can reside in an NFS file system or other Kubernetes volume types. Start servers based on declarative startup parameters and desired states. Expose the OAM Services through external access. Scale OAM domains by starting and stopping Managed Servers on demand. Publish operator and WebLogic Server logs into Elasticsearch and interact with them in Kibana. Monitor the OAM instance using Prometheus and Grafana.  Weblogic Deploy Tooling Models Weblogic Deploy Tooling (WDT) models are a convenient and simple alternative to WLST configuration scripts. They compactly define a WebLogic domain using model files, variable properties files, and application archive files. For more information about the model format and its integration, see Usage and Working With WDT Model Files. The WDT model format is fully described in the open source, WebLogic Deploy Tooling GitHub project.\nThe main benefits of WDT are:\n A set of single-purpose tools supporting Weblogic domain configuration lifecycle operations. All tools work off of a shared, declarative model, eliminating the need to maintain specialized WLST scripts. WDT knowledge base understands the MBeans, attributes, and WLST capabilities/bugs across WLS versions.  Current production release The current production release for the Oracle Access Management domain deployment on Kubernetes is 25.1.1. This release uses the WebLogic Kubernetes Operator version 4.2.10.\nFor 4.1.X WebLogic Kubernetes Operator refer to Version 24.4.1\nFor 4.0.X WebLogic Kubernetes Operator refer to Version 23.3.1\nFor 3.4.X WebLogic Kubernetes Operator refer to Version 23.1.1\nRecent changes and known issues See the Release Notes for recent changes and known issues for Oracle Access Management domain deployment on Kubernetes.\nLimitations See here for limitations in this release.\nGetting started This documentation explains how to configure OAM 12.2.1.4 on a Kubernetes cluster where no other Oracle Identity Management products will be deployed. For detailed information about this type of deployment, start at Prerequisites and follow this documentation sequentially. Please note that this documentation does not explain how to configure a Kubernetes cluster given the product can be deployed on any compliant Kubernetes vendor.\nIf you are deploying multiple Oracle Identity Management products on the same Kubernetes cluster, then you must follow the Enterprise Deployment Guide outlined in Enterprise Deployments. Please note, you also have the option to follow the Enterprise Deployment Guide even if you are only installing OAM and no other Oracle Identity Management products.\nNote: If you need to understand how to configure a Kubernetes cluster ready for an Oracle Access Management deployment, you should follow the Enterprise Deployment Guide referenced in Enterprise Deployments. The Enterprise Deployment Automation section also contains details on automation scripts that can:\n Automate the creation of a Kubernetes cluster on Oracle Cloud Infrastructure (OCI), ready for the deployment of Oracle Identity Management products. Automate the deployment of Oracle Identity Management products on any compliant Kubernetes cluster.  Considerations for deploying OAM and OHS on Kubernetes If you intend to use Oracle HTTP Server (OHS) and Oracle WebGate, and want to deploy OHS on Kubernetes, you must read and understand the Supported Architectures in the Oracle HTTP Server on Kubernetes documentation before continuing.\nDocumentation for earlier releases To view documentation for an earlier release, see:\n Version 24.4.1 Version 24.3.1 Version 24.2.1 Version 24.1.1 Version 23.4.2 Version 23.4.1 Version 23.3.1 Version 23.2.1 Version 23.1.1 Version 22.4.1 Version 22.3.1 Version 22.2.1 Version 21.4.2 Version 21.4.1  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "The WebLogic Kubernetes Operator supports deployment of Oracle Identity Governance 12.2.1.4. Follow the instructions in this guide to set up Oracle Identity Governance domains on Kubernetes.",
	"content": "The WebLogic Kubernetes Operator supports deployment of Oracle Identity Governance (OIG) 12.2.1.4.\nIn this release, OIG domains are supported using the “domain on a persistent volume” model only, where the domain home is located in a persistent volume (PV).\nDomain on persistent volume (Domain on PV) is an operator domain home source type, which requires that the domain home exists on a persistent volume. The domain home can be created either manually using the Weblogic Scripting Tool (WLST) scripts or automatically using Weblogic Deploy Tooling (WDT). The initial domain topology and resources are described using WebLogic Deploy Tooling (WDT) models.\nNOTE: The initializeDomainOnPV section provides a one time only domain home initialization. The operator creates the domain when the domain resource is first deployed. After the domain is created, this section is ignored. Subsequent domain lifecycle updates must be controlled by the WebLogic Server Administration Console, WebLogic Scripting Tool (WLST), or other mechanisms.\nThe operator has several key features to assist you with deploying and managing OIG domains in a Kubernetes environment. You can:\n Create OIG instances in a Kubernetes persistent volume. This persistent volume can reside in an NFS file system or other Kubernetes volume types. Start servers based on declarative startup parameters and desired states. Expose the OIG Services for external access. Scale OIG domains by starting and stopping Managed Servers on demand. Publish operator and WebLogic Server logs into Elasticsearch and interact with them in Kibana. Monitor the OIG instance using Prometheus and Grafana.  Weblogic Deploy Tooling Models Weblogic Deploy Tooling (WDT) models are a convenient and simple alternative to WLST configuration scripts. They compactly define a WebLogic domain using model files, variable properties files, and application archive files. For more information about the model format and its integration, see Usage and Working With WDT Model Files. The WDT model format is fully described in the open source, WebLogic Deploy Tooling GitHub project.\nThe main benefits of WDT are:\n A set of single-purpose tools supporting Weblogic domain configuration lifecycle operations. All tools work off of a shared, declarative model, eliminating the need to maintain specialized WLST scripts. WDT knowledge base understands the MBeans, attributes, and WLST capabilities/bugs across WLS versions.  Current production release The current production release for the Oracle Identity Governance domain deployment on Kubernetes is 25.1.1. This release uses the WebLogic Kubernetes Operator version 4.2.10.\nFor 4.1.X WebLogic Kubernetes Operator refer to Version 24.4.1\nFor 4.0.X WebLogic Kubernetes Operator refer to Version 23.3.1\nFor 3.4.X WebLogic Kubernetes Operator refer to Version 23.1.1\nRecent changes and known issues See the Release Notes for recent changes and known issues for Oracle Identity Governance domain deployment on Kubernetes.\nLimitations See here for limitations in this release.\nGetting started This documentation explains how to configure OIG 12.2.1.4 on a Kubernetes cluster where no other Oracle Identity Management products will be deployed. For detailed information about this type of deployment, start at Prerequisites and follow this documentation sequentially. Please note that this documentation does not explain how to configure a Kubernetes cluster given the product can be deployed on any compliant Kubernetes vendor.\nIf you are deploying multiple Oracle Identity Management products on the same Kubernetes cluster, then you must follow the Enterprise Deployment Guide outlined in Enterprise Deployments. Please note, you also have the option to follow the Enterprise Deployment Guide even if you are only installing OIG and no other Oracle Identity Management products.\nNote: If you need to understand how to configure a Kubernetes cluster ready for an Oracle Identity Governance deployment, you should follow the Enterprise Deployment Guide referenced in Enterprise Deployments. The Enterprise Deployment Automation section also contains details on automation scripts that can:\n Automate the creation of a Kubernetes cluster on Oracle Cloud Infrastructure (OCI), ready for the deployment of Oracle Identity Management products. Automate the deployment of Oracle Identity Management products on any compliant Kubernetes cluster.  Documentation for earlier releases To view documentation for an earlier release, see:\n Version 24.4.1 Version 24.3.1 Version 24.2.1 Version 24.1.1 Version 23.4.2 Version 23.4.1 Version 23.3.1 Version 23.2.1 Version 23.1.1 Version 22.4.1 Version 22.3.1 Version 22.2.1 Version 21.4.2 Version 21.4.1  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oud/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "Oracle Unified Directory provides a comprehensive Directory Solution for robust Identity Management",
	"content": "Oracle Unified Directory provides a comprehensive Directory Solution for robust Identity Management. Oracle Unified Directory is an all-in-one directory solution with storage, proxy, synchronization and virtualization capabilities. While unifying the approach, it provides all the services required for high-performance Enterprise and carrier-grade environments. Oracle Unified Directory ensures scalability to billions of entries, ease of installation, elastic deployments, enterprise manageability and effective monitoring.\nThis project supports deployment of Oracle Unified Directory (OUD) container images based on the 12cPS4 (12.2.1.4.0) release within a Kubernetes environment. The OUD container image refers to binaries for OUD Release 12.2.1.4.0 and it has the capability to create different types of OUD Instances (Directory Service, Proxy, Replication) in containers.\nThis project has several key features to assist you with deploying and managing Oracle Unified Directory in a Kubernetes environment. You can:\n Create Oracle Unified Directory instances in a Kubernetes persistent volume (PV). This PV can reside in an NFS file system, block storage device, or other Kubernetes volume types. Start servers based on declarative startup parameters and desired states. Expose the Oracle Unified Directory services for external access. Scale Oracle Unified Directory by starting and stopping servers on demand. Monitor the Oracle Unified Directory instance using Prometheus and Grafana.  Current production release The current production release for the Oracle Unified Directory 12c PS4 (12.2.1.4.0) deployment on Kubernetes is 25.1.1.\nRecent changes and known issues See the Release Notes for recent changes and known issues for Oracle Unified Directory deployment on Kubernetes.\nGetting started This documentation explains how to configure OUD on a Kubernetes cluster where no other Oracle Identity Management products will be deployed. For detailed information about this type of deployment, start at Prerequisites and follow this documentation sequentially. Please note that this documentation does not explain how to configure a Kubernetes cluster given the product can be deployed on any compliant Kubernetes vendor.\nIf you are deploying multiple Oracle Identity Management products on the same Kubernetes cluster, then you must follow the Enterprise Deployment Guide outlined in Enterprise Deployments. Please note, you also have the option to follow the Enterprise Deployment Guide even if you are only installing OUD and no other Oracle Identity Management products.\nNote: If you need to understand how to configure a Kubernetes cluster ready for an Oracle Unified Directory deployment, you should follow the Enterprise Deployment Guide referenced in Enterprise Deployments. The Enterprise Deployment Automation section also contains details on automation scripts that can:\n Automate the creation of a Kubernetes cluster on Oracle Cloud Infrastructure (OCI), ready for the deployment of Oracle Identity Management products. Automate the deployment of Oracle Identity Management products on any compliant Kubernetes cluster.  Documentation for earlier releases To view documentation for an earlier release, see:\n Version 24.4.1 Version 24.3.1 Version 24.2.1 Version 24.1.1 Version 23.4.1 Version 23.3.1 Version 23.2.1 Version 23.1.1 Version 22.4.1 Version 22.3.1 Version 22.2.1 Version 21.4.2 Version 21.4.1  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oudsm/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "Oracle Unified Directory Services Manager provides an interface for managing instances of Oracle Unified Directory",
	"content": "Oracle Unified Directory Services Manager (OUDSM) is an interface for managing instances of Oracle Unified Directory. Oracle Unified Directory Services Manager enables you to configure the structure of the directory, define objects in the directory, add and configure users, groups, and other entries. Oracle Unified Directory Services Manager is also the interface you use to manage entries, schema, security, and other directory features.\nThis project supports deployment of Oracle Unified Directory Services Manager images based on the 12cPS4 (12.2.1.4.0) release within a Kubernetes environment. The Oracle Unified Directory Services Manager Image refers to binaries for Oracle Unified Directory Services Manager Release 12.2.1.4.0.\nFollow the instructions in this guide to set up Oracle Unified Directory Services Manager on Kubernetes.\nCurrent production release The current production release for the Oracle Unified Directory 12c PS4 (12.2.1.4.0) deployment on Kubernetes is 25.1.1.\nRecent changes and known issues See the Release Notes for recent changes and known issues for Oracle Unified Directory deployment on Kubernetes.\nGetting started This documentation explains how to configure OUDSM on a Kubernetes cluster where no other Oracle Identity Management products will be deployed. For detailed information about this type of deployment, start at Prerequisites and follow this documentation sequentially. Please note that this documentation does not explain how to configure a Kubernetes cluster given the product can be deployed on any compliant Kubernetes vendor.\nIf you are deploying multiple Oracle Identity Management products on the same Kubernetes cluster, then you must follow the Enterprise Deployment Guide outlined in Enterprise Deployments. Please note, you also have the option to follow the Enterprise Deployment Guide even if you are only installing OUDSM and no other Oracle Identity Management products.\nNote: If you need to understand how to configure a Kubernetes cluster ready for an Oracle Unified Directory Services Manager deployment, you should follow the Enterprise Deployment Guide referenced in Enterprise Deployments. The Enterprise Deployment Automation section also contains details on automation scripts that can:\n Automate the creation of a Kubernetes cluster on Oracle Cloud Infrastructure (OCI), ready for the deployment of Oracle Identity Management products. Automate the deployment of Oracle Identity Management products on any compliant Kubernetes cluster.  Documentation for earlier releases To view documentation for an earlier release, see:\n Version 24.4.1 Version 24.3.1 Version 24.2.1 Version 24.1.1 Version 23.4.1 Version 23.3.1 Version 23.2.1 Version 23.1.1 Version 22.4.1 Version 22.3.1 Version 22.2.1 Version 21.4.2 Version 21.4.1  "
},
{
	"uri": "/fmw-kubernetes/ohs/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "Oracle HTTP Server deployment is supported on Kubernetes. Follow the instructions in this guide to set up Oracle HTTP Server on Kubernetes.",
	"content": "Introduction Oracle HTTP Server (OHS) 12.2.1.4 is supported for deployment on Kubernetes.\nCurrent production release The current production release for the Oracle HTTP Server 12.2.1.4 deployment on Kubernetes is 25.1.1.\nRecent changes and known issues See the Release Notes for recent changes for Oracle HTTP Server deployment on Kubernetes.\nGetting started This documentation explains how to configure Oracle HTTP Server (OHS) on a shared Kubernetes cluster where other applications are deployed, or on it\u0026rsquo;s own independent Kubernetes cluster.\nPlease note that this documentation does not explain how to configure a Kubernetes cluster given the product can be deployed on any compliant Kubernetes vendor.\nThis documentation assumes you are familiar with OHS and it\u0026rsquo;s configuration files. It also assumes that if you are using this OHS with Oracle WebGate and Oracle Access Management, that you are familiar with these products.\nSupported architectures Oracle HTTP Server can be deployed in the following scenarios:\n Oracle HTTP Server deployed on a shared Kubernetes cluster with other applications. Oracle HTTP Server deployed on an independent Kubernetes cluster.  Before deploying OHS you must consider what architecture to deploy and then plan accordingly.\nOracle HTTP Server on a shared Kubernetes Cluster This deployment is recommended for sandbox and intranet environments only.\nIn this deployment OHS is installed on the same Kubernetes cluster as other Kubernetes deployed applications. For example, you may want to deploy OHS on the same Kubernetes cluster as other Oracle products such as Oracle WebLogic Server, or Oracle Access Management (OAM).\nIf OHS needs to communicate with other applications on the same Kubernetes cluster, for example using mod_wls_ohs to communicate with Oracle WebLogic Server, then the OHS communicates to the internal port of that Kubernetes service.\nAn example architecture is as follows:\nDescription of the illustration colocated.png\nIn this example:\n OHS is deployed in the same Kubernetes cluster as WebLogic Server. SSL is terminated at the load balancer. The load balancer communicates with OHS via the OHS nodeport using HTTP. OHS communicates with the WebLogic Administration and WebLogic Managed Servers via HTTP, using the internal port of the associated Kubernetes service: \u0026lt;service_name\u0026gt;.\u0026lt;namespace\u0026gt;.svc.cluster.local:\u0026lt;port\u0026gt;. The \u0026lt;service_name\u0026gt; and \u0026lt;port\u0026gt; can be found by running kubectl get svc -n \u0026lt;namespace\u0026gt; on your Kubernetes cluster.  Note: The load balancer is optional and you can connect direct to the OHS nodeport if required, either from workstations outside the firewall, or internally from other applications.\nOracle HTTP Server on an independent Kubernetes cluster This deployment is recommended for internet facing, production environments.\nIn this deployment OHS is installed on it\u0026rsquo;s own Kubernetes cluster inside a demilitarized zone.\nIf OHS needs to communicate with other applications deployed on a different Kubernetes cluster, for example using mod_wl_ohs to communicate with Oracle WebLogic Server, then the OHS communicates via HTTP to the Ingress controller port used by the application on that Kubernetes cluster, or to the appropriate NodePort Kubernetes service you wish to connect to.\nAn example architecture is as follows:\nDescription of the illustration independent.png\nIn this example:\n SSL is terminated at the load balancer. The load balancer communicates with OHS via the OHS nodeport using HTTP. Oracle WebLogic Server is deployed on it\u0026rsquo;s own Kubernetes cluster. OHS communicates with the WebLogic Administration and WebLogic Managed Servers using the HTTP port of the Ingress controller configured for WebLogic Server.  Note: The load balancer is optional and you can connect direct to the OHS nodeport if required, either from workstations outside the firewall, or internally from other applications.\nNext Steps For detailed information about the above deployments, start at Prerequisites and follow this documentation sequentially.\nDocumentation for earlier releases To view documentation for an earlier release, see:\n Version 24.4.1  "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/patch_and_upgrade/patch-an-image/",
	"title": "Patch an image",
	"tags": [],
	"description": "Create a patched Oracle WebCenter Content image using the WebLogic Image Tool.",
	"content": "Oracle aims to release Oracle WebCenter Content images regularly with latest bundle and recommended interim patches in My Oracle Support (MOS). However, if there is a need to create images with new bundle and interim patches, you can build these images using WebLogic Image Tool.\nIf you have access to the Oracle WebCenter Content patches, you can patch an existing Oracle WebCenter Content image with a bundle patch and interim patches. It is recommended to use the WebLogic Image Tool to patch the Oracle WebCenter Content image.\n Recommendations:\n Use the WebLogic Image Tool create feature for patching the Oracle WebCenter Content Docker image with a bundle patch and multiple interim patches. This is the recommended approach because it optimizes the size of the image. Use the WebLogic Image Tool update feature for patching the Oracle WebCenter Content Docker image with a single interim patch. Note that the patched image size may increase considerably due to additional image layers introduced by the patch application tool.   Apply the patched image   Update the image: field in domain.yaml configuration file with the patched image.\n  Apply the updated domain.yaml configuration file:\n$ kubectl apply -f domain.yaml    Note: The server pods will be automatically restarted (rolling restart).\n "
},
{
	"uri": "/fmw-kubernetes/idm-products/oid/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "Review the latest changes and known issues for Oracle Internet Directory on Kubernetes.\nRecent changes    Date Version Change     July, 2022 22.3.1 As of July 2022, Container support has been removed for Oracle Internet Directory. Refer to document ID 2723908.1 on My Oracle Support for more details.   April, 2022 22.2.1 Updated for CRI-O support.   October, 2021 21.4.1 Initial release of Oracle Identity Directory on Kubernetes.    "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "Review the latest changes for Oracle WebCenter Content on Kubernetes.\nRecent changes    Date Version Change     October 28, 2022 22.4.1 Supports Oracle WebCenter Content 12.2.1.4 domains deployment using July 2022 PSU and known bug fixes - certified for Oracle WebLogic Kubernetes Operator version 3.4.2. Oracle WebCenter Content 12.2.1.4 container image for this release can be downloaded from My Oracle Support (MOS patch 34409720).   June 28, 2022 22.2.3 Supports Oracle WebCenter Content 12.2.1.4 domains deployment using May 2022 PSU and known bug fixes - certified for Oracle WebLogic Kubernetes Operator version 3.3.0. Oracle WebCenter Content 12.2.1.4 container image for this release can be downloaded from My Oracle Support (MOS patch 34192566).   March 11, 2022 22.1.3 Supports Oracle WebCenter Content 12.2.1.4 domains deployment using January 2022 PSU and known bug fixes - certified for Oracle WebLogic Kubernetes Operator version 3.3.0. Oracle WebCenter Content 12.2.1.4 container image for this release can be downloaded from My Oracle Support (MOS patch 33771196).   December 7, 2021 21.4.3 Supports Oracle WebCenter Content 12.2.1.4 domains deployment using April 2021 PSU and known bug fixes - certified for Oracle WebLogic Kubernetes Operator version 3.2.5. Oracle WebCenter Content 12.2.1.4 container image for this release can be downloaded from My Oracle Support (MOS patch 32822360).   June 16, 2021 21.2.3 Supports Oracle WebCenter Content 12.2.1.4 domains deployment using April 2021 PSU and known bug fixes. Oracle WebCenter Content 12.2.1.4 container image for this release can be downloaded from My Oracle Support (MOS patch 32822360).   February 28, 2021 21.1.2 Certified Oracle WebLogic Kubernetes Operator version 3.1.1. Kubernetes 1.14.8+, 1.15.7+, 1.16.0+, 1.17.0+, and 1.18.0+ support. Flannel is the only supported CNI in this release. SSL enabling for the Administration Server and Managed Servers is supported. For now, only Oracle WebCenter Content 12.2.1.4 is supported.    "
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "Recent changes    Date Version Change     June 10, 2022 22.2.3 Only Oracle WebCenter Portal 12.2.1.4 is supported and certified with the WebLogic Kubernetes operator version 3.3.0.   June 30, 2021 21.2.3 Only Oracle WebCenter Portal 12.2.1.4 is supported and certified with the WebLogic Kubernetes operator version 3.1.1.    "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/installguide/prerequisites/",
	"title": "Requirements and limitations",
	"tags": [],
	"description": "Understand the system requirements and limitations for deploying and running Oracle WebCenter Content with the WebLogic Kubernetes Operator, including the Oracle WebCenter Content cluster sizing recommendations.",
	"content": "This section provides information about the system requirements and limitations for deploying and running Oracle WebCenter Content domains with the WebLogic Kubernetes Operator.\nSystem requirements for Oracle WebCenter Content domains For the current production release 22.4.1:\n Oracle Linux 7 (UL6+) and Red Hat Enterprise Linux 7 (UL3+ only with standalone Kubernetes) are supported. Supported Kubernetes versions are: 1.19.15+, 1.20.11+, 1.21.5+, 1.22.5+ and 1.23.4+ (check with kubectl version). Docker 19.03.1+ (check with docker version). Flannel networking v0.13.0-amd64 or later (check with docker images | grep flannel). Helm 3.3.4+ (check with helm version --client --short). Oracle WebLogic Kubernetes Operator 3.4.2 (see WebLogic Kubernetes Operator releases page). Oracle WebCenter Content 12.2.1.4 Docker image downloaded from My Oracle Support (MOS patch 34409720). This image contains the latest bundle patch and one-off patches for Oracle WebCenter Content. You must have the cluster-admin role to install WebLogic Kubernetes Operator. The WebLogic Kubernetes Operator does not need the cluster-admin role at runtime. We do not currently support running Oracle WebCenter Content in non-Linux containers. Additionally, see the Oracle WebCenter Content documentation for other requirements such as database version.  See here for resourse sizing information for Oracle WebCenter Content domains setup on Kubernetes cluster.\nLimitations Compared to running a WebLogic Server domain in Kubernetes using the WebLogic Kubernetes Operator, the following limitations currently exist for Oracle WebCenter Content domains:\n In this release, Oracle WebCenter Content domains are supported using the domain on a persistent volume model only, where the domain home is located in a persistent volume (PV). The \u0026ldquo;domain in image\u0026rdquo; and \u0026ldquo;model in image\u0026rdquo; models are not supported. Also, \u0026ldquo;WebLogic Deploy Tooling (WDT)\u0026rdquo; based deployments are currently not supported. Only configured clusters are supported. Dynamic clusters are not supported for Oracle WebCenter Content domains. Note that you can still use all of the scaling features, but you need to define the maximum size of your cluster at domain creation time. Mixed clusters (configured servers targeted to a dynamic cluster) are not supported. The WebLogic Logging Exporter currently supports WebLogic Server logs only. Other logs will not be sent to Elasticsearch. Note, however, that you can use a sidecar with a log handling tool like Logstash or Fluentd to get logs. The WebLogic Monitoring Exporter currently supports WebLogic MBean trees only. Support for JRF and Oracle WebCenter Content MBeans is not available. Also, a metrics dashboard specific to Oracle WebCenter Content is not available. Instead, use the WebLogic Server dashboard to monitor the Oracle WebCenter Content server metrics in Grafana. Some features such as multicast, multitenancy, production redeployment, and Node Manager (although it is used internally for the liveness probe and to start WebLogic Server instances) are not supported in this release. Features such as Java Messaging Service whole server migration, consensus leasing, and maximum availability architecture (Oracle WebCenter Content setup) are not supported in this release. You can have multiple UCM servers on your domain but you can have only one IBR server. There is a generic limitation with all load-balancers in end-to-end SSL configuration - accessing multiple types of servers (different Managed Servers and/or Administration Server) at the same time, is currently not supported.  For up-to-date information about the features of WebLogic Server that are supported in Kubernetes environments, see My Oracle Support Doc ID 2349228.1.\n"
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/installguide/prerequisites/",
	"title": "Requirements and limitations",
	"tags": [],
	"description": "Understand the system requirements and limitations for deploying and running Oracle WebCenter Portal with the WebLogic Kubernetes operator.",
	"content": "Contents  Introduction System Requirements Limitations  Introduction This document describes the special considerations for deploying and running a WebCenter Portal domain with the WebLogic Kubernetes Operator. Other than those considerations listed here, the WebCenter Portal domain works in the same way as Fusion Middleware Infrastructure and WebLogic Server domains do.\nIn this release, WebCenter Portal domain is based on the domain on a persistent volume model where a WebCenter Portal domain is located in a persistent volume (PV).\nSystem Requirements  Kubernetes 1.18.18+, 1.19.7+, and 1.20.6+ (check with kubectl version). Flannel networking v0.14.0 or later (check with docker images | grep flannel), Calico networking v3.15. Docker 19.03.11+ (check with docker version). Helm 3.4+ (check with helm version). WebLogic Kubernetes operator 3.3.0 (see the operator releases page). Oracle WebCenter Portal 12.2.1.4.0 image. These proxy setups are used for pulling the required binaries and source code from the respective repositories:  export NO_PROXY=\u0026quot;localhost,127.0.0.0/8,$(hostname -i),.your-company.com,/var/run/docker.sock\u0026rdquo; export no_proxy=\u0026quot;localhost,127.0.0.0/8,$(hostname -i),.your-company.com,/var/run/docker.sock\u0026rdquo; export http_proxy=http://www-proxy-your-company.com:80 export https_proxy=http://www-proxy-your-company.com:80 export HTTP_PROXY=http://www-proxy-your-company.com:80 export HTTPS_PROXY=http://www-proxy-your-company.com:80    NOTE: Add your host IP by using hostname -i and nslookup IP addresses to the no_proxy, NO_PROXY list above.\nLimitations Compared to running a WebLogic Server domain in Kubernetes using the operator, the following limitations currently exist for a WebCenter Portal domain:\n Domain in image model is not supported in this version of the operator. Only configured clusters are supported. Dynamic clusters are not supported on WebCenter Portal domains. Note that you can still use all of the scaling features. You just need to define the maximum size of your cluster at the time when you create a domain. At present, WebCenter Portal doesn\u0026rsquo;t run on non-Linux containers. Deploying and running a WebCenter Portal domain is supported only in the operator versions 3.3.0 and later. The WebLogic Logging Exporter currently supports WebLogic Server logs only. Other logs are not sent to Elasticsearch. Note, however, that you can use a sidecar with a log handling tool like Fluentd to get logs. The WebLogic Monitoring Exporter currently supports the WebLogic MBean trees only. Support for JRF MBeans has not been added yet.  "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/adminguide/configure-load-balancer/traefik/",
	"title": "Traefik",
	"tags": [],
	"description": "Configure the ingress-based Traefik load balancer for Oracle WebCenter Content domains.",
	"content": "This section provides information about how to install and configure the ingress-based Traefik load balancer (version 2.6.0 or later for production deployments) to load balance Oracle WebCenter Content domain clusters. You can configure Traefik for non-SSL, SSL termination and end-to-end SSL access of the application URL.\nFollow these steps to set up Traefik as a load balancer for an Oracle WebCenter Content\tdomain in a Kubernetes cluster:\n  Non-SSL and SSL termination\n Install the Traefik (ingress-based) load balancer Configure Traefik to manage ingresses Create an Ingress for the domain Verify domain application URL access    End-to-end SSL configuration\n Install the Traefik load balancer for End-to-end SSL Configure Traefik to manage the domain Create IngressRouteTCP Verify end-to-end SSL access Delete the IngressRouteTCP    Uninstall Traefik\n  Non-SSL and SSL termination Install the Traefik (ingress-based) load balancer   Use Helm to install the Traefik (ingress-based) load balancer. For detailed information, see here. Use the values.yaml file in the sample but set kubernetes.namespaces specifically.\n$ cd ${WORKDIR} $ kubectl create namespace traefik $ helm repo add traefik https://helm.traefik.io/traefik --force-update Sample output:\n\u0026#34;traefik\u0026#34; has been added to your repositories   Install Traefik:\n$ cd ${WORKDIR} $ helm install traefik traefik/traefik \\  --namespace traefik \\  --values charts/traefik/values.yaml \\  --set \u0026#34;kubernetes.namespaces={traefik}\u0026#34; \\  --set \u0026#34;service.type=NodePort\u0026#34; --wait\t   Click here to see the sample output.   NAME: traefik LAST DEPLOYED: Sun Jan 17 23:30:20 2021 NAMESPACE: traefik STATUS: deployed REVISION: 1 TEST SUITE: None    A sample values.yaml for deployment of Traefik 2.6.0:\nimage: name: traefik tag: 2.6.0 pullPolicy: IfNotPresent ingressRoute: dashboard: enabled: true # Additional ingressRoute annotations (e.g. for kubernetes.io/ingress.class) annotations: {} # Additional ingressRoute labels (e.g. for filtering IngressRoute by custom labels) labels: {} providers: kubernetesCRD: enabled: true kubernetesIngress: enabled: true # IP used for Kubernetes Ingress endpoints ports: traefik: port: 9000 expose: true # The exposed port for this service exposedPort: 9000 # The port protocol (TCP/UDP) protocol: TCP web: port: 8000 # hostPort: 8000 expose: true exposedPort: 30305 nodePort: 30305 # The port protocol (TCP/UDP) protocol: TCP # Use nodeport if set. This is useful if you have configured Traefik in a # LoadBalancer # nodePort: 32080 # Port Redirections # Added in 2.2, you can make permanent redirects via entrypoints. # https://docs.traefik.io/routing/entrypoints/#redirection # redirectTo: websecure websecure: port: 8443 # # hostPort: 8443 expose: true exposedPort: 30443 # The port protocol (TCP/UDP) protocol: TCP nodePort: 30443 additionalArguments: - \u0026#34;--log.level=INFO\u0026#34;   Verify the Traefik status and find the port number of the SSL and non-SSL services:\n$ kubectl get all -n traefik    Click here to see the sample output.   NAME READY STATUS RESTARTS AGE pod/traefik-f9cf58697-p57nt 1/1 Running 0 22d NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/traefik NodePort 10.96.95.253 \u0026lt;none\u0026gt; 9000:32306/TCP,30305:30305/TCP,30443:30443/TCP 22d NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/traefik 1/1 1 1 22d NAME DESIRED CURRENT READY AGE replicaset.apps/traefik-f9cf58697 1 1 1 22d      Access the Traefik dashboard through the URL http://$(hostname -f):32306, with the HTTP host traefik.example.com:\n$ curl -H \u0026#34;host: $(hostname -f)\u0026#34; http://$(hostname -f):32306/dashboard/  Note: Make sure that you specify a fully qualified node name for $(hostname -f)\n   Configure Traefik to manage ingresses Configure Traefik to manage ingresses created in this namespace, where traefik is the Traefik namespace and wccns is the namespace of the domain:\n$ helm upgrade traefik traefik/traefik --namespace traefik --reuse-values \\ --set \u0026#34;kubernetes.namespaces={traefik,wccns}\u0026#34;    Click here to see the sample output.   Release \u0026#34;traefik\u0026#34; has been upgraded. Happy Helming! NAME: traefik LAST DEPLOYED: Sun Jan 17 23:43:02 2021 NAMESPACE: traefik STATUS: deployed REVISION: 2 TEST SUITE: None    Create an ingress for the domain Create an ingress for the domain in the domain namespace by using the sample Helm chart. Here path-based routing is used for ingress. Sample values for default configuration are shown in the file ${WORKDIR}/charts/ingress-per-domain/values.yaml. By default, type is TRAEFIK , tls is Non-SSL, and domainType is wccinfra. These values can be overridden by passing values through the command line or can be edited in the sample file values.yaml based on the type of configuration (non-SSL or SSL). If needed, you can update the ingress YAML file to define more path rules (in section spec.rules.host.http.paths) based on the domain application URLs that need to be accessed. The template YAML file for the Traefik (ingress-based) load balancer is located at ${WORKDIR}/charts/ingress-per-domain/templates/traefik-ingress.yaml\n  Install ingress-per-domain using Helm for non-SSL configuration:\n$ cd ${WORKDIR} $ helm install wcc-traefik-ingress \\  charts/ingress-per-domain \\  --set type=TRAEFIK \\  --namespace wccns \\  --values charts/ingress-per-domain/values.yaml \\  --set \u0026#34;traefik.hostname=$(hostname -f)\u0026#34; \\  --set tls=NONSSL Sample output:\nNAME: wcc-traefik-ingress LAST DEPLOYED: Sun Jan 17 23:49:09 2021 NAMESPACE: wccns STATUS: deployed REVISION: 1 TEST SUITE: None   For secured access (SSL) to the Oracle WebCenter Content application, create a certificate and generate a Kubernetes secret:\n$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \u0026#34;/CN=*\u0026#34; $ kubectl -n wccns create secret tls domain1-tls-cert --key /tmp/tls1.key --cert /tmp/tls1.crt   Create Traefik Middleware custom resource\nIn case of SSL termination, Traefik must pass a custom header WL-Proxy-SSL:true to the WebLogic Server endpoints. Create the Middleware using the following command:\n$ cat \u0026lt;\u0026lt;EOF | kubectl apply -f - apiVersion: traefik.containo.us/v1alpha1 kind: Middleware metadata: name: wls-proxy-ssl namespace: wccns spec: headers: customRequestHeaders: WL-Proxy-SSL: \u0026#34;true\u0026#34; EOF   Create the Traefik TLSStore custom resource.\nIn case of SSL termination, Traefik should be configured to use the user-defined SSL certificate. If the user-defined SSL certificate is not configured, Traefik will create a default SSL certificate. To configure a user-defined SSL certificate for Traefik, use the TLSStore custom resource. The Kubernetes secret created with the SSL certificate should be referenced in the TLSStore object. Run the following command to create the TLSStore:\n$ cat \u0026lt;\u0026lt;EOF | kubectl apply -f - apiVersion: traefik.containo.us/v1alpha1 kind: TLSStore metadata: name: default namespace: wccns spec: defaultCertificate: secretName: domain1-tls-cert EOF   Install ingress-per-domain using Helm for SSL configuration.\nThe Kubernetes secret name should be updated in the template file.\nThe template file also contains the following annotations:\ntraefik.ingress.kubernetes.io/router.entrypoints: websecure traefik.ingress.kubernetes.io/router.tls: \u0026#34;true\u0026#34; traefik.ingress.kubernetes.io/router.middlewares: wccns-wls-proxy-ssl@kubernetescrd The entry point for SSL access and the Middleware name should be updated in the annotation. The Middleware name should be in the form \u0026lt;namespace\u0026gt;-\u0026lt;middleware name\u0026gt;@kubernetescrd.\n$ cd ${WORKDIR} $ helm install wcc-traefik-ingress \\  charts/ingress-per-domain \\  --set type=TRAEFIK \\  --namespace wccns \\  --values charts/ingress-per-domain/values.yaml \\  --set \u0026#34;traefik.hostname=$(hostname -f)\u0026#34; \\  --set \u0026#34;traefik.hostnameorip=$(hostname -f)\u0026#34; \\  --set tls=SSL Sample output:\nNAME: wcc-traefik-ingress LAST DEPLOYED: Mon Jul 20 11:44:13 2020 NAMESPACE: wccns STATUS: deployed REVISION: 1 TEST SUITE: None   For non-SSL access to the Oracle WebCenter Content application, get the details of the services by the ingress:\n$ kubectl describe ingress wccinfra-traefik -n wccns     Click here to see all services supported by the above deployed ingress.    Name: wccinfra-traefik Namespace: wccns Address: Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) Rules: Host Path Backends ---- ---- -------- domain1.org /console wccinfra-adminserver:7001 (10.244.0.201:7001) /em wccinfra-adminserver:7001 (10.244.0.201:7001) /wls-exporter wccinfra-adminserver:7001 (10.244.0.201:7001) /cs wccinfra-cluster-ucm-cluster:16200 (10.244.0.202:16200,10.244.0.207:16200,10.244.0.211:16200) /adfAuthentication wccinfra-cluster-ucm-cluster:16200 (10.244.0.202:16200,10.244.0.207:16200,10.244.0.211:16200) /_ocsh wccinfra-cluster-ucm-cluster:16200 (10.244.0.202:16200,10.244.0.207:16200,10.244.0.211:16200) /_dav wccinfra-cluster-ucm-cluster:16200 (10.244.0.202:16200,10.244.0.207:16200,10.244.0.211:16200) /idcws wccinfra-cluster-ucm-cluster:16200 (10.244.0.202:16200,10.244.0.207:16200,10.244.0.211:16200) /idcnativews wccinfra-cluster-ucm-cluster:16200 (10.244.0.202:16200,10.244.0.207:16200,10.244.0.211:16200) /wsm-pm wccinfra-cluster-ucm-cluster:16200 (10.244.0.202:16200,10.244.0.207:16200,10.244.0.211:16200) /ibr wccinfra-cluster-ibr-cluster:16250 (10.244.0.203:16250) /ibr/adfAuthentication wccinfra-cluster-ibr-cluster:16250 (10.244.0.203:16250) /weblogic/ready wccinfra-cluster-ucm-cluster:16200 (10.244.0.202:16200,10.244.0.207:16200,10.244.0.211:16200) /imaging wccinfra-cluster-ipm-cluster:16000 (10.244.0.206:16000,10.244.0.209:16000,10.244.0.213:16000) /dc-console wccinfra-cluster-capture-cluster:16400 (10.244.0.204:16400,10.244.0.208:16400,10.244.0.212:16400) /dc-client wccinfra-cluster-capture-cluster:16400 (10.244.0.204:16400,10.244.0.208:16400,10.244.0.212:16400) /wcc wccinfra-cluster-wccadf-cluster:16225 (10.244.0.205:16225,10.244.0.210:16225,10.244.0.214:16225) Annotations: kubernetes.io/ingress.class: traefik meta.helm.sh/release-name: wcc-traefik-ingress meta.helm.sh/release-namespace: wccns Events: \u0026lt;none\u0026gt;      For SSL access to the Oracle WebCenter Content application, get the details of the services by the above deployed ingress:\n$ kubectl describe ingress wccinfra-traefik -n wccns     Click here to see all services supported by the above deployed ingress.    Name: wccinfra-traefik Namespace: wccns Address: Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) Rules: Host Path Backends ---- ---- -------- domain1.org /console wccinfra-adminserver:7001 (10.244.0.201:7001) /em wccinfra-adminserver:7001 (10.244.0.201:7001) /wls-exporter wccinfra-adminserver:7001 (10.244.0.201:7001) /cs wccinfra-cluster-ucm-cluster:16200 (10.244.0.202:16200,10.244.0.207:16200,10.244.0.211:16200) /adfAuthentication wccinfra-cluster-ucm-cluster:16200 (10.244.0.202:16200,10.244.0.207:16200,10.244.0.211:16200) /_ocsh wccinfra-cluster-ucm-cluster:16200 (10.244.0.202:16200,10.244.0.207:16200,10.244.0.211:16200) /_dav wccinfra-cluster-ucm-cluster:16200 (10.244.0.202:16200,10.244.0.207:16200,10.244.0.211:16200) /idcws wccinfra-cluster-ucm-cluster:16200 (10.244.0.202:16200,10.244.0.207:16200,10.244.0.211:16200) /idcnativews wccinfra-cluster-ucm-cluster:16200 (10.244.0.202:16200,10.244.0.207:16200,10.244.0.211:16200) /wsm-pm wccinfra-cluster-ucm-cluster:16200 (10.244.0.202:16200,10.244.0.207:16200,10.244.0.211:16200) /ibr wccinfra-cluster-ibr-cluster:16250 (10.244.0.203:16250) /ibr/adfAuthentication wccinfra-cluster-ibr-cluster:16250 (10.244.0.203:16250) /weblogic/ready wccinfra-cluster-ucm-cluster:16200 (10.244.0.202:16200,10.244.0.207:16200,10.244.0.211:16200) /imaging wccinfra-cluster-ipm-cluster:16000 (10.244.0.206:16000,10.244.0.209:16000,10.244.0.213:16000) /dc-console wccinfra-cluster-capture-cluster:16400 (10.244.0.204:16400,10.244.0.208:16400,10.244.0.212:16400) /dc-client wccinfra-cluster-capture-cluster:16400 (10.244.0.204:16400,10.244.0.208:16400,10.244.0.212:16400) /wcc wccinfra-cluster-wccadf-cluster:16225 (10.244.0.205:16225,10.244.0.210:16225,10.244.0.214:16225) Annotations: kubernetes.io/ingress.class: traefik meta.helm.sh/release-name: wcc-traefik-ingress meta.helm.sh/release-namespace: wccns Events: \u0026lt;none\u0026gt;     To confirm that the load balancer noticed the new ingress and is successfully routing to the domain server pods, you can send a request to the URL for the \u0026ldquo;WebLogic ReadyApp framework\u0026rdquo;, which should return an HTTP 200 status code, as follows: $ curl -v http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_PORT}/weblogic/ready * About to connect() to abc.com port 30305 (#0) * Trying 100.111.156.246... * Connected to abc.com (100.111.156.246) port 30305 (#0) \u0026gt; GET /weblogic/ready HTTP/1.1 \u0026gt; User-Agent: curl/7.29.0 \u0026gt; Host: domain1.org:30305 \u0026gt; Accept: */* \u0026gt; \u0026lt; HTTP/1.1 200 OK \u0026lt; Content-Length: 0 \u0026lt; Date: Thu, 03 Dec 2020 13:16:19 GMT \u0026lt; Vary: Accept-Encoding \u0026lt; * Connection #0 to host abc.com left intact   Verify domain application URL access For non-SSL configuration After setting up the Traefik (ingress-based) load balancer, verify that the domain application URLs are accessible through the non-SSL load balancer port 30305 for HTTP access. The sample URLs for Oracle WebCenter Content domain of type wcc are:\nhttp://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/weblogic/ready http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/console http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/cs http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/ibr http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/em http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/imaging http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/dc-console http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/wcc\tFor SSL configuration After setting up the Traefik (ingress-based) load balancer, verify that the domain applications are accessible through the SSL load balancer port 30443 for HTTPS access. The sample URLs for Oracle WebCenter Content domain are:\nhttps://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/weblogic/ready https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/console https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/cs https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/ibr https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/em https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/imaging https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/dc-console https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/wcc End-to-end SSL configuration Install the Traefik load balancer for end-to-end SSL   Use Helm to install the Traefik (ingress-based) load balancer. For detailed information, see here. Use the values.yaml file in the sample but set kubernetes.namespaces specifically.\n$ cd ${WORKDIR} $ kubectl create namespace traefik $ helm repo add traefik https://helm.traefik.io/traefik --force-update Sample output:\n\u0026#34;traefik\u0026#34; has been added to your repositories   Install Traefik:\n$ cd ${WORKDIR} $ helm install traefik traefik/traefik \\  --namespace traefik \\  --values charts/traefik/values.yaml \\  --set \u0026#34;kubernetes.namespaces={traefik}\u0026#34; \\  --set \u0026#34;service.type=NodePort\u0026#34; \\  --wait    Click here to see the sample output.   NAME: traefik LAST DEPLOYED: Sun Jan 17 23:30:20 2021 NAMESPACE: traefik STATUS: deployed REVISION: 1 TEST SUITE: None      Verify the Traefik operator status and find the port number of the SSL and non-SSL services:\n$ kubectl get all -n traefik    Click here to see the sample output.   NAME READY STATUS RESTARTS AGE pod/traefik-operator-676fc64d9c-skppn 1/1 Running 0 78d NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/traefik-operator NodePort 10.109.223.59 \u0026lt;none\u0026gt; 443:30443/TCP,80:30305/TCP 78d service/traefik-operator-dashboard ClusterIP 10.110.85.194 \u0026lt;none\u0026gt; 80/TCP 78d NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/traefik-operator 1/1 1 1 78d NAME DESIRED CURRENT READY AGE replicaset.apps/traefik-operator-676fc64d9c 1 1 1 78d replicaset.apps/traefik-operator-cb78c9dc9 0 0 0 78d      Access the Traefik dashboard through the URL http://$(hostname -f):32306, with the HTTP host traefik.example.com:\n$ curl -H \u0026#34;host: $(hostname -f)\u0026#34; http://$(hostname -f):32306/dashboard/  Note: Make sure that you specify a fully qualified node name for $(hostname -f).\n   Configure Traefik to manage the domain Configure Traefik to manage the domain application service created in this namespace, where traefik is the Traefik namespace and wccns is the namespace of the domain:\n$ helm upgrade traefik traefik/traefik --namespace traefik --reuse-values \\ --set \u0026#34;kubernetes.namespaces={traefik,wccns}\u0026#34;    Click here to see the sample output.   Release \u0026#34;traefik\u0026#34; has been upgraded. Happy Helming! NAME: traefik LAST DEPLOYED: Sun Jan 17 23:43:02 2021 NAMESPACE: traefik STATUS: deployed REVISION: 2 TEST SUITE: None    Create IngressRouteTCP   To enable SSL passthrough in Traefik, you can configure a TCP router. A sample YAML for IngressRouteTCP is available at ${WORKDIR}/charts/ingress-per-domain/tls/traefik-tls.yaml.\n Note: There is a limitation with load-balancer in end-to-end SSL configuration - accessing multiple types of servers (different Managed Servers and/or Administration Server) at the same time, is currently not supported. we can access only one managed server at a time.\n The following should be updated in traefik-tls.yaml:\n The service name and the SSL port should be updated in the Services. The load balancer hostname should be updated in the HostSNI rule.  Sample traefik-tls.yaml:\n  apiVersion: traefik.containo.us/v1alpha1 kind: IngressRouteTCP metadata: name: wcc-ucm-routetcp namespace: wccns spec: entryPoints: - websecure routes: - match: HostSNI(`your_host_name`) services: - name: wccinfra-cluster-ucm-cluster port: 16201 weight: 3 terminationDelay: 400 tls: passthrough: true  Create the IngressRouteTCP:  cd ${WORKDIR}/charts/ingress-per-domain/tls $ kubectl apply -f traefik-tls.yaml Verify end-to-end SSL access Verify the access to application URLs exposed through the configured service. You should be able to access the following Oracle WebCenter Content domain URLs:\nLOADBALANCER-SSLPORT is 30443\nhttps://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/console https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/cs https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/ibr https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/imaging https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/dc-console https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/wcc Delete the IngressRouteTCP cd ${WORKDIR}/charts/ingress-per-domain/tls $ kubectl delete -f traefik-tls.yaml Uninstall Traefik $ helm delete wcc-traefik-ingress -n wccns $ helm delete traefik -n wccns $ kubectl delete namespace traefik "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/oracle-cloud/configure-load-balancer/traefik/",
	"title": "Traefik",
	"tags": [],
	"description": "Configure the ingress-based Traefik load balancer for Oracle WebCenter Content domains.",
	"content": "This section provides information about how to install and configure the ingress-based Traefik load balancer (version 2.6.0 or later for production deployments) to load balance Oracle WebCenter Content domain clusters.\nFollow these steps to set up Traefik as a load balancer for an Oracle WebCenter Content\tdomain in a Kubernetes cluster:\nContents   Non-SSL and SSL termination\n Install the Traefik (ingress-based) load balancer Configure Traefik to manage ingresses Create an Ingress for the domain Create a certificate and generate a Kubernetes secret Create Traefik custom resource Install Ingress for SSL termination configuration    End-to-End SSL configuration\n Install the Traefik load balancer for end-to-end SSL Configure Traefik to manage the domain Create IngressRouteTCP    Create Oracle WebCenter Content domain\n  Verify domain application URL access\n Verify Non-SSL access Verify SSL termination and end-to-end SSL access    Uninstall Traefik\n  Non-SSL and SSL termination Install the Traefik (ingress-based) load balancer   Use Helm to install the Traefik (ingress-based) load balancer. For detailed information, see here. Use the values.yaml file in the sample but set kubernetes.namespaces specifically.\n$ cd ${WORKDIR} $ kubectl create namespace traefik $ helm repo add traefik https://helm.traefik.io/traefik --force-update Sample output:\n\u0026#34;traefik\u0026#34; has been added to your repositories   Install Traefik:\n$ cd ${WORKDIR} $ helm install traefik traefik/traefik \\  --namespace traefik \\  --values charts/traefik/values.yaml \\  --set \u0026#34;kubernetes.namespaces={traefik}\u0026#34; \\  --set \u0026#34;service.type=LoadBalancer\u0026#34; --wait    Click here to see the sample output.   NAME: traefik-operator LAST DEPLOYED: Mon Jun 1 19:31:20 2020 NAMESPACE: traefik STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: 1. Get Traefik load balancer IP or hostname: NOTE: It may take a few minutes for this to become available. You can watch the status by running: $ kubectl get svc traefik-operator --namespace traefik -w Once \u0026#39;EXTERNAL-IP\u0026#39; is no longer \u0026#39;\u0026lt;pending\u0026gt;\u0026#39;: $ kubectl describe svc traefik-operator --namespace traefik | grep Ingress | awk \u0026#39;{print $3}\u0026#39; 2. Configure DNS records corresponding to Kubernetes ingress resources to point to the load balancer IP or hostname found in step 1    A sample values.yaml for deployment of Traefik 2.6.0:   Click here to see values.yaml   image: name: traefik tag: 2.6.0 pullPolicy: IfNotPresent ingressRoute: dashboard: enabled: true # Additional ingressRoute annotations (e.g. for kubernetes.io/ingress.class) annotations: {} # Additional ingressRoute labels (e.g. for filtering IngressRoute by custom labels) labels: {} providers: kubernetesCRD: enabled: true kubernetesIngress: enabled: true # IP used for Kubernetes Ingress endpoints ports: traefik: port: 9000 expose: true # The exposed port for this service exposedPort: 9000 # The port protocol (TCP/UDP) protocol: TCP web: port: 8000 # hostPort: 8000 expose: true exposedPort: 30305 nodePort: 30305 # The port protocol (TCP/UDP) protocol: TCP # Use nodeport if set. This is useful if you have configured Traefik in a # LoadBalancer # nodePort: 32080 # Port Redirections # Added in 2.2, you can make permanent redirects via entrypoints. # https://docs.traefik.io/routing/entrypoints/#redirection # redirectTo: websecure websecure: port: 8443 # # hostPort: 8443 expose: true exposedPort: 30443 # The port protocol (TCP/UDP) protocol: TCP nodePort: 30443 additionalArguments: - \u0026#34;--log.level=INFO\u0026#34;   \n  Verify the Traefik (load balancer) services:\nPlease note the EXTERNAL-IP of the traefik-operator service. This is the public IP address of the load balancer that you will use to access the WebLogic Server Administration Console and WebCenter Content URLs.\n$ kubectl get service -n traefik NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE traefik LoadBalancer 10.96.8.30 123.456.xx.xx 9000:30734/TCP,30305:30305/TCP,30443:30443/TCP 6d23h To print only the Traefik EXTERNAL-IP, execute this command:\n$ TRAEFIK_PUBLIC_IP=`kubectl describe svc traefik --namespace traefik | grep Ingress | awk \u0026#39;{print $3}\u0026#39;` $ echo $TRAEFIK_PUBLIC_IP 123.456.xx.xx Verify the helm charts:\n$ helm list -n traefik NAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION traefik traefik 2 2022-09-11 12:22:41.122310912 +0000 UTC deployed traefik-10.24.3 2.8.5 Verify the Traefik status and find the port number\n$ kubectl get all -n traefik    Click here to see the sample output.   NAME READY STATUS RESTARTS AGE pod/traefik-f9cf58697-xjhpl 1/1 Running 0 7d NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/traefik LoadBalancer 10.96.8.30 123.456.xx.xx 9000:30734/TCP,30305:30305/TCP,30443:30443/TCP 7d NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/traefik 1/1 1 1 7d NAME DESIRED CURRENT READY AGE replicaset.apps/traefik-f9cf58697 1 1 1 7d      Configure Traefik to manage ingresses Configure Traefik to manage ingresses created in this namespace, where traefik is the Traefik namespace and wccns is the namespace of the domain:\n$ helm upgrade traefik traefik/traefik --namespace traefik --reuse-values \\ --set \u0026#34;kubernetes.namespaces={traefik,wccns}\u0026#34;    Click here to see the sample output.   Release \u0026#34;traefik\u0026#34; has been upgraded. Happy Helming! NAME: traefik LAST DEPLOYED: Sun Jan 17 23:43:02 2021 NAMESPACE: traefik STATUS: deployed REVISION: 2 TEST SUITE: None    Create an ingress for the domain Create an ingress for the domain in the domain namespace by using the sample Helm chart. Here path-based routing is used for ingress. Sample values for default configuration are shown in the file ${WORKDIR}/charts/ingress-per-domain/values.yaml. By default, type is TRAEFIK , tls is Non-SSL, and domainType is wccinfra. These values can be overridden by passing values through the command line or can be edited in the sample file values.yaml based on the type of configuration (non-SSL or SSL). If needed, you can update the ingress YAML file to define more path rules (in section spec.rules.host.http.paths) based on the domain application URLs that need to be accessed. The template YAML file for the Traefik (ingress-based) load balancer is located at ${WORKDIR}/charts/ingress-per-domain/templates/traefik-ingress.yaml\n  Install ingress-per-domain using Helm for non-SSL configuration:\n$ export LB_HOSTNAME=\u0026lt;Traefik load balancer DNS name\u0026gt; #OR leave it empty to point to Traefik load-balancer IP, by default $ export LB_HOSTNAME=\u0026#39;\u0026#39;  Note: Make sure that you specify DNS name to point to the Traefik load balancer hostname, or leave it empty to point to the Traefik load-balancer IP.\n $ cd ${WORKDIR} $ helm install wcc-traefik-ingress \\  charts/ingress-per-domain \\  --set type=TRAEFIK \\  --namespace wccns \\  --values charts/ingress-per-domain/values.yaml \\  --set \u0026#34;traefik.hostname=$LB_HOSTNAME\u0026#34; \\  --set tls=NONSSL Sample output:\nNAME: wcc-traefik-ingress LAST DEPLOYED: Sun Jan 17 23:49:09 2021 NAMESPACE: wccns STATUS: deployed REVISION: 1 TEST SUITE: None   Create a certificate and generate a Kubernetes secret   For secured access (SSL) to the Oracle WebCenter Content application, create a certificate :\n$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \u0026#34;/CN=\u0026lt;Traefik load balancer DNS name\u0026gt;\u0026#34; #OR use the following command if you chose to leave LB_HOSTNAME empty in the previous step $ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \u0026#34;/CN=*\u0026#34;  Note: Make sure that you specify DNS name to point to the Traefik load balancer hostname.\n   Generate a Kubernetes secret:\n$ kubectl -n wccns create secret tls domain1-tls-cert --key /tmp/tls1.key --cert /tmp/tls1.crt   Create Traefik custom resource   Create Traefik Middleware custom resource\nIn case of SSL termination, Traefik must pass a custom header WL-Proxy-SSL:true to the WebLogic Server endpoints. Create the Middleware using the following command:\n$ cat \u0026lt;\u0026lt;EOF | kubectl apply -f - apiVersion: traefik.containo.us/v1alpha1 kind: Middleware metadata: name: wls-proxy-ssl namespace: wccns spec: headers: customRequestHeaders: WL-Proxy-SSL: \u0026#34;true\u0026#34; EOF   Create the Traefik TLSStore custom resource.\nIn case of SSL termination, Traefik should be configured to use the user-defined SSL certificate. If the user-defined SSL certificate is not configured, Traefik will create a default SSL certificate. To configure a user-defined SSL certificate for Traefik, use the TLSStore custom resource. The Kubernetes secret created with the SSL certificate should be referenced in the TLSStore object. Run the following command to create the TLSStore:\n$ cat \u0026lt;\u0026lt;EOF | kubectl apply -f - apiVersion: traefik.containo.us/v1alpha1 kind: TLSStore metadata: name: default namespace: wccns spec: defaultCertificate: secretName: domain1-tls-cert EOF   Install Ingress for SSL termination configuration   Install ingress-per-domain using Helm for SSL configuration.\nThe Kubernetes secret name should be updated in the template file.\nThe template file also contains the following annotations:\ntraefik.ingress.kubernetes.io/router.entrypoints: websecure traefik.ingress.kubernetes.io/router.tls: \u0026#34;true\u0026#34; traefik.ingress.kubernetes.io/router.middlewares: wccns-wls-proxy-ssl@kubernetescrd The entry point for SSL access and the Middleware name should be updated in the annotation. The Middleware name should be in the form \u0026lt;namespace\u0026gt;-\u0026lt;middleware name\u0026gt;@kubernetescrd.\n$ cd ${WORKDIR} $ helm install wcc-traefik-ingress \\  charts/ingress-per-domain \\  --set type=TRAEFIK \\  --namespace wccns \\  --values charts/ingress-per-domain/values.yaml \\  --set \u0026#34;traefik.hostname=$LB_HOSTNAME\u0026#34; \\  --set \u0026#34;traefik.hostnameorip=$TRAEFIK_PUBLIC_IP\u0026#34; \\  --set tls=SSL Sample output:\nNAME: wcc-traefik-ingress LAST DEPLOYED: Mon Jul 20 11:44:13 2020 NAMESPACE: wccns STATUS: deployed REVISION: 1 TEST SUITE: None   Get the details of the services by the above deployed ingress:\n$ kubectl describe ingress wccinfra-traefik -n wccns   To confirm that the load balancer noticed the new ingress and is successfully routing to the domain server pods, you can send a request to the URL for the \u0026ldquo;WebLogic ReadyApp framework\u0026rdquo;, which should return an HTTP 200 status code, as follows:\n$ curl -v http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_PORT}/weblogic/ready * About to connect() to abc.com port 30305 (#0) * Trying 100.111.156.246... * Connected to abc.com (100.111.156.246) port 30305 (#0) \u0026gt; GET /weblogic/ready HTTP/1.1 \u0026gt; User-Agent: curl/7.29.0 \u0026gt; Host: domain1.org:30305 \u0026gt; Accept: */* \u0026gt; \u0026lt; HTTP/1.1 200 OK \u0026lt; Content-Length: 0 \u0026lt; Date: Thu, 03 Dec 2020 13:16:19 GMT \u0026lt; Vary: Accept-Encoding \u0026lt; * Connection #0 to host abc.com left intact   End-to-End SSL configuration Install the Traefik load balancer for end-to-end SSL   Use Helm to install the Traefik (ingress-based) load balancer. For detailed information, see here. Use the values.yaml file in the sample but set kubernetes.namespaces specifically.\n$ cd ${WORKDIR} $ kubectl create namespace traefik $ helm repo add traefik https://helm.traefik.io/traefik --force-update Sample output:\n\u0026#34;traefik\u0026#34; has been added to your repositories   Install Traefik:\n$ cd ${WORKDIR} $ helm install traefik traefik/traefik \\  --namespace traefik \\  --values charts/traefik/values.yaml \\  --set \u0026#34;kubernetes.namespaces={traefik}\u0026#34; \\  --set \u0026#34;service.type=LoadBalancer\u0026#34; \\  --wait    Click here to see the sample output.   NAME: traefik LAST DEPLOYED: Sun Jan 17 23:30:20 2021 NAMESPACE: traefik STATUS: deployed REVISION: 1 TEST SUITE: None      Verify the Traefik operator status and find the port number of the SSL and non-SSL services:\n$ kubectl get all -n traefik    Click here to see the sample output.   NAME READY STATUS RESTARTS AGE pod/traefik-operator-676fc64d9c-skppn 1/1 Running 0 78d NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/traefik-operator NodePort 10.109.223.59 \u0026lt;none\u0026gt; 443:30443/TCP,80:30305/TCP 78d service/traefik-operator-dashboard ClusterIP 10.110.85.194 \u0026lt;none\u0026gt; 80/TCP 78d NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/traefik-operator 1/1 1 1 78d NAME DESIRED CURRENT READY AGE replicaset.apps/traefik-operator-676fc64d9c 1 1 1 78d replicaset.apps/traefik-operator-cb78c9dc9 0 0 0 78d      Configure Traefik to manage the domain Configure Traefik to manage the domain application service created in this namespace, where traefik is the Traefik namespace and wccns is the namespace of the domain:\n$ helm upgrade traefik traefik/traefik --namespace traefik --reuse-values \\ --set \u0026#34;kubernetes.namespaces={traefik,wccns}\u0026#34;    Click here to see the sample output.   Release \u0026#34;traefik\u0026#34; has been upgraded. Happy Helming! NAME: traefik LAST DEPLOYED: Sun Jan 17 23:43:02 2021 NAMESPACE: traefik STATUS: deployed REVISION: 2 TEST SUITE: None    Create IngressRouteTCP   To enable SSL passthrough in Traefik, you can configure a TCP router. A sample YAML for IngressRouteTCP is available at ${WORKDIR}/charts/ingress-per-domain/tls/traefik-tls.yaml.\n Note: There is a limitation with load-balancer in end-to-end SSL configuration - accessing multiple types of servers (different Managed Servers and/or Administration Server) at the same time, is currently not supported. we can access only one managed server at a time.\n The following should be updated in traefik-tls.yaml:\n The service name and the SSL port should be updated in the Services. The load balancer hostname(DNS name) should be updated in the HostSNI rule.  Sample traefik-tls.yaml:\n  apiVersion: traefik.containo.us/v1alpha1 kind: IngressRouteTCP metadata: name: wcc-ucm-routetcp namespace: wccns spec: entryPoints: - websecure routes: - match: HostSNI(`\u0026lt;Traefik load balancer DNS name\u0026gt;`) services: - name: wccinfra-cluster-ucm-cluster port: 16201 weight: 3 terminationDelay: 400 tls: passthrough: true  Note: Make sure that you specify DNS name to point to the Traefik load balancer hostname, or specify \u0026lsquo;*\u0026rsquo; to point to the Traefik load balancer IP.\n  Create the IngressRouteTCP:  cd ${WORKDIR}/charts/ingress-per-domain/tls $ kubectl apply -f traefik-tls.yaml Create Oracle WebCenter Content domain With the load-balancer configured, please create your domain by following the instructions documented in Create Oracle WebCenter Content domains, before verifying domain application URL access.\nVerify domain application URL access Verify Non-SSL access After setting up the Traefik (ingress-based) load balancer, verify that the domain application URLs are accessible through the load balancer port 30305 for HTTP access. The sample URLs for Oracle WebCenter Content domain of type wcc are:\nhttp://${TRAEFIK_PUBLIC_IP}:30305/weblogic/ready http://${TRAEFIK_PUBLIC_IP}:30305/console http://${TRAEFIK_PUBLIC_IP}:30305/cs http://${TRAEFIK_PUBLIC_IP}:30305/ibr http://${TRAEFIK_PUBLIC_IP}:30305/imaging http://${TRAEFIK_PUBLIC_IP}:30305/dc-console http://${TRAEFIK_PUBLIC_IP}:30305/wcc Verify SSL termination and end-to-end SSL access After setting up the Traefik (ingress-based) load balancer, verify that the domain applications are accessible through the SSL load balancer port 30443 for HTTPS access. The sample URLs for Oracle WebCenter Content domain are:\nLOADBALANCER-SSLPORT is 30443\nhttps://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/console https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/cs https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/ibr https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/imaging https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/dc-console https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/wcc Uninstall Traefik $ helm delete wcc-traefik-ingress -n wccns $ helm delete traefik -n wccns $ kubectl delete namespace traefik "
},
{
	"uri": "/fmw-kubernetes/soa-domains/edg-guide/setup-edg/",
	"title": "Setup steps",
	"tags": [],
	"description": "Set up Oracle SOA Suite Enterprise Deployment on Kubernetes.",
	"content": "This section provides recommended steps to set up Oracle SOA Suite enterprise deployment on Kubernetes to eliminate single points of failure and to provide high availability.\n Set up your Kubernetes cluster Prepare the environment  Configure firewalls and network Load Oracle SOA Suite images on all the worker nodes Enable a shared storage location for the persistent volume   Create a database and the appropriate database services Install and configure Oracle HTTP Server in the DMZ Configure a front-end load balancer Create worker nodes Apply operating system changes for Coherence Deploy WebLogic Kubernetes Operator and Oracle SOA Suite Configure redundant persistent volume Configure the required priority for mounts Set front-end addresses Enable FAN for GridLink data sources Configure ASM Configure coredns allocation Adjust server\u0026rsquo;s pods Liveness Probe  Set up your Kubernetes cluster Prepare the environment for the Kubernetes control plane (Master nodes)   Create the L4/TCP listener for the load balancer (LBR).\n  Create the LBR backend pool with the list of control plane nodes that will be added (do not use IPs, always use hostnames).\n Note: We recommend maintaining the values of the following kube-api backend pool parameters within the prescribed range to minimize the downtime while restarting the Kubernetes control pane or performing maintenance operations.\n  Healthcheck interval : Within 1000 milliseconds Healthcheck timeout : Within 900 milliseconds    Enable the L4 LBR to route to the backend set/pool.\n Note: It is important that this is an L4/TCP listener, not an HTTP/HTTPS listener.\n   Make sure that the nodes are in ready state.\n  Create an ssh key (use a common ssh key to enable access from the node executing the setup to the control plane nodes).\n  Allow traffic in intermediate firewalls between control plane nodes and the front-end LBR. Refer to the Kubernetes documentation for the required ports.\n  Set up Master nodes Refer to the README to set up the master nodes.\n Note: It is recommended to set up the control plane (Master) with three nodes. See the Topology for more details.\n Prepare the environment Configure firewalls and network  Allow traffic from the load balancer (LBR) to the Oracle HTTP Server (OHS) port that will be configured (7777 by default for OHS). Allow traffic from the OHS to the node port that will be configured in the worker nodes for the Administration Server (30701), SOA cluster (30801), and Service Bus cluster (30901). Allow traffic from the worker nodes to the control plane front-end kube-api virtual server port and also to the front-end Oracle SOA Suite. Allow traffic from worker nodes to the database listener and ONS port (1521 and 6200 by default, respectively).  You can use the Enterprise Deployment Guide for Oracle SOA Suite on-premise as a reference.\nLoad Oracle SOA Suite images on all the worker nodes Refer to Obtain the Oracle SOA Suite Docker image to load the images on each worker node and tag appropriately.\nEnable a shared storage location for the persistent volume A shared storage device must be used from the different worker nodes. This storage hosts the Oracle SOA Suite domain directory. Initially, a single storage location is used to create a persistent volume that will host the Oracle SOA Suite domain. Mount this shared storage (NFS/NAS) from all the worker nodes using the same mount path in all of them.\nFor example, mount NFS1 (10.10.0.21:/k8nfs) in all the worker nodes to a share directory /k8nfs:\n$ grep \u0026#34;k8nfs nfs\u0026#34; /etc/fstab 10.10.0.21:/k8nfs /k8nfs nfs rw,relatime,vers=3,rsize=1048576,wsize=1048576,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,mountaddr=10.10.0.21,mountvers=3,mountport=2048,mountproto=udp,local_lock=none,addr=10.10.0.21 Later, steps are provided to configure a second storage location for high availability.\nCreate a database and the appropriate database services The installation and creation of the RAC database is out of the scope of this document. Once the database is configured, the appropriate services must be created to access the schemas from the middle tier. It is critical that a precise non-default/administration service is created for Oracle SOA Suite. Refer to Preparing the Database for an Enterprise Deployment in the Enterprise Deployment Guide for Oracle SOA Suite 12.2.1.4.\nInstall and configure Oracle HTTP Server in the DMZ Follow the steps in the Enterprise Deployment Guide for Oracle SOA Suite to create two Oracle HTTP Server (OHS) instances in separate nodes from the worker nodes. To configure OHS with the back-end Kubernetes Oracle SOA Suite or Service Bus servers, you must use a port in the range of 30000 - 32767. You will use this port in the Oracle SOA Suite configuration scripts later on.\n Configuring Oracle HTTP Server to Route Requests to the Administration Server URL and WSMPM Configuring the Web Tier for the Oracle SOA Extended Domain Configuring the Web Tier for the Oracle Service Bus Extended Domain  In this Kubernetes Enterprise Deployment Guide, OHS routes to node ports configured for each separate Oracle SOA Suite/Service Bus cluster in the SOA domain. OHS then routes to these node ports, which redirect to the pertaining server pods. The OHS directive for the configuration must disable DynamicServerList because the node ports are not really WebLogic listeners and it is the node port configuration that maintains an intelligent list of available WebLogic servers. The OHS directive for the soa-infra mount in OHS looks like this:\n\u0026lt;Location /soa-infra\u0026gt; WLSRequest ON DynamicServerList OFF WebLogicCluster workernode1:30801,workernode2:30801,workernode3:30801 WLProxySSL OFF WLProxySSLPassThrough OFF \u0026lt;/Location\u0026gt; Similarly, the other directives for other paths should reflect similar node port addresses.\nConfigure a front-end load balancer You can either use BigIp F5 LBR or any standard LBR, such as CISCO. Refer to the Enterprise Deployment Guide for Oracle SOA Suite for the required virtual servers: Preparing the Load Balancer and Firewalls for an Enterprise Deployment. The on-premises Enterprise Deployment Guide provides a detailed list of virtual servers/listeners that can be used for optimum isolation of services and traffic. For Kubernetes, at a minimum you should have a virtual server/listener for Oracle SOA Suite using the OHS listeners as back-end pool.\n  Create the load balancer\u0026rsquo;s L7/http listener.\n  Create a back-end pool with the list of OHS nodes/ports that will be used by Oracle SOA Suite (do not use IPs, always use hostnames).\n  Enable the L7/http listener load balancer to route to the OHS back-end set/pool.\n  Configure the front-end load balancer to route to the OHS pool.\n  Create worker nodes Refer to Set up Worker nodes for details.\nApply operating system changes for Coherence Coherence requires specific settings to create clusters in a Kubernetes environment. Refer to the steps provided in the WebLogic Kubernetes Operator documentation.\nDeploy WebLogic Kubernetes Operator and Oracle SOA Suite The steps to deploy WebLogic Kubernetes Operator and the Oracle SOA Suite domain are automated with the scripts. Refer to the README for details.\nAfter successful Oracle SOA Suite domain creation and starting the servers, check the pods and the different services created. Once the Oracle SOA Suite managed servers reach RUNNING state (the pods are ready), check typical Oracle SOA Suite URLs using the front-end load balancer:\nSOA pods and services deployed and ready:\n$ kubectl get all -n soans NAME READY STATUS RESTARTS AGE pod/soaedgdomain-adminserver 1/1 Running 0 47h pod/soaedgdomain-create-soa-infra-domain-job-6pq9z 0/1 Completed 0 68d pod/soaedgdomain-soa-server1 1/1 Running 0 2d2h pod/soaedgdomain-soa-server2 1/1 Running 0 2d2h NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/soaedgdomain-adminserver ClusterIP None \u0026lt;none\u0026gt; 30012/TCP,7001/TCP 2d4h service/soaedgdomain-adminserver-ext NodePort 10.104.20.22 \u0026lt;none\u0026gt; 30012:30012/TCP,7001:30701/TCP 31d service/soaedgdomain-cluster-osb-cluster ClusterIP 10.100.97.127 \u0026lt;none\u0026gt; 8002/TCP 68d service/soaedgdomain-cluster-soa-cluster ClusterIP 10.101.101.113 \u0026lt;none\u0026gt; 7003/TCP 68d service/soaedgdomain-cluster-soa-cluster-node-port NodePort 10.105.51.223 \u0026lt;none\u0026gt; 7003:30801/TCP 68d service/soaedgdomain-osb-server1 ClusterIP 10.110.81.153 \u0026lt;none\u0026gt; 8002/TCP 2d4h service/soaedgdomain-osb-server2 ClusterIP 10.103.220.112 \u0026lt;none\u0026gt; 8002/TCP 2d4h service/soaedgdomain-osb-server3 ClusterIP 10.97.50.117 \u0026lt;none\u0026gt; 8002/TCP 2d4h service/soaedgdomain-osb-server4 ClusterIP 10.98.48.247 \u0026lt;none\u0026gt; 8002/TCP 2d4h service/soaedgdomain-osb-server5 ClusterIP 10.102.137.176 \u0026lt;none\u0026gt; 8002/TCP 2d4h service/soaedgdomain-soa-server1 ClusterIP None \u0026lt;none\u0026gt; 7003/TCP 2d4h service/soaedgdomain-soa-server2 ClusterIP None \u0026lt;none\u0026gt; 7003/TCP 2d4h service/soaedgdomain-soa-server3 ClusterIP 10.105.108.74 \u0026lt;none\u0026gt; 7003/TCP 2d4h service/soaedgdomain-soa-server4 ClusterIP 10.109.191.102 \u0026lt;none\u0026gt; 7003/TCP 2d4h service/soaedgdomain-soa-server5 ClusterIP 10.107.2.99 \u0026lt;none\u0026gt; 7003/TCP 2d4h NAME COMPLETIONS DURATION AGE job.batch/soaedgdomain-create-soa-infra-domain-job 1/1 4m24s 68d Configure redundant persistent volume To increase the flexibility in moving Oracle SOA Suite or Service Bus pods around in the Kubernetes cluster, we use node selectors where odd server pods (soa_server1, soa_server3, soa_server5, and so on) are assigned to node selector 1 and even server pods (soa_server2, soa_server4, soa_server6, and so on) are assigned to node selector 2. The resulting configuration is:\nTo use this configuration, follow these steps:\n  Stop the Oracle SOA Suite domain. Refer to Scripts to start and stop a domain.\n  Mount NFS1 in all even worker nodes and NFS2 in all odd worker nodes as in the diagram above. For example:\nMOUNT ON ODD NODE [opc@olk8-w1 ~]$ grep \u0026#34;k8nfs nfs\u0026#34; /etc/fstab 10.10.0.21:/k8nfs /k8nfs nfs rw,relatime,vers=3,rsize=1048576,wsize=1048576,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,mountaddr=10.10.0.21,mountvers=3,mountport=2048,mountproto=udp,local_lock=none,addr=10.10.0.21 MOUNT ON EVEN NODE [opc@olk8-w2 ~]$ grep \u0026#34;k8nfs nfs\u0026#34; /etc/fstab 10.10.0.27:/k8nfs2 /k8nfs nfs rw,relatime,vers=3,rsize=1048576,wsize=1048576,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,mountaddr=10.10.0.27,mo untvers=3,mountport=2048,mountproto=udp,local_lock=none,addr=10.10.0.27 MOUNT ON ODD NODE [opc@olk8-w3 ~]$ grep \u0026#34;k8nfs nfs\u0026#34; /etc/fstab 10.10.0.21:/k8nfs /k8nfs nfs rw,relatime,vers=3,rsize=1048576,wsize=1048576,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,mountaddr=10.10.0.21,mountvers=3, mountport=2048,mountproto=udp,local_lock=none,addr=10.10.0.21   Copy the domain mount to an NFS replica, NFS2 (this can be done through a snapshot or through direct sftp/secure copy).\nFor example, if the domain is deployed in /k8nfs hosted by NFS1, after stopping the domain, secure copy the data present at /k8nfs on NFS1 to /k8nfs2 on NFS2:\n$ cd /k8nfs $ scp -R * user@[NFS2]:/k8nfs2   Label the odd nodes for NFS1 and the even nodes for NFS2.\nFor example, add the label diskgroup=dg1 for NFS1 and diskgroup=dg2 for NFS2:\n$ kubectl label nodes olk8-w1 diskgroup=dg1 $ kubectl label nodes olk8-w2 diskgroup=dg2 $ kubectl label nodes olk8-w3 diskgroup=dg1 Verify the added labels using the following command:\n$ kubectl get nodes --show-labels Sample output is:\nNAME STATUS ROLES AGE VERSION LABELS olk8-m1 Ready master 10d v1.XX.X beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=olk8-m1,kubernetes.io/os=linux,node-role.kubernetes.io/master= olk8-m2 Ready master 10d v1.XX.X beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=olk8-m2,kubernetes.io/os=linux,node-role.kubernetes.io/master= olk8-m3 Ready master 10d v1.XX.X beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=olk8-m3,kubernetes.io/os=linux,node-role.kubernetes.io/master= olk8-w1 Ready \u0026lt;none\u0026gt; 10d v1.XX.X beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,diskgroup=dg1,kubernetes.io/arch=amd64,kubernetes.io/hostname=olk8-w1,kubernetes.io/os=linux,name=admin olk8-w2 Ready \u0026lt;none\u0026gt; 10d v1.XX.X beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,diskgroup=dg2,kubernetes.io/arch=amd64,kubernetes.io/hostname=olk8-w2,kubernetes.io/os=linux,name=wls1 olk8-w3 Ready \u0026lt;none\u0026gt; 10d v1.XX.X beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,diskgroup=dg1,kubernetes.io/arch=amd64,kubernetes.io/hostname=olk8-w3,kubernetes.io/os=linux,name=wls2   To assign the appropriate selectors in the domain:\na. Edit the domain (domain.yaml).\nb. Alter the managed servers section for all the managed servers configured in the cluster, sample for soa_server1 and soa_server2 as shown below:\nmanagedServers: - serverName: soa_server1 serverPod: nodeSelector: diskgroup: dg1 - serverName: soa_server2 serverPod: nodeSelector: diskgroup: dg2 c. Apply the domain.yaml changes:\n$ kubectl apply -f domain.yaml    IMPORTANT: Once this redundant PV configuration is in use, all changes that reside out of the config directory in the domain will need to be copied/synced to the secondary NAS mount manually. The managed servers using NFS2 in the diagram above will replicate only configuration changes that modify files/artifacts under the $DOMAIN_HOME/config directory. The rest of changes are NOT copied automatically by the WebLogic infrastructure.\n For example, if you deploy an ear and specify an upload or stage directory out of the config directory, the ear files will NOT be copied by WebLogic). Fileadapter composites will place output files in mounts accessible from the pods. The mount point and PV/PVC for the different Oracle SOA Suite server file locations need to be the same, hence a different one from the one used for the $DOMAIN_HOME location.\nConfigure the required priority for mounts When using block volume mounts for the Docker/CRIO images, it may occur that the mount takes time to complete on reboot. This is the case block volume with mount point being affected by network and storage latency. In this case, it is required to adjust the priority and dependency of the process on reboot, otherwise Docker will start and many images will be missing. To resolve this issue:\n  Identify the systemd units for the mounts that the container will depend on, including the NFS where the Oracle SOA Suite domain will reside. Identify mount systemd units in the Operating System:\n$ cat /etc/fstab | grep \u0026#34;docker ext4\u0026#34; UUID=c07d39e4-5d8f-47af-b936-bf276cc43664 /docker ext4 defaults,_netdev,nofail 0 2 $ ls /run/systemd/generator/ | grep docker docker.mount scratch-docker.mount   Add the units to the Docker/CRIO service as a dependency in the AFTER list. Identify mount systemd units in the operating system expand source:\n$ cat /lib/systemd/system/docker.service | grep After After=network-online.target firewalld.service containerd.service docker.mount   This guarantees that the container will start only after the required mount is ready.\n  Set front-end addresses For each of the Oracle SOA Suite (soa_cluster) and Service Bus (osb_cluster) clusters, set the appropriate front-end address as follows:\n  Sign in to the WebLogic Administration Console.\n  Navigate to domain_name -\u0026gt; environment -\u0026gt; clusters.\n  Click the cluster name.\n  Click the HTTP tab.\n  Enter the Frontend Host and Frontend Port details.\n   Note: Set the front-end details for each cluster and for the Administration Server.\n Enable FAN for GridLink data sources Data sources in the default deployment for Oracle SOA Suite on Kubernetes use generic data sources. With ONS auto-registration in 12.2 Database and later, it is only necessary to enable FAN for the data sources to convert to GridLink (GLDS). You can do this by using the WebLogic Administration Console or the following command and restarting the Administration Server and the managed servers:\ngrep -L fan-enabled $domain_home/config/jdbc/*.xml | xargs sed -i \u0026#34;s/\u0026lt;\\/jdbc-data-source\u0026gt;/\u0026lt;jdbc-oracle-params\u0026gt;\u0026lt;fan-enabled\u0026gt;true\u0026lt;\\/fan-enabled\u0026gt;\u0026lt;\\/jdbc-oracle-params\u0026gt;\u0026lt;\\/jdbc-data-source\u0026gt;/g\u0026#34; After the change is applied, verify that all data sources are marked as GridLink Data Sources in the WebLogic Administration Console.\nConfigure ASM Refer to the on-premises Enterprise Deployment Guide for steps to configure Automatic Service Migration.\nConfigure coredns allocation  NOTE: This step is applicable to any Kubernetes system using coredns regardless of Oracle SOA Suite deployment. However, the worker node creation is implicit in the setup, hence it is applied in this context (post Oracle SOA Suite deployment).\n Configure replicas for cordens to spawn both control plane and master plane. If a restore operation is performed on the control plane, worker nodes may stop working properly. If the coredns lands entirely in the worker nodes, the control plane may not function correctly if they are brought down for maintenance. Place at least two coredns pods on the control plane and another two on the worker nodes. The coredns footprint is low.\nVIRT RES SHR S %CPU %MEM TIME+ COMMAND 146268 41684 29088 S 0.3 0.1 25:44.04 coredns According to the CoreDNS documentation, you can estimate the amount of memory required for a CoreDNS instance (using default settings) with the following formula:\nMB required (default settings) = (Pods + Services) / 1000 + 54 Hence, first label nodes in both control and worker plane.\n$ kubectl label nodes olk8-m1 area=dnsarea $ kubectl label nodes olk8-m2 area=dnsarea $ kubectl label nodes olk8-m3 area=dnsarea $ kubectl label nodes olk8-w1 area=dnsarea $ kubectl label nodes olk8-w2 area=dnsarea $ kubectl label nodes olk8-w3 area=dnsarea And then update the coredns deployment to use topology spread constraints\n NOTE: Topology spread constraints is beta starting in Kubernetes v1.18\n First, enable the feature gate in kube-api server and in kube-scheduler. Then, modify the coredns deployment for an appropriate spread of pods across worker and control plane nodes.\nThe coredns topology spread config details are:\nClick below for sample updated coredns deployment:   Coredns deployment YAML    $ kubectl get deployment coredns -n kube-system -o yaml apiVersion: apps/v1 kind: Deployment metadata: annotations: deployment.kubernetes.io/revision: \u0026quot;7\u0026quot; creationTimestamp: \u0026quot;2021-01-15T13:15:05Z\u0026quot; generation: 8 labels: area: dnsarea k8s-app: kube-dns managedFields: - apiVersion: apps/v1 fieldsType: FieldsV1 fieldsV1: f:metadata: f:labels: .: {} f:k8s-app: {} f:spec: f:progressDeadlineSeconds: {} f:revisionHistoryLimit: {} f:selector: f:matchLabels: .: {} f:k8s-app: {} f:strategy: f:rollingUpdate: .: {} f:maxSurge: {} f:maxUnavailable: {} f:type: {} f:template: f:metadata: f:labels: .: {} f:k8s-app: {} f:spec: f:containers: k:{\u0026quot;name\u0026quot;:\u0026quot;coredns\u0026quot;}: .: {} f:args: {} f:image: {} f:imagePullPolicy: {} f:livenessProbe: .: {} f:failureThreshold: {} f:httpGet: .: {} f:path: {} f:port: {} f:scheme: {} f:initialDelaySeconds: {} f:periodSeconds: {} f:successThreshold: {} f:timeoutSeconds: {} f:name: {} f:ports: .: {} k:{\u0026quot;containerPort\u0026quot;:53,\u0026quot;protocol\u0026quot;:\u0026quot;TCP\u0026quot;}: .: {} f:containerPort: {} f:name: {} f:protocol: {} k:{\u0026quot;containerPort\u0026quot;:53,\u0026quot;protocol\u0026quot;:\u0026quot;UDP\u0026quot;}: .: {} f:containerPort: {} f:name: {} f:protocol: {} k:{\u0026quot;containerPort\u0026quot;:9153,\u0026quot;protocol\u0026quot;:\u0026quot;TCP\u0026quot;}: .: {} f:containerPort: {} f:name: {} f:protocol: {} f:readinessProbe: .: {} f:failureThreshold: {} f:httpGet: .: {} f:path: {} f:port: {} f:scheme: {} f:periodSeconds: {} f:successThreshold: {} f:timeoutSeconds: {} f:resources: .: {} f:limits: .: {} f:memory: {} f:requests: .: {} f:cpu: {} f:memory: {} f:securityContext: .: {} f:allowPrivilegeEscalation: {} f:capabilities: .: {} f:add: {} f:drop: {} f:readOnlyRootFilesystem: {} f:terminationMessagePath: {} f:terminationMessagePolicy: {} f:volumeMounts: .: {} k:{\u0026quot;mountPath\u0026quot;:\u0026quot;/etc/coredns\u0026quot;}: .: {} f:mountPath: {} f:name: {} f:readOnly: {} f:dnsPolicy: {} f:nodeSelector: .: {} f:kubernetes.io/os: {} f:priorityClassName: {} f:restartPolicy: {} f:schedulerName: {} f:securityContext: {} f:serviceAccount: {} f:serviceAccountName: {} f:terminationGracePeriodSeconds: {} f:tolerations: {} f:volumes: .: {} k:{\u0026quot;name\u0026quot;:\u0026quot;config-volume\u0026quot;}: .: {} f:configMap: .: {} f:defaultMode: {} f:items: {} f:name: {} f:name: {} manager: kubeadm operation: Update time: \u0026quot;2021-01-15T13:15:05Z\u0026quot; - apiVersion: apps/v1 fieldsType: FieldsV1 fieldsV1: f:metadata: f:labels: f:area: {} f:spec: f:replicas: {} f:template: f:metadata: f:annotations: .: {} f:kubectl.kubernetes.io/restartedAt: {} f:labels: f:foo: {} f:spec: f:topologySpreadConstraints: .: {} k:{\u0026quot;topologyKey\u0026quot;:\u0026quot;area\u0026quot;,\u0026quot;whenUnsatisfiable\u0026quot;:\u0026quot;DoNotSchedule\u0026quot;}: .: {} f:labelSelector: .: {} f:matchLabels: .: {} f:foo: {} f:maxSkew: {} f:topologyKey: {} f:whenUnsatisfiable: {} manager: kubectl operation: Update time: \u0026quot;2021-01-28T16:00:21Z\u0026quot; - apiVersion: apps/v1 fieldsType: FieldsV1 fieldsV1: f:metadata: f:annotations: .: {} f:deployment.kubernetes.io/revision: {} f:status: f:availableReplicas: {} f:conditions: .: {} k:{\u0026quot;type\u0026quot;:\u0026quot;Available\u0026quot;}: .: {} f:lastTransitionTime: {} f:lastUpdateTime: {} f:message: {} f:reason: {} f:status: {} f:type: {} k:{\u0026quot;type\u0026quot;:\u0026quot;Progressing\u0026quot;}: .: {} f:lastTransitionTime: {} f:lastUpdateTime: {} f:message: {} f:reason: {} f:status: {} f:type: {} f:observedGeneration: {} f:readyReplicas: {} f:replicas: {} f:updatedReplicas: {} manager: kube-controller-manager operation: Update time: \u0026quot;2021-01-28T16:00:39Z\u0026quot; name: coredns namespace: kube-system resourceVersion: \u0026quot;2520507\u0026quot; selfLink: /apis/apps/v1/namespaces/kube-system/deployments/coredns uid: 79d24e61-98f4-434f-b682-132625b04c49 spec: progressDeadlineSeconds: 600 replicas: 4 revisionHistoryLimit: 10 selector: matchLabels: k8s-app: kube-dns strategy: rollingUpdate: maxSurge: 25% maxUnavailable: 1 type: RollingUpdate template: metadata: annotations: kubectl.kubernetes.io/restartedAt: \u0026quot;2021-01-28T15:29:48Z\u0026quot; creationTimestamp: null labels: foo: bar k8s-app: kube-dns spec: containers: - args: - -conf - /etc/coredns/Corefile image: k8s.gcr.io/coredns:1.6.7 imagePullPolicy: IfNotPresent livenessProbe: failureThreshold: 5 httpGet: path: /health port: 8080 scheme: HTTP initialDelaySeconds: 60 periodSeconds: 10 successThreshold: 1 timeoutSeconds: 5 name: coredns ports: - containerPort: 53 name: dns protocol: UDP - containerPort: 53 name: dns-tcp protocol: TCP - containerPort: 9153 name: metrics protocol: TCP readinessProbe: failureThreshold: 3 httpGet: path: /ready port: 8181 scheme: HTTP periodSeconds: 10 successThreshold: 1 timeoutSeconds: 1 resources: limits: memory: 170Mi requests: cpu: 100m memory: 70Mi securityContext: allowPrivilegeEscalation: false capabilities: add: - NET_BIND_SERVICE drop: - all readOnlyRootFilesystem: true terminationMessagePath: /dev/termination-log terminationMessagePolicy: File volumeMounts: - mountPath: /etc/coredns name: config-volume readOnly: true dnsPolicy: Default nodeSelector: kubernetes.io/os: linux priorityClassName: system-cluster-critical restartPolicy: Always schedulerName: default-scheduler securityContext: {} serviceAccount: coredns serviceAccountName: coredns terminationGracePeriodSeconds: 30 tolerations: - key: CriticalAddonsOnly operator: Exists - effect: NoSchedule key: node-role.kubernetes.io/master topologySpreadConstraints: - labelSelector: matchLabels: foo: bar maxSkew: 1 topologyKey: area whenUnsatisfiable: DoNotSchedule volumes: - configMap: defaultMode: 420 items: - key: Corefile path: Corefile name: coredns name: config-volume status: availableReplicas: 4 conditions: - lastTransitionTime: \u0026quot;2021-01-21T19:08:12Z\u0026quot; lastUpdateTime: \u0026quot;2021-01-21T19:08:12Z\u0026quot; message: Deployment has minimum availability. reason: MinimumReplicasAvailable status: \u0026quot;True\u0026quot; type: Available - lastTransitionTime: \u0026quot;2021-01-28T15:29:48Z\u0026quot; lastUpdateTime: \u0026quot;2021-01-28T16:00:39Z\u0026quot; message: ReplicaSet \u0026quot;coredns-84b49c57fd\u0026quot; has successfully progressed. reason: NewReplicaSetAvailable status: \u0026quot;True\u0026quot; type: Progressing observedGeneration: 8 readyReplicas: 4 replicas: 4 updatedReplicas: 4   \nThe labels and spread topology changes are:\nlabels: foo: bar k8s-app: kube-dns topologySpreadConstraints: - labelSelector: matchLabels: foo: bar maxSkew: 1 topologyKey: area whenUnsatisfiable: DoNotSchedule This guarantees an even distribution across the master and worker nodes, so that if the control plane is restored, the worker pods will continue without issues and the other way around.\nSample resulting coredns distribution:\n$ kubectl get pods -A -o wide | grep coredns kube-system coredns-84b49c57fd-4fz4g 1/1 Running 0 166m 10.244.1.20 olk8-m2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; kube-system coredns-84b49c57fd-5mrkw 1/1 Running 0 165m 10.244.4.76 olk8-w2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; kube-system coredns-84b49c57fd-5zm88 1/1 Running 0 165m 10.244.2.17 olk8-m3 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; kube-system coredns-84b49c57fd-nqlwb 1/1 Running 0 166m 10.244.4.75 olk8-w2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; Adjust server\u0026rsquo;s pods Liveness Probe By default, the liveness probe is configured to check liveness every 45 seconds, which might cause requests to be routed to backend pods that are no longer available during outage scenarios. Recommended to adjust liveness probe values so that on hard node failures pods are marked as down faster. To configure a more aggressive probe, edit the domain and change the serverPods.livenessProbe values to the following:\nlivenessProbe: failureThreshold: 1 initialDelaySeconds: 30 periodSeconds: 5 successThreshold: 1 timeoutSeconds: 3 Refer WebLogic Kubernetes Operator documentation for details on how to customize the liveness probe.\n"
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/installguide/",
	"title": "Install Guide",
	"tags": [],
	"description": "",
	"content": "Install the WebLogic Kubernetes Operator to prepare and deploy Oracle WebCenter Content domain.\n Requirements and limitations  Understand the system requirements and limitations for deploying and running Oracle WebCenter Content with the WebLogic Kubernetes Operator, including the Oracle WebCenter Content cluster sizing recommendations.\n Prepare your environment  Prepare for creating Oracle WebCenter Content domain, including required secrets creation, persistent volume and volume claim creation, database creation, and database schema creation.\n Create Oracle WebCenter Content domain  Create Oracle WebCenter Content domain home on an existing PV or PVC and create the domain resource YAML file for deploying the generated Oracle WebCenter Content domain.\n Launch Oracle Webcenter Content Native Applications in Containers  How to launch Oracle WebCenter Content native binaries from inside containerized environment.\n "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/oracle-cloud/prepare-environment-wcc-domain/",
	"title": "Prepare environment for WCC domain",
	"tags": [],
	"description": "Prepare environment for WCC domain on Oracle Kubernetes Engine (OKE).",
	"content": "To create your Oracle WebCenter Content domain in Kubernetes OKE environment, complete the following steps:\nContents   Set up the code repository to deploy Oracle WebCenter Content domain\n  Create a namespace for the Oracle WebCenter Content domain\n  Create the imagePullSecrets\n  Install the WebLogic Kubernetes Operator\n  Prepare the environment for Oracle WebCenter Content domain\na. Upgrade the WebLogic Kubernetes Operator with the Oracle WebCenter Content domain-namespace\nb. Create a persistent storage for the Oracle WebCenter Content domain\nc. Create a Kubernetes secret with domain credentials\nd. Create a Kubernetes secret with the RCU credentials\ne. Install and start the Database\nf. Configure access to your database\ng. Run the Repository Creation Utility to set up your database schemas\n  Create Oracle WebCenter Content domain\n  Set up the code repository to deploy Oracle WebCenter Content domain Oracle WebCenter Content domain deployment on Kubernetes leverages the WebLogic Kubernetes Operator infrastructure. To deploy an Oracle WebCenter Content domain, you must set up the deployment scripts.\n  Create a working directory to set up the source code:\n$ mkdir $HOME/wcc_3.4.2 $ cd $HOME/wcc_3.4.2   Download the WebLogic Kubernetes Operator source code and Oracle WebCenter Content Suite Kubernetes deployment scripts from the WCContent repository. Required artifacts are available at OracleWebCenterContent/kubernetes.\n$ git clone https://github.com/oracle/fmw-kubernetes.git $ export WORKDIR=$HOME/wcc_3.4.2/fmw-kubernetes/OracleWebCenterContent/kubernetes   Create a namespace for the Oracle WebCenter Content domain Create a Kubernetes namespace (for example, wccns) for the domain unless you intend to use the default namespace. Use the new namespace in the remaining steps in this section. For details, see Prepare to run a domain.\n $ kubectl create namespace wccns Create the imagePullSecrets Create the imagePullSecrets (in wccns namespace) so that Kubernetes Deployment can pull the image automatically from OCIR.\n Note: Create the imagePullSecret as per your environement using a sample command like this -\n $ kubectl create secret docker-registry image-secret -n wccns --docker-server=phx.ocir.io --docker-username=axxxxxxxxxxx/oracleidentitycloudservice/\u0026lt;your_user_name\u0026gt; --docker-password='vUv+xxxxxxxxxxx\u0026lt;KN7z' --docker-email=me@oracle.com The parameter values are:\nOCI Region is phoenix phx.ocir.io OCI Tenancy Name axxxxxxxxxxx ImagePullSecret Name image-secret Username and email address me@oracle.com Auth Token Password vUv+xxxxxxxxxxx\u0026lt;KN7z\nInstall the WebLogic Kubernetes Operator The WebLogic Kubernetes Operator supports the deployment of Oracle WebCenter Content domain in the Kubernetes environment.\nIn the following example commands to install the WebLogic Kubernetes Operator, opns is the namespace and op-sa is the service account created for the WebLogic Kubernetes Operator:\nCreating namespace and service account for WebLogic Kubernetes Operator $ kubectl create namespace opns $ kubectl create serviceaccount -n opns op-sa Install WebLogic Kubernetes Operator $ cd ${WORKDIR} $ helm install weblogic-kubernetes-operator charts/weblogic-operator --namespace opns --set image=phx.ocir.io/xxxxxxxxxxx/oracle/weblogic-kubernetes-operator:3.4.2 --set imagePullSecret=image-secret --set serviceAccount=op-sa --set \u0026quot;domainNamespaces={}\u0026quot; --set \u0026quot;javaLoggingLevel=FINE\u0026quot; --wait Verify the WebLogic Kubernetes Operator pod $ kubectl get pods -n opns NAME READY STATUS RESTARTS AGE weblogic-operator-779965b66c-d8265 1/1 Running 0 11d # Verify the Operator helm Charts $ helm list -n opns NAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION weblogic-kubernetes-operator opns 3 2022-02-24 06:50:29.810106777 +0000 UTC deployed weblogic-operator-3.4.2 3.4.2 Prepare the environment for Oracle WebCenter Content domain Upgrade the WebLogic Kubernetes Operator with the Oracle WebCenter Content domain-namespace  $ cd ${WORKDIR} $ helm upgrade --reuse-values --namespace opns --set \u0026quot;domainNamespaces={wccns}\u0026quot; --wait weblogic-kubernetes-operator charts/weblogic-operator Create a persistent storage for the Oracle WebCenter Content domain In the Kubernetes namespace you created, create the PV and PVC for the domain by running the create-pv-pvc.sh script. Follow the instructions for using the script to create a dedicated PV and PVC for the Oracle WebCenter Content domain.\nHere we will use the NFS Server and mount path, created on this page.\n  Review the configuration parameters for PV creation here. Based on your requirements, update the values in the create-pv-pvc-inputs.yaml file located at ${WORKDIR}/create-weblogic-domain-pv-pvc/. Sample configuration parameter values for the Oracle WebCenter Content domain are:\n baseName: domain domainUID: wccinfra namespace: wccns weblogicDomainStorageType:: NFS weblogicDomainStorageNFSServer:: \u0026lt;your_nfs_server_ip\u0026gt; weblogicDomainStoragePath: /\u0026lt;your_dir_name\u0026gt;   Note: Make sure to update the \u0026ldquo;weblogicDomainStorageNFSServer:\u0026rdquo; with the NFS Server IP as per your Environment\n   Ensure that the path for the weblogicDomainStoragePath property exists (if not, please refer subsection 4 of this document to create it first) and has correct access permissions, and that the folder is empty.\n  Run the create-pv-pvc.sh script:\n$ cd ${WORKDIR}/create-weblogic-domain-pv-pvc $ rm -rf output/ $ ./create-pv-pvc.sh -i create-pv-pvc-inputs.yaml -o output   The create-pv-pvc.sh script will create a subdirectory pv-pvcs under the given /path/to/output-directory directory and creates two YAML configuration files for PV and PVC. Apply these two YAML files to create the PV and PVC Kubernetes resources using the kubectl create -f command:\n$ kubectl create -f output/pv-pvcs/wccinfra-domain-pv.yaml -n wccns $ kubectl create -f output/pv-pvcs/wccinfra-domain-pvc.yaml -n wccns   Get the details of PV and PVC:\n$ kubectl describe pv wccinfra-domain-pv $ kubectl describe pvc wccinfra-domain-pvc -n wccns   Create a Kubernetes secret with domain credentials Create the Kubernetes secrets username and password of the administrative account in the same Kubernetes namespace as the domain:\n$ cd ${WORKDIR}/create-weblogic-domain-credentials $ ./create-weblogic-credentials.sh -u weblogic -p welcome1 -n wccns -d wccinfra -s wccinfra-domain-credentials For more details, see this document.\nYou can check the secret with the kubectl get secret command.\nFor example:\n  Click here to see the sample secret description.   $ kubectl get secret wccinfra-domain-credentials -o yaml -n wccns apiVersion: v1 data: password: d2VsY29tZTE= username: d2VibG9naWM= kind: Secret metadata: creationTimestamp: \u0026quot;2021-07-30T06:04:33Z\u0026quot; labels: weblogic.domainName: wccinfra weblogic.domainUID: wccinfra managedFields: - apiVersion: v1 fieldsType: FieldsV1 fieldsV1: f:data: .: {} f:password: {} f:username: {} f:metadata: f:labels: .: {} f:weblogic.domainName: {} f:weblogic.domainUID: {} f:type: {} manager: kubectl operation: Update time: \u0026quot;2021-07-30T06:04:36Z\u0026quot; name: wccinfra-domain-credentials namespace: wccns resourceVersion: \u0026quot;90770768\u0026quot; selfLink: /api/v1/namespaces/wccns/secrets/wccinfra-domain-credentials uid: 9c5dab09-15f3-4e1f-a40d-457904ddf96b type: Opaque    Create a Kubernetes secret with the RCU credentials You also need to create a Kubernetes secret containing the credentials for the database schemas. When you create your domain, it will obtain the RCU credentials from this secret.\nUse the provided sample script to create the secret:\n$ cd ${WORKDIR}/create-rcu-credentials $ ./create-rcu-credentials.sh -u weblogic -p welcome1 -a sys -q welcome1 -d wccinfra -n wccns -s wccinfra-rcu-credentials The parameter values are:\n-u username for schema owner (regular user), required.\n-p password for schema owner (regular user), required.\n-a username for SYSDBA user, required.\n-q password for SYSDBA user, required.\n-d domainUID. Example: wccinfra\n-n namespace. Example: wccns\n-s secretName. Example: wccinfra-rcu-credentials\nYou can confirm the secret was created as expected with the kubectl get secret command.\nFor example:\n  Click here to see the sample secret description.   $ kubectl get secret wccinfra-rcu-credentials -o yaml -n wccns apiVersion: v1 data: password: d2VsY29tZTE= sys_password: d2VsY29tZTE= sys_username: c3lz username: d2VibG9naWM= kind: Secret metadata: creationTimestamp: \u0026#34;2020-09-16T08:23:04Z\u0026#34; labels: weblogic.domainName: wccinfra weblogic.domainUID: wccinfra managedFields: - apiVersion: v1 fieldsType: FieldsV1 fieldsV1: f:data: .: {} f:password: {} f:sys_password: {} f:sys_username: {} f:username: {} f:metadata: f:labels: .: {} f:weblogic.domainName: {} f:weblogic.domainUID: {} f:type: {} manager: kubectl operation: Update time: \u0026#34;2020-09-16T08:23:04Z\u0026#34; name: wccinfra-rcu-credentials namespace: wccns resourceVersion: \u0026#34;3277132\u0026#34; selfLink: /api/v1/namespaces/wccns/secrets/wccinfra-rcu-credentials uid: b75f4e13-84e6-40f5-84ba-0213d85bdf30 type: Opaque    Install and start the Database This step is required only when standalone database was not already setup and the user wanted to use the database in a container. The Oracle Database Docker images are supported only for non-production use. For more details, see My Oracle Support note: Oracle Support for Database Running on Docker (Doc ID 2216342.1). For production usecase it is suggested to use a standalone db. Sample provides steps to create the database in a container.\nThe database in a container can be created with a PV attached for persisting the data or without attaching the PV. In this setup we will be creating database in a container without PV attached.\n$ cd ${WORKDIR}/create-oracle-db-service $ ./start-db-service.sh -i phx.ocir.io/xxxxxxxxxxxx/oracle/database/enterprise:x.x.x.x -s image-secret -n wccns    Click here to see the Sample Output   $ ./start-db-service.sh -i phx.ocir.io/xxxxxxxxxxxx/oracle/database/enterprise:x.x.x.x -s image-secret -n wccns Checking Status for NameSpace [wccns] Skipping the NameSpace[wccns] Creation ... NodePort[30011] ImagePullSecret[docker-store] Image[phx.ocir.io/xxxxxxxxxxxx/oracle/database/enterprise:x.x.x.x] NameSpace[wccns] service/oracle-db created deployment.apps/oracle-db created [oracle-db-8598b475c5-cx5nk] already initialized .. Checking Pod READY column for State [1/1] NAME READY STATUS RESTARTS AGE oracle-db-8598b475c5-cx5nk 1/1 Running 0 20s Service [oracle-db] found NAME READY STATUS RESTARTS AGE oracle-db-8598b475c5-cx5nk 1/1 Running 0 25s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE oracle-db LoadBalancer 10.96.74.187 \u0026lt;pending\u0026gt; 1521:30011/TCP 28s [1/30] Retrying for Oracle Database Availability... [2/30] Retrying for Oracle Database Availability... [3/30] Retrying for Oracle Database Availability... [4/30] Retrying for Oracle Database Availability... [5/30] Retrying for Oracle Database Availability... [6/30] Retrying for Oracle Database Availability... [7/30] Retrying for Oracle Database Availability... [8/30] Retrying for Oracle Database Availability... [9/30] Retrying for Oracle Database Availability... [10/30] Retrying for Oracle Database Availability... [11/30] Retrying for Oracle Database Availability... [12/30] Retrying for Oracle Database Availability... [13/30] Retrying for Oracle Database Availability... Done ! The database is ready for use . Oracle DB Service is RUNNING with NodePort [30011] Oracle DB Service URL [oracle-db.wccns.svc.cluster.local:1521/devpdb.k8s]    Once database is created successfully, you can use the database connection string, as an rcuDatabaseURL parameter in the create-domain-inputs.yaml file.\nConfigure access to your database Run a container to create rcu pod\nkubectl run rcu --generator=run-pod/v1 \\  --image phx.ocir.io/xxxxxxxxxxx/oracle/wccontent:x.x.x.x \\  --namespace wccns \\  --overrides=\u0026#39;{ \u0026#34;apiVersion\u0026#34;: \u0026#34;v1\u0026#34;, \u0026#34;spec\u0026#34;: { \u0026#34;imagePullSecrets\u0026#34;: [{\u0026#34;name\u0026#34;: \u0026#34;image-secret\u0026#34;}] } }\u0026#39; \\  -- sleep infinity # Check the status of rcu pod kubectl get pods -n wccns Run the Repository Creation Utility to set up your database schemas Create or Drop schemas To create the database schemas for Oracle WebCenter Content, run the create-rcu-schema.sh script.\nFor example:\n# Make sure rcu pod status is running before executing this kubectl exec -n wccns -ti rcu /bin/bash # DB details export CONNECTION_STRING=your_db_host:1521/your_db_service export RCUPREFIX=your_schema_prefix echo -e welcome1\u0026#34;\\n\u0026#34;welcome1\u0026gt; /tmp/pwd.txt # Create schemas /u01/oracle/oracle_common/bin/rcu -silent -createRepository -databaseType ORACLE -connectString $CONNECTION_STRING -dbUser sys -dbRole sysdba -useSamePasswordForAllSchemaUsers true -selectDependentsForComponents true -schemaPrefix $RCUPREFIX -component CONTENT -component MDS -component STB -component OPSS -component IAU -component IAU_APPEND -component IAU_VIEWER -component WLS -tablespace USERS -tempTablespace TEMP -f \u0026lt; /tmp/pwd.txt # Drop schemas /u01/oracle/oracle_common/bin/rcu -silent -dropRepository -databaseType ORACLE -connectString $CONNECTION_STRING -dbUser sys -dbRole sysdba -selectDependentsForComponents true -schemaPrefix $RCUPREFIX -component CONTENT -component MDS -component STB -component OPSS -component IAU -component IAU_APPEND -component IAU_VIEWER -component WLS -f \u0026lt; /tmp/pwd.txt # Exit from the container exit  Note: In the create and drop schema commands above, pass additional components ( -component IPM -component CAPTURE ) if IPM and CAPTURE applications are enabled resepectively.\n Create Oracle WebCenter Content domain Now that you have your Docker images and you have created your RCU schemas, you are ready to create your domain. To continue, follow the Step-3 and Step-4.\n"
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/installguide/prepare-your-environment/",
	"title": "Prepare your environment",
	"tags": [],
	"description": "Prepare for creating Oracle WebCenter Content domain, including required secrets creation, persistent volume and volume claim creation, database creation, and database schema creation.",
	"content": "To prepare your Oracle WebCenter Content in Kubernetes environment, complete the following steps:\n  Set up your Kubernetes cluster\n  Install Helm\n  Pull dependent images\n  Set up the code repository to deploy Oracle WebCenter Content domain\n  Obtain the Oracle WebCenter Content Docker image\n  Install the WebLogic Kubernetes Operator\n  Prepare the environment for Oracle WebCenter Content domain\na. Create a namespace for the Oracle WebCenter Content domain\nb. Create a persistent storage for the Oracle WebCenter Content domain\nc. Create a Kubernetes secret with domain credentials\nd. Create a Kubernetes secret with the RCU credentials\ne. Configure access to your database\nf. Run the Repository Creation Utility to set up your database schemas\n  Create Oracle WebCenter Content domain\n  Set up your Kubernetes cluster If you need help setting up a Kubernetes environment, check the cheat sheet.\nInstall Helm The WebLogic Kubernetes Operator uses Helm to create and deploy the necessary resources and then run it in a Kubernetes cluster. For Helm installation and usage information, see here.\nPull dependent images Obtain dependent images and add them to your local registry. Dependent images include WebLogic Kubernetes Operator, Traefik. Pull these images and add them to your local registry:\n Pull these docker images and re-tag them as shown:  To pull an image from the Oracle Container Registry, in a web browser, navigate to https://container-registry.oracle.com and log in using the Oracle Single Sign-On authentication service. If you do not already have SSO credentials, at the top of the page, click the Sign In link to create them.\nUse the web interface to accept the Oracle Standard Terms and Restrictions for the Oracle software images that you intend to deploy. Your acceptance of these terms are stored in a database that links the software images to your Oracle Single Sign-On login credentials.\nThen, pull these docker images and re-tag them:\ndocker login https://container-registry.oracle.com (enter your Oracle email Id and password) This step is required once at every node to get access to the Oracle Container Registry. WebLogic Kubernetes Operator image:\n$ docker pull container-registry.oracle.com/middleware/weblogic-kubernetes-operator:3.4.2 $ docker tag container-registry.oracle.com/middleware/weblogic-kubernetes-operator:3.4.2 oracle/weblogic-kubernetes-operator:3.4.2 Pull Traefik Image\n$ docker pull traefik:2.6.0 Set up the code repository to deploy Oracle WebCenter Content domain Oracle WebCenter Content domain deployment on Kubernetes leverages the WebLogic Kubernetes Operator infrastructure. To deploy an Oracle WebCenter Content domain, you must set up the deployment scripts.\n  Create a working directory to set up the source code:\n$ mkdir $HOME/wcc_3.4.2 $ cd $HOME/wcc_3.4.2   Download the WebLogic Kubernetes Operator source code and Oracle WebCenter Content Suite Kubernetes deployment scripts from the WebCenter Content repository. Required artifacts are available at OracleWebCenterContent/kubernetes.\n$ git clone https://github.com/oracle/fmw-kubernetes.git $ export WORKDIR=$HOME/wcc_3.4.2/fmw-kubernetes/OracleWebCenterContent/kubernetes   Obtain the Oracle WebCenter Content Docker image Obtain the Oracle WebCenter Content image using any one of the options.\n1 Get Oracle WebCenter Content image from My Oracle Support (MOS)\n2 Get Oracle WebCenter Content image from Oracle Container Registry (OCR)\n3 Build Oracle WebCenter Content Container image\n1. Get Oracle WebCenter Content image from My Oracle Support (MOS): The Oracle WebCenter Content image with latest bundle patch and required interim patches can be obtained from My Oracle Support (MOS). This is the only image supported for production deployments. Follow the below steps to download the Oracle WebCenter Content image from My Oracle Support.\n  Download patch 34409720 from My Oracle Support (MOS).\n  Unzip the downloaded patch zip file.\nFor example:\n$ unzip p34409720_122140_Linux-x86-64.zip # sample output Archive: p34409720_122140_Linux-x86-64.zip inflating: wccontent-12.2.1.4-jdk8-ol7-220721.1014.tar inflating: README.html   Load the image archive using the docker load command.\nFor example:\n$ docker load \u0026lt; wccontent-12.2.1.4-jdk8-ol7-220721.1014.tar    Click here to see sample output   9ba403017e5e: Loading layer [==================================================\u0026gt;] 139.7MB/139.7MB d8b11c461bec: Loading layer [==================================================\u0026gt;] 10.97MB/10.97MB f4a30ae83f54: Loading layer [==================================================\u0026gt;] 20.99kB/20.99kB 8c8c62aea489: Loading layer [==================================================\u0026gt;] 344.3MB/344.3MB 2aaff97723b2: Loading layer [==================================================\u0026gt;] 4.084GB/4.084GB 13861e24e5de: Loading layer [==================================================\u0026gt;] 4.608kB/4.608kB fb87a672a557: Loading layer [==================================================\u0026gt;] 138.2kB/138.2kB 67c9ad2fbf79: Loading layer [==================================================\u0026gt;] 70.14kB/70.14kB Loaded image: oracle/wccontent:12.2.1.4-jdk8-ol7-220721.1014      Run the docker inspect command to verify that the downloaded image is the latest released image. The value of label com.oracle.weblogic.imagetool.buildid must match to 38be8314-7315-4cc8-95a1-0b4970b2b92c.\nFor example:\n$ docker inspect --format=\u0026#39;{{ index .Config.Labels \u0026#34;com.oracle.weblogic.imagetool.buildid\u0026#34; }}\u0026#39; oracle/wccontent:12.2.1.4-jdk8-ol7-220721.1014 38be8314-7315-4cc8-95a1-0b4970b2b92c   2. Get Oracle WebCenter Content image from the Oracle Container Registry (OCR): For first time users, to pull an image from the Oracle Container Registry, navigate to https://container-registry.oracle.com and log in using the Oracle Single Sign-On (SSO) authentication service. If you do not already have SSO credentials, you can create an Oracle Account using: https://profile.oracle.com/myprofile/account/create-account.jspx.\nUse the web interface to accept the Oracle Standard Terms and Restrictions for the Oracle software images that you intend to deploy. Your acceptance of these terms are stored in a database that links the software images to your Oracle Single Sign-On login credentials.\nTo obtain the image, log in to the Oracle Container Registry:\n$ docker login container-registry.oracle.com Find and then pull the prebuilt Oracle WebCenter Content Suite image 12.2.1.4:\n$ docker pull container-registry.oracle.com/middleware/webcenter-content_cpu:12.2.1.4-jdk8-ol7-220721 3. Build Oracle WebCenter Content Container image : Alternatively, if you want to build and use Oracle WebCenter Content Container image, using WebLogic Image Tool, with any additional bundle patch or interim patches, then follow these steps to create the image.\n Note: The default Oracle WebCenter Content image name used for Oracle WebCenter Content domain deployment is oracle/wccontent:12.2.1.4.0. The image created must be tagged as oracle/wccontent:12.2.1.4.0 using the docker tag command. If you want to use a different name for the image, make sure to update the new image tag name in the create-domain-inputs.yaml file and also in other instances where the oracle/wccontent:12.2.1.4.0 image name is used.\n Install the WebLogic Kubernetes Operator The WebLogic Kubernetes Operator supports the deployment of Oracle WebCenter Content domain in the Kubernetes environment. Follow the steps in this document to install WebLogic Kubernetes Operator.\n Note: Optionally, you can execute these steps to send the contents of the operator’s logs to Elasticsearch.\n In the following example commands to install the WebLogic Kubernetes Operator, opns is the namespace and op-sa is the service account created for WebLogic Kubernetes Operator:\nCreating namespace and service account for WebLogic Kubernetes Operator $ kubectl create namespace opns $ kubectl create serviceaccount -n opns op-sa Install WebLogic Kubernetes Operator $ cd ${WORKDIR} $ helm install weblogic-kubernetes-operator charts/weblogic-operator --namespace opns --set image=oracle/weblogic-kubernetes-operator:3.4.2 --set serviceAccount=op-sa --set \u0026quot;domainNamespaces={}\u0026quot; --set \u0026quot;javaLoggingLevel=FINE\u0026quot; --wait Prepare the environment for Oracle WebCenter Content domain Create a namespace for the Oracle WebCenter Content domain Create a Kubernetes namespace (for example, wccns) for the domain unless you intend to use the default namespace. Use the new namespace in the remaining steps in this section. For details, see Prepare to run a domain.\n $ kubectl create namespace wccns $ cd ${WORKDIR} $ helm upgrade --reuse-values --namespace opns --set \u0026quot;domainNamespaces={wccns}\u0026quot; --wait weblogic-kubernetes-operator charts/weblogic-operator Create a persistent storage for the Oracle WebCenter Content domain In the Kubernetes namespace you created, create the PV and PVC for the domain by running the create-pv-pvc.sh script. Follow the instructions for using the script to create a dedicated PV and PVC for the Oracle WebCenter Content domain.\n  Review the configuration parameters for PV creation here. Based on your requirements, update the values in the create-pv-pvc-inputs.yaml file located at ${WORKDIR}/create-weblogic-domain-pv-pvc/. Sample configuration parameter values for the Oracle WebCenter Content domain are:\n baseName: domain domainUID: wccinfra namespace: wccns weblogicDomainStorageType: HOST_PATH weblogicDomainStoragePath: /net/\u0026lt;your_host_name\u0026gt;/scratch/k8s_dir/wcc   Note: Alternatively, you can use NFS as the value of weblogicDomainStorageType if you choose to use an NFS server for the persistent storage.\n   Ensure that the path for the weblogicDomainStoragePath property exists and have the ownership for 1000:0. If not, you need to create it as follows:\n$ sudo mkdir /scratch/k8s_dir/wcc $ sudo chown -R 1000:0 /scratch/k8s_dir/wcc   Run the create-pv-pvc.sh script:\n$ cd ${WORKDIR}/create-weblogic-domain-pv-pvc $ rm -rf output/ $ ./create-pv-pvc.sh -i create-pv-pvc-inputs.yaml -o output   The create-pv-pvc.sh script will create a subdirectory pv-pvcs under the given /path/to/output-directory directory and creates two YAML configuration files for PV and PVC. Apply these two YAML files to create the PV and PVC Kubernetes resources using the kubectl create -f command:\n$ kubectl create -f output/pv-pvcs/wccinfra-domain-pv.yaml -n wccns $ kubectl create -f output/pv-pvcs/wccinfra-domain-pvc.yaml -n wccns   Get the details of PV and PVC:\n$ kubectl describe pv wccinfra-domain-pv $ kubectl describe pvc wccinfra-domain-pvc -n wccns   Create a Kubernetes secret with domain credentials Create the Kubernetes secrets username and password of the administrative account in the same Kubernetes namespace as the domain:\n $ cd ${WORKDIR}/create-weblogic-domain-credentials $ ./create-weblogic-credentials.sh -u weblogic -p welcome1 -n wccns -d wccinfra -s wccinfra-domain-credentials For more details, see this document.\nYou can check the secret with the kubectl get secret command.\nFor example:\n  Click here to see the sample secret description.   $ kubectl get secret wccinfra-domain-credentials -o yaml -n wccns apiVersion: v1 data: password: d2VsY29tZTE= username: d2VibG9naWM= kind: Secret metadata: creationTimestamp: \u0026quot;2020-09-16T08:22:50Z\u0026quot; labels: weblogic.domainName: wccinfra weblogic.domainUID: wccinfra managedFields: - apiVersion: v1 fieldsType: FieldsV1 fieldsV1: f:data: .: {} f:password: {} f:username: {} f:metadata: f:labels: .: {} f:weblogic.domainName: {} f:weblogic.domainUID: {} f:type: {} manager: kubectl operation: Update time: \u0026quot;2020-09-16T08:22:50Z\u0026quot; name: wccinfra-domain-credentials namespace: wccns resourceVersion: \u0026quot;3277100\u0026quot; selfLink: /api/v1/namespaces/wccns/secrets/wccinfra-domain-credentials uid: 35a8313f-1ec2-44b0-a2bf-fee381eed57f type: Opaque    Create a Kubernetes secret with the RCU credentials You also need to create a Kubernetes secret containing the credentials for the database schemas. When you create your domain, it will obtain the RCU credentials from this secret.\nUse the provided sample script to create the secret:\n$ cd ${WORKDIR}/create-rcu-credentials $ ./create-rcu-credentials.sh -u weblogic -p welcome1 -a sys -q welcome1 -d wccinfra -n wccns -s wccinfra-rcu-credentials The parameter values are:\n-u username for schema owner (regular user), required.\n-p password for schema owner (regular user), required.\n-a username for SYSDBA user, required.\n-q password for SYSDBA user, required.\n-d domainUID. Example: wccinfra\n-n namespace. Example: wccns\n-s secretName. Example: wccinfra-rcu-credentials\nYou can confirm the secret was created as expected with the kubectl get secret command.\nFor example:\n  Click here to see the sample secret description.   $ kubectl get secret wccinfra-rcu-credentials -o yaml -n wccns apiVersion: v1 data: password: d2VsY29tZTE= sys_password: d2VsY29tZTE= sys_username: c3lz username: d2VibG9naWM= kind: Secret metadata: creationTimestamp: \u0026#34;2020-09-16T08:23:04Z\u0026#34; labels: weblogic.domainName: wccinfra weblogic.domainUID: wccinfra managedFields: - apiVersion: v1 fieldsType: FieldsV1 fieldsV1: f:data: .: {} f:password: {} f:sys_password: {} f:sys_username: {} f:username: {} f:metadata: f:labels: .: {} f:weblogic.domainName: {} f:weblogic.domainUID: {} f:type: {} manager: kubectl operation: Update time: \u0026#34;2020-09-16T08:23:04Z\u0026#34; name: wccinfra-rcu-credentials namespace: wccns resourceVersion: \u0026#34;3277132\u0026#34; selfLink: /api/v1/namespaces/wccns/secrets/wccinfra-rcu-credentials uid: b75f4e13-84e6-40f5-84ba-0213d85bdf30 type: Opaque    Configure access to your database Run a container to create rcu pod\n$ kubectl run rcu --image oracle/wccontent:12.2.1.4 -n wccns -- sleep infinity #check the status of rcu pod $ kubectl get pods -n wccns Run the Repository Creation Utility to set up your database schemas Create OR Drop schemas To create the database schemas for Oracle WebCenter Content, run the create-rcu-schema.sh script.\nFor example:\n# make sure rcu pod status is running before executing this kubectl exec -n wccns -ti rcu /bin/bash # DB details export CONNECTION_STRING=your_db_host:1521/your_db_service export RCUPREFIX=your_schema_prefix echo -e welcome1\u0026#34;\\n\u0026#34;welcome1\u0026gt; /tmp/pwd.txt # Create schemas /u01/oracle/oracle_common/bin/rcu -silent -createRepository -databaseType ORACLE -connectString $CONNECTION_STRING -dbUser sys -dbRole sysdba -useSamePasswordForAllSchemaUsers true -selectDependentsForComponents true -schemaPrefix $RCUPREFIX -component CONTENT -component MDS -component STB -component OPSS -component IAU -component IAU_APPEND -component IAU_VIEWER -component WLS -tablespace USERS -tempTablespace TEMP -f \u0026lt; /tmp/pwd.txt # Drop schemas /u01/oracle/oracle_common/bin/rcu -silent -dropRepository -databaseType ORACLE -connectString $CONNECTION_STRING -dbUser sys -dbRole sysdba -selectDependentsForComponents true -schemaPrefix $RCUPREFIX -component CONTENT -component MDS -component STB -component OPSS -component IAU -component IAU_APPEND -component IAU_VIEWER -component WLS -f \u0026lt; /tmp/pwd.txt #exit from the container exit  Note: In the create and drop schema commands above, pass additional components ( -component IPM -component CAPTURE ) if IPM and CAPTURE applications are enabled respectively.\n Create Oracle WebCenter Content domain Now that you have your Docker images and you have created your RCU schemas, you are ready to create your domain. To continue, follow the instructions in Create Oracle WebCenter Content domains.\n"
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/appendix/quickstart-deployment-guide/",
	"title": "Quick start deployment guide",
	"tags": [],
	"description": "Describes how to quickly get an Oracle WebCenter Content domain instance running (using the defaults, nothing special) for development and test purposes.",
	"content": "Use this Quick Start to create an Oracle WebCenter Content domain deployment in a Kubernetes cluster (on-premise environments) with WebLogic Kubernetes Operator. Note that this walkthrough is for demonstration purposes only, not for use in production. These instructions assume that you are already familiar with Kubernetes. If you need more detailed instructions, refer to the Install Guide.\nHardware requirements Supported Linux kernel for deploying and running Oracle WebCenter Content domain with the WebLogic Kubernetes Operator is Oracle Linux 7 (UL6+) and Red Hat Enterprise Linux 7 (UL3+ only with standalone Kubernetes). Refer to the prerequisites for more details.\nFor this exercise the minimum hardware requirement to create a single node Kubernetes cluster and deploy Oracle WebCenter Content domain with one UCM and IBR Cluster each.\n   Hardware Size     RAM 32GB   Disk Space 250GB+   CPU core(s) 6    See here for resourse sizing information for Oracle WebCenter Content domain setup on Kubernetes cluster.\nSet up Oracle WebCenter Content in an on-premise environment Perform the steps in this topic to create a single instance on-premise Kubernetes cluster and create an Oracle WebCenter Content domain which deploys Oracle WebCenter Content Server and Oracle WebCenter Inbound Refinery Server.\n Step 1 - Prepare a virtual machine for the Kubernetes cluster Step 2 - Set up a single instance Kubernetes cluster Step 3 - Get scripts and images Step 4 - Install the WebLogic Kubernetes Operator Step 5 - Install the Traefik (ingress-based) load balancer Step 6 - Create and configure an Oracle WebCenter Content Domain  1. Prepare a virtual machine for the Kubernetes cluster For illustration purposes, these instructions are for Oracle Linux 7u6+. If you are using a different flavor of Linux, you will need to adjust the steps accordingly.\nThese steps must be run with the root user, unless specified otherwise. Any time you see YOUR_USERID in a command, you should replace it with your actual userid.\n 1.1 Prerequisites   Choose the directories where your Docker and Kubernetes files will be stored. The Docker directory should be on a disk with a lot of free space (more than 100GB) because it will be used for the Docker file system, which contains all of your images and containers. The Kubernetes directory is used for the /var/lib/kubelet file system and persistent volume storage.\n$ export docker_dir=/u01/docker $ export kubelet_dir=/u01/kubelet $ mkdir -p $docker_dir $kubelet_dir $ ln -s $kubelet_dir /var/lib/kubelet   Verify that IPv4 forwarding is enabled on your host.\nNote: Replace eth0 with the ethernet interface name of your compute resource if it is different.\n$ /sbin/sysctl -a 2\u0026gt;\u0026amp;1|grep -s 'net.ipv4.conf.docker0.forwarding' $ /sbin/sysctl -a 2\u0026gt;\u0026amp;1|grep -s 'net.ipv4.conf.eth0.forwarding' $ /sbin/sysctl -a 2\u0026gt;\u0026amp;1|grep -s 'net.ipv4.conf.lo.forwarding' $ /sbin/sysctl -a 2\u0026gt;\u0026amp;1|grep -s 'net.ipv4.ip_nonlocal_bind' For example: Verify that all are set to 1\n$ net.ipv4.conf.docker0.forwarding = 1 $ net.ipv4.conf.eth0.forwarding = 1 $ net.ipv4.conf.lo.forwarding = 1 $ net.ipv4.ip_nonlocal_bind = 1 Solution: Set all values to 1 immediately with the following commands:\n$ /sbin/sysctl net.ipv4.conf.docker0.forwarding=1 $ /sbin/sysctl net.ipv4.conf.eth0.forwarding=1 $ /sbin/sysctl net.ipv4.conf.lo.forwarding=1 $ /sbin/sysctl net.ipv4.ip_nonlocal_bind=1 To preserve the settings post-reboot: Update the above values to 1 in files in /usr/lib/sysctl.d/, /run/sysctl.d/, and /etc/sysctl.d/\n  Verify the iptables rule for forwarding.\nKubernetes uses iptables to handle many networking and port forwarding rules. A standard Docker installation may create a firewall rule that prevents forwarding.\nVerify if the iptables rule to accept forwarding traffic is set:\n$ /sbin/iptables -L -n | awk '/Chain FORWARD / {print $4}' | tr -d \u0026quot;)\u0026quot; If the output is \u0026ldquo;DROP\u0026rdquo;, then run the following command:\n$ /sbin/iptables -P FORWARD ACCEPT Verify if the iptables rule is set properly to \u0026ldquo;ACCEPT\u0026rdquo;:\n$ /sbin/iptables -L -n | awk '/Chain FORWARD / {print $4}' | tr -d \u0026quot;)\u0026quot;   Disable and stop firewalld:\n$ systemctl disable firewalld $ systemctl stop firewalld   1.2 Install and configure Docker  Note : If you have already installed Docker with version 18.03+ and configured Docker daemon root to sufficient disk space along with proxy settings, continue to Install and configure Kubernetes\n   Make sure that you have the right operating system version:\n$ uname -a $ more /etc/oracle-release For example:\nLinux xxxxxxx 4.1.12-124.27.1.el7uek.x86_64 #2 SMP Mon May 13 08:56:17 PDT 2019 x86_64 x86_64 x86_64 GNU/Linux Oracle Linux Server release 7.6   Install the latest docker-engine and start the Docker service:\n$ yum-config-manager --enable ol7_addons $ yum install docker-engine $ systemctl enable docker $ systemctl start docker   Add your userid to the Docker group. This will allow you to run the Docker commands without root access:\n$ /sbin/usermod -a -G docker \u0026lt;YOUR_USERID\u0026gt;   Check your Docker version. It must be at least 18.03.\n$ docker version For example:\nClient: Docker Engine - Community Version: 19.03.1-ol API version: 1.40 Go version: go1.12.5 Git commit: ead9442 Built: Wed Sep 11 06:40:28 2019 OS/Arch: linux/amd64 Experimental: false Server: Docker Engine - Community Engine: Version: 19.03.1-ol API version: 1.40 (minimum version 1.12) Go version: go1.12.5 Git commit: ead9442 Built: Wed Sep 11 06:38:43 2019 OS/Arch: linux/amd64 Experimental: false Default Registry: docker.io containerd: Version: v1.2.0-rc.0-108-gc444666 GitCommit: c4446665cb9c30056f4998ed953e6d4ff22c7c39 runc: Version: 1.0.0-rc5+dev GitCommit: 4bb1fe4ace1a32d3676bb98f5d3b6a4e32bf6c58 docker-init: Version: 0.18.0 GitCommit: fec3683   Update the Docker engine configuration:\n$ mkdir -p /etc/docker $ cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/docker/daemon.json { \u0026quot;group\u0026quot;: \u0026quot;docker\u0026quot;, \u0026quot;data-root\u0026quot;: \u0026quot;/u01/docker\u0026quot; } EOF   Configure proxy settings if you are behind an HTTP proxy. On some hosts /etc/systemd/system/docker.service.d may not be available. Create this directory if it is not available.\n ### Create the drop-in file /etc/systemd/system/docker.service.d/http-proxy.conf that contains proxy details: $ cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/systemd/system/docker.service.d/http-proxy.conf [Service] Environment=\u0026quot;HTTP_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT\u0026quot; Environment=\u0026quot;HTTPS_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT\u0026quot; Environment=\u0026quot;NO_PROXY=localhost,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/docker.sock\u0026quot; EOF   Restart the Docker daemon to load the latest changes:\n$ systemctl daemon-reload $ systemctl restart docker   Verify that the proxy is configured with Docker:\n$ docker info|grep -i proxy For example:\nHTTP Proxy: http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT HTTPS Proxy: http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT No Proxy: localhost,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/docker.sock   Verify Docker installation:\n$ docker run hello-world For example:\nHello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \u0026quot;hello-world\u0026quot; image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/   1.3 Install and configure Kubernetes   Add the external Kubernetes repository:\n$ cat \u0026lt;\u0026lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\\$basearch enabled=1 gpgcheck=1 repo_gpgcheck=1 gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg exclude=kubelet kubeadm kubectl EOF   Set SELinux in permissive mode (effectively disabling it):\n$ export PATH=/sbin:$PATH $ setenforce 0 $ sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config   Export proxy and install kubeadm, kubelet, and kubectl:\n### Get the nslookup IP address of the master node to use with apiserver-advertise-address during setting up Kubernetes master ### as the host may have different internal ip (hostname -i) and nslookup $HOSTNAME $ ip_addr=`nslookup $(hostname -f) | grep -m2 Address | tail -n1| awk -F: '{print $2}'| tr -d \u0026quot; \u0026quot;` $ echo $ip_addr ### Set the proxies $ export NO_PROXY=localhost,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/docker.sock,$ip_addr $ export no_proxy=localhost,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/docker.sock,$ip_addr $ export http_proxy=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT $ export https_proxy=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT $ export HTTPS_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT $ export HTTP_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT ### install kubernetes 1.23.6-0 $ VERSION=1.23.6-0 $ yum install -y kubelet-$VERSION kubeadm-$VERSION kubectl-$VERSION --disableexcludes=kubernetes ### enable kubelet service so that it auto-restart on reboot $ systemctl enable --now kubelet   Ensure net.bridge.bridge-nf-call-iptables is set to 1 in your sysctl to avoid traffic routing issues:\n$ cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 EOF $ sysctl --system   Disable swap check:\n$ sed -i 's/KUBELET_EXTRA_ARGS=/KUBELET_EXTRA_ARGS=\u0026quot;--fail-swap-on=false\u0026quot;/' /etc/sysconfig/kubelet $ cat /etc/sysconfig/kubelet ### Reload and restart kubelet $ systemctl daemon-reload $ systemctl restart kubelet   From Kubernetes version v1.22 onward, kubeadm will default cgroup-driver to systemd. If your Docker is using cgroup driver as cgroupfs, set --cgroup-driver=cgroupfs for kubelet.\n$ sed -i 's/^KUBELET_EXTRA_ARGS=.*/KUBELET_EXTRA_ARGS=\u0026quot;--fail-swap-on=false --cgroup-driver=cgroupfs\u0026quot;/' /etc/sysconfig/kubelet $ cat /etc/sysconfig/kubelet ### Reload and restart kubelet $ systemctl daemon-reload $ systemctl restart kubelet   1.4 Set up Helm   Install Helm v3.x.\na. Download Helm from https://github.com/helm/helm/releases. Example to download Helm v3.5.4:\n$ wget https://get.helm.sh/helm-v3.5.4-linux-amd64.tar.gz b. Unpack tar.gz:\n$ tar -zxvf helm-v3.5.4-linux-amd64.tar.gz c. Find the Helm binary in the unpacked directory, and move it to its desired destination:\n$ mv linux-amd64/helm /usr/bin/helm   Run helm version to verify its installation:\n$ helm version version.BuildInfo{Version:\u0026quot;v3.5.4\u0026quot;, GitCommit:\u0026quot;1b5edb69df3d3a08df77c9902dc17af864ff05d1\u0026quot;, GitTreeState:\u0026quot;clean\u0026quot;, GoVersion:\u0026quot;go1.15.11\u0026quot;}   2. Set up a single instance Kubernetes cluster  Notes:\n These steps must be run with the root user, unless specified otherwise! If you choose to use a different cidr block (that is, other than 10.244.0.0/16 for the --pod-network-cidr= in the kubeadm init command), then also update NO_PROXY and no_proxy with the appropriate value.  Also make sure to update kube-flannel.yaml with the new value before deploying.   Replace the following with appropriate values:  ADD-YOUR-INTERNAL-NO-PROXY-LIST REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT     2.1 Set up the master node   Create a shell script that sets up the necessary environment variables. You can append this to the user’s .bashrc so that it will run at login. You must also configure your proxy settings here if you are behind an HTTP proxy:\n## grab my IP address to pass into kubeadm init, and to add to no_proxy vars ip_addr=`nslookup $(hostname -f) | grep -m2 Address | tail -n1| awk -F: '{print $2}'| tr -d \u0026quot; \u0026quot;` export pod_network_cidr=\u0026quot;10.244.0.0/16\u0026quot; export service_cidr=\u0026quot;10.96.0.0/12\u0026quot; export PATH=$PATH:/sbin:/usr/sbin ### Set the proxies export NO_PROXY=localhost,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/docker.sock,$ip_addr,$pod_network_cidr,$service_cidr export no_proxy=localhost,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/docker.sock,$ip_addr,$pod_network_cidr,$service_cidr export http_proxy=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT export https_proxy=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT export HTTPS_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT export HTTP_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT   Source the script to set up your environment variables:\n$ . ~/.bashrc   To implement command completion, add the following to the script:\n$ [ -f /usr/share/bash-completion/bash_completion ] \u0026amp;\u0026amp; . /usr/share/bash-completion/bash_completion $ source \u0026lt;(kubectl completion bash)   Run kubeadm init to create the master node:\n$ kubeadm init \\ --pod-network-cidr=$pod_network_cidr \\ --apiserver-advertise-address=$ip_addr \\ --ignore-preflight-errors=Swap \u0026gt; /tmp/kubeadm-init.out 2\u0026gt;\u0026amp;1   Log in to the terminal with YOUR_USERID:YOUR_GROUP. Then set up the ~/.bashrc similar to steps 1 to 3 with YOUR_USERID:YOUR_GROUP.\n Note that from now on we will be using YOUR_USERID:YOUR_GROUP to execute any kubectl commands and not root.\n   Set up YOUR_USERID:YOUR_GROUP to access the Kubernetes cluster:\n$ mkdir -p $HOME/.kube $ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config $ sudo chown $(id -u):$(id -g) $HOME/.kube/config   Verify that YOUR_USERID:YOUR_GROUP is set up to access the Kubernetes cluster using the kubectl command:\n$ kubectl get nodes  Note: At this step, the node is not in ready state as we have not yet installed the pod network add-on. After the next step, the node will show status as Ready.\n   Install a pod network add-on (flannel) so that your pods can communicate with each other.\n Note: If you are using a different cidr block than 10.244.0.0/16, then download and update kube-flannel.yml with the correct cidr address before deploying into the cluster:\n $ wget https://raw.githubusercontent.com/flannel-io/flannel/v0.17.0/Documentation/kube-flannel.yml $ ### Update the CIDR address if you are using a CIDR block other than the default 10.244.0.0/16 $ kubectl apply -f kube-flannel.yml   Verify that the master node is in Ready status:\n$ kubectl get nodes For example:\nNAME STATUS ROLES AGE VERSION mymasternode Ready master 8m26s v1.23.6 or:\n$ kubectl get pods -n kube-system For example:\nNAME READY STATUS RESTARTS AGE pod/coredns-86c58d9df4-58p9f 1/1 Running 0 3m59s pod/coredns-86c58d9df4-mzrr5 1/1 Running 0 3m59s pod/etcd-mymasternode 1/1 Running 0 3m4s pod/kube-apiserver-node 1/1 Running 0 3m21s pod/kube-controller-manager-mymasternode 1/1 Running 0 3m25s pod/kube-flannel-ds-amd64-6npx4 1/1 Running 0 49s pod/kube-proxy-4vsgm 1/1 Running 0 3m59s pod/kube-scheduler-mymasternode 1/1 Running 0 2m58s   To schedule pods on the master node, taint the node:\n$ kubectl taint nodes --all node-role.kubernetes.io/master-   Congratulations! Your Kubernetes cluster environment is ready to deploy your Oracle WebCenter Content domain.\nFor additional references on Kubernetes cluster setup, check the cheat sheet.\n3. Get scripts and images 3.1 Set up the code repository to deploy Oracle WebCenter Content domains Follow these steps to set up the source code repository required to deploy Oracle WebCenter Content domains.\n3.2 Get dependent images and add them to your local registry Follow these steps to pull dependent Docker images required to deploy Oracle WebCenter Content domains.\n3.3 Get Oracle WebCenter Content Docker image and add it to your local registry Follow these steps to obtain Oracle WebCenter Content image.\n4. Install WebLogic Kubernetes Operator 4.1 Prepare for WebLogic Kubernetes Operator.   Create a namespace opns for the WebLogic Kubernetes Operator:\n$ kubectl create namespace opns   Create a service account op-sa for WebLogic Kubernetes Operator in the operator’s namespace:\n$ kubectl create serviceaccount -n opns op-sa   4.2 Install the WebLogic Kubernetes Operator Use Helm to install and start WebLogic Kubernetes Operator from the directory you just cloned:\n$ cd ${WORKDIR} $ helm install weblogic-kubernetes-operator charts/weblogic-operator \\ --namespace opns \\ --set image=oracle/weblogic-kubernetes-operator:3.4.2 \\ --set serviceAccount=op-sa \\ --set \u0026quot;domainNamespaces={}\u0026quot; \\ --wait 4.3 Verify the WebLogic Kubernetes Operator   Verify that the WebLogic Kubernetes Operator\u0026rsquo;s pod is running by listing the pods in the respective namespace. You should see one for the WebLogic Kubernetes Operator:\n$ kubectl get pods -n opns   Verify that the WebLogic Kubernetes Operator is up and running by viewing the operator-pod\u0026rsquo;s logs:\n$ kubectl logs -n opns -c weblogic-operator deployments/weblogic-operator   The WebLogic Kubernetes Operator v3.4.2 has been installed. Continue with the load balancer and Oracle WebCenter Content domain setup.\n5. Install the Traefik (ingress-based) load balancer WebLogic Kubernetes Operator supports these load balancers: Traefik, NGINX and Apache. Samples are provided in the documentation.\nThis Quick Start demonstrates how to install the Traefik ingress controller to provide load balancing for an Oracle WebCenter Content domain.\n  Create a namespace for Traefik:\n$ kubectl create namespace traefik   Set up Helm for 3rd party services:\n$ helm repo add traefik https://containous.github.io/traefik-helm-chart   Install the Traefik operator in the traefik namespace with the provided sample values:\n$ cd ${WORKDIR} $ helm install traefik traefik/traefik \\ --namespace traefik \\ --values charts/traefik/values.yaml \\ --set \u0026quot;kubernetes.namespaces={traefik}\u0026quot; \\ --set \u0026quot;service.type=NodePort\u0026quot; \\ --wait   6. Create and configure an Oracle WebCenter Content domain 6.1 Prepare for an Oracle WebCenter Content domain   Create a namespace that can host Oracle WebCenter Content domain:\n$ kubectl create namespace wccns   Use Helm to configure the WebLogic Kubernetes Operator to manage Oracle WebCenter Content domains in this namespace:\n$ cd ${WORKDIR} $ helm upgrade weblogic-kubernetes-operator charts/weblogic-operator \\ --reuse-values \\ --namespace opns \\ --set \u0026quot;domainNamespaces={wccns}\u0026quot; \\ --wait   Create Kubernetes secrets.\na. Create a Kubernetes secret for the domain in the same Kubernetes namespace as the domain. In this example, the username is weblogic, the password in welcome1, and the namespace is wccns:\n $ cd ${WORKDIR}/create-weblogic-domain-credentials $ ./create-weblogic-credentials.sh \\ -u weblogic \\ -p welcome1 \\ -n wccns \\ -d wccinfra \\ -s wccinfra-domain-credentials b. Create a Kubernetes secret for the RCU in the same Kubernetes namespace as the domain:\n Schema user : WCC1 Schema password : Oradoc_db1 DB sys user password : Oradoc_db1 Domain name : wccinfra Domain Namespace : wccns Secret name : wccinfra-rcu-credentials  $ cd ${WORKDIR}/create-rcu-credentials $ ./create-rcu-credentials.sh \\ -u WCC1 \\ -p Oradoc_db1 \\ -a sys \\ -q Oradoc_db1 \\ -d wccinfra \\ -n wccns \\ -s wccinfra-rcu-credentials   Create the Kubernetes persistence volume and persistence volume claim.\na. Create the Oracle WebCenter Content domain home directory. Determine if a user already exists on your host system with uid:gid of 1000:0:\n$ sudo getent passwd 1000 If this command returns a username (which is the first field), you can skip the following useradd command. If not, create the oracle user with useradd:\n$ sudo useradd -u 1000 -g 0 oracle Create the directory that will be used for the Oracle WebCenter Content domain home:\n$ sudo mkdir /scratch/k8s_dir $ sudo chown -R 1000:0 /scratch/k8s_dir b. Update create-pv-pvc-inputs.yaml with the following values:\n baseName: domain domainUID: wccinfra namespace: wccns weblogicDomainStoragePath: /scratch/k8s_dir  Review and update if any changes required.\n$ cd ${WORKDIR}/create-weblogic-domain-pv-pvc $ vim create-pv-pvc-inputs.yaml c. Run the create-pv-pvc.sh script to create the PV and PVC configuration files:\n$ ./create-pv-pvc.sh -i create-pv-pvc-inputs.yaml -o output d. Create the PV and PVC using the configuration files created in the previous step:\n$ kubectl create -f output/pv-pvcs/wccinfra-domain-pv.yaml $ kubectl create -f output/pv-pvcs/wccinfra-domain-pvc.yaml   Configure the database and create schemas for the Oracle WebCenter Content domain.\nFollow configure-database-access step and run-RCU step to set up the database connection and configure product schemas required to deploy Oracle WebCenter Content domain.\n  Now the environment is ready to start the Oracle WebCenter Content domain creation.\n6.2 Create an Oracle WebCenter Content domain   The sample scripts for Oracle WebCenter Content domain deployment are available at ${WORKDIR}/create-wcc-domain/domain-home-on-pv. You must edit create-domain-inputs.yaml (or a copy of it) to provide the details for your domain.\n  Run the create-domain.sh script to create a domain:\n$ cd ${WORKDIR}/create-wcc-domain/domain-home-on-pv/ $ ./create-domain.sh -i create-domain-inputs.yaml -o output   Create a Kubernetes domain object:\nOnce the create-domain.sh is successful, it generates the output/weblogic-domains/wccinfra/domain.yaml that you can use to create the Kubernetes resource domain, which starts the domain and servers:\n$ cd ${WORKDIR}/create-wcc-domain/domain-home-on-pv $ kubectl create -f output/weblogic-domains/wccinfra/domain.yaml   Verify that the Kubernetes domain object named wccinfra is created:\n$ kubectl get domain -n wccns NAME AGE wccinfra 3m18s   Once you create the domain, introspect pod is created. This inspects the domain home and then starts the wccinfra-adminserver pod. Once the wccinfra-adminserver pod starts successfully, then the Managed Server pods are started in parallel. Watch the wccns namespace for the status of domain creation:\n$ kubectl get pods -n wccns   Verify that the Oracle WebCenter Content domain server pods and services are created and in Ready state:\n$ kubectl get all -n wccns   6.3 Configure Traefik to access in Oracle WebCenter Content domain services   Configure Traefik to manage ingresses created in the Oracle WebCenter Content domain namespace (wccns):\n$ helm upgrade traefik traefik/traefik \\ --reuse-values \\ --namespace traefik \\ --set \u0026quot;kubernetes.namespaces={traefik,wccns}\u0026quot; \\ --wait   Create an ingress for the domain in the domain namespace by using the sample Helm chart:\n$ cd ${WORKDIR} $ helm install wcc-traefik-ingress charts/ingress-per-domain \\ --namespace wccns \\ --values charts/ingress-per-domain/values.yaml \\ --set \u0026quot;traefik.hostname=$(hostname -f)\u0026quot; \\ --set tls=NONSSL   Verify the created ingress per domain details:\n$ kubectl describe ingress wccinfra-traefik -n wccns   6.4 Verify that you can access the Oracle WebCenter Content domain URL   Get the LOADBALANCER_HOSTNAME for your environment:\nexport LOADBALANCER_HOSTNAME=$(hostname -f)   The following URLs are available for Oracle WebCenter Content domain:\nCredentials: username: weblogic password: welcome1\nhttp://${LOADBALANCER_HOSTNAME}:30305/console http://${LOADBALANCER_HOSTNAME}:30305/em http://${LOADBALANCER_HOSTNAME}:30305/cs http://${LOADBALANCER_HOSTNAME}:30305/ibr http://${LOADBALANCER_HOSTNAME}:30305/imaging http://${LOADBALANCER_HOSTNAME}:30305/dc-console http://${LOADBALANCER_HOSTNAME}:30305/wcc   "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/adminguide/configure-load-balancer/nginx/",
	"title": "NGINX",
	"tags": [],
	"description": "Configure the ingress-based NGINX load balancer for Oracle WebCenter Content domain.",
	"content": "This section provides information about how to install and configure the ingress-based NGINX load balancer to load balance Oracle WebCenter Content domain clusters. You can configure NGINX for non-SSL, SSL termination, and end-to-end SSL access of the application URL.\nFollow these steps to set up NGINX as a load balancer for an Oracle WebCenter Content domain in a Kubernetes cluster:\nSee the official installation document for prerequisites.\n  Non-SSL and SSL termination\n Install the NGINX load balancer Configure NGINX to manage ingresses Verify non-SSL and SSL termination access    End-to-end SSL configuration\n Install the NGINX load balancer for End-to-end SSL Deploy tls to access individual Managed Servers Deploy tls to access Administration Server Uninstall ingress-nginx tls    Uninstall the NGINX\n  To get repository information, enter the following Helm commands:\n$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx $ helm repo update Non-SSL and SSL termination Install the NGINX load balancer   Deploy the ingress-nginx controller by using Helm on the domain namespace:\n$ helm install nginx-ingress -n wccns \\  --set controller.service.type=NodePort \\  --set controller.admissionWebhooks.enabled=false \\  ingress-nginx/ingress-nginx    Click here to see the sample output.   NAME: nginx-ingress LAST DEPLOYED: Fri Jul 29 00:14:19 2022 NAMESPACE: wccns STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The ingress-nginx controller has been installed. Get the application URL by running these commands: export HTTP_NODE_PORT=$(kubectl --namespace wccns get services -o jsonpath=\u0026#34;{.spec.ports[0].nodePort}\u0026#34; nginx-ingress-ingress-nginx-controller) export HTTPS_NODE_PORT=$(kubectl --namespace wccns get services -o jsonpath=\u0026#34;{.spec.ports[1].nodePort}\u0026#34; nginx-ingress-ingress-nginx-controller) export NODE_IP=$(kubectl --namespace wccns get nodes -o jsonpath=\u0026#34;{.items[0].status.addresses[1].address}\u0026#34;) echo \u0026#34;Visit http://$NODE_IP:$HTTP_NODE_PORTto access your application via HTTP.\u0026#34; echo \u0026#34;Visit https://$NODE_IP:$HTTPS_NODE_PORTto access your application via HTTPS.\u0026#34; An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: example namespace: foo spec: ingressClassName: nginx rules: - host: www.example.com http: paths: - pathType: Prefix backend: service: name: exampleService port: number: 80 path: / # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls      Check the status of the deployed ingress controller:\n$ kubectl --namespace wccns get services | grep ingress-nginx-controller Sample output:\nnginx-ingress-ingress-nginx-controller NodePort 10.97.189.122 \u0026lt;none\u0026gt; 80:30993/TCP,443:30232/TCP 7d2h   Configure NGINX to manage ingresses   Create an ingress for the domain in the domain namespace by using the sample Helm chart. Here path-based routing is used for ingress. Sample values for default configuration are shown in the file ${WORKDIR}/charts/ingress-per-domain/values.yaml. By default, type is TRAEFIK, tls is Non-SSL, and domainType is wccinfra. These values can be overridden by passing values through the command line or can be edited in the sample file values.yaml. If needed, you can update the ingress YAML file to define more path rules (in section spec.rules.host.http.paths) based on the domain application URLs that need to be accessed. Update the template YAML file for the NGINX load balancer located at ${WORKDIR}/charts/ingress-per-domain/templates/nginx-ingress.yaml\n$ cd ${WORKDIR} $ helm install wccinfra-nginx-ingress charts/ingress-per-domain \\ --namespace wccns \\ --values charts/ingress-per-domain/values.yaml \\ --set \u0026#34;nginx.hostname=$(hostname -f)\u0026#34; \\ --set type=NGINX \\ --set tls=NONSSL Sample output:\nNAME: wccinfra-nginx-ingress LAST DEPLOYED: Sun Feb 7 23:52:38 2021 NAMESPACE: wccns STATUS: deployed REVISION: 1 TEST SUITE: None   For secured access (SSL) to the Oracle WebCenter Content application, create a certificate and generate a Kubernetes secret:\n$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \u0026#34;/CN=*\u0026#34; $ kubectl -n wccns create secret tls domain1-tls-cert --key /tmp/tls1.key --cert /tmp/tls1.crt   Install ingress-per-domain using Helm for SSL configuration:\n$ cd ${WORKDIR} $ helm install wccinfra-nginx-ingress charts/ingress-per-domain \\  --namespace wccns \\  --values charts/ingress-per-domain/values.yaml \\  --set \u0026#34;nginx.hostname=$(hostname -f)\u0026#34; \\  --set \u0026#34;nginx.hostnameorip=$(hostname -f)\u0026#34; \\  --set type=NGINX --set tls=SSL Sample output:\nNAME: wccinfra-nginx-ingress LAST DEPLOYED: Mon Feb 8 00:01:13 2021 NAMESPACE: wccns STATUS: deployed REVISION: 1 TEST SUITE: None   For non-SSL access or SSL to the Oracle WebCenter Content application, get the details of the services by the ingress:\n$ kubectl describe ingress wccinfra-nginx -n wccns    Click here to see the sample output of the services supported by the above deployed ingress.   Name: wccinfra-nginx Namespace: wccns Address: 10.97.189.122 Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026#34;default-http-backend\u0026#34; not found\u0026gt;) TLS: domain1-tls-cert terminates domain1.org Rules: Host Path Backends ---- ---- -------- domain1.org /console wccinfra-adminserver:7001 (10.244.0.58:7001) /em wccinfra-adminserver:7001 (10.244.0.58:7001) /servicebus wccinfra-adminserver:7001 (10.244.0.58:7001) /cs wccinfra-cluster-ucm-cluster:16200 (10.244.0.60:16200,10.244.0.61:16200) /adfAuthentication wccinfra-cluster-ucm-cluster:16200 (10.244.0.60:16200,10.244.0.61:16200) /ibr wccinfra-cluster-ibr-cluster:16250 (10.244.0.59:16250) /ibr/adfAuthentication wccinfra-cluster-ibr-cluster:16250 (10.244.0.59:16250) /weblogic/ready wccinfra-cluster-ucm-cluster:16200 (10.244.0.60:16200,10.244.0.61:16200) /imaging wccinfra-cluster-ipm-cluster:16000 (10.244.0.206:16000,10.244.0.209:16000,10.244.0.213:16000) /dc-console wccinfra-cluster-capture-cluster:16400 (10.244.0.204:16400,10.244.0.208:16400,10.244.0.212:16400) /dc-client wccinfra-cluster-capture-cluster:16400 (10.244.0.204:16400,10.244.0.208:16400,10.244.0.212:16400) /wcc wccinfra-cluster-wccadf-cluster:16225 (10.244.0.205:16225,10.244.0.210:16225,10.244.0.214:16225) Annotations: kubernetes.io/ingress.class: nginx meta.helm.sh/release-name: wccinfra-nginx-ingress meta.helm.sh/release-namespace: wccns nginx.ingress.kubernetes.io/configuration-snippet: more_set_input_headers \u0026#34;X-Forwarded-Proto: https\u0026#34;; more_set_input_headers \u0026#34;WL-Proxy-SSL: true\u0026#34;; nginx.ingress.kubernetes.io/ingress.allow-http: false Events: \u0026lt;none\u0026gt;      Verify non-SSL and SSL termination access Non-SSL configuration Verify that the Oracle WebCenter Content domain application URLs are accessible through the LOADBALANCER-Non-SSLPORT:\nhttp://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/weblogic/ready http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/console http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/em http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/cs http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/ibr http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/imaging http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/dc-console http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/wcc SSL configuration Verify that the Oracle WebCenter Content domain application URLs are accessible through the LOADBALANCER-SSLPORT:\nhttps://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/weblogic/ready https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/console https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/em https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/cs https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/ibr https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/imaging https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/dc-console https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-SSLPORT}/wcc Uninstall the ingress Uninstall and delete the ingress-nginx deployment:\n$ helm delete wccinfra-nginx -n wccns End-to-end SSL configuration Install the NGINX load balancer for End-to-end SSL   For secured access (SSL) to the Oracle WebCenter Content application, create a certificate and generate secrets:\n$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \u0026#34;/CN=*\u0026#34; $ kubectl -n wccns create secret tls domain1-tls-cert --key /tmp/tls1.key --cert /tmp/tls1.crt   Deploy the ingress-nginx controller by using Helm on the domain namespace:\n$ helm install nginx-ingress -n wccns \\\t --set controller.extraArgs.default-ssl-certificate=wccns/domain1-tls-cert \\  --set controller.service.type=NodePort \\  --set controller.admissionWebhooks.enabled=false \\  --set controller.extraArgs.enable-ssl-passthrough=true \\  ingress-nginx/ingress-nginx    Click here to see the sample output.   NAME: nginx-ingress LAST DEPLOYED: Thu Sep 8 23:59:54 2022 NAMESPACE: wccns STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The ingress-nginx controller has been installed. Get the application URL by running these commands: export HTTP_NODE_PORT=$(kubectl --namespace wccns get services -o jsonpath=\u0026#34;{.spec.ports[0].nodePort}\u0026#34; nginx-ingress-ingress-nginx-controller) export HTTPS_NODE_PORT=$(kubectl --namespace wccns get services -o jsonpath=\u0026#34;{.spec.ports[1].nodePort}\u0026#34; nginx-ingress-ingress-nginx-controller) export NODE_IP=$(kubectl --namespace wccns get nodes -o jsonpath=\u0026#34;{.items[0].status.addresses[1].address}\u0026#34;) echo \u0026#34;Visit http://$NODE_IP:$HTTP_NODE_PORTto access your application via HTTP.\u0026#34; echo \u0026#34;Visit https://$NODE_IP:$HTTPS_NODE_PORTto access your application via HTTPS.\u0026#34; An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: example namespace: foo spec: ingressClassName: nginx rules: - host: www.example.com http: paths: - pathType: Prefix backend: service: name: exampleService port: number: 80 path: / # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls      Check the status of the deployed ingress controller:\n$ kubectl --namespace wccns get services | grep ingress-nginx-controller Sample output:\nnginx-ingress-ingress-nginx-controller NodePort 10.97.189.122 \u0026lt;none\u0026gt; 80:30993/TCP,443:30232/TCP 168m   Deploy tls to access individual Managed Servers   Deploy tls to securely access the services. Only one application can be configured with ssl-passthrough. A sample tls file for NGINX is shown below for the service wccinfra-cluster-ucm-cluster and port 16201. All the applications running on port 16201 can be securely accessed through this ingress. For each backend service, create different ingresses as NGINX does not support multiple path/rules with annotation ssl-passthrough. That is, for wccinfra-cluster-ucm-cluster, wccinfra-cluster-ibr-cluster, wccinfra-cluster-ipm-cluster, wccinfra-cluster-capture-cluster, wccinfra-cluster-wccadf-cluster and wccinfra-adminserver, different ingresses must be created.\n Note: There is a limitation with load-balancer in end-to-end SSL configuration - accessing multiple types of servers (different Managed Servers and/or Administration Server) at the same time, is currently not supported. We can access only one Managed Server at a time.\n $ cd ${WORKDIR}/charts/ingress-per-domain/tls Sample nginx-ucm-tls.yaml:\n    Click here to see the content of the file nginx-ucm-tls.yaml   apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: wcc-ucm-ingress namespace: wccns annotations: kubernetes.io/ingress.class: nginx nginx.ingress.kubernetes.io/ssl-passthrough: \u0026#34;true\u0026#34; spec: tls: - hosts: - \u0026#39;your_host_name\u0026#39; secretName: domain1-tls-cert rules: - host: \u0026#39;your_host_name\u0026#39; http: paths: - path: pathType: ImplementationSpecific backend: service: name: wccinfra-cluster-ucm-cluster port: number: 16201     Note: host is the server on which this ingress is deployed.\n   Deploy the secured ingress:\n$ cd ${WORKDIR}/charts/ingress-per-domain/tls $ kubectl create -f nginx-ucm-tls.yaml   Check the services supported by the ingress:\n$ kubectl describe ingress wcc-ucm-ingress -n wccns    Click here check the services supported by the ingress.   Name: wcc-ucm-ingress Namespace: wccns Address: 10.102.97.237 Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026#34;default-http-backend\u0026#34; not found\u0026gt;) TLS: domain1-tls-cert terminates domain1.org Rules: Host Path Backends ---- ---- -------- domain1.org wccinfra-cluster-ucm-cluster:16201 (10.244.238.136:16201,10.244.253.132:16201) Annotations: kubernetes.io/ingress.class: nginx nginx.ingress.kubernetes.io/ssl-passthrough: true Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 62s (x2 over 106s) nginx-ingress-controller Scheduled for sync      Verify end-to-end SSL access Verify that the Oracle WebCenter Content domain application URLs are accessible through the LOADBALANCER-SSLPORT:\nhttps://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/cs Deploy tls to access Administration Server   As ssl-passthrough in NGINX works on the clusterIP of the backing service instead of individual endpoints, you must expose adminserver service created by the WebLogic Kubernetes Operator with clusterIP.\nFor example:\na. Get the name of Administration Server service:\n$ kubectl get svc -n wccns | grep wccinfra-adminserver Sample output:\nwccinfra-adminserver ClusterIP None \u0026lt;none\u0026gt; 7001/TCP,7002/TCP 7 b. Expose the Administration Server service wccinfra-adminserver and use the new service name wccinfra-adminserver-nginx-ssl:\n$ kubectl expose svc wccinfra-adminserver -n wccns --name=wccinfra-adminserver-nginx-ssl --port=7002 c. Deploy the secured ingress:\nSample nginx-admin-tls.yaml:\n  Click here to see the content of the file nginx-admin-tls.yaml   apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: wcc-admin-ingress namespace: wccns annotations: kubernetes.io/ingress.class: nginx nginx.ingress.kubernetes.io/ssl-passthrough: \u0026#34;true\u0026#34; spec: tls: - hosts: - \u0026#39;your_host_name\u0026#39; secretName: domain1-tls-cert rules: - host: \u0026#39;your_host_name\u0026#39; http: paths: - path: pathType: ImplementationSpecific backend: service: name: wccinfra-adminserver-nginx-ssl port: number: 7002     Note: host is the server on which this ingress is deployed.\n $ cd ${WORKDIR}/charts/ingress-per-domain/tls $ kubectl create -f nginx-admin-tls.yaml   Verify end-to-end SSL access Verify that the Oracle WebCenter Content Administration Server URL is accessible through the LOADBALANCER-SSLPORT:\nhttps://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/console Uninstall ingress-nginx tls $ cd ${WORKDIR}/charts/ingress-per-domain/tls $ kubectl delete -f nginx-ucm-tls.yaml Uninstall the NGINX //Uninstall and delete the `ingress-nginx` deployment $ helm delete wccinfra-nginx-ingress -n wccns //Uninstall NGINX $ helm delete nginx-ingress -n wccns "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/oracle-cloud/configure-load-balancer/nginx/",
	"title": "NGINX",
	"tags": [],
	"description": "Configure the ingress-based NGINX load balancer for Oracle WebCenter Content domain.",
	"content": "This section provides information about how to install and configure the ingress-based NGINX load balancer to load balance Oracle WebCenter Content domain clusters. You can configure NGINX for non-SSL, SSL termination, and end-to-end SSL access of the application URL.\nFollow these steps to set up NGINX as a load balancer for an Oracle WebCenter Content domain in a Kubernetes cluster:\nSee the official installation document for prerequisites.\nContents   Non-SSL and SSL termination\n Install the NGINX load balancer Configure NGINX to manage ingresses Create a certificate and generate a Kubernetes secret Install Ingress for SSL termination configuration    End-to-End SSL configuration\n Install the NGINX load balancer for end-to-end SSL Deploy tls to access individual Managed Servers Deploy tls to access Administration Server Uninstall ingress-nginx tls    Create Oracle WebCenter Content domain\n  Verify domain application URL access\n Verify Non-SSL access Verify SSL termination and end-to-end SSL access    Uninstall the NGINX\n  To get repository information, enter the following Helm commands:\n$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx $ helm repo update Non-SSL and SSL termination Install the NGINX load balancer   Deploy the ingress-nginx controller by using Helm on the domain namespace:\n$ helm install nginx-ingress -n wccns \\  --set controller.service.type=LoadBalancer \\  --set controller.admissionWebhooks.enabled=false \\  ingress-nginx/ingress-nginx    Click here to see the sample output.   NAME: nginx-ingress LAST DEPLOYED: Fri Jul 29 00:14:19 2022 NAMESPACE: wccns STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The ingress-nginx controller has been installed. Get the application URL by running these commands: export HTTP_NODE_PORT=$(kubectl --namespace wccns get services -o jsonpath=\u0026#34;{.spec.ports[0].nodePort}\u0026#34; nginx-ingress-ingress-nginx-controller) export HTTPS_NODE_PORT=$(kubectl --namespace wccns get services -o jsonpath=\u0026#34;{.spec.ports[1].nodePort}\u0026#34; nginx-ingress-ingress-nginx-controller) export NODE_IP=$(kubectl --namespace wccns get nodes -o jsonpath=\u0026#34;{.items[0].status.addresses[1].address}\u0026#34;) echo \u0026#34;Visit http://$NODE_IP:$HTTP_NODE_PORTto access your application via HTTP.\u0026#34; echo \u0026#34;Visit https://$NODE_IP:$HTTPS_NODE_PORTto access your application via HTTPS.\u0026#34; An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: example namespace: foo spec: ingressClassName: nginx rules: - host: www.example.com http: paths: - pathType: Prefix backend: service: name: exampleService port: number: 80 path: / # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls      Check the status of the deployed ingress controller:\nPlease note the EXTERNAL-IP of the nginx-controller service. This is the public IP address of the load balancer that you will use to access the WebLogic Server Administration Console and WebCenter Content URLs.\n Note: It may take a few minutes for the LoadBalancer IP(EXTERNAL-IP) to be available.\n $ kubectl --namespace wccns get services | grep ingress-nginx-controller Sample output:\nNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) nginx-ingress-ingress-nginx-controller LoadBalancer 10.96.180.215 144.24.xx.xx 80:31339/TCP,443:32278/TCP To print only the NGINX EXTERNAL-IP, execute this command:\nNGINX_PUBLIC_IP=`kubectl describe svc nginx-ingress-ingress-nginx-controller --namespace wccns | grep Ingress | awk \u0026#39;{print $3}\u0026#39;` $ echo $NGINX_PUBLIC_IP 144.24.xx.xx Verify the helm charts:\n$ helm list -A NAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION nginx-ingress wccns 1 2022-05-13 deployed ingress-nginx-4.2.5 1.3.1   Configure NGINX to manage ingresses   Create an ingress for the domain in the domain namespace by using the sample Helm chart. Here path-based routing is used for ingress. Sample values for default configuration are shown in the file ${WORKDIR}/charts/ingress-per-domain/values.yaml. By default, type is TRAEFIK, tls is Non-SSL, and domainType is wccinfra. These values can be overridden by passing values through the command line or can be edited in the sample file values.yaml. If needed, you can update the ingress YAML file to define more path rules (in section spec.rules.host.http.paths) based on the domain application URLs that need to be accessed. Update the template YAML file for the NGINX load balancer located at ${WORKDIR}/charts/ingress-per-domain/templates/nginx-ingress.yaml\nInstall ingress-per-domain using Helm for non-SSL configuration:\n$ export LB_HOSTNAME=\u0026lt;NGINX load balancer DNS name\u0026gt; #OR leave it empty to point to NGINX load-balancer IP, by default $ export LB_HOSTNAME=\u0026#39;\u0026#39;  Note: Make sure that you specify DNS name to point to the NGINX load balancer hostname, or leave it empty to point to the NGINX load balancer IP.\n $ cd ${WORKDIR} $ helm install wccinfra-nginx-ingress charts/ingress-per-domain \\  --namespace wccns \\  --values charts/ingress-per-domain/values.yaml \\  --set \u0026#34;nginx.hostname=$LB_HOSTNAME\u0026#34; \\  --set type=NGINX \\  --set tls=NONSSL Sample output:\nNAME: wccinfra-nginx-ingress LAST DEPLOYED: Tue May 10 10:37:12 2022 NAMESPACE: wccns STATUS: deployed REVISION: 1 TEST SUITE: None   Create a certificate and generate a Kubernetes secret   For secured access (SSL) to the Oracle WebCenter Content application, create a certificate:\n$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \u0026#34;/CN=\u0026lt;NGINX load balancer DNS name\u0026gt;\u0026#34; #OR use the following command if you chose to leave LB_HOSTNAME empty in the previous step $ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \u0026#34;/CN=*\u0026#34;  Note: Make sure that you specify DNS name to point to the NGINX load balancer hostname.\n   Generate a Kubernetes secret:\n$ kubectl -n wccns create secret tls domain1-tls-cert --key /tmp/tls1.key --cert /tmp/tls1.crt   Install Ingress for SSL termination configuration   Install ingress-per-domain using Helm for SSL configuration:\n$ cd ${WORKDIR} $ helm install wccinfra-nginx-ingress charts/ingress-per-domain \\  --namespace wccns \\  --values charts/ingress-per-domain/values.yaml \\  --set \u0026#34;nginx.hostname=$LB_HOSTNAME\u0026#34; \\  --set \u0026#34;nginx.hostnameorip=$NGINX_PUBLIC_IP\u0026#34; \\  --set type=NGINX --set tls=SSL Sample output:\nNAME: wccinfra-nginx-ingress LAST DEPLOYED: Tue May 10 10:37:12 2022 NAMESPACE: wccns STATUS: deployed REVISION: 1 TEST SUITE: None   For non-SSL access or SSL to the Oracle WebCenter Content application, get the details of the services by the ingress:\n$ kubectl describe ingress wccinfra-nginx -n wccns    Click here to see the sample output of the services supported by the above deployed ingress.   Name: wccinfra-nginx Namespace: wccns Address: 144.24.xx.xx Default backend: default-http-backend:80 (\u0026lt;none\u0026gt;) Rules: Host Path Backends ---- ---- -------- * /console wccinfra-adminserver:7001 (10.244.2.117:7001) /em wccinfra-adminserver:7001 (10.244.2.117:7001) /wls-exporter wccinfra-adminserver:7001 (10.244.2.117:7001) /cs wccinfra-cluster-ucm-cluster:16200 (10.244.2.118:16200,10.244.2.120:16200) /adfAuthentication wccinfra-cluster-ucm-cluster:16200 (10.244.2.118:16200,10.244.2.120:16200) /_ocsh wccinfra-cluster-ucm-cluster:16200 (10.244.2.118:16200,10.244.2.120:16200) /_dav wccinfra-cluster-ucm-cluster:16200 (10.244.2.118:16200,10.244.2.120:16200) /idcws wccinfra-cluster-ucm-cluster:16200 (10.244.2.118:16200,10.244.2.120:16200) /idcnativews wccinfra-cluster-ucm-cluster:16200 (10.244.2.118:16200,10.244.2.120:16200) /wsm-pm wccinfra-cluster-ucm-cluster:16200 (10.244.2.118:16200,10.244.2.120:16200) /ibr wccinfra-cluster-ibr-cluster:16250 (10.244.2.119:16250) /ibr/adfAuthentication wccinfra-cluster-ibr-cluster:16250 (10.244.2.119:16250) /weblogic/ready wccinfra-cluster-ucm-cluster:16200 (10.244.2.118:16200,10.244.2.120:16200) Annotations: nginx.ingress.kubernetes.io/affinity-mode: persistent kubernetes.io/ingress.class: nginx nginx.ingress.kubernetes.io/affinity: cookie Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 8m3s (x2 over 8m5s) nginx-ingress-controller Scheduled for sync      End-to-End SSL configuration Install the NGINX load balancer for end-to-end SSL   For secured access (SSL) to the Oracle WebCenter Content application, create a certificate and generate secrets: click here\n  Deploy the ingress-nginx controller by using Helm on the domain namespace:\nhelm install nginx-ingress -n wccns \\ --set controller.extraArgs.default-ssl-certificate=wccns/domain1-tls-cert \\ --set controller.service.type=LoadBalancer \\ --set controller.admissionWebhooks.enabled=false \\ --set controller.extraArgs.enable-ssl-passthrough=true \\ ingress-nginx/ingress-nginx\t`   Click here to see the sample output.   NAME: nginx-ingress LAST DEPLOYED: Mon Sep 19 11:08:16 2022 NAMESPACE: wccns STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The ingress-nginx controller has been installed. It may take a few minutes for the LoadBalancer IP to be available. You can watch the status by running \u0026#39;kubectl --namespace wccns get services -o wide -w nginx-ingress-ingress-nginx-controller\u0026#39; An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: example namespace: foo spec: ingressClassName: nginx rules: - host: www.example.com http: paths: - pathType: Prefix backend: service: name: exampleService port: number: 80 path: / # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls   \n  Check the status of the deployed ingress controller:\n$ kubectl --namespace wccns get services | grep ingress-nginx-controller Sample output:\nNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) nginx-ingress-ingress-nginx-controller LoadBalancer 10.96.180.215 144.24.xx.xx 80:31339/TCP,443:32278/TCP To print only the NGINX EXTERNAL-IP, execute this command:\nNGINX_PUBLIC_IP=`kubectl describe svc nginx-ingress-ingress-nginx-controller --namespace wccns | grep Ingress | awk \u0026#39;{print $3}\u0026#39;` $ echo $NGINX_PUBLIC_IP 144.24.xx.xx   Deploy tls to access individual Managed Servers   Deploy tls to securely access the services. Only one application can be configured with ssl-passthrough. A sample tls file for NGINX is shown below for the service wccinfra-cluster-ucm-cluster and port 16201. All the applications running on port 16201 can be securely accessed through this ingress. For each backend service, create different ingresses as NGINX does not support multiple path/rules with annotation ssl-passthrough. That is, for wccinfra-cluster-ucm-cluster, wccinfra-cluster-ibr-cluster, wccinfra-cluster-ipm-cluster, wccinfra-cluster-capture-cluster, wccinfra-cluster-wccadf-cluster and wccinfra-adminserver, different ingresses must be created.\n Note: There is a limitation with load-balancer in end-to-end SSL configuration - accessing multiple types of servers (different Managed Servers and/or Administration Server) at the same time, is currently not supported. we can access only one managed server at a time.\n $ cd ${WORKDIR}/charts/ingress-per-domain/tls   Sample nginx-ucm-tls.yaml:\napiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: wcc-ucm-ingress namespace: wccns annotations: kubernetes.io/ingress.class: nginx nginx.ingress.kubernetes.io/ssl-passthrough: \u0026#34;true\u0026#34; spec: tls: - hosts: - \u0026#39;$NGINX_PUBLIC_IP\u0026#39; secretName: domain1-tls-cert rules: - host: \u0026#39;\u0026lt;NGINX load balancer DNS name\u0026gt;\u0026#39; http: paths: - path: pathType: ImplementationSpecific backend: service: name: wccinfra-cluster-ucm-cluster port: number: 16201  Note: Make sure that you specify DNS name to point to the NGINX load balancer hostname.\n   Deploy the secured ingress:\n$ cd ${WORKDIR}/charts/ingress-per-domain/tls $ kubectl create -f nginx-ucm-tls.yaml   Check the services supported by the ingress:\n$ kubectl describe ingress wcc-ucm-ingress -n wccns    Click here check the services supported by the ingress.   Name: wcc-ucm-ingress Namespace: wccns Address: 10.102.97.237 Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026#34;default-http-backend\u0026#34; not found\u0026gt;) TLS: domain1-tls-cert terminates domain1.org Rules: Host Path Backends ---- ---- -------- domain1.org wccinfra-cluster-ucm-cluster:16201 (10.244.238.136:16201,10.244.253.132:16201) Annotations: kubernetes.io/ingress.class: nginx nginx.ingress.kubernetes.io/ssl-passthrough: true Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 62s (x2 over 106s) nginx-ingress-controller Scheduled for sync      Deploy tls to access Administration Server   As ssl-passthrough in NGINX works on the clusterIP of the backing service instead of individual endpoints, you must expose adminserver service created by the WebLogic Kubernetes Operator with clusterIP.\nFor example:\na. Get the name of Administration Server service:\n$ kubectl get svc -n wccns | grep wccinfra-adminserver Sample output:\nwccinfra-adminserver ClusterIP None \u0026lt;none\u0026gt; 7001/TCP,7002/TCP 7 b. Expose the Administration Server service wccinfra-adminserver and use the new service name wccinfra-adminserver-nginx-ssl:\n$ kubectl expose svc wccinfra-adminserver -n wccns --name=wccinfra-adminserver-nginx-ssl --port=7002 c. Deploy the secured ingress:\n  Sample nginx-admin-tls.yaml:\napiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: wcc-admin-ingress namespace: wccns annotations: kubernetes.io/ingress.class: nginx nginx.ingress.kubernetes.io/ssl-passthrough: \u0026#34;true\u0026#34; spec: tls: - hosts: - \u0026#39;$NGINX_PUBLIC_IP\u0026#39; secretName: domain1-tls-cert rules: - host: \u0026#39;\u0026lt;NGINX load balancer DNS name\u0026gt;\u0026#39; http: paths: - path: pathType: ImplementationSpecific backend: service: name: wccinfra-adminserver-nginx-ssl port: number: 7002\t Note: Make sure that you specify DNS name to point to the NGINX load balancer hostname.\n $ cd ${WORKDIR}/charts/ingress-per-domain/tls $ kubectl create -f nginx-admin-tls.yaml Uninstall ingress-nginx tls $ cd ${WORKDIR}/charts/ingress-per-domain/tls $ kubectl delete -f nginx-ucm-tls.yaml Create Oracle WebCenter Content domain With the load-balancer configured, please create your domain by following the instructions documented in Create Oracle WebCenter Content domains, before verifying domain application URL access.\nVerify domain application URL access Verify Non-SSL access Verify that the Oracle WebCenter Content domain application URLs are accessible through the LOADBALANCER-HOSTNAME:\nhttp://${LOADBALANCER-HOSTNAME}/weblogic/ready http://${LOADBALANCER-HOSTNAME}/console http://${LOADBALANCER-HOSTNAME}/em http://${LOADBALANCER-HOSTNAME}/cs http://${LOADBALANCER-HOSTNAME}/ibr http://${LOADBALANCER_HOSTNAME}/imaging http://${LOADBALANCER_HOSTNAME}/dc-console http://${LOADBALANCER_HOSTNAME}/wcc Verify SSL termination and end-to-end SSL access Verify that the Oracle WebCenter Content domain application URLs are accessible through the LOADBALANCER-HOSTNAME:\nhttps://${LOADBALANCER-HOSTNAME}/weblogic/ready https://${LOADBALANCER-HOSTNAME}/console https://${LOADBALANCER-HOSTNAME}/em https://${LOADBALANCER-HOSTNAME}/cs https://${LOADBALANCER-HOSTNAME}/ibr https://${LOADBALANCER_HOSTNAME}/imaging https://${LOADBALANCER_HOSTNAME}/dc-console https://${LOADBALANCER_HOSTNAME}/wcc Uninstall the NGINX Uninstall and delete the ingress-nginx deployment:\n//Uninstall and delete the `ingress-nginx` deployment $ helm delete wccinfra-nginx-ingress -n wccns //Uninstall NGINX $ helm delete nginx-ingress -n wccns "
},
{
	"uri": "/fmw-kubernetes/soa-domains/installguide/",
	"title": "Install Guide",
	"tags": [],
	"description": "",
	"content": "Install the WebLogic Kubernetes Operator and prepare and deploy Oracle SOA Suite domains.\n Requirements and pricing  Understand the system requirements, limitations, licensing, and pricing for deploying and running Oracle SOA Suite domains with the WebLogic Kubernetes Operator, including the SOA cluster sizing.\n Prepare your environment  Prepare for creating Oracle SOA Suite domains, including required secrets creation, persistent volume and volume claim creation, database creation, and database schema creation.\n Create Oracle SOA Suite domains  Create an Oracle SOA Suite domain home on an existing PV or PVC, and create the domain resource YAML file for deploying the generated Oracle SOA Suite domain.\n "
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/installguide/",
	"title": "Install Guide",
	"tags": [],
	"description": "",
	"content": "Install the WebLogic Kubernetes operator and prepare and deploy the Oracle WebCenter Portal domain.\n Requirements and limitations  Understand the system requirements and limitations for deploying and running Oracle WebCenter Portal with the WebLogic Kubernetes operator.\n Prepare your environment  Prepare for creating the Oracle WebCenter Portal domain, This preparation includes but not limited to creating required secrets, persistent volume and volume claim, and database schema.\n Create WebCenter Portal domain  Create an Oracle WebCenter Portal domain home on an existing PV or PVC, and create the domain resource YAML file for deploying the generated Oracle WebCenter Portal domain.\n Configure WebCenter Portal For Search  Set up search functionality in Oracle WebCenter Portal using Elasticsearch.\n "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/installguide/",
	"title": "Install Guide",
	"tags": [],
	"description": "",
	"content": "Install the WebLogic Kubernetes Operator and prepare and deploy Oracle Webcenter Sites domains.\n Requirements and limitations  Understand the system requirements and limitations for deploying and running Oracle WebCenter Sites domains with the WebLogic Kubernetes Operator, including the WebCenter Sites domain cluster sizing recommendations.\n Prepare your environment  Prepare for creating Oracle WebCenter Sites domains, including required secrets creation, persistent volume and volume claim creation, database creation, and database schema creation.\n Create Oracle WebCenter Sites domains  Create an Oracle WebCenter Sites domain home on an existing PV or PVC, and create the domain resource YAML file for deploying the generated Oracle WebCenter Sites domain.\n "
},
{
	"uri": "/fmw-kubernetes/soa-domains/appendix/quickstart-deployment-on-prem/",
	"title": "Quick start deployment on-premise",
	"tags": [],
	"description": "Describes how to quickly get an Oracle SOA Suite domain instance running (using the defaults, nothing special) for development and test purposes.",
	"content": "Use this Quick Start to create an Oracle SOA Suite domain deployment in a Kubernetes cluster (on-premise environments) with the WebLogic Kubernetes Operator. Note that this walkthrough is for demonstration purposes only, not for use in production. These instructions assume that you are already familiar with Kubernetes. If you need more detailed instructions, refer to the Install Guide.\nHardware requirements The Linux kernel supported for deploying and running Oracle SOA Suite domains with the operator is Oracle Linux 8 and Red Hat Enterprise Linux 8. Refer to the prerequisites for more details.\nFor this exercise, the minimum hardware requirements to create a single-node Kubernetes cluster and then deploy the soaosb (Oracle SOA Suite, Oracle Service Bus, and Enterprise Scheduler (ESS)) domain type with one Managed Server for Oracle SOA Suite and one for the Oracle Service Bus cluster, along with Oracle Database running as a container are:\n   Hardware Size     RAM 32GB   Disk Space 250GB+   CPU core(s) 6    See here for resource sizing information for Oracle SOA Suite domains set up on a Kubernetes cluster.\nSet up Oracle SOA Suite in an on-premise environment Use the steps in this topic to create a single-instance on-premise Kubernetes cluster and then create an Oracle SOA Suite soaosb domain type, which deploys a domain with Oracle SOA Suite, Oracle Service Bus, and Oracle Enterprise Scheduler (ESS).\n Step 1 - Prepare a virtual machine for the Kubernetes cluster Step 2 - Set up a single instance Kubernetes cluster Step 3 - Get scripts and images Step 4 - Install the WebLogic Kubernetes Operator Step 5 - Install the Traefik (ingress-based) load balancer Step 6 - Create and configure an Oracle SOA Suite domain  1. Prepare a virtual machine for the Kubernetes cluster For illustration purposes, these instructions are for Oracle Linux 8. If you are using a different flavor of Linux, you will need to adjust the steps accordingly.\nThese steps must be run with the root user, unless specified otherwise. Any time you see YOUR_USERID in a command, you should replace it with your actual userid.\n 1.1 Prerequisites   Choose the directories where your Kubernetes files will be stored. The Kubernetes directory is used for the /var/lib/kubelet file system and persistent volume storage.\n$ export kubelet_dir=/u01/kubelet $ mkdir -p $kubelet_dir $ ln -s $kubelet_dir /var/lib/kubelet   Verify that IPv4 forwarding is enabled on your host.\nNote: Replace eth0 with the ethernet interface name of your compute resource if it is different.\n$ /sbin/sysctl -a 2\u0026gt;\u0026amp;1|grep -s \u0026#39;net.ipv4.conf.eth0.forwarding\u0026#39; $ /sbin/sysctl -a 2\u0026gt;\u0026amp;1|grep -s \u0026#39;net.ipv4.conf.lo.forwarding\u0026#39; $ /sbin/sysctl -a 2\u0026gt;\u0026amp;1|grep -s \u0026#39;net.ipv4.ip_nonlocal_bind\u0026#39; For example: Verify that all are set to 1:\n$ net.ipv4.conf.eth0.forwarding = 1 $ net.ipv4.conf.lo.forwarding = 1 $ net.ipv4.ip_nonlocal_bind = 1 Solution: Set all values to 1 immediately:\n$ /sbin/sysctl net.ipv4.conf.eth0.forwarding=1 $ /sbin/sysctl net.ipv4.conf.lo.forwarding=1 $ /sbin/sysctl net.ipv4.ip_nonlocal_bind=1   To preserve the settings permanently: Update the above values to 1 in files in /usr/lib/sysctl.d/, /run/sysctl.d/, and /etc/sysctl.d/.\n  Verify the iptables rule for forwarding.\nKubernetes uses iptables to handle many networking and port forwarding rules. A standard container installation may create a firewall rule that prevents forwarding.\nVerify if the iptables rule to accept forwarding traffic is set:\n$ /sbin/iptables -L -n | awk \u0026#39;/Chain FORWARD / {print $4}\u0026#39; | tr -d \u0026#34;)\u0026#34; If the output is \u0026ldquo;DROP\u0026rdquo;, then run the following command:\n$ /sbin/iptables -P FORWARD ACCEPT Verify if the iptables rule is properly set to \u0026ldquo;ACCEPT\u0026rdquo;:\n$ /sbin/iptables -L -n | awk \u0026#39;/Chain FORWARD / {print $4}\u0026#39; | tr -d \u0026#34;)\u0026#34;   Disable and stop firewalld:\n$ systemctl disable firewalld $ systemctl stop firewalld   1.2 Install CRI-O and Podman  Note: If you have already configured CRI-O and Podman, continue to Install and configure Kubernetes.\n   Make sure that you have the right operating system version:\n$ uname -a $ more /etc/oracle-release Example output:\nLinux xxxxxx 5.15.0-100.96.32.el8uek.x86_64 #2 SMP Tue Feb 27 18:08:15 PDT 2024 x86_64 x86_64 x86_64 GNU/Linux Oracle Linux Server release 8.6   Installing CRI-O:\n### Add OLCNE( Oracle Cloud Native Environment ) Repository and KVM repository to the dnf config-manager. This allows dnf to install \u0026#34;qemu-kvm-core\u0026#34; packages and any other additional packages required for CRI-O installation. ## For OL8 $ dnf config-manager --add-repo https://yum.oracle.com/repo/OracleLinux/OL8/olcne18/x86_64 $ dnf config-manager --add-repo https://yum.oracle.com/repo/OracleLinux/OL8/kvm/appstream/x86_64 ## For OL9 $ dnf config-manager --add-repo https://yum.oracle.com/repo/OracleLinux/OL9/olcne18/x86_64 $ dnf config-manager --add-repo https://yum.oracle.com/repo/OracleLinux/OL9/kvm/appstream/x86_64 ### Installing cri-o $ dnf install -y cri-o  Note: To install a different version of CRI-O or on a different operating system, see CRI-O Installation Instructions.\n   Start the CRI-O service:\nSet up Kernel Modules and Proxies\n### Enable kernel modules overlay and br_netfilter which are required for Kubernetes Container Network Interface (CNI) plugins $ modprobe overlay $ modprobe br_netfilter ### To automatically load these modules at system start up create config as below $ cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/modules-load.d/crio.conf overlay br_netfilter EOF $ sysctl --system ### Set the environmental variable CONTAINER_RUNTIME_ENDPOINT to crio.sock to use crio as the container runtime $ export CONTAINER_RUNTIME_ENDPOINT=unix:///var/run/crio/crio.sock ### Setup Proxy for CRIO service $ cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/sysconfig/crio http_proxy=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT https_proxy=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT HTTPS_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT HTTP_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT no_proxy=localhost,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/crio/crio.sock NO_PROXY=localhost,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/crio/crio.sock EOF Set the runtime for CRI-O\n### Setting the runtime for crio ## Update crio.conf $ vi /etc/crio/crio.conf ## Append following under [crio.runtime] conmon_cgroup = \u0026#34;kubepods.slice\u0026#34; cgroup_manager = \u0026#34;systemd\u0026#34; ## Uncomment following under [crio.network] network_dir=\u0026#34;/etc/cni/net.d\u0026#34; plugin_dirs=[ \u0026#34;/opt/cni/bin\u0026#34;, \u0026#34;/usr/libexec/cni\u0026#34;, ] Start the CRI-O Service\n## Restart crio service $ systemctl restart crio.service $ systemctl enable --now crio   Installing Podman:\nOn Oracle Linux 8, if podman is not available, then install Podman and related tools with following command syntax:\n$ sudo dnf module install container-tools:ol8 On Oracle Linux 9, if podman is not available, then install Podman and related tools with following command syntax:\n$ sudo dnf install container-tools Since the setup uses \u0026ldquo;docker\u0026rdquo; CLI commands, on Oracle Linux 8/9, install the podman-docker package if not available, that effectively aliases the docker command to podman,with following command syntax:\n$ sudo dnf install podman-docker   Configure Podman rootless:\nFor using podman with your User ID (Rootless environment), Podman requires the user running it to have a range of UIDs listed in the files /etc/subuid and /etc/subgid. Rather than updating the files directly, the usermod program can be used to assign UIDs and GIDs to a user with the following commands:\n$ sudo /sbin/usermod --add-subuids 100000-165535 --add-subgids 100000-165535 \u0026lt;REPLACE_USER_ID\u0026gt; $ podman system migrate  Note: The above \u0026ldquo;podman system migrate\u0026rdquo; need to be executed with your User ID and not root.\n Verify the user-id addition\n$ cat /etc/subuid $ cat /etc/subgid Expected similar output\nopc:100000:65536 \u0026lt;user-id\u0026gt;:100000:65536   1.3 Install and Configure Kubernetes   Set SELinux in permissive mode (effectively disabling it):\n$ export PATH=/sbin:$PATH $ setenforce 0 $ sed -i \u0026#39;s/^SELINUX=enforcing$/SELINUX=permissive/\u0026#39; /etc/selinux/config   Export proxy and enable kubelet:\n### Get the nslookup IP address of the master node to use with apiserver-advertise-address during setting up Kubernetes master ### as the host may have different internal ip (hostname -i) and nslookup $HOSTNAME $ ip_addr=`nslookup $(hostname -f) | grep -m2 Address | tail -n1| awk -F: \u0026#39;{print $2}\u0026#39;| tr -d \u0026#34; \u0026#34;` $ echo $ip_addr ### Set the proxies $ export NO_PROXY=localhost,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/crio/crio.sock,$ip_addr,.svc $ export no_proxy=localhost,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/crio/crio.sock,$ip_addr,.svc $ export http_proxy=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT $ export https_proxy=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT $ export HTTPS_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT $ export HTTP_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT ### Install the kubernetes components and enable the kubelet service so that it automatically restarts on reboot $ dnf install -y kubeadm kubelet kubectl $ systemctl enable --now kubelet   Ensure net.bridge.bridge-nf-call-iptables is set to 1 in your sysctl to avoid traffic routing issues:\n$ cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 net.ipv4.ip_forward = 1 EOF $ sysctl --system   Disable swap check:\n$ sed -i \u0026#39;s/KUBELET_EXTRA_ARGS=/KUBELET_EXTRA_ARGS=\u0026#34;--fail-swap-on=false\u0026#34;/\u0026#39; /etc/sysconfig/kubelet $ cat /etc/sysconfig/kubelet ### Reload and restart kubelet $ systemctl daemon-reload $ systemctl restart kubelet   Pull the images using crio:\nkubeadm config images pull --cri-socket unix:///var/run/crio/crio.sock   1.4 Set up Helm   Install Helm v3.10.2+.\na. Download Helm from https://github.com/helm/helm/releases.\nFor example, to download Helm v3.10.2:\n$ wget https://get.helm.sh/helm-v3.10.2-linux-amd64.tar.gz b. Unpack tar.gz:\n$ tar -zxvf helm-v3.10.2-linux-amd64.tar.gz c. Find the Helm binary in the unpacked directory, and move it to its desired destination:\n$ mv linux-amd64/helm /usr/bin/helm   Run helm version to verify its installation:\n$ helm version version.BuildInfo{Version:\u0026#34;v3.10.2\u0026#34;, GitCommit:\u0026#34;50f003e5ee8704ec937a756c646870227d7c8b58\u0026#34;, GitTreeState:\u0026#34;clean\u0026#34;, GoVersion:\u0026#34;go1.18.8\u0026#34;}   2. Set up a single instance Kubernetes cluster  Notes:\n These steps must be run with the root user, unless specified otherwise! If you choose to use a different CIDR block (that is, other than 10.244.0.0/16 for the --pod-network-cidr= in the kubeadm init command), then also update NO_PROXY and no_proxy with the appropriate value.  Also make sure to update kube-flannel.yaml with the new value before deploying.   Replace the following with appropriate values:  ADD-YOUR-INTERNAL-NO-PROXY-LIST REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT     2.1 Set up the master node   Create a shell script that sets up the necessary environment variables. You can append this to the user’s .bashrc so that it will run at login. You must also configure your proxy settings here if you are behind an HTTP proxy:\n## grab my IP address to pass into kubeadm init, and to add to no_proxy vars ip_addr=`nslookup $(hostname -f) | grep -m2 Address | tail -n1| awk -F: \u0026#39;{print $2}\u0026#39;| tr -d \u0026#34; \u0026#34;` export pod_network_cidr=\u0026#34;10.244.0.0/16\u0026#34; export service_cidr=\u0026#34;10.96.0.0/12\u0026#34; export PATH=$PATH:/sbin:/usr/sbin ### Set the proxies export NO_PROXY=localhost,.svc,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/crio/crio.sock,$ip_addr,$pod_network_cidr,$service_cidr export no_proxy=localhost,.svc,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/crio/crio.sock,$ip_addr,$pod_network_cidr,$service_cidr export http_proxy=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT export https_proxy=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT export HTTPS_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT export HTTP_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT   Source the script to set up your environment variables:\n$ . ~/.bashrc   To implement command completion, add the following to the script:\n$ [ -f /usr/share/bash-completion/bash_completion ] \u0026amp;\u0026amp; . /usr/share/bash-completion/bash_completion $ source \u0026lt;(kubectl completion bash)   Run kubeadm init to create the master node:\n$ kubeadm init \\  --pod-network-cidr=$pod_network_cidr \\  --apiserver-advertise-address=$ip_addr \\  --ignore-preflight-errors=Swap \u0026gt; /tmp/kubeadm-init.out 2\u0026gt;\u0026amp;1   Log in to the terminal with YOUR_USERID:YOUR_GROUP. Then set up the ~/.bashrc similar to steps 1 to 3 with YOUR_USERID:YOUR_GROUP.\n Note that from now on we will be using YOUR_USERID:YOUR_GROUP to execute any kubectl commands and not root.\n   Set up YOUR_USERID:YOUR_GROUP to access the Kubernetes cluster:\n$ mkdir -p $HOME/.kube $ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config $ sudo chown $(id -u):$(id -g) $HOME/.kube/config   Verify that YOUR_USERID:YOUR_GROUP is set up to access the Kubernetes cluster using the kubectl command:\n$ kubectl get nodes  Note: At this step, the node is not in ready state as we have not yet installed the pod network add-on. After the next step, the node will show status as Ready.\n   Install a pod network add-on (flannel) so that your pods can communicate with each other.\n Note: If you are using a different CIDR block than 10.244.0.0/16, then download and update kube-flannel.yml with the correct CIDR address before deploying into the cluster:\n $ wget https://github.com/flannel-io/flannel/releases/download/v0.25.1/kube-flannel.yml $ ### Update the CIDR address if you are using a CIDR block other than the default 10.244.0.0/16 $ kubectl apply -f kube-flannel.yml   Verify that the master node is in Ready status:\n$ kubectl get nodes Sample output:\nNAME STATUS ROLES AGE VERSION mymasternode Ready control-plane 12h v1.27.2 or:\n$ kubectl get pods -n kube-system Sample output:\nNAME READY STATUS RESTARTS AGE pod/coredns-86c58d9df4-58p9f 1/1 Running 0 3m59s pod/coredns-86c58d9df4-mzrr5 1/1 Running 0 3m59s pod/etcd-mymasternode 1/1 Running 0 3m4s pod/kube-apiserver-node 1/1 Running 0 3m21s pod/kube-controller-manager-mymasternode 1/1 Running 0 3m25s pod/kube-flannel-ds-6npx4 1/1 Running 0 49s pod/kube-proxy-4vsgm 1/1 Running 0 3m59s pod/kube-scheduler-mymasternode 1/1 Running 0 2m58s   To schedule pods on the master node, taint the node:\n$ kubectl taint nodes --all node-role.kubernetes.io/control-plane-   Congratulations! Your Kubernetes cluster environment is ready to deploy your Oracle SOA Suite domain.\nRefer to the official documentation to set up a Kubernetes cluster.\n3. Get scripts and images 3.1 Set up the source code repository to deploy Oracle SOA Suite domains   Create a working directory to set up the source code:\n$ mkdir $HOME/soa_25.1.2 $ cd $HOME/soa_25.1.2   Download the WebLogic Kubernetes Operator source code and Oracle SOA Suite Kubernetes deployment scripts from the SOA repository. Required artifacts are available at OracleSOASuite/kubernetes.\n$ git clone https://github.com/oracle/fmw-kubernetes.git $ export WORKDIR=$HOME/soa_25.1.2/fmw-kubernetes/OracleSOASuite/kubernetes   3.2 Get required Docker images and add them to your local registry   Pull the WebLogic Kubernetes Operator image:\n$ podman pull ghcr.io/oracle/weblogic-kubernetes-operator:4.2.13   Obtain the Oracle Database image and Oracle SOA Suite Docker image from the Oracle Container Registry:\na. For first time users, to pull an image from the Oracle Container Registry, navigate to https://container-registry.oracle.com and log in using the Oracle Single Sign-On (SSO) authentication service. If you do not already have SSO credentials, you can create an Oracle Account using: https://profile.oracle.com/myprofile/account/create-account.jspx.\nUse the web interface to accept the Oracle Standard Terms and Restrictions for the Oracle software images that you intend to deploy. Your acceptance of these terms are stored in a database that links the software images to your Oracle Single Sign-On login credentials.\nTo obtain the image, log in to the Oracle Container Registry:\n$ podman login container-registry.oracle.com b. Find and then pull the Oracle Database image for 12.2.0.1:\n$ podman pull container-registry.oracle.com/database/enterprise:12.2.0.1-slim c. Find and then pull the prebuilt Oracle SOA Suite image 12.2.1.4 install image:\n$ podman pull container-registry.oracle.com/middleware/soasuite:12.2.1.4  Note: This image does not contain any Oracle SOA Suite product patches and can only be used for test and development purposes.\n   4. Install the WebLogic Kubernetes Operator 4.1 Prepare for the WebLogic Kubernetes Operator.   Create a namespace opns for the operator:\n$ kubectl create namespace opns   Create a service account op-sa for the operator in the operator’s namespace:\n$ kubectl create serviceaccount -n opns op-sa   4.2 Install the WebLogic Kubernetes Operator   Set up Helm with the location of the WebLogic Operator Helm Chart:\n$ helm repo add weblogic-operator https://oracle.github.io/weblogic-kubernetes-operator/charts --force-update   Use Helm to install and start the operator:\n$ helm install weblogic-kubernetes-operator weblogic-operator/weblogic-operator \\  --namespace opns \\  --version 4.2.13 \\  --set serviceAccount=op-sa \\  --wait   4.3 Verify the WebLogic Kubernetes Operator   Verify that the operator’s pod is running by listing the pods in the operator’s namespace. You should see one for the operator:\n$ kubectl get pods -n opns   Verify that the operator is up and running by viewing the operator pod\u0026rsquo;s logs:\n$ kubectl logs -n opns -c weblogic-operator deployments/weblogic-operator   The WebLogic Kubernetes Operator v4.2.13 has been installed. Continue with the load balancer and Oracle SOA Suite domain setup.\n5. Install the Traefik (ingress-based) load balancer The WebLogic Kubernetes Operator supports these load balancers: Traefik, NGINX, and Apache. Samples are provided in the documentation.\nThis Quick Start demonstrates how to install the Traefik ingress controller to provide load balancing for an Oracle SOA Suite domain.\n  Create a namespace for Traefik:\n$ kubectl create namespace traefik   Set up Helm for 3rd party services:\n$ helm repo add traefik https://helm.traefik.io/traefik --force-update   Install the Traefik operator in the traefik namespace with the provided sample values:\n$ cd ${WORKDIR} $ helm install traefik traefik/traefik \\  --namespace traefik \\  --values charts/traefik/values.yaml \\  --set \u0026#34;kubernetes.namespaces={traefik}\u0026#34; \\  --set \u0026#34;service.type=NodePort\u0026#34; \\  --wait   6. Create and configure an Oracle SOA Suite domain 6.1 Prepare for an Oracle SOA Suite domain   Create a namespace that can host Oracle SOA Suite domains. Label the namespace with weblogic-operator=enabled to manage the domain.\n$ kubectl create namespace soans $ kubectl label namespace soans weblogic-operator=enabled   Create Kubernetes secrets.\na. Create a Kubernetes secret for the domain in the same Kubernetes namespace as the domain. In this example, the username is weblogic, the password is Welcome1, and the namespace is soans:\n$ cd ${WORKDIR}/create-weblogic-domain-credentials $ ./create-weblogic-credentials.sh \\  -u weblogic \\  -p Welcome1 \\  -n soans \\  -d soainfra \\  -s soainfra-domain-credentials b. Create a Kubernetes secret for the RCU in the same Kubernetes namespace as the domain:\n Schema user : SOA1 Schema password : Oradoc_db1 DB sys user password : Oradoc_db1 Domain name : soainfra Domain Namespace : soans Secret name : soainfra-rcu-credentials  $ cd ${WORKDIR}/create-rcu-credentials $ ./create-rcu-credentials.sh \\  -u SOA1 \\  -p Oradoc_db1 \\  -a sys \\  -q Oradoc_db1 \\  -d soainfra \\  -n soans \\  -s soainfra-rcu-credentials   Create the Kubernetes persistence volume and persistence volume claim.\na. Create the Oracle SOA Suite domain home directory. Determine if a user already exists on your host system with uid:gid of 1000:0:\n$ sudo getent passwd 1000 If this command returns a username (which is the first field), you can skip the following useradd command. If not, create the oracle user with useradd:\n$ sudo useradd -u 1000 -g 0 oracle Create the directory that will be used for the Oracle SOA Suite domain home:\n$ sudo mkdir /scratch/k8s_dir $ sudo chown -R 1000:0 /scratch/k8s_dir b. The create-pv-pvc-inputs.yaml has the following values by default:\n baseName: domain domainUID: soainfra namespace: soans weblogicDomainStoragePath: /scratch/k8s_dir  Review and update if any changes required.\n$ cd ${WORKDIR}/create-weblogic-domain-pv-pvc $ vim create-pv-pvc-inputs.yaml c. Run the create-pv-pvc.sh script to create the PV and PVC configuration files:\n$ cd ${WORKDIR}/create-weblogic-domain-pv-pvc $ ./create-pv-pvc.sh -i create-pv-pvc-inputs.yaml -o output d. Create the PV and PVC using the configuration files created in the previous step:\n$ kubectl create -f output/pv-pvcs/soainfra-domain-pv.yaml $ kubectl create -f output/pv-pvcs/soainfra-domain-pvc.yaml   Install and configure the database for the Oracle SOA Suite domain.\nThis step is required only when a standalone database is not already set up and you want to use the database in a container.\nThe Oracle Database Docker images are supported only for non-production use. For more details, see My Oracle Support note: Oracle Support for Database Running on Docker (Doc ID 2216342.1). For production, it is suggested to use a standalone database. This example provides steps to create the database in a container.\n a. Create a secret with your desired password (for example, Oradoc_db1):\n$ kubectl create secret generic oracle-db-secret --from-literal=\u0026#39;password=Oradoc_db1\u0026#39; b. Create a database in a container:\n$ cd ${WORKDIR}/create-oracle-db-service $ ./start-db-service.sh -a oracle-db-secret -i container-registry.oracle.com/database/enterprise:12.2.0.1-slim -p none Once the database is successfully created, you can use the database connection string oracle-db.default.svc.cluster.local:1521/devpdb.k8s as an rcuDatabaseURL parameter in the create-domain-inputs.yaml file.\nc. Create Oracle SOA Suite schemas for the domain type (for example, soaosb).\nCreate a secret that contains the database\u0026rsquo;s SYSDBA username and password.\n$ kubectl -n default create secret generic oracle-rcu-secret \\  --from-literal=\u0026#39;sys_username=sys\u0026#39; \\  --from-literal=\u0026#39;sys_password=Oradoc_db1\u0026#39; \\  --from-literal=\u0026#39;password=Oradoc_db1\u0026#39; To install the Oracle SOA Suite schemas, run the create-rcu-schema.sh script with the following inputs:\n -s \u0026lt;RCU PREFIX\u0026gt; -t \u0026lt;SOA domain type\u0026gt; -d \u0026lt;Oracle Database URL\u0026gt; -i \u0026lt;SOASuite image\u0026gt; -n \u0026lt;Namespace\u0026gt; -c \u0026lt;Name of credentials secret containing SYSDBA username and password and RCU schema owner password\u0026gt; -r \u0026lt;Comma-separated variables\u0026gt; -l \u0026lt;Timeout limit in seconds. (optional). (default: 300)\u0026gt;  For example:\n$ cd ${WORKDIR}/create-rcu-schema $ ./create-rcu-schema.sh \\ -s SOA1 \\ -t soaosb \\ -d oracle-db.default.svc.cluster.local:1521/devpdb.k8s \\ -i container-registry.oracle.com/middleware/soasuite:12.2.1.4 \\ -n default \\ -c oracle-rcu-secret \\ -r SOA_PROFILE_TYPE=SMALL,HEALTHCARE_INTEGRATION=NO   Now the environment is ready to start the Oracle SOA Suite domain creation.\n6.2 Create an Oracle SOA Suite domain   The sample scripts for Oracle SOA Suite domain deployment are available at ${WORKDIR}/create-soa-domain/domain-home-on-pv. You must edit create-domain-inputs.yaml (or a copy of it) to provide the details for your domain.\nUpdate create-domain-inputs.yaml with the following values for domain creation:\n domainType: soaosb initialManagedServerReplicas: 1  $ cd ${WORKDIR}/create-soa-domain/domain-home-on-pv/ $ cp create-domain-inputs.yaml create-domain-inputs.yaml.orig $ sed -i -e \u0026#34;s:domainType\\: soa:domainType\\: soaosb:g\u0026#34; create-domain-inputs.yaml $ sed -i -e \u0026#34;s:initialManagedServerReplicas\\: 2:initialManagedServerReplicas\\: 1:g\u0026#34; create-domain-inputs.yaml $ sed -i -e \u0026#34;s:image\\: soasuite\\:12.2.1.4:image\\: container-registry.oracle.com/middleware/soasuite\\:12.2.1.4:g\u0026#34; create-domain-inputs.yaml   Run the create-domain.sh script to create a domain:\n$ cd ${WORKDIR}/create-soa-domain/domain-home-on-pv/ $ ./create-domain.sh -i create-domain-inputs.yaml -o output   Create a Kubernetes domain object:\nOnce the create-domain.sh is successful, it generates output/weblogic-domains/soainfra/domain.yaml, which you can use to create the Kubernetes resource domain to start the domain and servers:\n$ cd ${WORKDIR}/create-soa-domain/domain-home-on-pv $ kubectl create -f output/weblogic-domains/soainfra/domain.yaml   Verify that the Kubernetes domain object named soainfra is created:\n$ kubectl get domain -n soans NAME AGE soainfra 3m18s   Once you create the domain, the introspect pod is created. This inspects the domain home and then starts the soainfra-adminserver pod. Once the soainfra-adminserver pod starts successfully, the Managed Server pods are started in parallel. Watch the soans namespace for the status of domain creation:\n$ kubectl get pods -n soans -w   Verify that the Oracle SOA Suite domain server pods and services are created and in Ready state:\n$ kubectl get all -n soans   6.3 Configure Traefik to access Oracle SOA Suite domain services   Configure Traefik to manage ingresses created in the Oracle SOA Suite domain namespace (soans):\n$ helm upgrade traefik traefik/traefik \\  --reuse-values \\  --namespace traefik \\  --set \u0026#34;kubernetes.namespaces={traefik,soans}\u0026#34; \\  --wait   Create an ingress for the domain in the domain namespace by using the sample Helm chart:\n$ cd ${WORKDIR} $ export LOADBALANCER_HOSTNAME=$(hostname -f) $ helm install soa-traefik-ingress charts/ingress-per-domain \\ --namespace soans \\ --values charts/ingress-per-domain/values.yaml \\ --set \u0026#34;traefik.hostname=${LOADBALANCER_HOSTNAME}\u0026#34; \\ --set domainType=soaosb   Verify the created ingress per domain details:\n$ kubectl describe ingress soainfra-traefik -n soans   6.4 Verify that you can access the Oracle SOA Suite domain URL   Get the LOADBALANCER_HOSTNAME for your environment:\n$ export LOADBALANCER_HOSTNAME=$(hostname -f)   Verify the following URLs are available for Oracle SOA Suite domains of domain type soaosb:\nCredentials:\nusername: weblogic password: Welcome1\nhttp://${LOADBALANCER_HOSTNAME}:30305/console http://${LOADBALANCER_HOSTNAME}:30305/em http://${LOADBALANCER_HOSTNAME}:30305/servicebus http://${LOADBALANCER_HOSTNAME}:30305/soa-infra http://${LOADBALANCER_HOSTNAME}:30305/soa/composer http://${LOADBALANCER_HOSTNAME}:30305/integration/worklistapp http://${LOADBALANCER_HOSTNAME}:30305/ess http://${LOADBALANCER_HOSTNAME}:30305/EssHealthCheck   "
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/appendix/quickstart-deployment-on-prem/",
	"title": "Quick start deployment on-premise",
	"tags": [],
	"description": "Describes how to quickly get an Oracle WebCenter Portal domain instance running (using the defaults, nothing special) for development and test purposes.",
	"content": "Use this Quick Start to create an Oracle WebCenter Portal domain deployment in a Kubernetes cluster (on-premise environments) with the WebLogic Kubernetes Operator. Note that this walkthrough is for demonstration purposes only, not for use in production. These instructions assume that you are already familiar with Kubernetes. If you need more detailed instructions, refer to the Install Guide.\nHardware requirements The Linux kernel supported for deploying and running Oracle WebCenter Portal domains with the operator is Oracle Linux 7 (UL6+) and Red Hat Enterprise Linux 7 (UL3+ only with standalone Kubernetes). Refer to the prerequisites for more details.\nFor this exercise, the minimum hardware requirements to create a single-node Kubernetes cluster and then deploy the domain type with one Managed Server along with Oracle Database running as a container are:\n   Hardware Size     RAM 32GB   Disk Space 250GB+   CPU core(s) 6    See here for resource sizing information for Oracle WebCenter Portal domain set up on a Kubernetes cluster.\nSet up Oracle WebCenter Portal in an on-premise environment Use the steps in this topic to create a single-instance on-premise Kubernetes cluster and then create an Oracle WebCenter Portal domain.\n Step 1 - Prepare a virtual machine for the Kubernetes cluster Step 2 - Set up a single instance Kubernetes cluster Step 3 - Get scripts and images Step 4 - Install the WebLogic Kubernetes operator Step 5 - Install the Traefik (ingress-based) load balancer Step 6 - Create and configure an Oracle WebCenter Portal domain  1. Prepare a virtual machine for the Kubernetes cluster For illustration purposes, these instructions are for Oracle Linux 7u6+. If you are using a different flavor of Linux, you will need to adjust the steps accordingly.\nThese steps must be run with the root user, unless specified otherwise. Any time you see YOUR_USERID in a command, you should replace it with your actual userid.\n 1.1 Prerequisites   Choose the directories where your Docker and Kubernetes files will be stored. The Docker directory should be on a disk with a lot of free space (more than 100GB) because it will be used for the Docker file system, which contains all of your images and containers. The Kubernetes directory is used for the /var/lib/kubelet file system and persistent volume storage.\n$ export docker_dir=/u01/docker $ export kubelet_dir=/u01/kubelet $ mkdir -p $docker_dir $kubelet_dir $ ln -s $kubelet_dir /var/lib/kubelet   Verify that IPv4 forwarding is enabled on your host.\nNote: Replace eth0 with the ethernet interface name of your compute resource if it is different.\n$ /sbin/sysctl -a 2\u0026gt;\u0026amp;1|grep -s 'net.ipv4.conf.docker0.forwarding' $ /sbin/sysctl -a 2\u0026gt;\u0026amp;1|grep -s 'net.ipv4.conf.eth0.forwarding' $ /sbin/sysctl -a 2\u0026gt;\u0026amp;1|grep -s 'net.ipv4.conf.lo.forwarding' $ /sbin/sysctl -a 2\u0026gt;\u0026amp;1|grep -s 'net.ipv4.ip_nonlocal_bind' For example: Verify that all are set to 1:\n$ net.ipv4.conf.docker0.forwarding = 1 $ net.ipv4.conf.eth0.forwarding = 1 $ net.ipv4.conf.lo.forwarding = 1 $ net.ipv4.ip_nonlocal_bind = 1 Solution: Set all values to 1 immediately:\n$ /sbin/sysctl net.ipv4.conf.docker0.forwarding=1 $ /sbin/sysctl net.ipv4.conf.eth0.forwarding=1 $ /sbin/sysctl net.ipv4.conf.lo.forwarding=1 $ /sbin/sysctl net.ipv4.ip_nonlocal_bind=1   To preserve the settings permanently: Update the above values to 1 in files in /usr/lib/sysctl.d/, /run/sysctl.d/, and /etc/sysctl.d/.\n  Verify the iptables rule for forwarding.\nKubernetes uses iptables to handle many networking and port forwarding rules. A standard Docker installation may create a firewall rule that prevents forwarding.\nVerify if the iptables rule to accept forwarding traffic is set:\n$ /sbin/iptables -L -n | awk '/Chain FORWARD / {print $4}' | tr -d \u0026quot;)\u0026quot; If the output is \u0026ldquo;DROP\u0026rdquo;, then run the following command:\n$ /sbin/iptables -P FORWARD ACCEPT Verify if the iptables rule is properly set to \u0026ldquo;ACCEPT\u0026rdquo;:\n$ /sbin/iptables -L -n | awk '/Chain FORWARD / {print $4}' | tr -d \u0026quot;)\u0026quot;   Disable and stop firewalld:\n$ systemctl disable firewalld $ systemctl stop firewalld   1.2 Install and configure Docker  Note: If you have already installed Docker with version 18.03+ and configured the Docker daemon root to sufficient disk space along with proxy settings, continue to Install and configure Kubernetes.\n   Make sure that you have the right operating system version:\n$ uname -a $ more /etc/oracle-release Example output:\nLinux xxxxxxx 4.1.12-124.27.1.el7uek.x86_64 #2 SMP Mon May 13 08:56:17 PDT 2019 x86_64 x86_64 x86_64 GNU/Linux Oracle Linux Server release 7.6   Install the latest docker-engine and start the Docker service:\n$ yum-config-manager --enable ol7_addons $ docker_version=\u0026quot;19.03.11-ol\u0026quot; $ yum install docker-engine-$docker_version $ systemctl enable docker $ systemctl start docker   Add your user ID to the Docker group to allow you to run Docker commands without root access:\n$ /sbin/usermod -a -G docker \u0026lt;YOUR_USERID\u0026gt;   Check that your Docker version is at least 18.03:\n$ docker version Example output:\nClient: Docker Engine - Community Version: 19.03.11-ol API version: 1.40 Go version: go1.15.5 Git commit: 748876d Built: Thu Dec 3 19:36:03 2020 OS/Arch: linux/amd64 Experimental: false Server: Docker Engine - Community Engine: Version: 19.03.11-ol API version: 1.40 (minimum version 1.12) Go version: go1.15.8 Git commit: f0aae77 Built: Wed Feb 10 16:13:32 2021 OS/Arch: linux/amd64 Experimental: false Default Registry: docker.io containerd: Version: v1.3.9 GitCommit: runc: Version: 1.0.0-rc5+dev GitCommit: 4bb1fe4ace1a32d3676bb98f5d3b6a4e32bf6c58 docker-init: Version: 0.18.0 GitCommit: fec3683   Update the Docker engine configuration:\n$ mkdir -p /etc/docker $ cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/docker/daemon.json { \u0026quot;group\u0026quot;: \u0026quot;docker\u0026quot;, \u0026quot;data-root\u0026quot;: \u0026quot;/u01/docker\u0026quot; } EOF   Configure proxy settings if you are behind an HTTP proxy:\n ### Create the drop-in file /etc/systemd/system/docker.service.d/http-proxy.conf that contains proxy details: $ cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/systemd/system/docker.service.d/http-proxy.conf [Service] Environment=\u0026quot;HTTP_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT\u0026quot; Environment=\u0026quot;HTTPS_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT\u0026quot; Environment=\u0026quot;NO_PROXY=localhost,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/docker.sock\u0026quot; EOF  Note: On some hosts /etc/systemd/system/docker.service.d may not be available. Create this directory if it is not available.\n   Restart the Docker daemon to load the latest changes:\n$ systemctl daemon-reload $ systemctl restart docker   Verify that the proxy is configured with Docker:\n$ docker info|grep -i proxy Example output:\nHTTP Proxy: http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT HTTPS Proxy: http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT No Proxy: localhost,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/docker.sock   Verify Docker installation:\n$ docker run hello-world Example output:\nHello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \u0026quot;hello-world\u0026quot; image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/   1.3 Install and configure Kubernetes   Add the external Kubernetes repository:\n$ cat \u0026lt;\u0026lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\\$basearch enabled=1 gpgcheck=1 repo_gpgcheck=1 gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg exclude=kubelet kubeadm kubectl EOF   Set SELinux in permissive mode (effectively disabling it):\n$ export PATH=/sbin:$PATH $ setenforce 0 $ sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config   Export proxy and install kubeadm, kubelet, and kubectl:\n### Get the nslookup IP address of the master node to use with apiserver-advertise-address during setting up Kubernetes master ### as the host may have different internal ip (hostname -i) and nslookup $HOSTNAME $ ip_addr=`nslookup $(hostname -f) | grep -m2 Address | tail -n1| awk -F: '{print $2}'| tr -d \u0026quot; \u0026quot;` $ echo $ip_addr ### Set the proxies $ export NO_PROXY=localhost,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/docker.sock,$ip_addr $ export no_proxy=localhost,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/docker.sock,$ip_addr $ export http_proxy=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT $ export https_proxy=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT $ export HTTPS_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT $ export HTTP_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT ### install kubernetes 1.20.10 $ VERSION=1.20.10 $ yum install -y kubelet-$VERSION kubeadm-$VERSION kubectl-$VERSION --disableexcludes=kubernetes ### enable kubelet service so that it auto-restart on reboot $ systemctl enable --now kubelet   Ensure net.bridge.bridge-nf-call-iptables is set to 1 in your sysctl to avoid traffic routing issues:\n$ cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 EOF $ sysctl --system   Disable swap check:\n$ sed -i 's/KUBELET_EXTRA_ARGS=/KUBELET_EXTRA_ARGS=\u0026quot;--fail-swap-on=false\u0026quot;/' /etc/sysconfig/kubelet $ cat /etc/sysconfig/kubelet ### Reload and restart kubelet $ systemctl daemon-reload $ systemctl restart kubelet   1.4 Set up Helm   Install Helm v3.4+\na. Download Helm from https://github.com/helm/helm/releases.\nFor example, to download Helm v3.4.1:\n$ wget https://get.helm.sh/helm-v3.4.1-linux-amd64.tar.gz b. Unpack tar.gz:\n$ tar -zxvf helm-v3.4.1-linux-amd64.tar.gz c. Find the Helm binary in the unpacked directory, and move it to its desired destination:\n$ mv linux-amd64/helm /usr/bin/helm   Run helm version to verify its installation:\n$ helm version version.BuildInfo{Version:\u0026quot;v3.4.1\u0026quot;, GitCommit:\u0026quot;0ad800ef43d3b826f31a5ad8dfbb4fe05d143688\u0026quot;, GitTreeState:\u0026quot;clean\u0026quot;, GoVersion:\u0026quot;go1.13.12\u0026quot;}   2. Set up a single instance Kubernetes cluster  Notes:\n These steps must be run with the root user, unless specified otherwise! If you choose to use a different CIDR block (that is, other than 10.244.0.0/16 for the --pod-network-cidr= in the kubeadm init command), then also update NO_PROXY and no_proxy with the appropriate value.  Also make sure to update kube-flannel.yaml with the new value before deploying.   Replace the following with appropriate values:  ADD-YOUR-INTERNAL-NO-PROXY-LIST REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT     2.1 Set up the master node   Create a shell script that sets up the necessary environment variables. You can append this to the user’s .bashrc so that it will run at login. You must also configure your proxy settings here if you are behind an HTTP proxy:\n## grab my IP address to pass into kubeadm init, and to add to no_proxy vars ip_addr=`nslookup $(hostname -f) | grep -m2 Address | tail -n1| awk -F: '{print $2}'| tr -d \u0026quot; \u0026quot;` export pod_network_cidr=\u0026quot;10.244.0.0/16\u0026quot; export service_cidr=\u0026quot;10.96.0.0/12\u0026quot; export PATH=$PATH:/sbin:/usr/sbin ### Set the proxies export NO_PROXY=localhost,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/docker.sock,$ip_addr,$pod_network_cidr,$service_cidr export no_proxy=localhost,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/docker.sock,$ip_addr,$pod_network_cidr,$service_cidr export http_proxy=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT export https_proxy=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT export HTTPS_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT export HTTP_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT   Source the script to set up your environment variables:\n$ . ~/.bashrc   To implement command completion, add the following to the script:\n$ [ -f /usr/share/bash-completion/bash_completion ] \u0026amp;\u0026amp; . /usr/share/bash-completion/bash_completion $ source \u0026lt;(kubectl completion bash)   Run kubeadm init to create the master node:\n$ kubeadm init \\ --pod-network-cidr=$pod_network_cidr \\ --apiserver-advertise-address=$ip_addr \\ --ignore-preflight-errors=Swap \u0026gt; /tmp/kubeadm-init.out 2\u0026gt;\u0026amp;1   Log in to the terminal with YOUR_USERID:YOUR_GROUP. Then set up the ~/.bashrc similar to steps 1 to 3 with YOUR_USERID:YOUR_GROUP.\n Note that from now on we will be using YOUR_USERID:YOUR_GROUP to execute any kubectl commands and not root.\n   Set up YOUR_USERID:YOUR_GROUP to access the Kubernetes cluster:\n$ mkdir -p $HOME/.kube $ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config $ sudo chown $(id -u):$(id -g) $HOME/.kube/config   Verify that YOUR_USERID:YOUR_GROUP is set up to access the Kubernetes cluster using the kubectl command:\n$ kubectl get nodes  Note: At this step, the node is not in ready state as we have not yet installed the pod network add-on. After the next step, the node will show status as Ready.\n   Install a pod network add-on (flannel) so that your pods can communicate with each other.\n Note: If you are using a different CIDR block than 10.244.0.0/16, then download and update kube-flannel.yml with the correct CIDR address before deploying into the cluster:\n $ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.12.0/Documentation/kube-flannel.yml   Verify that the master node is in Ready status:\n$ kubectl get nodes Sample output:\nNAME STATUS ROLES AGE VERSION mymasternode Ready master 8m26s v1.18.4 or:\n$ kubectl get pods -n kube-system Sample output:\nNAME READY STATUS RESTARTS AGE pod/coredns-86c58d9df4-58p9f 1/1 Running 0 3m59s pod/coredns-86c58d9df4-mzrr5 1/1 Running 0 3m59s pod/etcd-mymasternode 1/1 Running 0 3m4s pod/kube-apiserver-node 1/1 Running 0 3m21s pod/kube-controller-manager-mymasternode 1/1 Running 0 3m25s pod/kube-flannel-ds-amd64-6npx4 1/1 Running 0 49s pod/kube-proxy-4vsgm 1/1 Running 0 3m59s pod/kube-scheduler-mymasternode 1/1 Running 0 2m58s   To schedule pods on the master node, taint the node:\n$ kubectl taint nodes --all node-role.kubernetes.io/master-   Congratulations! Your Kubernetes cluster environment is ready to deploy your Oracle WebCenter Portal domain.\nFor additional references on Kubernetes cluster setup, check the cheat sheet.\n3. Get scripts and images 3.1 Set up the code repository to deploy Oracle WebCenter Portal Follow these steps to set up the source code repository required to deploy Oracle WebCenter Portal domain.\n3.2 Get required Docker images and add them to your local registry   Pull the operator image:\n$ docker pull ghcr.io/oracle/weblogic-kubernetes-operator:3.3.0   Obtain the Oracle Database image from the Oracle Container Registry:\na. For first time users, to pull an image from the Oracle Container Registry, navigate to https://container-registry.oracle.com and log in using the Oracle Single Sign-On (SSO) authentication service. If you do not already have SSO credentials, you can create an Oracle Account using:\nhttps://profile.oracle.com/myprofile/account/create-account.jspx.\nUse the web interface to accept the Oracle Standard Terms and Restrictions for the Oracle software images that you intend to deploy. Your acceptance of these terms are stored in a database that links the software images to your Oracle Single Sign-On login credentials.\nTo obtain the image, log in to the Oracle Container Registry:\n$ docker login container-registry.oracle.com b. Find and then pull the Oracle Database image for 12.2.0.1:\n$ docker pull container-registry.oracle.com/database/enterprise:12.2.0.1-slim c. Build Oracle WebCenter Portal 12.2.1.4 Image by following steps from this document.\n  4. Install the WebLogic Kubernetes operator 4.1 Prepare for the WebLogic Kubernetes operator.   Create a namespace operator-ns for the operator:\n$ kubectl create namespace operator-ns   Create a service account operator-sa for the operator in the operator’s namespace:\n$ kubectl create serviceaccount -n operator-ns operator-sa   4.2 Install the WebLogic Kubernetes operator Use Helm to install and start the operator from the directory you just cloned:\n $ cd ${WORKDIR} $ helm install weblogic-kubernetes-operator charts/weblogic-operator \\ --namespace operator-ns \\ --set image=oracle/weblogic-kubernetes-operator:3.3.0 \\ --set serviceAccount=operator-sa \\ --set \u0026quot;domainNamespaces={}\u0026quot; \\ --wait 4.3 Verify the WebLogic Kubernetes operator   Verify that the operator’s pod is running by listing the pods in the operator’s namespace. You should see one for the operator:\n$ kubectl get pods -n operator-ns   Verify that the operator is up and running by viewing the operator pod\u0026rsquo;s logs:\n$ kubectl logs -n operator-ns -c weblogic-operator deployments/weblogic-operator   The WebLogic Kubernetes operator v3.3.0 has been installed. Continue with the load balancer and Oracle WebCenter Portal domain setup.\n5. Install the Traefik (ingress-based) load balancer The WebLogic Kubernetes Operator supports three load balancers: Traefik, NGINX and Apache. Samples are provided in the documentation.\nThis Quick Start demonstrates how to install the Traefik ingress controller to provide load balancing for an Oracle WebCenter Portal domain.\n  Create a namespace for Traefik:\n$ kubectl create namespace traefik   Set up Helm for 3rd party services:\n$ helm repo add traefik https://containous.github.io/traefik-helm-chart   Install the Traefik operator in the traefik namespace with the provided sample values:\n$ cd ${WORKDIR} $ helm install traefik traefik/traefik \\ --namespace traefik \\ --values charts/traefik/values.yaml \\ --set \u0026quot;kubernetes.namespaces={traefik}\u0026quot; \\ --set \u0026quot;service.type=NodePort\u0026quot; \\ --wait   6. Create and configure an Oracle WebCenter Portal domain 6.1 Prepare for an Oracle WebCenter Portal domain   Create a namespace that can host Oracle WebCenter Portal domain:\n$ kubectl create namespace wcpns   Use Helm to configure the operator to manage Oracle WebCenter Portal domain in this namespace:\n$ cd ${WORKDIR} $ helm upgrade weblogic-kubernetes-operator charts/weblogic-operator \\ --reuse-values \\ --namespace operator-ns \\ --set \u0026quot;domainNamespaces={wcpns}\u0026quot; \\ --wait   Create Kubernetes secrets.\na. Create a Kubernetes secret for the domain in the same Kubernetes namespace as the domain. In this example, the username is weblogic, the password is welcome1, and the namespace is wcpns:\n$ cd ${WORKDIR}/create-weblogic-domain-credentials $ sh create-weblogic-credentials.sh -u weblogic -p welcome1 -n wcpns -d wcp-domain -s wcp-domain-domain-credentials b. Create a Kubernetes secret for the RCU in the same Kubernetes namespace as the domain:\n Schema user : WCP1 Schema password : Oradoc_db1 DB sys user password : Oradoc_db1 Domain name : wcp-domain Domain Namespace : wcpns Secret name : wcp-domain-rcu-credentials  $ cd ${WORKDIR}/create-rcu-credentials $ sh create-rcu-credentials.sh -u WCP1 -p Oradoc_db1 -a sys -q Oradoc_db1 -n wcpns -d wcp-domain -s wcp-domain-rcu-credentials   Create the Kubernetes persistence volume and persistence volume claim.\na. Create the Oracle WebCenter Portal domain home directory. Determine if a user already exists on your host system with uid:gid of 1000:\n$ sudo getent passwd 1000 If this command returns a username (which is the first field), you can skip the following useradd command. If not, create the oracle user with useradd:\n$ sudo useradd -u 1000 -g 1000 oracle Create the directory that will be used for the Oracle WebCenter Portal domain home:\n$ sudo mkdir /scratch/k8s_dir $ sudo chown -R 1000:1000 /scratch/k8s_dir b. Update create-pv-pvc-inputs.yaml with the following values:\n baseName: domain domainUID: wcp-domain namespace: wcpns weblogicDomainStoragePath: /scratch/k8s_dir  $ cd ${WORKDIR}/create-weblogic-domain-pv-pvc $ cp create-pv-pvc-inputs.yaml create-pv-pvc-inputs.yaml.orig $ sed -i -e \u0026quot;s:baseName\\: weblogic-sample:baseName\\: domain:g\u0026quot; create-pv-pvc-inputs.yaml $ sed -i -e \u0026quot;s:domainUID\\::domainUID\\: wcp-domain:g\u0026quot; create-pv-pvc-inputs.yaml $ sed -i -e \u0026quot;s:namespace\\: default:namespace\\: wcpns:g\u0026quot; create-pv-pvc-inputs.yaml $ sed -i -e \u0026quot;s:#weblogicDomainStoragePath\\: /scratch/k8s_dir:weblogicDomainStoragePath\\: /scratch/k8s_dir:g\u0026quot; create-pv-pvc-inputs.yaml c. Run the create-pv-pvc.sh script to create the PV and PVC configuration files:\n$ ./create-pv-pvc.sh -i create-pv-pvc-inputs.yaml -o output d. Create the PV and PVC using the configuration files created in the previous step:\n $ kubectl create -f output/pv-pvcs/wcp-domain-domain-pv.yaml $ kubectl create -f output/pv-pvcs/wcp-domain-domain-pvc.yaml   Install and configure the database for the Oracle WebCenter Portal domain.\nThis step is required only when a standalone database is not already set up and you want to use the database in a container.\nThe Oracle Database Docker images are supported only for non-production use. For more details, see My Oracle Support note: Oracle Support for Database Running on Docker (Doc ID 2216342.1). For production, it is suggested to use a standalone database. This example provides steps to create the database in a container.\n a. Create a database in a container:\n$ cd ${WORKDIR}/create-oracle-db-service $ ./start-db-service.sh -i container-registry.oracle.com/database/enterprise:12.2.0.1-slim -p none Once the database is successfully created, you can use the database connection string oracle-db.default.svc.cluster.local:1521/devpdb.k8s as an rcuDatabaseURL parameter in the create-domain-inputs.yaml file.\nb. Create Oracle WebCenter Portal schemas.\nTo create the Oracle WebCenter Portal schemas, run the following commands:\n $ ./create-rcu-schema.sh \\ -s WCP1 \\ -t wcp \\ -d oracle-db.default.svc.cluster.local:1521/devpdb.k8s \\ -i oracle/wcportal:12.2.1.4\\ -n wcpns \\ -q Oradoc_db1 \\ -r welcome1   Now the environment is ready to start the Oracle WebCenter Portal domain creation.\n6.2 Create an Oracle WebCenter Portal domain   The sample scripts for Oracle WebCenter Portal domain deployment are available at create-wcp-domain. You must edit create-domain-inputs.yaml (or a copy of it) to provide the details for your domain.\nUpdate create-domain-inputs.yaml with the following values for domain creation:\n rcuDatabaseURL: oracle-db.default.svc.cluster.local:1521/devpdb.k8s    Run the create-domain.sh script to create a domain:\n$ cd ${WORKDIR}/create-wcp-domain/domain-home-on-pv/ $ ./create-domain.sh -i create-domain-inputs.yaml -o output   Create a Kubernetes domain object:\nOnce the create-domain.sh is successful, it generates output/weblogic-domains/wcp-domain/domain.yaml, which you can use to create the Kubernetes resource domain to start the domain and servers:\n$ cd ${WORKDIR}/create-wcp-domain/domain-home-on-pv $ kubectl create -f output/weblogic-domains/wcp-domain/domain.yaml   Verify that the Kubernetes domain object named wcp-domain is created:\n$ kubectl get domain -n wcpns NAME AGE wcp-domain 3m18s   Once you create the domain, the introspect pod is created. This inspects the domain home and then starts the wcp-domain-adminserver pod. Once the wcp-domain-adminserver pod starts successfully, the Managed Server pods are started in parallel. Watch the wcpns namespace for the status of domain creation:\n$ kubectl get pods -n wcpns -w   Verify that the Oracle WebCenter Portal domain server pods and services are created and in Ready state:\n$ kubectl get all -n wcpns   6.3 Configure Traefik to access Oracle WebCenter Portal domain services   Configure Traefik to manage ingresses created in the Oracle WebCenter Portal domain namespace (wcpns):\n$ helm upgrade traefik traefik/traefik \\ --reuse-values \\ --namespace traefik \\ --set \u0026quot;kubernetes.namespaces={traefik,wcpns}\u0026quot; \\ --wait   Create an ingress for the domain in the domain namespace by using the sample Helm chart:\n$ cd ${WORKDIR} helm install wcp-traefik-ingress \\ charts/ingress-per-domain \\ --namespace wcpns \\ --values charts/ingress-per-domain/values.yaml \\ --set \u0026quot;traefik.hostname=$(hostname -f)\u0026quot;   Verify the created ingress per domain details:\n$ kubectl describe ingress wcp-domain-traefik -n wcpns   6.4 Verify that you can access the Oracle WebCenter Portal domain URL   Get the LOADBALANCER_HOSTNAME for your environment:\nexport LOADBALANCER_HOSTNAME=$(hostname -f)   Verify the following URLs are available for Oracle WebCenter Portal domain.\nCredentials:\nusername: weblogic password: welcome1\nhttp://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/webcenter http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/console http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/em http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/rsscrawl http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/rest http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/webcenterhelp   "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/appendix/quickstart-deployment-on-prem/",
	"title": "Quick start deployment on-premise",
	"tags": [],
	"description": "Describes how to quickly get an Oracle WebCenter Sites domain instance running (using the defaults, nothing special) for development and test purposes.",
	"content": "Use this Quick Start to create an Oracle WebCenter Sites domain deployment in a Kubernetes cluster (on-premise environments) with the Oracle WebLogic Server Kubernetes operator. Note that this walkthrough is for demonstration purposes only, not for use in production. These instructions assume that you are already familiar with Kubernetes. If you need more detailed instructions, refer to the Install Guide.\nHardware requirements Supported Linux kernel for deploying and running Oracle WebCenter Sites domains with the operator is Oracle Linux 7 UL6+ and Red Hat Enterprise Linux 7 (UL3+). Refer to the prerequisites for more details.\nFor this exercise the minimum hardware requirement to create a single node Kubernetes cluster and then deploy wcsitesinfra domain type with one managed server for Oracle WebCenter Sites and Oracle Database running as a container\n   Hardware Size     RAM 32GB   Disk Space 250GB+   CPU core(s) 6    See here for resourse sizing information for Oracle WebCenter Sites domains setup on Kubernetes cluster.\nSet up Oracle WebCenter Sites in an on-premise environment Perform the steps in this topic to create a single instance on-premise Kubernetes cluster and then create an Oracle WebCenter Sites wcsitesinfra domain type.\n Step 1 - Prepare a virtual machine for the Kubernetes cluster Step 2 - Set up a single instance Kubernetes cluster Step 3 - Get scripts and images Step 4 - Install the WebLogic Kubernetes Operator Step 5 - Install the Traefik (ingress-based) load balancer Step 6 - Create and configure an Oracle WebCenter Sites Domain  1. Prepare a virtual machine for the Kubernetes cluster For illustration purposes, these instructions are for Oracle Linux 7u6+. If you are using a different flavor of Linux, you will need to adjust the steps accordingly.\nThese steps must be run with the root user, unless specified otherwise. Any time you see YOUR_USERID in a command, you should replace it with your actual userid.\n 1.1 Prerequisites   Choose the directories where your Docker and Kubernetes files will be stored. The Docker directory should be on a disk with a lot of free space (more than 100GB) because it will be used for the Docker file system, which contains all of your images and containers. The Kubernetes directory is used for the /var/lib/kubelet file system and persistent volume storage.\n$ export docker_dir=/u01/docker $ export kubelet_dir=/u01/kubelet $ mkdir -p $docker_dir $kubelet_dir $ ln -s $kubelet_dir /var/lib/kubelet   Verify that IPv4 forwarding is enabled on your host.\nNote: Replace eth0 with the ethernet interface name of your compute resource if it is different.\n$ /sbin/sysctl -a 2\u0026gt;\u0026amp;1|grep -s 'net.ipv4.conf.docker0.forwarding' $ /sbin/sysctl -a 2\u0026gt;\u0026amp;1|grep -s 'net.ipv4.conf.eth0.forwarding' $ /sbin/sysctl -a 2\u0026gt;\u0026amp;1|grep -s 'net.ipv4.conf.lo.forwarding' $ /sbin/sysctl -a 2\u0026gt;\u0026amp;1|grep -s 'net.ipv4.ip_nonlocal_bind' For example: Verify that all are set to 1\n$ net.ipv4.conf.docker0.forwarding = 1 $ net.ipv4.conf.eth0.forwarding = 1 $ net.ipv4.conf.lo.forwarding = 1 $ net.ipv4.ip_nonlocal_bind = 1 Solution: Set all values to 1 immediately with the following commands:\n$ /sbin/sysctl net.ipv4.conf.docker0.forwarding=1 $ /sbin/sysctl net.ipv4.conf.eth0.forwarding=1 $ /sbin/sysctl net.ipv4.conf.lo.forwarding=1 $ /sbin/sysctl net.ipv4.ip_nonlocal_bind=1 To preserve the settings post-reboot: Update the above values to 1 in files in /usr/lib/sysctl.d/, /run/sysctl.d/, and /etc/sysctl.d/\n  Verify the iptables rule for forwarding.\nKubernetes uses iptables to handle many networking and port forwarding rules. A standard Docker installation may create a firewall rule that prevents forwarding.\nVerify if the iptables rule to accept forwarding traffic is set:\n$ /sbin/iptables -L -n | awk '/Chain FORWARD / {print $4}' | tr -d \u0026quot;)\u0026quot; If the output is \u0026ldquo;DROP\u0026rdquo;, then run the following command:\n$ /sbin/iptables -P FORWARD ACCEPT Verify if the iptables rule is set properly to \u0026ldquo;ACCEPT\u0026rdquo;:\n$ /sbin/iptables -L -n | awk '/Chain FORWARD / {print $4}' | tr -d \u0026quot;)\u0026quot;   Disable and stop firewalld:\n$ systemctl disable firewalld $ systemctl stop firewalld   1.2 Install and configure Docker  Note : If you have already installed Docker with version 18.03+ and configured Docker daemon root to sufficient disk space along with proxy settings, continue to Install and configure Kubernetes\n   Make sure that you have the right operating system version:\n$ uname -a $ more /etc/oracle-release For example:\nLinux xxxxxxx 4.1.12-124.27.1.el7uek.x86_64 #2 SMP Mon May 13 08:56:17 PDT 2019 x86_64 x86_64 x86_64 GNU/Linux Oracle Linux Server release 7.6   Install the latest docker-engine and start the Docker service:\n$ yum-config-manager --enable ol7_addons $ yum install docker-engine $ systemctl enable docker $ systemctl start docker   Add your userid to the Docker group. This will allow you to run the Docker commands without root access:\n$ /sbin/usermod -a -G docker \u0026lt;YOUR_USERID\u0026gt;   Check your Docker version. It must be at least 18.03.\n$ docker version For example:\nClient: Docker Engine - Community Version: 19.03.1-ol API version: 1.40 Go version: go1.12.5 Git commit: ead9442 Built: Wed Sep 11 06:40:28 2019 OS/Arch: linux/amd64 Experimental: false Server: Docker Engine - Community Engine: Version: 19.03.1-ol API version: 1.40 (minimum version 1.12) Go version: go1.12.5 Git commit: ead9442 Built: Wed Sep 11 06:38:43 2019 OS/Arch: linux/amd64 Experimental: false Default Registry: docker.io containerd: Version: v1.2.0-rc.0-108-gc444666 GitCommit: c4446665cb9c30056f4998ed953e6d4ff22c7c39 runc: Version: 1.0.0-rc5+dev GitCommit: 4bb1fe4ace1a32d3676bb98f5d3b6a4e32bf6c58 docker-init: Version: 0.18.0 GitCommit: fec3683   Update the Docker engine configuration:\n$ mkdir -p /etc/docker $ cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/docker/daemon.json { \u0026quot;group\u0026quot;: \u0026quot;docker\u0026quot;, \u0026quot;data-root\u0026quot;: \u0026quot;/u01/docker\u0026quot; } EOF   Configure proxy settings if you are behind an HTTP proxy. On some hosts /etc/systemd/system/docker.service.d may not be available. Create this directory if it is not available.\n ### Create the drop-in file /etc/systemd/system/docker.service.d/http-proxy.conf that contains proxy details: $ cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/systemd/system/docker.service.d/http-proxy.conf [Service] Environment=\u0026quot;HTTP_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT\u0026quot; Environment=\u0026quot;HTTPS_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT\u0026quot; Environment=\u0026quot;NO_PROXY=localhost,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/docker.sock\u0026quot; EOF   Restart the Docker daemon to load the latest changes:\n$ systemctl daemon-reload $ systemctl restart docker   Verify that the proxy is configured with Docker:\n$ docker info|grep -i proxy For example:\nHTTP Proxy: http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT HTTPS Proxy: http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT No Proxy: localhost,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/docker.sock   Verify Docker installation:\n$ docker run hello-world For example:\nHello from Docker! This message shows that your installation appears to be working correctly. To generate this message, Docker took the following steps: 1. The Docker client contacted the Docker daemon. 2. The Docker daemon pulled the \u0026quot;hello-world\u0026quot; image from the Docker Hub. (amd64) 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading. 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal. To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/ For more examples and ideas, visit: https://docs.docker.com/get-started/   1.3 Install and configure Kubernetes   Add the external Kubernetes repository:\n$ cat \u0026lt;\u0026lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\\$basearch enabled=1 gpgcheck=1 repo_gpgcheck=1 gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg exclude=kubelet kubeadm kubectl EOF   Set SELinux in permissive mode (effectively disabling it):\n$ export PATH=/sbin:$PATH $ setenforce 0 $ sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config   Export proxy and install kubeadm, kubelet, and kubectl:\n### Get the nslookup IP address of the master node to use with apiserver-advertise-address during setting up Kubernetes master ### as the host may have different internal ip (hostname -i) and nslookup $HOSTNAME $ ip_addr=`nslookup $(hostname -f) | grep -m2 Address | tail -n1| awk -F: '{print $2}'| tr -d \u0026quot; \u0026quot;` $ echo $ip_addr ### Set the proxies $ export NO_PROXY=localhost,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/docker.sock,$ip_addr $ export no_proxy=localhost,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/docker.sock,$ip_addr $ export http_proxy=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT $ export https_proxy=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT $ export HTTPS_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT $ export HTTP_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT ### install kubernetes $ VERSION=1.23.6-0 $ yum install -y kubelet-$VERSION kubeadm-$VERSION kubectl-$VERSION --disableexcludes=kubernetes ### enable kubelet service so that it auto-restart on reboot $ systemctl enable --now kubelet   Ensure net.bridge.bridge-nf-call-iptables is set to 1 in your sysctl to avoid traffic routing issues:\n$ cat \u0026lt;\u0026lt;EOF \u0026gt; /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 EOF $ sysctl --system   Disable swap check:\n$ sed -i 's/KUBELET_EXTRA_ARGS=/KUBELET_EXTRA_ARGS=\u0026quot;--fail-swap-on=false\u0026quot;/' /etc/sysconfig/kubelet $ cat /etc/sysconfig/kubelet ### Reload and restart kubelet $ systemctl daemon-reload $ systemctl restart kubelet   1.4 Set up Helm   Install Helm v3.x.\na. Download Helm from https://github.com/helm/helm/releases. Example to download Helm v3.10.3:\n$ wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz b. Unpack tar.gz:\n$ tar -zxvf helm-v3.10.3-linux-amd64.tar.gz c. Find the Helm binary in the unpacked directory, and move it to its desired destination:\n$ mv linux-amd64/helm /usr/bin/helm   Run helm version to verify its installation:\n$ helm version version.BuildInfo{Version:\u0026quot;v3.10.3\u0026quot;, GitCommit:\u0026quot;835b7334cfe2e5e27870ab3ed4135f136eecc704\u0026quot;, GitTreeState:\u0026quot;clean\u0026quot;, GoVersion:\u0026quot;go1.18.9\u0026quot;}   2. Set up a single instance Kubernetes cluster  Notes:\n These steps must be run with the root user, unless specified otherwise! If you choose to use a different cidr block (that is, other than 10.244.0.0/16 for the --pod-network-cidr= in the kubeadm init command), then also update NO_PROXY and no_proxy with the appropriate value.  Also make sure to update kube-flannel.yaml with the new value before deploying.   Replace the following with appropriate values:  ADD-YOUR-INTERNAL-NO-PROXY-LIST REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT     2.1 Set up the master node   Create a shell script that sets up the necessary environment variables. You can append this to the user’s .bashrc so that it will run at login. You must also configure your proxy settings here if you are behind an HTTP proxy:\n## grab my IP address to pass into kubeadm init, and to add to no_proxy vars ip_addr=`nslookup $(hostname -f) | grep -m2 Address | tail -n1| awk -F: '{print $2}'| tr -d \u0026quot; \u0026quot;` export pod_network_cidr=\u0026quot;10.244.0.0/16\u0026quot; export service_cidr=\u0026quot;10.96.0.0/12\u0026quot; export PATH=$PATH:/sbin:/usr/sbin ### Set the proxies export NO_PROXY=localhost,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/docker.sock,$ip_addr,$pod_network_cidr,$service_cidr export no_proxy=localhost,127.0.0.0/8,ADD-YOUR-INTERNAL-NO-PROXY-LIST,/var/run/docker.sock,$ip_addr,$pod_network_cidr,$service_cidr export http_proxy=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT export https_proxy=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT export HTTPS_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT export HTTP_PROXY=http://REPLACE-WITH-YOUR-COMPANY-PROXY-HOST:PORT   Source the script to set up your environment variables:\n$ . ~/.bashrc   To implement command completion, add the following to the script:\n$ [ -f /usr/share/bash-completion/bash_completion ] \u0026amp;\u0026amp; . /usr/share/bash-completion/bash_completion $ source \u0026lt;(kubectl completion bash)   Run kubeadm init to create the master node:\n$ kubeadm init \\ --pod-network-cidr=$pod_network_cidr \\ --apiserver-advertise-address=$ip_addr \\ --ignore-preflight-errors=Swap \u0026gt; /tmp/kubeadm-init.out 2\u0026gt;\u0026amp;1   Log in to the terminal with YOUR_USERID:YOUR_GROUP. Then set up the ~/.bashrc similar to steps 1 to 3 with YOUR_USERID:YOUR_GROUP.\n Note that from now on we will be using YOUR_USERID:YOUR_GROUP to execute any kubectl commands and not root.\n   Set up YOUR_USERID:YOUR_GROUP to access the Kubernetes cluster:\n$ mkdir -p $HOME/.kube $ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config $ sudo chown $(id -u):$(id -g) $HOME/.kube/config   Verify that YOUR_USERID:YOUR_GROUP is set up to access the Kubernetes cluster using the kubectl command:\n$ kubectl get nodes  Note: At this step, the node is not in ready state as we have not yet installed the pod network add-on. After the next step, the node will show status as Ready.\n   Install a pod network add-on (flannel) so that your pods can communicate with each other.\n Note: If you are using a different cidr block than 10.244.0.0/16, then download and update kube-flannel.yml with the correct cidr address before deploying into the cluster:\n $ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.13.0/Documentation/kube-flannel.yml   Verify that the master node is in Ready status:\n$ kubectl get nodes For example:\nNAME STATUS ROLES AGE VERSION mymasternode Ready master 8m26s v1.23.6 or:\n$ kubectl get pods -n kube-system For example:\nNAME READY STATUS RESTARTS AGE pod/coredns-86c58d9df4-58p9f 1/1 Running 0 3m59s pod/coredns-86c58d9df4-mzrr5 1/1 Running 0 3m59s pod/etcd-mymasternode 1/1 Running 0 3m4s pod/kube-apiserver-node 1/1 Running 0 3m21s pod/kube-controller-manager-mymasternode 1/1 Running 0 3m25s pod/kube-flannel-ds-amd64-6npx4 1/1 Running 0 49s pod/kube-proxy-4vsgm 1/1 Running 0 3m59s pod/kube-scheduler-mymasternode 1/1 Running 0 2m58s   To schedule pods on the master node, taint the node:\n$ kubectl taint nodes --all node-role.kubernetes.io/master-   Congratulations! Your Kubernetes cluster environment is ready to deploy your Oracle WebCenter Sites domain.\nFor additional references on Kubernetes cluster setup, check the cheat sheet.\n3. Get scripts and images 3.1 Set up the code repository to deploy Oracle WebCenter Sites domains Follow these steps to set up the source code repository required to deploy Oracle WebCenter Sites domains.\n3.2 Get required Docker images and add them to your local registry   Obtain the Oracle WebLogic Operator image from the Oracle Container Registry:\na. For first time users, to pull an image from the Oracle Container Registry, navigate to https://container-registry.oracle.com and log in using the Oracle Single Sign-On (SSO) authentication service. If you do not already have SSO credentials, click the Sign In link at the top of the page to create them.\nUse the web interface to accept the Oracle Standard Terms and Restrictions for the Oracle software images that you intend to deploy. Your acceptance of these terms are stored in a database that links the software images to your Oracle Single Sign-On login credentials.\nTo obtain the image, log in to the Oracle Container Registry:\n$ docker login container-registry.oracle.com b. Pull the operator image:\n$ docker pull container-registry.oracle.com/middleware/weblogic-kubernetes-operator:4.0.6 $ docker tag container-registry.oracle.com/middleware/weblogic-kubernetes-operator:4.0.6 oracle/weblogic-kubernetes-operator:4.0.6   Build Oracle WebCenter Sites 12.2.1.4 Image by following Create or update an Image.\n  Copy all the above built and pulled images to all the nodes in your cluster or add to a Docker registry that your cluster can access.\n  3.3 Set Up the Code Repository to Deploy Oracle WebCenter Sites Domain Oracle WebCenter Sites domain deployment on Kubernetes leverages the Oracle WebLogic Kubernetes Operator infrastructure. For deploying the Oracle WebCenter Sites domain, you need to set up the deployment scripts as below:\n  Create a working directory to set up the source code.\n$ mkdir ${WORKDIR} $ cd ${WORKDIR}   Download the WebCenter Sites kubernetes deployment scripts from this repository and copy them in to WebLogic operator samples location.\n$ git clone https://github.com/oracle/fmw-kubernetes.git   You can now use the deployment scripts from \u0026lt;work directory\u0026gt;/fmw-kubernetes/OracleWebCenterSites to set up the WebCenter Sites domain as further described in this document.\nThis will be your home directory for runnning all the required scripts.\n$ cd ${WORKDIR}/fmw-kubernetes/OracleWebCenterSites 4. Install the WebLogic Kubernetes Operator 4.1 Prepare for the WebLogic Kubernetes Operator.   Create a namespace operator-ns for the operator WORKDIR for the Oracle WebCenter Sites operator code:\n$ kubectl create namespace operator-ns   Create a service account operator-sa for the operator in the operator’s namespace:\n$ kubectl create serviceaccount -n operator-ns operator-sa   4.2 Install the WebLogic Kubernetes Operator Use Helm to install and start the operator from the directory you just cloned:\n $ cd ${WORKDIR}/fmw-kubernetes/OracleWebCenterSites $ helm install weblogic-kubernetes-operator kubernetes/charts/weblogic-operator \\ --namespace operator-ns \\ --set image=oracle/weblogic-kubernetes-operator:4.0.6 \\ --set serviceAccount=operator-sa \\ --wait 4.3 Verify the WebLogic Kubernetes Operator   Verify that the operator’s pod is running by listing the pods in the operator’s namespace. You should see one for the operator:\n$ kubectl get pods -n operator-ns   Verify that the operator is up and running by viewing the operator pod\u0026rsquo;s logs:\n$ kubectl logs -n operator-ns -c weblogic-operator deployments/weblogic-operator   The WebLogic Kubernetes Operator v4.0.6 has been installed. Continue with the load balancer and Oracle WebCenter Sites domain setup.\n5. Install the Traefik (ingress-based) load balancer The Oracle WebLogic Server Kubernetes operator supports three load balancers: Traefik, Nginx, Apache webtier. Samples are provided in the documentation.\nThis Quick Start demonstrates how to install the Traefik ingress controller to provide load balancing for an Oracle WebCenter Sites domain.\n  Create a namespace for Traefik:\n$ kubectl create namespace traefik   Set up Helm for 3rd party services:\n$ helm repo add traefik https://helm.traefik.io/traefik   Install the Traefik operator in the traefik namespace with the provided sample values:\n$ cd ${WORKDIR}/fmw-kubernetes/OracleWebCenterSites $ helm install traefik traefik/traefik \\ --namespace traefik \\ --values kubernetes/charts/traefik/values.yaml \\ --set \u0026quot;kubernetes.namespaces={traefik}\u0026quot; \\ --set \u0026quot;service.type=NodePort\u0026quot; \\ --wait   6. Create and configure an Oracle WebCenter Sites domain 6.1 Prepare for an Oracle WebCenter Sites domain   Create a namespace that can host Oracle WebCenter Sites domains:\n$ kubectl create namespace wcsites-ns $ kubectl label namespace wcsites-ns weblogic-operator=enabled   Create Kubernetes secrets.\na. Create a Kubernetes secret for the domain in the same Kubernetes namespace as the domain. In this example, the username is weblogic, the password in Welcome1, and the namespace is wcsites-ns:\n$ cd ${WORKDIR}/fmw-kubernetes/OracleWebCenterSites/kubernetes/create-weblogic-domain-credentials $ ./create-weblogic-credentials.sh \\ -u weblogic \\ -p Welcome1 \\ -n wcsites-ns \\ -d wcsitesinfra \\ -s wcsitesinfra-domain-credentials b. Create a Kubernetes secret for the RCU in the same Kubernetes namespace as the domain:\n Schema user : WCS1 Schema password : Oradoc_db1 DB sys user password : Oradoc_db1 Domain name : wcsitesinfra Domain Namespace : wcsites-ns Secret name : wcsitesinfra-rcu-credentials  $ cd ${WORKDIR}/fmw-kubernetes/OracleWebCenterSites/kubernetes/create-rcu-credentials $ ./create-rcu-credentials.sh \\ -u WCS1 \\ -p Oradoc_db1 \\ -a sys \\ -q Oradoc_db1 \\ -d wcsitesinfra \\ -n wcsites-ns \\ -s wcsitesinfra-rcu-credentials   Create the Kubernetes persistence volume and persistence volume claim.\na. Create the Oracle WebCenter Sites domain home directory. Determine if a user already exists on your host system with uid:gid of 1000:\n$ sudo getent passwd 1000 If this command returns a username (which is the first field), you can skip the following useradd command. If not, create the oracle user with useradd:\n$ sudo useradd -u 1000 -g 1000 oracle Create the directory that will be used for the Oracle WebCenter Sites domain home:\n$ sudo mkdir /scratch/K8SVolume $ sudo chown -R 1000:1000 /scratch/K8SVolume b. Update create-pv-pvc-inputs.yaml with the following values:\n baseName: domain domainUID: wcsitesinfra namespace: wcsites-ns weblogicDomainStoragePath: /scratch/K8SVolume  $ cd ${WORKDIR}/fmw-kubernetes/OracleWebCenterSites/kubernetes/create-weblogic-domain-pv-pvc $ cp create-pv-pvc-inputs.yaml create-pv-pvc-inputs.yaml.orig $ sed -i -e \u0026quot;s:baseName\\: weblogic-sample:baseName\\: domain:g\u0026quot; create-pv-pvc-inputs.yaml $ sed -i -e \u0026quot;s:domainUID\\::domainUID\\: wcsitesinfra:g\u0026quot; create-pv-pvc-inputs.yaml $ sed -i -e \u0026quot;s:namespace\\: default:namespace\\: wcsites-ns:g\u0026quot; create-pv-pvc-inputs.yaml $ sed -i -e \u0026quot;s:#weblogicDomainStoragePath\\: /scratch/K8SVolume:weblogicDomainStoragePath\\: /scratch/K8SVolume:g\u0026quot; create-pv-pvc-inputs.yaml c. Run the create-pv-pvc.sh script to create the PV and PVC configuration files:\n$ ./create-pv-pvc.sh -i create-pv-pvc-inputs.yaml -o output d. Create the PV and PVC using the configuration files created in the previous step:\n$ kubectl create -f output/pv-pvcs/wcsitesinfra-domain-pv.yaml $ kubectl create -f output/pv-pvcs/wcsitesinfra-domain-pvc.yaml   Install and configure the database for the Oracle WebCenter Sites domain.\nThis step is required only when a standalone database is not already set up and you want to use the database in a container.\nThe Oracle Database Docker images are supported only for non-production use. For more details, see My Oracle Support note: Oracle Support for Database Running on Docker (Doc ID 2216342.1). For production, it is suggested to use a standalone database. This example provides steps to create the database in a container.\n   Now the environment is ready to start the Oracle WebCenter Sites domain creation.\n6.2 Create an Oracle WebCenter Sites domain   The sample scripts for Oracle WebCenter Sites domain deployment are available at \u0026lt;weblogic-kubernetes-operator-project\u0026gt;/kubernetes/create-wcsites-domain. You must edit create-domain-inputs.yaml (or a copy of it) to provide the details for your domain.\n  Run the create-domain.sh script to create a domain:\n$ cd ${WORKDIR}/fmw-kubernetes/OracleWebCenterSites/kubernetes/create-wcsites-domain/domain-home-on-pv/ $ ./create-domain.sh -i create-domain-inputs.yaml -o output   Create a Kubernetes domain object:\nOnce the create-domain.sh is successful, it generates the output/weblogic-domains/wcsitesinfra/domain.yaml that you can use to create the Kubernetes resource domain, which starts the domain and servers:\n$ cd ${WORKDIR}/fmw-kubernetes/OracleWebCenterSites/kubernetes/create-wcsites-domain/domain-home-on-pv $ kubectl create -f output/weblogic-domains/wcsitesinfra/domain.yaml   Verify that the Kubernetes domain object named wcsitesinfra is created:\n$ kubectl get domain -n wcsites-ns NAME AGE wcsitesinfra 3m18s   Once you create the domain, introspect pod is created. This inspects the domain home and then starts the wcsitesinfra-adminserver pod. Once the wcsitesinfra-adminserver pod starts successfully, then the Managed Server pods are started in parallel. Watch the wcsites-ns namespace for the status of domain creation:\n$ kubectl get pods -n wcsites-ns -w   Verify that the Oracle WebCenter Sites domain server pods and services are created and in Ready state:\n$ kubectl get all -n wcsites-ns   6.3 Configure Traefik to access in Oracle WebCenter Sites domain services   Configure Traefik to manage ingresses created in the Oracle WebCenter Sites domain namespace (wcsites-ns):\n$ helm upgrade traefik traefik/traefik \\ --reuse-values \\ --namespace traefik \\ --set \u0026quot;kubernetes.namespaces={traefik,wcsites-ns}\u0026quot; \\ --wait   Create an ingress for the domain in the domain namespace by using the sample Helm chart:\n$ cd ${WORKDIR}/fmw-kubernetes/OracleWebCenterSites $ helm install wcsitesinfra-ingress kubernetes/create-wcsites-domain/ingress-per-domain \\ --namespace wcsites-ns \\ --values kubernetes/create-wcsites-domain/ingress-per-domain/values.yaml \\ --set \u0026quot;traefik.hostname=$(hostname -f)\u0026quot; \\   Verify the created ingress per domain details:\n$ kubectl describe ingress wcsitesinfra-ingress -n wcsites-ns   6.4 Verify that you can access the Oracle WebCenter Sites domain URL   Get the LOADBALANCER_HOSTNAME for your environment:\nexport LOADBALANCER_HOSTNAME=$(hostname -f)   The following URLs are available for Oracle WebCenter Sites domains of domain type wcsitesinfra:\nCredentials: username: weblogic password: Welcome1\nhttp://${LOADBALANCER_HOSTNAME}:30305/console http://${LOADBALANCER_HOSTNAME}:30305/em http://${LOADBALANCER_HOSTNAME}:30305/sites   "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/oracle-cloud/bastion/",
	"title": "Preparing the Bastion host",
	"tags": [],
	"description": "Running WebLogic Kubernetes Operator managed Oracle WebCenter Sites domains on OKE",
	"content": "STEP 1 : Create Public Security List Create Public Security List (bastion_public_sec_list) in same VCN as that of OKE Cluster for Bastion Node\n Ingress Rules as: (where 10.0.22.0/24 is the CIDR planned to be used for bastion subnet)  Egress as:   STEP 2 : Create Private Security List Create Private Security List (bastion_private_sec_list) in same VCN as that of OKE Cluster which will be added into Worker Node subnet.\n Ingress Rules as: (where 10.0.22.0/24 is the CIDR planned to be used for bastion subnet)  Egress Rules as:   STEP 3 : Create Route Table Create Route Table (oke-bastion-routetables) with below details which will be used for bastion subnet STEP 4 : Create Bastion Subnet Create Bastion Subnet with CIDR Block : 10.0.22.0/24 , RouteTable: oke-bastion-routetables (created in step 3) , Security List: bastion_public_sec_list ( created in Step 1) and DHCP Options : Default available STEP 5 : Add Private Security to Worker Subnet for bastion access Add the private security list (bastion_private_sec_list), created at Step 2 to Worker Subnet, so that bastion node can ssh to Worker Nodes STEP 6 : Create Bastion Node Create Bastion Node with Subnet as \u0026ldquo;bastion-subnet\u0026rdquo;, created at Step 4, Add the private security list (bastion_private_sec_list), created at Step 2 to Worker Subnet, so that bastion node can ssh to Worker Nodes\n Update Name for the instance, Chose the Operating System Image, Availability Domain and Instance Type  Select the Compartment, VCN and Subnet Compartment where Cluster is created. Select the regional bastion-subnet created at Step4. Make sure to click on \u0026ldquo;Assign a public IP address\u0026rdquo;.  Once the bastion is created as shown below   STEP 7 : Access Worker Node from bastion host a. Login to bastion host\nscp -i id_rsa id_rsa opc@\u0026lt;bastion-host-address\u0026gt;:/home/opc ssh -i id_rsa opc@\u0026lt;bastion-host-address\u0026gt; b. Place a copy of id_rsa in bastion node to access worker node\nssh -i id_rsa opc@10.0.1.5 More details refer: https://docs.cloud.oracle.com/en-us/iaas/Content/Resources/Assets/whitepapers/bastion-hosts.pdf\n"
},
{
	"uri": "/fmw-kubernetes/soa-domains/installguide/prepare-your-environment/",
	"title": "Prepare your environment",
	"tags": [],
	"description": "Prepare for creating Oracle SOA Suite domains, including required secrets creation, persistent volume and volume claim creation, database creation, and database schema creation.",
	"content": "To prepare your Oracle SOA Suite in Kubernetes environment, complete the following steps.\nRefer to the troubleshooting page to troubleshoot issues during the domain deployment process.\n   Set up your Kubernetes cluster\n  Install Helm\n  Get dependent images\n  Set up the code repository to deploy Oracle SOA Suite domains\n  Obtain the Oracle SOA Suite Docker image\n  Install the WebLogic Kubernetes Operator\n  Prepare the environment for Oracle SOA Suite domains\na. Create a namespace for an Oracle SOA Suite domain\nb. Create a persistent storage for an Oracle SOA Suite domain\nc. Create a Kubernetes secret with domain credentials\nd. Create a Kubernetes secret with the RCU credentials\ne. Configure access to your database\nf. Run the Repository Creation Utility to set up your database schemas\n  Create an Oracle SOA Suite domain\n  Set up your Kubernetes cluster Refer the official Kubernetes set up documentation to set up a production grade Kubernetes cluster.\nInstall Helm The operator uses Helm to create and deploy the necessary resources and then run the operator in a Kubernetes cluster. For Helm installation and usage information, see here.\nGet dependent images Obtain dependent images and add them to your local registry.\n  For first time users, to pull an image from the Oracle Container Registry, navigate to https://container-registry.oracle.com and log in using the Oracle Single Sign-On (SSO) authentication service. If you do not already have an SSO account, you can create an Oracle Account here.\nUse the web interface to accept the Oracle Standard Terms and Restrictions for the Oracle software images that you intend to deploy. Your acceptance of these terms are stored in a database that links the software images to your Oracle Single Sign-On login credentials.\nLog in to the Oracle Container Registry (container-registry.oracle.com) from your Docker client:\n$ docker login container-registry.oracle.com   Pull the operator image:\n$ docker pull ghcr.io/oracle/weblogic-kubernetes-operator:4.2.13   Set up the code repository to deploy Oracle SOA Suite domains Oracle SOA Suite domain deployment on Kubernetes leverages the WebLogic Kubernetes Operator infrastructure. To deploy an Oracle SOA Suite domain, you must set up the deployment scripts.\n  Create a working directory to set up the source code:\n$ mkdir $HOME/soa_25.1.2 $ cd $HOME/soa_25.1.2   Download the WebLogic Kubernetes Operator source code and Oracle SOA Suite Kubernetes deployment scripts from the SOA repository. Required artifacts are available at OracleSOASuite/kubernetes.\n$ git clone https://github.com/oracle/fmw-kubernetes.git $ export WORKDIR=$HOME/soa_25.1.2/fmw-kubernetes/OracleSOASuite/kubernetes   Obtain the Oracle SOA Suite Docker image The Oracle SOA Suite image with the latest bundle patch and required interim patches is prebuilt by Oracle and includes Oracle SOA Suite 12.2.1.4.0, the January Patch Set Update (PSU), and other fixes released with the Critical Patch Update (CPU) program. The Oracle Container Registry hosts container images based on Oracle Linux 8 (ol8). These are the only images supported for production deployments. Obtain the Oracle SOA Suite images using either of the following methods:\n  Download from Oracle Container Registry:\n  Log in to Oracle Container Registry, navigate to Middleware \u0026gt; soasuite_cpu and accept the license agreement if not already done.\n  Log in to the Oracle Container Registry (container-registry.oracle.com) from your Docker client:\n$ docker login container-registry.oracle.com   Pull the Oracle Linux 8 based images:\nFor example:\n$ docker pull container-registry.oracle.com/middleware/soasuite_cpu:12.2.1.4-jdk8-\u0026lt;ol8\u0026gt;-\u0026lt;TAG\u0026gt;     Download from My Oracle Support:\n  Download patch 37480757 for Oracle Linux 8 based container image from My Oracle Support (MOS).\n  Unzip the downloaded patch zip file.\n  Load the image archive using the docker load command.\nFor example:\n$ docker load \u0026lt; soasuite-12.2.1.4-jdk8-\u0026lt;ol8\u0026gt;-\u0026lt;TAG\u0026gt;.tar Loaded image: oracle/soasuite:12.2.1.4-jdk8-\u0026lt;ol8\u0026gt;-\u0026lt;TAG\u0026gt; $   Run the docker inspect command to verify that the downloaded image is the latest released image. The value of label com.oracle.weblogic.imagetool.buildid must match to a8ff92a6-fea6-4cc4-aba0-c1ef36fd8c18 for Oracle Linux 8 based container image.\nFor example:\n$ docker inspect --format=\u0026#39;{{ index .Config.Labels \u0026#34;com.oracle.weblogic.imagetool.buildid\u0026#34; }}\u0026#39; oracle/soasuite:12.2.1.4-jdk8-ol8-250115.095053 a8ff92a6-fea6-4cc4-aba0-c1ef36fd8c18 $     If you want to build and use an Oracle SOA Suite Docker image with any additional bundle patch or interim patches that are not part of the image obtained from My Oracle Support, then follow these steps to create the image.\n Note: The default Oracle SOA Suite image name used for Oracle SOA Suite domains deployment is soasuite:release-version. The image obtained must be tagged accordingly using the docker tag command. If you want to use a different name for the image, make sure to update the new image tag name in the create-domain-inputs.yaml file and also in other instances where the soasuite:release-version image name is used.\n Install the WebLogic Kubernetes Operator The WebLogic Kubernetes Operator supports the deployment of Oracle SOA Suite domains in the Kubernetes environment. Follow the below steps to install the operator.\n Note: Optionally, you can follow these steps to send the contents of the operator\u0026rsquo;s logs to Elasticsearch.\n In the following example commands to install the WebLogic Kubernetes Operator, opns is the namespace and op-sa is the service account created for the operator:\n$ kubectl create namespace opns $ kubectl create serviceaccount -n opns op-sa $ helm repo add weblogic-operator https://oracle.github.io/weblogic-kubernetes-operator/charts --force-update $ helm install weblogic-kubernetes-operator weblogic-operator/weblogic-operator --version 4.2.13 --namespace opns --set serviceAccount=op-sa --set \u0026quot;javaLoggingLevel=FINE\u0026quot; --wait This Helm release deploys the operator with the default behavior of managing Oracle SOA Suite domains in all Kubernetes namespaces with the label weblogic-operator=enabled.\nPrepare the environment for Oracle SOA Suite domains Create a namespace for an Oracle SOA Suite domain Create a Kubernetes namespace (for example, soans) for the domain unless you intend to use the default namespace. Label the namespace with weblogic-operator=enabled to manage the domain. Use the new namespace in the remaining steps in this section. For details, see Prepare to run a domain.\n$ kubectl create namespace soans $ kubectl label namespace soans weblogic-operator=enabled Create a persistent storage for an Oracle SOA Suite domain In the Kubernetes namespace you created, create the PV and PVC for the domain by running the create-pv-pvc.sh script. Follow the instructions for using the script to create a dedicated PV and PVC for the Oracle SOA Suite domain.\n  Review the configuration parameters for PV creation here. Based on your requirements, update the values in the create-pv-pvc-inputs.yaml file located at ${WORKDIR}/create-weblogic-domain-pv-pvc/. Sample configuration parameter values for an Oracle SOA Suite domain are:\n baseName: domain domainUID: soainfra namespace: soans weblogicDomainStorageType: HOST_PATH weblogicDomainStoragePath: /scratch/k8s_dir/SOA    Ensure that the path for the weblogicDomainStoragePath property exists and have the ownership for 1000:0. If not, you need to create it as follows:\n$ sudo mkdir /scratch/k8s_dir/SOA $ sudo chown -R 1000:0 /scratch/k8s_dir/SOA   Run the create-pv-pvc.sh script:\n$ cd ${WORKDIR}/create-weblogic-domain-pv-pvc $ ./create-pv-pvc.sh -i create-pv-pvc-inputs.yaml -o output_soainfra   The create-pv-pvc.sh script will create a subdirectory pv-pvcs under the given /path/to/output-directory directory and creates two YAML configuration files for PV and PVC. Apply these two YAML files to create the PV and PVC Kubernetes resources using the kubectl create -f command:\n$ kubectl create -f output_soainfra/pv-pvcs/soainfra-domain-pv.yaml $ kubectl create -f output_soainfra/pv-pvcs/soainfra-domain-pvc.yaml   Create a Kubernetes secret with domain credentials Create the Kubernetes secrets username and password of the administrative account in the same Kubernetes namespace as the domain:\n $ cd ${WORKDIR}/create-weblogic-domain-credentials $ ./create-weblogic-credentials.sh -u weblogic -p Welcome1 -n soans -d soainfra -s soainfra-domain-credentials For more details, see this document.\nYou can check the secret with the kubectl get secret command.\nFor example:\n  Click here to see the sample secret description.   $ kubectl get secret soainfra-domain-credentials -o yaml -n soans apiVersion: v1 data: password: T3JhZG9jX2RiMQ== sys_password: T3JhZG9jX2RiMQ== sys_username: c3lz username: U09BMQ== kind: Secret metadata: creationTimestamp: \u0026quot;2020-06-25T14:08:16Z\u0026quot; labels: weblogic.domainName: soainfra weblogic.domainUID: soainfra managedFields: - apiVersion: v1 fieldsType: FieldsV1 fieldsV1: f:data: .: {} f:password: {} f:sys_password: {} f:sys_username: {} f:username: {} f:metadata: f:labels: .: {} f:weblogic.domainName: {} f:weblogic.domainUID: {} f:type: {} manager: kubectl operation: Update time: \u0026quot;2020-06-25T14:08:16Z\u0026quot; name: soainfra-rcu-credentials namespace: soans resourceVersion: \u0026quot;265386\u0026quot; selfLink: /api/v1/namespaces/soans/secrets/soainfra-rcu-credentials uid: 2d93941c-656b-43a4-8af2-78ca8be0f293 type: Opaque    Create a Kubernetes secret with the RCU credentials You also need to create a Kubernetes secret containing the credentials for the database schemas. When you create your domain, it will obtain the RCU credentials from this secret.\nUse the provided sample script to create the secret:\n$ cd ${WORKDIR}/create-rcu-credentials $ ./create-rcu-credentials.sh \\  -u SOA1 \\  -p Oradoc_db1 \\  -a sys \\  -q Oradoc_db1 \\  -d soainfra \\  -n soans \\  -s soainfra-rcu-credentials The parameter values are:\n -u username for schema owner (regular user), required. -p password for schema owner (regular user), required. -a username for SYSDBA user, required. -q password for SYSDBA user, required. -d domainUID. Example: soainfra -n namespace. Example: soans -s secretName. Example: soainfra-rcu-credentials  You can confirm the secret was created as expected with the kubectl get secret command.\nFor example:\n  Click here to see the sample secret description.   $ kubectl get secret soainfra-rcu-credentials -o yaml -n soans apiVersion: v1 data: password: T3JhZG9jX2RiMQ== sys_password: T3JhZG9jX2RiMQ== sys_username: c3lz username: U09BMQ== kind: Secret metadata: creationTimestamp: \u0026#34;2020-06-25T14:08:16Z\u0026#34; labels: weblogic.domainName: soainfra weblogic.domainUID: soainfra managedFields: - apiVersion: v1 fieldsType: FieldsV1 fieldsV1: f:data: .: {} f:password: {} f:sys_password: {} f:sys_username: {} f:username: {} f:metadata: f:labels: .: {} f:weblogic.domainName: {} f:weblogic.domainUID: {} f:type: {} manager: kubectl operation: Update time: \u0026#34;2020-06-25T14:08:16Z\u0026#34; name: soainfra-rcu-credentials namespace: soans resourceVersion: \u0026#34;265386\u0026#34; selfLink: /api/v1/namespaces/soans/secrets/soainfra-rcu-credentials uid: 2d93941c-656b-43a4-8af2-78ca8be0f293 type: Opaque    Configure access to your database Oracle SOA Suite domains require a database with the necessary schemas installed in them. The Repository Creation Utility (RCU) allows you to create those schemas. You must set up the database before you create your domain. There are no additional requirements added by running Oracle SOA Suite in Kubernetes; the same existing requirements apply.\nFor production deployments, you must set up and use the standalone (non-container) based database running outside of Kubernetes.\nBefore creating a domain, you will need to set up the necessary schemas in your database.\nRun the Repository Creation Utility to set up your database schemas Create schemas The RCU pod requires that you create a secret in the same namespace as the RCU pod that contains the database\u0026rsquo;s SYSDBA username and password in its sys_username and sys_password fields, and also contains a password of your choice for RCU schemas in its password field.\nFor example:\n$ kubectl -n default create secret generic oracle-rcu-secret \\  --from-literal=\u0026#39;sys_username=sys\u0026#39; \\  --from-literal=\u0026#39;sys_password=MY_SYS_PASSWORD\u0026#39; \\  --from-literal=\u0026#39;password=MY_RCU_SCHEMA_PASSWORD\u0026#39; To create the database schemas for Oracle SOA Suite, run the create-rcu-schema.sh script.\nFor example:\n$ cd ${WORKDIR}/create-rcu-schema $ ./create-rcu-schema.sh -h usage: ./create-rcu-schema.sh -s \u0026lt;schemaPrefix\u0026gt; [-t \u0026lt;schemaType\u0026gt;] [-d \u0026lt;dburl\u0026gt;] [-n \u0026lt;namespace\u0026gt;] [-c \u0026lt;credentialsSecretName\u0026gt;] [-p \u0026lt;docker-store\u0026gt;] [-i \u0026lt;image\u0026gt;] [-u \u0026lt;imagePullPolicy\u0026gt;] [-o \u0026lt;rcuOutputDir\u0026gt;] [-r \u0026lt;customVariables\u0026gt;] [-l \u0026lt;timeoutLimit\u0026gt;] [-h] -s RCU Schema Prefix (required) -t RCU Schema Type (optional) (supported values: osb,soa,soaosb) -d RCU Oracle Database URL (optional) (default: oracle-db.default.svc.cluster.local:1521/devpdb.k8s) -n Namespace for RCU pod (optional) (default: default) -c Name of credentials secret (optional) (default: oracle-rcu-secret) Must contain SYSDBA username at key \u0026#39;sys_username\u0026#39;, SYSDBA password at key \u0026#39;sys_password\u0026#39;, and RCU schema owner password at key \u0026#39;password\u0026#39;. -p OracleSOASuite ImagePullSecret (optional) (default: none) -i OracleSOASuite Image (optional) (default: soasuite:release-version) -u OracleSOASuite ImagePullPolicy (optional) (default: IfNotPresent) -o Output directory for the generated YAML file (optional) (default: rcuoutput) -r Comma-separated custom variables in the format variablename=value (optional) (default: none) -l Timeout limit in seconds (optional) (default: 300) -h Help NOTE: The c, p, i, u, and o arguments are ignored if an RCU pod is already running in the namespace. $ ./create-rcu-schema.sh \\  -s SOA1 \\  -t soaosb \\  -d oracle-db.default.svc.cluster.local:1521/devpdb.k8s \\  -n default \\  -c oracle-rcu-secret \\  -i soasuite:12.2.1.4 \\  -r SOA_PROFILE_TYPE=SMALL,HEALTHCARE_INTEGRATION=NO For Oracle SOA Suite domains, the create-rcu-schema.sh script supports:\n domain types: soa, osb, and soaosb. You must specify one of these using the -t flag. For Oracle SOA Suite you must specify the Oracle SOA schema profile type using the -r flag. For example, -r SOA_PROFILE_TYPE=SMALL. Supported values for SOA_PROFILE_TYPE are SMALL, MED, and LARGE.   Note: To use the LARGE schema profile type, make sure that the partitioning feature is enabled in the Oracle Database.\n Make sure that you maintain the association between the database schemas and the matching domain just like you did in a non-Kubernetes environment. There is no specific functionality provided to help with this.\nDrop schemas If you want to drop a schema, you can use the drop-rcu-schema.sh script.\nFor example:\n$ cd ${WORKDIR}/create-rcu-schema $ ./drop-rcu-schema.sh -h usage: ./drop-rcu-schema.sh -s \u0026lt;schemaPrefix\u0026gt; [-t \u0026lt;schemaType\u0026gt;] [-d \u0026lt;dburl\u0026gt;] [-n \u0026lt;namespace\u0026gt;] [-c \u0026lt;credentialsSecretName\u0026gt;] [-p \u0026lt;docker-store\u0026gt;] [-i \u0026lt;image\u0026gt;] [-u \u0026lt;imagePullPolicy\u0026gt;] [-o \u0026lt;rcuOutputDir\u0026gt;] [-r \u0026lt;customVariables\u0026gt;] [-h] -s RCU Schema Prefix (required) -t RCU Schema Type (optional) (supported values: osb,soa,soaosb) -d RCU Oracle Database URL (optional) (default: oracle-db.default.svc.cluster.local:1521/devpdb.k8s) -n Namespace for RCU pod (optional) (default: default) -c Name of credentials secret (optional) (default: oracle-rcu-secret) Must contain SYSDBA username at key \u0026#39;sys_username\u0026#39;, SYSDBA password at key \u0026#39;sys_password\u0026#39;, and RCU schema owner password at key \u0026#39;password\u0026#39;. -p OracleSOASuite ImagePullSecret (optional) (default: none) -i OracleSOASuite Image (optional) (default: soasuite:release-version) -u OracleSOASuite ImagePullPolicy (optional) (default: IfNotPresent) -o Output directory for the generated YAML file (optional) (default: rcuoutput) -r Comma-separated custom variables in the format variablename=value (optional) (default: none) -h Help NOTE: The c, p, i, u, and o arguments are ignored if an RCU pod is already running in the namespace. $ ./drop-rcu-schema.sh \\  -s SOA1 \\  -t soaosb \\  -d oracle-db.default.svc.cluster.local:1521/devpdb.k8s \\  -n default \\  -c oracle-rcu-secret \\  -r SOA_PROFILE_TYPE=SMALL,HEALTHCARE_INTEGRATION=NO For Oracle SOA Suite domains, the drop-rcu-schema.sh script supports:\n Domain types: soa, osb, and soaosb. You must specify one of these using the -t flag. For Oracle SOA Suite, you must specify the Oracle SOA schema profile type using the -r flag. For example, -r SOA_PROFILE_TYPE=SMALL. Supported values for SOA_PROFILE_TYPE are SMALL, MED, and LARGE.  Create an Oracle SOA Suite domain Now that you have your Docker images and you have created your RCU schemas, you are ready to create your domain. To continue, follow the instructions in Create Oracle SOA Suite domains.\n"
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/installguide/prepare-your-environment/",
	"title": "Prepare your environment",
	"tags": [],
	"description": "Prepare for creating Oracle WebCenter Sites domains, including required secrets creation, persistent volume and volume claim creation, database creation, and database schema creation.",
	"content": "Contents This document describes the steps to set up the environment that includes setting up of a Kubernetes cluster and setting up the WebLogic Operator including the database.\n Introduction Set Up your Kubernetes Cluster Build Oracle WebCenter Sites Image Pull Other Dependent Images Set Up the Code Repository to Deploy Oracle WebCenter Sites Domain Grant Roles and Clear Stale Resources Install the WebLogic Kubernetes Operator Configure NFS Server Prepare the Environment for the WebCenter Sites Domain Configure access to your database  Introduction Set Up your Kubernetes Cluster Refer the official Kubernetes set up documentation to set up a production grade Kubernetes cluster.\nAfter creating Kubernetes clusters, you can optionally:\n Create load balancers to direct traffic to backend domains. Configure Kibana and Elasticsearch for your operator logs.  Build Oracle WebCenter Sites Image Build Oracle WebCenter Sites 12.2.1.4 Image by following Create or update an Image.\nObtain the Oracle WebCenter Sites Docker Image The Oracle WebCenter Sites image with the latest bundle patch and required interim patches is prebuilt by Oracle and includes Oracle WebCenter Sites 12.2.1.4.0, the Latest Patch Set Update (PSU), and other fixes released with the Critical Patch Update (CPU) program. This is the only image supported for production deployments. Obtain the Oracle WebCenter Sites image using either of the following methods:\n  Download from Oracle Container Registry:\n  Log in to Oracle Container Registry, navigate to Middleware \u0026gt; webcentersites_cpu and accept the license agreement if not already done.\n  Log in to the Oracle Container Registry (container-registry.oracle.com) from your Docker client:\n$ docker login container-registry.oracle.com   Pull the image:\nFor example:\n$ docker pull container-registry.oracle.com/middleware/webcentersites_cpu:12.2.1.4-\u0026lt;TAG\u0026gt;     Download from My Oracle Support:\n  Download patch 35370108 from My Oracle Support (MOS).\n  Unzip the downloaded patch zip file.\n  Load the image archive using the docker load command.\nFor example:\n$ docker load \u0026lt; wcsites-230418.tar.gz Loaded image: oracle/wcsites:12.2.1.4-230418 $   Run the docker inspect command to verify that the downloaded image is the latest released image. The value of label com.oracle.weblogic.imagetool.buildid must match to dc4eb0d9-135f-46de-bae6-3c31bc63b5fb.\nFor example:\n$ docker inspect --format=\u0026#39;{{ index .Config.Labels \u0026#34;com.oracle.weblogic.imagetool.buildid\u0026#34; }}\u0026#39; oracle/wcsites:12.2.1.4-230418 dc4eb0d9-135f-46de-bae6-3c31bc63b5fb $      Note: The default Oracle WebCenter Sites image name used for Oracle WebCenter Sites domains deployment is oracle/wcsites:12.2.1.4. The image obtained must be tagged as oracle/wcsites:12.2.1.4 using the docker tag command. If you want to use a different name for the image, make sure to update the new image tag name in the create-domain-inputs.yaml file and also in other instances where the oracle/wcsites:12.2.1.4 image name is used.\n Pull Other Dependent Images Dependent images include WebLogic Kubernetes Operator, and Traefik. Pull these images and add them to your local registry:\n Pull these Docker images and re-tag them as shown:  To pull an image from the Oracle Container Registry, in a web browser, navigate to https://container-registry.oracle.com and log in using the Oracle Single Sign-On authentication service. If you do not already have SSO credentials, at the top of the page, click the Sign In link to create them.\nUse the web interface to accept the Oracle Standard Terms and Restrictions for the Oracle software images that you intend to deploy. Your acceptance of these terms are stored in a database that links the software images to your Oracle Single Sign-On login credentials.\nThen, pull these Docker images and re-tag them:\ndocker login https://container-registry.oracle.com (enter your Oracle email Id and password) This step is required once at every node to get access to the Oracle Container Registry. WebLogic Kubernetes Operator image:\n$ docker pull container-registry.oracle.com/middleware/weblogic-kubernetes-operator:4.0.6 $ docker tag container-registry.oracle.com/middleware/weblogic-kubernetes-operator:4.0.6 oracle/weblogic-kubernetes-operator:4.0.6 Copy all the above built and pulled images to all the nodes in your cluster or add to a Docker registry that your cluster can access.  NOTE: If you\u0026rsquo;re not running Kubernetes on your development machine, you\u0026rsquo;ll need to make the Docker image available to a registry visible to your Kubernetes cluster. Upload your image to a machine running Docker and Kubernetes as follows:\n# on your build machine $ docker save Image_Name:Tag \u0026gt; Image_Name-Tag.tar $ scp Image_Name-Tag.tar YOUR_USER@YOUR_SERVER:/some/path/Image_Name-Tag.tar # on the Kubernetes server $ docker load \u0026lt; /some/path/Image_Name-Tag.tar Set Up the Code Repository to Deploy Oracle WebCenter Sites Domain Oracle WebCenter Sites domain deployment on Kubernetes leverages the Oracle WebLogic Kubernetes Operator infrastructure. For deploying the Oracle WebCenter Sites domain, you need to set up the deployment scripts as below:\n  Create a working directory to setup the source code.\n$ mkdir \u0026lt;work directory\u0026gt; $ cd \u0026lt;work directory\u0026gt;   Download the WebCenter Sites kubernetes deployment scripts from this repository .\n$ git clone https://github.com/oracle/fmw-kubernetes.git   You can now use the deployment scripts from \u0026lt;work directory\u0026gt;/fmw-kubernetes/OracleWebCenterSites to set up the WebCenter Sites domain as further described in this document.\nThis will be your home directory for runnning all the required scripts.\n$ cd \u0026lt;work directory\u0026gt;/fmw-kubernetes/OracleWebCenterSites Clear Stale Resources   To confirm if there is already a WebLogic custom resource definition, execute the following command:\n$ kubectl get crd NAME CREATED AT domains.weblogic.oracle 2020-03-14T12:10:21Z   If you find any WebLogic custom resource definition, then delete it by executing the following command:\n$ kubectl delete crd domains.weblogic.oracle customresourcedefinition.apiextensions.k8s.io \u0026#34;domains.weblogic.oracle\u0026#34; deleted   Install the WebLogic Kubernetes Operator   Create a namespace for the WebLogic Kubernetes Operator:\n$ kubectl create namespace operator-ns namespace/operator-ns created NOTE: For this exercise we are creating a namespace called \u0026ldquo;operator-ns\u0026rdquo; (can be any name).\nYou can also use:\n domainUID/domainname as wcsitesinfra Domain namespace as wcsites-ns Operator namespace as operator-ns traefik namespace as traefik    Create a service account for the WebLogic Kubernetes Operator in the Operator\u0026rsquo;s namespace:\n$ kubectl create serviceaccount -n operator-ns operator-sa serviceaccount/operator-sa created   To be able to set up the log-stash and Elasticsearch after creating the domain, set the value of the field elkIntegrationEnabled to true in the file kubernetes/charts/weblogic-operator/values.yaml.\n  Use helm to install and start the WebLogic Kubernetes Operator from the downloaded repository:\n Helm install weblogic-operator\n $ helm install weblogic-kubernetes-operator kubernetes/charts/weblogic-operator --namespace operator-ns --set image=oracle/weblogic-kubernetes-operator:4.0.6 --set serviceAccount=operator-sa --wait NAME: weblogic-kubernetes-operator LAST DEPLOYED: Tue May 19 04:04:32 2020 NAMESPACE: opns STATUS: deployed REVISION: 1 TEST SUITE: None ``\n  To verify that the Operator\u0026rsquo;s pod is running, list the pods in the Operator\u0026rsquo;s namespace. You should see one for the WebLogic Kubernetes Operator:\n$ kubectl get pods -n operator-ns NAME READY STATUS RESTARTS AGE weblogic-operator-67df5fddc5-tlc4b 2/2 Running 0 3m15s   Then, check by viewing the Operator pod\u0026rsquo;s log as shown in the following sample log snippet:\n$ kubectl logs -n operator-ns -c weblogic-operator deployments/weblogic-operator Launching Oracle WebLogic Server Kubernetes Operator... Importing keystore /operator/internal-identity/temp/weblogic-operator.jks to /operator/internal-identity/temp/weblogic-operator.p12... Entry for alias weblogic-operator-alias successfully imported. Import command completed: 1 entries successfully imported, 0 entries failed or cancelled Warning: The -srcstorepass option is specified multiple times. All except the last one will be ignored. MAC verified OK % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 4249 0 2394 100 1855 6884 5334 --:--:-- --:--:-- --:--:-- 6899 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 5558 0 3028 100 2530 22704 18970 --:--:-- --:--:-- --:--:-- 22766 OpenJDK 64-Bit Server VM warning: Option MaxRAMFraction was deprecated in version 10.0 and will likely be removed in a future release. VM settings: Max. Heap Size (Estimated): 14.08G Using VM: OpenJDK 64-Bit Server VM {\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:53.438+0000\u0026#34;,\u0026#34;thread\u0026#34;:1,\u0026#34;fiber\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.TuningParametersImpl\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;update\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168593438,\u0026#34;message\u0026#34;:\u0026#34;Reloading tuning parameters from Operator\u0026#39;s config map\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;} {\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:53.944+0000\u0026#34;,\u0026#34;thread\u0026#34;:1,\u0026#34;fiber\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.Main\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;main\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168593944,\u0026#34;message\u0026#34;:\u0026#34;Oracle WebLogic Server Kubernetes Operator, version: 4.0.6, implementation: master.4d4fe0a, build time: 2019-11-15T21:19:56-0500\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;} {\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:53.972+0000\u0026#34;,\u0026#34;thread\u0026#34;:11,\u0026#34;fiber\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.Main\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;begin\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168593972,\u0026#34;message\u0026#34;:\u0026#34;Operator namespace is: operator-ns\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;} {\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:54.009+0000\u0026#34;,\u0026#34;thread\u0026#34;:11,\u0026#34;fiber\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.Main\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;begin\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168594009,\u0026#34;message\u0026#34;:\u0026#34;Operator target namespaces are: operator-ns\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;} {\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:54.013+0000\u0026#34;,\u0026#34;thread\u0026#34;:11,\u0026#34;fiber\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.Main\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;begin\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168594013,\u0026#34;message\u0026#34;:\u0026#34;Operator service account is: operator-sa\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;}\t{\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:54.031+0000\u0026#34;,\u0026#34;thread\u0026#34;:11,\u0026#34;fiber\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.helpers.HealthCheckHelper\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;performK8sVersionCheck\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168594031,\u0026#34;message\u0026#34;:\u0026#34;Verifying Kubernetes minimum version\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;}\t{\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:54.286+0000\u0026#34;,\u0026#34;thread\u0026#34;:11,\u0026#34;fiber\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.helpers.ClientPool\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;getApiClient\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168594286,\u0026#34;message\u0026#34;:\u0026#34;The Kuberenetes Master URL is set to https://10.96.0.1:443\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;}\t{\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:54.673+0000\u0026#34;,\u0026#34;thread\u0026#34;:11,\u0026#34;fiber\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.helpers.HealthCheckHelper\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;createAndValidateKubernetesVersion\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168594673,\u0026#34;message\u0026#34;:\u0026#34;Kubernetes version is: v1.13.7\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;}\t{\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:55.259+0000\u0026#34;,\u0026#34;thread\u0026#34;:12,\u0026#34;fiber\u0026#34;:\u0026#34;engine-operator-thread-2-fiber-1\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.helpers.CrdHelper$CrdContext$CreateResponseStep\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;onSuccess\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168595259,\u0026#34;message\u0026#34;:\u0026#34;Create Custom Resource Definition: oracle.kubernetes.operator.calls.CallResponse@470b40c\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;}\t{\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:55.356+0000\u0026#34;,\u0026#34;thread\u0026#34;:16,\u0026#34;fiber\u0026#34;:\u0026#34;fiber-1-child-2\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.helpers.HealthCheckHelper\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;performSecurityChecks\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168595356,\u0026#34;message\u0026#34;:\u0026#34;Verifying that operator service account can access required operations on required resources in namespace operator-ns\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;}\t{\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:55.598+0000\u0026#34;,\u0026#34;thread\u0026#34;:18,\u0026#34;fiber\u0026#34;:\u0026#34;fiber-1-child-2\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.helpers.ConfigMapHelper$ScriptConfigMapContext$CreateResponseStep\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;onSuccess\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168595598,\u0026#34;message\u0026#34;:\u0026#34;Creating domain config map, operator-ns, for namespace: {1}.\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;}\t{\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:55.937+0000\u0026#34;,\u0026#34;thread\u0026#34;:21,\u0026#34;fiber\u0026#34;:\u0026#34;fiber-1\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;WARNING\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.utils.Certificates\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;getCertificate\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168595937,\u0026#34;message\u0026#34;:\u0026#34;Can\u0026#39;t read certificate at /operator/external-identity/externalOperatorCert\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\\njava.nio.file.NoSuchFileException: /operator/external-identity/externalOperatorCert\\n\\tat java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)\\n\\tat java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)\\n\\tat java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:116)\\n\\tat java.base/sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:215)\\n\\tat java.base/java.nio.file.Files.newByteChannel(Files.java:370)\\n\\tat java.base/java.nio.file.Files.newByteChannel(Files.java:421)\\n\\tat java.base/java.nio.file.Files.readAllBytes(Files.java:3205)\\n\\tat oracle.kubernetes.operator.utils.Certificates.getCertificate(Certificates.java:48)\\n\\tat oracle.kubernetes.operator.utils.Certificates.getOperatorExternalCertificateData(Certificates.java:39)\\n\\tat oracle.kubernetes.operator.rest.RestConfigImpl.getOperatorExternalCertificateData(RestConfigImpl.java:52)\\n\\tat oracle.kubernetes.operator.rest.RestServer.isExternalSslConfigured(RestServer.java:383)\\n\\tat oracle.kubernetes.operator.rest.RestServer.start(RestServer.java:199)\\n\\tat oracle.kubernetes.operator.Main.startRestServer(Main.java:353)\\n\\tat oracle.kubernetes.operator.Main.completeBegin(Main.java:198)\\n\\tat oracle.kubernetes.operator.Main$NullCompletionCallback.onCompletion(Main.java:701)\\n\\tat oracle.kubernetes.operator.work.Fiber.completionCheck(Fiber.java:475)\\n\\tat oracle.kubernetes.operator.work.Fiber.run(Fiber.java:448)\\n\\tat oracle.kubernetes.operator.work.ThreadLocalContainerResolver.lambda$wrapExecutor$0(ThreadLocalContainerResolver.java:87)\\n\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)\\n\\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\\n\\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\\n\\tat java.base/java.lang.Thread.run(Thread.java:834)\\n\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;} {\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:55.967+0000\u0026#34;,\u0026#34;thread\u0026#34;:21,\u0026#34;fiber\u0026#34;:\u0026#34;fiber-1\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.rest.RestServer\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;start\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168595967,\u0026#34;message\u0026#34;:\u0026#34;Did not start the external ssl REST server because external ssl has not been configured.\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;} {\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:57.910+0000\u0026#34;,\u0026#34;thread\u0026#34;:21,\u0026#34;fiber\u0026#34;:\u0026#34;fiber-1\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.rest.RestServer\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;start\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168597910,\u0026#34;message\u0026#34;:\u0026#34;Started the internal ssl REST server on https://0.0.0.0:8082/operator\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;}\t{\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:57.913+0000\u0026#34;,\u0026#34;thread\u0026#34;:21,\u0026#34;fiber\u0026#34;:\u0026#34;fiber-1\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.Main\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;markReadyAndStartLivenessThread\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168597913,\u0026#34;message\u0026#34;:\u0026#34;Starting Operator Liveness Thread\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;}   Configure NFS (Network File System) Server To configure NFS server, install the nfs-utils package preferably on Master node:\n$ sudo yum install nfs-utils To start the nfs-server service, and configure the service to start following a system reboot:\n$ sudo systemctl start nfs-server $ sudo systemctl enable nfs-server Create the directory you want to export as the NFS share, for example /scratch/K8SVolume:\n$ sudo mkdir -p /scratch/K8SVolume $ sudo chown -R 1000:1000 /scratch/K8SVolume host name or IP address of the NFS Server\nNote: Host name or IP address of the NFS Server and NFS Share path which is used when you create PV/PVC in further sections.\nPrepare the Environment for the WebCenter Sites Domain   Unless you would like to use the default namespace, create a Kubernetes namespace that can host one or more domains:\n$ kubectl create namespace wcsites-ns namespace/wcsites-ns created $ kubectl label namespace wcsites-ns weblogic-operator=enabled   Create Kubernetes secrets:\na. Using the create-weblogic-credentials script, create a Kubernetes secret that contains the user name and password for the domain in the same Kubernetes namespace as the domain:\nOutput:\n$ sh kubernetes/create-weblogic-domain-credentials/create-weblogic-credentials.sh \\  -u weblogic -p Welcome1 -n wcsites-ns \\  -d wcsitesinfra -s wcsitesinfra-domain-credentials secret/wcsitesinfra-domain-credentials created secret/wcsitesinfra-domain-credentials labeled The secret wcsitesinfra-domain-credentials has been successfully created in the wcsites-ns namespace. Where:\n* weblogic is the weblogic username * Welcome1 is the weblogic password * wcsitesinfra is the domain name * wcsites-ns is the domain namespace * wcsitesinfra-domain-credentials is the secret name  Note: You can inspect the credentials as follows:\n$ kubectl get secret wcsitesinfra-domain-credentials -o yaml -n wcsites-ns b. Create a Kubernetes secret for the Repository Configuration Utility (user name and password) using the create-rcu-credentials.sh script in the same Kubernetes namespace as the domain:\nOutput:\n$ sh kubernetes/create-rcu-credentials/create-rcu-credentials.sh \\  -u WCS1 -p Oradoc_db1 -a sys -q Oradoc_db1 -n wcsites-ns \\  -d wcsitesinfra -s wcsitesinfra-rcu-credentials secret/wcsitesinfra-rcu-credentials created secret/wcsitesinfra-rcu-credentials labeled The secret wcsitesinfra-rcu-credentials has been successfully created in the wcsites-ns namespace. Where:\n* WCS1 is the schema user * Oradoc_db1 is the schema password * Oradoc_db1 is the database SYS users password * wcsitesinfra is the domain name * wcsites-ns is the domain namespace * wcsitesinfra-rcu-credentials is the secret name  Note: You can inspect the credentials as follows:\n$ kubectl get secret wcsitesinfra-rcu-credentials -o yaml -n wcsites-ns   Create a Kubernetes PV and PVC (Persistent Volume and Persistent Volume Claim):\na. Update the kubernetes/create-wcsites-domain/utils/create-wcsites-pv-pvc-inputs.yaml.\nReplace the token %NFS_SERVER% with the host name/IP of NFS Server created in Configure NFS Server section.\nIn the NFS Server, create a folder and grant permissions as given below:\n$ sudo rm -rf /scratch/K8SVolume/WCSites \u0026amp;\u0026amp; sudo mkdir -p /scratch/K8SVolume/WCSites \u0026amp;\u0026amp; sudo chown 1000:1000 /scratch/K8SVolume/WCSites Update the weblogicDomainStoragePath paramter with /scratch/K8SVolume/WCSites.\nb. Execute the create-pv-pvc.sh script to create the PV and PVC configuration files:\n$ sh kubernetes/create-weblogic-domain-pv-pvc/create-pv-pvc.sh \\  -i kubernetes/create-wcsites-domain/utils/create-wcsites-pv-pvc-inputs.yaml \\  -o kubernetes/create-wcsites-domain/output Input parameters being used export version=\u0026#34;create-weblogic-sample-domain-pv-pvc-inputs-v1\u0026#34; export baseName=\u0026#34;domain\u0026#34; export domainUID=\u0026#34;wcsitesinfra\u0026#34; export namespace=\u0026#34;wcsites-ns\u0026#34; export weblogicDomainStorageType=\u0026#34;HOST_PATH\u0026#34; export weblogicDomainStoragePath=\u0026#34;/scratch/K8SVolume/WCSites\u0026#34; export weblogicDomainStorageReclaimPolicy=\u0026#34;Retain\u0026#34; export weblogicDomainStorageSize=\u0026#34;10Gi\u0026#34; Generating kubernetes/create-wcsites-domain/output/pv-pvcs/wcsitesinfra-domain-pv.yaml Generating kubernetes/create-wcsites-domain/output/pv-pvcs/wcsitesinfra-domain-pvc.yaml The following files were generated: kubernetes/create-wcsites-domain/output/pv-pvcs/wcsitesinfra-domain-pv.yaml kubernetes/create-wcsites-domain/output/pv-pvcs/wcsitesinfra-domain-pvc.yaml Completed c. To create the PV and PVC, use kubectl create with output configuration files:\nOutput:\n$ kubectl create -f kubernetes/create-wcsites-domain/output/pv-pvcs/wcsitesinfra-domain-pv.yaml \\  -f kubernetes/create-wcsites-domain/output/pv-pvcs/wcsitesinfra-domain-pvc.yaml persistentvolume/wcsitesinfra-domain-pv created persistentvolumeclaim/wcsitesinfra-domain-pvc created Note: You can verify the PV and PV\u0026rsquo;s details as follows:\n$ kubectl describe pv wcsitesinfra-domain-pv -n wcsites-ns $ kubectl describe pvc wcsitesinfra-domain-pvc -n wcsites-ns   Label the nodes in the Kubernetes cluster for the targeted scheduling of the servers on particular nodes as needed:\nkubectl label node \u0026lt;node-name\u0026gt; name=abc Note: Here \u0026lt;node-name\u0026gt; is the node as displayed in the NAME field of kubectl get nodes command. abc is the label that we are defining. Label is a key, value pair and can be anything meaningful. The same should be used for nodeSelector.\nFor scheduling we can select these nodes based on the labels.\n  Configure access to your database Oracle WebCenter Sites domains require a database with the necessary schemas installed in them. The Repository Creation Utility (RCU) allows you to create those schemas. You must set up the database before you create your domain. There are no additional requirements added by running Oracle WebCenter Sites in Kubernetes; the same existing requirements apply.\nFor production deployments, you must set up and use the standalone (non-container) based database running outside of Kubernetes.\nBefore creating a domain, you will need to set up the necessary schemas in your database.\n"
},
{
	"uri": "/fmw-kubernetes/soa-domains/adminguide/deploying-composites/deploy-using-maven-ant/",
	"title": "Deploy using Maven and Ant",
	"tags": [],
	"description": "Deploy Oracle SOA Suite and Oracle Service Bus composite applications using the Maven and Ant based approach in an Oracle SOA Suite deployment.",
	"content": "Learn how to deploy Oracle SOA Suite and Oracle Service Bus composite applications using the Maven and Ant based approach in an Oracle SOA Suite in WebLogic Kubernetes Operator environment.\nBefore deploying composite applications, we need to create a Kubernetes pod in the same cluster where the Oracle SOA Suite domain is running, so that composite applications can be deployed using the internal Kubernetes Service for the Administration Server URL.\nPlace the SOA/Oracle Service Bus composite project at a share location (for example at /share/soa-deploy) mounted at /composites inside container. Make sure to provide oracle user ( uid: 1000 and gid: 0) permission to directory /share/soa-deploy, so that it is accessible and writable inside the container.\n$ sudo chown -R 1000:0 /share/soa-deploy Follow the steps in this section to create a container and then use it to deploy Oracle SOA Suite and Oracle Service Bus composite applications using Maven or Ant.\nCreate a composite deployment container Before creating a Kubernetes pod, make sure that the Oracle SOA Suite Docker image is available on a node, or you can create an image pull secret so that the pod can pull the Docker image on the host where it gets created.\n  Create an image pull secret to pull image soasuite:12.2.1.4 by the Kubernetes pod:\n$ kubectl create secret docker-registry image-secret -n soans --docker-server=your-registry.com --docker-username=xxxxxx --docker-password=xxxxxxx --docker-email=my@company.com   Create a PersistentVolume and PersistentVolumeClaim (soadeploy-pv.yaml and soadeploy-pvc.yaml) with sample composites for build and deploy placed at /share/soa-deploy.\na) Create a PersistentVolume with the sample provided (soadeploy-pv.yaml), which uses NFS (you can use hostPath or any other supported PV type):\napiVersion: v1 kind: PersistentVolume metadata: name: soadeploy-pv spec: storageClassName: soadeploy-storage-class capacity: storage: 10Gi accessModes: - ReadWriteMany # Valid values are Retain, Delete or Recycle persistentVolumeReclaimPolicy: Retain # hostPath: nfs: server: X.X.X.X path: \u0026quot;/share/soa-deploy\u0026quot; b) Apply the YAML:\n$ kubectl apply -f soadeploy-pv.yaml c) Create a PersistentVolumeClaim (soadeploy-pvc.yaml):\nkind: PersistentVolumeClaim apiVersion: v1 metadata: name: soadeploy-pvc namespace: soans spec: storageClassName: soadeploy-storage-class accessModes: - ReadWriteMany resources: requests: storage: 10Gi d) Apply the YAML:\n$ kubectl apply -f soadeploy-pvc.yaml   Create a composite deploy pod using soadeploy.yaml to mount the composites inside pod at /composites:\napiVersion: v1 kind: Pod metadata: labels: run: soadeploy name: soadeploy namespace: soans spec: imagePullSecrets: - name: image-secret containers: - image: soasuite:12.2.1.4 name: soadeploy env: - name: M2_HOME value: /u01/oracle/oracle_common/modules/org.apache.maven_3.2.5 command: [\u0026quot;/bin/bash\u0026quot;, \u0026quot;-c\u0026quot;, \u0026quot;echo 'export PATH=$PATH:$M2_HOME/bin' \u0026gt;\u0026gt; $HOME/.bashrc; sleep infinity\u0026quot;] imagePullPolicy: IfNotPresent volumeMounts: - name: mycomposite mountPath: /composites volumes: - name: mycomposite persistentVolumeClaim: claimName: soadeploy-pvc   Create the pod:\n$ kubectl apply -f soadeploy.yaml   Once the Kubernetes pod is deployed, exec into the pod to perform Maven/Ant based build and deploy:\n$ kubectl exec -it -n soans soadeploy -- bash   Maven based build and deploy  Note: Make sure to execute these commands inside the soadeploy pod.\n Set up proxy details for Maven to pull dependencies from the internet.\nIf your environment is not running behind a proxy, then skip this step. Otherwise, replace REPLACE-WITH-PROXY-HOST, REPLACE-WITH-PROXY-PORT and the value for nonProxyHosts attribute per your environment and create the settings.xml:\n$ mkdir $HOME/.m2 $ cat \u0026lt;\u0026lt;EOF \u0026gt; $HOME/.m2/settings.xml \u0026lt;settings\u0026gt; \u0026lt;proxies\u0026gt; \u0026lt;proxy\u0026gt; \u0026lt;active\u0026gt;true\u0026lt;/active\u0026gt; \u0026lt;protocol\u0026gt;http\u0026lt;/protocol\u0026gt; \u0026lt;host\u0026gt;REPLACE-WITH-PROXY-HOST\u0026lt;/host\u0026gt; \u0026lt;port\u0026gt;REPLACE-WITH-PROXY-PORT\u0026lt;/port\u0026gt; \u0026lt;nonProxyHosts\u0026gt;soainfra-cluster-soa-cluster|soainfra-adminserver\u0026lt;/nonProxyHosts\u0026gt; \u0026lt;/proxy\u0026gt; \u0026lt;/proxies\u0026gt; \u0026lt;/settings\u0026gt; EOF For Oracle SOA Suite composite applications   Set up the environment for Maven:\n#Perform Maven Sync $ cd /u01/oracle/oracle_common/plugins/maven/com/oracle/maven/oracle-maven-sync/12.2.1/ $ mvn install:install-file \\ -DpomFile=oracle-maven-sync-12.2.1.pom \\ -Dfile=oracle-maven-sync-12.2.1.jar #install Maven plugin $ mvn help:describe \\ -Dplugin=com.oracle.maven:oracle-maven-sync \\ -Ddetail #push libraries into internal repository $ mvn com.oracle.maven:oracle-maven-sync:push \\ -DoracleHome=/u01/oracle \\ -DtestingOnly=false $ mvn archetype:crawl \\ -Dcatalog=$HOME/.m2/archetype-catalog.xml \\ -DarchetypeArtifactId=oracle-soa-application \\ -DarchetypeVersion=12.2.1-4-0   Build the SOA Archive (SAR) for your sample deployment available at /composites/mavenproject/my-soa-app:\n$ cd /composites/mavenproject/my-soa-app $ mvn package The SAR will be generated at /composites/mavenproject/my-soa-app/my-project/target/sca_my-project.jar.\n  Deploy into the Oracle SOA Suite instance. For example, if the instance URL is http://soainfra-cluster-soa-cluster:7003 with credentials username: weblogic and password: Welcome1, enter the following commands:\n$ cd /composites/mavenproject/my-soa-app $ mvn pre-integration-test \\ -DoracleServerUrl=http://soainfra-cluster-soa-cluster:7003 \\ -DsarLocation=/composites/mavenproject/my-soa-app/my-project/target/sca_my-project.jar \\ -Doverwrite=true \\ -DforceDefault=true \\ -Dcomposite.partition=default \\ -Duser=weblogic -Dpassword=Welcome1   For Oracle Service Bus composite applications   Set up the environment for Maven:\n#Perform Maven Sync $ cd /u01/oracle/oracle_common/plugins/maven/com/oracle/maven/oracle-maven-sync/12.2.1/ $ mvn install:install-file \\ -DpomFile=oracle-maven-sync-12.2.1.pom \\ -Dfile=oracle-maven-sync-12.2.1.jar #push libraries into internal repository $ mvn com.oracle.maven:oracle-maven-sync:push \\ -DoracleHome=$ORACLE_HOME $ mvn archetype:crawl \\ -Dcatalog=$HOME/.m2/archetype-catalog.xml #Verify the mvn setup $ mvn help:describe \\ -DgroupId=com.oracle.servicebus.plugin \\ -DartifactId=oracle-servicebus-plugin \\ -Dversion=12.2.1-4-0   Build the Oracle Service Bus Archive (sbconfig.sbar)\nBuild sbconfig.sbar for your sample deployment, available at /composites/mavenproject/HelloWorldSB:\n$ cd /composites/mavenproject/HelloWorldSB $ mvn com.oracle.servicebus.plugin:oracle-servicebus-plugin:package The Oracle Service Bus Archive (SBAR) will be generated at /composites/mavenproject/HelloWorldSB/.data/maven/sbconfig.sbar.\n  Deploy the generated sbconfig.sbar into the Oracle Service Bus instance. For example, if the Administration URL is http://soainfra-adminserver:7001 with credentials username: weblogic and password: Welcome1, enter the following commands: :\n$ cd /composites/mavenproject/HelloWorldSB $ mvn pre-integration-test \\ -DoracleServerUrl=t3://soainfra-adminserver:7001 \\ -DoracleUsername=weblogic -DoraclePassword=Welcome1   Ant based build and deploy  Note: Make sure to execute these commands inside the soadeploy pod.\n For Oracle SOA Suite composite applications   Build an Oracle SOA Suite composite application using Ant. For example, if the composite application to be deployed is available at /composites/antproject/Project, enter the following commands:\n$ cd /u01/oracle/soa/bin $ ant -f ant-sca-package.xml \\ -DcompositeDir=/composites/antproject/Project \\ -DcompositeName=Project \\ -Drevision=0.1 The SOA Archive is generated at /composites/antproject/Project/deploy/sca_Project_rev0.1.jar, which will be used for deploying.\n  Deploy into the Oracle SOA Suite instance using Ant:\n$ cd /u01/oracle/soa/bin $ ant -f ant-sca-deploy.xml \\ -DserverURL=http://soainfra-cluster-soa-cluster:7003 \\ -DsarLocation=/composites/antproject/Project/deploy/sca_Project_rev0.1.jar \\ -Doverwrite=true \\ -Duser=weblogic -Dpassword=Welcome1   For Oracle Service Bus composite applications See Developing Services Using Oracle Service Bus to deploy Oracle Service Bus composite applications using Ant.\n"
},
{
	"uri": "/fmw-kubernetes/soa-domains/adminguide/enable-additional-url-access/",
	"title": "Enable additional URL access",
	"tags": [],
	"description": "Extend an existing ingress to enable additional application URL access for Oracle SOA Suite domains.",
	"content": "This section provides information about how to extend an existing ingress (Non-SSL and SSL termination) to enable additional application URL access for Oracle SOA Suite domains.\nThe ingress per domain created in the steps in Set up a load balancer exposes the application paths defined in template YAML files present at ${WORKDIR}/charts/ingress-per-domain/templates/.\nTo extend an existing ingress with additional application URL access:\n  Update the template YAML file at ${WORKDIR}/charts/ingress-per-domain/templates/ to define additional path rules.\nFor example, to extend an existing NGINX-based ingress with additional paths /path1 and /path2 of an Oracle SOA Suite cluster, update nginx-ingress-nonssl.yaml, nginx-ingress-ssl.yaml, or nginx-ingress-e2essl.yaml accordingly with additional paths:\n# Copyright (c) 2020, 2022, Oracle and/or its affiliates. # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. {{- if eq .Values.type \u0026quot;NGINX\u0026quot; }} {{- if (eq .Values.sslType \u0026quot;NONSSL\u0026quot;) }} --- apiVersion: networking.k8s.io/v1 kind: Ingress . . spec: rules: - host: '{{ .Values.nginx.hostname }}' http: paths: # Add new paths -- start - path: /path1 backend: service: name: '{{ .Values.wlsDomain.domainUID }}-cluster-{{ .Values.wlsDomain.soaClusterName | lower | replace \u0026quot;_\u0026quot; \u0026quot;-\u0026quot; }}' port: number: {{ .Values.wlsDomain.soaManagedServerPort }} - path: /path2 backend: service: name: '{{ .Values.wlsDomain.domainUID }}-cluster-{{ .Values.wlsDomain.soaClusterName | lower | replace \u0026quot;_\u0026quot; \u0026quot;-\u0026quot; }}' port: number: {{ .Values.wlsDomain.soaManagedServerPort }} # Add new paths -- end - path: /console backend: . . {{- end }}   Get the Helm release name for the ingress installed in your domain namespace:\n$ helm ls -n \u0026lt;domain_namespace\u0026gt; For example, in the soans namespace:\n$ helm ls -n soans Sample output, showing the Helm release name for a NGINX-based ingress as soa-nginx-ingress:\nNAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION soa-nginx-ingress soans 1 2021-02-17 13:42:03.252742314 +0000 UTC deployed ingress-per-domain-0.1.0 1.0 $   To extend the existing ingress per domain with additional paths defined in the template YAML, use the helm upgrade command:\n$ cd ${WORKDIR} $ helm upgrade \u0026lt;helm_release_for_ingress\u0026gt; \\ charts/ingress-per-domain \\ --namespace \u0026lt;domain_namespace\u0026gt; \\ --reuse-values  Note: helm_release_for_ingress is the ingress name used in the corresponding helm install command for the ingress installation.\n Sample command for a NGINX-based ingress soa-nginx-ingress in the soans namespace:\n$ cd ${WORKDIR} $ helm upgrade soa-nginx-ingress \\ charts/ingress-per-domain \\ --namespace soans \\ --reuse-values This will upgrade the existing ingress to pick up the additional paths updated in the template YAML.\n  Verify that additional paths are updated into the existing ingress.\na. Get the existing ingress deployed in the domain namespace:\n$ kubectl get ingress -n \u0026lt;domain_namespace\u0026gt; For example, in the soans namespace:\n$ kubectl get ingress -n soans Sample output, showing the existing ingress as soainfra-nginx:\nNAME CLASS HOSTS ADDRESS PORTS AGE soainfra-nginx \u0026lt;none\u0026gt; domain1.org 10.109.211.160 80, 443 xxd b. Describe the ingress object and verify that new paths are available and pointing to desired backends.\nSample command and output, showing path and backend details for /path1 and /path2:\n$ kubectl describe ingress soainfra-nginx -n soans|grep path /path1 soainfra-cluster-soa-cluster:7003 (172.17.0.19:7003,172.17.0.20:7003) /path2 soainfra-cluster-soa-cluster:7003 (172.17.0.19:7003,172.17.0.20:7003)   "
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/manage-wcportal-domains/monitoring-and-publishing-logs/",
	"title": "Monitor a domain and publish logs",
	"tags": [],
	"description": "Monitor Oracle WebCenter Portal and publishing logs to Elasticsearch.",
	"content": "  Monitor a WebCenter Portal domain  Monitor an WebCenter Portal instance using Prometheus and Grafana.\n Publish WebLogic Server logs into Elasticsearch  Publish WebLogic Server logs into Elasticsearch.\n "
},
{
	"uri": "/fmw-kubernetes/soa-domains/adminguide/configure-load-balancer/nginx/",
	"title": "NGINX",
	"tags": [],
	"description": "Configure the ingress-based NGINX load balancer for Oracle SOA Suite domains.",
	"content": "This section provides information about how to install and configure the ingress-based NGINX load balancer to load balance Oracle SOA Suite domain clusters. You can configure NGINX for non-SSL, SSL termination, and end-to-end SSL access of the application URL.\nFollow these steps to set up NGINX as a load balancer for an Oracle SOA Suite domain in a Kubernetes cluster:\nSee the official installation document for prerequisites.\n Install the NGINX load balancer for non-SSL and SSL termination configuration Generate secret for SSL access Install NGINX load balancer for end-to-end SSL configuration Configure NGINX to manage ingresses Verify domain application URL access Uninstall NGINX ingress Uninstall NGINX  To get repository information, enter the following Helm commands:\n$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx $ helm repo update Install the NGINX load balancer for non-SSL and SSL termination configuration   Deploy the ingress-nginx controller by using Helm on the domain namespace:\n$ helm install nginx-ingress -n soans \\  --set controller.service.type=NodePort \\  --set controller.admissionWebhooks.enabled=false \\  ingress-nginx/ingress-nginx    Click here to see the sample output.    NAME: nginx-ingress LAST DEPLOYED: Thu May 5 13:27:30 2022 NAMESPACE: soans STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The ingress-nginx controller has been installed. Get the application URL by running these commands: export HTTP_NODE_PORT=$(kubectl --namespace soans get services -o jsonpath=\u0026quot;{.spec.ports[0].nodePort}\u0026quot; nginx-ingress-ingress-nginx-controller) export HTTPS_NODE_PORT=$(kubectl --namespace soans get services -o jsonpath=\u0026quot;{.spec.ports[1].nodePort}\u0026quot; nginx-ingress-ingress-nginx-controller) export NODE_IP=$(kubectl --namespace soans get nodes -o jsonpath=\u0026quot;{.items[0].status.addresses[1].address}\u0026quot;) echo \u0026quot;Visit http://$NODE_IP:$HTTP_NODE_PORT to access your application via HTTP.\u0026quot; echo \u0026quot;Visit https://$NODE_IP:$HTTPS_NODE_PORT to access your application via HTTPS.\u0026quot; An example ingress that makes use of the controller: apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: example namespace: foo spec: ingressClassName: nginx rules: - host: www.example.com http: paths: - pathType: Prefix backend: service: name: exampleService port: number: 80 path: / # This section is only required if TLS is to be enabled for the ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the ingress, a secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls      Generate secret for SSL access   For secured access (SSL and E2ESSL) to the Oracle SOA Suite application, create a certificate and generate secrets:\n$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \u0026#34;/CN=domain1.org\u0026#34; $ kubectl -n soans create secret tls soainfra-tls-cert --key /tmp/tls1.key --cert /tmp/tls1.crt  Note: The value of CN is the host on which this ingress is to be deployed and secret name should be \u0026lt;domainUID\u0026gt;-tls-cert.\n   Install NGINX load balancer for end-to-end SSL configuration   Deploy the ingress-nginx controller by using Helm on the domain namespace:\n$ helm install nginx-ingress -n soans \\  --set controller.extraArgs.default-ssl-certificate=soans/soainfra-tls-cert \\  --set controller.service.type=NodePort \\  --set controller.admissionWebhooks.enabled=false \\  --set controller.extraArgs.enable-ssl-passthrough=true \\  ingress-nginx/ingress-nginx    Click here to see the sample output.   NAME: nginx-ingress LAST DEPLOYED: Thu May 5 12:21:50 2022 NAMESPACE: soans STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The ingress-nginx controller has been installed. Get the application URL by running these commands: export HTTP_NODE_PORT=$(kubectl --namespace soans get services -o jsonpath=\u0026#34;{.spec.ports[0].nodePort}\u0026#34; nginx-ingress-ingress-nginx-controller) export HTTPS_NODE_PORT=$(kubectl --namespace soans get services -o jsonpath=\u0026#34;{.spec.ports[1].nodePort}\u0026#34; nginx-ingress-ingress-nginx-controller) export NODE_IP=$(kubectl --namespace soans get nodes -o jsonpath=\u0026#34;{.items[0].status.addresses[1].address}\u0026#34;) echo \u0026#34;Visit http://$NODE_IP:$HTTP_NODE_PORTto access your application via HTTP.\u0026#34; echo \u0026#34;Visit https://$NODE_IP:$HTTPS_NODE_PORTto access your application via HTTPS.\u0026#34; An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: example namespace: foo spec: ingressClassName: nginx rules: - host: www.example.com http: paths: - pathType: Prefix backend: service: name: exampleService port: number: 80 path: / # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls      Check the status of the deployed ingress controller:\n$ kubectl --namespace soans get services | grep ingress-nginx-controller Sample output:\nnginx-ingress-ingress-nginx-controller NodePort 10.106.186.235 \u0026lt;none\u0026gt; 80:32125/TCP,443:31376/TCP 19m   Configure NGINX to manage ingresses   Choose an appropriate LOADBALANCER_HOSTNAME for accessing the Oracle SOA Suite domain application URLs.\n$ export LOADBALANCER_HOSTNAME=\u0026lt;LOADBALANCER_HOSTNAME\u0026gt; For example, if you are executing the commands from a master node terminal, where the master hostname is LOADBALANCER_HOSTNAME:\n$ export LOADBALANCER_HOSTNAME=$(hostname -f)   Create an ingress for the domain in the domain namespace by using the sample Helm chart. Here path-based routing is used for ingress. Sample values for default configuration are shown in the file ${WORKDIR}/charts/ingress-per-domain/values.yaml. By default, type is TRAEFIK , sslType is NONSSL, and domainType is soa. These values can be overridden by passing values through the command line or can be edited in the sample file values.yaml.\nIf needed, you can update the ingress YAML file to define more path rules (in section spec.rules.host.http.paths) based on the domain application URLs that need to be accessed. Update the template YAML file for the NGINX load balancer located at ${WORKDIR}/charts/ingress-per-domain/templates/nginx-ingress.yaml.\n Note: See here for all the configuration parameters.\n $ cd ${WORKDIR} $ helm install soa-nginx-ingress charts/ingress-per-domain \\  --namespace soans \\  --values charts/ingress-per-domain/values.yaml \\  --set \u0026#34;nginx.hostname=${LOADBALANCER_HOSTNAME}\u0026#34; \\  --set type=NGINX Sample output:\nNAME: soa-nginx-ingress LAST DEPLOYED: Fri Jul 24 09:34:03 2020 NAMESPACE: soans STATUS: deployed REVISION: 1 TEST SUITE: None   Install ingress-per-domain using Helm for SSL termination configuration:\n$ cd ${WORKDIR} $ helm install soa-nginx-ingress charts/ingress-per-domain \\  --namespace soans \\  --values charts/ingress-per-domain/values.yaml \\  --set \u0026#34;nginx.hostname=${LOADBALANCER_HOSTNAME}\u0026#34; \\  --set type=NGINX --set sslType=SSL Sample output:\nNAME: soa-nginx-ingress LAST DEPLOYED: Fri Jul 24 09:34:03 2020 NAMESPACE: soans STATUS: deployed REVISION: 1 TEST SUITE: None   Install ingress-per-domain using Helm for E2ESSL configuration.\n Note: To use the E2ESSL configuration, you must have created the Oracle SOA Suite domain with sslEnabled set to true. See Create Oracle SOA Suite domains.\n $ cd ${WORKDIR} $ helm install soa-nginx-ingress charts/ingress-per-domain \\  --namespace soans \\  --values charts/ingress-per-domain/values.yaml \\  --set type=NGINX --set sslType=E2ESSL Sample output:\nNAME: soa-nginx-ingress LAST DEPLOYED: Fri Jul 24 09:34:03 2020 NAMESPACE: soans STATUS: deployed REVISION: 1 TEST SUITE: None   For NONSSL access to the Oracle SOA Suite application, get the details of the services by the ingress:\n$ kubectl describe ingress soainfra-nginx -n soans    Click here to see the sample output of the services supported by the above deployed ingress.   Name: soainfra-nginx Namespace: soans Address: 100.111.150.225 Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) Rules: Host Path Backends ---- ---- -------- domain1.org /console soainfra-adminserver:7001 (10.244.0.45:7001) /em soainfra-adminserver:7001 (10.244.0.45:7001) /weblogic/ready soainfra-adminserver:7001 (10.244.0.45:7001) / soainfra-cluster-soa-cluster:7003 (10.244.0.46:7003,10.244.0.47:7003) /soa-infra soainfra-cluster-soa-cluster:7003 (10.244.0.46:7003,10.244.0.47:7003) /soa/composer soainfra-cluster-soa-cluster:7003 (10.244.0.46:7003,10.244.0.47:7003) /integration/worklistapp soainfra-cluster-soa-cluster:7003 (10.244.0.46:7003,10.244.0.47:7003) Annotations: \u0026lt;none\u0026gt; Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal CREATE 2m32s nginx-ingress-controller Ingress soans/soainfra-nginx Normal UPDATE 94s nginx-ingress-controller Ingress soans/soainfra-nginx      For SSL access to the Oracle SOA Suite application, get the details of the services by the above deployed ingress:\n$ kubectl describe ingress soainfra-nginx -n soans    Click here to see the sample output of the services supported by the above deployed ingress.    Name: soainfra-nginx Namespace: soans Address: 100.111.150.225 Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) TLS: soainfra-tls-cert terminates domain1.org Rules: Host Path Backends ---- ---- -------- domain1.org /console soainfra-adminserver:7001 (10.244.0.45:7001) /em soainfra-adminserver:7001 (10.244.0.45:7001) /weblogic/ready soainfra-adminserver:7001 (10.244.0.45:7001) / soainfra-cluster-soa-cluster:7003 (10.244.0.46:7003,10.244.0.47:7003) /soa-infra soainfra-cluster-soa-cluster:7003 (10.244.0.46:7003,10.244.0.47:7003) /soa/composer soainfra-cluster-soa-cluster:7003 (10.244.0.46:7003,10.244.0.47:7003) /integration/worklistapp soainfra-cluster-soa-cluster:7003 (10.244.0.46:7003,10.244.0.47:7003) Annotations: kubernetes.io/ingress.class: nginx nginx.ingress.kubernetes.io/configuration-snippet: more_set_input_headers \u0026quot;X-Forwarded-Proto: https\u0026quot;; more_set_input_headers \u0026quot;WL-Proxy-SSL: true\u0026quot;; nginx.ingress.kubernetes.io/ingress.allow-http: false Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal CREATE 3m47s nginx-ingress-controller Ingress soans/soainfra-nginx Normal UPDATE 3m25s nginx-ingress-controller Ingress soans/soainfra-nginx      For E2ESSL access to the Oracle SOA Suite application, get the details of the services by the above deployed ingress:\n$ kubectl describe ingress soainfra-nginx-e2essl -n soans    Click here to see the sample output of the services supported by the above deployed ingress.    Name: soainfra-nginx-e2essl-admin Namespace: soans Address: Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) TLS: soainfra-tls-cert terminates admin.org Rules: Host Path Backends ---- ---- -------- admin.org soainfra-adminserver-nginx-ssl:7002 (10.244.0.247:7002) Annotations: kubernetes.io/ingress.class: nginx meta.helm.sh/release-name: soa-nginx-ingress meta.helm.sh/release-namespace: soans nginx.ingress.kubernetes.io/ssl-passthrough: true Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 4s nginx-ingress-controller Scheduled for sync Name: soainfra-nginx-e2essl-soa Namespace: soans Address: Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) TLS: soainfra-tls-cert terminates soa.org Rules: Host Path Backends ---- ---- -------- soa.org / soainfra-cluster-soa-cluster:7004 (10.244.0.249:7004) Annotations: kubernetes.io/ingress.class: nginx meta.helm.sh/release-name: soa-nginx-ingress meta.helm.sh/release-namespace: soans nginx.ingress.kubernetes.io/ssl-passthrough: true Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 4s nginx-ingress-controller Scheduled for sync      Verify domain application URL access NONSSL configuration   Get the LOADBALANCER_NON_SSLPORT NodePort of NGINX using the command:\n$ LOADBALANCER_NON_SSLPORT=$(kubectl --namespace soans get services -o jsonpath=\u0026#34;{.spec.ports[0].nodePort}\u0026#34; nginx-ingress-ingress-nginx-controller) $ echo ${LOADBALANCER_NON_SSLPORT}   Verify that the Oracle SOA Suite domain application URLs are accessible through the LOADBALANCER_NON_SSLPORT:\nhttp://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_NON_SSLPORT}/weblogic/ready http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_NON_SSLPORT}/console http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_NON_SSLPORT}/em http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_NON_SSLPORT}/soa-infra http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_NON_SSLPORT}/soa/composer http://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_NON_SSLPORT}/integration/worklistapp   SSL configuration   Get the LOADBALANCER_SSLPORT NodePort of NGINX using the command:\n$ LOADBALANCER_SSLPORT=$(kubectl --namespace soans get services -o jsonpath=\u0026#34;{.spec.ports[1].nodePort}\u0026#34; nginx-ingress-ingress-nginx-controller) $ echo ${LOADBALANCER_SSLPORT}   Verify that the Oracle SOA Suite domain application URLs are accessible through the LOADBALANCER_SSLPORT:\nhttps://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_SSLPORT}/weblogic/ready https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_SSLPORT}/console https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_SSLPORT}/em https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_SSLPORT}/soa-infra https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_SSLPORT}/soa/composer https://${LOADBALANCER_HOSTNAME}:${LOADBALANCER_SSLPORT}/integration/worklistapp   E2ESSL configuration   To access the SOA Suite domain application URLs from a remote browser, update the browser host config file /etc/hosts (In Windows, C:\\Windows\\System32\\Drivers\\etc\\hosts) with the IP address of the host on which the ingress is deployed with below entries:\nX.X.X.X admin.domain.org X.X.X.X soa.domain.org X.X.X.X osb.domain.org  Note:\n The value of X.X.X.X is the host IP address on which this ingress is deployed. If you are behind any corporate proxy, make sure to update the browser proxy settings appropriately to access the host names updated /etc/hosts file.     Get the LOADBALANCER_SSLPORT NodePort of NGINX using the command:\n$ LOADBALANCER_SSLPORT=$(kubectl --namespace soans get services -o jsonpath=\u0026#34;{.spec.ports[1].nodePort}\u0026#34; nginx-ingress-ingress-nginx-controller) $ echo ${LOADBALANCER_SSLPORT}   Verify that the Oracle SOA Suite domain application URLs are accessible through LOADBALANCER_SSLPORT:\nhttps://admin.org:${LOADBALANCER_SSLPORT}/weblogic/ready https://admin.org:${LOADBALANCER_SSLPORT}/console https://admin.org:${LOADBALANCER_SSLPORT}/em https://soa.org:${LOADBALANCER_SSLPORT}/soa-infra https://soa.org:${LOADBALANCER_SSLPORT}/soa/composer https://soa.org:${LOADBALANCER_SSLPORT}/integration/worklistapp    Note: This is the default host name. If you have updated the host name in values.yaml, then use the updated values.\n Uninstall NGINX ingress Uninstall and delete the ingress-nginx deployment:\n$ helm delete soa-nginx-ingress -n soans Uninstall NGINX $ helm delete nginx-ingress -n soans "
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/manage-wcportal-domains/configure-load-balancer/nginx/",
	"title": "NGINX",
	"tags": [],
	"description": "Configure the ingress-based NGINX load balancer for an Oracle WebCenter Portal domain.",
	"content": "To load balance Oracle WebCenter Portal domain clusters, you can install the ingress-based NGINX load balancer and configure NGINX for non-SSL, SSL termination, and end-to-end SSL access of the application URL. Follow these steps to set up NGINX as a load balancer for an Oracle WebCenter Portal domain in a Kubernetes cluster:\nSee the official installation document for prerequisites.\n  Non-SSL and SSL termination\n Install the NGINX load balancer Configure NGINX to manage ingresses Verify non-SSL and SSL termination access    End-to-end SSL configuration\n Install the NGINX load balancer for End-to-end SSL Deploy tls to access the services Verify end-to-end SSL access    Non-SSL and SSL termination To get repository information, enter the following Helm commands:\n$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx $ helm repo update Install the NGINX load balancer   Deploy the ingress-nginx controller by using Helm on the domain namespace:\n$ helm install nginx-ingress ingress-nginx/ingress-nginx -n wcpns \\ --set controller.service.type=NodePort \\ --set controller.admissionWebhooks.enabled=false    Click here to see the sample output.    NAME: nginx-ingress LAST DEPLOYED: Tue Jan 12 21:13:54 2021 NAMESPACE: wcpns STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The ingress-nginx controller has been installed. Get the application URL by running these commands: export HTTP_NODE_PORT=30305 export HTTPS_NODE_PORT=$(kubectl --namespace wcpns get services -o jsonpath=\u0026quot;{.spec.ports[1].nodePort}\u0026quot; nginx-ingress-ingress-nginx-controller) export NODE_IP=$(kubectl --namespace wcpns get nodes -o jsonpath=\u0026quot;{.items[0].status.addresses[1].address}\u0026quot;) echo \u0026quot;Visit http://$NODE_IP:$HTTP_NODE_PORT to access your application via HTTP.\u0026quot; echo \u0026quot;Visit https://$NODE_IP:$HTTPS_NODE_PORT to access your application via HTTPS.\u0026quot; An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1beta1 kind: Ingress metadata: annotations: kubernetes.io/ingress.class: nginx name: example namespace: foo spec: rules: - host: www.example.com http: paths: - backend: serviceName: exampleService servicePort: 80 path: / # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls      Check the status of the deployed ingress controller:\n$ kubectl --namespace wcpns get services | grep ingress-nginx-controller Sample output:\nnginx-ingress-ingress-nginx-controller NodePort 10.101.123.106 \u0026lt;none\u0026gt; 80:30305/TCP,443:31856/TCP 2m12s   Configure NGINX to manage ingresses  Create an ingress for the domain in the domain namespace by using the sample Helm chart. Here path-based routing is used for ingress. Sample values for default configuration are shown in the file ${WORKDIR}/charts/ingress-per-domain/values.yaml. By default, type is TRAEFIK, tls is Non-SSL. You can override these values by passing values through the command line or edit them in the sample values.yaml file.   NOTE: This is not an exhaustive list of rules. You can enhance it based on the application URLs that need to be accessed externally.\n If needed, you can update the ingress YAML file to define more path rules (in section spec.rules.host.http.paths) based on the domain application URLs that need to be accessed. Update the template YAML file for the NGINX load balancer located at ${WORKDIR}/charts/ingress-per-domain/templates/nginx-ingress.yaml You can add new path rules like shown below .\n- path: /NewPathRule backend: serviceName: \u0026#39;Backend Service Name\u0026#39; servicePort: \u0026#39;Backend Service Port\u0026#39; $ cd ${WORKDIR} $ helm install wcp-domain-nginx charts/ingress-per-domain \\  --namespace wcpns \\  --values charts/ingress-per-domain/values.yaml \\  --set \u0026#34;nginx.hostname=$(hostname -f)\u0026#34; \\  --set type=NGINX ``` Sample output: ```bash NAME: wcp-domain-nginx LAST DEPLOYED: Fri Jul 24 09:34:03 2020 NAMESPACE: wcpns STATUS: deployed REVISION: 1 TEST SUITE: None ``` 1. For secured access (SSL) to the Oracle WebCenter Portal application, create a certificate and generate a Kubernetes secret: ```bash $ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \u0026#34;/CN=*\u0026#34; $ kubectl -n wcpns create secret tls wcp-domain-tls-cert --key /tmp/tls1.key --cert /tmp/tls1.crt   Install ingress-per-domain using Helm for SSL configuration:\n$ cd ${WORKDIR} $ helm install wcp-domain-nginx charts/ingress-per-domain \\  --namespace wcpns \\  --values charts/ingress-per-domain/values.yaml \\  --set \u0026#34;nginx.hostname=$(hostname -f)\u0026#34; \\  --set type=NGINX --set sslType=SSL   For non-SSL access to the Oracle WebCenter Portal application, get the details of the services by the ingress:\n$ kubectl describe ingress wcp-domain-nginx -n wcpns    Click here to see the sample output of the services supported by the above deployed ingress.    Name: wcp-domain-nginx Namespace: wcpns Address: 10.101.123.106 Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) Rules: Host Path Backends ---- ---- -------- * /webcenter wcp-domain-cluster-wcp-cluster:8888 (10.244.0.52:8888,10.244.0.53:8888) /console wcp-domain-adminserver:7001 (10.244.0.51:7001) /rsscrawl wcp-domain-cluster-wcp-cluster:8888 (10.244.0.53:8888) /rest wcp-domain-cluster-wcp-cluster:8888 (10.244.0.53:8888) /webcenterhelp wcp-domain-cluster-wcp-cluster:8888 (10.244.0.53:8888) /wsrp-tools wcp-domain-cluster-wcportlet-cluster:8889 (10.244.0.53:8889) /portalTools wcp-domain-cluster-wcportlet-cluster:8889 (10.244.0.53:8889) /em wcp-domain-adminserver:7001 (10.244.0.51:7001) Annotations: meta.helm.sh/release-name: wcp-domain-nginx meta.helm.sh/release-namespace: wcpns nginx.com/sticky-cookie-services: serviceName=wcp-domain-cluster-wcp-cluster srv_id expires=1h path=/; nginx.ingress.kubernetes.io/proxy-connect-timeout: 1800 nginx.ingress.kubernetes.io/proxy-read-timeout: 1800 nginx.ingress.kubernetes.io/proxy-send-timeout: 1800 Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 48m (x2 over 48m) nginx-ingress-controller Scheduled for sync      For SSL access to the Oracle WebCenter Portal application, get the details of the services by the above deployed ingress:\n$ kubectl describe ingress wcp-domain-nginx -n wcpns    Click here to see the sample output of the services supported by the above deployed ingress.   Name: wcp-domain-nginx Namespace: wcpns Address: 10.106.220.140 Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) TLS: wcp-domain-tls-cert terminates mydomain.com Rules: Host Path Backends ---- ---- -------- * /webcenter wcp-domain-cluster-wcp-cluster:8888 (10.244.0.43:8888,10.244.0.44:8888) /console wcp-domain-adminserver:7001 (10.244.0.42:7001) /rsscrawl wcp-domain-cluster-wcp-cluster:8888 (10.244.0.43:8888,10.244.0.44:8888) /webcenterhelp wcp-domain-cluster-wcp-cluster:8888 (10.244.0.43:8888,10.244.0.44:8888) /rest wcp-domain-cluster-wcp-cluster:8888 (10.244.0.43:8888,10.244.0.44:8888) /em wcp-domain-adminserver:7001 (10.244.0.42:7001) /wsrp-tools wcp-domain-cluster-wcportlet-cluster:8889 (10.244.0.43:8889,10.244.0.44:8889) /portalTools wcp-domain-cluster-wcportlet-cluster:8889 (10.244.0.43:8889,10.244.0.44:8889) Annotations: kubernetes.io/ingress.class: nginx meta.helm.sh/release-name: wcp-domain-nginx meta.helm.sh/release-namespace: wcpns nginx.ingress.kubernetes.io/affinity: cookie nginx.ingress.kubernetes.io/affinity-mode: persistent nginx.ingress.kubernetes.io/configuration-snippet: more_set_input_headers \u0026quot;X-Forwarded-Proto: https\u0026quot;; more_set_input_headers \u0026quot;WL-Proxy-SSL: true\u0026quot;; nginx.ingress.kubernetes.io/ingress.allow-http: false nginx.ingress.kubernetes.io/proxy-connect-timeout: 1800 nginx.ingress.kubernetes.io/proxy-read-timeout: 1800 nginx.ingress.kubernetes.io/proxy-send-timeout: 1800 nginx.ingress.kubernetes.io/session-cookie-expires: 172800 nginx.ingress.kubernetes.io/session-cookie-max-age: 172800 nginx.ingress.kubernetes.io/session-cookie-name: stickyid nginx.ingress.kubernetes.io/ssl-redirect: false Events: \u0026lt;none\u0026gt;      Verify non-SSL and SSL termination access Verify that the Oracle WebCenter Portal domain application URLs are accessible through the nginx NodePort LOADBALANCER-NODEPORT 30305:\nhttp://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-NODEPORT}/console http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-NODEPORT}/em http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-NODEPORT}/webcenter http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-NODEPORT}/rsscrawl http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-NODEPORT}/rest http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-NODEPORT}/webcenterhelp http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-NODEPORT}/wsrp-tools http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-NODEPORT}/portalTools Uninstall the ingress Uninstall and delete the ingress-nginx deployment:\n$ helm delete wcp-domain-nginx -n wcpns $ helm delete nginx-ingress -n wcpns End-to-end SSL configuration Install the NGINX load balancer for End-to-end SSL   For secured access (SSL) to the Oracle WebCenter Portal application, create a certificate and generate secrets:\n$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /tmp/tls1.key -out /tmp/tls1.crt -subj \u0026#34;/CN=domain1.org\u0026#34; $ kubectl -n wcpns create secret tls wcp-domain-tls-cert --key /tmp/tls1.key --cert /tmp/tls1.crt  Note: The value of CN is the host on which this ingress is to be deployed.\n   Deploy the ingress-nginx controller by using Helm on the domain namespace:\n$ helm install nginx-ingress -n wcpns \\  --set controller.extraArgs.default-ssl-certificate=wcpns/wcp-domain-tls-cert \\  --set controller.service.type=NodePort \\  --set controller.admissionWebhooks.enabled=false \\  --set controller.extraArgs.enable-ssl-passthrough=true \\  ingress-nginx/ingress-nginx    Click here to see the sample output.   NAME: nginx-ingress LAST DEPLOYED: Tue Sep 15 08:40:47 2020 NAMESPACE: wcpns STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The ingress-nginx controller has been installed. Get the application URL by running these commands: export HTTP_NODE_PORT=$(kubectl --namespace wcpns get services -o jsonpath=\u0026#34;{.spec.ports[0].nodePort}\u0026#34; nginx-ingress-ingress-nginx-controller) export HTTPS_NODE_PORT=$(kubectl --namespace wcpns get services -o jsonpath=\u0026#34;{.spec.ports[1].nodePort}\u0026#34; nginx-ingress-ingress-nginx-controller) export NODE_IP=$(kubectl --namespace wcpns get nodes -o jsonpath=\u0026#34;{.items[0].status.addresses[1].address}\u0026#34;) echo \u0026#34;Visit http://$NODE_IP:$HTTP_NODE_PORTto access your application via HTTP.\u0026#34; echo \u0026#34;Visit https://$NODE_IP:$HTTPS_NODE_PORTto access your application via HTTPS.\u0026#34; An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1beta1 kind: Ingress metadata: annotations: kubernetes.io/ingress.class: nginx name: example namespace: foo spec: rules: - host: www.example.com http: paths: - backend: serviceName: exampleService servicePort: 80 path: / # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls      Check the status of the deployed ingress controller:\n$ kubectl --namespace wcpns get services | grep ingress-nginx-controller Sample output:\nnginx-ingress-ingress-nginx-controller NodePort 10.96.177.215 \u0026lt;none\u0026gt; 80:32748/TCP,443:31940/TCP 23s   Deploy tls to access services   Deploy tls to securely access the services. Only one application can be configured with ssl-passthrough. A sample tls file for NGINX is shown below for the service wcp-domain-cluster-wcp-cluster and port 8889. All the applications running on port 8889 can be securely accessed through this ingress.\n  For each backend service, create different ingresses, as NGINX does not support multiple paths or rules with annotation ssl-passthrough. For example, for wcp-domain-adminserver and wcp-domain-cluster-wcp-cluster, different ingresses must be created.\n  As ssl-passthrough in NGINX works on the clusterIP of the backing service instead of individual endpoints, you must expose wcp-domain-cluster-wcp-cluster created by the operator with clusterIP.\nFor example:\na. Get the name of wcp-domain cluster service:\n$ kubectl get svc -n wcpns | grep wcp-domain-cluster-wcp-cluster Sample output:\nwcp-domain-cluster-wcp-cluster ClusterIP 10.102.128.124 \u0026lt;none\u0026gt; 8888/TCP,8889/TCP 62m   Deploy the secured ingress:\n$ cd ${WORKDIR}/charts/ingress-per-domain/tls $ kubectl create -f nginx-tls.yaml  Note: The default nginx-tls.yaml contains the backend for WebCenter Portal service with domainUID wcp-domain. You need to create similar tls configuration YAML files separately for each backend service.\n   Click here to check the content of the file nginx-tls.yaml    apiVersion: extensions/v1beta1 kind: Ingress metadata: name: wcpns-ingress namespace: wcpns annotations: kubernetes.io/ingress.class: nginx nginx.ingress.kubernetes.io/ssl-passthrough: \u0026quot;true\u0026quot; spec: tls: - hosts: - domain1.org secretName: wcp-domain-tls-cert rules: - host: domain1.org http: paths: - path: backend: serviceName: wcp-domain-cluster-wcp-cluster servicePort: 8889     Note: Host is the server on which this ingress is deployed.\n   Check the services supported by the ingress:\n$ kubectl describe ingress wcpns-ingress -n wcpns   Verify end-to-end SSL access Verify that the Oracle WebCenter Portal domain application URLs are accessible through the LOADBALANCER-SSLPORT 30233:\nhttps://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/webcenter https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/rsscrawl https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/webcenterhelp https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/rest https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/wsrp-tools https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/portalTools Uninstall ingress-nginx tls $ cd ${WORKDIR}/charts/ingress-per-domain/tls $ kubectl delete -f nginx-tls.yaml $ helm delete nginx-ingress -n wcpns "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/adminguide/configure-load-balancer/nginx/",
	"title": "NGINX",
	"tags": [],
	"description": "Configure the ingress-based NGINX load balancer for Oracle WebCenter Sites domains.",
	"content": "This section provides information about how to install and configure the ingress-based NGINX load balancer to load balance Oracle WebCenter Sites domain clusters. You can configure NGINX for access of the application URL.\nFollow these steps to set up NGINX as a load balancer for an Oracle WebCenter Sites domain in a Kubernetes cluster:\nSee the official installation document for prerequisites.\nAdd the Helm repos (if not added) Add following Helm repos\n$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx $ helm repo update Install the NGINX load balancer Here is the helm install command with the default value for http port.\n```bash $ helm install nginx-ingress -n wcsites-ns \\ --set controller.service.type=NodePort \\ --set controller.admissionWebhooks.enabled=false \\ --set controller.service.nodePorts.http=30305 \\ ingress-nginx/ingress-nginx ```  Create an Ingress for the Domain   Create an ingress for the domain in the domain namespace by using the sample Helm chart. Here path-based routing is used for ingress. Sample values for default configuration are shown in the file ${WORKDIR}/kubernetes/charts/ingress-per-domain/values.yaml. By default, type is TRAEFIK , sslType is NONSSL, and domainType is wcs. These values can be overridden by passing values through the command line or can be edited in the sample file values.yaml.\nIf needed, you can update the ingress YAML file to define more path rules (in section spec.rules.host.http.paths) based on the domain application URLs that need to be accessed. Update the template YAML file for the NGINX load balancer located at ${WORKDIR}/kubernetes/charts/ingress-per-domain/templates/nginx-ingress.yaml.\nFor detailed instructions about ingress, see this page.\nFor now, you can update the kubernetes/charts/ingress-per-domain/values.yaml with appropriate values.\n  Update the kubernetes/charts/ingress-per-domain/templates/nginx-ingress.yaml with the url routes to be load balanced.\nNOTE: This is not an exhaustive list of rules. You can enhance it based on the application urls that need to be accessed externally. These rules hold good for domain type wcs.\n  Install \u0026ldquo;ingress-per-domain\u0026rdquo; using helm.\n Helm Install ingress-per-domain\n $ helm install wcsitesinfra-ingress kubernetes/charts/ingress-per-domain \\  --namespace wcsites-ns \\  --values kubernetes/charts/ingress-per-domain/values.yaml \\  --set \u0026#34;nginx.hostname=$(hostname -f)\u0026#34; \\  --set type=NGINX NAME: wcsitesinfra-ingress LAST DEPLOYED: Fri July 9 00:18:50 2020 NAMESPACE: wcsites-ns STATUS: deployed REVISION: 1 TEST SUITE: None   To confirm that the load balancer noticed the new Ingress and is successfully routing to the domain\u0026rsquo;s server pods, you can send a request to the URL for the \u0026ldquo;WebLogic ReadyApp framework\u0026rdquo; which should return a HTTP 200 status code, as shown in the example below:\n  -bash-4.2$ curl -v http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT}/weblogic/ready * Trying 149.87.129.203... \u0026gt; GET http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT}/weblogic/ready HTTP/1.1 \u0026gt; User-Agent: curl/7.29.0 \u0026gt; Accept: */* \u0026gt; Proxy-Connection: Keep-Alive \u0026gt; host: $(hostname -f) \u0026gt; \u0026lt; HTTP/1.1 200 OK \u0026lt; Date: Sat, 14 Mar 2020 08:35:03 GMT \u0026lt; Vary: Accept-Encoding \u0026lt; Content-Length: 0 \u0026lt; Proxy-Connection: Keep-Alive \u0026lt; * Connection #0 to host localhost left intact Verify that You can Access the Domain URL After setting up the nginx loadbalancer, verify that the domain applications are accessible through the loadbalancer port 30305. Through load balancer (nginx port 30305), the following URLs are available for setting up domains of WebCenter Sites domain types:\nhttp://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT}/weblogic/ready http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT}/console http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT}/em http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT}/sites/version.jsp "
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/manage-wcportal-domains/monitoring-and-publishing-logs/publishing-logs/",
	"title": "Publish WebLogic Server logs into Elasticsearch",
	"tags": [],
	"description": "Publish WebLogic Server logs into Elasticsearch.",
	"content": "To publish WebLogic Server logs into Elasticsearch, you can configure your WebCenter Portal domain to use Fluentd, WebLogic Logging Exporter or Logstash.  Fluentd  Describes how to configure a WebCenter Portal domain to use Fluentd to send log information to Elasticsearch.\n WebLogic logging exporter  Use the WebLogic Logging Exporter to publish the WebLogic Server logs to Elasticsearch.\n Logstash  Describes how to configure a WebCenter Portal domain to use logstash and publish the WebLogic Server logs to Elasticsearch.\n "
},
{
	"uri": "/fmw-kubernetes/soa-domains/patch_and_upgrade/upgrade-operator-release/",
	"title": "Upgrade an operator release",
	"tags": [],
	"description": "Upgrade the WebLogic Kubernetes Operator release to a newer version.",
	"content": "To upgrade the WebLogic Kubernetes operator, use the helm upgrade command with new Helm chart and operator image. See the steps here to pull the operator image and set up the Oracle SOA Suite repository that contains the operator chart. To upgrade the operator run the following command:\n$ cd ${WORKDIR} $ helm upgrade \\ --reuse-values \\ --version 4.2.13 \\ --namespace weblogic-operator-namespace \\ --wait \\ weblogic-kubernetes-operator \\ weblogic-operator/weblogic-operator  Note: When the WebLogic Kubernetes Operator is upgraded from release version 3.2.1 to 3.3.0 or later, it may be expected that the Administration Server pod in the domain gets restarted.\n Post upgrade steps When you upgrade a 3.x operator to 4.0, the upgrade process creates a WebLogic Domain resource conversion webhook deployment and its associated resources in the same namespace. If the conversion webhook deployment already exists in another namespace, then a new conversion webhook deployment is not created. The webhook automatically and transparently upgrades the existing WebLogic Domains from the 3.x schema to the 4.0 schema. For more information, see WebLogic Domain resource conversion webhook.\nIf you have a single WebLogic Kubernetes Operator per Kubernetes cluster (most common use case), you can upgrade directly from any 3.x operator release to 4.2.13. The Helm chart for 4.2.13 automatically installs the schema conversion webhook.\nIf there is more than one WebLogic Kubernetes Operator in a single Kubernetes cluster:\n You must upgrade every operator to at least version 3.4.1 before upgrading any operator to 4.0.0. As the 4.0.x Helm chart also installs a singleton schema conversion webhook that is shared by all 4.0.x operators in the cluster, use the webhookOnly Helm chart option to install this webhook in its own namespace prior to installing any of the 4.0.0 operators, and also use the preserveWebhook Helm chart option with each operator to prevent an operator uninstall from uninstalling the shared webhook. The operator provides a utility that can be used to convert existing “v8” Domain YAML files to “v9”. Several Helm chart default values have been changed. If you upgrade 3.x installations using the --reuse-values option during the Helm upgrade, the installations will continue to use the values from their original installation.  If you are still using an older operator version (from 3.1.1) the T3 channel Kubernetes service name extension is changed from -external to -ext. If the Administration Server was configured to expose a T3 channel in your domain, then follow these steps to recreate the Kubernetes service (for T3 channel) with the new name -ext.\n Note: If these steps are not performed, then the domain restart using spec.serverStartPolicy fails to bring up the servers.\n   Get the existing Kubernetes service name for the T3 channel from the domain namespace. For example, if the domainUID is soainfra, and the Administration Server name is adminserver, then the service is:\nsoainfra-adminserver-external   Delete the existing Kubernetes service for T3 channel, so that operator 3.1.1 creates a new one:\n$ kubectl delete service \u0026lt;T3 channel service\u0026gt; --namespace \u0026lt;domain-namespace\u0026gt; For example, if the domainUID is soainfra, the Administration Server name is adminserver and domain namespace is soans, then the command is:\n$ kubectl delete service soainfra-adminserver-external --namespace soans   Now, the operator automatically creates a new Kubernetes service with -ext instead of -external:\nsoainfra-adminserver-ext "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/patch-and-upgrade/upgrade-operator-release/",
	"title": "Upgrade an operator release",
	"tags": [],
	"description": "Upgrade the WebLogic Kubernetes Operator release to a newer version.",
	"content": "These instructions apply to upgrading operators within the 4.x release family as additional versions are released.\nTo upgrade the Kubernetes operator, use the helm upgrade command. When upgrading the operator, the helm upgrade command requires that you supply a new Helm chart and image. For example:\n$ helm upgrade \\ --reuse-values \\ --set image=oracle/weblogic-kubernetes-operator:4.0.6 \\ --namespace weblogic-operator-namespace \\ --wait \\ weblogic-operator \\ kubernetes/charts/weblogic-operator "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/configure-design-console/using-the-design-console-with-nginx-ssl/",
	"title": "b. Using Design Console with NGINX(SSL)",
	"tags": [],
	"description": "Configure Design Console with NGINX(SSL).",
	"content": "Configure an NGINX ingress (SSL) to allow Design Console to connect to your Kubernetes cluster.\n  Prerequisites\n  Setup routing rules for the Design Console ingress\n  Create the ingress\n  Update the T3 channel\n  Restart the OIG Managed Server\n  Design Console client\na. Using an on-premises installed Design Console\nb. Using a container image for Design Console\n  Login to the Design Console\n  Prerequisites If you haven\u0026rsquo;t already configured an NGINX ingress controller (SSL) for OIG, follow Using an Ingress with NGINX (SSL).\nMake sure you know the master hostname and ingress port for NGINX before proceeding e.g https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}. Also make sure you know the Kubernetes secret for SSL that was generated e.g governancedomain-tls-cert.\nSetup routing rules for the Design Console ingress   Setup routing rules by running the following commands:\n$ cd $WORKDIR/kubernetes/design-console-ingress Edit values.yaml and ensure that tls: SSL is set. Change domainUID: and secretName: to match the values for your \u0026lt;domain_uid\u0026gt; and your SSL Kubernetes secret, for example:\n# Load balancer type. Supported values are: NGINX type: NGINX # Type of Configuration Supported Values are : NONSSL,SSL # tls: NONSSL tls: SSL # TLS secret name if the mode is SSL secretName: governancedomain-tls-cert # WLS domain as backend to the load balancer wlsDomain: domainUID: governancedomain oimClusterName: oim_cluster oimServerT3Port: 14002   Create the ingress   Run the following command to create the ingress:\n$ cd $WORKDIR $ helm install governancedomain-nginx-designconsole kubernetes/design-console-ingress --namespace oigns --values kubernetes/design-console-ingress/values.yaml The output will look similar to the following:\nNAME: governancedomain-nginx-designconsole \u0026lt;DATE\u0026gt; NAMESPACE: oigns STATUS: deployed REVISION: 1 TEST SUITE: None   Run the following command to show the ingress is created successfully:\n$ kubectl describe ing governancedomain-nginx-designconsole -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe ing governancedomain-nginx-designconsole -n oigns The output will look similar to the following:\nName: governancedomain-nginx-designconsole Namespace: oigns Address: Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) Rules: Host Path Backends ---- ---- -------- * governancedomain-cluster-oim-cluster:14002 (10.244.2.103:14002) Annotations: kubernetes.io/ingress.class: nginx meta.helm.sh/release-name: governancedomain-nginx-designconsole meta.helm.sh/release-namespace: oigns nginx.ingress.kubernetes.io/affinity: cookie nginx.ingress.kubernetes.io/configuration-snippet: more_set_input_headers \u0026quot;X-Forwarded-Proto: https\u0026quot;; more_set_input_headers \u0026quot;WL-Proxy-SSL: true\u0026quot;; nginx.ingress.kubernetes.io/enable-access-log: false nginx.ingress.kubernetes.io/ingress.allow-http: false nginx.ingress.kubernetes.io/proxy-buffer-size: 2000k Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 6s nginx-ingress-controller Scheduled for sync   Update the T3 channel   Log in to the WebLogic Console using https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/console.\n  Navigate to Environment, click Servers, and then select oim_server1.\n  Click Protocols, and then Channels.\n  Click the default T3 channel called T3Channel.\n  Click Lock and Edit.\n  Set the External Listen Address to the ingress controller hostname ${MASTERNODE-HOSTNAME}.\n  Set the External Listen Port to the ingress controller port ${MASTERNODE-PORT}.\n  Click Save.\n  Click Activate Changes.\n  Restart the OIG Managed Server Restart the OIG Managed Server for the above changes to take effect:\n$ cd $WORKDIR/kubernetes/domain-lifecycle $ ./restartServer.sh -s oim_server1 -d \u0026lt;domain_uid\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ cd $WORKDIR/kubernetes/domain-lifecycle ./restartServer.sh -s oim_server1 -d governancedomain -n oigns Make sure the \u0026lt;domain_uid\u0026gt;-oim-server1 has a READY status of 1/1 before continuing:\n$ kubectl get pods -n oigns | grep oim-server1 The output will look similar to the following:\ngovernancedomain-oim-server1 1/1 Running 0 8m Design Console Client It is possible to use Design Console from an on-premises install, or from a container image.\nUsing an on-premises installed Design Console The instructions below should be performed on the client where Design Console is installed.\n  Import the CA certificate into the java keystore\nIf in Generate SSL Certificate you requested a certificate from a Certificate Authority (CA), then you must import the CA certificate (e.g cacert.crt) that signed your certificate, into the java truststore used by Design Console.\nIf in Generate SSL Certificate you generated a self-signed certicate (e.g tls.crt), you must import the self-signed certificate into the java truststore used by Design Console.\nImport the certificate using the following command:\n$ keytool -import -trustcacerts -alias dc -file \u0026lt;certificate\u0026gt; -keystore $JAVA_HOME/jre/lib/security/cacerts where \u0026lt;certificate\u0026gt; is the CA certificate, or self-signed certicate.\n  Once complete follow Login to the Design Console.\n  Using a container image for Design Console Using Docker The Design Console can be run from a container using X windows emulation.\n  On the parent machine where the Design Console is to be displayed, run xhost +.\n  Find which worker node the \u0026lt;domain\u0026gt;-oim-server1 pod is running. For example:\n$ kubectl get pods -n oigns -o wide | grep governancedomain-oim-server1 The output will look similar to the following:\ngovernancedomain-oim-server1 1/1 Running 0 31m 10.244.2.98 worker-node2   On the worker node returned above e.g worker-node2, execute the following command to find the OIG container image name:\n$ docker images Then execute the following command to start a container to run Design Console:\n$ docker run -u root --name oigdcbase -it \u0026lt;image\u0026gt; bash For example:\n$ docker run -u root -it --name oigdcbase container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January\u0026#39;25\u0026gt; bash This will take you into a bash shell inside the container:\nbash-4.2#   Inside the container set the proxy, for example:\nbash-4.2# export https_proxy=http://proxy.example.com:80   Install the relevant X windows packages in the container:\nbash-4.2# yum install libXext libXrender libXtst   Execute the following outside the container to create a new Design Console image from the container:\n$ docker commit \u0026lt;container_name\u0026gt; \u0026lt;design_console_image_name\u0026gt; For example:\n$ docker commit oigdcbase oigdc   Exit the container bash session:\nbash-4.2# exit   Start a new container using the Design Console image:\n$ docker run --name oigdc -it oigdc /bin/bash This will take you into a bash shell for the container:\nbash-4.2#   Copy the Ingress CA certificate into the container\nIf in Generate SSL Certificate you requested a certificate from a Certificate Authority (CA), then you must copy the CA certificate (e.g cacert.crt) that signed your certificate, into the container\nIf in Generate SSL Certificate you generated a self-signed certicate (e.g tls.crt), you must copy the self-signed certificate into the container\nNote: You will have to copy the certificate over to the worker node where the oigdc image is created before running the following.\nRun the following command outside the container:\n$ cd \u0026lt;workdir\u0026gt;/ssl $ docker cp \u0026lt;certificate\u0026gt; \u0026lt;container_name\u0026gt;:/u01/jdk/jre/lib/security/\u0026lt;certificate\u0026gt; For example:\n$ cd /scratch/OIGK8S/ssl $ docker cp tls.crt oigdc:/u01/jdk/jre/lib/security/tls.crt   Import the certificate using the following command:\nbash-4.2# /u01/jdk/bin/keytool -import -trustcacerts -alias dc -file /u01/jdk/jre/lib/security/\u0026lt;certificate\u0026gt; -keystore /u01/jdk/jre/lib/security/cacerts For example:\nbash-4.2# /u01/jdk/bin/keytool -import -trustcacerts -alias dc -file /u01/jdk/jre/lib/security/tls.crt -keystore /u01/jdk/jre/lib/security/cacerts   In the container run the following to export the DISPLAY:\n$ export DISPLAY=\u0026lt;parent_machine_hostname:1\u0026gt;   Start the Design Console from the container:\nbash-4.2# cd idm/designconsole bash-4.2# sh xlclient.sh The Design Console login should be displayed. Now follow Login to the Design Console.\n  Using podman   On the parent machine where the Design Console is to be displayed, run xhost +.\n  Find which worker node the \u0026lt;domain\u0026gt;-oim-server1 pod is running. For example:\n$ kubectl get pods -n oigns -o wide | grep governancedomain-oim-server1 The output will look similar to the following:\ngovernancedomain-oim-server1 1/1 Running 0 19h 10.244.2.55 worker-node2 \u0026lt;none\u0026gt;   On the worker node returned above e.g worker-node2, execute the following command to find the OIG container image name:\n$ podman images Then execute the following command to start a container to run Design Console:\n$ podman run -u root --name oigdcbase -it \u0026lt;image\u0026gt; bash For example:\n$ podman run -u root -it --name oigdcbase container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January\u0026#39;25\u0026gt; bash This will take you into a bash shell inside the container:\nbash-4.2#   Inside the container set the proxy, for example:\nbash-4.2# export https_proxy=http://proxy.example.com:80   Install the relevant X windows packages in the container:\nbash-4.2# yum install libXext libXrender libXtst   Execute the following outside the container to create a new Design Console image from the container:\n$ podman commit \u0026lt;container_name\u0026gt; \u0026lt;design_console_image_name\u0026gt; For example:\n$ podman commit oigdcbase oigdc   Exit the container bash session:\nbash-4.2# exit   Start a new container using the Design Console image:\n$ podman run --name oigdc -it oigdc /bin/bash This will take you into a bash shell for the container:\nbash-4.2#   Copy the Ingress CA certificate into the container\nIf in Generate SSL Certificate you requested a certificate from a Certificate Authority (CA), then you must copy the CA certificate (e.g cacert.crt) that signed your certificate, into the container\nIf in Generate SSL Certificate you generated a self-signed certicate (e.g tls.crt), you must copy the self-signed certificate into the container\nNote: You will have to copy the certificate over to the worker node where the oigdc image is created before running the following.\nRun the following command outside the container:\n$ cd \u0026lt;workdir\u0026gt;/ssl $ podman cp \u0026lt;certificate\u0026gt; \u0026lt;container_name\u0026gt;:/u01/jdk/jre/lib/security/\u0026lt;certificate\u0026gt; For example:\n$ cd /scratch/OIGK8S/ssl $ podman cp tls.crt oigdc:/u01/jdk/jre/lib/security/tls.crt   Inside the container, import the certificate using the following command:\nbash-4.2# /u01/jdk/bin/keytool -import -trustcacerts -alias dc -file /u01/jdk/jre/lib/security/\u0026lt;certificate\u0026gt; -keystore /u01/jdk/jre/lib/security/cacerts For example:\nbash-4.2# /u01/jdk/bin/keytool -import -trustcacerts -alias dc -file /u01/jdk/jre/lib/security/tls.crt -keystore /u01/jdk/jre/lib/security/cacerts   In the container run the following to export the DISPLAY:\n$ export DISPLAY=\u0026lt;parent_machine_hostname:1\u0026gt;   Start the Design Console from the container:\nbash-4.2# cd idm/designconsole bash-4.2# sh xlclient.sh The Design Console login should be displayed. Now follow Login to the Design Console.\n  Login to the Design Console   Launch the Design Console and in the Oracle Identity Manager Design Console login page enter the following details:\nEnter the following details and click Login:\n Server URL: \u0026lt;url\u0026gt; User ID: xelsysadm Password: \u0026lt;password\u0026gt;.  where \u0026lt;url\u0026gt; is where \u0026lt;url\u0026gt; is https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}.\n  If successful the Design Console will be displayed.\n  "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/adminguide/weblogic-monitoring-exporter-setup/",
	"title": "Monitor an Oracle WebCenter Content domain",
	"tags": [],
	"description": "Use the WebLogic Monitoring Exporter to monitor an Oracle WebCenter Content instance using Prometheus and Grafana.",
	"content": "You can monitor a WebCenter Content domain using Prometheus and Grafana by exporting the metrics from the domain instance using the WebLogic Monitoring Exporter.\nSet up monitoring for OracleWebCenterContent domain Using the WebLogic Monitoring Exporter you can scrape runtime information from a running Oracle WebCenter Content Suite instance and monitor them using Prometheus and Grafana. Follow these steps to set up monitoring for an Oracle WebCenter Content Suite instance. For more details on WebLogic Monitoring Exporter, see here.\nVerify monitoring using Grafana Dashboard After set-up is complete, to view the domain metrics, you can access the Grafana dashboard at http://mycompany.com:32100/.\nThis displays the WebLogic Server Dashboard.\n"
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/installguide/prepare-your-environment/",
	"title": "Prepare your environment",
	"tags": [],
	"description": "Prepare for creating the Oracle WebCenter Portal domain, This preparation includes but not limited to creating required secrets, persistent volume and volume claim, and database schema.",
	"content": "Set up the environment, including setting up a Kubernetes cluster and the Weblogic Kubernetes Operator.\n  Install Helm\n  Set Up your Kubernetes Cluster\n  Obtain the Oracle WebCenter Portal Docker Image\n  Pull Other Dependent Images\n  Set Up the Code Repository to Deploy Oracle WebCenter Portal Domain\n  Grant Roles and Clear Stale Resources\n  Install the WebLogic Kubernetes Operator\n  Prepare the Environment for the WebCenter Portal Domain\na. Create a namespace for an Oracle WebCenter Portal domain\nb. Create a Kubernetes secret with domain credentials\nc. Create a Kubernetes secret with the RCU credentials\nd. Create a persistent storage for an Oracle WebCenter Portal domain\ne. Configure access to your database\nf. Run the Repository Creation Utility to set up your database schemas\n  Install Helm The operator uses Helm to create and deploy the necessary resources and then run the operator in a Kubernetes cluster. For Helm installation and usage information, see here.\nSet Up your Kubernetes Cluster If you need help in setting up a Kubernetes environment, check our cheat sheet.\nAfter creating Kubernetes clusters, you can optionally:\n Create load balancers to direct traffic to backend domain Configure Kibana and Elasticsearch for your operator logs  Obtain the Oracle WebCenter Portal Docker Image The Oracle WebCenter Portal image with latest bundle patch and required interim patches can be obtained from My Oracle Support (MOS). This is the only image supported for production deployments. Follow the below steps to download the Oracle WebCenter Portal image from My Oracle Support.\n  Download patch 33807917 from My Oracle Support (MOS).\n  Unzip the downloaded patch zip file.\n  Load the image archive using the docker load command.\nFor example:\n$ docker load \u0026lt; wcportal-12.2.1.4-jdk8-ol7-220203.0823.tar Loaded image: oracle/wcportal:12.2.1.4-jdk8-ol7-220203.0823   If you want to build and use an Oracle WebCenter Portal Docker image with any additional bundle patch or interim patches that are not part of the image obtained from My Oracle Support, then follow these steps to create the image.\n Note: The default Oracle WebCenter Portal image name used for Oracle WebCenter Portal domain deployment is oracle/wcportal:12.2.1.4. The image obtained must be tagged as oracle/wcportal:12.2.1.4 using the docker tag command. If you want to use a different name for the image, make sure to update the new image tag name in the create-domain-inputs.yaml file and also in other instances where the oracle/wcportal:12.2.1.4 image name is used.\n Pull Other Dependent Images Dependent images include WebLogic Kubernetes Operator, database, and Traefik. Pull these images and add them to your local registry:\n Pull these docker images and re-tag them as shown:  To pull an image from the Oracle Container Registry, in a web browser, navigate to https://container-registry.oracle.com and log in using the Oracle Single Sign-On authentication service. If you do not already have SSO credentials, at the top of the page, click the Sign In link to create them.\nUse the web interface to accept the Oracle Standard Terms and Restrictions for the Oracle software images that you intend to deploy. Your acceptance of these terms are stored in a database that links the software images to your Oracle Single Sign-On login credentials.\nThen, pull these docker images:\n$ docker login https://container-registry.oracle.com (enter your Oracle email Id and password) #This step is required once at every node to get access to the Oracle Container Registry. WebLogic Kubernetes Operator image:\n$ docker pull ghcr.io/oracle/weblogic-kubernetes-operator:3.3.0 Copy all the built and pulled images to all the nodes in your cluster or add to a Docker registry that your cluster can access.  NOTE: If you\u0026rsquo;re not running Kubernetes on your development machine, you\u0026rsquo;ll need to make the Docker image available to a registry visible to your Kubernetes cluster. Upload your image to a machine running Docker and Kubernetes as follows:\n# on your build machine $ docker save Image_Name:Tag \u0026gt; Image_Name-Tag.tar $ scp Image_Name-Tag.tar YOUR_USER@YOUR_SERVER:/some/path/Image_Name-Tag.tar # on the Kubernetes server $ docker load \u0026lt; /some/path/Image_Name-Tag.tar Set Up the Code Repository to Deploy Oracle WebCenter Portal Domain Oracle WebCenter Portal domain deployment on Kubernetes leverages the WebLogic Kubernetes Operator infrastructure. For deploying the Oracle WebCenter Portal domain, you need to set up the deployment scripts as below:\n  Create a working directory to set up the source code.\n$ mkdir $HOME/wcp_22.2.3 $ cd $HOME/wcp_22.2.3   Download the Oracle WebCenter Portal Kubernetes deployment scripts from the Github repository. Required artifacts are available at OracleWeCenterPortal/kubernetes.\n$ git clone https://github.com/oracle/fmw-kubernetes.git $ export WORKDIR=$HOME/wcp_22.2.3/fmw-kubernetes/OracleWebCenterPortal/kubernetes/   You can now use the deployment scripts from \u0026lt;$WORKDIR\u0026gt; to set up the WebCenter Portal domain as described later in this document.\nGrant Roles and Clear Stale Resources   To confirm if there is already a WebLogic custom resource definition, execute the following command:\n$ kubectl get crd NAME CREATED AT domains.weblogic.oracle 2020-03-14T12:10:21Z   Delete the WebLogic custom resource definition, if you find any, by executing the following command:\n$ kubectl delete crd domains.weblogic.oracle customresourcedefinition.apiextensions.k8s.io \u0026#34;domains.weblogic.oracle\u0026#34; deleted   Install the WebLogic Kubernetes Operator   Create a namespace for the WebLogic Kubernetes Operator:\n$ kubectl create namespace operator-ns namespace/operator-ns created NOTE: In this procedure, the namespace is called “operator-ns”. You can use any name.\nYou can use:\n domainUID/domainname as wcp-domain Domain namespace as wcpns Operator namespace as operator-ns traefik namespace as traefik    Create a service account for the WebLogic Kubernetes Operator in the operator\u0026rsquo;s namespace:\n$ kubectl create serviceaccount -n operator-ns operator-sa serviceaccount/operator-sa created   To be able to set up the log-stash and Elasticsearch after creating the domain, set the value of the field elkIntegrationEnabled to true in the file kubernetes/charts/weblogic-operator/values.yaml.\n  Use helm to install and start the WebLogic Kubernetes Operator from the downloaded repository:\n Helm install weblogic-operator\n $ cd ${WORKDIR} $ helm install weblogic-kubernetes-operator charts/weblogic-operator --namespace operator-ns --set serviceAccount=operator-sa --set \u0026#34;domainNamespaces={}\u0026#34; --wait NAME: weblogic-kubernetes-operator LAST DEPLOYED: Wed Jan 6 01:47:33 2021 NAMESPACE: operator-ns STATUS: deployed REVISION: 1 TEST SUITE: None ``\n  To verify that the operator\u0026rsquo;s pod is running, list the pods in the operator\u0026rsquo;s namespace. You should see one for the WebLogic Kubernetes Operator:\n$ kubectl get pods -n operator-ns NAME READY STATUS RESTARTS AGE weblogic-operator-67df5fddc5-tlc4b 2/2 Running 0 3m15s   Then, check by viewing the Operator pod\u0026rsquo;s log as shown in the following sample log snippet:\n$ kubectl logs -n operator-ns -c weblogic-operator deployments/weblogic-operator Launching Oracle WebLogic Server Kubernetes Operator... Importing keystore /operator/internal-identity/temp/weblogic-operator.jks to /operator/internal-identity/temp/weblogic-operator.p12... Entry for alias weblogic-operator-alias successfully imported. Import command completed: 1 entries successfully imported, 0 entries failed or cancelled Warning: The -srcstorepass option is specified multiple times. All except the last one will be ignored. MAC verified OK % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 4249 0 2394 100 1855 6884 5334 --:--:-- --:--:-- --:--:-- 6899 % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 5558 0 3028 100 2530 22704 18970 --:--:-- --:--:-- --:--:-- 22766 OpenJDK 64-Bit Server VM warning: Option MaxRAMFraction was deprecated in version 10.0 and will likely be removed in a future release. VM settings: Max. Heap Size (Estimated): 14.08G Using VM: OpenJDK 64-Bit Server VM {\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:53.438+0000\u0026#34;,\u0026#34;thread\u0026#34;:1,\u0026#34;fiber\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.TuningParametersImpl\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;update\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168593438,\u0026#34;message\u0026#34;:\u0026#34;Reloading tuning parameters from Operator\u0026#39;s config map\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;} {\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:53.944+0000\u0026#34;,\u0026#34;thread\u0026#34;:1,\u0026#34;fiber\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.Main\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;main\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168593944,\u0026#34;message\u0026#34;:\u0026#34;Oracle WebLogic Server Kubernetes Operator, version: 3.0.4, implementation: master.4d4fe0a, build time: 2019-11-15T21:19:56-0500\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;} {\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:53.972+0000\u0026#34;,\u0026#34;thread\u0026#34;:11,\u0026#34;fiber\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.Main\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;begin\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168593972,\u0026#34;message\u0026#34;:\u0026#34;Operator namespace is: operator-ns\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;} {\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:54.009+0000\u0026#34;,\u0026#34;thread\u0026#34;:11,\u0026#34;fiber\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.Main\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;begin\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168594009,\u0026#34;message\u0026#34;:\u0026#34;Operator target namespaces are: operator-ns\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;} {\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:54.013+0000\u0026#34;,\u0026#34;thread\u0026#34;:11,\u0026#34;fiber\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.Main\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;begin\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168594013,\u0026#34;message\u0026#34;:\u0026#34;Operator service account is: operator-sa\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;}\t{\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:54.031+0000\u0026#34;,\u0026#34;thread\u0026#34;:11,\u0026#34;fiber\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.helpers.HealthCheckHelper\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;performK8sVersionCheck\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168594031,\u0026#34;message\u0026#34;:\u0026#34;Verifying Kubernetes minimum version\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;}\t{\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:54.286+0000\u0026#34;,\u0026#34;thread\u0026#34;:11,\u0026#34;fiber\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.helpers.ClientPool\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;getApiClient\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168594286,\u0026#34;message\u0026#34;:\u0026#34;The Kuberenetes Master URL is set to https://10.96.0.1:443\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;}\t{\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:54.673+0000\u0026#34;,\u0026#34;thread\u0026#34;:11,\u0026#34;fiber\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.helpers.HealthCheckHelper\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;createAndValidateKubernetesVersion\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168594673,\u0026#34;message\u0026#34;:\u0026#34;Kubernetes version is: v1.13.7\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;}\t{\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:55.259+0000\u0026#34;,\u0026#34;thread\u0026#34;:12,\u0026#34;fiber\u0026#34;:\u0026#34;engine-operator-thread-2-fiber-1\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.helpers.CrdHelper$CrdContext$CreateResponseStep\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;onSuccess\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168595259,\u0026#34;message\u0026#34;:\u0026#34;Create Custom Resource Definition: oracle.kubernetes.operator.calls.CallResponse@470b40c\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;}\t{\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:55.356+0000\u0026#34;,\u0026#34;thread\u0026#34;:16,\u0026#34;fiber\u0026#34;:\u0026#34;fiber-1-child-2\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.helpers.HealthCheckHelper\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;performSecurityChecks\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168595356,\u0026#34;message\u0026#34;:\u0026#34;Verifying that operator service account can access required operations on required resources in namespace operator-ns\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;}\t{\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:55.598+0000\u0026#34;,\u0026#34;thread\u0026#34;:18,\u0026#34;fiber\u0026#34;:\u0026#34;fiber-1-child-2\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.helpers.ConfigMapHelper$ScriptConfigMapContext$CreateResponseStep\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;onSuccess\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168595598,\u0026#34;message\u0026#34;:\u0026#34;Creating domain config map, operator-ns, for namespace: {1}.\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;}\t{\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:55.937+0000\u0026#34;,\u0026#34;thread\u0026#34;:21,\u0026#34;fiber\u0026#34;:\u0026#34;fiber-1\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;WARNING\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.utils.Certificates\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;getCertificate\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168595937,\u0026#34;message\u0026#34;:\u0026#34;Can\u0026#39;t read certificate at /operator/external-identity/externalOperatorCert\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\\njava.nio.file.NoSuchFileException: /operator/external-identity/externalOperatorCert\\n\\tat java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)\\n\\tat java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)\\n\\tat java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:116)\\n\\tat java.base/sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:215)\\n\\tat java.base/java.nio.file.Files.newByteChannel(Files.java:370)\\n\\tat java.base/java.nio.file.Files.newByteChannel(Files.java:421)\\n\\tat java.base/java.nio.file.Files.readAllBytes(Files.java:3205)\\n\\tat oracle.kubernetes.operator.utils.Certificates.getCertificate(Certificates.java:48)\\n\\tat oracle.kubernetes.operator.utils.Certificates.getOperatorExternalCertificateData(Certificates.java:39)\\n\\tat oracle.kubernetes.operator.rest.RestConfigImpl.getOperatorExternalCertificateData(RestConfigImpl.java:52)\\n\\tat oracle.kubernetes.operator.rest.RestServer.isExternalSslConfigured(RestServer.java:383)\\n\\tat oracle.kubernetes.operator.rest.RestServer.start(RestServer.java:199)\\n\\tat oracle.kubernetes.operator.Main.startRestServer(Main.java:353)\\n\\tat oracle.kubernetes.operator.Main.completeBegin(Main.java:198)\\n\\tat oracle.kubernetes.operator.Main$NullCompletionCallback.onCompletion(Main.java:701)\\n\\tat oracle.kubernetes.operator.work.Fiber.completionCheck(Fiber.java:475)\\n\\tat oracle.kubernetes.operator.work.Fiber.run(Fiber.java:448)\\n\\tat oracle.kubernetes.operator.work.ThreadLocalContainerResolver.lambda$wrapExecutor$0(ThreadLocalContainerResolver.java:87)\\n\\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\\n\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)\\n\\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\\n\\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\\n\\tat java.base/java.lang.Thread.run(Thread.java:834)\\n\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;} {\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:55.967+0000\u0026#34;,\u0026#34;thread\u0026#34;:21,\u0026#34;fiber\u0026#34;:\u0026#34;fiber-1\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.rest.RestServer\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;start\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168595967,\u0026#34;message\u0026#34;:\u0026#34;Did not start the external ssl REST server because external ssl has not been configured.\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;} {\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:57.910+0000\u0026#34;,\u0026#34;thread\u0026#34;:21,\u0026#34;fiber\u0026#34;:\u0026#34;fiber-1\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.rest.RestServer\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;start\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168597910,\u0026#34;message\u0026#34;:\u0026#34;Started the internal ssl REST server on https://0.0.0.0:8082/operator\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;}\t{\u0026#34;timestamp\u0026#34;:\u0026#34;03-14-2020T06:49:57.913+0000\u0026#34;,\u0026#34;thread\u0026#34;:21,\u0026#34;fiber\u0026#34;:\u0026#34;fiber-1\u0026#34;,\u0026#34;domainUID\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;level\u0026#34;:\u0026#34;INFO\u0026#34;,\u0026#34;class\u0026#34;:\u0026#34;oracle.kubernetes.operator.Main\u0026#34;,\u0026#34;method\u0026#34;:\u0026#34;markReadyAndStartLivenessThread\u0026#34;,\u0026#34;timeInMillis\u0026#34;:1584168597913,\u0026#34;message\u0026#34;:\u0026#34;Starting Operator Liveness Thread\u0026#34;,\u0026#34;exception\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;code\u0026#34;:\u0026#34;\u0026#34;,\u0026#34;headers\u0026#34;:{},\u0026#34;body\u0026#34;:\u0026#34;\u0026#34;}   Prepare the Environment for the WebCenter Portal Domain Create a namespace for an Oracle WebCenter Portal domain Unless you want to use the default namespace, create a Kubernetes namespace that can host one or more domains:\n$ kubectl create namespace wcpns namespace/wcpns created To manage domain in this namespace, configure the operator using helm:\n Helm upgrade weblogic-operator\n $ helm upgrade --reuse-values --set \u0026#34;domainNamespaces={wcpns}\u0026#34; \\  --wait weblogic-kubernetes-operator charts/weblogic-operator --namespace operator-ns NAME: weblogic-kubernetes-operator LAST DEPLOYED: Wed Jan 6 01:52:58 2021 NAMESPACE: operator-ns STATUS: deployed REVISION: 2 Create a Kubernetes secret with domain credentials Using the create-weblogic-credentials script, create a Kubernetes secret that contains the user name and password for the domain in the same Kubernetes namespace as the domain:\n$ cd ${WORKDIR}/create-weblogic-domain-credentials $ ./create-weblogic-credentials.sh -u weblogic -p welcome1 -n wcpns -d wcp-domain -s wcp-domain-domain-credentials secret/wcp-domain-domain-credentials created secret/wcp-domain-domain-credentials labeled The secret wcp-domain-domain-credentials has been successfully created in the wcpns namespace. Where: * weblogic is the weblogic username * welcome1 is the weblogic password * wcp-domain is the domain name * wcpns is the domain namespace * wcp-domain-domain-credentials is the secret name Note: You can inspect the credentials as follows:  $ kubectl get secret wcp-domain-domain-credentials -o yaml -n wcpns Create a Kubernetes secret with the RCU credentials Create a Kubernetes secret for the Repository Configuration Utility (user name and password) using the create-rcu-credentials.sh script in the same Kubernetes namespace as the domain:\n$ cd ${WORKDIR}/create-rcu-credentials $ sh create-rcu-credentials.sh \\  -u WCP1 -p welcome1 -a sys -q Oradoc_db1 -n wcpns \\  -d wcp-domain -s wcp-domain-rcu-credentials secret/wcp-domain-rcu-credentials created secret/wcp-domain-rcu-credentials labeled The secret wcp-domain-rcu-credentials has been successfully created in the wcpns namespace. Where: * WCP1 is the schema user * welcome1 is the schema password * Oradoc_db1 is the database SYS users password * wcp-domain is the domain name * wcpns is the domain namespace * wcp-domain-rcu-credentials is the secret name Note: You can inspect the credentials as follows:  $ kubectl get secret wcp-domain-rcu-credentials -o yaml -n wcpns Create a persistent storage for an Oracle WebCenter Portal domain Create a Kubernetes PV and PVC (Persistent Volume and Persistent Volume Claim):\nIn the Kubernetes namespace you created, create the PV and PVC for the domain by running the create-pv-pvc.sh script. Follow the instructions for using the script to create a dedicated PV and PVC for the Oracle WebCenter Portal domain.\n  Review the configuration parameters for PV creation here. Based on your requirements, update the values in the create-pv-pvc-inputs.yaml file located at ${WORKDIR}/create-weblogic-domain-pv-pvc/. Sample configuration parameter values for an Oracle WebCenter Portal domain are:\n baseName: domain domainUID: wcp-domain namespace: wcpns weblogicDomainStorageType: HOST_PATH weblogicDomainStoragePath: /scratch/kubevolume    Ensure that the path for the weblogicDomainStoragePath property exists (create one if it doesn\u0026rsquo;t exist), that it has full access permissions, and that the folder is empty.\n  Run the create-pv-pvc.sh script:\n$ cd ${WORKDIR}/create-weblogic-domain-pv-pvc $ ./create-pv-pvc.sh -i create-pv-pvc-inputs.yaml -o output Input parameters being used export version=\u0026#34;create-weblogic-sample-domain-pv-pvc-inputs-v1\u0026#34; export baseName=\u0026#34;domain\u0026#34; export domainUID=\u0026#34;wcp-domain\u0026#34; export namespace=\u0026#34;wcpns\u0026#34; export weblogicDomainStorageType=\u0026#34;HOST_PATH\u0026#34; export weblogicDomainStoragePath=\u0026#34;/scratch/kubevolume\u0026#34; export weblogicDomainStorageReclaimPolicy=\u0026#34;Retain\u0026#34; export weblogicDomainStorageSize=\u0026#34;10Gi\u0026#34; Generating output/pv-pvcs/wcp-domain-domain-pv.yaml Generating output/pv-pvcs/wcp-domain-domain-pvc.yaml The following files were generated: output/pv-pvcs/wcp-domain-domain-pv.yaml output/pv-pvcs/wcp-domain-domain-pvc.yaml   The create-pv-pvc.sh script creates a subdirectory pv-pvcs under the given /path/to/output-directory directory and creates two YAML configuration files for PV and PVC. Apply these two YAML files to create the PV and PVC Kubernetes resources using the kubectl create -f command:\n$ kubectl create -f output/pv-pvcs/wcp-domain-domain-pv.yaml $ kubectl create -f output/pv-pvcs/wcp-domain-domain-pvc.yaml   Configure access to your database Oracle WebCenter Portal domain requires a database which is configured with the necessary schemas. The Repository Creation Utility (RCU) allows you to create those schemas. You must set up the database before you create your domain.\nFor production deployments, you must set up and use a standalone (non-container) database running outside of Kubernetes.\nBefore creating a domain, you need to set up the necessary schemas in your database.\nRun the Repository Creation Utility to set up your database schemas To create the database schemas for Oracle WebCenter Portal domain, run the create-rcu-schema.sh script.\n$ cd ${WORKDIR}/create-rcu-schema $ sh create-rcu-schema.sh -h usage: create-rcu-schema.sh -s \u0026lt;schemaPrefix\u0026gt; -t \u0026lt;schemaType\u0026gt; -d \u0026lt;dburl\u0026gt; -i \u0026lt;image\u0026gt; -u \u0026lt;imagePullPolicy\u0026gt; -p \u0026lt;docker-store\u0026gt; -n \u0026lt;namespace\u0026gt; -q \u0026lt;sysPassword\u0026gt; -r \u0026lt;schemaPassword\u0026gt; -o \u0026lt;rcuOutputDir\u0026gt; [-h] -s RCU Schema Prefix (required) -t RCU Schema Type (optional) (supported values: wcp(default), wcpp) -d RCU Oracle Database URL (optional) (default: oracle-db.default.svc.cluster.local:1521/devpdb.k8s) -p FMW Infrastructure ImagePullSecret (optional) (default: none) -i Oracle WebCenter Portal Image (optional) (default: oracle/wcportal:12.2.1.4) -u FMW Infrastructure ImagePullPolicy (optional) (default: IfNotPresent) -n Namespace for RCU pod (optional) (default: default) -q password for database SYSDBA user. (optional) (default: Oradoc_db1) -r password for all schema owner (regular user). (optional) (default: Oradoc_db1) -o Output directory for the generated YAML file. (optional) (default: rcuoutput) -c Comma-separated variables in the format variablename=value. (optional). (default: none) -h Help $ ./create-rcu-schema.sh \\  -s WCP1 \\  -t wcp \\  -d oracle-db.default.svc.cluster.local:1521/devpdb.k8s \\  -i oracle/wcportal:12.2.1.4\\  -n wcpns \\  -q Oradoc_db1 \\  -r welcome1  Where RCU Schema type wcp generates webcenter portal related schema and wcpp generates webcenter portal plus portlet schemas.\n "
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "Review the latest changes and known issues for Oracle Access Management 12.2.1.4 on Kubernetes.\nRecent changes    Date Version Change     January, 2025 25.1.1 Supports Oracle Access Management 12.2.1.4 domain deployment using the January 2025 container image which contains the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains the following changes:     + Support for WebLogic Kubernetes Operator 4.2.10.     If upgrading to January 25 (25.1.1) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.2.10     2. Patch the OAM container image to January 25     3. If you are upgrading to Kubernetes 1.29 or later, you must upgrade the ingress. See Upgrading the ingress.     If upgrading to January 25 (25.1.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.2.10     2. Patch the OAM container image to January 25     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   October, 2024 24.4.1 Supports Oracle Access Management 12.2.1.4 domain deployment using the October 2024 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains the following changes:     + Ingress now uses ingressClassName instead of the deprecated kubernetes.io/ingress.class. See, Ingress.     If upgrading to October 24 (24.4.1) from April 24 (24.2.1) or later, you must upgrade the following in order:     1. Patch the OAM container image to October 24     2. If you are upgrading to Kubernetes 1.29 or later, you must upgrade the ingress. See Upgrading the ingress.     If upgrading to October 24 (24.4.1) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OAM container image to October 24     3. If you are upgrading to Kubernetes 1.29 or later, you must upgrade the ingress. See Upgrading the ingress.     If upgrading to October 24 (24.4.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OAM container image to October 24     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   July, 2024 24.3.1 Supports Oracle Access Management 12.2.1.4 domain deployment using the July 2024 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains no changes other than support for the July Patch Set Update.     If upgrading to July 24 (24.3.1) from April 24 (24.2.1), you must upgrade the following in order:     1. Patch the OAM container image to January 24     If upgrading to July 24 (24.3.1) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OAM container image to July 24     If upgrading to July 24 (24.3.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OAM container image to July 24     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   April, 2024 24.2.1 Supports Oracle Access Management 12.2.1.4 domain deployment using the April 2024 container image which contains the April Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains the following changes:     + Support for WebLogic Kubernetes Operator 4.1.8.     + Changes to creating domains with WDT models:     a. RCU schema creation is now performed as part of the domain creation.     b. Automation scripts to generate WDT models and domain resource yaml file.     c. Automation scripts to build domain creation image and push it to container registry.     If upgrading to April 24 (24.2.1) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OAM container image to April 24     If upgrading to April 24 (24.2.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OAM container image to April 24     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   January, 2024 24.1.1 Supports Oracle Access Management 12.2.1.4 domain deployment using the January 2024 container image which contains the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains no changes other than support for the January Patch Set Update     If upgrading to January 24 (24.1.1) from October 23 (23.4.1) or later, you must upgrade the following in order:     1. Patch the OAM container image to January 24     If upgrading to January 24 (24.1.1) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OAM container image to January 24     If upgrading to January 24 (24.1.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OAM container image to January 24     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   November, 2023 23.4.2 Supports Oracle Access Management 12.2.1.4 domain deployment using the October 2023 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains the following changes:     Support for creation of OAM domains using Weblogic Deploy Tooling (WDT) Models. See Create OAM domains Using WDT Models.     If currently on October 23 (23.4.1) there is no need to upgrade as the November 23 (23.4.2) release only adds the ability to create new OAM domains using WDT.     If upgrading to November 23 (23.4.2) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OAM container image to October 23     If upgrading to November 23 (23.4.2) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OAM container image to October 23     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   October, 2023 23.4.1 Supports Oracle Access Management 12.2.1.4 domain deployment using the October 2023 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains the following changes:     + Support for WebLogic Kubernetes Operator 4.1.2.     + Ability to set resource requests and limits for CPU and memory on a cluster resource. See, Set the OAM server memory parameters.     + Support for the Kubernetes Horizontal Pod Autoscaler (HPA). See, Kubernetes Horizontal Pod Autoscaler.     + The default domain now only starts one OAM Managed Server (oam_server1) and one Policy Managed Server (policy_mgr1).     If upgrading to October 23 (23.4.1) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OAM container image to October 23     If upgrading to October 23 (23.4.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OAM container image to October 23     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   July, 2023 23.3.1 Supports Oracle Access Management 12.2.1.4 domain deployment using the July 2023 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to July 23 (23.3.1) from April 23 (23.2.1), upgrade as follows:     1. Patch the OAM container image to July 23     If upgrading to July 23 (23.3.1) from October 22 (22.4.1), or January 23 (23.1.1) release, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.0.4     2. Patch the OAM container image to July 23     If upgrading to July 23 (23.3.1) from a release prior to October 22 (22.4.1) release, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.0.4     2. Patch the OAM container image to July 23     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   April, 2023 23.2.1 Supports Oracle Access Management 12.2.1.4 domain deployment using the April 2023 container image which contains the April Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     Support for WebLogic Kubernetes Operator 4.0.4.     Changes to stopping/starting pods due to domain and cluster configuration being separated and parameter changes (IF_NEEDED, NEVER to IfNeeded, Never).     If upgrading to April 23 (23.2.1) from October 22 (22.4.1) or later, you must upgrade in the following order:     1. WebLogic Kubernetes Operator to 4.0.4     2. Patch the OAM container image to April 23     If upgrading to April 23 (23.2.1) from a release prior to October 22 (22.4.1) release, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.0.4     2. Patch the OAM container image to April 23     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana See Patch and Upgrade for these instructions.   January, 2023 23.1.1 Supports Oracle Access Management 12.2.1.4 domain deployment using the January 2023 container image which contains the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to January 23 (23.1.1) from October 22 (22.4.1) release, you only need to patch the OAM container image to January 23.     If upgrading to January 23 (23.1.1) from a release prior to October 22 (22.4.1) release, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 3.4.2     2. Patch the OAM container image to January 23     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana See Patch and Upgrade for these instructions.   October, 2022 22.4.1 Supports Oracle Access Management 12.2.1.4 domain deployment using the October 2022 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     Support for WebLogic Kubernetes Operator 3.4.2.     Additional Ingress mappings added.     Changes to deployment of Logging and Visualization with Elasticsearch and Kibana.     OAM container images are now only available from container-registry.oracle.com and are no longer available from My Oracle Support.     If upgrading to October 22 (22.4.1) from a previous release, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 3.4.2     2. Patch the OAM container image to October 22     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana See Patch and Upgrade for these instructions.   July, 2022 22.3.1 Supports Oracle Access Management 12.2.1.4 domain deployment using the July 2022 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.   April, 2022 22.2.1 Updated for CRI-O support.   November, 2021 21.4.2 Supports Oracle Access Management domain deployment using WebLogic Kubernetes Operator 3.3.0. Voyager ingress removed as no longer supported.   October 2021 21.4.1 A) References to supported Kubernetes, Helm and Docker versions removed and replaced with Support note reference. B) Namespace and domain names changed to be consistent with Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster. C) Additional post configuration tasks added. D) Upgrading a Kubernetes Cluster and Security Hardening removed as vendor specific.   November 2020 20.4.1 Initial release of Oracle Access Management on Kubernetes.    "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "Review the latest changes and known issues for Oracle Identity Governance on Kubernetes.\nRecent changes    Date Version Change     January, 2025 25.1.1 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the January 2025 container image which contains the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains the following changes:     Support for WebLogic Kubernetes Operator 4.2.10.     If upgrading to January 25 (25.1.1) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.2.10     2. Patch the OIG container image to January 25     3. If you are upgrading to Kubernetes 1.29 or later, you must upgrade the ingress. See Upgrading the ingress.     If upgrading to January 25 (25.1.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.2.10     2. Patch the OIG container image to January 25     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   October, 2024 24.4.1 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the October 2024 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains the following changes:     + Ingress now uses ingressClassName instead of the deprecated kubernetes.io/ingress.class. See, Ingress.     If upgrading to October 24 (24.4.1) from April 24 (24.2.1) or later, you must upgrade the following in order:     1. Patch the OIG container image to October 24     2. If you are upgrading to Kubernetes 1.29 or later, you must upgrade the ingress. See Upgrading the ingress.     If upgrading to October 24 (24.4.1) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OIG container image to October 24     3. If you are upgrading to Kubernetes 1.29 or later, you must upgrade the ingress. See Upgrading the ingress.     If upgrading to October 24 (24.4.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OIG container image to October 24     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   July, 2024 24.3.1 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the July 2024 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains no changes other than support for the July Patch Set Update.     If upgrading to July 24 (24.3.1) from April 24 (24.2.1), you must upgrade the following in order:     1. Patch the OIG container image to July 24     If upgrading to July 24 (24.3.1) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OIG container image to July 24     If upgrading to July 24 (24.3.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OIG container image to July 24     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   April, 2024 24.2.1 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the April 2024 container image which contains the April Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains the following changes:     + Support for WebLogic Kubernetes Operator 4.1.8.     + Changes to creating domains with WDT models:     a. RCU schema creation and schema patching is now performed as part of the domain creation.     b. Automation scripts to generate WDT models and domain resource yaml file.     c. Automation scripts to build domain creation image and push it to container registry.     If upgrading to April 24 (24.2.1) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OIG container image to April 24     If upgrading to April 24 (24.2.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OIG container image to April 24     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   January, 2024 24.1.1 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the January 2024 container image which contains the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains the following changes:     + Support for patching OIG domains created with Weblogic Deploy Tooling (WDT) Models.     If upgrading to January 24 (24.1.1) from October 23 (23.4.1) or later, you must upgrade the following in order:     1. Patch the OIG container image to January 24     If upgrading to January 24 (24.1.1) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OIG container image to January 24     If upgrading to January 24 (24.1.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OIG container image to January 24     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   November, 2023 23.4.2 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the October 2023 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains the following changes:     + Support for creation of OIG domains using Weblogic Deploy Tooling (WDT) Models. See Create OIG domains Using WDT Models.     If currently on October 23 (23.4.1) there is no need to upgrade as the November 23 (23.4.2) release only adds the ability to create new OIG domains using WDT.     If upgrading to November 23 (23.4.2) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OIG container image to October 23     If upgrading to November 23 (23.4.2) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OIG container image to October 23     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   October, 2023 23.4.1 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the October 2023 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains the following changes:     + Support for WebLogic Kubernetes Operator 4.1.2.     + Ability to set resource requests and limits for CPU and memory on a cluster resource. See, Setting the OIM server memory parameters.     + Support for the Kubernetes Horizontal Pod Autoscaler (HPA). See, Kubernetes Horizontal Pod Autoscaler.     If upgrading to October 23 (23.4.1) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OIG container image to October 23     If upgrading to October 23 (23.4.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OIG container image to October 23     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   July, 2023 23.3.1 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the July 2023 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to July 23 (23.3.1) from April 23 (23.2.1), upgrade as follows:     1. Patch the OIG container image to July 23     If upgrading to July 23 (23.3.1) from October 22 (22.4.1), or January 23 (23.1.1) release, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.0.4     2. Patch the OIG container image to July 23     If upgrading to July 23 (23.3.1) from a release prior to October 22 (22.4.1) release, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.0.4     2. Patch the OIG container image to July 23     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   April, 2023 23.2.1 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the April 2023 container image which contains the April Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     Support for WebLogic Kubernetes Operator 4.0.4.     Changes to stopping/starting pods due to domain and cluster configuration being separated and parameter changes (IF_NEEDED, NEVER to IfNeeded, Never).     If upgrading to April 23 (23.2.1) from October 22 (22.4.1) or later, you must upgrade in the following order:     1. WebLogic Kubernetes Operator to 4.0.4     2. Patch the OIG container image to April 23     If upgrading to April 23 (23.2.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.0.4     2. Patch the OIG container image to April 23     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana See Patch and Upgrade for these instructions.   January, 2023 23.1.1 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the January 2023 container image which contains the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to January 23 (23.1.1) from October 22 (22.4.1) release, you only need to patch the OIG container image to January 23.     If upgrading to January 23 (23.1.1) from a release prior to October 22 (22.4.1) release, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 3.4.2     2. Patch the OIG container image to January 23     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana See Patch and Upgrade for these instructions.   October, 2022 22.4.1 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the October 2022 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     Support for WebLogic Kubernetes Operator 3.4.2.     Additional Ingress mappings added.     Changes to deployment of Logging and Visualization with Elasticsearch and Kibana.     OIG container images are now only available from container-registry.oracle.com and are no longer available from My Oracle Support.     If upgrading to October 22 (22.4.1) from a previous release, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 3.4.2     2. Patch the OIG container image to October 22     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   July, 2022 22.3.1 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the July 2022 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.   April, 2022 22.2.1 Updated for CRI-O support.   November, 2021 21.4.2 Supports Oracle Identity Governance domain deployment using WebLogic Kubernetes Operator 3.3.0. Voyager ingress removed as no longer supported.   October 2021 21.4.1 A) References to supported Kubernetes, Helm and Docker versions removed and replaced with Support note reference. B) Namespace and domain names changed to be consistent with Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster. C) Addtional post configuration tasks added. D) New section on how to start Design Console in a container. E) Upgrading a Kubernetes Cluster and Security Hardening removed as vendor specific.   November 2020 20.4.1 Initial release of Identity Governance on Kubernetes.    "
},
{
	"uri": "/fmw-kubernetes/idm-products/oud/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "Review the latest changes and known issues for Oracle Unified Directory on Kubernetes.\nRecent changes    Date Version Change     January, 2025 25.1.1 Supports Oracle Unified Directory 12.2.1.4 domain deployment using the January 2025 container image which contains the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains no changes other than support for the January Patch Set Update.     To upgrade to January 25 (25.1.1) you must follow the instructions in Patch and Upgrade.   October, 2024 24.4.1 Supports Oracle Unified Directory 12.2.1.4 domain deployment using the October 2024 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains no changes other than support for the October Patch Set Update.     To upgrade to October 24 (24.4.1) you must follow the instructions in Patch and Upgrade.   July, 2024 24.3.1 Supports Oracle Unified Directory 12.2.1.4 domain deployment using the July 2024 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     + Ingress now uses ingressClassName instead of the deprecated kubernetes.io/ingress.class. See, Ingress. The helm upgrade in Patch and Upgrade will upgrade the ingress for you.     + Default pod deletion time for OUD reduced from 5 minutes to 2 minutes.     To upgrade to July 24 (24.3.1) you must follow the instructions in Patch and Upgrade.   April, 2024 24.2.1 Supports Oracle Unified Directory 12.2.1.4 domain deployment using the April 2024 container image which contains the April Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     + Support for Logstash to run as a separate sidecar container for OUD pods using Block Device Storage. See, Logging and Visualization.     To upgrade to April 24 (24.2.1) you must follow the instructions in Patch and Upgrade.   January, 2024 24.1.1 Supports Oracle Unified Directory 12.2.1.4 domain deployment using the January 2024 container image which contains the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     To upgrade to January 24(24.1.1) you must follow the instructions in Patch and Upgrade.   October, 2023 23.4.1 Supports Oracle Unified Directory 12.2.1.4 domain deployment using the October 2023 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     + Support for Block Device Storage. See, Create OUD Instances.     + Ability to set resource requests and limits for CPU and memory on an OUD instance. See, Create OUD Instances.     + Support for Assured Replication. See, Create OUD Instances.     + Support for the Kubernetes Horizontal Pod Autoscaler (HPA). See, Kubernetes Horizontal Pod Autoscaler.     + Supports integration options such as Enterprise User Security (EUS), EBusiness Suite (EBS), and Directory Integration Platform (DIP).     To upgrade to October 23 (23.4.1) you must follow the instructions in Patch and Upgrade.   July, 2023 23.3.1 Supports Oracle Unified Directory 12.2.1.4 domain deployment using the July 2023 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     To upgrade to July 23 (23.3.1) you must follow the instructions in Patch and Upgrade.   April, 2023 23.2.1 Supports Oracle Unified Directory 12.2.1.4 domain deployment using the April 2023 container image which contains the April Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     To upgrade to April 23 (23.2.1) you must follow the instructions in Patch and Upgrade.   January, 2023 23.1.1 Supports Oracle Unified Directory 12.2.1.4 domain deployment using the January 2023 container image which contains the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.   October, 2022 22.4.1 Supports Oracle Unified Directory 12.2.1.4 domain deployment using the October 2022 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     Changes to deployment of Logging and Visualization with Elasticsearch and Kibana.     OUD container images are now only available from container-registry.oracle.com and are no longer available from My Oracle Support.   July, 2022 22.3.1 Supports Oracle Unified Directory 12.2.1.4 domain deployment using the July 2022 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program. From July 2022 onwards OUD deployment is performed using StatefulSets.   April, 2022 22.2.1 Updated for CRI-O support.   November 2021 21.4.2 Voyager ingress removed as no longer supported.   October 2021 21.4.1 A) References to supported Kubernetes, Helm and Docker versions removed and replaced with Support note reference. B) Namespace and domain names changed to be consistent with Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster. C) Upgrading a Kubernetes Cluster and Security Hardening removed as vendor specific.   November 2020 20.4.1 Initial release of Oracle Unified Directory on Kubernetes.    "
},
{
	"uri": "/fmw-kubernetes/idm-products/oudsm/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "Review the latest changes and known issues for Oracle Unified Directory Services Manager on Kubernetes.\nRecent changes    Date Version Change     January, 2025 25.1.1 Supports Oracle Unified Directory Services Manager 12.2.1.4 domain deployment using the January 2025 container image which contains the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to January 25 (25.1.1) from October 22 (22.4.1) or later, upgrade as follows:     1. Patch the OUDSM container image to January 25     If upgrading to January 25 (25.1.1) from July 22 (22.3.1) or earlier, you must upgrade the following in order:     1. Patch the OUDSM container image to January 25     2. Upgrade Elasticsearch and Kibana.     To upgrade to January 25 (25.1.1) you must follow the instructions in Patch and Upgrade.   October, 2024 24.4.1 Supports Oracle Unified Directory Services Manager 12.2.1.4 domain deployment using the October 2024 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to October 24 (24.4.1) from October 22 (22.4.1) or later, upgrade as follows:     1. Patch the OUDSM container image to October 24     If upgrading to October 24 (24.4.1) from July 22 (22.3.1) or earlier, you must upgrade the following in order:     1. Patch the OUDSM container image to October 24     2. Upgrade Elasticsearch and Kibana.     To upgrade to October 24 (24.4.1) you must follow the instructions in Patch and Upgrade.   July, 2024 24.3.1 Supports Oracle Unified Directory Services Manager 12.2.1.4 domain deployment using the July 2024 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to July 24 (24.3.1) from October 22 (22.4.1) or later, upgrade as follows:     1. Patch the OUDSM container image to July 24     If upgrading to July 24 (24.3.1) from July 22 (22.3.1) or earlier, you must upgrade the following in order:     1. Patch the OUDSM container image to July 24     2. Upgrade Elasticsearch and Kibana.     To upgrade to July 24 (24.3.1) you must follow the instructions in Patch and Upgrade.   April, 2024 24.2.1 Supports Oracle Unified Directory Services Manager 12.2.1.4 domain deployment using the April 2024 container image which contains the April Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to April 24 (24.2.1) from October 22 (22.4.1) or later, upgrade as follows:     1. Patch the OUDSM container image to April 24     If upgrading to April 24 (24.2.1) from July 22 (22.3.1) or earlier, you must upgrade the following in order:     1. Patch the OUDSM container image to April 24     2. Upgrade Elasticsearch and Kibana.     To upgrade to April 24 (24.2.1) you must follow the instructions in Patch and Upgrade.   January, 2024 24.1.1 Supports Oracle Unified Directory Services Manager 12.2.1.4 domain deployment using the January 2024 container image which contains the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to January 24 (24.1.1) from October 22 (22.4.1) or later, upgrade as follows:     1. Patch the OUDSM container image to January 24     If upgrading to January 24 (24.1.1) from July 22 (22.3.1) or earlier, you must upgrade the following in order:     1. Patch the OUDSM container image to January 24     2. Upgrade Elasticsearch and Kibana.     To upgrade to January 24 (24.1.1) you must follow the instructions in Patch and Upgrade.   October, 2023 23.4.1 Supports Oracle Unified Directory Services Manager 12.2.1.4 domain deployment using the October 2023 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to October 23 (23.3.1) from October 22 (22.4.1) or later, upgrade as follows:     1. Patch the OUDSM container image to October 23     If upgrading to October 23 (23.3.1) from July 22 (22.3.1) or earlier, you must upgrade the following in order:     1. Patch the OUDSM container image to October 23     2. Upgrade Elasticsearch and Kibana.     To upgrade to October 23 (23.4.1) you must follow the instructions in Patch and Upgrade.   July, 2023 23.3.1 Supports Oracle Unified Directory Services Manager 12.2.1.4 domain deployment using the July 2023 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to July 23 (23.3.1) from October 22 (22.4.1) or later, upgrade as follows:     1. Patch the OUDSM container image to July 23     If upgrading to July 23 (23.3.1) from July 22 (22.3.1) or earlier, you must upgrade the following in order:     1. Patch the OUDSM container image to July 23     2. Upgrade Elasticsearch and Kibana.     See Patch and Upgrade for these instructions.   April, 2023 23.2.1 Supports Oracle Unified Directory Services Manager 12.2.1.4 domain deployment using the April 2023 container image which contains the April Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to April 23 (23.2.1) from October 22 (22.4.1), upgrade as follows:     1. Patch the OUDSM container image to April 23     If upgrading to April 23 (23.2.1) from July 22 (22.3.1) or earlier, you must upgrade the following in order:     1. Patch the OUDSM container image to April 23     2. Upgrade Elasticsearch and Kibana.     See Patch and Upgrade for these instructions.   January, 2023 23.1.1 Supports Oracle Unified Directory Services Manager 12.2.1.4 domain deployment using the January 2023 container image which contains the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to January 23 (23.1.1) from October 22 (22.4.1) upgrade as follows:     1. Patch the OUDSM container image to January 23     If upgrading to January 23 (23.1.1) from July 22 (22.3.1) or earlier, you must upgrade the following in order:     1. Patch the OUDSM container image to October 23     2. Upgrade Elasticsearch and Kibana.     See Patch and Upgrade for these instructions.   October, 2022 22.4.1 Supports Oracle Unified Directory Services Manager 12.2.1.4 domain deployment using the October 2022 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     Changes to deployment of Logging and Visualization with Elasticsearch and Kibana.     OUDSM container images are now only available from container-registry.oracle.com and are no longer available from My Oracle Support.     If upgrading to October 22 (22.4.1) from a previous release, you must upgrade the following in order:     1. Patch the OUDSM container image to October 22     2. Upgrade Elasticsearch and Kibana.     See Patch and Upgrade for these instructions.   July, 2022 22.3.1 Supports Oracle Unified Directory Services Manager 12.2.1.4 domain deployment using the July 2022 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.   April, 2022 22.2.1 Updated for CRI-O support.   November 2021 21.4.2 Voyager ingress removed as no longer supported.   October 2021 21.4.1 A) References to supported Kubernetes, Helm and Docker versions removed and replaced with Support note reference. B) Namespace and domain names changed to be consistent with Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster. C) Upgrading a Kubernetes Cluster and Security Hardening removed as vendor specific.   November 2020 20.4.1 Initial release of Oracle Unified Directory Services Manager on Kubernetes.    "
},
{
	"uri": "/fmw-kubernetes/ohs/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "Review the latest changes and known issues for Oracle HTTP Server on Kubernetes.\nRecent changes    Date Version Change     January 2025 25.1.1 Supports Oracle HTTP Server 12.2.1.4 deployment using the January 2025 container image which contains the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.   October 2024 24.4.1 Initial release of Oracle HTTP Server on Kubernetes. Supports Oracle HTTP Server 12.2.1.4 deployment using the October 2024 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.    "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/patch_and_upgrade/upgrade-operator-release/",
	"title": "Upgrade an WebLogic Kubernetes Operator release",
	"tags": [],
	"description": "Upgrade the WebLogic Kubernetes Operator release to a newer version.",
	"content": "These instructions apply to upgrading WebLogic Kubernetes Operators within the 3.x release family as additional versions are released.\nTo upgrade WebLogic Kubernetes Operator, use the helm upgrade command. Make sure that the weblogic-kubernetes-operator repository on your local machine is at the WebLogic Kubernetes Operator release to which you are upgrading. When upgrading the WebLogic Kubernetes Operator, the helm upgrade command requires that you supply a new Helm chart and image. For example:\n$ helm upgrade \\ --reuse-values \\ --set image=oracle/weblogic-kubernetes-operator:3.4.2 \\ --namespace weblogic-operator-namespace \\ --wait \\ weblogic-kubernetes-operator \\ kubernetes/charts/weblogic-operator "
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/manage-wcportal-domains/monitoring-and-publishing-logs/publishing-logs/weblogiclogging/",
	"title": "WebLogic logging exporter",
	"tags": [],
	"description": "Use the WebLogic Logging Exporter to publish the WebLogic Server logs to Elasticsearch.",
	"content": "The WebLogic Logging Exporter adds a log event handler to WebLogic Server which enables WebLogic Server to push the logs to Elasticsearch in Kubernetes by using the Elasticsearch REST API. For more details, see to the WebLogic Logging Exporter project.\nThis sample shows you how to publish WebLogic Server logs to Elasticsearch and view them in Kibana. For publishing operator logs, see this sample.\nPrerequisites This document assumes that you have already set up Elasticsearch and Kibana for logs collection. If you have not, please see this document.\n Download the WebLogic Logging Exporter binaries The pre-built binaries are available on the WebLogic Logging Exporter Releases page.\nDownload:\n weblogic-logging-exporter-1.0.0.jar from the release page snakeyaml-1.25.jar from Maven Central  These identifiers are used in the sample commands.\n wcpns: WebCenter Portal domain namespace wcp-domain: domainUID wcp-domain-adminserver: Administration Server pod name   Copy the JAR Files to the WebLogic Domain Home Copy the weblogic-logging-exporter-1.0.0.jar and snakeyaml-1.25.jar files to the domain home directory in the Administration Server pod.\n$ kubectl cp \u0026lt;file-to-copy\u0026gt; \u0026lt;namespace\u0026gt;/\u0026lt;Administration-Server-pod\u0026gt;:\u0026lt;domainhome\u0026gt; $ kubectl cp snakeyaml-1.25.jar wcpns/wcp-domain-adminserver:/u01/oracle/user_projects/domains/wcp-domain/ $ kubectl cp weblogic-logging-exporter-1.0.0.jar wcpns/wcp-domain-adminserver:/u01/oracle/user_projects/domains/wcp-domain/ Add a Startup Class to the Domain Configuration   In the WebLogic Server Administration Console, in the left navigation pane, expand Environment, and then select Startup and Shutdown Classes.\n  Add a new startup class. You may choose any descriptive name, however, the class name must be weblogic.logging.exporter.Startup.\n  Target the startup class to each server from which you want to export logs.\n  In your config.xml file located at, /u01/oracle/user_projects/domains/wcp-domain/config/config.xml the newly added startup-class must exist as shown below:\n$ kubectl exec -it wcp-domain-adminserver -n wcpns cat /u01/oracle/user_projects/domains/wcp-domain/config/config.xml \u0026lt;startup-class\u0026gt; \u0026lt;name\u0026gt;weblogic-logging-exporter\u0026lt;/name\u0026gt; \u0026lt;target\u0026gt;AdminServer,wcp_cluster\u0026lt;/target\u0026gt; \u0026lt;class-name\u0026gt;weblogic.logging.exporter.Startup\u0026lt;/class-name\u0026gt; \u0026lt;/startup-class\u0026gt;   Update the WebLogic Server CLASSPATH  Copy the setDomainEnv.sh file from the pod to a local folder:  $ kubectl cp wcpns/wcp-domain-adminserver:/u01/oracle/user_projects/domains/wcp-domain/bin/setDomainEnv.sh $PWD/setDomainEnv.sh tar: Removing leading `/\u0026#39; from member names Ignore exception: tar: Removing leading '/' from member names\n Update the server class path in setDomainEnv.sh:  CLASSPATH=/u01/oracle/user_projects/domains/wcp-domain/weblogic-logging-exporter-1.0.0.jar:/u01/oracle/user_projects/domains/wcp-domain/snakeyaml-1.25.jar:${CLASSPATH} export CLASSPATH  Copy back the modified setDomainEnv.sh file to the pod:  $ kubectl cp setDomainEnv.sh wcpns/wcp-domain-adminserver:/u01/oracle/user_projects/domains/wcp-domain/bin/setDomainEnv.sh Create a Configuration File for the WebLogic Logging Exporter   Specify the Elasticsearch server host and port number in the file: \u0026lt;$WORKDIR\u0026gt;/logging-services/weblogic-logging-exporter/WebLogicLoggingExporter.yaml\nExample:\nweblogicLoggingIndexName: wls publishHost: elasticsearch.default.svc.cluster.local publishPort: 9300 domainUID: wcp-domain weblogicLoggingExporterEnabled: true weblogicLoggingExporterSeverity: TRACE weblogicLoggingExporterBulkSize: 1   Copy the WebLogicLoggingExporter.yaml file to the domain home directory in the WebLogic Administration Server pod:\n  $ kubectl cp \u0026lt;$WORKDIR\u0026gt;/logging-services/weblogic-logging-exporter/WebLogicLoggingExporter.yaml wcpns/wcp-domain-adminserver:/u01/oracle/user_projects/domains/wcp-domain/config/ Restart the Servers in the Domain To restart the servers, stop and then start them using the following commands:\nTo stop the servers:\n$ kubectl patch domain wcp-domain -n wcpns --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;NEVER\u0026#34; }]\u0026#39; To start the servers:\n$ kubectl patch domain wcp-domain -n wcpns --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;IF_NEEDED\u0026#34; }]\u0026#39; After all the servers are restarted, see their server logs to check that the weblogic-logging-exporter class is called, as shown below:\n======================= WebLogic Logging Exporter Startup class called Reading configuration from file name: /u01/oracle/user_projects/domains/wcp-domain/config/WebLogicLoggingExporter.yaml Config{weblogicLoggingIndexName='wls', publishHost='domain.host.com', publishPort=9200, weblogicLoggingExporterSeverity='Notice', weblogicLoggingExporterBulkSize='2', enabled=true, weblogicLoggingExporterFilters=FilterConfig{expression='NOT(MSGID = 'BEA-000449')', servers=[]}], domainUID='wcp-domain'} Create an Index Pattern in Kibana Create an index pattern wls* in Kibana by navigating to the dashboard through the Management option. After the servers are started, the log data is displayed on the Kibana dashboard:\n"
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/adminguide/configure-load-balancer/apache/",
	"title": "Apache webtier",
	"tags": [],
	"description": "Configure the Apache webtier load balancer for Oracle WebCenter Sites domains.",
	"content": "This section provides information about how to install and configure the Apache webtier to load balance Oracle WebCenter Sites domain clusters. You can configure Apache webtier for non-SSL and SSL termination access of the application URL.\nFollow these steps to set up the Apache webtier as a load balancer for an Oracle WebCenter Sites domain in a Kubernetes cluster:\n Build the Apache webtier image Create the Apache plugin configuration file Prepare the certificate and private key Install the Apache webtier Helm chart Verify domain application URL access Uninstall Apache webtier  Build the Apache webtier image Refer to the sample, to build the Apache webtier Docker image.\nCreate the Apache plugin configuration file   The configuration file named custom_mod_wl_apache.conf should have all the URL routing rules for the Oracle WebCenter Sites applications deployed in the domain that needs to be accessible externally. Update this file with values based on your environment. The file content is similar to below.\n  Click here to see the sample content of the configuration file custom_mod_wl_apache.conf for wcs domain   # Copyright (c) 2018, 2021, Oracle and/or its affiliates. # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. \u0026lt;IfModule mod_weblogic.c\u0026gt; WebLogicHost ${WEBLOGIC_HOST} WebLogicPort 7001 \u0026lt;/IfModule\u0026gt; # Directive for weblogic admin Console deployed on Weblogic Admin Server \u0026lt;Location /console\u0026gt; SetHandler weblogic-handler WebLogicHost wcsitesinfra-adminserver WebLogicPort 7001 \u0026lt;/Location\u0026gt; \u0026lt;Location /em\u0026gt; SetHandler weblogic-handler WebLogicHost wcsitesinfra-adminserver WebLogicPort 7001 \u0026lt;/Location\u0026gt; \u0026lt;Location /wls-exporter\u0026gt; SetHandler weblogic-handler WebLogicHost wcsitesinfra-adminserver WebLogicPort 7001 \u0026lt;/Location\u0026gt; \u0026lt;Location /weblogic\u0026gt; SetHandler weblogic-handler WebLogicHost wcsitesinfra-adminserver WebLogicPort 7001 \u0026lt;/Location\u0026gt; # Directive for all application deployed on weblogic cluster with a prepath defined by LOCATION variable # For example, if the LOCAITON is set to \u0026#39;/weblogic\u0026#39;, all applications deployed on the cluster can be accessed via # http://myhost:myport/weblogic/application_end_url # where \u0026#39;myhost\u0026#39; is the IP of the machine that runs the Apache webtier, and # \u0026#39;myport\u0026#39; is the port that the Apache webtier is publicly exposed to. # Note that LOCATION cannot be set to \u0026#39;/\u0026#39; unless this is the only Location module configured. \u0026lt;Location /sites\u0026gt; WLSRequest On WebLogicCluster wcsitesinfra-cluster-wcsites-cluster:8001 PathTrim /weblogic1 \u0026lt;/Location\u0026gt; \u0026lt;Location /cas\u0026gt; WLSRequest On WebLogicCluster wcsitesinfra-cluster-wcsites-cluster:8001 PathTrim /weblogic1 \u0026lt;/Location\u0026gt; \u0026lt;Location /wls-exporter\u0026gt; WLSRequest On WebLogicCluster wcsitesinfra-cluster-wcsites-cluster:8001 PathTrim /weblogic1 \u0026lt;/Location\u0026gt;      Create a PV and PVC (pv-claim-name) that can be used to store the custom_mod_wl_apache.conf. Refer to the Sample for creating a PV or PVC.\n  Prepare the certificate and private key   (For the SSL termination configuration only) Run the following commands to generate your own certificate and private key using openssl.\n$ cd ${WORKDIR} $ cd charts/apache-samples/custom-sample $ export VIRTUAL_HOST_NAME=WEBLOGIC_HOST $ export SSL_CERT_FILE=WEBLOGIC_HOST.crt $ export SSL_CERT_KEY_FILE=WEBLOGIC_HOST.key $ sh certgen.sh  NOTE: Replace WEBLOGIC_HOST with the host name on which Apache webtier is to be installed.\n   Click here to see the output of the certifcate generation   $ls certgen.sh custom_mod_wl_apache.conf custom_mod_wl_apache.conf_orig input.yaml README.md $ sh certgen.sh Generating certs for WEBLOGIC_HOST Generating a 2048 bit RSA private key ........................+++ .......................................................................+++ unable to write \u0026#39;random state\u0026#39; writing new private key to \u0026#39;apache-sample.key\u0026#39; ----- $ ls certgen.sh custom_mod_wl_apache.conf_orig WEBLOGIC_HOST.info config.txt input.yaml WEBLOGIC_HOST.key custom_mod_wl_apache.conf WEBLOGIC_HOST.crt README.md      Prepare input values for the Apache webtier Helm chart.\nRun the following commands to prepare the input value file for the Apache webtier Helm chart.\n$ base64 -i ${SSL_CERT_FILE} | tr -d \u0026#39;\\n\u0026#39; $ base64 -i ${SSL_CERT_KEY_FILE} | tr -d \u0026#39;\\n\u0026#39; $ touch input.yaml Update the input parameters file, charts/apache-samples/custom-sample/input.yaml.\n  Click here to see the snapshot of the sample input.yaml file   $ cat apache-samples/custom-sample/input.yaml # Use this to provide your own Apache webtier configuration as needed; simply define this # Persistence Volume which contains your own custom_mod_wl_apache.conf file. persistentVolumeClaimName: \u0026lt;pv-claim-name\u0026gt; # The VirtualHostName of the Apache HTTP server. It is used to enable custom SSL configuration. virtualHostName: \u0026lt;WEBLOGIC_HOST\u0026gt; # The customer-supplied certificate to use for Apache webtier SSL configuration. # The value must be a string containing a base64 encoded certificate. Run following command to get it. # base64 -i ${SSL_CERT_FILE} | tr -d \u0026#39;\\n\u0026#39; customCert: \u0026lt;cert_data\u0026gt; # The customer-supplied private key to use for Apache webtier SSL configuration. # The value must be a string containing a base64 encoded key. Run following command to get it. # base64 -i ${SSL_KEY_FILE} | tr -d \u0026#39;\\n\u0026#39; customKey: \u0026lt;key_data\u0026gt;      Install the Apache webtier Helm chart   Install the Apache webtier Helm chart to the domain namespace (for example wcsites-ns) with the specified input parameters:\n$ cd ${WORKDIR}/charts $ helm install apache-webtier --values apache-samples/custom-sample/input.yaml --namespace wcsites-ns apache-webtier --set image=oracle/apache:12.2.1.3   Check the status of the Apache webtier:\n$ kubectl get all -n wcsites-ns | grep apache Sample output of the status of the Apache webtier:\npod/apache-webtier-apache-webtier-65f69dc6bc-zg5pj 1/1 Running 0 22h service/apache-webtier-apache-webtier NodePort 10.108.29.98 \u0026lt;none\u0026gt; 80:30305/TCP,4433:30443/TCP 22h deployment.apps/apache-webtier-apache-webtier 1/1 1 1 22h replicaset.apps/apache-webtier-apache-webtier-65f69dc6bc 1 1 1 22h   Verify domain application URL access After the Apache webtier load balancer is running, verify that the domain applications are accessible through the load balancer port 30305/30443. The application URLs for domain of type wcs are:\n Note: Port 30305 is the LOADBALANCER-Non-SSLPORT and port 30443 is LOADBALANCER-SSLPORT.\n NONSSL configuration http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/weblogic/ready http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/console http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/em http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/sites/version.jsp SSL configuration https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/weblogic/ready https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/console https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/em https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/sites/version.jsp Uninstall Apache webtier $ helm delete apache-webtier -n wcsites-ns "
},
{
	"uri": "/fmw-kubernetes/soa-domains/adminguide/deploying-composites/deploy-artifacts/",
	"title": "Deploy using composites in a persistent volume or image",
	"tags": [],
	"description": "Deploy Oracle SOA Suite and Oracle Service Bus composite applications artifacts in a persistent volume or in an image.",
	"content": "Learn how to deploy Oracle SOA Suite and Oracle Service Bus composite applications artifacts in a Kubernetes persistent volume or in an image to an Oracle SOA Suite environment deployed using a WebLogic Kubernetes Operator.\nThe deployment methods described in Deploy using JDeveloper and Deploy using Maven and Ant are manual processes. If you have the deployment artifacts (archives) already built, then you can package them either into a Kubernetes persistent volume or in an image and use this automated process to deploy the artifacts to an Oracle SOA Suite domain.\nPrepare to use the deploy artifacts script The sample scripts for deploying artifacts are available at ${WORKDIR}/create-soa-domain/domain-home-on-pv/\nYou must edit deploy-artifacts-inputs.yaml (or a copy of it) to provide the details of your domain and artifacts. Refer to the configuration parameters below to understand the information that you must provide in this file.\nConfiguration parameters The following parameters can be provided in the inputs file.\n   Parameter Definition Default     adminPort Port number of the Administration Server inside the Kubernetes cluster. 7001   adminServerName Name of the Administration Server. AdminServer   domainUID Unique ID that is used to identify the domain. This ID cannot contain any characters that are not valid in a Kubernetes service name. soainfra   domainType Type of the domain. Mandatory input for Oracle SOA Suite domains. You must provide one of the supported domain type values: soa (deploys artifacts into an Oracle SOA Suite domain), osb (deploys artifacts into an Oracle Service Bus domain), or soaosb (deploys artifacts into both Oracle SOA Suite and Oracle Service Bus domains). soa   soaClusterName Name of the SOA WebLogic Server cluster instance in the domain. By default, the cluster name is soa_cluster. This configuration parameter is applicable only for soa and soaosb domain types. soa_cluster   image SOA Suite Docker image. The artifacts deployment process requires Oracle SOA Suite 12.2.1.4. Refer to Obtain the Oracle SOA Suite Docker image for details on how to obtain or create the image. soasuite:12.2.1.4   imagePullPolicy Oracle SOA Suite Docker image pull policy. Valid values are IfNotPresent, Always, Never. IfNotPresent   imagePullSecretName Name of the Kubernetes secret to access the Docker Store to pull the Oracle SOA Suite Docker image. The presence of the secret will be validated when this parameter is specified.    weblogicCredentialsSecretName Name of the Kubernetes secret for the Administration Server\u0026rsquo;s user name and password. If not specified, then the value is derived from the domainUID as \u0026lt;domainUID\u0026gt;-weblogic-credentials. soainfra-domain-credentials   namespace Kubernetes namespace in which the domain was created. soans   artifactsSourceType The deploy artifacts source type. Set to PersistentVolume for deploy artifacts available in a persistent volume and Image for deploy artifacts available as an image. Image   persistentVolumeClaimName Name of the persistent volume claim created that hosts the deployment artifacts. If not specified, the value is derived from the domainUID as \u0026lt;domainUID\u0026gt;-deploy-artifacts-pvc. soainfra-deploy-artifacts-pvc   artifactsImage Deploy artifacts image. Required if artifactsSourceType is Image. artifacts:12.2.1.4   artifactsImagePullPolicy Deploy artifacts image pull policy. Valid values are IfNotPresent, Always, Never. IfNotPresent   artifactsImagePullSecretName Name of the Kubernetes secret to access the deploy artifacts image. The presence of the secret will be validated when this parameter is specified.    deployScriptFilesDir Directory on the host machine to locate the required files to deploy artifacts to the Oracle SOA Suite domain, including the script that is specified in the deployScriptName parameter. By default, this directory is set to the relative path deploy. deploy   deployScriptsMountPath Mount path where the deploy artifacts scripts are located inside a pod. The deploy-artifacts.sh script creates a Kubernetes job to run the script (specified by the deployScriptName parameter) in a Kubernetes pod to deploy the artifacts. Files in the deployScriptFilesDir directory are mounted to this location in the pod, so that the Kubernetes pod can use the scripts and supporting files to deploy artifacts. /u01/weblogic   deployScriptName Script that the deploy artifacts script uses to deploy artifacts to the Oracle SOA Suite domain. For Oracle SOA Suite, the script placed in the soa directory is used. For Oracle Service Bus, the script placed in the osb directory is used. The deploy-artifacts.sh script creates a Kubernetes job to run this script to deploy artifacts. The script is located in the in-pod directory that is specified by the deployScriptsMountPath parameter. deploy.sh   soaArtifactsArchivePath Directory inside container where Oracle SOA Suite archives are placed. /u01/sarchives   osbArtifactsArchivePath Directory inside container where Oracle Service Bus archives are placed. /u01/sbarchives    The sample demonstrates how to deploy Oracle SOA Suite composites or Oracle Service Bus applications to an Oracle SOA Suite domain home.\nRun the deploy artifacts script Run the deploy artifacts script, specifying your inputs file and an output directory to store the generated artifacts:\n$ ./deploy-artifacts.sh \\ -i deploy-artifacts-inputs.yaml \\ -o \u0026lt;path to output-directory\u0026gt; The script performs the following steps:\n Creates a directory for the generated Kubernetes YAML files for the artifacts deployment process if it does not already exist. The path name is \u0026lt;path to output-directory\u0026gt;/weblogic-domains/\u0026lt;domainUID\u0026gt;/\u0026lt;YYYYMMDD-hhmmss\u0026gt;. If the directory already exists, its contents must be removed before running this script. Creates a Kubernetes job that starts a utility Oracle SOA Suite container and run scripts to deploy artifacts provided either in an image or in a persistent volume.  Deploy artifacts from an image   Create an image with artifacts\na. A sample Dockerfile to create the artifacts in an image is available at $WORKDIR/create-soa-domain/domain-home-on-pv/deploy-docker-file. This expects the Oracle SOA Suite related archives to be available in the soa directory and Oracle Service Bus archives to be available in the osb directory.\nb. Create the soa directory and copy the Oracle SOA Suite archives to be deployed to the directory:\n$ cd $WORKDIR/create-soa-domain/domain-home-on-pv/deploy-docker-file $ mkdir soa $ cp /path/sca_sampleBPEL.jar soa c. Create the osb directory and copy the Oracle Service Bus archives to be deployed to the directory:\n$ cd $WORKDIR/create-soa-domain/domain-home-on-pv/deploy-docker-file $ mkdir osb $ cp /path/simple_sbconfig.jar osb d. Create the image using build.sh. This script creates the image with default tag 12.2.1.4 (artifacts:12.2.1.4):\n$ cd $WORKDIR/create-soa-domain/domain-home-on-pv/deploy-docker-file $ ./build.sh -h Usage: build.sh -t [tag] Builds a Docker Image with Oracle SOA/OSB artifacts Parameters: -h: view usage -t: tag for image, default is 12.2.1.4    Click here to see sample output of script with tag 12.2.1.4-v1    ``` $ ./build.sh -t 12.2.1.4-v1 Sending build context to Docker daemon 36.35kB Step 1/13 : FROM busybox ---\u0026gt; 16ea53ea7c65 Step 2/13 : ARG SOA_ARTIFACTS_ARCHIVE_PATH=/u01/sarchives ---\u0026gt; Using cache ---\u0026gt; 411edf07f267 Step 3/13 : ARG OSB_ARTIFACTS_ARCHIVE_PATH=/u01/sbarchives ---\u0026gt; Using cache ---\u0026gt; c4214b9cf0ae Step 4/13 : ARG USER=oracle ---\u0026gt; Using cache ---\u0026gt; c8ebcd5ee546 Step 5/13 : ARG USERID=1000 ---\u0026gt; Using cache ---\u0026gt; 5780beb0c3cf Step 6/13 : ARG GROUP=root ---\u0026gt; Using cache ---\u0026gt; 048e67c71f92 Step 7/13 : ENV SOA_ARTIFACTS_ARCHIVE_PATH=${SOA_ARTIFACTS_ARCHIVE_PATH} ---\u0026gt; Using cache ---\u0026gt; 31ae33cfd9bb Step 8/13 : ENV OSB_ARTIFACTS_ARCHIVE_PATH=${OSB_ARTIFACTS_ARCHIVE_PATH} ---\u0026gt; Using cache ---\u0026gt; 79602bf64dc0 Step 9/13 : RUN adduser -D -u ${USERID} -G $GROUP $USER ---\u0026gt; Using cache ---\u0026gt; 07c12cea52f9 Step 10/13 : COPY soa/ ${SOA_ARTIFACTS_ARCHIVE_PATH}/ ---\u0026gt; bfeb138516d8 Step 11/13 : COPY osb/ ${OSB_ARTIFACTS_ARCHIVE_PATH}/ ---\u0026gt; 0359a11f8f76 Step 12/13 : RUN chown -R $USER:$GROUP ${SOA_ARTIFACTS_ARCHIVE_PATH}/ ${OSB_ARTIFACTS_ARCHIVE_PATH}/ ---\u0026gt; Running in 285fb2bd8434 Removing intermediate container 285fb2bd8434 ---\u0026gt; 2e8d8c337de0 Step 13/13 : USER $USER ---\u0026gt; Running in c9db494e46ab Removing intermediate container c9db494e46ab ---\u0026gt; 40295aa15317 Successfully built 40295aa15317 Successfully tagged artifacts:12.2.1.4-v1 INFO: Artifacts image for Oracle SOA suite is ready to be extended. --\u0026gt; artifacts:12.2.1.4-v1 INFO: Build completed in 4 seconds. ```      Update the image details in deploy-artifacts-inputs.yaml for parameter artifactsImage and invoke deploy-artifacts.sh to perform deployment of artifacts.\n  Click here to see sample output of deployment for domainType of soaosb   $ ./deploy-artifacts.sh -i deploy-artifacts-inputs.yaml -o out-deploy Input parameters being used export version=\u0026quot;deploy-artifacts-inputs-v1\u0026quot; export adminPort=\u0026quot;7001\u0026quot; export adminServerName=\u0026quot;AdminServer\u0026quot; export domainUID=\u0026quot;soainfra\u0026quot; export domainType=\u0026quot;soaosb\u0026quot; export soaClusterName=\u0026quot;soa_cluster\u0026quot; export soaManagedServerPort=\u0026quot;7003\u0026quot; export image=\u0026quot;soasuite:12.2.1.4\u0026quot; export imagePullPolicy=\u0026quot;IfNotPresent\u0026quot; export weblogicCredentialsSecretName=\u0026quot;soainfra-domain-credentials\u0026quot; export namespace=\u0026quot;soans\u0026quot; export artifactsSourceType=\u0026quot;Image\u0026quot; export artifactsImage=\u0026quot;artifacts:12.2.1.4-v1\u0026quot; export artifactsImagePullPolicy=\u0026quot;IfNotPresent\u0026quot; export deployScriptsMountPath=\u0026quot;/u01/weblogic\u0026quot; export deployScriptName=\u0026quot;deploy.sh\u0026quot; export deployScriptFilesDir=\u0026quot;deploy\u0026quot; export soaArtifactsArchivePath=\u0026quot;/u01/sarchives\u0026quot; export osbArtifactsArchivePath=\u0026quot;/u01/sbarchives\u0026quot; Generating out-deploy/deploy-artifacts/soainfra/20211022-152335/deploy-artifacts-job.yaml Checking to see if the secret soainfra-domain-credentials exists in namespace soans configmap/soainfra-deploy-scripts-soa-job-cm created Checking the configmap soainfra-deploy-scripts-soa-job-cm was created configmap/soainfra-deploy-scripts-soa-job-cm labeled configmap/soainfra-deploy-scripts-osb-job-cm created Checking the configmap soainfra-deploy-scripts-osb-job-cm was created configmap/soainfra-deploy-scripts-osb-job-cm labeled Checking if object type job with name soainfra-deploy-artifacts-job-20211022-152335 exists Deploying artifacts by creating the job out-deploy/deploy-artifacts/soainfra/20211022-152335/deploy-artifacts-job.yaml job.batch/soainfra-deploy-artifacts-job-20211022-152335 created Waiting for the job to complete... status on iteration 1 of 20 for soainfra pod soainfra-deploy-artifacts-job-20211022-152335-r7ffj status is NotReady status on iteration 2 of 20 for soainfra pod soainfra-deploy-artifacts-job-20211022-152335-r7ffj status is Completed configmap \u0026quot;soainfra-deploy-scripts-soa-job-cm\u0026quot; deleted configmap \u0026quot;soainfra-deploy-scripts-osb-job-cm\u0026quot; deleted The following files were generated: out-deploy/deploy-artifacts/soainfra/20211022-152335/deploy-artifacts-inputs.yaml out-deploy/deploy-artifacts/soainfra/20211022-152335/deploy-artifacts-job.yaml Completed $ kubectl get all -n soans|grep deploy pod/soainfra-deploy-artifacts-job-20211022-152335-r7ffj 0/2 Completed 0 15m job.batch/soainfra-deploy-artifacts-job-20211022-152335 1/1 43s 15m $     Note: When you are running the script for domainType soaosb, a deployment pod is created with two containers, one for Oracle SOA Suite artifacts deployments and another for Oracle Service Bus artifacts deployments. When the deployment completes for one container while other container is still running, the pod status will move from Ready to NotReady. Once both the deployments complete successfully, the status of the pod moves to Completed.\n   Deploy artifacts from a persistent volume   Copy the artifacts for Oracle SOA Suite to the soa directory and Oracle Service Bus to the osb directory at the share location. For example, with location /share, artifacts for Oracle SOA Suite are in /share/soa and Oracle Service Bus are in /share/osb.\n$ ls /share/soa sca_sampleBPEL.jar $ $ ls /share/osb/ simple_sbconfig.jar $   Create a PersistentVolume with the sample provided (artifacts-pv.yaml):\napiVersion: v1 kind: PersistentVolume metadata: name: soainfra-deploy-artifacts-pv spec: storageClassName: deploy-storage-class capacity: storage: 10Gi accessModes: - ReadOnlyMany persistentVolumeReclaimPolicy: Retain hostPath: path: \u0026quot;/share\u0026quot; $ kubectl apply -f artifacts-pv.yaml   Create a PersistentVolumeClaim with the sample provided (artifacts-pvc.yaml):\napiVersion: v1 kind: PersistentVolumeClaim metadata: name: soainfra-deploy-artifacts-pvc namespace: soans spec: storageClassName: deploy-storage-class accessModes: - ReadOnlyMany resources: requests: storage: 10Gi $ kubectl apply -f artifacts-pvc.yaml   Update the artifactsSourceType to PersistentVolume and provide the name for persistentVolumeClaimName in deploy-artifacts-inputs.yaml.\n  Invoke deploy-artifacts.sh to deploy artifacts for artifacts present in persistentVolumeClaimName.\n  Click here to see sample output of deployment for domainType of soaosb   $ ./deploy-artifacts.sh -i deploy-artifacts-inputs.yaml -o out-deploy Input parameters being used export version=\u0026quot;deploy-artifacts-inputs-v1\u0026quot; export adminPort=\u0026quot;7001\u0026quot; export adminServerName=\u0026quot;AdminServer\u0026quot; export domainUID=\u0026quot;soainfra\u0026quot; export domainType=\u0026quot;soaosb\u0026quot; export soaClusterName=\u0026quot;soa_cluster\u0026quot; export soaManagedServerPort=\u0026quot;7003\u0026quot; export image=\u0026quot;soasuite:12.2.1.4\u0026quot; export imagePullPolicy=\u0026quot;IfNotPresent\u0026quot; export weblogicCredentialsSecretName=\u0026quot;soainfra-domain-credentials\u0026quot; export namespace=\u0026quot;soans\u0026quot; export artifactsSourceType=\u0026quot;PersistentVolume\u0026quot; export persistentVolumeClaimName=\u0026quot;soainfra-deploy-artifacts-pvc\u0026quot; export deployScriptsMountPath=\u0026quot;/u01/weblogic\u0026quot; export deployScriptName=\u0026quot;deploy.sh\u0026quot; export deployScriptFilesDir=\u0026quot;deploy\u0026quot; export soaArtifactsArchivePath=\u0026quot;/u01/sarchives\u0026quot; export osbArtifactsArchivePath=\u0026quot;/u01/sbarchives\u0026quot; Generating out-deploy/deploy-artifacts/soainfra/20211022-164735/deploy-artifacts-job.yaml Checking to see if the secret soainfra-domain-credentials exists in namespace soans configmap/soainfra-deploy-scripts-soa-job-cm created Checking the configmap soainfra-deploy-scripts-soa-job-cm was created configmap/soainfra-deploy-scripts-soa-job-cm labeled configmap/soainfra-deploy-scripts-osb-job-cm created Checking the configmap soainfra-deploy-scripts-osb-job-cm was created configmap/soainfra-deploy-scripts-osb-job-cm labeled Checking if object type job with name soainfra-deploy-artifacts-job-20211022-164735 exists Deploying artifacts by creating the job out-deploy/deploy-artifacts/soainfra/20211022-164735/deploy-artifacts-job.yaml job.batch/soainfra-deploy-artifacts-job-20211022-164735 created Waiting for the job to complete... status on iteration 1 of 20 for soainfra pod soainfra-deploy-artifacts-job-20211022-164735-66fvn status is NotReady status on iteration 2 of 20 for soainfra pod soainfra-deploy-artifacts-job-20211022-164735-66fvn status is Completed configmap \u0026quot;soainfra-deploy-scripts-soa-job-cm\u0026quot; deleted configmap \u0026quot;soainfra-deploy-scripts-osb-job-cm\u0026quot; deleted The following files were generated: out-deploy/deploy-artifacts/soainfra/20211022-164735/deploy-artifacts-inputs.yaml out-deploy/deploy-artifacts/soainfra/20211022-164735/deploy-artifacts-job.yaml Completed $ kubectl get all -n soans |grep deploy pod/soainfra-deploy-artifacts-job-20211022-164735-66fvn 0/2 Completed 0 3m1s job.batch/soainfra-deploy-artifacts-job-20211022-164735 1/1 37s 3m1s $     Note: When you are running the script for domainType of soaosb, a deployment pod is created with two containers, one for Oracle SOA Suite artifacts deployments and one for Oracle Service Bus artifacts deployments. When the deployment completes for one container while other container is still running, the pod status moves from Ready to NotReady. Once both the deployments successfully complete, the status of the pod moves to Completed.\n   Verify the deployment logs To confirm the deployment of artifacts was successful, verify the output using the kubectl logs command:\n Note: Replace \u0026lt;YYYYMMDD-hhmmss\u0026gt;, \u0026lt;domainUID\u0026gt; and \u0026lt;namespace\u0026gt; with values for your environment.\n For Oracle SOA Suite artifacts:\n$ kubectl logs job.batch/\u0026lt;domainUID\u0026gt;-deploy-artifacts-job-\u0026lt;YYYYMMDD-hhmmss\u0026gt; -n \u0026lt;namespace\u0026gt; soa-deploy-artifacts-job For Oracle Service Bus artifacts:\n$ kubectl logs job.batch/\u0026lt;domainUID\u0026gt;-deploy-artifacts-job-\u0026lt;YYYYMMDD-hhmmss\u0026gt; -n \u0026lt;namespace\u0026gt; osb-deploy-artifacts-job "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/adminguide/",
	"title": "Administration Guide",
	"tags": [],
	"description": "Describes how to use some of the common utility tools and configurations to administer Oracle WebCenter Content domains.",
	"content": "Administer Oracle WebCenter Content domains in Kubernetes.\n Set up a load balancer  Configure different load balancers for Oracle WebCenter Content domains.\n Monitor an Oracle WebCenter Content domain  Use the WebLogic Monitoring Exporter to monitor an Oracle WebCenter Content instance using Prometheus and Grafana.\n Elasticsearch integration for logs  Monitor an Oracle WebCenter Sites domain and publish the WebLogic Server logs to Elasticsearch.\n Publish logs to Elasticsearch  Use the WebLogic Logging Exporter to publish the WebLogic Server logs to Elasticsearch.\n Publish logs to Elasticsearch Using Fluentd  Configure a WebLogic domain to use Fluentd to send log information to Elasticsearch.\n Configure an additional mount or shared space to a domain for Imaging and Capture  Configure an additional mount or shared space to a domain, for WebCenter Imaging and WebCenter Capture\n "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/installguide/create-wccontent-domains/",
	"title": "Create Oracle WebCenter Content domain",
	"tags": [],
	"description": "Create Oracle WebCenter Content domain home on an existing PV or PVC and create the domain resource YAML file for deploying the generated Oracle WebCenter Content domain.",
	"content": "The WebCenter Content deployment scripts demonstrate the creation of Oracle WebCenter Content domain home on an existing Kubernetes persistent volume (PV) and persistent volume claim (PVC). The scripts also generate the domain YAML file, which can then be used to start the Kubernetes artifacts of the corresponding domain.\nContents  Prerequisites Prepare to use the create domain script Configuration parameters Run the create domain script Run the managed-server-wrapper script Verify the results Verify the domain Verify the pods Verify the services Scale-up/down Managed Server Counts Details required for configuring IBR provider on UCM Configure an additional mount or shared space to a domain for Imaging and Capture  Prerequisites Before you begin, complete the following steps:\n Review the Domain resource documentation. Review the requirements and limitations. Ensure that you have executed all the preliminary steps in Prepare your environment. Ensure that the database schemas were created and the WebLogic Kubernetes Operator are running.  Prepare to use the create domain script The sample scripts for Oracle WebCenter Content domain deployment are available at ${WORKDIR}/create-wcc-domain.\nYou must edit create-domain-inputs.yaml (or a copy of it) located under ${WORKDIR}/create-wcc-domain/domian-home-on-pv to provide the details for your domain. Refer to the configuration parameters below to understand the information that you must provide in this file.\nConfiguration parameters The following parameters can be provided in the inputs file.\n   Parameter Definition Default     sslEnabled Boolean indicating whether to enable SSL for each WebLogic Server instance. false   adminPort Port number for the Administration Server inside the Kubernetes cluster. 7001   adminServerSSLPort SSL port number of the Administration Server inside the Kubernetes cluster. 7002   adminNodePort Port number of the Administration Server outside the Kubernetes cluster. 30701   adminServerName Name of the Administration Server. AdminServer   clusterName Name of the WebLogic cluster instance to generate for the domain. By default the cluster name is ucm_cluster \u0026amp; ibr_cluster for the WebCenter Content domain. ucm_cluster   configuredManagedServerCount Number of Managed Server instances to generate for the domain. 5   createDomainFilesDir Directory on the host machine to locate all the files to create a WebLogic domain, including the script that is specified in the createDomainScriptName property. By default, this directory is set to the relative path wlst, and the create script will use the built-in WLST offline scripts in the wlst directory to create the WebLogic domain. An absolute path is also supported to point to an arbitrary directory in the file system. The built-in scripts can be replaced by the user-provided scripts as long as those files are in the specified directory. Files in this directory are put into a Kubernetes config map, which in turn is mounted to the createDomainScriptsMountPath, so that the Kubernetes pod can use the scripts and supporting files to create a domain home. wlst   createDomainScriptsMountPath Mount path where the create domain scripts are located inside a pod. The create-domain.sh script creates a Kubernetes job to run the script (specified in the createDomainScriptName property) in a Kubernetes pod to create a domain home. Files in the createDomainFilesDir directory are mounted to this location in the pod, so that the Kubernetes pod can use the scripts and supporting files to create a domain home. /u01/weblogic   createDomainScriptName Script that the create domain script uses to create a WebLogic domain. The create-domain.sh script creates a Kubernetes job to run this script to create a domain home. The script is located in the in-pod directory that is specified in the createDomainScriptsMountPath property. If you need to provide your own scripts to create the domain home, instead of using the built-it scripts, you must use this property to set the name of the script that you want the create domain job to run. create-domain-job.sh   domainHome Home directory of the WebCenter Content domain. If not specified, the value is derived from the domainUID as /shared/domains/\u0026lt;domainUID\u0026gt;. /u01/oracle/user_projects/domains/wccinfra   domainPVMountPath Mount path of the domain persistent volume. /u01/oracle/user_projects   domainUID Unique ID that will be used to identify this particular domain. Used as the name of the generated WebLogic domain as well as the name of the Kubernetes domain resource. This ID must be unique across all domains in a Kubernetes cluster. This ID cannot contain any character that is not valid in a Kubernetes service name. wccinfra   exposeAdminNodePort Boolean indicating if the Administration Server is exposed outside of the Kubernetes cluster. false   exposeAdminT3Channel Boolean indicating if the T3 administrative channel is exposed outside the Kubernetes cluster. false   image WebCenter Content Docker image. WebLogic Kubernetes Operator requires Oracle WebCenter Content 12.2.1.4.0 Refer to Obtain the Oracle WebCenter Content Docker image for details on how to obtain or create the image. oracle/wccontent:12.2.1.4.0   imagePullPolicy WebLogic Docker image pull policy. Legal values are IfNotPresent, Always, or Never. IfNotPresent   imagePullSecretName Name of the Kubernetes secret to access the Docker Store to pull the WebLogic Server Docker image. The presence of the secret will be validated when this parameter is specified.    includeServerOutInPodLog Boolean indicating whether to include the server .out to the pod\u0026rsquo;s stdout. true   initialManagedServerReplicas Number of UCM Managed Servers to initially start for the domain. 3   javaOptions Java options for starting the Administration Server and Managed Servers. A Java option can have references to one or more of the following pre-defined variables to obtain WebLogic domain information: $(DOMAIN_NAME), $(DOMAIN_HOME), $(ADMIN_NAME), $(ADMIN_PORT), and $(SERVER_NAME). If sslEnabled is set to true and the WebLogic demo certificate is used, add -Dweblogic.security.SSL.ignoreHostnameVerification=true to allow the Managed Servers to connect to the Administration Server while booting up. The WebLogic generated demo certificate in this environment typically contains a host name that is different from the runtime container\u0026rsquo;s host name. -Dweblogic.StdoutDebugEnabled=false   logHome The in-pod location for the domain log, server logs, server out, and Node Manager log files. If not specified, the value is derived from the domainUID as /shared/logs/\u0026lt;domainUID\u0026gt;. /u01/oracle/user_projects/domains/logs/wccinfra   managedServerNameBase Base string used to generate Managed Server names. ucm_server   managedServerPort Port number for each Managed Server. By default the managedServerPort is 16200 for the ucm_server \u0026amp; managedServerPort is 16250 for the ibr_server. 16200   managedServerSSLPort SSL port number for each Managed Server. By default the managedServerSSLPort is 16201 for the ucm_server \u0026amp; managedServerSSLPort is 16251 for the ibr_server. 16201   namespace Kubernetes namespace in which to create the domain. wccns   persistentVolumeClaimName Name of the persistent volume claim created to host the domain home. If not specified, the value is derived from the domainUID as \u0026lt;domainUID\u0026gt;-weblogic-sample-pvc. wccinfra-domain-pvc   productionModeEnabled Boolean indicating if production mode is enabled for the domain. true   serverStartPolicy Determines which WebLogic Server instances will be started. Legal values are NEVER, IF_NEEDED, ADMIN_ONLY. IF_NEEDED   t3ChannelPort Port for the t3 channel of the NetworkAccessPoint. 30012   t3PublicAddress Public address for the T3 channel. This should be set to the public address of the Kubernetes cluster. This would typically be a load balancer address. For development environments only: In a single server (all-in-one) Kubernetes deployment, this may be set to the address of the master, or at the very least, it must be set to the address of one of the worker nodes. If not provided, the script will attempt to set it to the IP address of the Kubernetes cluster   weblogicCredentialsSecretName Name of the Kubernetes secret for the Administration Server\u0026rsquo;s user name and password. If not specified, then the value is derived from the domainUID as \u0026lt;domainUID\u0026gt;-weblogic-credentials. wccinfra-domain-credentials   weblogicImagePullSecretName Name of the Kubernetes secret for the Docker Store, used to pull the WebLogic Server image.    serverPodCpuRequest, serverPodMemoryRequest, serverPodCpuCLimit, serverPodMemoryLimit The maximum amount of compute resources allowed, and minimum amount of compute resources required, for each server pod. Please refer to the Kubernetes documentation on Managing Compute Resources for Containers for details. Resource requests and resource limits are not specified.   rcuSchemaPrefix The schema prefix to use in the database, for example WCC1. You may wish to make this the same as the domainUID in order to simplify matching domains to their RCU schemas. WCC1   rcuDatabaseURL The database URL. \u0026lt;YOUR DATABASE CONNECTION DETAILS\u0026gt;   rcuCredentialsSecret The Kubernetes secret containing the database credentials. wccinfra-rcu-credentials   ipmEnabled Boolean indicating whether to enable WebCenter Imaging application false   captureEnabled Boolean indicating whether to enable WebCenter Capture application false   adfuiEnabled Boolean indicating whether to enable WebCenter ADF UI application false   initialIpmServerReplicas Number of IPM Managed Servers to initially start for the domain. 0   initialCaptureServerReplicas Number of CAPTURE Managed Servers to initially start for the domain. 0   initialAdfuiServerReplicas Number of ADFUI Managed Servers to initially start for the domain. 0    Note that the names of the Kubernetes resources in the generated YAML files may be formed with the value of some of the properties specified in the create-inputs.yaml file. Those properties include the adminServerName, clusterName and managedServerNameBase. If those values contain any characters that are invalid in a Kubernetes service name, those characters are converted to valid values in the generated YAML files. For example, an uppercase letter is converted to a lowercase letter and an underscore (\u0026quot;_\u0026quot;) is converted to a hyphen (\u0026quot;-\u0026quot;).\n Note: The properties ipmEnabled, captureEnabled, adfuiEnabled are set to false by default and should be updated to true if you need to enable the respective applications. If any of those three applications (IPM, CAPTURE \u0026amp; ADFUI) are enabled, respective initial replica count must be a non-zero number.\n The sample demonstrates how to create the Oracle WebCenter Content domain home and associated Kubernetes resources for that domain. In addition, the sample provides the capability for users to supply their own scripts to create the domain home for other use cases. The generated domain YAML file could also be modified to cover more use cases.\nRun the create domain script Run the create domain script, specifying your inputs file and an output directory to store the generated artifacts:\n$ cd ${WORKDIR}/create-wcc-domain/domain-home-on-pv/ $ ./create-domain.sh \\ -i create-domain-inputs.yaml \\ -o \u0026lt;path to output-directory\u0026gt; The script will perform the following steps:\n Create a directory for the generated Kubernetes YAML files for this domain if it does not already exist. The path name is \u0026lt;path to output-directory\u0026gt;/weblogic-domains/\u0026lt;domainUID\u0026gt;. If the directory already exists, its contents must be removed before using this script. Create a Kubernetes job that will start up a utility Oracle WebCenter Content container and run offline WLST scripts to create the domain on the shared storage. Run and wait for the job to finish. Create a Kubernetes domain YAML file, domain.yaml, in the \u0026ldquo;output\u0026rdquo; directory that was created above. This YAML file can be used to create the Kubernetes resource using the kubectl create -f or kubectl apply -f command. Create a convenient utility script, delete-domain-job.yaml, to clean up the domain home created by the create script.  Run the managed-server-wrapper script Run managed-server-wrapper script, which internally applies the domain YAML. This script also applies initial configurations for Managed Server containers and readies Managed Servers for future inter-container communications.\n$ cd ${WORKDIR}/create-wcc-domain/domain-home-on-pv/ $ ./start-managed-servers-wrapper.sh -o \u0026lt;path_to_output_directory\u0026gt; -p \u0026lt;load_balancer_port\u0026gt; -n \u0026lt;ibr_node_port\u0026gt; -m \u0026lt;ucm_node_port\u0026gt; -s \u0026lt;ssl_termination\u0026gt;  Note: In the above command, parameters -n and -m refers to the node-ports to be used for exposing IBR intradoc port and UCM intradoc port respectively. Suggested values for both these node-ports should be within a range of 30000-32767. Please keep in mind that \u0026lt;ibr_node_port\u0026gt; value must be specified at all time, whereas \u0026lt;ucm_node_port\u0026gt; value is only required when IPM and ADFUI Managed Servers are enabled. A value for parameter -s needs to be provided only if SSL termination at loadbalancer is being used - acceptable value is either true or false. If this parameter value is not supplied, the script assumes that ssl termination at loadbalancer is not being used and by default the value will be taken as false.\n Run the startup configuration scripts for IPM and WCCADF applications as applicable Run the script configure-ipm-connection.sh to do startup configurations if IPM is enabled.\n$ cd ${WORKDIR}/create-wcc-domain/domain-home-on-pv/ $ ./configure-ipm-connection.sh -l \u0026lt;load_balancer_external_ip\u0026gt; -p \u0026lt;load_balancer_port\u0026gt; Run the script configure-wccadf-domain.sh to do startup configurations if ADFUI is enabled.\n$ cd ${WORKDIR}/create-wcc-domain/domain-home-on-pv/ $ ./configure-wccadf-domain.sh -n \u0026lt;node_ip\u0026gt; Patch the domain for the changes to be applied to the domain.\n#STOP $ kubectl patch domain DOMAINUID -n NAMESPACE --type='json' -p='[{\u0026quot;op\u0026quot;: \u0026quot;replace\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/spec/serverStartPolicy\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;NEVER\u0026quot; }]' $ sleep 2m #START $ kubectl patch domain DOMAINUID -n NAMESPACE --type='json' -p='[{\u0026quot;op\u0026quot;: \u0026quot;replace\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/spec/serverStartPolicy\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;IF_NEEDED\u0026quot; }]' The default domain created by the script has the following characteristics:\n An Administration Server named AdminServer listening on port 7001. A configured cluster named ucm_cluster of size 3. A configured cluster named ibr_cluster of size 1. A configured cluster named ipm_cluster of size 3. A configured cluster named capture_cluster of size 3. A configured cluster named wccadf_cluster of size 3. Managed Servers, named ucm_cluster listening on port 16200. Managed Servers, named ibr_cluster listening on port 16250. Managed Servers, named ipm_cluster listening on port 16000. Managed Servers, named capture_cluster listening on port 16400. Managed Servers, named wccadf_cluster listening on port 16225. Log files that are located in /shared/logs/\u0026lt;domainUID\u0026gt;.  Verify the results The create domain script will verify that the domain was created, and will report failure if there was any error. However, it may be desirable to manually verify the domain, even if just to gain familiarity with the various Kubernetes objects that were created by the script.\nGenerated YAML files with the default inputs   Click here to see sample content of the generated `domain.yaml`.   $ cat output/weblogic-domains/wccinfra/domain.yaml # Copyright (c) 2021, Oracle and/or its affiliates. # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. # # This is an example of how to define a Domain resource. # apiVersion: \u0026quot;weblogic.oracle/v8\u0026quot; kind: Domain metadata: name: wccinfra namespace: wccns labels: weblogic.domainUID: wccinfra spec: # The WebLogic Domain Home domainHome: /u01/oracle/user_projects/domains/wccinfra maxClusterConcurrentStartup: 1 # The domain home source type # Set to PersistentVolume for domain-in-pv, Image for domain-in-image, or FromModel for model-in-image domainHomeSourceType: PersistentVolume # The WebLogic Server Docker image that WebLogic Kubernetes Operator uses to start the domain image: \u0026quot;oracle/wccontent:12.2.1.4.0\u0026quot; # imagePullPolicy defaults to \u0026quot;Always\u0026quot; if image version is :latest imagePullPolicy: \u0026quot;IfNotPresent\u0026quot; # Identify which Secret contains the credentials for pulling an image #imagePullSecrets: #- name: # Identify which Secret contains the WebLogic Admin credentials (note that there is an example of # how to create that Secret at the end of this file) webLogicCredentialsSecret: name: wccinfra-domain-credentials # Whether to include the server out file into the pod's stdout, default is true includeServerOutInPodLog: true # Whether to enable log home logHomeEnabled: true # Whether to write HTTP access log file to log home httpAccessLogInLogHome: true # The in-pod location for domain log, server logs, server out, and Node Manager log files logHome: /u01/oracle/user_projects/domains/logs/wccinfra # An (optional) in-pod location for data storage of default and custom file stores. # If not specified or the value is either not set or empty (e.g. dataHome: \u0026quot;\u0026quot;) then the # data storage directories are determined from the WebLogic domain home configuration. dataHome: \u0026quot;\u0026quot; # serverStartPolicy legal values are \u0026quot;NEVER\u0026quot;, \u0026quot;IF_NEEDED\u0026quot;, or \u0026quot;ADMIN_ONLY\u0026quot; # This determines which WebLogic Servers the WebLogic Kubernetes Operator will start up when it discovers this Domain # - \u0026quot;NEVER\u0026quot; will not start any server in the domain # - \u0026quot;ADMIN_ONLY\u0026quot; will start up only the administration server (no managed servers will be started) # - \u0026quot;IF_NEEDED\u0026quot; will start all non-clustered servers, including the administration server and clustered servers up to the replica count serverStartPolicy: \u0026quot;IF_NEEDED\u0026quot; serverPod: # an (optional) list of environment variable to be set on the servers env: - name: JAVA_OPTIONS value: \u0026quot;-Dweblogic.StdoutDebugEnabled=false\u0026quot; - name: USER_MEM_ARGS value: \u0026quot;-Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx512m \u0026quot; volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: wccinfra-domain-pvc volumeMounts: - mountPath: /u01/oracle/user_projects/domains name: weblogic-domain-storage-volume # adminServer is used to configure the desired behavior for starting the administration server. adminServer: # serverStartState legal values are \u0026quot;RUNNING\u0026quot; or \u0026quot;ADMIN\u0026quot; # \u0026quot;RUNNING\u0026quot; means the listed server will be started up to \u0026quot;RUNNING\u0026quot; mode # \u0026quot;ADMIN\u0026quot; means the listed server will be start up to \u0026quot;ADMIN\u0026quot; mode serverStartState: \u0026quot;RUNNING\u0026quot; adminService: channels: # The Admin Server's NodePort - channelName: default nodePort: 30701 # Uncomment to export the T3Channel as a service # - channelName: T3Channel # clusters is used to configure the desired behavior for starting member servers of a cluster. # If you use this entry, then the rules will be applied to ALL servers that are members of the named clusters. clusters: - clusterName: ibr_cluster serverService: precreateService: true serverStartState: \u0026quot;RUNNING\u0026quot; serverPod: # Instructs Kubernetes scheduler to prefer nodes for new cluster members where there are not # already members of the same cluster. affinity: podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 100 podAffinityTerm: labelSelector: matchExpressions: - key: \u0026quot;weblogic.clusterName\u0026quot; operator: In values: - $(CLUSTER_NAME) topologyKey: \u0026quot;kubernetes.io/hostname\u0026quot; replicas: 1 serverStartPolicy: \u0026quot;IF_NEEDED\u0026quot; # The number of managed servers to start for unlisted clusters # replicas: 1 # Istio # configuration: # istio: # enabled: # readinessPort: - clusterName: ucm_cluster clusterService: annotations: traefik.ingress.kubernetes.io/affinity: \u0026quot;true\u0026quot; traefik.ingress.kubernetes.io/service.sticky.cookie: \u0026quot;true\u0026quot; traefik.ingress.kubernetes.io/session-cookie-name: JSESSIONID serverService: precreateService: true serverStartState: \u0026quot;RUNNING\u0026quot; serverPod: # Instructs Kubernetes scheduler to prefer nodes for new cluster members where there are not # already members of the same cluster. affinity: podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 100 podAffinityTerm: labelSelector: matchExpressions: - key: \u0026quot;weblogic.clusterName\u0026quot; operator: In values: - $(CLUSTER_NAME) topologyKey: \u0026quot;kubernetes.io/hostname\u0026quot; replicas: 3 serverStartPolicy: \u0026quot;IF_NEEDED\u0026quot; # The number of managed servers to start for unlisted clusters # replicas: 1 - clusterName: ipm_cluster clusterService: annotations: traefik.ingress.kubernetes.io/affinity: \u0026quot;true\u0026quot; traefik.ingress.kubernetes.io/service.sticky.cookie: \u0026quot;true\u0026quot; traefik.ingress.kubernetes.io/session-cookie-name: JSESSIONID serverService: precreateService: true serverStartState: \u0026quot;RUNNING\u0026quot; serverPod: # Instructs Kubernetes scheduler to prefer nodes for new cluster members where there are not # already members of the same cluster. affinity: podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 100 podAffinityTerm: labelSelector: matchExpressions: - key: \u0026quot;weblogic.clusterName\u0026quot; operator: In values: - $(CLUSTER_NAME) topologyKey: \u0026quot;kubernetes.io/hostname\u0026quot; replicas: 3 # The number of managed servers to start for unlisted clusters # replicas: 1 - clusterName: capture_cluster clusterService: annotations: traefik.ingress.kubernetes.io/affinity: \u0026quot;true\u0026quot; traefik.ingress.kubernetes.io/service.sticky.cookie: \u0026quot;true\u0026quot; traefik.ingress.kubernetes.io/session-cookie-name: JSESSIONID serverService: precreateService: true serverStartState: \u0026quot;RUNNING\u0026quot; serverPod: # Instructs Kubernetes scheduler to prefer nodes for new cluster members where there are not # already members of the same cluster. affinity: podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 100 podAffinityTerm: labelSelector: matchExpressions: - key: \u0026quot;weblogic.clusterName\u0026quot; operator: In values: - $(CLUSTER_NAME) topologyKey: \u0026quot;kubernetes.io/hostname\u0026quot; replicas: 3 # The number of managed servers to start for unlisted clusters # replicas: 1 - clusterName: wccadf_cluster clusterService: annotations: traefik.ingress.kubernetes.io/affinity: \u0026quot;true\u0026quot; traefik.ingress.kubernetes.io/service.sticky.cookie: \u0026quot;true\u0026quot; traefik.ingress.kubernetes.io/session-cookie-name: WCCSID serverService: precreateService: true serverStartState: \u0026quot;RUNNING\u0026quot; serverPod: # Instructs Kubernetes scheduler to prefer nodes for new cluster members where there are not # already members of the same cluster. affinity: podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 100 podAffinityTerm: labelSelector: matchExpressions: - key: \u0026quot;weblogic.clusterName\u0026quot; operator: In values: - $(CLUSTER_NAME) topologyKey: \u0026quot;kubernetes.io/hostname\u0026quot; replicas: 3 # The number of managed servers to start for unlisted clusters # replicas: 1    Verify the domain To confirm that the domain was created, enter the following command:\n$ kubectl describe domain DOMAINUID -n NAMESPACE Replace DOMAINUID with the domainUID and NAMESPACE with the actual namespace.\n  Click here to see a sample domain description.   $ kubectl describe domain wccinfra -n wccns Name: wccinfra Namespace: wccns Labels: weblogic.domainUID=wccinfra Annotations: API Version: weblogic.oracle/v8 Kind: Domain Metadata: Creation Timestamp: 2020-11-23T12:48:13Z Generation: 7 Managed Fields: API Version: weblogic.oracle/v8 Fields Type: FieldsV1 fieldsV1: f:metadata: f:annotations: .: f:kubectl.kubernetes.io/last-applied-configuration: f:labels: .: f:weblogic.domainUID: Manager: kubectl Operation: Update Time: 2020-11-23T13:50:28Z API Version: weblogic.oracle/v8 Fields Type: FieldsV1 fieldsV1: f:status: .: f:clusters: f:conditions: f:servers: f:startTime: Manager: OpenAPI-Generator Operation: Update Time: 2020-12-03T10:20:52Z Resource Version: 18267402 Self Link: /apis/weblogic.oracle/v8/namespaces/wccns/domains/wccinfra UID: 1a866c30-9b29-4281-bd2b-df80914efdff Spec: Admin Server: Admin Service: Channels: Channel Name: default Node Port: 30701 Server Start State: RUNNING Clusters: Cluster Name: ibr_cluster Replicas: 1 Server Pod: Affinity: Pod Anti Affinity: Preferred During Scheduling Ignored During Execution: Pod Affinity Term: Label Selector: Match Expressions: Key: weblogic.clusterName Operator: In Values: $(CLUSTER_NAME) Topology Key: kubernetes.io/hostname Weight: 100 Server Service: Precreate Service: true Server Start Policy: IF_NEEDED Server Start State: RUNNING Cluster Name: ucm_cluster Cluster Service: Annotations: traefik.ingress.kubernetes.io/affinity: true traefik.ingress.kubernetes.io/service.sticky.cookie: true traefik.ingress.kubernetes.io/session-cookie-name: JSESSIONID Replicas: 3 Server Pod: Affinity: Pod Anti Affinity: Preferred During Scheduling Ignored During Execution: Pod Affinity Term: Label Selector: Match Expressions: Key: weblogic.clusterName Operator: In Values: $(CLUSTER_NAME) Topology Key: kubernetes.io/hostname Weight: 100 Server Service: Precreate Service: true Server Start Policy: IF_NEEDED Server Start State: RUNNING Cluster Name: ipm_cluster Cluster Service: Annotations: traefik.ingress.kubernetes.io/affinity: true traefik.ingress.kubernetes.io/service.sticky.cookie: true traefik.ingress.kubernetes.io/session-cookie-name: JSESSIONID Replicas: 3 Server Pod: Affinity: Pod Anti Affinity: Preferred During Scheduling Ignored During Execution: Pod Affinity Term: Label Selector: Match Expressions: Key: weblogic.clusterName Operator: In Values: $(CLUSTER_NAME) Topology Key: kubernetes.io/hostname Weight: 100 Server Service: Precreate Service: true Server Start State: RUNNING Cluster Name: capture_cluster Cluster Service: Annotations: traefik.ingress.kubernetes.io/affinity: true traefik.ingress.kubernetes.io/service.sticky.cookie: true traefik.ingress.kubernetes.io/session-cookie-name: JSESSIONID Replicas: 3 Server Pod: Affinity: Pod Anti Affinity: Preferred During Scheduling Ignored During Execution: Pod Affinity Term: Label Selector: Match Expressions: Key: weblogic.clusterName Operator: In Values: $(CLUSTER_NAME) Topology Key: kubernetes.io/hostname Weight: 100 Server Service: Precreate Service: true Server Start State: RUNNING Cluster Name: wccadf_cluster Cluster Service: Annotations: traefik.ingress.kubernetes.io/affinity: true traefik.ingress.kubernetes.io/service.sticky.cookie: true traefik.ingress.kubernetes.io/session-cookie-name: WCCSID Replicas: 3 Server Pod: Affinity: Pod Anti Affinity: Preferred During Scheduling Ignored During Execution: Pod Affinity Term: Label Selector: Match Expressions: Key: weblogic.clusterName Operator: In Values: $(CLUSTER_NAME) Topology Key: kubernetes.io/hostname Weight: 100 Server Service: Precreate Service: true Server Start State: RUNNING Data Home: Domain Home: /u01/oracle/user_projects/domains/wccinfra Domain Home Source Type: PersistentVolume Http Access Log In Log Home: true Image: oracle/wccontent_ora_final_it:12.2.1.4.0 Image Pull Policy: IfNotPresent Include Server Out In Pod Log: true Log Home: /u01/oracle/user_projects/domains/logs/wccinfra Log Home Enabled: true Max Cluster Concurrent Startup: 1 Server Pod: Env: Name: JAVA_OPTIONS Value: -Dweblogic.StdoutDebugEnabled=false Name: USER_MEM_ARGS Value: -Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx512m Volume Mounts: Mount Path: /u01/oracle/user_projects/domains Name: weblogic-domain-storage-volume Volumes: Name: weblogic-domain-storage-volume Persistent Volume Claim: Claim Name: wccinfra-domain-pvc Server Start Policy: IF_NEEDED Web Logic Credentials Secret: Name: wccinfra-domain-credentials Status: Clusters: Cluster Name: ibr_cluster Maximum Replicas: 5 Minimum Replicas: 0 Ready Replicas: 1 Replicas: 1 Replicas Goal: 1 Cluster Name: ucm_cluster Maximum Replicas: 5 Minimum Replicas: 0 Ready Replicas: 3 Replicas: 3 Replicas Goal: 3 Cluster Name: ipm_cluster Maximum Replicas: 5 Minimum Replicas: 0 Ready Replicas: 3 Replicas: 3 Replicas Goal: 3 Cluster Name: capture_cluster Maximum Replicas: 5 Minimum Replicas: 0 Ready Replicas: 3 Replicas: 3 Replicas Goal: 3 Cluster Name: wccadf_cluster Maximum Replicas: 5 Minimum Replicas: 0 Ready Replicas: 3 Replicas: 3 Replicas Goal: 3 Conditions: Last Transition Time: 2020-11-23T13:58:41.070Z Reason: ServersReady Status: True Type: Available Servers: Desired State: RUNNING Health: Activation Time: 2020-11-25T16:55:24.930Z Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: MyNodeName Server Name: AdminServer State: RUNNING Cluster Name: ibr_cluster Desired State: RUNNING Health: Activation Time: 2020-11-30T12:23:27.603Z Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: MyNodeName Server Name: ibr_server1 State: RUNNING Cluster Name: ibr_cluster Desired State: SHUTDOWN Server Name: ibr_server2 Cluster Name: ibr_cluster Desired State: SHUTDOWN Server Name: ibr_server3 Cluster Name: ibr_cluster Desired State: SHUTDOWN Server Name: ibr_server4 Cluster Name: ibr_cluster Desired State: SHUTDOWN Server Name: ibr_server5 Cluster Name: ucm_cluster Desired State: RUNNING Health: Activation Time: 2020-12-02T14:10:37.992Z Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: MyNodeName Server Name: ucm_server1 State: RUNNING Cluster Name: ucm_cluster Desired State: RUNNING Health: Activation Time: 2020-12-01T04:51:19.886Z Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: MyNodeName Server Name: ucm_server2 State: RUNNING Cluster Name: ucm_cluster Desired State: SHUTDOWN Server Name: ucm_server3 Cluster Name: ucm_cluster Desired State: SHUTDOWN Server Name: ucm_server4 Cluster Name: ucm_cluster Desired State: SHUTDOWN Server Name: ucm_server5 Cluster Name: ipm_cluster Desired State: RUNNING Health: Activation Time: 2020-12-01T04:51:19.886Z Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: MyNodeName Server Name: ipm_server1 State: RUNNING Cluster Name: ipm_cluster Desired State: SHUTDOWN Server Name: ipm_server2 Cluster Name: ipm_cluster Desired State: SHUTDOWN Server Name: ipm_server3 Cluster Name: ipm_cluster Desired State: SHUTDOWN Server Name: ipm_server4 Cluster Name: ipm_cluster Desired State: SHUTDOWN Server Name: ipm_server5 Cluster Name: capture_cluster Desired State: RUNNING Health: Activation Time: 2020-12-01T04:51:19.886Z Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: MyNodeName Server Name: capture_server1 State: RUNNING Cluster Name: capture_cluster Desired State: SHUTDOWN Server Name: capture_server2 Cluster Name: capture_cluster Desired State: SHUTDOWN Server Name: capture_server3 Cluster Name: capture_cluster Desired State: SHUTDOWN Server Name: capture_server4 Cluster Name: capture_cluster Desired State: SHUTDOWN Server Name: capture_server5 Cluster Name: wccadf_cluster Desired State: RUNNING Health: Activation Time: 2020-12-01T04:51:19.886Z Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: MyNodeName Server Name: wccadf_server1 State: RUNNING Cluster Name: wccadf_cluster Desired State: SHUTDOWN Server Name: wccadf_server2 Cluster Name: wccadf_cluster Desired State: SHUTDOWN Server Name: wccadf_server3 Cluster Name: wccadf_cluster Desired State: SHUTDOWN Server Name: wccadf_server4 Cluster Name: wccadf_cluster Desired State: SHUTDOWN Server Name: wccadf_server5 Start Time: 2020-11-23T12:48:13.756Z Events: \u0026lt;none\u0026gt;    In the Status section of the output, the available servers and clusters are listed. Note that if this command is issued soon after the script finishes, there may be no servers available yet, or perhaps only the Administration Server but no Managed Servers. WebLogic Kubernetes Operator will start up the Administration Server first and wait for it to become ready before starting the Managed Servers.\nVerify the pods Enter the following command to see the pods running the servers:\n$ kubectl get pods -n NAMESPACE Here is an example of the output of this command. You can verify that an Administration Server and Managed Servers for ucm, ibr, ipm, capture and wccadf cluster are running.\n$ kubectl get pod -n wccns NAME READY STATUS RESTARTS AGE rcu 1/1 Running 0 78d wccinfra-adminserver 1/1 Running 0 9d wccinfra-create-fmw-infra-sample-domain-job-l8r9d 0/1 Completed 0 9d wccinfra-ibr-server1 1/1 Running 0 9d wccinfra-ucm-server1 1/1 Running 0 9d wccinfra-ucm-server2 1/1 Running 0 9d wccinfra-ucm-server3 1/1 Running 0 9d wccinfra-ipm-server1 1/1 Running 0 9d wccinfra-ipm-server2 1/1 Running 0 9d wccinfra-ipm-server3 1/1 Running 0 9d wccinfra-capture-server1 1/1 Running 0 9d wccinfra-capture-server2 1/1 Running 0 9d wccinfra-capture-server3 1/1 Running 0 9d wccinfra-wccadf-server1 1/1 Running 0 9d wccinfra-wccadf-server2 1/1 Running 0 9d wccinfra-wccadf-server3 1/1 Running 0 9d Verify the services Enter the following command to see the services for the domain:\n$ kubectl get services -n NAMESPACE Here is an example of the output of this command.\n  Click here to see a sample list of services.   $ kubectl get services -n wccns NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE wccinfra-adminserver ClusterIP None \u0026lt;none\u0026gt; 7001/TCP 9d wccinfra-adminserver-external NodePort 10.104.100.193 \u0026lt;none\u0026gt; 7001:30701/TCP 9d wccinfra-cluster-ibr-cluster ClusterIP 10.98.100.212 \u0026lt;none\u0026gt; 16250/TCP 9d wccinfra-cluster-ibr-cluster-ext NodePort 10.109.247.52 \u0026lt;none\u0026gt; 5555:30555/TCP 9d wccinfra-cluster-ucm-cluster ClusterIP 10.108.47.178 \u0026lt;none\u0026gt; 16200/TCP 9d wccinfra-cluster-ipm-cluster ClusterIP 10.108.217.111 \u0026lt;none\u0026gt; 16000/TCP 9d wccinfra-cluster-capture-cluster ClusterIP 10.110.193.252 \u0026lt;none\u0026gt; 16400/TCP 9d wccinfra-cluster-wccadf-cluster ClusterIP 10.109.191.247 \u0026lt;none\u0026gt; 16225/TCP 9d wccinfra-ibr-server1 ClusterIP None \u0026lt;none\u0026gt; 16250/TCP 9d wccinfra-ibr-server2 ClusterIP 10.97.253.44 \u0026lt;none\u0026gt; 16250/TCP 9d wccinfra-ibr-server3 ClusterIP 10.110.183.48 \u0026lt;none\u0026gt; 16250/TCP 9d wccinfra-ibr-server4 ClusterIP 10.108.228.158 \u0026lt;none\u0026gt; 16250/TCP 9d wccinfra-ibr-server5 ClusterIP 10.101.29.140 \u0026lt;none\u0026gt; 16250/TCP 9d wccinfra-ucm-server1 ClusterIP None \u0026lt;none\u0026gt; 16200/TCP 9d wccinfra-ucm-server2 ClusterIP None \u0026lt;none\u0026gt; 16200/TCP 9d wccinfra-ucm-server3 ClusterIP None \u0026lt;none\u0026gt; 16200/TCP 9d wccinfra-ucm-server4 ClusterIP 10.109.25.242 \u0026lt;none\u0026gt; 16200/TCP 9d wccinfra-ucm-server5 ClusterIP 10.109.193.26 \u0026lt;none\u0026gt; 16200/TCP 9d wccinfra-ipm-server1 ClusterIP None \u0026lt;none\u0026gt; 16000/TCP 9d wccinfra-ipm-server2 ClusterIP None \u0026lt;none\u0026gt; 16000/TCP 9d wccinfra-ipm-server3 ClusterIP None \u0026lt;none\u0026gt; 16000/TCP 9d wccinfra-ipm-server4 ClusterIP 10.111.215.108 \u0026lt;none\u0026gt; 16000/TCP 9d wccinfra-ipm-server5 ClusterIP 10.109.220.10 \u0026lt;none\u0026gt; 16000/TCP 9d wccinfra-capture-server1 ClusterIP None \u0026lt;none\u0026gt; 16400/TCP 9d wccinfra-capture-server2 ClusterIP None \u0026lt;none\u0026gt; 16400/TCP 9d wccinfra-capture-server3 ClusterIP None \u0026lt;none\u0026gt; 16400/TCP 9d wccinfra-capture-server4 ClusterIP 10.109.72.216 \u0026lt;none\u0026gt; 16400/TCP 9d wccinfra-capture-server5 ClusterIP 10.102.90.234 \u0026lt;none\u0026gt; 16400/TCP 9d wccinfra-wccadf-server1 ClusterIP None \u0026lt;none\u0026gt; 16225/TCP 9d wccinfra-wccadf-server2 ClusterIP None \u0026lt;none\u0026gt; 16225/TCP 9d wccinfra-wccadf-server3 ClusterIP None \u0026lt;none\u0026gt; 16225/TCP 9d wccinfra-wccadf-server4 ClusterIP 10.99.91.229 \u0026lt;none\u0026gt; 16225/TCP 9d wccinfra-wccadf-server5 ClusterIP 10.105.114.38 \u0026lt;none\u0026gt; 16225/TCP 9d    Scale-up/down Managed Server Counts For an existing domain, these managed-server replica counts can be modified, independent of each other, by modifying the domain.yaml (to be handled by the customers with sufficient access). To scale up or scale down managed server counts in an existing domain, the following steps need to be performed.\n$ cd ${WORKDIR}/create-wcc-domain/domain-home-on-pv/output/weblogic-domains/wccinfra/ # modify respective managed server replicas to scale up or scale down and save it. $ vim domain.yaml # Apply the updated domain.yaml configuration file $ kubectl apply -f domain.yaml Details required for configuring IBR provider on UCM   Obtain details for service wccinfra-cluster-ibr-cluster-ext for the NodePort mapped to IBR intradoc port\nNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) wccinfra-cluster-ibr-cluster-ext NodePort 10.109.247.52 \u0026lt;none\u0026gt; 5555:30555/TCP   Create the outgoing provider by providing following details and restart the servers.\nPlease provide the NodePort value (in the above sample - 30555), as Server Port.\nServer Host Name: \u0026lt;hostname in which IBR Server pod is deployed\u0026gt; Server Port: 30555   Configure an additional mount or shared space to a domain for Imaging and Capture Optionally, if you want to configure an additional mount or shared space to a domain, for WebCenter Imaging and WebCenter Capture applications for file imports, refer to the Configure an Additional Mount or Shared-Space to a Domain for Imaging and Capture.\n"
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/appendix/docker-k8s-hardening/",
	"title": "Security hardening",
	"tags": [],
	"description": "Review resources for the Docker and Kubernetes cluster hardening.",
	"content": "Securing a Kubernetes cluster involves hardening on multiple fronts - securing the API servers, etcd, nodes, container images, container run-time, and the cluster network. Apply principles of defense in depth, principle of least privilege, and minimize the attack surface. Use security tools such as Kube-Bench to verify the cluster\u0026rsquo;s security posture. Since Kubernetes is evolving rapidly refer to Kubernetes Security Overview for the latest information on securing a Kubernetes cluster. Also ensure the deployed Docker containers follow the Docker Security guidance.\nThis section provides references on how to securely configure Docker and Kubernetes.\nReferences   Docker hardening\n https://docs.docker.com/engine/security/security/ https://blog.aquasec.com/docker-security-best-practices    Kubernetes hardening\n https://kubernetes.io/docs/concepts/security/overview/ https://kubernetes.io/docs/concepts/security/pod-security-standards/ https://blogs.oracle.com/developers/5-best-practices-for-kubernetes-security    Security best practices for Oracle WebLogic Server Running in Docker and Kubernetes\n https://blogs.oracle.com/weblogicserver/security-best-practices-for-weblogic-server-running-in-docker-and-kubernetes    "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/oracle-cloud/configure-load-balancer/",
	"title": "Set up a load balancer",
	"tags": [],
	"description": "Configure different load balancers for Oracle WebCenter Content domains.",
	"content": "WebLogic Kubernetes Operator managed Oracle WebCenter Content domain on Oracle Cloud Infrastructure supports ingress-based load balancers such as Traefik and NGINX.\n Traefik  Configure the ingress-based Traefik load balancer for Oracle WebCenter Content domains.\n NGINX  Configure the ingress-based NGINX load balancer for Oracle WebCenter Content domain.\n "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/adminguide/elasticsearch-integration/",
	"title": "Elasticsearch integration for logs",
	"tags": [],
	"description": "Monitor an Oracle WebCenter Sites domain and publish the WebLogic Server logs to Elasticsearch.",
	"content": "1. Integrate Elasticsearch to WebLogic Kubernetes Operator For reference information, see Elasticsearch integration for the WebLogic Kubernetes Operator.\nTo enable elasticsearch integration, you must edit file ${WORKDIR}/charts/weblogic-operator/values.yaml before deploying the WebLogic Kubernetes Operator.\n# elkIntegrationEnabled specifies whether or not ELK integration is enabled. elkIntegrationEnabled: true # logStashImage specifies the docker image containing logstash. # This parameter is ignored if 'elkIntegrationEnabled' is false. logStashImage: \u0026quot;logstash:6.8.23\u0026quot; # elasticSearchHost specifies the hostname of where Elasticsearch is running. # This parameter is ignored if 'elkIntegrationEnabled' is false. elasticSearchHost: \u0026quot;elasticsearch.default.svc.cluster.local\u0026quot; # elasticSearchPort specifies the port number of where Elasticsearch is running. # This parameter is ignored if 'elkIntegrationEnabled' is false. elasticSearchPort: 9200 After you\u0026rsquo;ve deployed WebLogic Kubernetes Operator and made the above changes, the weblogic-operator pod will have additional Logstash container. The Logstash container will push the weblogic-operator logs to the configured Elasticsearch server.\n2. Publish WebLogic Server and WebCenter Content Logs using Logstash Pod You can publish the WebLogic Server logs to Elasticsearch Server using Logstash pod. This Logstash pod must have access to the shared domain home. For the WebCenter Content wccinfra, you can use the persistent volume of the domain home in the Logstash pod. The steps to create the Logstash pod are as follows:\nGet the persistent volume details of the domain home of the WebLogic Server(s). The following command will list the persistent volume details in the namespace - \u0026ldquo;wccns\u0026rdquo;:\n$ kubectl get pv -n wccns NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE wccinfra-domain-pv 10Gi RWX Retain Bound wccns/wccinfra-domain-pvc wccinfra-domain-storage-class 33d Create the deployment yaml for Logstash pod by updating the logstash.yaml, located at $WORKDIR/logging-services/logstash/logstash.yaml according to your configurations. The mounted persistent volume of the domain home will provide access to the WebLogic server logs to Logstash pod. Given below is a sample Logstash deployment yaml.\napiVersion: apps/v1 kind: Deployment metadata: name: logstash namespace: wccns spec: selector: matchLabels: app: logstash template: # create pods using pod definition in this template metadata: labels: app: logstash spec: volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: wccinfra-domain-pvc - name: shared-logs emptyDir: {} containers: - name: logstash image: logstash:6.8.23 command: [\u0026quot;/bin/sh\u0026quot;] args: [\u0026quot;/usr/share/logstash/bin/logstash\u0026quot;, \u0026quot;-f\u0026quot;, \u0026quot;/u01/oracle/user_projects/domains/logstash.conf\u0026quot;] imagePullPolicy: IfNotPresent volumeMounts: - mountPath: /u01/oracle/user_projects/domains name: weblogic-domain-storage-volume - name: shared-logs mountPath: /shared-logs ports: - containerPort: 5044 name: logstash Sample Logstash configuration file is located at $WORKDIR/logging-services/logstash/logstash.conf\n$ vi $WORKDIR/logging-services/logstash/logstash.conf input { file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/wccinfra/servers/**/logs/*-diagnostic.log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/logs/wccinfra/*.log\u0026quot; start_position =\u0026gt; beginning } } filter { grok { match =\u0026gt; [ \u0026quot;message\u0026quot;, \u0026quot;\u0026lt;%{DATA:log_timestamp}\u0026gt; \u0026lt;%{WORD:log_level}\u0026gt; \u0026lt;%{WORD:thread}\u0026gt; \u0026lt;%{HOSTNAME:hostname}\u0026gt; \u0026lt;%{HOSTNAME:servername}\u0026gt; \u0026lt;%{DATA:timer}\u0026gt; \u0026lt;\u0026lt;%{DATA:kernel}\u0026gt;\u0026gt; \u0026lt;\u0026gt; \u0026lt;%{DATA:uuid}\u0026gt; \u0026lt;%{NUMBER:timestamp}\u0026gt; \u0026lt;%{DATA:misc}\u0026gt; \u0026lt;%{DATA:log_number}\u0026gt; \u0026lt;%{DATA:log_message}\u0026gt;\u0026quot; ] } } output { elasticsearch { hosts =\u0026gt; [\u0026quot;elasticsearch.default.svc.cluster.local:9200\u0026quot;] } } This sample configuration will publish all server and Diagnostic logs under wccinfra to Logstash.\n$ kubectl cp $WORKDIR/logging-services/logstash/logstash.conf wccns/wccinfra-adminserver:/u01/oracle/user_projects/domains/logstash.conf Deploy Logstash pod After you have created the Logstash deployment yaml and Logstash configuration file, deploy Logstash using following command:\n$ kubectl create -f $WORKDIR/logging-services/logstash/logstash.yaml 3. Test the deployment of Elasticsearch and Kibana The WebLogic Kubernetes Operator also provides a sample deployment of Elasticsearch and Kibana for testing purpose. You can deploy Elasticsearch and Kibana on the Kubernetes cluster as shown below:\n$ cd ${WORKDIR}/elasticsearch-and-kibana/ $ kubectl create -f elasticsearch_and_kibana.yaml Get the Kibana dashboard port information as shown below: Wait for pods to start:\n-bash-4.2$ kubectl get pods -w NAME READY STATUS RESTARTS AGE elasticsearch-8bdb7cf54-mjs6s 1/1 Running 0 4m3s kibana-dbf8964b6-n8rcj 1/1 Running 0 4m3s -bash-4.2$ kubectl get svc NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE elasticsearch ClusterIP 10.105.205.157 \u0026lt;none\u0026gt; 9200/TCP,9300/TCP 10d kibana NodePort 10.98.104.41 \u0026lt;none\u0026gt; 5601:30412/TCP 10d kubernetes ClusterIP 10.96.0.1 \u0026lt;none\u0026gt; 443/TCP 42d You can access the Kibana dashboard at http://\u0026lt;your_hostname\u0026gt;:30412/. In our example, the node port would be 30412.\nCreate an Index Pattern in Kibana Create an index pattern logstash-* in Kibana \u0026gt; Management. After the servers are started, you will see the log data in the Kibana dashboard.\n"
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/oracle-cloud/filesystem/",
	"title": "Preparing a file system",
	"tags": [],
	"description": "Running WebLogic Kubernetes Operator managed Oracle WebCenter Sites domains on OKE",
	"content": "Create Filesystem and security list for FSS Note: Make sure you create the filesystem and security list in the OKE created VCN\n Login to OCI Console and go to File Storage and Click \u0026ldquo;File System\u0026rdquo;  Click \u0026ldquo;Create File System\u0026rdquo;  You can create File System and Mount Targets with the default values. But in case you want to rename the file System and mount targets, follow below steps. Note: Make Sure the Virtual Cloud Network in Mount Target refers to the one where your instances are created and you will be accessing this file system. Edit and change the File System name to say \u0026ldquo;WCSFileSystem\u0026rdquo;  Edit and change the Mount Target name to WCSMountTarget and make sure the Virtual Cloud Network selected is \u0026ldquo;WCSVCN\u0026rdquo; the one where all the instances are created. Select Public Subnet. Click \u0026ldquo;Create\u0026rdquo;  Once the File System is created, it lands at below page. Click on \u0026ldquo;WCSFileSystem\u0026rdquo; link.  Click on Mount Commands which gives details on how to mount this file system on your instances.  Mount Command pop up gives details on what must be configured on security list to access the mount targets from instances. Note down the mount command which need to be executed on the instance  Create the security list \u0026ldquo;fss_security list \u0026quot; with below Ingress Rules as given in the Mount commands pop up.  Create the Egress rules as below as given in the Mount commands pop up.  Make sure to add the created security list \u0026ldquo;fss_security list \u0026quot; to each subnets as shown below: Otherwise the created security list rules will not apply to the instances.  Once the created security list \u0026ldquo;fss_security list \u0026quot; is added into the subnet, login to the instances and mount the file systems on to Bastion Node  #login as root sudo su #Install NFS Utils yum install nfs-utils #Create directory where you want the mount the file system mkdir -p /mnt/WCSFileSystem #Give proper permissions so that all users can access the share volume chmod 777 /mnt/WCSFileSystem # Alternatively you can use: \u0026quot;mount 10.0.0.7:/WCSFileSystem /mnt/WCSFileSystem\u0026quot;. To persist on reboot add into /etc/fstab echo \u0026quot;10.0.0.7:/WCSFileSystem /mnt/WCSFileSystem nfs nfsvers=3 0 0\u0026quot; \u0026gt;\u0026gt; /etc/fstab mount -a cd /mnt/WCSFileSystem  Confirm that /WCSFileSystem is now pointing to created File System  [root@wcsbastioninstance WCSFileSystem]# df -h . Filesystem Size Used Avail Use% Mounted on 10.0.0.7:/WCSFileSystem 8.0E 0 8.0E 0% /mnt/WCSFileSystem [root@wcsbastioninstance WCSFileSystem]# "
},
{
	"uri": "/fmw-kubernetes/soa-domains/installguide/create-soa-domains/",
	"title": "Create Oracle SOA Suite domains",
	"tags": [],
	"description": "Create an Oracle SOA Suite domain home on an existing PV or PVC, and create the domain resource YAML file for deploying the generated Oracle SOA Suite domain.",
	"content": "The SOA deployment scripts demonstrate the creation of an Oracle SOA Suite domain home on an existing Kubernetes persistent volume (PV) and persistent volume claim (PVC). The scripts also generate the domain YAML file, which can then be used to start the Kubernetes artifacts of the corresponding domain.\nPrerequisites Before you begin, complete the following steps:\n Review the Domain resource documentation. Review the requirements and limitations. Ensure that you have executed all the preliminary steps in Prepare your environment. Ensure that the database and the WebLogic Kubernetes Operator are running.  Prepare to use the create domain script The sample scripts for Oracle SOA Suite domain deployment are available at ${WORKDIR}/create-soa-domain.\nYou must edit create-domain-inputs.yaml (or a copy of it) to provide the details for your domain. Refer to the configuration parameters below to understand the information that you must provide in this file.\nConfiguration parameters The following parameters can be provided in the inputs file.\n Note: In versions 24.2.2 and above, the default ports used to create the domain are updated.\n    Parameter Definition Default     sslEnabled Boolean value that indicates whether SSL must be enabled for each WebLogic Server instance. To enable end-to-end SSL access during load balancer setup, set sslEnabled to true and also, set appropriate value for the javaOptions property as detailed in this table. false   adminPort Port number for the Administration Server inside the Kubernetes cluster. 7001   adminServerSSLPort SSL port number of the Administration Server inside the Kubernetes cluster. 7002   adminNodePort Port number of the Administration Server outside the Kubernetes cluster. 30701   adminServerName Name of the Administration Server. AdminServer   configuredManagedServerCount Number of Managed Server instances to generate for the domain. 5   soaClusterName Name of the SOA WebLogic Server cluster instance to generate for the domain. By default, the cluster name is soa_cluster. This configuration parameter is applicable only for soa and soaosb domain types. soa_cluster   osbClusterName Name of the Oracle Service Bus WebLogic Server cluster instance to generate for the domain. By default, the cluster name is osb_cluster. This configuration parameter is applicable only for osb and soaosb domain types. osb_cluster   createDomainFilesDir Directory on the host machine to locate all the files to create a WebLogic Server domain, including the script that is specified in the createDomainScriptName parameter. By default, this directory is set to the relative path wlst, and the create script will use the built-in WLST offline scripts in the wlst directory to create the WebLogic Server domain. An absolute path is also supported to point to an arbitrary directory in the file system. The built-in scripts can be replaced by the user-provided scripts as long as those files are in the specified directory. Files in this directory are put into a Kubernetes config map, which in turn is mounted to the createDomainScriptsMountPath, so that the Kubernetes pod can use the scripts and supporting files to create a domain home. wlst   createDomainScriptsMountPath Mount path where the create domain scripts are located inside a pod. The create-domain.sh script creates a Kubernetes job to run the script (specified by the createDomainScriptName parameter) in a Kubernetes pod to create a domain home. Files in the createDomainFilesDir directory are mounted to this location in the pod, so that the Kubernetes pod can use the scripts and supporting files to create a domain home. /u01/weblogic   createDomainScriptName Script that the create domain script uses to create a WebLogic Server domain. The create-domain.sh script creates a Kubernetes job to run this script to create a domain home. The script is located in the in-pod directory that is specified by the createDomainScriptsMountPath parameter. If you need to provide your own scripts to create the domain home, instead of using the built-in scripts, you must use this property to set the name of the script that you want the create domain job to run. create-domain-job.sh   domainHome Home directory of the SOA domain. If not specified, the value is derived from the domainUID as /shared/domains/\u0026lt;domainUID\u0026gt;. /u01/oracle/user_projects/domains/soainfra   domainPVMountPath Mount path of the domain persistent volume. /u01/oracle/user_projects   domainUID Unique ID that will be used to identify this particular domain. Used as the name of the generated WebLogic Server domain as well as the name of the Kubernetes domain resource. This ID must be unique across all domains in a Kubernetes cluster. This ID cannot contain any character that is not valid in a Kubernetes service name. soainfra   domainType Type of the domain. Mandatory input for Oracle SOA Suite domains. You must provide one of the supported domain type values: soa (deploys a SOA domain with Enterprise Scheduler (ESS)), osb (deploys an Oracle Service Bus domain), and soaosb (deploys a domain with SOA, Oracle Service Bus, and Enterprise Scheduler (ESS)). soa   exposeAdminNodePort Boolean value indicating if the Administration Server is exposed outside of the Kubernetes cluster. false   exposeAdminT3Channel Boolean value indicating if the T3 administrative channel is exposed outside the Kubernetes cluster. false   httpAccessLogInLogHome Boolean value indicating if server HTTP access log files should be written to the same directory as logHome. If false, server HTTP access log files will be written to the directory specified in the WebLogic Server domain home configuration. true   image SOA Suite Docker image. The operator requires Oracle SOA Suite 12.2.1.4. Refer to Obtain the Oracle SOA Suite Docker image for details on how to obtain or create the image. soasuite:release-version   imagePullPolicy Oracle SOA Suite Docker image pull policy. Valid values are IfNotPresent, Always, Never. IfNotPresent   imagePullSecretName Name of the Kubernetes secret to access the Docker Store to pull the WebLogic Server Docker image. The presence of the secret will be validated when this parameter is specified.    includeServerOutInPodLog Boolean value indicating whether to include the server .out to the pod\u0026rsquo;s stdout. true   initialManagedServerReplicas Number of Managed Servers to initially start for the domain. 1   javaOptions Java options for initiating the Administration Server and Managed Servers. A Java option can have references to one or more of the following predefined variables to obtain WebLogic Server domain information: $(DOMAIN_NAME), $(DOMAIN_HOME), $(ADMIN_NAME), $(ADMIN_PORT), and $(SERVER_NAME). If sslEnabled is set to true, add -Dweblogic.ssl.Enabled=true -Dweblogic.security.SSL.ignoreHostnameVerification=true to allow the Managed Servers to connect to the Administration Server while booting up. In this environment, the demo certificate generated by the WebLogic Server contains a host name that is different from the runtime container\u0026rsquo;s host name. -Dweblogic.StdoutDebugEnabled=false   logHome The in-pod location for the domain log, server logs, server out, and Node Manager log files. If not specified, the value is derived from the domainUID as /shared/logs/\u0026lt;domainUID\u0026gt;. /u01/oracle/user_projects/domains/logs/soainfra   soaManagedServerNameBase Base string used to generate Managed Server names in the SOA cluster. The default value is soa_server. This configuration parameter is applicable only for soa and soaosb domain types. soa_server   osbManagedServerNameBase Base string used to generate Managed Server names in the Oracle Service Bus cluster. The default value is osb_server. This configuration parameter is applicable only for osb and soaosb domain types. osb_server   soaManagedServerPort Port number for each Managed Server in the SOA cluster. This configuration parameter is applicable only for soa and soaosb domain types. 7003   osbManagedServerPort Port number for each Managed Server in the Oracle Service Bus cluster. This configuration parameter is applicable only for osb and soaosb domain types. 8002   soaManagedServerSSLPort SSL port number for each Managed Server in the SOA cluster. This configuration parameter is applicable only for soa and soaosb domain types. 7004   osbManagedServerSSLPort SSL port number for each Managed Server in the Oracle Service Bus cluster. This configuration parameter is applicable only for osb and soaosb domain types. 8003   namespace Kubernetes namespace in which to create the domain. soans   persistentVolumeClaimName Name of the persistent volume claim created to host the domain home. If not specified, the value is derived from the domainUID as \u0026lt;domainUID\u0026gt;-weblogic-sample-pvc. soainfra-domain-pvc   productionModeEnabled Boolean value indicating if production mode is enabled for the domain. true   secureEnabled Boolean value indicating if secure mode is enabled for the domain. This value has significance only with Oracle SOA Suite 14.1.2.0.0. false   serverStartPolicy Determines which WebLogic Server instances will be started. Valid values are Never, IfNeeded, or AdminOnly. IfNeeded   t3ChannelPort Port for the T3 channel of the NetworkAccessPoint. 30012   t3PublicAddress Public address for the T3 channel. This should be set to the public address of the Kubernetes cluster. This would typically be a load balancer address. For development environments only: In a single server (all-in-one) Kubernetes deployment, this may be set to the address of the master, or at the very least, it must be set to the address of one of the worker nodes. If not provided, the script will attempt to set it to the IP address of the Kubernetes cluster.   weblogicCredentialsSecretName Name of the Kubernetes secret for the Administration Server\u0026rsquo;s user name and password. If not specified, then the value is derived from the domainUID as \u0026lt;domainUID\u0026gt;-weblogic-credentials. soainfra-domain-credentials   weblogicImagePullSecretName Name of the Kubernetes secret for the Docker Store, used to pull the WebLogic Server image.    serverPodCpuRequest, serverPodMemoryRequest, serverPodCpuCLimit, serverPodMemoryLimit The maximum amount of compute resources allowed, and minimum amount of compute resources required, for each server pod. Refer to the Kubernetes documentation on Managing Compute Resources for Containers for details. Resource requests and resource limits are not specified.   rcuSchemaPrefix The schema prefix to use in the database. For example SOA1. You may wish to make this the same as the domainUID in order to simplify matching domains to their RCU schemas. SOA1   rcuDatabaseURL The database URL. oracle-db.default.svc.cluster.local:1521/devpdb.k8s   rcuCredentialsSecret The Kubernetes secret containing the database credentials. soainfra-rcu-credentials   persistentStore The persistent store for \u0026lsquo;JMS servers\u0026rsquo; and \u0026lsquo;Transaction log store\u0026rsquo; in the domain. Valid values are jdbc, file. jdbc    Note that the names of the Kubernetes resources in the generated YAML files may be formed with the value of some of the properties specified in the create-domain-inputs.yaml file. Those properties include the adminServerName, soaClusterName, and soaManagedServerNameBase etc. If those values contain any characters that are invalid in a Kubernetes service name, those characters are converted to valid values in the generated YAML files. For example, an uppercase letter is converted to a lowercase letter and an underscore (\u0026quot;_\u0026quot;) is converted to a hyphen (\u0026quot;-\u0026quot;).\nThe sample demonstrates how to create an Oracle SOA Suite domain home and associated Kubernetes resources for the domain. In addition, the sample provides the capability for users to supply their own scripts to create the domain home for other use cases. The generated domain YAML file could also be modified to cover more use cases.\nRun the create domain script Run the create domain script, specifying your inputs file and an output directory to store the generated artifacts:\n$ ./create-domain.sh \\ -i create-domain-inputs.yaml \\ -o \u0026lt;path to output-directory\u0026gt; The script will perform the following steps:\n Create a directory for the generated Kubernetes YAML files for this domain if it does not already exist. The path name is \u0026lt;path to output-directory\u0026gt;/weblogic-domains/\u0026lt;domainUID\u0026gt;. If the directory already exists, its contents must be removed before using this script. Create a Kubernetes job that will start up a utility Oracle SOA Suite container and run offline WLST scripts to create the domain on the shared storage. Run and wait for the job to finish. Create a Kubernetes domain YAML file, domain.yaml, in the \u0026ldquo;output\u0026rdquo; directory that was created above. Create a convenient utility script, delete-domain-job.yaml, to clean up the domain home created by the create script.  Start the domain The domain.yaml created by create-domain.sh script above has details about the Oracle SOA Suite Domain and Cluster Kubernetes resources. You can create Oracle SOA Suite Domain using the kubectl create -f or kubectl apply -f command:\n$ kubectl apply -f \u0026lt;path to output-directory\u0026gt;/weblogic-domains/\u0026lt;domainUID\u0026gt;/domain.yaml The default domain created by the script has the following characteristics:\n An Administration Server named AdminServer listening on port 7001. A configured cluster named soa_cluster of size 5. Managed Server, named soa_server1 listening on port 7003. Log files that are located in /shared/logs/\u0026lt;domainUID\u0026gt;. SOA Infra, SOA Composer, and WorklistApp applications deployed.  Refer to the troubleshooting page to troubleshoot issues during the domain creation.\n Verify the results The create domain script verifies that the domain was created, and reports failure if there is an error. However, it may be desirable to manually verify the domain, even if just to gain familiarity with the various Kubernetes objects that were created by the script.\nGenerated YAML files with the default inputs   Click here to see sample content of the generated `domain.yaml` for `soaosb` domainType that creates SOA and Oracle Service Bus clusters.   $ cat output/weblogic-domains/soainfra/domain.yaml # Copyright (c) 2020, 2023, Oracle and/or its affiliates. # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. # # This is an example of how to define a Domain resource. # apiVersion: \u0026quot;weblogic.oracle/v9\u0026quot; kind: Domain metadata: name: soainfra namespace: soans labels: weblogic.domainUID: soainfra spec: # The WebLogic Domain Home domainHome: /u01/oracle/user_projects/domains/soainfra # The domain home source type # Set to PersistentVolume for domain-in-pv, Image for domain-in-image, or FromModel for model-in-image domainHomeSourceType: PersistentVolume # The WebLogic Server image that the Operator uses to start the domain image: \u0026quot;soasuite:12.2.1.4\u0026quot; # imagePullPolicy defaults to \u0026quot;Always\u0026quot; if image version is :latest imagePullPolicy: IfNotPresent # Identify which secret contains the credentials for pulling an image #imagePullSecrets: #- name: # Identify which secret contains the WebLogic Admin credentials (note that there is an example of # how to create that secret at the end of this topic) webLogicCredentialsSecret: name: soainfra-domain-credentials # Whether to include the server out file into the pod's stdout, default is true includeServerOutInPodLog: true # Whether to enable log home logHomeEnabled: true # Whether to write HTTP access log file to log home httpAccessLogInLogHome: true # The in-pod location for domain log, server logs, server out, introspector out, and Node Manager log files logHome: /u01/oracle/user_projects/domains/logs/soainfra # An (optional) in-pod location for data storage of default and custom file stores. # If not specified or the value is either not set or empty (e.g. dataHome: \u0026quot;\u0026quot;) then the # data storage directories are determined from the WebLogic domain home configuration. dataHome: \u0026quot;\u0026quot; # serverStartPolicy legal values are \u0026quot;Never\u0026quot;, \u0026quot;IfNeeded\u0026quot;, or \u0026quot;AdminOnly\u0026quot; # This determines which WebLogic Servers the Operator will start up when it discovers this Domain # - \u0026quot;Never\u0026quot; will not start any server in the domain # - \u0026quot;AdminOnly\u0026quot; will start up only the administration server (no managed servers will be started) # - \u0026quot;IfNeeded\u0026quot; will start all non-clustered servers, including the administration server and clustered servers up to the replica count serverStartPolicy: IfNeeded serverPod: # an (optional) list of environment variable to be set on the servers env: - name: JAVA_OPTIONS value: \u0026quot;-Dweblogic.StdoutDebugEnabled=false\u0026quot; - name: USER_MEM_ARGS value: \u0026quot;-Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx1024m \u0026quot; volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: soainfra-domain-pvc volumeMounts: - mountPath: /u01/oracle/user_projects name: weblogic-domain-storage-volume # adminServer is used to configure the desired behavior for starting the administration server. adminServer: # adminService: # channels: # The Admin Server's NodePort # - channelName: default # nodePort: 30701 # Uncomment to export the T3Channel as a service # - channelName: T3Channel # References to Cluster resources that describe the lifecycle options for all # the Managed Server members of a WebLogic cluster, including Java # options, environment variables, additional Pod content, and the ability to # explicitly start, stop, or restart cluster members. The Cluster resource # must describe a cluster that already exists in the WebLogic domain # configuration. clusters: - name: soainfra-osb-cluster - name: soainfra-soa-cluster --- # This is an example of how to define a Cluster resource. apiVersion: \u0026quot;weblogic.oracle/v1\u0026quot; kind: Cluster metadata: name: soainfra-osb-cluster # Update this with the namespace your domain will run in: namespace: soans labels: # Update this with the `domainUID` of your domain: weblogic.domainUID: soainfra spec: clusterName: osb_cluster serverService: precreateService: true serverPod: env: # This parameter can be used to pass in new system properties; use the space delimiter to append multiple values. # Do not change this value, only append new values to it. - name: K8S_REFCONF_OVERRIDES value: \u0026quot;-Doracle.sb.tracking.resiliency.MemoryMetricEnabled=false \u0026quot; replicas: 1 # The number of managed servers to start for unlisted clusters # replicas: 1 --- # This is an example of how to define a Cluster resource. apiVersion: \u0026quot;weblogic.oracle/v1\u0026quot; kind: Cluster metadata: name: soainfra-soa-cluster # Update this with the namespace your domain will run in: namespace: soans labels: # Update this with the `domainUID` of your domain: weblogic.domainUID: soainfra spec: clusterName: soa_cluster serverService: precreateService: true serverPod: env: # This parameter can be used to pass in new system properties; use the space delimiter to append multiple values. # Do not change this value, only append new values to it. - name: K8S_REFCONF_OVERRIDES value: \u0026quot;-Doracle.soa.tracking.resiliency.MemoryMetricEnabled=false \u0026quot; replicas: 1 # The number of managed servers to start for unlisted clusters # replicas: 1    Verify the domain To confirm that the domain was created, enter the following command:\n$ kubectl describe domain DOMAINUID -n NAMESPACE Replace DOMAINUID with the domainUID and NAMESPACE with the actual namespace.\n  Click here to see a sample domain description.   $ kubectl describe domain soainfra -n soans bash-4.2# kubectl describe domain soainfra -n soans Name: soainfra Namespace: soans Labels: weblogic.domainUID=soainfra Annotations: \u0026lt;none\u0026gt; API Version: weblogic.oracle/v9 Kind: Domain Metadata: Creation Timestamp: 2023-02-03T13:12:56Z Generation: 1 Managed Fields: API Version: weblogic.oracle/v9 Fields Type: FieldsV1 fieldsV1: f:metadata: f:labels: .: f:weblogic.domainUID: f:spec: .: f:clusters: f:dataHome: f:domainHome: f:domainHomeSourceType: f:failureRetryIntervalSeconds: f:failureRetryLimitMinutes: f:httpAccessLogInLogHome: f:image: f:imagePullPolicy: f:includeServerOutInPodLog: f:logHome: f:logHomeEnabled: f:logHomeLayout: f:maxClusterConcurrentShutdown: f:maxClusterConcurrentStartup: f:maxClusterUnavailable: f:replicas: f:serverPod: .: f:env: f:volumeMounts: f:volumes: f:serverStartPolicy: f:webLogicCredentialsSecret: .: f:name: Manager: kubectl-create Operation: Update Time: 2023-02-03T13:12:56Z API Version: weblogic.oracle/v9 Fields Type: FieldsV1 fieldsV1: f:status: .: f:clusters: f:conditions: f:observedGeneration: f:servers: f:startTime: Manager: Kubernetes Java Client Operation: Update Subresource: status Time: 2023-02-03T13:21:29Z Resource Version: 39889912 UID: 141ec231-dbcf-4afe-8912-e142278f9a79 Spec: Clusters: Name: soainfra-osb-cluster Name: soainfra-soa-cluster Data Home: Domain Home: /u01/oracle/user_projects/domains/soainfra Domain Home Source Type: PersistentVolume Failure Retry Interval Seconds: 120 Failure Retry Limit Minutes: 1440 Http Access Log In Log Home: true Image: soasuite:12.2.1.4 Image Pull Policy: IfNotPresent Include Server Out In Pod Log: true Log Home: /u01/oracle/user_projects/domains/logs/soainfra Log Home Enabled: true Log Home Layout: ByServers Max Cluster Concurrent Shutdown: 1 Max Cluster Concurrent Startup: 0 Max Cluster Unavailable: 1 Replicas: 1 Server Pod: Env: Name: JAVA_OPTIONS Value: -Dweblogic.StdoutDebugEnabled=false Name: USER_MEM_ARGS Value: -Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx1024m Volume Mounts: Mount Path: /u01/oracle/user_projects Name: weblogic-domain-storage-volume Volumes: Name: weblogic-domain-storage-volume Persistent Volume Claim: Claim Name: soainfra-domain-pvc Server Start Policy: IfNeeded Web Logic Credentials Secret: Name: soainfra-domain-credentials Status: Clusters: Cluster Name: osb_cluster Conditions: Last Transition Time: 2023-02-03T13:21:25.985058Z Status: True Type: Available Last Transition Time: 2023-02-03T13:21:25.985176Z Status: True Type: Completed Label Selector: weblogic.domainUID=soainfra,weblogic.clusterName=osb_cluster Maximum Replicas: 5 Minimum Replicas: 0 Observed Generation: 1 Ready Replicas: 1 Replicas: 1 Replicas Goal: 1 Cluster Name: soa_cluster Conditions: Last Transition Time: 2023-02-03T13:21:25.985247Z Status: True Type: Available Last Transition Time: 2023-02-03T13:21:25.985324Z Status: True Type: Completed Label Selector: weblogic.domainUID=soainfra,weblogic.clusterName=soa_cluster Maximum Replicas: 5 Minimum Replicas: 0 Observed Generation: 1 Ready Replicas: 1 Replicas: 1 Replicas Goal: 1 Conditions: Last Transition Time: 2023-02-03T13:21:25.984952Z Status: True Type: Available Last Transition Time: 2023-02-03T13:21:29.921800Z Status: True Type: Completed Observed Generation: 1 Servers: Health: Activation Time: 2023-02-03T13:17:40.865000Z Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: devhost Pod Phase: Running Pod Ready: True Server Name: AdminServer State: RUNNING State Goal: RUNNING Cluster Name: osb_cluster Health: Activation Time: 2023-02-03T13:20:24.163000Z Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: devhost Pod Phase: Running Pod Ready: True Server Name: osb_server1 State: RUNNING State Goal: RUNNING Cluster Name: osb_cluster Server Name: osb_server2 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: osb_cluster Server Name: osb_server3 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: osb_cluster Server Name: osb_server4 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: osb_cluster Server Name: osb_server5 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: soa_cluster Health: Activation Time: 2023-02-03T13:21:18.284000Z Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: devhost Pod Phase: Running Pod Ready: True Server Name: soa_server1 State: RUNNING State Goal: RUNNING Cluster Name: soa_cluster Server Name: soa_server2 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: soa_cluster Server Name: soa_server3 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: soa_cluster Server Name: soa_server4 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: soa_cluster Server Name: soa_server5 State: SHUTDOWN State Goal: SHUTDOWN Start Time: 2023-02-03T13:13:28.055432Z Events: \u0026lt;none\u0026gt;    In the Status section of the output, the available servers and clusters are listed. Note that if this command is issued very soon after the script finishes, there may be no servers available yet, or perhaps only the Administration Server but no Managed Servers. The operator will start up the Administration Server first and wait for it to become ready before starting the Managed Servers.\nVerify the pods Enter the following command to see the pods running the servers:\n$ kubectl get pods -n NAMESPACE Here is an example of the output of this command. You can verify that an Administration Server and a Managed Server for each cluster (SOA and Oracle Service Bus) are running for soaosb domain type.\n$ kubectl get pods -n soans NAME READY STATUS RESTARTS AGE soainfra-adminserver 1/1 Running 0 53m soainfra-osb-server1 1/1 Running 0 50m soainfra-soa-server1 1/1 Running 0 50m Verify the services Enter the following command to see the services for the domain:\n$ kubectl get services -n NAMESPACE Here is an example of the output of this command. You can verify that services for Administration Server and Managed Servers (for SOA and Oracle Service Bus clusters) are created for soaosb domain type.\n  Click here to see a sample list of services.   $ kubectl get services -n soans NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE soainfra-adminserver ClusterIP None \u0026lt;none\u0026gt; 30012/TCP,7001/TCP,7002/TCP 54m soainfra-cluster-osb-cluster ClusterIP 10.100.138.57 \u0026lt;none\u0026gt; 8002/TCP,8003/TCP 51m soainfra-cluster-soa-cluster ClusterIP 10.99.117.240 \u0026lt;none\u0026gt; 7003/TCP,7004/TCP 51m soainfra-osb-server1 ClusterIP None \u0026lt;none\u0026gt; 8002/TCP,8003/TCP 51m soainfra-osb-server2 ClusterIP 10.108.50.145 \u0026lt;none\u0026gt; 8002/TCP,8003/TCP 51m soainfra-osb-server3 ClusterIP 10.108.71.8 \u0026lt;none\u0026gt; 8002/TCP,8003/TCP 51m soainfra-osb-server4 ClusterIP 10.100.1.144 \u0026lt;none\u0026gt; 8002/TCP,8003/TCP 51m soainfra-osb-server5 ClusterIP 10.108.57.147 \u0026lt;none\u0026gt; 8002/TCP,8003/TCP 51m soainfra-soa-server1 ClusterIP None \u0026lt;none\u0026gt; 7003/TCP,7004/TCP 51m soainfra-soa-server2 ClusterIP 10.97.165.179 \u0026lt;none\u0026gt; 7003/TCP,7004/TCP 51m soainfra-soa-server3 ClusterIP 10.98.160.126 \u0026lt;none\u0026gt; 7003/TCP,7004/TCP 51m soainfra-soa-server4 ClusterIP 10.105.164.133 \u0026lt;none\u0026gt; 7003/TCP,7004/TCP 51m soainfra-soa-server5 ClusterIP 10.109.168.179 \u0026lt;none\u0026gt; 7003/TCP,7004/TCP 51m    "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/installguide/create-wcsites-domains/",
	"title": "Create Oracle WebCenter Sites domains",
	"tags": [],
	"description": "Create an Oracle WebCenter Sites domain home on an existing PV or PVC, and create the domain resource YAML file for deploying the generated Oracle WebCenter Sites domain.",
	"content": "Contents  Introduction Prerequisites Prepare the WebCenter Sites Domain Creation Input File Create the WebCenter Sites Domain Initialize the WebCenter Sites Domain Verify the WebCenter Sites Domain Expose WebCenter Sites Services Load Balance With an Ingress Controller or A Web Server Configure WebCenter Sites Settings in WebCenter Sites Property Management For Publishing Setting in WebCenter Sites Customization  Introduction This document details on how to use sample scripts to demonstrate the creation of a WebCenter Sites domain home on an existing Kubernetes persistent volume (PV) and persistent volume claim (PVC). The scripts also generate the domain YAML file, which can then be used to start the Kubernetes artifacts of the corresponding domain.\nPrerequisites  Ensure that you have completed all of the steps under prepare-your-environment. Ensure that the database and the WebLogic Kubernetes Operator is up.  Prepare the WebCenter Sites Domain Creation Input File If required, domain creation inputs can be customized by editing create-domain-inputs.yaml as described below:\nPlease note that the sample scripts for the WebCenter Sites domain deployment are available from the previously downloaded repository at kubernetes/create-wcsites-domain/domain-home-on-pv/.\nMake a copy of the create-domain-inputs.yaml file before updating the default values.\nThe default domain created by the script has the following characteristics:\n An Administration Server named AdminServer listening on port 7001. A configured cluster named wcsites-cluster of size 5. Managed Server, named wcsites_server1, listening on port 8001. Log files that are located in /shared/logs/\u0026lt;domainUID\u0026gt;.  Configuration parameters The following parameters can be provided in the inputs file:\n   Parameter Definition Default     adminPort Port number for the Administration Server inside the Kubernetes cluster. 7001   adminServerName Name of the Administration Server. AdminServer   clusterName Name of the WebLogic cluster instance to generate for the domain. By default the cluster name is wcsites-cluster for the WebCenter Sites domain. wcsites-cluster   configuredManagedServerCount Number of Managed Server instances for the domain. 3   createDomainFilesDir Directory on the host machine to locate all the files that you need to create a WebLogic domain, including the script that is specified in the createDomainScriptName property. By default, this directory is set to the relative path wlst, and the create script will use the built-in WLST offline scripts in the wlst directory to create the WebLogic domain. An absolute path is also supported to point to an arbitrary directory in the file system. The built-in scripts can be replaced by the user-provided scripts or model files as long as those files are in the specified directory. Files in this directory are put into a Kubernetes config map, which in turn is mounted to the createDomainScriptsMountPath, so that the Kubernetes pod can use the scripts and supporting files to create a domain home. wlst   createDomainScriptsMountPath Mount path where the create domain scripts are located inside a pod. The create-domain.sh script creates a Kubernetes job to run the script (specified in the createDomainScriptName property) in a Kubernetes pod to create a domain home. Files in the createDomainFilesDir directory are mounted to this location in the pod, so that the Kubernetes pod can use the scripts and supporting files to create a domain home. /u01/weblogic   createDomainScriptName Script that the create domain script uses to create a WebLogic domain. The create-domain.sh script creates a Kubernetes job to run this script to create a domain home. The script is located in the in-pod directory that is specified in the createDomainScriptsMountPath property. If you need to provide your own scripts to create the domain home, instead of using the built-it scripts, you must use this property to set the name of the script that you want the create domain job to run. create-domain-job.sh   domainHome Home directory of the WebCenter Sites domain. This field cannot be modified. /u01/oracle/user_projects/domains/wcsitesinfra   domainPVMountPath Mount path of the domain persistent volume. This field cannot be modified. /u01/oracle/user_projects/domains   domainUID Unique ID that will be used to identify this particular domain. Used as the name of the generated WebLogic domain as well as the name of the Kubernetes domain resource. This ID must be unique across all domains in a Kubernetes cluster. This ID cannot contain any character that is not valid in a Kubernetes service name. wcsitesinfra   exposeAdminNodePort Boolean indicating if the Administration Server is exposed outside of the Kubernetes cluster. false   exposeAdminT3Channel Boolean indicating if the T3 administrative channel is exposed outside the Kubernetes cluster. false   image WebCenter Sites Docker image. The Operator requires WebCenter Sites release 12.2.1.4.0. Refer to WebCenter Sites Docker image for details on how to obtain or create the image. oracle/wcsites:12.2.1.4   imagePullPolicy WebLogic Docker image pull policy. Legal values are IfNotPresent, Always, or Never IfNotPresent   imagePullSecretName Name of the Kubernetes secret to access the Docker Store to pull the WebLogic Server Docker image. The presence of the secret will be validated when this parameter is specified.    includeServerOutInPodLog Boolean indicating whether to include the server.out to the pod\u0026rsquo;s stdout. true   initialManagedServerReplicas Number of Managed Server to initially start for the domain. 1   javaOptions Java options for starting the Administration Server and Managed Servers. A Java option can include references to one or more of the following pre-defined variables to obtain WebLogic domain information: $(DOMAIN_NAME), $(DOMAIN_HOME), $(ADMIN_NAME), $(ADMIN_PORT), and $(SERVER_NAME). -Dweblogic.StdoutDebugEnabled=false   logHome The in-pod location for the domain log, server logs, server out, and Node Manager log files. This field cannot be modified. /u01/oracle/user_projects/logs/wcsitesinfra   managedServerNameBase Base string used to generate Managed Server names. wcsites_server   managedServerPort Port number for each Managed Server. 8001   namespace Kubernetes namespace in which to create the domain. wcsites-ns   persistentVolumeClaimName Name of the persistent volume claim created to host the domain home. If not specified, the value is derived from the domainUID as \u0026lt;domainUID\u0026gt;-weblogic-sample-pvc. wcsitesinfra-domain-pvc   productionModeEnabled Boolean indicating if production mode is enabled for the domain. true   serverStartPolicy Determines which WebLogic Server instances will be started. Legal values are Never, IfNeeded, AdminOnly. IfNeeded   t3ChannelPort Port for the T3 channel of the NetworkAccessPoint. 30012   t3PublicAddress Public address for the T3 channel. This should be set to the public address of the Kubernetes cluster. This would typically be a load balancer address. For development environments only: In a single server (all-in-one) Kubernetes deployment, this may be set to the address of the master, or at the very least, it must be set to the address of one of the worker nodes. If not provided, the script will attempt to set it to the IP address of the Kubernetes cluster.   weblogicCredentialsSecretName Name of the Kubernetes secret for the Administration Server\u0026rsquo;s user name and password. If not specified, then the value is derived from the domainUID as \u0026lt;domainUID\u0026gt;-weblogic-credentials. wcsites-domain-credentials   weblogicImagePullSecretName Name of the Kubernetes secret for the Docker Store, used to pull the WebLogic Server image.    serverPodCpuRequest, serverPodMemoryRequest, serverPodCpuCLimit, serverPodMemoryLimit The maximum amount of compute resources allowed and minimum amount of compute resources required for each server pod. Please refer to the Kubernetes documentation on Managing Compute Resources for Containers for details. Resource requests and resource limits are not specified. Refer to WebCenter Sites Cluster Sizing Recommendations for more details.   rcuSchemaPrefix The schema prefix to use in the database, for example WCS1. You may wish to make this the same as the domainUID in order to simplify matching domains to their RCU schemas. WCS1   rcuDatabaseURL The database URL. oracle-db.wcsitesdb-ns.svc.cluster.local:1521/devpdb.k8s   rcuCredentialsSecret The loadbalancer hostname to be provided. wcsites-rcu-credentials   loadBalancerHostName Hostname for the final url accessible outside K8S environment. abc.def.com   loadBalancerPortNumber Port for the final url accessible outside K8S environment. 30305   loadBalancerProtocol Protocol for the final url accessible outside K8S environment. http   loadBalancerType Loadbalancer name that will be used. Example: Traefik or \u0026quot;\u0026rdquo; traefik   unicastPort Starting range of uniciast port that application will use. 50000   sitesSamples Sites to be installed without samples sites by default, else true. false    You can form the names of the Kubernetes resources in the generated YAML files with the value of these properties specified in the create-domain-inputs.yaml file: adminServerName , clusterName and managedServerNameBase . Characters that are invalid in a Kubernetes service name are converted to valid values in the generated YAML files. For example, an uppercase letter is converted to a lowercase letter and an underscore (\u0026quot;_\u0026quot;) is converted to a hyphen (\u0026quot;-\u0026quot;) .\nThe sample demonstrates how to create a WebCenter Sites domain home and associated Kubernetes resources for a domain that has one cluster only. In addition, the sample provides the capability for users to supply their own scripts to create the domain home for other use cases. You can modify the generated domain YAML file to include more use cases.\nCreate the WebCenter Sites Domain   Understanding the syntax of the create-domain.sh script:\n$ ./create-domain.sh \\ -i create-domain-inputs.yaml \\ -o /\u0026lt;path to output-directory\u0026gt; The script performs the following functions:\n  Creates a directory for the generated Kubernetes YAML files for this domain if it does not already exist. The path name is /\u0026lt;path to output-directory\u0026gt;/weblogic-domains/\u0026lt;domainUID\u0026gt;. If the directory already exists, remove its content before using this script.\n  Creates a Kubernetes job that will start up a utility WebCenter Sites container and run offline WLST scripts to create the domain on the shared storage.\n  Runs and waits for the job to finish.\n  Creates a Kubernetes domain YAML file, domain.yaml, in the directory that is created above. This YAML file can be used to create the Kubernetes resource using the kubectl create -f or kubectl apply -f command:\n$ kubectl apply -f ../\u0026lt;path to output-directory\u0026gt;/weblogic-domains/\u0026lt;domainUID\u0026gt;/domain.yaml   Creates a convenient utility script, delete-domain-job.yaml, to clean up the domain home created by the create script.\n    Now, run the create-domain.sh sample script below, pointing it at the create-domain-inputs inputs file and an output directory like below:\nbash-4.2$ rm -rf kubernetes/create-wcsites-domain/output/weblogic-domains bash-4.2$ sh kubernetes/create-wcsites-domain/domain-home-on-pv/create-domain.sh \\  -i kubernetes/create-wcsites-domain/domain-home-on-pv/create-domain-inputs.yaml \\  -o kubernetes/create-wcsites-domain/output Input parameters being used export version=\u0026#34;create-weblogic-sample-domain-inputs-v1\u0026#34; export adminPort=\u0026#34;7001\u0026#34; export adminServerName=\u0026#34;adminserver\u0026#34; export domainUID=\u0026#34;wcsitesinfra\u0026#34; export domainHome=\u0026#34;/u01/oracle/user_projects/domains/$domainUID\u0026#34; export serverStartPolicy=\u0026#34;IfNeeded\u0026#34; export clusterName=\u0026#34;wcsites-cluster\u0026#34; export configuredManagedServerCount=\u0026#34;3\u0026#34; export initialManagedServerReplicas=\u0026#34;1\u0026#34; export managedServerNameBase=\u0026#34;wcsites_server\u0026#34; export managedServerPort=\u0026#34;8001\u0026#34; export image=\u0026#34;oracle/wcsites:12.2.1.4-21.1.1\u0026#34; export imagePullPolicy=\u0026#34;IfNotPresent\u0026#34; export productionModeEnabled=\u0026#34;true\u0026#34; export weblogicCredentialsSecretName=\u0026#34;wcsitesinfra-domain-credentials\u0026#34; export includeServerOutInPodLog=\u0026#34;true\u0026#34; export logHome=\u0026#34;/u01/oracle/user_projects/domains/logs/$domainUID\u0026#34; export t3ChannelPort=\u0026#34;30012\u0026#34; export exposeAdminT3Channel=\u0026#34;false\u0026#34; export adminNodePort=\u0026#34;30701\u0026#34; export exposeAdminNodePort=\u0026#34;false\u0026#34; export namespace=\u0026#34;wcsites-ns\u0026#34; javaOptions=-Dweblogic.StdoutDebugEnabled=false -Xms2g export persistentVolumeClaimName=\u0026#34;wcsitesinfra-domain-pvc\u0026#34; export domainPVMountPath=\u0026#34;/u01/oracle/user_projects/domains\u0026#34; export createDomainScriptsMountPath=\u0026#34;/u01/weblogic\u0026#34; export createDomainScriptName=\u0026#34;create-domain-job.sh\u0026#34; export createDomainFilesDir=\u0026#34;wlst\u0026#34; export rcuSchemaPrefix=\u0026#34;WCS1\u0026#34; export rcuDatabaseURL=\u0026#34;oracle-db.wcsitesdb-ns.svc.cluster.local:1521/devpdb.k8s\u0026#34; export rcuCredentialsSecret=\u0026#34;wcsitesinfra-rcu-credentials\u0026#34; export loadBalancerHostName=\u0026#34;abc.def.com\u0026#34; export loadBalancerPortNumber=\u0026#34;30305\u0026#34; export loadBalancerProtocol=\u0026#34;http\u0026#34; export loadBalancerType=\u0026#34;traefik\u0026#34; export unicastPort=\u0026#34;50000\u0026#34; export sitesSamples=\u0026#34;true\u0026#34; Generating kubernetes/create-wcsites-domain/output/weblogic-domains/wcsitesinfra/create-domain-job.yaml Generating kubernetes/create-wcsites-domain/output/weblogic-domains/wcsitesinfra/delete-domain-job.yaml Generating kubernetes/create-wcsites-domain/output/weblogic-domains/wcsitesinfra/domain.yaml Checking to see if the secret wcsitesinfra-domain-credentials exists in namespace wcsites-ns configmap/wcsitesinfra-create-fmw-infra-sample-domain-job-cm created Checking the configmap wcsitesinfra-create-fmw-infra-sample-domain-job-cm was created configmap/wcsitesinfra-create-fmw-infra-sample-domain-job-cm labeled Checking if object type job with name wcsitesinfra-create-fmw-infra-sample-domain-job exists No resources found. $loadBalancerType is NOT empty Creating the domain by creating the job kubernetes/create-wcsites-domain/output/weblogic-domains/wcsitesinfra/create-domain-job.yaml job.batch/wcsitesinfra-create-fmw-infra-sample-domain-job created Waiting for the job to complete... status on iteration 1 of 20 pod wcsitesinfra-create-fmw-infra-sample-domain-job-6l7zh status is Running status on iteration 2 of 20 pod wcsitesinfra-create-fmw-infra-sample-domain-job-6l7zh status is Running status on iteration 3 of 20 pod wcsitesinfra-create-fmw-infra-sample-domain-job-6l7zh status is Running status on iteration 4 of 20 pod wcsitesinfra-create-fmw-infra-sample-domain-job-6l7zh status is Running status on iteration 5 of 20 pod wcsitesinfra-create-fmw-infra-sample-domain-job-6l7zh status is Running status on iteration 6 of 20 pod wcsitesinfra-create-fmw-infra-sample-domain-job-6l7zh status is Running status on iteration 7 of 20 pod wcsitesinfra-create-fmw-infra-sample-domain-job-6l7zh status is Running status on iteration 8 of 20 pod wcsitesinfra-create-fmw-infra-sample-domain-job-6l7zh status is Running status on iteration 9 of 20 pod wcsitesinfra-create-fmw-infra-sample-domain-job-6l7zh status is Running status on iteration 10 of 20 pod wcsitesinfra-create-fmw-infra-sample-domain-job-6l7zh status is Running status on iteration 11 of 20 pod wcsitesinfra-create-fmw-infra-sample-domain-job-6l7zh status is Running status on iteration 12 of 20 pod wcsitesinfra-create-fmw-infra-sample-domain-job-6l7zh status is Running status on iteration 13 of 20 pod wcsitesinfra-create-fmw-infra-sample-domain-job-6l7zh status is Running status on iteration 14 of 20 pod wcsitesinfra-create-fmw-infra-sample-domain-job-6l7zh status is Running status on iteration 15 of 20 pod wcsitesinfra-create-fmw-infra-sample-domain-job-6l7zh status is Running status on iteration 16 of 20 pod wcsitesinfra-create-fmw-infra-sample-domain-job-6l7zh status is Completed Domain wcsitesinfra was created and will be started by the WebLogic Kubernetes Operator The following files were generated: kubernetes/create-wcsites-domain/output/weblogic-domains/wcsitesinfra/create-domain-inputs.yaml kubernetes/create-wcsites-domain/output/weblogic-domains/wcsitesinfra/create-domain-job.yaml kubernetes/create-wcsites-domain/output/weblogic-domains/wcsitesinfra/domain.yaml Completed\t  To monitor the above domain creation logs:\n$ kubectl get pods -n wcsites-ns |grep wcsitesinfra-create wcsitesinfra-create-fmw-infra-sample-domain-job-6l7zh 1/1 Running 0 6s $ kubectl get pods -n wcsites-ns | grep wcsitesinfra-create | awk \u0026#39;{print $1}\u0026#39; | xargs kubectl -n wcsites-ns logs -f SAMPLE OUTPUT:\nThe domain will be created using the script /u01/weblogic/createSitesDomain.sh Install Automation -\u0026gt; Starting automation script [mkdir] Created dir: /u01/wcs-wls-docker-install/work [echo] [3/14/20 7:54 AM] Work Directory=/u01/wcs-wls-docker-install/work [echo] [3/14/20 7:54 AM] DB URL: jdbc:oracle:thin:@ [echo] [3/14/20 7:54 AM] Info -\u0026gt; The script.db.connectstring has been set. [echo] [3/14/20 7:54 AM] Info.setDBConnectStringPropertey -\u0026gt; setting oracle-db.wcsitesdb-ns.svc.cluster.local:1521/devpdb.k8s [echo] [3/14/20 7:54 AM] Validation -\u0026gt; Checking if full path to JAVA executable is correctly specified [exec] java version \u0026quot;1.8.0_241\u0026quot; [exec] Java(TM) SE Runtime Environment (build 1.8.0_241-b07) [exec] Java HotSpot(TM) 64-Bit Server VM (build 25.241-b07, mixed mode) [echo] [3/14/20 7:54 AM] Validation -\u0026gt; Checking database connection [echo] [3/14/20 7:54 AM] dbUrl-----------------: jdbc:oracle:thin:@oracle-db.wcsitesdb-ns.svc.cluster.local:1521/devpdb.k8s [echo] [3/14/20 7:54 AM] Database Connection --\u0026gt; Success! [echo] [3/14/20 7:54 AM] 1st phase: WebCenter Sites installation started... [copy] Copying 1 file to /u01/wcs-wls-docker-install/work [copy] Copying /u01/wcs-wls-docker-install/rcu.rsp to /u01/wcs-wls-docker-install/work/rcu.rsp [echo] [3/14/20 7:54 AM] 1st phase: WebCenter Sites installation completed [echo] [3/14/20 7:54 AM] 2nd phase: WebCenter Sites RCU configuration started... [echo] [3/14/20 7:54 AM] Installation -\u0026gt; Repository Creation Utility - creates schema [echo] [3/14/20 7:54 AM] connectString-----------------: oracle-db.wcsitesdb-ns.svc.cluster.local:1521/devpdb.k8s [replace] Replaced 1 occurrences in 1 files. [replace] Replaced 1 occurrences in 1 files. [replace] Replaced 1 occurrences in 1 files. [replace] Replaced 1 occurrences in 1 files. [replace] Replaced 1 occurrences in 1 files. [echo] [3/14/20 7:54 AM] Create schema using command: /u01/oracle/oracle_common/bin/rcu -silent -responseFile /u01/wcs-wls-docker-install/work/rcu.rsp -f \u0026lt; /u01/wcs-wls-docker-install/work/rcuPasswords8852085298596415722.txt \u0026gt;/u01/wcs-wls-docker-install/work/rcu_output.log [echo] [3/14/20 7:54 AM] RCU Create Schema -\u0026gt; Please wait ... may take several minutes [echo] [3/14/20 8:00 AM] [echo] RCU Logfile: /u01/wcs-wls-docker-install/work/rcu/RCU2020-03-14_07-54_2112542638/logs/rcu.log [echo] Processing command line .... [echo] Repository Creation Utility - Checking Prerequisites [echo] Checking Global Prerequisites [echo] Repository Creation Utility - Checking Prerequisites [echo] Checking Component Prerequisites [echo] Repository Creation Utility - Creating Tablespaces [echo] Validating and Creating Tablespaces [echo] Create tablespaces in the repository database [echo] Repository Creation Utility - Create [echo] Repository Create in progress. [echo] Executing pre create operations [echo] Percent Complete: 20 [echo] Percent Complete: 20 [echo] Percent Complete: 22 [echo] Percent Complete: 24 [echo] Percent Complete: 26 [echo] Percent Complete: 26 [echo] Percent Complete: 28 [echo] Percent Complete: 28 [echo] Creating Common Infrastructure Services(STB) [echo] Percent Complete: 36 [echo] Percent Complete: 36 [echo] Percent Complete: 46 [echo] Percent Complete: 46 [echo] Percent Complete: 46 [echo] Creating Audit Services Append(IAU_APPEND) [echo] Percent Complete: 54 [echo] Percent Complete: 54 [echo] Percent Complete: 64 [echo] Percent Complete: 64 [echo] Percent Complete: 64 [echo] Creating Audit Services Viewer(IAU_VIEWER) [echo] Percent Complete: 72 [echo] Percent Complete: 72 [echo] Percent Complete: 72 [echo] Percent Complete: 73 [echo] Percent Complete: 73 [echo] Percent Complete: 74 [echo] Percent Complete: 74 [echo] Percent Complete: 74 [echo] Creating WebLogic Services(WLS) [echo] Percent Complete: 79 [echo] Percent Complete: 79 [echo] Percent Complete: 83 [echo] Percent Complete: 83 [echo] Percent Complete: 92 [echo] Percent Complete: 99 [echo] Percent Complete: 99 [echo] Creating Audit Services(IAU) [echo] Percent Complete: 100 [echo] Creating Oracle Platform Security Services(OPSS) [echo] Creating WebCenter Sites(WCSITES) [echo] Executing post create operations [echo] Repository Creation Utility: Create - Completion Summary [echo] Database details: [echo] ----------------------------- [echo] Host Name : oracle-db.wcsitesdb-ns.svc.cluster.local:1521/devpdb.k8s [echo] Port : 1521 [echo] Service Name : devpdb.k8s [echo] Connected As : sys [echo] Prefix for (prefixable) Schema Owners : WCS1 [echo] RCU Logfile : /u01/wcs-wls-docker-install/work/rcu/RCU2020-03-14_07-54_2112542638/logs/rcu.log [echo] Component schemas created: [echo] ----------------------------- [echo] Component Status Logfile [echo] Common Infrastructure Services Success /u01/wcs-wls-docker-install/work/rcu/RCU2020-03-14_07-54_2112542638/logs/stb.log [echo] Oracle Platform Security Services Success /u01/wcs-wls-docker-install/work/rcu/RCU2020-03-14_07-54_2112542638/logs/opss.log [echo] WebCenter Sites Success /u01/wcs-wls-docker-install/work/rcu/RCU2020-03-14_07-54_2112542638/logs/wcsites.log [echo] Audit Services Success /u01/wcs-wls-docker-install/work/rcu/RCU2020-03-14_07-54_2112542638/logs/iau.log [echo] Audit Services Append Success /u01/wcs-wls-docker-install/work/rcu/RCU2020-03-14_07-54_2112542638/logs/iau_append.log [echo] Audit Services Viewer Success /u01/wcs-wls-docker-install/work/rcu/RCU2020-03-14_07-54_2112542638/logs/iau_viewer.log [echo] WebLogic Services Success /u01/wcs-wls-docker-install/work/rcu/RCU2020-03-14_07-54_2112542638/logs/wls.log [echo] Repository Creation Utility - Create : Operation Completed [echo] [3/14/20 8:00 AM] Successfully created schemas [echo] [3/14/20 8:00 AM] 2nd phase: WebCenter Sites RCU configuration completed successfully. [echo] [3/14/20 8:00 AM] Oracle WebCenter Sites Installation complete. You can connect to the WebCenter Sites instance at http://10.244.0.252:7002/sites/ Sites RCU Phase completed successfull!!! Sites Installation completed in 366 seconds. --------------------------------------------------------- The domain will be created using the script /u01/weblogic/create-domain-script.sh wlst.sh -skipWLSModuleScanning /u01/weblogic/createSitesDomain.py -oh /u01/oracle -jh /u01/jdk -parent /u01/oracle/user_projects/domains/wcsitesinfra/.. -name wcsitesinfra -user weblogic -password Welcome1 -rcuDb oracle-db.wcsitesdb-ns.svc.cluster.local:1521/devpdb.k8s -rcuPrefix WCS1 -rcuSchemaPwd Welcome1 -adminListenPort 7001 -adminName adminserver -managedNameBase wcsites_server -managedServerPort 8001 -prodMode true -managedServerCount 3 -clusterName wcsites-cluster -exposeAdminT3Channel false -t3ChannelPublicAddress 10.123.152.96 -t3ChannelPort 30012 -domainType wcsites -machineName wcsites_machine Initializing WebLogic Scripting Tool (WLST) ... Welcome to WebLogic Server Administration Scripting Shell Type help() for help on available commands Creating Admin Server... Creating cluster... Creating Node Managers... managed server name is wcsites_server1 managed server name is wcsites_server2 managed server name is wcsites_server3 ['wcsites_server1', 'wcsites_server2', 'wcsites_server3'] Will create Base domain at /u01/oracle/user_projects/domains/wcsitesinfra Writing base domain... Base domain created at /u01/oracle/user_projects/domains/wcsitesinfra Extending domain at /u01/oracle/user_projects/domains/wcsitesinfra Database oracle-db.wcsitesdb-ns.svc.cluster.local:1521/devpdb.k8s ExposeAdminT3Channel false with 10.123.152.96:30012 Applying JRF templates... Extension Templates added Applying Oracle WebCenter Sites templates... Extension Templates added Configuring the Service Table DataSource... fmwDb...jdbc:oracle:thin:@oracle-db.wcsitesdb-ns.svc.cluster.local:1521/devpdb.k8s Set user...WCS140_OPSS Set user...WCS140_IAU_APPEND Set user...WCS140_IAU_VIEWER Set user...WCS140_STB Set user...WCS140_WCSITES Getting Database Defaults... Targeting Server Groups... Targeting Server Groups... Set CoherenceClusterSystemResource to defaultCoherenceCluster for server:wcsites_server1 Set CoherenceClusterSystemResource to defaultCoherenceCluster for server:wcsites_server2 Set CoherenceClusterSystemResource to defaultCoherenceCluster for server:wcsites_server3 Targeting Cluster ... Set CoherenceClusterSystemResource to defaultCoherenceCluster for cluster:wcsites-cluster Set WLS clusters as target of defaultCoherenceCluster:[wcsites-cluster] Preparing to update domain... Mar 14, 2020 8:01:52 AM oracle.security.jps.az.internal.runtime.policy.AbstractPolicyImpl initializeReadStore INFO: Property for read store in parallel: oracle.security.jps.az.runtime.readstore.threads = null Domain updated successfully Copying /u01/weblogic/server-config-update.sh to PV /u01/oracle/user_projects/domains/wcsitesinfra Copying /u01/weblogic/unicast.py to PV /u01/oracle/user_projects/domains/wcsitesinfra replacing tokens in /u01/oracle/user_projects/domains/wcsitesinfra/server-config-update.sh Successfully Completed   Initialize the WebCenter Sites Domain To start the domain, apply the above domain.yaml:\n```bash $ kubectl apply -f kubernetes/create-wcsites-domain/output/weblogic-domains/wcsitesinfra/domain.yaml domain.weblogic.oracle/wcsitesinfra created ```  Verify the WebCenter Sites Domain Verify that the domain and servers pods and services are created and in the READY state:\nSample run below:\n-bash-4.2$ kubectl get pods -n wcsites-ns -w NAME READY STATUS RESTARTS\tAGE wcsitesinfra-create-fmw-infra-sample-domain-job-6l7zh 0/1 Completed 0 15m wcsitesinfra-introspect-domain-job-7tvdt 1/1 Running 0 15s wcsitesinfra-introspect-domain-job-7tvdt 0/1 Completed 0 25s wcsitesinfra-introspect-domain-job-7tvdt 0/1 Terminating 0 5s wcsitesinfra-adminserver 0/1 Pending 0 0s wcsitesinfra-adminserver 0/1 Init:0/1 0 0s wcsitesinfra-adminserver 0/1 PodInitializing 0 12s wcsitesinfra-adminserver 0/1 Running 0 13s wcsitesinfra-adminserver 1/1 Running 0 108s wcsitesinfra-wcsites-server1 0/1 Pending 0 0s wcsitesinfra-wcsites-server1 0/1 Init:0/1 0 1s wcsitesinfra-wcsites-server1 0/1 PodInitializing 0 13s wcsitesinfra-wcsites-server1 0/1 Running 0 14s wcsitesinfra-wcsites-server1 1/1 Running 0 96s -bash-4.2$ kubectl get all -n wcsites-ns NAME READY STATUS RESTARTS AGE pod/wcsitesinfra-adminserver 1/1 Running 0 7m5s pod/wcsitesinfra-create-fmw-infra-sample-domain-job-6l7zh 0/1 Completed 0 22m pod/wcsitesinfra-wcsites-server1 1/1 Running 0 5m17s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/wcsitesinfra-adminserver ClusterIP None \u0026lt;none\u0026gt; 7001/TCP 7m5s service/wcsitesinfra-cluster-wcsites-cluster ClusterIP 10.109.210.3 \u0026lt;none\u0026gt; 8001/TCP 5m17s service/wcsitesinfra-wcsites-server1 ClusterIP None \u0026lt;none\u0026gt; 8001/TCP 5m17s NAME COMPLETIONS DURATION AGE job.batch/wcsitesinfra-create-fmw-infra-sample-domain-job 1/1 7m40s 22m NAME AGE domain.weblogic.oracle/wcsitesinfra 7m5s NAME AGE cluster.weblogic.oracle/wcsitesinfra-wcsites-cluster 7m5s To see the Admin and Managed Servers logs, you can check the pod logs:\n$ kubectl logs -f wcsitesinfra-adminserver -n wcsites-ns $ kubectl exec -it wcsitesinfra-adminserver -n wcsites-ns -- /bin/bash $ kubectl logs -f wcsitesinfra-wcsites-server1 -n wcsites-ns $ kubectl exec -it wcsitesinfra-wcsites-server1 -n wcsites-ns -- /bin/bash Verify the Pods Use the following command to see the pods running the servers:\n$ kubectl get pods -n NAMESPACE Here is an example of the output of this command:\n-bash-4.2$ kubectl get pods -n wcsites-ns NAME READY STATUS RESTARTS AGE wcsitesinfra-adminserver 1/1 Running 0 56m wcsitesinfra-create-fmw-infra-sample-domain-job-rq4xv 0/1 Completed 0 65m wcsitesinfra-wcsites-server1 1/1 Running 0 41m Verify the Services Use the following command to see the services for the domain:\n$ kubectl get services -n NAMESPACE Here is an example of the output of this command:\n-bash-4.2$ kubectl get services -n wcsites-ns NAME READY STATUS RESTARTS AGE wcsitesinfra-adminserver 1/1 Running 0 7m38s wcsitesinfra-create-fmw-infra-sample-domain-job-6l7zh 0/1 Completed 0 23m wcsitesinfra-wcsites-server1 1/1 Running 0 5m50s Expose WebCenter Sites Services Below are the default values for exposing services required for all the WebCenter Sites Managed Servers. Reset them if any values are modified.\nDetails on kubernetes/create-wcsites-domain/utils/wcs-services.yaml:\n name: wcsitesinfra-wcsites-server1-np namespace: wcsites-ns weblogic.domainUID: wcsitesinfra weblogic.serverName: wcsites_server1  Execute the below command for exposing the services: (If domain is configured for more than 3 Managed Servers then add the service yaml for additional servers.)\n$ kubectl apply -f kubernetes/create-wcsites-domain/utils/wcs-services.yaml service/wcsitesinfra-wcsites-server1-np created service/wcsitesinfra-wcsites-server1-svc created service/wcsitesinfra-wcsites-server2-svc created service/wcsitesinfra-wcsites-server3-svc created To verify the services created, here is an example of the output of this command:\n-bash-4.2$ kubectl get services -n wcsites-ns NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE wcsitesinfra-adminserver ClusterIP None \u0026lt;none\u0026gt; 7001/TCP 11m wcsitesinfra-cluster-wcsites-cluster ClusterIP 10.109.210.3 \u0026lt;none\u0026gt; 8001/TCP 9m14s wcsitesinfra-wcsites-server1 ClusterIP None \u0026lt;none\u0026gt; 8001/TCP 9m14s wcsitesinfra-wcsites-server1-np NodePort 10.105.167.205 \u0026lt;none\u0026gt; 8001:30155/TCP 2m47s wcsitesinfra-wcsites-server1-svc ClusterIP None \u0026lt;none\u0026gt; 50000/TCP,50001/TCP,50002/TCP,50003/TCP,50004/TCP,50005/TCP,50006/TCP,50007/TCP,50008/TCP,50009/TCP 2m47s wcsitesinfra-wcsites-server2-svc ClusterIP None \u0026lt;none\u0026gt; 50000/TCP,50001/TCP,50002/TCP,50003/TCP,50004/TCP,50005/TCP,50006/TCP,50007/TCP,50008/TCP,50009/TCP 2m47s wcsitesinfra-wcsites-server3-svc ClusterIP None \u0026lt;none\u0026gt; 50000/TCP,50001/TCP,50002/TCP,50003/TCP,50004/TCP,50005/TCP,50006/TCP,50007/TCP,50008/TCP,50009/TCP 2m47s Load Balance With an Ingress Controller or A Web Server You can choose a load balancer provider for your WebLogic domains running in a Kubernetes cluster. Please refer to the WebLogic Kubernetes Operator Load Balancer Samples for information about the current capabilities and setup instructions for each of the supported load balancers.\nFor information on how to set up Loadbalancer for setting up WebCenter Sites domain on K8S:\nFor Traefik, see Setting Up Loadbalancer Traefik for the WebCenter Sites Domain on K8S\nFor Nginx, see Setting Up Loadbalancer Nginx for the WebCenter Sites Domain on K8S\nFor Apache webtier, see Setting Up Loadbalancer Apache Webtier for the WebCenter Sites Domain on K8S\nConfigure WebCenter Sites   Configure WebCenter Sites by hitting url http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT}/sites/sitesconfigsetup\nWhen installing, select sample sites to be installed and enter the required passwords. Do not change the sites-config location. If you change the location, installation will fail.\n  After the configuration is complete, edit the domain, and restart the Managed Server.\n  To stop Managed Servers:\n$ kubectl patch cluster wcsitesinfra-wcsites-cluster -n wcsites-ns --type=merge -p \u0026#39;{\u0026#34;spec\u0026#34;:{\u0026#34;replicas\u0026#34;:0}}\u0026#39; To start all configured Managed Servers:\n$ kubectl patch cluster wcsitesinfra-wcsites-cluster -n wcsites-ns --type=merge -p \u0026#39;{\u0026#34;spec\u0026#34;:{\u0026#34;replicas\u0026#34;:3}}\u0026#39; Wait till the Managed Server pod is killed and then restart it. Monitor with below command: -bash-4.2$ kubectl get pods -n wcsites-ns -w NAME READY STATUS RESTARTS AGE wcsitesinfra-adminserver 1/1 Running 0 111m wcsitesinfra-create-fmw-infra-sample-domain-job-6l7zh 0/1 Completed 0 126m wcsitesinfra-wcsites-server1 1/1 Running 0 3m7s wcsitesinfra-wcsites-server2 1/1 Running 0 3m7s wcsitesinfra-wcsites-server3 1/1 Running 0 3m7s   Settings in WebCenter Sites Property Management Incase of Traefik Load Balancer: Use Property Management Tool and update cookieserver.validnames property with value JSESSIONID,sticky.\nIncase of Nginx Load Balancer: Use Property Management Tool and update cookieserver.validnames property with value JSESSIONID,stickyid.\nFor Publishing Setting in WebCenter Sites While configuring publishing destination use NodePort port of target cluster which can be found by executing below command:\n(In this example for publishihng the port 30155 has to be used.)\n-bash-4.2$ kubectl get service/wcsitesinfra-wcsites-server1-np -n wcsites-ns NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE wcsitesinfra-wcsites-server1-np NodePort 10.105.167.205 \u0026lt;none\u0026gt; 8001:30155/TCP 32h Customization A customer specific customizations (extend.sites.webapp-lib.war) has to be placed in sites-home directory inside your domain mount path.\n"
},
{
	"uri": "/fmw-kubernetes/soa-domains/adminguide/",
	"title": "Administration Guide",
	"tags": [],
	"description": "Describes how to use some of the common utility tools and configurations to administer Oracle SOA Suite domains.",
	"content": "Administer Oracle SOA Suite domains in Kubernetes.\n Set up a load balancer  Configure different load balancers for Oracle SOA Suite domains.\n Enable additional URL access  Extend an existing ingress to enable additional application URL access for Oracle SOA Suite domains.\n Configure SSL certificates  Create and configure custom SSL certificates for Oracle SOA Suite domains.\n Monitor a domain and publish logs  Monitor an Oracle SOA Suite domain and publish the WebLogic Server logs to Elasticsearch.\n Expose the T3/T3S protocol  Create a T3/T3S channel and the corresponding Kubernetes service to expose the T3/T3S protocol for the Administration Server and Managed Servers in an Oracle SOA Suite domain.\n Deploy composite applications  Deploy composite applications for Oracle SOA Suite and Oracle Service Bus domains.\n Persist adapter customizations  Persist the customizations done for Oracle SOA Suite adapters.\n Perform WLST operations  Perform WLST administration operations using a helper pod running in the same Kubernetes cluster as the Oracle SOA Suite domain.\n "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/adminguide/",
	"title": "Administration Guide",
	"tags": [],
	"description": "Describes how to use some of the common utility tools and configurations to administer Oracle WebCenter Sites domains.",
	"content": "Administer Oracle WebCenter Sites domains in Kubernetes.\n Set up a load balancer  Configure different load balancers for Oracle WebCenter Sites domains\n Monitor a domain and publish logs  Monitor an Oracle WebCenter Sites domain and publish the WebLogic Server logs to Elasticsearch.\n Elasticsearch integration for logs  Monitor an Oracle WebCenter Sites domain and publish the WebLogic Server logs to Elasticsearch.\n Publish logs to Elasticsearch  Monitor an Oracle WebCenter Sites domain and publish the WebLogic Server logs to Elasticsearch.\n "
},
{
	"uri": "/fmw-kubernetes/soa-domains/adminguide/configure-load-balancer/apache/",
	"title": "Apache web tier",
	"tags": [],
	"description": "Configure the Apache web tier load balancer for Oracle SOA Suite domains.",
	"content": "This section provides information about how to install and configure the Apache web tier to load balance Oracle SOA Suite domain clusters. You can configure Apache web tier for non-SSL and SSL termination access of the application URL.\nFollow these steps to set up the Apache web tier as a load balancer for an Oracle SOA Suite domain in a Kubernetes cluster:\n Build the Apache web tier image Create the Apache plugin configuration file Prepare the certificate and private key Install the Apache web tier Helm chart Verify domain application URL access Uninstall Apache web tier  Build the Apache web tier image Refer to the sample, to build the Apache web tier Docker image.\nCreate the Apache plugin configuration file   The configuration file named custom_mod_wl_apache.conf should have all the URL routing rules for the Oracle SOA Suite applications deployed in the domain that needs to be accessible externally. Update this file with values based on your environment. The file content is similar to below.\n  Click here to see the sample content of the configuration file custom_mod_wl_apache.conf for soa domain   # Copyright (c) 2020 Oracle and/or its affiliates. # # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. # \u0026lt;IfModule mod_weblogic.c\u0026gt; WebLogicHost \u0026lt;WEBLOGIC_HOST\u0026gt; WebLogicPort 7001 \u0026lt;/IfModule\u0026gt; # Directive for weblogic admin Console deployed on WebLogic Admin Server \u0026lt;Location /console\u0026gt; SetHandler weblogic-handler WebLogicHost soainfra-adminserver WebLogicPort 7001 \u0026lt;/Location\u0026gt; \u0026lt;Location /em\u0026gt; SetHandler weblogic-handler WebLogicHost soainfra-adminserver WebLogicPort 7001 \u0026lt;/Location\u0026gt; \u0026lt;Location /servicebus\u0026gt; SetHandler weblogic-handler WebLogicHost soainfra-adminserver WebLogicPort 7001 \u0026lt;/Location\u0026gt; \u0026lt;Location /lwpfconsole\u0026gt; SetHandler weblogic-handler WebLogicHost soainfra-adminserver WebLogicPort 7001 \u0026lt;/Location\u0026gt; \u0026lt;Location /xbusrouting\u0026gt; SetHandler weblogic-handler WebLogicHost soainfra-adminserver WebLogicPort 7001 \u0026lt;/Location\u0026gt; \u0026lt;Location /xbustransform\u0026gt; SetHandler weblogic-handler WebLogicHost soainfra-adminserver WebLogicPort 7001 \u0026lt;/Location\u0026gt; \u0026lt;Location /weblogic/ready\u0026gt; SetHandler weblogic-handler WebLogicHost soainfra-adminserver WebLogicPort 7001 \u0026lt;/Location\u0026gt; # Directive for all applications deployed on weblogic cluster with a prepath defined by LOCATION variable. # For example, if the LOCATION is set to \u0026#39;/weblogic\u0026#39;, all applications deployed on the cluster can be accessed via # http://myhost:myport/weblogic/application_end_url # where \u0026#39;myhost\u0026#39; is the IP of the machine that runs the Apache web tier, and # \u0026#39;myport\u0026#39; is the port that the Apache web tier is publicly exposed to. # Note that LOCATION cannot be set to \u0026#39;/\u0026#39; unless this is the only Location module configured. \u0026lt;Location /soa-infra\u0026gt; WLSRequest On WebLogicCluster soainfra-cluster-soa-cluster:7003 PathTrim /weblogic1 \u0026lt;/Location\u0026gt; \u0026lt;Location /soa/composer\u0026gt; WLSRequest On WebLogicCluster soainfra-cluster-soa-cluster:7003 PathTrim /weblogic1 \u0026lt;/Location\u0026gt; \u0026lt;Location /integration/worklistapp\u0026gt; WLSRequest On WebLogicCluster soainfra-cluster-soa-cluster:7003 PathTrim /weblogic1 \u0026lt;/Location\u0026gt; \u0026lt;Location /ess\u0026gt; WLSRequest On WebLogicCluster soainfra-cluster-soa-cluster:7003 PathTrim /weblogic1 \u0026lt;/Location\u0026gt; \u0026lt;Location /EssHealthCheck\u0026gt; WLSRequest On WebLogicCluster soainfra-cluster-soa-cluster:7003 PathTrim /weblogic1 \u0026lt;/Location\u0026gt; # Directive for all application deployed on weblogic cluster with a prepath defined by LOCATION2 variable # For example, if the LOCATION2 is set to \u0026#39;/weblogic2\u0026#39;, all applications deployed on the cluster can be accessed via # http://myhost:myport/weblogic2/application_end_url # where \u0026#39;myhost\u0026#39; is the IP of the machine that runs the Apache web tier, and # \u0026#39;myport\u0026#39; is the port that the Apache webt ier is publicly exposed to. #\u0026lt;Location /weblogic2\u0026gt; #WLSRequest On #WebLogicCluster domain2-cluster-cluster-1:8021 #PathTrim /weblogic2 #\u0026lt;/Location\u0026gt;      Create a PV and PVC (pv-claim-name) that can be used to store the custom_mod_wl_apache.conf. Refer to the Sample for creating a PV or PVC.\n  Prepare the certificate and private key   (For the SSL termination configuration only) Run the following commands to generate your own certificate and private key using openssl.\n$ cd ${WORKDIR} $ cd charts/apache-samples/custom-sample $ export VIRTUAL_HOST_NAME=WEBLOGIC_HOST $ export SSL_CERT_FILE=WEBLOGIC_HOST.crt $ export SSL_CERT_KEY_FILE=WEBLOGIC_HOST.key $ sh certgen.sh  NOTE: Replace WEBLOGIC_HOST with the host name on which Apache web tier is to be installed.\n   Click here to see the output of the certifcate generation   $ls certgen.sh custom_mod_wl_apache.conf custom_mod_wl_apache.conf_orig input.yaml README.md $ sh certgen.sh Generating certs for WEBLOGIC_HOST Generating a 2048 bit RSA private key ........................+++ .......................................................................+++ unable to write \u0026#39;random state\u0026#39; writing new private key to \u0026#39;apache-sample.key\u0026#39; ----- $ ls certgen.sh custom_mod_wl_apache.conf_orig WEBLOGIC_HOST.info config.txt input.yaml WEBLOGIC_HOST.key custom_mod_wl_apache.conf WEBLOGIC_HOST.crt README.md      Prepare input values for the Apache web tier Helm chart.\nRun the following commands to prepare the input value file for the Apache web tier Helm chart.\n$ base64 -i ${SSL_CERT_FILE} | tr -d \u0026#39;\\n\u0026#39; $ base64 -i ${SSL_CERT_KEY_FILE} | tr -d \u0026#39;\\n\u0026#39; $ touch input.yaml Update the input parameters file, charts/apache-samples/custom-sample/input.yaml.\n  Click here to see the snapshot of the sample input.yaml file   $ cat apache-samples/custom-sample/input.yaml # Use this to provide your own Apache web tier configuration as needed; simply define this # Persistence Volume which contains your own custom_mod_wl_apache.conf file. persistentVolumeClaimName: \u0026lt;pv-claim-name\u0026gt; # The VirtualHostName of the Apache HTTP server. It is used to enable custom SSL configuration. virtualHostName: \u0026lt;WEBLOGIC_HOST\u0026gt; # The customer-supplied certificate to use for Apache web tier SSL configuration. # The value must be a string containing a base64 encoded certificate. Run following command to get it. # base64 -i ${SSL_CERT_FILE} | tr -d \u0026#39;\\n\u0026#39; customCert: \u0026lt;cert_data\u0026gt; # The customer-supplied private key to use for Apache web tier SSL configuration. # The value must be a string containing a base64 encoded key. Run following command to get it. # base64 -i ${SSL_KEY_FILE} | tr -d \u0026#39;\\n\u0026#39; customKey: \u0026lt;key_data\u0026gt;      Install the Apache web tier Helm chart   Install the Apache web tier Helm chart to the domain namespace (for example soans) with the specified input parameters:\n$ cd ${WORKDIR}/charts $ helm install apache-webtier --values apache-samples/custom-sample/input.yaml --namespace soans apache-webtier --set image=oracle/apache:12.2.1.3   Check the status of the Apache web tier:\n$ kubectl get all -n soans | grep apache Sample output of the status of the Apache web tier:\npod/apache-webtier-apache-webtier-65f69dc6bc-zg5pj 1/1 Running 0 22h service/apache-webtier-apache-webtier NodePort 10.108.29.98 \u0026lt;none\u0026gt; 80:30305/TCP,4433:30443/TCP 22h deployment.apps/apache-webtier-apache-webtier 1/1 1 1 22h replicaset.apps/apache-webtier-apache-webtier-65f69dc6bc 1 1 1 22h   Verify domain application URL access After the Apache web tier load balancer is running, verify that the domain applications are accessible through the load balancer port 30305/30443. The application URLs for domain of type soa are:\n Note: Port 30305 is the LOADBALANCER-Non-SSLPORT and port 30443 is LOADBALANCER-SSLPORT.\n NONSSL configuration http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/weblogic/ready http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/console http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/em http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/soa-infra http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/soa/composer http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/integration/worklistapp SSL configuration https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/weblogic/ready https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/console https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/em https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/soa-infra https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/soa/composer https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/integration/worklistapp Uninstall Apache web tier $ helm delete apache-webtier -n soans "
},
{
	"uri": "/fmw-kubernetes/soa-domains/adminguide/configuring-custom-ssl-certificates/",
	"title": "Configure SSL certificates",
	"tags": [],
	"description": "Create and configure custom SSL certificates for Oracle SOA Suite domains.",
	"content": "Secure Socket Layer (SSL) provides a secured communication for data sent over unsecured networks. In an SSL termination scenario, you can configure SSL between the client browser and the load balancer in your Oracle SOA Suite instance to ensure that applications are accessed securely. In an SSL end-to-end scenario, an Oracle SOA Suite domain is configured to use a self-signed SSL certificate that was generated during domain creation. Clients will typically receive a message indicating that the signing CA for the certificate is unknown and not trusted.\nThis section provides details on how to create and configure custom (CA-issued) SSL certificates for Oracle SOA Suite domains in both SSL end-to-end and SSL termination scenarios.\n Create custom SSL certificates in an SSL end-to-end scenario Create custom SSL certificates in an SSL termination at a load balancer  Create custom SSL certificates in an SSL end-to-end scenario These steps describe how to replace the identity and trust keystore of an Oracle SOA Suite domain with a custom identity and custom trust keystore and register with digital certificates procured from any third party authority.\nIn this documentation, the registered domain is mydomain.com and the CA signed certificates are taken from mydomain.\nCreate a custom identity and custom trust keystore and generate a certificate signing request (CSR) To create a custom identity and custom trust keystore and generate a CSR:\n  Log in to the Enterprise Manager (EM) Console and access the Keystores page by opening WebLogic Domain \u0026gt; Security \u0026gt; Keystore.\n  Under the system stripe, click Create Keystore to create a new keystore.\n  Provide the following details for custom identity:\nKeystore Name: custIdentity Protection: Select the Password option. Keystore Password: Enter the password. Confirm Password: Confirm the password.\n  Click Create Keystore to create another new keystore.\n  Provide the following details for custom trust:\n Keystore Name: custTrust Protection: Select the Password option. Keystore Password: Enter the password. Confirm Password: Confirm the password.    Click Manage on the custIdentity keystore name and provide the password that you specified previously.\n  Click Generate Keypair to create a new key pair, and provide the following details for custIdentity with alias as custIdentity and password:\n Alias Name: custIdentity Common Name: Common name, for example, soak8s.mydomain.com (Registered domain name) Organizational Unit: Name of the organizational unit Organization: Organization name Enter City, State, and Country names Key Type: RSA Key Size: 2048 Password: Enter the password    Click OK to generate the keypair.\n  Select the newly created keypair and click Generate CSR.\n  Export the created CSR, share it with Certificate Authority, such as digicert CA, and get root, intermediate, and signed certificates. The certificate is generated for the domain name you used in the Common Name field.\n  It is not mandatory to create identity and trust keystore under the system stripe that comes with default provisioning. You can create a new custom stripe and create identity and trust keystores under it.\nShare the CSR with CA to get CA-signed certificates   Select the new keypair under the custIdentity and click Generate CSR.\n  Export the created CSR and share it with the Certificate Authority and get root, intermediate, and signed certificates. The certificate is generated for the domain name you used in the Common Name field.\n  Download the certificates shared in the zip file from the CA. The zip file contains one of the following:\n the three certificates individually - root, intermediate, and signed certificates root and intermediate certificates in one chain and signed certificate separately    Double-click the certificate chain for root and intermediate certificates. You can see the full chain when you click on the certification path.\n  Extract the root and intermediate certificates individually by going to the certification path, select the certificate to be extracted (root or intermediate) and click View Certificate.\n  On the View Certificates pop-up, select the Details tab and click Copy to File.\n  In the Certificate Export wizard, click Next, then select Base 64 encoded X.509 (CER), and then click Next. Export the certificate.\n  Name the exported certificate as root and intermediate certificates respectively.\n  Import CA certificates Certificate Authority (CA) certificates must be imported in the following order: first the signed server certificate, then the intermediate certificate, and then the root certificate.\nTo import CA certificates:\n  Use WLST commands to import the certificate chain in the identity keystore (custIdentity):\na. Combine the three certificates into a single text file called chain.pem in the following order: signed server certificate, followed by intermediate certificate, followed by root certificate:\n-----BEGIN CERTIFICATE----- \u0026lt;signed server certificate\u0026gt; -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- \u0026lt;intermediate certificate\u0026gt; -----END CERTIFICATE----- -----BEGIN CERTIFICATE----- \u0026lt;root certificate\u0026gt; -----END CERTIFICATE----- b. Place the chain.pem in /tmp from where you will be executing the kubectl commands (for example, on the master node).\nc. Enter the following command to change the file ownership to 1000:1000 user/group:\n$ sudo chown 1000:1000 /tmp/chain.pem d. Copy /tmp/chain.pem into the Administration Server pod (for example, soainfra-adminserver):\n$ kubectl cp /tmp/chain.pem soans/soainfra-adminserver:/tmp/chain.pem e. Exec into the Administration Server pod to perform all operations:\n$ kubectl exec -it soainfra-adminserver -n soans -- bash f. Start WLST and access the Oracle Platform Security Services (OPSS) key store service:\n$ cd /u01/oracle/oracle_common/common/bin/ $ ./wlst.sh : : wls:/offline\u0026gt; connect(\u0026quot;weblogic\u0026quot;,\u0026quot;Welcome1\u0026quot;,\u0026quot;t3://soainfra-adminserver:7001\u0026quot;) : : wls:/soainfra/serverConfig/\u0026gt; svc = getOpssService(name='KeyStoreService') g. Use the WLST importKeyStoreCertificate command to import chain.pem:\nsvc.importKeyStoreCertificate(appStripe='stripe', name='keystore', password='password', alias='alias', keypassword='keypassword', type='entrytype',filepath='absolute_file_path') For example:\nwls:/soainfra/serverConfig/\u0026gt; svc.importKeyStoreCertificate(appStripe='system', name='custIdentity', password=welcome1, alias='custIdentity', keypassword='welcome1', type='CertificateChain', filepath='/tmp/chain.pem') e. Exit WLST:\nexit()   Use Oracle Enterprise Manager to import the certificate chain into the trust keystore (custTrust):\na. Log in to the Enterprise Manager Console and access the Keystores page by opening WebLogic domain \u0026gt; Security \u0026gt; Keystore.\nb. Select the trust keystore (custTrust) and click Manage.\nc. Click Import Certificate and import the certificates in this order:\n  the signed server certificate as a trusted certificate (alias mySignedCert)\n  the intermediate certificate from CA as a trusted certificate (alias myInterCA)\n  the root certificate from CA as a trusted certificate (alias myRootCA)\n    Synchronize the local keystore with the security store Synchronize keystores to synchronize information between the domain home and the Oracle Platform Security Services (OPSS) store in the database.\nTo synchronize keystores:\n Exec into the Administration server pod (for example, soainfra-adminserver): $ kubectl exec -it soainfra-adminserver -n soans -- bash  Start WLST and access the Oracle Platform Security Services (OPSS) keystore service: $ cd /u01/oracle/oracle_common/common/bin/ $ ./wlst.sh : : wls:/offline\u0026gt; connect(\u0026quot;weblogic\u0026quot;,\u0026quot;Welcome1\u0026quot;,\u0026quot;t3://soainfra-adminserver:7001\u0026quot;) : : wls:/soainfra/serverConfig/\u0026gt; svc = getOpssService(name='KeyStoreService')  Enter the following commands to synchronize the custom identity and custom trust keystores:  Note: This step is necessary only if you are using the system stripe. You do not need to synchronize the keystores if you are using a custom stripe.\n wls:/soainfra/serverConfig/\u0026gt; svc.listKeyStoreAliases(appStripe=\u0026quot;system\u0026quot;, name=\u0026quot;custIdentity\u0026quot;, password=\u0026quot; ****\u0026quot;, type=\u0026quot;*\u0026quot;) wls:/soainfra/serverConfig/\u0026gt; syncKeyStores(appStripe='system',keystoreFormat='KSS') wls:/soainfra/serverConfig/\u0026gt; svc.listKeyStoreAliases (appStripe=\u0026quot;system\u0026quot;, name=\u0026quot;myKSSTrust\u0026quot;, password=\u0026quot;****\u0026quot;, type=\u0026quot;*\u0026quot;) wls:/soainfra/serverConfig/\u0026gt; syncKeyStores(appStripe='system',keystoreFormat='KSS')   Update the WebLogic keystores with custom identity and trust To update the WebLogic keystores with custom identity and custom trust:\n  In the WebLogic Server Administration Console, open Servers \u0026gt; AdminServer \u0026gt; Configurations \u0026gt; Keystores tab.\n  Change the Keystores to Custom Identity and Custom Trust and Save.\n  Provide the values for Custom Identity:\n Custom Identity Keystore: kss://system/custidentity Custom Identity KeyStore Type: KSS Custom Identity PassPhrase: enter password given while creating the custIdentity keystore. Confirm Custom Identity PassPhrase: reenter the password.    Provide the values for Custom Trust:\n Custom Trust Keystore: kss://system/custTrust Custom Trust KeyStore Type: KSS Custom Trust PassPhrase: enter password given while creating the custTrust keystore. Confirm Custom Trust PassPhrase: reenter the password.    Click Save and then Activate changes.\n  Open the SSL tab and provide the following details:\n Private Key Alias: custIdentity (this is the alias given while creating the key pair in the custIdentity keystore.) Private Key PassPhrase: enter password given while creating the key pair under the custIdentity keystore. Confirm Private Key PassPhrase: reenter the password.    In the Advanced section, change Hostname Verification to None. Click Save and Activate changes.\n  Repeat steps 1 to 7 for all Managed Servers.\n  Restart the domain.\n  Once the servers are up and running, you can check if the SSL URLs show the updated certificates.\n  For more details, refer to:\n Administering Oracle SOA Cloud Service Administering Oracle Fusion Middleware  Create custom SSL certificates in an SSL termination at a load balancer This section provides references to configure a custom SSL certificate at a load balancer.\nThere are multiple CA vendors in the marketplace today, each offering different levels of service at varying price points. Research and choose a CA vendor that meets your service-level and budget requirements.\nFor a CA vendor to issue you a CA-issued SSL certificate, you must provide the following information:\n Your custom domain name. Public information associated with the domain confirming you as the owner. Email address associated with the custom domain for verification.  Create a Certificate Signing Request (CSR) for your load balancer and submit the CSR to the CA vendor. After receiving the CA-issued certificate, refer to Administering Oracle SOA Cloud Service to import the CA-issued SSL certificate to the load balancer. If you are using openssl to create the certificates, you can refer to Manually Generate a Certificate Signing Request (CSR) Using OpenSSL to submit the CSR to the CA vendor.\n"
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/adminguide/monitoring-wcsites-domains/",
	"title": "Monitor a domain and publish logs",
	"tags": [],
	"description": "Monitor an Oracle WebCenter Sites domain and publish the WebLogic Server logs to Elasticsearch.",
	"content": "After the Oracle WebCenter Sites domain is set up, you can:\n Monitor the Oracle WebCenter Sites instance using Prometheus and Grafana Publish WebLogic Server logs into Elasticsearch  Monitor the Oracle WebCenter Sites instance using Prometheus and Grafana Using the WebLogic Monitoring Exporter you can scrape runtime information from a running Oracle WebCenter Sites instance and monitor them using Prometheus and Grafana.\nPrerequisites This document assumes that the Prometheus Operator is deployed on the Kubernetes cluster. If it is not already deployed, follow the steps below for deploying the Prometheus Operator.\nClone the kube-prometheus project $ git clone https://github.com/coreos/kube-prometheus.git Label the nodes Kube-Prometheus requires all the exporter nodes to be labelled with kubernetes.io/os=linux. If a node is not labelled, then you must label it using the following command:\n$ kubectl label nodes --all kubernetes.io/os=linux Create Prometheus and Grafana resources Change to the kube-prometheus directory and execute the following commands to create the namespace and CRDs:\nNOTE: Wait for a minute for each command to process.\n$ cd kube-prometheus $ kubectl create -f manifests/setup $ until kubectl get servicemonitors --all-namespaces ; do date; sleep 1; echo \u0026#34;\u0026#34;; done $ kubectl create -f manifests/ Provide external access To provide external access for Grafana, Prometheus, and Alertmanager, execute the commands below:\n$ kubectl patch svc grafana -n monitoring --type=json -p \u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/type\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;NodePort\u0026#34; },{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/ports/0/nodePort\u0026#34;, \u0026#34;value\u0026#34;: 32100 }]\u0026#39; $ kubectl patch svc prometheus-k8s -n monitoring --type=json -p \u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/type\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;NodePort\u0026#34; },{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/ports/0/nodePort\u0026#34;, \u0026#34;value\u0026#34;: 32101 }]\u0026#39; $ kubectl patch svc alertmanager-main -n monitoring --type=json -p \u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/type\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;NodePort\u0026#34; },{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/ports/0/nodePort\u0026#34;, \u0026#34;value\u0026#34;: 32102 }]\u0026#39; NOTE:\n 32100 is the external port for Grafana 32101 is the external port for Prometheus 32102 is the external port for Alertmanager   Set Up the WebLogic Monitoring Exporter Set up the WebLogic Monitoring Exporter that will collect WebLogic Server metrics and monitor your WebCenter Sites domain.\nGenerate the WebLogic Monitoring Exporter Deployment Package Two packages are required as the listening ports are different for the Administration Server and Managed Servers. One binary required for the Admin Server (wls-exporter-as.war) and one for Managed Cluster (wls-exporter-ms.war). Set the required proxies and then run the script getX.X.X.sh to generate two binaries:\n$ cd kubernetes/create-wcsites-domain/utils/weblogic-monitoring-exporter $ sh get1.1.0.sh Output:\n % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 607 0 607 0 0 357 0 --:--:-- 0:00:01 --:--:-- 357 100 2016k 100 2016k 0 0 398k 0 0:00:05 0:00:05 --:--:-- 797k -------------------wls-exporter-ms start------------------- created /tmp/ci-GNysQzP1kv Copying completed /tmp/ci-GNysQzP1kv /kubernetes/create-wcsites-domain/utils/weblogic-monitoring-exporter in temp dir adding: WEB-INF/weblogic.xml (deflated 66%) adding: config.yml (deflated 63%) wls-exporter-ms.war is ready -------------------wls-exporter-ms end------------------- -------------------wls-exporter-as start------------------- Copying completed in temp dir adding: WEB-INF/weblogic.xml (deflated 66%) adding: config.yml (deflated 52%) wls-exporter-as.war is ready -------------------wls-exporter-as end------------------- zip completed kubernetes/3.3.0/create-wcsites-domain/utils/weblogic-monitoring-exporter Copy the WAR Files to the WebLogic Domain Home Copy the wls-exporter-as.war and wls-exporter-ms.war files to the domain home directory in the Administration Server pod.\n$ kubectl cp wls-exporter-as.war wcsites-ns/wcsitesinfra-adminserver:/u01/oracle/user_projects/domains/wcsitesinfra/ $ kubectl cp wls-exporter-ms.war wcsites-ns/wcsitesinfra-adminserver:/u01/oracle/user_projects/domains/wcsitesinfra/ Deploy the WebLogic Monitoring Exporter Follow these steps to deploy the package in the WebLogic Server instances:\n  In the Administration Server and Managed Servers, deploy the WebLogic Monitoring Exporter (wls-exporter-ms.war) separately using the Oracle Enterprise Manager.\n  Select the servers to which the Exporter WAR should be deployed:\n  Set the application name. The application name must be different if it is deployed separately in the Administration Server and Managed Servers. Make sure the context-root for both the deployments is wls-exporter:\n  Click Install and start application.\n  Then deploy the WebLogic Monitoring Exporter application (wls-exporter-ms.war).\n  Activate the changes to start the application. If the application is started and the port is exposed, then you can access the WebLogic Monitoring Exporter console using this URL: http://\u0026lt;server:port\u0026gt;/wls-exporter.\n  Repeat same steps for wls-exporter-as.war.\n  Configure Prometheus Operator Prometheus enables you to collect metrics from the WebLogic Monitoring Exporter. The Prometheus Operator identifies the targets using service discovery. To get the WebLogic Monitoring Exporter end point discovered as a target, you must create a service monitor pointing to the service.\nSee the following sample service monitor deployment YAML configuration file located at\nkubernetes/create-wcsites-domain/utils/weblogic-monitoring-exporter/wls-exporter.yaml.\nServiceMonitor for wls-exporter:\napiVersion: v1 kind: Secret metadata: name: basic-auth namespace: monitoring data: password: V2VsY29tZTE= # Welcome1 i.e.'WebLogic password' user: d2VibG9naWM= # weblogic i.e. 'WebLogic username' type: Opaque --- apiVersion: monitoring.coreos.com/v1 kind: ServiceMonitor metadata: name: wls-exporter-wcsitesinfra namespace: monitoring labels: k8s-app: wls-exporter spec: namespaceSelector: matchNames: - wcsites-ns selector: matchLabels: weblogic.domainName: wcsitesinfra endpoints: - basicAuth: password: name: basic-auth key: password username: name: basic-auth key: user port: default relabelings: - action: labelmap regex: __meta_kubernetes_service_label_(.+) interval: 10s honorLabels: true path: /wls-exporter/metrics The exporting of metrics from wls-exporter requires basicAuth so a Kubernetes Secret is created with the user name and password that are base64 encoded. This Secret will be used in the ServiceMonitor deployment.\nWhen generating the base64 encoded strings for the user name and password, observe if a new line character is appended in the encoded string. This line character causes an authentication failure. To avoid a new line string, use the following example:\n$ echo -n \u0026quot;Welcome1\u0026quot; | base64 V2VsY29tZTE= In the deployment YAML configuration for wls-exporter shown above, weblogic.domainName: wcsitesinfra is used as a label under spec.selector.matchLabels, so all the services will be selected for the service monitor. If you don\u0026rsquo;t use this label, you should create separate service monitors for each server\u0026ndash;if the server name is used as matching labels in spec.selector.matchLabels. Doing so will require you to relabel the configuration because Prometheus, by default, ignores the labels provided in the wls-exporter.\nBy default, Prometheus does not store all the labels provided by the target. In the service monitor deployment YAML configuration, you must mention the relabeling configuration (spec.endpoints.relabelings) so that certain labels provided by weblogic-monitoring-exporter (required for the Grafana dashboard) are stored in Prometheus. Do not delete the following section from the configuration YAML file:\nrelabelings: - action: labelmap regex: __meta_kubernetes_service_label_(.+) Add RoleBinding and Role for the WebLogic Domain Namespace The RoleBinding is required for Prometheus to access the endpoints provided by the WebLogic Monitoring Exporter. You need to add RoleBinding for the namespace under which the WebLogic Servers pods are running in the Kubernetes cluster. Edit the kube-prometheus/manifests/prometheus-roleBindingSpecificNamespaces.yaml file in the Prometheus Operator deployment manifests and add the RoleBinding for the namespace (wcsites-ns) similar to the following example:\n- apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata: name: prometheus-k8s namespace: wcsites-ns roleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: prometheus-k8s subjects: - kind: ServiceAccount name: prometheus-k8s namespace: monitoring Similarly, add the Role for the namespace under which the WebLogic Servers pods are running in the Kubernetes cluster. Edit kube-prometheus/manifests/prometheus-roleSpecificNamespaces.yaml in the Prometheus Operator deployment manifests and add the Role for the namespace (wcsites-ns) similar to the following example:\n- apiVersion: rbac.authorization.k8s.io/v1 kind: Role metadata: name: prometheus-k8s namespace: wcsites-ns rules: - apiGroups: - \u0026quot;\u0026quot; resources: - services - endpoints - pods verbs: - get - list - watch Then apply prometheus-roleBindingSpecificNamespaces.yaml and prometheus-roleSpecificNamespaces.yaml for the RoleBinding and Role to take effect in the cluster.\n$ kubectl apply -f kube-prometheus/manifests/prometheus-roleBindingSpecificNamespaces.yaml $ kubectl apply -f kube-prometheus/manifests/prometheus-roleSpecificNamespaces.yaml Deploy the Service Monitor To deploy the service monitor, use the above wls-exporter.yaml deployment YAML and run the following command:\n$ kubectl create -f kubernetes/create-wcsites-domain/utils/weblogic-monitoring-exporter/wls-exporter.yaml Enable Prometheus to Discover the Service After the deployment of the service monitor, Prometheus should be able to discover wls-exporter and export metrics.\nYou can access the Prometheus dashboard at http://mycompany.com:32101/.\nDeploy Grafana Dashboard To view the domain metrics, deploy the Grafana dashboard provided in the WebLogic Monitoring Exporter.\nYou can access the Grafana dashboard at http://mycompany.com:32100/.\n  Log in to Grafana dashboard with admin/admin.\n  Go to Settings, then select DataSources, and then Add Data Source.\nHTTP URL: Prometheus URL http://mycompany.com:32101/\nAuth: Enable Basic Auth\nBasic Auth Details: WebLogic credentials provided in step Configure Prometheus Operator\n  Download the weblogic_dashboard.json file from here.\n  Click Add and then Import. Paste the modified JSON in the Paste JSON block, and then load it.\nThis displays the WebLogic Server Dashboard.\n  "
},
{
	"uri": "/fmw-kubernetes/soa-domains/appendix/docker-k8s-hardening/",
	"title": "Security hardening",
	"tags": [],
	"description": "Review resources for the Docker and Kubernetes cluster hardening.",
	"content": "Securing a Kubernetes cluster involves hardening on multiple fronts - securing the API servers, etcd, nodes, container images, container run-time, and the cluster network. Apply principles of defense in depth, principle of least privilege, and minimize the attack surface. Use security tools such as Kube-Bench to verify the cluster\u0026rsquo;s security posture. Since Kubernetes is evolving rapidly refer to Kubernetes Security Overview for the latest information on securing a Kubernetes cluster. Also ensure the deployed Docker containers follow the Docker Security guidance.\nThis section provides references on how to securely configure Docker and Kubernetes.\nReferences   Docker hardening\n https://docs.docker.com/engine/security/security/ https://blog.aquasec.com/docker-security-best-practices    Kubernetes hardening\n https://kubernetes.io/docs/concepts/security/overview/ https://kubernetes.io/docs/concepts/security/pod-security-standards/ https://blogs.oracle.com/developers/5-best-practices-for-kubernetes-security    Security best practices for Oracle WebLogic Server Running in Docker and Kubernetes\n https://blogs.oracle.com/weblogicserver/security-best-practices-for-weblogic-server-running-in-docker-and-kubernetes    "
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/appendix/docker-k8s-hardening/",
	"title": "Security hardening",
	"tags": [],
	"description": "Review resources for the Docker and Kubernetes cluster hardening.",
	"content": "Securing a Kubernetes cluster involves hardening on multiple fronts - securing the API servers, etcd, nodes, container images, container run-time, and the cluster network. Apply principles of defense in depth, principle of least privilege, and minimize the attack surface. Use security tools such as Kube-Bench to verify the cluster\u0026rsquo;s security posture. Since Kubernetes is evolving rapidly refer to Kubernetes Security Overview for the latest information on securing a Kubernetes cluster. Also ensure the deployed Docker containers follow the Docker Security guidance.\nThis section provides references on how to securely configure Docker and Kubernetes.\nReferences   Docker hardening\n https://docs.docker.com/engine/security/security/ https://blog.aquasec.com/docker-security-best-practices    Kubernetes hardening\n https://kubernetes.io/docs/concepts/security/overview/ https://kubernetes.io/docs/concepts/security/pod-security-standards/ https://blogs.oracle.com/developers/5-best-practices-for-kubernetes-security    Security best practices for Oracle WebLogic Server Running in Docker and Kubernetes\n https://blogs.oracle.com/weblogicserver/security-best-practices-for-weblogic-server-running-in-docker-and-kubernetes    "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/appendix/docker-k8s-hardening/",
	"title": "Security hardening",
	"tags": [],
	"description": "Review resources for the Docker and Kubernetes cluster hardening.",
	"content": "Securing a Kubernetes cluster involves hardening on multiple fronts - securing the API servers, etcd, nodes, container images, container run-time, and the cluster network. Apply principles of defense in depth, principle of least privilege, and minimize the attack surface. Use security tools such as Kube-Bench to verify the cluster\u0026rsquo;s security posture. Since Kubernetes is evolving rapidly refer to Kubernetes Security Overview for the latest information on securing a Kubernetes cluster. Also ensure the deployed Docker containers follow the Docker Security guidance.\nThis section provides references on how to securely configure Docker and Kubernetes.\nReferences   Docker hardening\n https://docs.docker.com/engine/security/security/ https://blog.aquasec.com/docker-security-best-practices    Kubernetes hardening\n https://kubernetes.io/docs/concepts/security/overview/ https://kubernetes.io/docs/concepts/security/pod-security-standards/ https://blogs.oracle.com/developers/5-best-practices-for-kubernetes-security    Security best practices for Oracle WebLogic Server Running in Docker and Kubernetes\n https://blogs.oracle.com/weblogicserver/security-best-practices-for-weblogic-server-running-in-docker-and-kubernetes    "
},
{
	"uri": "/fmw-kubernetes/soa-domains/patch_and_upgrade/upgrade-k8s-cluster/",
	"title": "Upgrade a Kubernetes cluster",
	"tags": [],
	"description": "Upgrade the underlying Kubernetes cluster version in a running SOA Kubernetes environment.",
	"content": "These instructions describe how to upgrade a Kubernetes cluster created using kubeadm on which an Oracle SOA Suite domain is deployed. A rolling upgrade approach is used to upgrade nodes (master and worker) of the Kubernetes cluster.\nIt is expected that there will be a down time during the upgrade of the Kubernetes cluster as the nodes need to be drained as part of the upgrade process.\n Prerequisites  Review Prerequisites and ensure that your Kubernetes cluster is ready for upgrade. Make sure your environment meets all prerequisites. Make sure the database used for the SOA domain deployment is up and running during the upgrade process.  Upgrade the Kubernetes version An upgrade of Kubernetes is supported from one MINOR version to the next MINOR version, or between PATCH versions of the same MINOR. For example, you can upgrade from 1.x to 1.x+1, but not from 1.x to 1.x+2. To upgrade a Kubernetes version, first all the master nodes of the Kubernetes cluster must be upgraded sequentially, followed by the sequential upgrade of each worker node.\n See here for Kubernetes official documentation to upgrade from 1.30 to 1.31 See here for Kubernetes official documentation to upgrade from 1.29 to 1.30 See here for Kubernetes official documentation to upgrade from 1.28 to 1.29 See here for Kubernetes official documentation to upgrade from 1.27 to 1.28 See here for Kubernetes official documentation to upgrade from 1.26 to 1.27 See here for Kubernetes official documentation to upgrade from 1.25 to 1.26  "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/patch-and-upgrade/upgrade-k8s-cluster/",
	"title": "Upgrade a Kubernetes cluster",
	"tags": [],
	"description": "Upgrade the underlying Kubernetes cluster version in a running Oracle WebCenter Sites Kubernetes environment.",
	"content": "These instructions describe how to upgrade a Kubernetes cluster created using kubeadm on which an Oracle WebCenter Sites domain is deployed. A rolling upgrade approach is used to upgrade nodes (master and worker) of the Kubernetes cluster.\nIt is expected that there will be a down time during the upgrade of the Kubernetes cluster as the nodes need to be drained as part of the upgrade process.\n Prerequisites  Review Prerequisites and ensure that your Kubernetes cluster is ready for upgrade. Make sure your environment meets all prerequisites. Make sure the database used for the Oracle WebCenter Sites domain deployment is up and running during the upgrade process.  Upgrade the Kubernetes version An upgrade of Kubernetes is supported from one MINOR version to the next MINOR version, or between PATCH versions of the same MINOR. For example, you can upgrade from 1.x to 1.x+1, but not from 1.x to 1.x+2. To upgrade a Kubernetes version, first all the master nodes of the Kubernetes cluster must be upgraded sequentially, followed by the sequential upgrade of each worker node.\n See here for Kubernetes official documentation to upgrade from 1.20 to 1.21 See here for Kubernetes official documentation to upgrade from 1.21 to 1.22 See here for Kubernetes official documentation to upgrade from 1.22 to 1.23 See here for Kubernetes official documentation to upgrade from 1.23 to 1.24 See here for Kubernetes official documentation to upgrade from 1.24 to 1.25  "
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/installguide/create-wcp-domain/",
	"title": "Create WebCenter Portal domain",
	"tags": [],
	"description": "Create an Oracle WebCenter Portal domain home on an existing PV or PVC, and create the domain resource YAML file for deploying the generated Oracle WebCenter Portal domain.",
	"content": "Contents  Introduction Prerequisites Prepare the WebCenter Portal Domain Creation Input File Create the WebCenter Portal Domain Initialize the WebCenter Portal Domain Verify the WebCenter Portal Domain Managing WebCenter Portal  Introduction You can use the sample scripts to create a WebCenter Portal domain home on an existing Kubernetes persistent volume (PV) and persistent volume claim (PVC).The scripts also generate the domain YAML file, which helps you start the Kubernetes artifacts of the corresponding domain.\nPrerequisites  Ensure that you have completed all of the steps under prepare-your-environment. Ensure that the database and the WebLogic Kubernetes operator is up.  Prepare the WebCenter Portal Domain Creation Input File If required, you can customize the parameters used for creating a domain in the create-domain-inputs.yaml file.\nPlease note that the sample scripts for the WebCenter Portal domain deployment are available from the previously downloaded repository at ${WORKDIR}/create-wcp-domain/domain-home-on-pv/.\nMake a copy of the create-domain-inputs.yaml file before updating the default values.\nThe default domain created by the script has the following characteristics:\n An Administration Server named AdminServer listening on port 7001. A configured cluster named wcp-cluster of size 5. Managed Server, named wcpserver, listening on port 8888. If configurePortletServer is set to true . It configures a cluster named wcportlet-cluster of size 5 and Managed Server, named wcportletserver, listening on port 8889. Log files that are located in /shared/logs/\u0026lt;domainUID\u0026gt;.  Configuration parameters The following parameters can be provided in the inputs file:\n   Parameter Definition Default     adminPort Port number for the Administration Server inside the Kubernetes cluster. 7001   sslEnabled SSL mode enabling flag false   configurePortletServer Configure portlet server cluster false   adminServerSSLPort SSL Port number for the Administration Server inside the Kubernetes cluster. 7002   adminServerName Name of the Administration Server. AdminServer   clusterName Name of the WebLogic cluster instance to generate for the domain. By default the cluster name is wcp-cluster for the WebCenter Portal domain. wcp-cluster   portletClusterName Name of the Portlet cluster instance to generate for the domain. By default the cluster name is wcportlet-cluster for the Portlet. wcportlet-cluster   configuredManagedServerCount Number of Managed Server instances for the domain. 5   createDomainFilesDir Directory on the host machine to locate all the files that you need to create a WebLogic domain, including the script that is specified in the createDomainScriptName property. By default, this directory is set to the relative path wlst, and the create script uses the built-in WLST offline scripts in the wlst directory to create the WebLogic domain. An absolute path is also supported to point to an arbitrary directory in the file system. The built-in scripts can be replaced by the user-provided scripts or model files as long as those files are in the specified directory. Files in this directory are put into a Kubernetes config map, which in turn is mounted to createDomainScriptsMountPath, so that the Kubernetes pod can use the scripts and supporting files to create a domain home. wlst   createDomainScriptsMountPath Mount path where the create domain scripts are located inside a pod. The create-domain.sh script creates a Kubernetes job to run the script (specified in the createDomainScriptName property) in a Kubernetes pod that creates a domain home. Files in the createDomainFilesDir directory are mounted to this location in the pod, so that the Kubernetes pod can use the scripts and supporting files to create a domain home. /u01/weblogic   createDomainScriptName Script that the create domain script uses to create a WebLogic domain. The create-domain.sh script creates a Kubernetes job to run this script that creates a domain home. The script is located in the in-pod directory that is specified in the createDomainScriptsMountPath property. If you need to provide your own scripts to create the domain home, instead of using the built-in scripts, you must use this property to set the name of the script to that which you want the create domain job to run. create-domain-job.sh   domainHome Home directory of the WebCenter Portal domain. This field cannot be modified. /u01/oracle/user_projects/domains/wcp-domain   domainPVMountPath Mount path of the domain persistent volume. This field cannot be modified. /u01/oracle/user_projects/domains   domainUID Unique ID that identifies this particular domain. Used as the name of the generated WebLogic domain as well as the name of the Kubernetes domain resource. This ID must be unique across all domains in a Kubernetes cluster. This ID cannot contain any character that is not valid in a Kubernetes service name. wcp-domain   exposeAdminNodePort Boolean indicating if the Administration Server is exposed outside of the Kubernetes cluster. false   exposeAdminT3Channel Boolean indicating if the T3 administrative channel is exposed outside the Kubernetes cluster. false   image WebCenter Portal Docker image. The WebLogic Kubernetes Operator requires WebCenter Portal release 12.2.1.4. Refer to WebCenter Portal Docker Image for details on how to obtain or create the image. oracle/wcportal:12.2.1.4   imagePullPolicy WebLogic Docker image pull policy. Legal values are IfNotPresent, Always, or Never IfNotPresent   imagePullSecretName Name of the Kubernetes secret to access the Docker Store to pull the WebLogic Server Docker image. The presence of the secret is validated when this parameter is specified.    includeServerOutInPodLog Boolean indicating whether to include server.out to the pod\u0026rsquo;s stdout. true   initialManagedServerReplicas Number of Managed Server to initially start for the domain. 2   javaOptions Java options for starting the Administration Server and Managed Servers. A Java option can include references to one or more of the following pre-defined variables to obtain WebLogic domain information: $(DOMAIN_NAME), $(DOMAIN_HOME), $(ADMIN_NAME), $(ADMIN_PORT), and $(SERVER_NAME). -Dweblogic.StdoutDebugEnabled=false   logHome The in-pod location for the domain log, server logs, server out, and Node Manager log files. This field cannot be modified. /u01/oracle/user_projects/logs/wcp-domain   managedServerNameBase Base string used to generate Managed Server names. wcpserver   portletServerNameBase Base string used to generate Portlet Server names. wcportletserver   managedServerPort Port number for each Managed Server. By default the managedServerPort is 8888 for the wcpserver and managedServerPort is 8889 for the wcportletserver. 8888   managedServerSSLPort SSL port number for each Managed Server. By default the managedServerPort is 8788 for the wcpserver and managedServerPort is 8789 for the wcportletserver. 8788   portletServerPort Port number for each Portlet Server. By default the portletServerPort is 8889 for the wcportletserver. 8888   portletServerSSLPort SSL port number for each Portlet Server. By default the portletServerSSLPort is 8789 for the wcportletserver. 8789   namespace Kubernetes namespace in which to create the domain. wcpns   persistentVolumeClaimName Name of the persistent volume claim created to host the domain home. If not specified, the value is derived from the domainUID as \u0026lt;domainUID\u0026gt;-weblogic-sample-pvc. wcp-domain-domain-pvc   productionModeEnabled Boolean indicating if production mode is enabled for the domain. true   serverStartPolicy Determines which WebLogic Server instances are to be started. Legal values are NEVER, IF_NEEDED, ADMIN_ONLY. IF_NEEDED   t3ChannelPort Port for the T3 channel of the NetworkAccessPoint. 30012   t3PublicAddress Public address for the T3 channel. This should be set to the public address of the Kubernetes cluster. This would typically be a load balancer address. For development environments only: In a single server (all-in-one) Kubernetes deployment, this may be set to the address of the master, or at the very least, it must be set to the address of one of the worker nodes. If not provided, the script will attempt to set it to the IP address of the Kubernetes cluster.   weblogicCredentialsSecretName Name of the Kubernetes secret for the Administration Server\u0026rsquo;s user name and password. If not specified, then the value is derived from the domainUID as \u0026lt;domainUID\u0026gt;-weblogic-credentials. wcp-domain-domain-credentials   weblogicImagePullSecretName Name of the Kubernetes secret for the Docker Store, used to pull the WebLogic Server image.    serverPodCpuRequest, serverPodMemoryRequest, serverPodCpuCLimit, serverPodMemoryLimit The maximum amount of compute resources allowed and minimum amount of compute resources required for each server pod. Please refer to the Kubernetes documentation on Managing Compute Resources for Containers for details. Resource requests and resource limits are not specified. Refer to WebCenter Portal Cluster Sizing Recommendations for more details.   rcuSchemaPrefix The schema prefix to use in the database, for example WCP1. You may wish to make this the same as the domainUID in order to simplify matching domain to their RCU schemas. WCP1   rcuDatabaseURL The database URL. dbhostname:dbport/servicename   rcuCredentialsSecret The Kubernetes secret containing the database credentials. wcp-domain-rcu-credentials   loadBalancerHostName Host name for the final url accessible outside K8S environment. abc.def.com   loadBalancerPortNumber Port for the final url accessible outside K8S environment. 30305   loadBalancerProtocol Protocol for the final url accessible outside K8S environment. http   loadBalancerType Loadbalancer name. Example: Traefik or \u0026quot;\u0026rdquo; traefik   unicastPort Starting range of unicast port that application will use. 50000    You can form the names of the Kubernetes resources in the generated YAML files with the value of these properties specified in the create-domain-inputs.yaml file: adminServerName, clusterName and managedServerNameBase. Characters that are invalid in a Kubernetes service name are converted to valid values in the generated YAML files. For example, an uppercase letter is converted to a lowercase letter and an underscore (\u0026quot;_\u0026quot;) is converted to a hyphen (\u0026quot;-\u0026quot;) .\nThe sample demonstrates how to create a WebCenter Portal domain home and associated Kubernetes resources for a domain that has one cluster only. In addition, the sample provides users with the capability to supply their own scripts to create the domain home for other use cases. You can modify the generated domain YAML file to include more use cases.\nCreate the WebCenter Portal Domain The syntax of the create-domain.sh script is as follows:\n $ ./create-domain.sh \\ -i create-domain-inputs.yaml \\ -o /\u0026lt;path to output-directory\u0026gt; The script performs the following functions:\n Creates a directory for the generated Kubernetes YAML files for this domain if it does not already exist. The path name is /\u0026lt;path to output-directory\u0026gt;/weblogic-domains/\u0026lt;domainUID\u0026gt;.If the directory already exists, remove its content before using this script. Creates a Kubernetes job to start the WebCenter Portal Container utility and run offline WLST scripts that create the domain on the shared storage. Runs and waits for the job to finish. Creates a Kubernetes domain YAML file, domain.yaml, in the directory that is created above. This YAML file can be used to create the Kubernetes resource using the kubectl create -f or kubectl apply -f command:  $ kubectl apply -f ../\u0026lt;path to output-directory\u0026gt;/weblogic-domains/\u0026lt;domainUID\u0026gt;/domain.yaml  Creates a convenient utility script, delete-domain-job.yaml, to clean up the domain home created by the create script.    Run the create-domain.sh sample script, pointing it at the create-domain-inputs.yaml inputs file and an output directory like below:\n$ cd ${WORKDIR}/create-wcp-domain/ $ sh create-domain.sh -i create-domain-inputs.yaml -o output Input parameters being used export version=\u0026#34;create-weblogic-sample-domain-inputs-v1\u0026#34; export sslEnabled=\u0026#34;false\u0026#34; export adminPort=\u0026#34;7001\u0026#34; export adminServerSSLPort=\u0026#34;7002\u0026#34; export adminServerName=\u0026#34;AdminServer\u0026#34; export domainUID=\u0026#34;wcp-domain\u0026#34; export domainHome=\u0026#34;/u01/oracle/user_projects/domains/$domainUID\u0026#34; export serverStartPolicy=\u0026#34;IF_NEEDED\u0026#34; export clusterName=\u0026#34;wcp-cluster\u0026#34; export configuredManagedServerCount=\u0026#34;5\u0026#34; export initialManagedServerReplicas=\u0026#34;2\u0026#34; export managedServerNameBase=\u0026#34;wcpserver\u0026#34; export managedServerPort=\u0026#34;8888\u0026#34; export managedServerSSLPort=\u0026#34;8788\u0026#34; export portletServerPort=\u0026#34;8889\u0026#34; export portletServerSSLPort=\u0026#34;8789\u0026#34; export image=\u0026#34;oracle/wcportal:12.2.1.4\u0026#34; export imagePullPolicy=\u0026#34;IfNotPresent\u0026#34; export productionModeEnabled=\u0026#34;true\u0026#34; export weblogicCredentialsSecretName=\u0026#34;wcp-domain-domain-credentials\u0026#34; export includeServerOutInPodLog=\u0026#34;true\u0026#34; export logHome=\u0026#34;/u01/oracle/user_projects/domains/logs/$domainUID\u0026#34; export httpAccessLogInLogHome=\u0026#34;true\u0026#34; export t3ChannelPort=\u0026#34;30012\u0026#34; export exposeAdminT3Channel=\u0026#34;false\u0026#34; export adminNodePort=\u0026#34;30701\u0026#34; export exposeAdminNodePort=\u0026#34;false\u0026#34; export namespace=\u0026#34;wcpns\u0026#34; javaOptions=-Dweblogic.StdoutDebugEnabled=false export persistentVolumeClaimName=\u0026#34;wcp-domain-domain-pvc\u0026#34; export domainPVMountPath=\u0026#34;/u01/oracle/user_projects/domains\u0026#34; export createDomainScriptsMountPath=\u0026#34;/u01/weblogic\u0026#34; export createDomainScriptName=\u0026#34;create-domain-job.sh\u0026#34; export createDomainFilesDir=\u0026#34;wlst\u0026#34; export rcuSchemaPrefix=\u0026#34;WCP1\u0026#34; export rcuDatabaseURL=\u0026#34;oracle-db.wcpns.svc.cluster.local:1521/devpdb.k8s\u0026#34; export rcuCredentialsSecret=\u0026#34;wcp-domain-rcu-credentials\u0026#34; export loadBalancerHostName=\u0026#34;abc.def.com\u0026#34; export loadBalancerPortNumber=\u0026#34;30305\u0026#34; export loadBalancerProtocol=\u0026#34;http\u0026#34; export loadBalancerType=\u0026#34;traefik\u0026#34; export unicastPort=\u0026#34;50000\u0026#34; Generating output/weblogic-domains/wcp-domain/create-domain-job.yaml Generating output/weblogic-domains/wcp-domain/delete-domain-job.yaml Generating output/weblogic-domains/wcp-domain/domain.yaml Checking to see if the secret wcp-domain-domain-credentials exists in namespace wcpns configmap/wcp-domain-create-wcp-infra-sample-domain-job-cm created Checking the configmap wcp-domain-create-wcp-infra-sample-domain-job-cm was created configmap/wcp-domain-create-wcp-infra-sample-domain-job-cm labeled Checking if object type job with name wcp-domain-create-wcp-infra-sample-domain-job exists Deleting wcp-domain-create-wcp-infra-sample-domain-job using output/weblogic-domains/wcp-domain/create-domain-job.yaml job.batch \u0026#34;wcp-domain-create-wcp-infra-sample-domain-job\u0026#34; deleted $loadBalancerType is NOT empty Creating the domain by creating the job output/weblogic-domains/wcp-domain/create-domain-job.yaml job.batch/wcp-domain-create-wcp-infra-sample-domain-job created Waiting for the job to complete... status on iteration 1 of 20 pod wcp-domain-create-wcp-infra-sample-domain-job-b5l6c status is Running status on iteration 2 of 20 pod wcp-domain-create-wcp-infra-sample-domain-job-b5l6c status is Running status on iteration 3 of 20 pod wcp-domain-create-wcp-infra-sample-domain-job-b5l6c status is Running status on iteration 4 of 20 pod wcp-domain-create-wcp-infra-sample-domain-job-b5l6c status is Running status on iteration 5 of 20 pod wcp-domain-create-wcp-infra-sample-domain-job-b5l6c status is Running status on iteration 6 of 20 pod wcp-domain-create-wcp-infra-sample-domain-job-b5l6c status is Running status on iteration 7 of 20 pod wcp-domain-create-wcp-infra-sample-domain-job-b5l6c status is Completed Domain wcp-domain was created and will be started by the WebLogic Kubernetes Operator The following files were generated: output/weblogic-domains/wcp-domain/create-domain-inputs.yaml output/weblogic-domains/wcp-domain/create-domain-job.yaml output/weblogic-domains/wcp-domain/domain.yaml Completed   To monitor the above domain creation logs:\n$ kubectl get pods -n wcpns |grep wcp-domain-create wcp-domain-create-fmw-infra-sample-domain-job-8jr6k 1/1 Running 0 6s $ kubectl get pods -n wcpns | grep wcp-domain-create | awk \u0026#39;{print $1}\u0026#39; | xargs kubectl -n wcpns logs -f SAMPLE OUTPUT:\nThe domain will be created using the script /u01/weblogic/create-domain-script.sh Initializing WebLogic Scripting Tool (WLST) ... Welcome to WebLogic Server Administration Scripting Shell Type help() for help on available commands ================================================================= WebCenter Portal Weblogic Operator Domain Creation Script 12.2.1.4.0 ================================================================= Creating Base Domain... Creating Admin Server... Creating cluster... managed server name is wcpserver1 managed server name is wcpserver2 managed server name is wcpserver3 managed server name is wcpserver4 managed server name is wcpserver5 ['wcpserver1', 'wcpserver2', 'wcpserver3', 'wcpserver4', 'wcpserver5'] Creating porlet cluster... managed server name is wcportletserver1 managed server name is wcportletserver2 managed server name is wcportletserver3 ['wcportletserver1', 'wcportletserver2', 'wcportletserver3', 'wcportletserver4', 'wcportletserver5'] Managed servers created... Creating Node Manager... Will create Base domain at /u01/oracle/user_projects/domains/wcp-domain Writing base domain... Base domain created at /u01/oracle/user_projects/domains/wcp-domain Extending Domain... Extending domain at /u01/oracle/user_projects/domains/wcp-domain Database oracle-db.wcpns.svc.cluster.local:1521/devpdb.k8s ExposeAdminT3Channel false with 100.111.157.155:30012 Applying JRF templates... Applying WCPortal templates... Extension Templates added... WC_Portal Managed server deleted... Configuring the Service Table DataSource... fmwDatabase jdbc:oracle:thin:@oracle-db.wcpns.svc.cluster.local:1521/devpdb.k8s Getting Database Defaults... Targeting Server Groups... Set CoherenceClusterSystemResource to defaultCoherenceCluster for server:wcpserver1 Set CoherenceClusterSystemResource to defaultCoherenceCluster for server:wcpserver2 Set CoherenceClusterSystemResource to defaultCoherenceCluster for server:wcpserver3 Set CoherenceClusterSystemResource to defaultCoherenceCluster for server:wcpserver4 Set CoherenceClusterSystemResource to defaultCoherenceCluster for server:wcpserver5 Set CoherenceClusterSystemResource to defaultCoherenceCluster for server:wcportletserver1 Set CoherenceClusterSystemResource to defaultCoherenceCluster for server:wcportletserver2 Set CoherenceClusterSystemResource to defaultCoherenceCluster for server:wcportletserver3 Targeting Cluster ... Set CoherenceClusterSystemResource to defaultCoherenceCluster for cluster:wcp-cluster Set WLS clusters as target of defaultCoherenceCluster:wcp-cluster Set CoherenceClusterSystemResource to defaultCoherenceCluster for cluster:wcportlet-cluster Set WLS clusters as target of defaultCoherenceCluster:wcportlet-cluster Preparing to update domain... Jan 12, 2021 10:30:09 AM oracle.security.jps.az.internal.runtime.policy.AbstractPolicyImpl initializeReadStore INFO: Property for read store in parallel: oracle.security.jps.az.runtime.readstore.threads = null Domain updated successfully Domain Creation is done... Successfully Completed   Initialize the WebCenter Portal Domain To start the domain, apply the above domain.yaml:\n$ kubectl apply -f output/weblogic-domains/wcp-domain/domain.yaml domain.weblogic.oracle/wcp-domain created Verify the WebCenter Portal Domain Verify that the domain and servers pods and services are created and in the READY state:\nSample run below:\n-bash-4.2$ kubectl get pods -n wcpns -w NAME READY STATUS RESTARTS\tAGE wcp-domain-create-fmw-infra-sample-domain-job-8jr6k 0/1 Completed 0 15m wcp-domain-adminserver 1/1 Running 0 8m9s wcp-domain-create-fmw-infra-sample-domain-job-8jr6k 0/1 Completed 0 3h6m wcp-domain-wcp-server1 0/1 Running 0 6m5s wcp-domain-wcp-server2 0/1 Running 0 6m4s wcp-domain-wcp-server2 1/1 Running 0 6m18s wcp-domain-wcp-server1 1/1 Running 0 6m54s -bash-4.2$ kubectl get all -n wcpns NAME READY STATUS RESTARTS AGE pod/wcp-domain-adminserver 1/1 Running 0 13m pod/wcp-domain-create-fmw-infra-sample-domain-job-8jr6k 0/1 Completed 0 3h12m pod/wcp-domain-wcp-server1 1/1 Running 0 11m pod/wcp-domain-wcp-server2 1/1 Running 0 11m pod/wcp-domain-wcportletserver1 1/1 Running 1 21h NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/wcp-domain-adminserver ClusterIP None \u0026lt;none\u0026gt; 7001/TCP 13m service/wcp-domain-cluster-wcp-cluster ClusterIP 10.98.145.173 \u0026lt;none\u0026gt; 8888/TCP 11m service/wcp-domain-wcp-server1 ClusterIP None \u0026lt;none\u0026gt; 8888/TCP 11m service/wcp-domain-wcp-server2 ClusterIP None \u0026lt;none\u0026gt; 8888/TCP 11m service/wcp-domain-cluster-wcportlet-cluster ClusterIP 10.98.145.173 \u0026lt;none\u0026gt; 8889/TCP 11m service/wcp-domain-wcportletserver1 ClusterIP None \u0026lt;none\u0026gt; 8889/TCP 11m NAME COMPLETIONS DURATION AGE job.batch/wcp-domain-create-fmw-infra-sample-domain-job 1/1 16m 3h12m To see the Admin and Managed Servers logs, you can check the pod logs:\n$ kubectl logs -f wcp-domain-adminserver -n wcpns $ kubectl logs -f wcp-domain-wcp-server1 -n wcpns Verify the Pods Use the following command to see the pods running the servers:\n$ kubectl get pods -n NAMESPACE Here is an example of the output of this command:\n-bash-4.2$ kubectl get pods -n wcpns NAME READY STATUS RESTARTS AGE rcu 1/1 Running 1 14d wcp-domain-adminserver 1/1 Running 0 16m wcp-domain-create-fmw-infra-sample-domain-job-8jr6k 0/1 Completed 0 3h14m wcp-domain-wcp-server1 1/1 Running 0 14m wcp-domain-wcp-server2 1/1 Running 0 14m wcp-domain-wcportletserver1 1/1 Running 1 14m Verify the Services Use the following command to see the services for the domain:\n$ kubectl get services -n NAMESPACE Here is an example of the output of this command:\n-bash-4.2$ kubectl get services -n wcpns NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE wcp-domain-adminserver ClusterIP None \u0026lt;none\u0026gt; 7001/TCP 17m wcp-domain-cluster-wcp-cluster ClusterIP 10.98.145.173 \u0026lt;none\u0026gt; 8888/TCP 14m wcp-domain-wcp-server1 ClusterIP None \u0026lt;none\u0026gt; 8888/TCP 14m wcp-domain-wcp-server2 ClusterIP None \u0026lt;none\u0026gt; 8888/TCP 14m wcp-domain-cluster-wcportlet-cluster ClusterIP 10.98.145.173 \u0026lt;none\u0026gt; 8889/TCP 14m wcp-domain-wcportletserver1 ClusterIP None \u0026lt;none\u0026gt; 8889/TCP 14m Managing WebCenter Portal To stop Managed Servers:\n$ kubectl patch domain wcp-domain -n wcpns --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/clusters/0/replicas\u0026#34;, \u0026#34;value\u0026#34;: 0 }]\u0026#39; To start all configured Managed Servers:\n$ kubectl patch domain wcp-domain -n wcpns --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/clusters/0/replicas\u0026#34;, \u0026#34;value\u0026#34;: 3 }]\u0026#39; -bash-4.2$ kubectl get pods -n wcpns -w NAME READY STATUS RESTARTS\tAGE wcp-domain-create-fmw-infra-sample-domain-job-8jr6k 0/1 Completed 0 15m wcp-domain-adminserver 1/1 Running 0 8m9s wcp-domain-create-fmw-infra-sample-domain-job-8jr6k 0/1 Completed 0 3h6m wcp-domain-wcp-server1 0/1 Running 0 6m5s wcp-domain-wcp-server2 0/1 Running 0 6m4s wcp-domain-wcp-server2 1/1 Running 0 6m18s wcp-domain-wcp-server1 1/1 Running 0 6m54s "
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/manage-wcportal-domains/monitoring-and-publishing-logs/publishing-logs/logstash/",
	"title": "Logstash",
	"tags": [],
	"description": "Describes how to configure a WebCenter Portal domain to use logstash and publish the WebLogic Server logs to Elasticsearch.",
	"content": "Install Elasticsearch and Kibana To install Elasticsearch and Kibana, run the following command:\n$ cd ${WORKDIR}/elasticsearch-and-kibana $ kubectl create -f elasticsearch_and_kibana.yaml Publish to Elasticsearch The diagnostics or other logs can be pushed to Elasticsearch server using logstash pod. The logstash pod should have access to the shared domain home or the log location. In case of the Oracle WebCenter Portal domain, the persistent volume of the domain home can be used in the logstash pod. The steps to create the logstash pod are,\n  Get domain home persistence volume claim details of the Oracle WebCenter Portal domain. The following command will list the persistent volume claim details in the namespace - wcpns. In the example below the persistent volume claim is wcp-domain-domain-pvc.\n$ kubectl get pv -n wcpns NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE wcp-domain-domain-pv 10Gi RWX Retain Bound wcpns/wcp-domain-domain-pvc wcp-domain-domain-storage-class 175d   Create logstash configuration file logstash.conf. Below is a sample Logstash configuration file is located at ${WORKDIR}/logging-services/logstash. Below configuration pushes diagnostic and all domains logs.\ninput { file { path =\u0026gt; \u0026#34;/u01/oracle/user_projects/domains/wcp-domain/servers/**/logs/*-diagnostic.log\u0026#34; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026#34;/u01/oracle/user_projects/domains/logs/wcp-domain/*.log\u0026#34; start_position =\u0026gt; beginning } } filter { grok { match =\u0026gt; [ \u0026#34;message\u0026#34;, \u0026#34;\u0026lt;%{DATA:log_timestamp}\u0026gt; \u0026lt;%{WORD:log_level}\u0026gt; \u0026lt;%{WORD:thread}\u0026gt; \u0026lt;%{HOSTNAME:hostname}\u0026gt; \u0026lt;%{HOSTNAME:servername}\u0026gt; \u0026lt;%{DATA:timer}\u0026gt; \u0026lt;\u0026lt;%{DATA:kernel}\u0026gt;\u0026gt; \u0026lt;\u0026gt; \u0026lt;%{DATA:uuid}\u0026gt; \u0026lt;%{NUMBER:timestamp}\u0026gt; \u0026lt;%{DATA:misc}\u0026gt; \u0026lt;%{DATA:log_number}\u0026gt; \u0026lt;%{DATA:log_message}\u0026gt;\u0026#34; ] } } output { elasticsearch { hosts =\u0026gt; [\u0026#34;elasticsearch.default.svc.cluster.local:9200\u0026#34;] } }   Copy the logstash.conf into say /u01/oracle/user_projects/domains so that it can be used for logstash deployment, using Administration Server pod ( For example wcp-domain-adminserver pod in namespace wcpns):\n$ kubectl cp ${WORKDIR}/logging-services/logstash/logstash.conf wcpns/wcp-domain-adminserver:/u01/oracle/user_projects/domains -n wcpns   Create deployment YAML logstash.yaml for logstash pod using the domain home persistence volume claim. Make sure to point the logstash configuration file to correct location ( For example: we copied logstash.conf to /u01/oracle/user_projects/domains/logstash.conf) and also correct domain home persistence volume claim. Sample Logstash deployment is located at kubernetes/samples/scripts/create-wcp-domain/utils/logstash/logstash.yaml:\napiVersion: apps/v1\rkind: Deployment\rmetadata:\rname: logstash\rnamespace: wcpns\rspec:\rselector:\rmatchLabels:\rapp: logstash\rtemplate: metadata:\rlabels:\rapp: logstash\rspec:\rvolumes:\r- name: domain-storage-volume\rpersistentVolumeClaim:\rclaimName: wcp-domain-domain-pvc\r- name: shared-logs\remptyDir: {}\rcontainers:\r- name: logstash\rimage: logstash:6.6.0\rcommand: [\u0026quot;/bin/sh\u0026quot;]\rargs: [\u0026quot;/usr/share/logstash/bin/logstash\u0026quot;, \u0026quot;-f\u0026quot;, \u0026quot;/u01/oracle/user_projects/domains/logstash.conf\u0026quot;]\rimagePullPolicy: IfNotPresent\rvolumeMounts:\r- mountPath: /u01/oracle/user_projects/domains\rname: domain-storage-volume\r- name: shared-logs\rmountPath: /shared-logs\rports:\r- containerPort: 5044\rname: logstash\r  Deploy logstash to start publish logs to Elasticsearch\n$ kubectl create -f ${WORKDIR}/logging-services/logstash/logstash.yaml   Create an Index Pattern in Kibana Create an index pattern logstash* in Kibana \u0026gt; Management. After the servers are started, you will see the log data in the Kibana dashboard:\n"
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/prerequisites/",
	"title": "Prerequisites",
	"tags": [],
	"description": "System requirements and limitations for deploying and running an OAM domain home",
	"content": "Introduction This document provides information about the system requirements and limitations for deploying and running OAM 12.2.1.4 domains with the WebLogic Kubernetes Operator 4.2.10.\nSystem requirements for oam domains   A running Kubernetes cluster that meets the following requirements:\n The Kubernetes cluster must have sufficient nodes and resources. An installation of Helm is required on the Kubernetes cluster. Helm is used to create and deploy the necessary resources and run the WebLogic Kubernetes Operator in a Kubernetes cluster A supported container engine must be installed and running on the Kubernetes cluster. The Kubernetes cluster and container engine must meet the minimum version requirements outlined in document ID 2723908.1 on My Oracle Support. You must have the cluster-admin role to install the WebLogic Kubernetes Operator. The nodes in the Kubernetes cluster must have access to a persistent volume such as a Network File System (NFS) mount or a shared file system. The system clocks on node of the Kubernetes cluster must be synchronized. Run the date command simultaneously on all the nodes in each cluster and then syncrhonize accordingly.    A running Oracle Database 12.2.0.1 or later. The database must be a supported version for OAM as outlined in Oracle Fusion Middleware 12c certifications. It must meet the requirements as outlined in About Database Requirements for an Oracle Fusion Middleware Installation and in RCU Requirements for Oracle Databases. It is recommended that the database initialization parameters are set as per Minimum Initialization Parameters.\n  Note: This documentation does not tell you how to install a Kubernetes cluster, Helm, the container engine, or how to push container images to a container registry. Please refer to your vendor specific documentation for this information. Also see Getting Started.\nLimitations Compared to running a WebLogic Server domain in Kubernetes using the operator, the following limitations currently exist for OAM domains:\n In this release, OAM domains are supported using the “domain on a persistent volume” model only, where the domain home is located in a persistent volume (PV).The \u0026ldquo;domain in image\u0026rdquo; model is not supported. Only configured clusters are supported. Dynamic clusters are not supported for OAM domains. Note that you can still use all of the scaling features, but you need to define the maximum size of your cluster at domain creation time, using the parameter configuredManagedServerCount. For more details on this parameter, see Prepare the create domain script. It is recommended to pre-configure your cluster so it\u0026rsquo;s sized a little larger than the maximum size you plan to expand it to. You must rigorously test at this maximum size to make sure that your system can scale as expected. The WebLogic Monitoring Exporter currently supports the WebLogic MBean trees only. Support for JRF MBeans has not been added yet. We do not currently support running OAM in non-Linux containers.  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/prerequisites/",
	"title": "Prerequisites",
	"tags": [],
	"description": "System requirements and limitations for deploying and running an OIG domain",
	"content": "Introduction This document provides information about the system requirements and limitations for deploying and running OIG 12.2.1.4 domains with the WebLogic Kubernetes Operator 4.2.10.\nSystem requirements for OIG domains   A running Kubernetes cluster that meets the following requirements:\n The Kubernetes cluster must have sufficient nodes and resources. An installation of Helm is required on the Kubernetes cluster. Helm is used to create and deploy the necessary resources and run the WebLogic Kubernetes Operator in a Kubernetes cluster A supported container engine must be installed and running on the Kubernetes cluster. The Kubernetes cluster and container engine must meet the minimum version requirements outlined in document ID 2723908.1 on My Oracle Support. You must have the cluster-admin role to install the WebLogic Kubernetes Operator. The nodes in the Kubernetes cluster must have access to a persistent volume such as a Network File System (NFS) mount or a shared file system. The system clocks on node of the Kubernetes cluster must be synchronized. Run the date command simultaneously on all the nodes in each cluster and then syncrhonize accordingly.    A running Oracle Database 12.2.0.1 or later. The database must be a supported version for OIG as outlined in Oracle Fusion Middleware 12c certifications. It must meet the requirements as outlined in About Database Requirements for an Oracle Fusion Middleware Installation and in RCU Requirements for Oracle Databases.\n  Note: This documentation does not tell you how to install a Kubernetes cluster, Helm, the container engine, or how to push container images to a container registry. Please refer to your vendor specific documentation for this information. Also see Getting Started.\nLimitations Compared to running a WebLogic Server domain in Kubernetes using the operator, the following limitations currently exist for OIG domains:\n In this release, OIG domains are supported using the “domain on a persistent volume” model only, where the domain home is located in a persistent volume (PV). The \u0026ldquo;domain in image\u0026rdquo; model is not supported. Only configured clusters are supported. Dynamic clusters are not supported for OIG domains. Note that you can still use all of the scaling features, you just need to define the maximum size of your cluster at domain creation time. The WebLogic Monitoring Exporter currently supports the WebLogic MBean trees only. Support for JRF MBeans has not been added yet. We do not currently support running OIG in non-Linux containers.  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oud/prerequisites/",
	"title": "Prerequisites",
	"tags": [],
	"description": "Oracle Unified Directory Prerequisites.",
	"content": "Introduction This document provides information about the system requirements for deploying and running Oracle Unified Directory 12c PS4 (12.2.1.4.0) in a Kubernetes environment.\nSystem Requirements for Oracle Unified Directory on Kubernetes  A running Kubernetes cluster that meets the following requirements:  The Kubernetes cluster must have sufficient nodes and resources. An installation of Helm is required on the Kubernetes cluster. Helm is used to create and deploy the necessary resources on the Kubernetes cluster. A supported container engine must be installed and running on the Kubernetes cluster. The Kubernetes cluster and container engine must meet the minimum version requirements outlined in document ID 2723908.1 on My Oracle Support. The nodes in the Kubernetes cluster must have access to a persistent volume such as a Network File System (NFS) mount, a shared file system, or block storage. If you intend to use assured replication in OUD, you must have a persistent volume available that uses a Network File System (NFS) mount, or a shared file system for the config volume. See Enabling Assured Replication.    Note: This documentation does not tell you how to install a Kubernetes cluster, Helm, the container engine, or how to push container images to a container registry. Please refer to your vendor specific documentation for this information. Also see Getting Started.\n"
},
{
	"uri": "/fmw-kubernetes/idm-products/oudsm/prerequisites/",
	"title": "Prerequisites",
	"tags": [],
	"description": "Oracle Unified Directory Services Manager Prerequisites.",
	"content": "Introduction This document provides information about the system requirements for deploying and running Oracle Unified Directory Services Manager 12c PS4 (12.2.1.4.0) in a Kubernetes environment.\nSystem Requirements for Oracle Unified Directory Services Manager on Kubernetes  A running Kubernetes cluster that meets the following requirements:  The Kubernetes cluster must have sufficient nodes and resources. An installation of Helm is required on the Kubernetes cluster. Helm is used to create and deploy the necessary resources on the Kubernetes cluster. A supported container engine must be installed and running on the Kubernetes cluster. The Kubernetes cluster and container engine must meet the minimum version requirements outlined in document ID 2723908.1 on My Oracle Support. The nodes in the Kubernetes cluster must have access to a persistent volume such as a Network File System (NFS) mount or a shared file system.    Note: This documentation does not tell you how to install a Kubernetes cluster, Helm, the container engine, or how to push container images to a container registry. Please refer to your vendor specific documentation for this information. Also see Getting Started.\n"
},
{
	"uri": "/fmw-kubernetes/ohs/prerequisites/",
	"title": "Prerequisites",
	"tags": [],
	"description": "System requirements and limitations for deploying and running OHS on Kubernetes",
	"content": "Introduction This document provides information about the system requirements and limitations for deploying and running Oracle HTTP Server (OHS) 12.2.1.4 on Kubernetes.\nSystem requirements for OHS on Kubernetes  A running Kubernetes cluster that meets the following requirements:  The Kubernetes cluster must have sufficient nodes and resources. A supported container engine must be installed and running on the Kubernetes cluster. The Kubernetes cluster and container engine must meet the minimum version requirements outlined in document ID 3058838.1 on My Oracle Support. The system clocks on node of the Kubernetes cluster must be synchronized. Run the date command simultaneously on all the nodes in each cluster and then synchronize accordingly.    Note: This documentation does not tell you how to install a Kubernetes cluster, the container engine, or how to push container images to a container registry.\nPlease refer to your vendor specific documentation for this information.\nOracle Access Management prerequisites If you intend to use OHS with Oracle WebGate and Oracle Access Management (OAM), then Oracle Access Management must have been deployed beforehand, either in an on-premises environment, or in a Kubernetes cluster. You must have an understanding of Oracle Access Management and Oracle WebGate before proceeding.\nInstructions for deploying OAM in a Kubernetes cluster can be found in Oracle Access Management. OAM in a Kubernetes cluster must be deployed as per one of the Supported Architectures defined.\nTo use Oracle WebGate with OHS you must perform the following before deploying OHS:\n  Update the Load Balancing and WebGate Traffic Load Balancer to the entry point for OAM. For example, if OAM is accessed via the load balancer (https://loadbalancer.example.com), then the OAM Server Host, OAM Server Port, and OAM Server Protocol should be updated to loadbalancer.example.com, 443, and HTTPS respectively. For more information, see Update the OAM Hostname and Port for the Loadbalancer.\n  Create an Agent in the Oracle Access Management console. After creating the agent, make sure the User Defined Parameters for OAMRestEndPointHostName, OAMRestEndPointPort, and OAMServerCommunicationMode are set to the same values as the load balancing settings above. See, Register a WebGate Agent.\n  In the Application Domain created for the WebGate, update the resources with any resources you wish to protect.\n  Create any Host Identifier(s) for any URL\u0026rsquo;s you require. For example if you access OAM via a load balancer, create a host identifier for both the load balancer hostname.domain and the OHS hostname.domain. If you access OAM directly via OHS, created a host identifier for the OHS hostname.domain. See Create Host Identifiers.\n  Download the zip file for the Agent from the OAM Console. This zip file will later be copied and extracted to the $WORKDIR/ohsConfig/webgate/config directory. See, Prepare your OHS configuration files.\n  Next Steps You are now ready to Prepare your environment.\n"
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/patch_and_upgrade/upgrade-k8s-cluster/",
	"title": "Upgrade a Kubernetes cluster",
	"tags": [],
	"description": "Upgrade the underlying Kubernetes cluster version in a running WebCenter Content Kubernetes environment.",
	"content": "These instructions describe how to upgrade a Kubernetes cluster created using kubeadm on which an Oracle WebCenter Content domain is deployed. A rolling upgrade approach is used to upgrade nodes (master and worker) of the Kubernetes cluster.\nIt is expected that there will be a down time during the upgrade of the Kubernetes cluster as the nodes need to be drained as part of the upgrade process.\n Prerequisites  Review Prerequisites and ensure that your Kubernetes cluster is ready for upgrade. Make sure your environment meets all prerequisites. Make sure the database used for the WebCenter Content domain deployment is up and running during the upgrade process.  Upgrade the Kubernetes version An upgrade of Kubernetes is supported from one MINOR version to the next MINOR version, or between PATCH versions of the same MINOR. For example, you can upgrade from 1.x to 1.x+1, but not from 1.x to 1.x+2. To upgrade a Kubernetes version, first all the master nodes of the Kubernetes cluster must be upgraded sequentially, followed by the sequential upgrade of each worker node.\n See here for Kubernetes official documentation to upgrade from v1.14.x to v1.15.x. See here for Kubernetes official documentation to upgrade from v1.15.x to v1.16.x. See here for Kubernetes official documentation to upgrade from v1.16.x to v1.17.x. See here for Kubernetes official documentation to upgrade from v1.17.x to v1.18.x.  "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/oracle-cloud/create-wccontent-domains/",
	"title": "Create Oracle WebCenter Content domain",
	"tags": [],
	"description": "Create Oracle WebCenter Content domain on Oracle Kubernetes Engine (OKE).",
	"content": "Contents  Run the create domain script Create Container Clusters (OKE) Verify the results Verify the pods Verify the services Expose service for IBR intradoc port Expose service for UCM intradoc port  Run the create domain script Run the create domain script, specifying your inputs file and an output directory to store the generated artifacts:\n$ cd ${WORKDIR}/create-wcc-domain/domain-home-on-pv/ $ ./create-domain.sh \\ -i create-domain-inputs.yaml \\ -o \u0026lt;path to output-directory\u0026gt; The script will perform the following steps:\n Create a directory for the generated Kubernetes YAML files for this domain if it does not already exist. The path name is \u0026lt;path to output-directory\u0026gt;/weblogic-domains/\u0026lt;domainUID\u0026gt;. If the directory already exists, its contents must be removed before using this script. Create a Kubernetes job that will start up a utility Oracle WebCenter Content container and run offline WLST scripts to create the domain on the shared storage. Run and wait for the job to finish. Create a Kubernetes domain YAML file, domain.yaml, in the \u0026ldquo;output\u0026rdquo; directory that was created above. This YAML file can be used to create the Kubernetes resource using the kubectl create -f or kubectl apply -f command.  Run the managed-server-wrapper script Run oke-start-managed-server-wrapper.sh script, which intrenally applies the domain YAML. This script also applies initial configurations for Managed Server containers and readies Managed Servers for future inter-container communications.\n$ cd ${WORKDIR}/create-wcc-domain/domain-home-on-pv/ $ ./oke-start-managed-servers-wrapper.sh -o \u0026lt;path_to_output_directory\u0026gt; -l \u0026lt;load_balancer_external_ip\u0026gt; -p \u0026lt;load_balancer_port\u0026gt; -s \u0026lt;ssl_termination\u0026gt;  Note: A value for parameter -s needs to be provided only if SSL termination at loadbalancer is being used - acceptable value is either true or false. If this parameter value is not supplied, the script assumes that ssl termination at loadbalancer is not being used and by default the value will be taken as false.\n Run the startup configuration scripts for IPM and WCCADF applications as applicable Run the script configure-ipm-connection.sh to do startup configurations if IPM is enabled.\n$ cd ${WORKDIR}/create-wcc-domain/domain-home-on-pv/ $ ./configure-ipm-connection.sh -l \u0026lt;load_balancer_external_ip\u0026gt; -p \u0026lt;load_balancer_port\u0026gt; Run the script configure-wccadf-domain.sh to do startup configurations if ADFUI is enabled.\n$ cd ${WORKDIR}/create-wcc-domain/domain-home-on-pv/ $ ./configure-wccadf-domain.sh -n \u0026lt;node_ip\u0026gt; Patch the domain for the changes to be applied to the domain.\n#STOP $ kubectl patch domain DOMAINUID -n NAMESPACE --type='json' -p='[{\u0026quot;op\u0026quot;: \u0026quot;replace\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/spec/serverStartPolicy\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;NEVER\u0026quot; }]' sleep 2m #START $ kubectl patch domain DOMAINUID -n NAMESPACE --type='json' -p='[{\u0026quot;op\u0026quot;: \u0026quot;replace\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/spec/serverStartPolicy\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;IF_NEEDED\u0026quot; }]' Verify the results The create domain script will verify that the domain was created, and will report failure if there was any error. However, it may be desirable to manually verify the domain, even if just to gain familiarity with the various Kubernetes objects that were created by the script.\nGenerated YAML files with the default inputs   Click here to see sample content of the generated `domain.yaml`.   $ cat output/weblogic-domains/wccinfra/domain.yaml # Copyright (c) 2017, 2021, Oracle and/or its affiliates. # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. # # This is an example of how to define a Domain resource. # apiVersion: \u0026quot;weblogic.oracle/v8\u0026quot; kind: Domain metadata: name: wccinfra namespace: wccns labels: weblogic.domainUID: wccinfra spec: # The WebLogic Domain Home domainHome: /u01/oracle/user_projects/domains/wccinfra maxClusterConcurrentStartup: 1 # The domain home source type # Set to PersistentVolume for domain-in-pv, Image for domain-in-image, or FromModel for model-in-image domainHomeSourceType: PersistentVolume # The WebLogic Server image that the WebLogic Kubernetes Operator uses to start the domain image: \u0026quot;phx.ocir.io/xxxxxxxxxx/oracle/wccontent/oracle/wccontent:x.x.x.x\u0026quot; # imagePullPolicy defaults to \u0026quot;Always\u0026quot; if image version is :latest imagePullPolicy: \u0026quot;IfNotPresent\u0026quot; # Identify which Secret contains the credentials for pulling an image imagePullSecrets: - name: image-secret # Identify which Secret contains the WebLogic Admin credentials (note that there is an example of # how to create that Secret at the end of this file) webLogicCredentialsSecret: name: wccinfra-domain-credentials # Whether to include the server out file into the pod's stdout, default is true includeServerOutInPodLog: true # Whether to enable log home logHomeEnabled: true # Whether to write HTTP access log file to log home httpAccessLogInLogHome: true # The in-pod location for domain log, server logs, server out, introspector out, and Node Manager log files logHome: /u01/oracle/user_projects/domains/logs/wccinfra # An (optional) in-pod location for data storage of default and custom file stores. # If not specified or the value is either not set or empty (e.g. dataHome: \u0026quot;\u0026quot;) then the # data storage directories are determined from the WebLogic domain home configuration. dataHome: \u0026quot;\u0026quot; # serverStartPolicy legal values are \u0026quot;NEVER\u0026quot;, \u0026quot;IF_NEEDED\u0026quot;, or \u0026quot;ADMIN_ONLY\u0026quot; # This determines which WebLogic Servers the WebLogic Kubernetes Operator will start up when it discovers this Domain # - \u0026quot;NEVER\u0026quot; will not start any server in the domain # - \u0026quot;ADMIN_ONLY\u0026quot; will start up only the administration server (no managed servers will be started) # - \u0026quot;IF_NEEDED\u0026quot; will start all non-clustered servers, including the administration server and clustered servers up to the replica count serverStartPolicy: \u0026quot;IF_NEEDED\u0026quot; serverPod: # an (optional) list of environment variable to be set on the servers env: - name: JAVA_OPTIONS value: \u0026quot;-Dweblogic.StdoutDebugEnabled=false\u0026quot; - name: USER_MEM_ARGS value: \u0026quot;-Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx1024m \u0026quot; volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: wccinfra-domain-pvc volumeMounts: - mountPath: /u01/oracle/user_projects/domains name: weblogic-domain-storage-volume # adminServer is used to configure the desired behavior for starting the administration server. adminServer: # serverStartState legal values are \u0026quot;RUNNING\u0026quot; or \u0026quot;ADMIN\u0026quot; # \u0026quot;RUNNING\u0026quot; means the listed server will be started up to \u0026quot;RUNNING\u0026quot; mode # \u0026quot;ADMIN\u0026quot; means the listed server will be start up to \u0026quot;ADMIN\u0026quot; mode serverStartState: \u0026quot;RUNNING\u0026quot; # adminService: # channels: # The Admin Server's NodePort # - channelName: default # nodePort: 30701 # Uncomment to export the T3Channel as a service # - channelName: T3Channel # clusters is used to configure the desired behavior for starting member servers of a cluster. # If you use this entry, then the rules will be applied to ALL servers that are members of the named clusters. clusters: - clusterName: ibr_cluster serverService: precreateService: true serverStartState: \u0026quot;RUNNING\u0026quot; serverPod: # Instructs Kubernetes scheduler to prefer nodes for new cluster members where there are not # already members of the same cluster. affinity: podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 100 podAffinityTerm: labelSelector: matchExpressions: - key: \u0026quot;weblogic.clusterName\u0026quot; operator: In values: - $(CLUSTER_NAME) topologyKey: \u0026quot;kubernetes.io/hostname\u0026quot; replicas: 1 # The number of managed servers to start for unlisted clusters # replicas: 1 # Istio # configuration: # istio: # enabled: # readinessPort: - clusterName: ucm_cluster clusterService: annotations: traefik.ingress.kubernetes.io/affinity: \u0026quot;true\u0026quot; traefik.ingress.kubernetes.io/service.sticky.cookie: \u0026quot;true\u0026quot; traefik.ingress.kubernetes.io/session-cookie-name: JSESSIONID serverService: precreateService: true serverStartState: \u0026quot;RUNNING\u0026quot; serverPod: # Instructs Kubernetes scheduler to prefer nodes for new cluster members where there are not # already members of the same cluster. affinity: podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 100 podAffinityTerm: labelSelector: matchExpressions: - key: \u0026quot;weblogic.clusterName\u0026quot; operator: In values: - $(CLUSTER_NAME) topologyKey: \u0026quot;kubernetes.io/hostname\u0026quot; replicas: 3 # The number of managed servers to start for unlisted clusters # replicas: 1 - clusterName: ipm_cluster clusterService: annotations: traefik.ingress.kubernetes.io/affinity: \u0026quot;true\u0026quot; traefik.ingress.kubernetes.io/service.sticky.cookie: \u0026quot;true\u0026quot; traefik.ingress.kubernetes.io/session-cookie-name: JSESSIONID serverService: precreateService: true serverStartState: \u0026quot;RUNNING\u0026quot; serverPod: # Instructs Kubernetes scheduler to prefer nodes for new cluster members where there are not # already members of the same cluster. affinity: podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 100 podAffinityTerm: labelSelector: matchExpressions: - key: \u0026quot;weblogic.clusterName\u0026quot; operator: In values: - $(CLUSTER_NAME) topologyKey: \u0026quot;kubernetes.io/hostname\u0026quot; replicas: 3 # The number of managed servers to start for unlisted clusters # replicas: 1 - clusterName: capture_cluster clusterService: annotations: traefik.ingress.kubernetes.io/affinity: \u0026quot;true\u0026quot; traefik.ingress.kubernetes.io/service.sticky.cookie: \u0026quot;true\u0026quot; traefik.ingress.kubernetes.io/session-cookie-name: JSESSIONID serverService: precreateService: true serverStartState: \u0026quot;RUNNING\u0026quot; serverPod: # Instructs Kubernetes scheduler to prefer nodes for new cluster members where there are not # already members of the same cluster. affinity: podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 100 podAffinityTerm: labelSelector: matchExpressions: - key: \u0026quot;weblogic.clusterName\u0026quot; operator: In values: - $(CLUSTER_NAME) topologyKey: \u0026quot;kubernetes.io/hostname\u0026quot; replicas: 3 # The number of managed servers to start for unlisted clusters # replicas: 1 - clusterName: wccadf_cluster clusterService: annotations: traefik.ingress.kubernetes.io/affinity: \u0026quot;true\u0026quot; traefik.ingress.kubernetes.io/service.sticky.cookie: \u0026quot;true\u0026quot; traefik.ingress.kubernetes.io/session-cookie-name: WCCSID serverService: precreateService: true serverStartState: \u0026quot;RUNNING\u0026quot; serverPod: # Instructs Kubernetes scheduler to prefer nodes for new cluster members where there are not # already members of the same cluster. affinity: podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 100 podAffinityTerm: labelSelector: matchExpressions: - key: \u0026quot;weblogic.clusterName\u0026quot; operator: In values: - $(CLUSTER_NAME) topologyKey: \u0026quot;kubernetes.io/hostname\u0026quot; replicas: 3 # The number of managed servers to start for unlisted clusters # replicas: 1    Verify the domain To confirm that the domain was created, enter the following command:\n$ kubectl describe domain DOMAINUID -n NAMESPACE Replace DOMAINUID with the domainUID and NAMESPACE with the actual namespace.\n  Click here to see a sample domain description.   [opc@bastionhost domain-home-on-pv]$ kubectl describe domain wccinfra -n wccns Name: wccinfra Namespace: wccns Labels: weblogic.domainUID=wccinfra Annotations: kubectl.kubernetes.io/last-applied-configuration: {\u0026quot;apiVersion\u0026quot;:\u0026quot;weblogic.oracle/v8\u0026quot;,\u0026quot;kind\u0026quot;:\u0026quot;Domain\u0026quot;,\u0026quot;metadata\u0026quot;:{\u0026quot;annotations\u0026quot;:{},\u0026quot;labels\u0026quot;:{\u0026quot;weblogic.domainUID\u0026quot;:\u0026quot;wccinfra\u0026quot;},\u0026quot;name\u0026quot;:\u0026quot;wccinfr... API Version: weblogic.oracle/v8 Kind: Domain Metadata: Creation Timestamp: 2021-08-24T12:26:19Z Generation: 33 Managed Fields: API Version: weblogic.oracle/v8 Fields Type: FieldsV1 fieldsV1: f:metadata: f:annotations: .: f:kubectl.kubernetes.io/last-applied-configuration: f:labels: .: f:weblogic.domainUID: Manager: kubectl Operation: Update Time: 2021-09-30T10:56:07Z API Version: weblogic.oracle/v8 Fields Type: FieldsV1 fieldsV1: f:status: .: f:clusters: f:conditions: f:introspectJobFailureCount: f:servers: f:startTime: Manager: Kubernetes Java Client Operation: Update Time: 2021-10-04T20:06:17Z Resource Version: 115422662 Self Link: /apis/weblogic.oracle/v8/namespaces/wccns/domains/wccinfra UID: e283c968-b80b-404b-aa1e-711080d7cc38 Spec: Admin Server: Server Start State: RUNNING Clusters: Cluster Name: ibr_cluster Replicas: 1 Server Pod: Affinity: Pod Anti Affinity: Preferred During Scheduling Ignored During Execution: Pod Affinity Term: Label Selector: Match Expressions: Key: weblogic.clusterName Operator: In Values: $(CLUSTER_NAME) Topology Key: kubernetes.io/hostname Weight: 100 Server Service: Precreate Service: true Server Start State: RUNNING Cluster Name: ucm_cluster Cluster Service: Annotations: traefik.ingress.kubernetes.io/affinity: true traefik.ingress.kubernetes.io/service.sticky.cookie: true traefik.ingress.kubernetes.io/session-cookie-name: JSESSIONID Replicas: 3 Server Pod: Affinity: Pod Anti Affinity: Preferred During Scheduling Ignored During Execution: Pod Affinity Term: Label Selector: Match Expressions: Key: weblogic.clusterName Operator: In Values: $(CLUSTER_NAME) Topology Key: kubernetes.io/hostname Weight: 100 Server Service: Precreate Service: true Server Start State: RUNNING Cluster Name: ipm_cluster Cluster Service: Annotations: traefik.ingress.kubernetes.io/affinity: true traefik.ingress.kubernetes.io/service.sticky.cookie: true traefik.ingress.kubernetes.io/session-cookie-name: JSESSIONID Replicas: 3 Server Pod: Affinity: Pod Anti Affinity: Preferred During Scheduling Ignored During Execution: Pod Affinity Term: Label Selector: Match Expressions: Key: weblogic.clusterName Operator: In Values: $(CLUSTER_NAME) Topology Key: kubernetes.io/hostname Weight: 100 Server Service: Precreate Service: true Server Start State: RUNNING Cluster Name: capture_cluster Cluster Service: Annotations: traefik.ingress.kubernetes.io/affinity: true traefik.ingress.kubernetes.io/service.sticky.cookie: true traefik.ingress.kubernetes.io/session-cookie-name: JSESSIONID Replicas: 3 Server Pod: Affinity: Pod Anti Affinity: Preferred During Scheduling Ignored During Execution: Pod Affinity Term: Label Selector: Match Expressions: Key: weblogic.clusterName Operator: In Values: $(CLUSTER_NAME) Topology Key: kubernetes.io/hostname Weight: 100 Server Service: Precreate Service: true Server Start State: RUNNING Cluster Name: wccadf_cluster Cluster Service: Annotations: traefik.ingress.kubernetes.io/affinity: true traefik.ingress.kubernetes.io/service.sticky.cookie: true traefik.ingress.kubernetes.io/session-cookie-name: WCCSID Replicas: 3 Server Pod: Affinity: Pod Anti Affinity: Preferred During Scheduling Ignored During Execution: Pod Affinity Term: Label Selector: Match Expressions: Key: weblogic.clusterName Operator: In Values: $(CLUSTER_NAME) Topology Key: kubernetes.io/hostname Weight: 100 Server Service: Precreate Service: true Server Start State: RUNNING Data Home: Domain Home: /u01/oracle/user_projects/domains/wccinfra Domain Home Source Type: PersistentVolume Http Access Log In Log Home: true Image: phx.ocir.io/xxxxxxxxxx/oracle/wccontent:x.x.x.x Image Pull Policy: IfNotPresent Image Pull Secrets: Name: image-secret Include Server Out In Pod Log: true Log Home: /u01/oracle/user_projects/domains/logs/wccinfra Log Home Enabled: true Max Cluster Concurrent Startup: 1 Server Pod: Env: Name: JAVA_OPTIONS Value: -Dweblogic.StdoutDebugEnabled=false Name: USER_MEM_ARGS Value: -Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx1024m Volume Mounts: Mount Path: /u01/oracle/user_projects/domains Name: weblogic-domain-storage-volume Volumes: Name: weblogic-domain-storage-volume Persistent Volume Claim: Claim Name: wccinfra-domain-pvc Server Start Policy: IF_NEEDED Web Logic Credentials Secret: Name: wccinfra-domain-credentials Status: Clusters: Cluster Name: ibr_cluster Maximum Replicas: 5 Minimum Replicas: 0 Ready Replicas: 1 Replicas: 1 Replicas Goal: 1 Cluster Name: ucm_cluster Maximum Replicas: 5 Minimum Replicas: 0 Ready Replicas: 3 Replicas: 3 Replicas Goal: 3 Cluster Name: ipm_cluster Maximum Replicas: 5 Minimum Replicas: 0 Ready Replicas: 3 Replicas: 3 Replicas Goal: 3 Cluster Name: capture_cluster Maximum Replicas: 5 Minimum Replicas: 0 Ready Replicas: 3 Replicas: 3 Replicas Goal: 3 Cluster Name: wccadf_cluster Maximum Replicas: 5 Minimum Replicas: 0 Ready Replicas: 3 Replicas: 3 Replicas Goal: 3 Conditions: Last Transition Time: 2021-09-30T11:04:35.889547Z Reason: ServersReady Status: True Type: Available Introspect Job Failure Count: 0 Servers: Desired State: RUNNING Health: Activation Time: 2021-09-30T10:58:38.381000Z Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: 10.0.10.135 Server Name: adminserver State: RUNNING Cluster Name: ibr_cluster Desired State: RUNNING Health: Activation Time: 2021-09-30T11:01:09.987000Z Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: 10.0.10.135 Server Name: ibr_server1 State: RUNNING Cluster Name: ibr_cluster Desired State: SHUTDOWN Server Name: ibr_server2 Cluster Name: ibr_cluster Desired State: SHUTDOWN Server Name: ibr_server3 Cluster Name: ibr_cluster Desired State: SHUTDOWN Server Name: ibr_server4 Cluster Name: ibr_cluster Desired State: SHUTDOWN Server Name: ibr_server5 Cluster Name: ucm_cluster Desired State: RUNNING Health: Activation Time: 2021-09-30T11:00:36.369000Z Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: 10.0.10.142 Server Name: ucm-server1 State: RUNNING Cluster Name: ucm_cluster Desired State: RUNNING Health: Activation Time: 2021-09-30T11:02:35.448000Z Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: 10.0.10.135 Server Name: ucm-server2 State: RUNNING Cluster Name: ucm_cluster Desired State: RUNNING Health: Activation Time: 2021-09-30T11:04:32.314000Z Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: 10.0.10.142 Server Name: ucm-server3 State: RUNNING Cluster Name: ucm_cluster Desired State: SHUTDOWN Server Name: ucm-server4 Cluster Name: ucm_cluster Desired State: SHUTDOWN Server Name: ucm-server5 Cluster Name: ipm_cluster Desired State: RUNNING Health: Activation Time: 2021-09-30T11:04:32.314000Z Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: MyNodeName Server Name: ipm_server1 State: RUNNING Cluster Name: ipm_cluster Desired State: SHUTDOWN Server Name: ipm_server2 Cluster Name: ipm_cluster Desired State: SHUTDOWN Server Name: ipm_server3 Cluster Name: ipm_cluster Desired State: SHUTDOWN Server Name: ipm_server4 Cluster Name: ipm_cluster Desired State: SHUTDOWN Server Name: ipm_server5 Cluster Name: capture_cluster Desired State: RUNNING Health: Activation Time: 2021-09-30T11:04:32.314000Z Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: MyNodeName Server Name: capture_server1 State: RUNNING Cluster Name: capture_cluster Desired State: SHUTDOWN Server Name: capture_server2 Cluster Name: capture_cluster Desired State: SHUTDOWN Server Name: capture_server3 Cluster Name: capture_cluster Desired State: SHUTDOWN Server Name: capture_server4 Cluster Name: capture_cluster Desired State: SHUTDOWN Server Name: capture_server5 Cluster Name: wccadf_cluster Desired State: RUNNING Health: Activation Time: 2021-09-30T11:04:32.314000Z Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: MyNodeName Server Name: wccadf_server1 State: RUNNING Cluster Name: wccadf_cluster Desired State: SHUTDOWN Server Name: wccadf_server2 Cluster Name: wccadf_cluster Desired State: SHUTDOWN Server Name: wccadf_server3 Cluster Name: wccadf_cluster Desired State: SHUTDOWN Server Name: wccadf_server4 Cluster Name: wccadf_cluster Desired State: SHUTDOWN Server Name: wccadf_server5 Start Time: 2021-08-24T12:26:20.033714Z Events: \u0026lt;none\u0026gt;    In the Status section of the output, the available servers and clusters are listed. Note that if this command is issued soon after the script finishes, there may be no servers available yet, or perhaps only the Administration Server but no Managed Servers. The WebLogic Kubernetes Operator will start up the Administration Server first and wait for it to become ready before starting the Managed Servers.\nVerify the pods Enter the following command to see the pods running the servers:\n$ kubectl get pods -n NAMESPACE Here is an example of the output of this command. You can verify that an Administration Server and Managed Servers for ucm and ibr cluster are running.\n$ kubectl get pod -n wccns NAME READY STATUS RESTARTS AGE rcu 1/1 Running 0 54d wccinfra-adminserver 1/1 Running 0 18d wccinfra-create-fmw-infra-sample-domain-job-xqnn4 0/1 Completed 0 54d wccinfra-ibr-server1 1/1 Running 0 18d wccinfra-ucm-server1 1/1 Running 0 18d wccinfra-ucm-server2 1/1 Running 0 18d wccinfra-ucm-server3 1/1 Running 0 18d wccinfra-ipm-server1 1/1 Running 0 18d wccinfra-ipm-server2 1/1 Running 0 18d wccinfra-ipm-server3 1/1 Running 0 18d wccinfra-capture-server1 1/1 Running 0 18d wccinfra-capture-server2 1/1 Running 0 18d wccinfra-capture-server3 1/1 Running 0 18d wccinfra-wccadf-server1 1/1 Running 0 18d wccinfra-wccadf-server2 1/1 Running 0 18d wccinfra-wccadf-server3 1/1 Running 0 18d Verify the services Enter the following command to see the services for the domain:\n$ kubectl get services -n NAMESPACE Here is an example of the output of this command.\n  Click here to see a sample list of services.   $ kubectl get services -n wccns NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE oracle-db LoadBalancer 10.96.4.194 141.148.xxx.xxx 1521:30011/TCP 15d wccinfra-adminserver ClusterIP None \u0026lt;none\u0026gt; 7001/TCP 43h wccinfra-capture-server1 ClusterIP None \u0026lt;none\u0026gt; 16400/TCP 43h wccinfra-capture-server2 ClusterIP None \u0026lt;none\u0026gt; 16400/TCP 43h wccinfra-capture-server3 ClusterIP None \u0026lt;none\u0026gt; 16400/TCP 43h wccinfra-capture-server4 ClusterIP 10.96.162.97 \u0026lt;none\u0026gt; 16400/TCP 43h wccinfra-capture-server5 ClusterIP 10.96.86.213 \u0026lt;none\u0026gt; 16400/TCP 43h wccinfra-cluster-capture-cluster ClusterIP 10.96.107.96 \u0026lt;none\u0026gt; 16400/TCP 2d13h wccinfra-cluster-ibr-cluster ClusterIP 10.96.123.229 \u0026lt;none\u0026gt; 16250/TCP 2d13h wccinfra-cluster-ipm-cluster ClusterIP 10.96.130.117 \u0026lt;none\u0026gt; 16000/TCP 2d13h wccinfra-cluster-ucm-cluster ClusterIP 10.96.24.88 \u0026lt;none\u0026gt; 16200/TCP 119s wccinfra-cluster-wccadf-cluster ClusterIP 10.96.11.113 \u0026lt;none\u0026gt; 16225/TCP 2d13h wccinfra-ibr-server1 ClusterIP None \u0026lt;none\u0026gt; 16250/TCP 43h wccinfra-ibr-server2 ClusterIP 10.96.57.47 \u0026lt;none\u0026gt; 16250/TCP 43h wccinfra-ibr-server3 ClusterIP 10.96.75.252 \u0026lt;none\u0026gt; 16250/TCP 43h wccinfra-ibr-server4 ClusterIP 10.96.120.224 \u0026lt;none\u0026gt; 16250/TCP 43h wccinfra-ibr-server5 ClusterIP 10.96.34.58 \u0026lt;none\u0026gt; 16250/TCP 43h wccinfra-ipm-server1 ClusterIP None \u0026lt;none\u0026gt; 16000/TCP 43h wccinfra-ipm-server2 ClusterIP None \u0026lt;none\u0026gt; 16000/TCP 43h wccinfra-ipm-server3 ClusterIP None \u0026lt;none\u0026gt; 16000/TCP 43h wccinfra-ipm-server4 ClusterIP 10.96.44.8 \u0026lt;none\u0026gt; 16000/TCP 43h wccinfra-ipm-server5 ClusterIP 10.96.77.81 \u0026lt;none\u0026gt; 16000/TCP 43h wccinfra-ucm-server1 ClusterIP None \u0026lt;none\u0026gt; 16200/TCP 43h wccinfra-ucm-server2 ClusterIP None \u0026lt;none\u0026gt; 16200/TCP 43h wccinfra-ucm-server3 ClusterIP None \u0026lt;none\u0026gt; 16200/TCP 43h wccinfra-ucm-server4 ClusterIP 10.96.132.1 \u0026lt;none\u0026gt; 16200/TCP 43h wccinfra-ucm-server5 ClusterIP 10.96.199.161 \u0026lt;none\u0026gt; 16200/TCP 43h wccinfra-wccadf-server1 ClusterIP None \u0026lt;none\u0026gt; 16225/TCP 43h wccinfra-wccadf-server2 ClusterIP None \u0026lt;none\u0026gt; 16225/TCP 43h wccinfra-wccadf-server3 ClusterIP None \u0026lt;none\u0026gt; 16225/TCP 43h wccinfra-wccadf-server4 ClusterIP 10.96.156.42 \u0026lt;none\u0026gt; 16225/TCP 43h wccinfra-wccadf-server5 ClusterIP 10.96.194.175 \u0026lt;none\u0026gt; 16225/TCP 43h    Expose service for IBR intradoc port   Get the IP address for the node, hosting ibr managed server pod. In this sample, node running wccinfra-ibr-server1 pod has ip \u0026lsquo;10.0.10.xx\u0026rsquo;\n$ kubectl get pods -n wccns -o wide #output NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES wccinfra-adminserver 1/1 Running 0 4h50m 10.244.0.150 10.0.10.xxx \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; wccinfra-create-fmw-infra-sample-domain-job-zbsxr 0/1 Completed 0 7d22h 10.244.1.25 10.0.10.xx \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; wccinfra-ibr-server1 1/1 Running 0 4h48m 10.244.1.38 10.0.10.xx \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; wccinfra-ucm-server1 1/1 Running 0 4h48m 10.244.1.39 10.0.10.xx \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; wccinfra-ucm-server2 1/1 Running 0 4h46m 10.244.0.151 10.0.10.xxx \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; wccinfra-ucm-server3 1/1 Running 0 4h44m 10.244.1.40 10.0.10.xx \u0026lt;none\u0026gt; \u0026lt;none\u0026gt;   Expose the IBR intradoc port as a NodePort\n Note: Choose NodePort value from a range (default: 30000-32767). In this sample, we have chosen nodePort value as 30555\n $ cd ${WORKDIR}/create-wcc-domain/domain-home-on-pv/ kubectl expose service/wccinfra-cluster-ibr-cluster --name wccinfra-cluster-ibr-cluster-ext --port=5555 --type=NodePort -n wccns --dry-run=true -o yaml \u0026gt; wccinfra-cluster-ibr-cluster-ext.yaml sed -i -e \u0026#39;/targetPort:*/a\\ \\ \\ \\ nodePort: 30555\u0026#39; wccinfra-cluster-ibr-cluster-ext.yaml kubectl -n wccns apply -f wccinfra-cluster-ibr-cluster-ext.yaml   Verify ibr service name \u0026lsquo;wccinfra-cluster-ibr-cluster-ext\u0026rsquo; $ kubectl get svc -n wccns NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) wccinfra-cluster-ibr-cluster-ext NodePort 10.109.247.52 \u0026lt;none\u0026gt; 5555:30555/TCP   Create the outgoing provider by providing following details and restart the servers.\nPlease provide the NodePort value (in the above sample - 30555), as Server Port.\nServer Host Name: \u0026lt;your-ibr-managed-server-node-ip\u0026gt; Server Port: 30555   Expose service for UCM intradoc port   Get the IP address for the node, hosting ucm managed server pod. In this sample, node running wccinfra-ucm-server1 pod has ip \u0026lsquo;10.0.10.xx\u0026rsquo;\n$ kubectl get pods -n wccns -o wide #output NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES wccinfra-adminserver 1/1 Running 0 4h50m 10.244.0.150 10.0.10.xxx \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; wccinfra-create-fmw-infra-sample-domain-job-zbsxr 0/1 Completed 0 7d22h 10.244.1.25 10.0.10.xx \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; wccinfra-ibr-server1 1/1 Running 0 4h48m 10.244.1.38 10.0.10.xx \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; wccinfra-ucm-server1 1/1 Running 0 4h48m 10.244.1.39 10.0.10.xx \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; wccinfra-ucm-server2 1/1 Running 0 4h46m 10.244.0.151 10.0.10.xxx \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; wccinfra-ucm-server3 1/1 Running 0 4h44m 10.244.1.40 10.0.10.xx \u0026lt;none\u0026gt; \u0026lt;none\u0026gt;   Expose the UCM intradoc port as a NodePort\n Note: Choose NodePort value from a range (default: 30000-32767). In this sample, we have chosen nodePort value as 30444\n $ cd ${WORKDIR}/create-wcc-domain/domain-home-on-pv/ $ kubectl expose service/wccinfra-cluster-ucm-cluster --name wccinfra-cluster-ucm-cluster-ext --port=4444 --type=NodePort -n wccns --dry-run=true -o yaml \u0026gt; wccinfra-cluster-ucm-cluster-ext.yaml $ sed -i -e \u0026#39;/targetPort:*/a\\ \\ \\ \\ nodePort: 30444\u0026#39; wccinfra-cluster-ucm-cluster-ext.yaml $ kubectl -n wccns apply -f wccinfra-cluster-ucm-cluster-ext.yaml   Verify ucm service name \u0026lsquo;wccinfra-cluster-ucm-cluster-ext\u0026rsquo; $ kubectl get svc -n wccns NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) wccinfra-cluster-ucm-cluster-ext NodePort 10.109.247.52 \u0026lt;none\u0026gt; 4444:30444/TCP   "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/patch_and_upgrade/",
	"title": "Patch and upgrade",
	"tags": [],
	"description": "",
	"content": "Patch an existing Oracle WebCenter Content image or upgrade the infrastructure, such as upgrading the underlying Kubernetes cluster to a new release and upgrading the WebLogic Kubernetes Operator release.\n Patch an image  Create a patched Oracle WebCenter Content image using the WebLogic Image Tool.\n Upgrade an WebLogic Kubernetes Operator release  Upgrade the WebLogic Kubernetes Operator release to a newer version.\n Upgrade a Kubernetes cluster  Upgrade the underlying Kubernetes cluster version in a running WebCenter Content Kubernetes environment.\n "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/adminguide/weblogic-logging-exporter-setup/",
	"title": "Publish logs to Elasticsearch",
	"tags": [],
	"description": "Use the WebLogic Logging Exporter to publish the WebLogic Server logs to Elasticsearch.",
	"content": "The WebLogic Logging Exporter adds a log event handler to WebLogic Server. WebLogic Server logs can be pushed to Elasticsearch in Kubernetes directly by using the Elasticsearch REST API. For more details, see to the WebLogic Logging Exporter project.\nThis sample shows you how to publish WebLogic Server logs to Elasticsearch and view them in Kibana. For publishing WebLogic Kubernetes Operator logs, see this sample.\nPrerequisites This document assumes that you have already set up Elasticsearch and Kibana for logs collection. If you have not, please see this document.\n Download the WebLogic Logging Exporter binaries The pre-built binaries are available on the WebLogic Logging Exporter Releases page.\nDownload:\n weblogic-logging-exporter-1.0.1.jar from the Releases page. snakeyaml-1.27.jar from Maven Central.  $ wget https://github.com/oracle/weblogic-logging-exporter/releases/download/v1.0.1/weblogic-logging-exporter.jar $ wget -O snakeyaml-1.27.jar https://search.maven.org/remotecontent?filepath=org/yaml/snakeyaml/1.27/snakeyaml-1.27.jar  These identifiers are used in the sample commands in this document.\n wccns: WebCenter Content domain namespace wccinfra: domainUID wccinfra-adminserver: Administration Server pod name   Copy the JAR Files to the WebLogic Domain Home Copy the weblogic-logging-exporter.jar and snakeyaml-1.27.jar files to the domain home directory in the Administration Server pod.\n$ kubectl cp \u0026lt;file-to-copy\u0026gt; \u0026lt;namespace\u0026gt;/\u0026lt;administration-server-pod\u0026gt;:\u0026lt;domainhome\u0026gt; $ kubectl cp weblogic-logging-exporter.jar wccns/wccinfra-adminserver:/u01/oracle/user_projects/domains/wccinfra/ $ kubectl cp snakeyaml-1.27.jar wccns/wccinfra-adminserver:/u01/oracle/user_projects/domains/wccinfra/ Add a Startup Class to the Domain Configuration In this step, we configure weblogic-logging-exporter JAR as a startup class in the WebLogic servers where we intend to collect the logs.\n  In the WebLogic Server Administration Console, in the left navigation pane, expand Environment, and then select Startup and Shutdown Classes.\n  Add a new startup class. You may choose any descriptive name, however, the class name must be weblogic.logging.exporter.Startup.\n  Target the startup class to each server from which you want to export logs.\n  You can verify this by checking for the update in your config.xml file(/u01/oracle/user_projects/domains/wccinfra/config/config.xml) which should be similar to this example:\n$ kubectl exec -n wccns -it wccinfra-adminserver cat /u01/oracle/user_projects/domains/wccinfra/config/config.xml \u0026lt;startup-class\u0026gt; \u0026lt;name\u0026gt;weblogic-logging-exporter\u0026lt;/name\u0026gt; \u0026lt;target\u0026gt;adminServer,ucm_cluster,ibr_cluster,ipm_cluster,capture_cluster,wccadf_cluster\u0026lt;/target\u0026gt; \u0026lt;class-name\u0026gt;weblogic.logging.exporter.Startup\u0026lt;/class-name\u0026gt; \u0026lt;/startup-class\u0026gt;   Update the WebLogic Server CLASSPATH   Copy the setDomainEnv.sh file from the pod to a local folder:\n$ kubectl cp wccns/wccinfra-adminserver:/u01/oracle/user_projects/domains/wccinfra/bin/setDomainEnv.sh $PWD/setDomainEnv.sh Ignore exception: tar: Removing leading '/' from member names\n  Modify setDomainEnv.sh to update the Server Class path, add below code at the end of file:\nCLASSPATH=/u01/oracle/user_projects/domains/wccinfra/weblogic-logging-exporter.jar:/u01/oracle/user_projects/domains/wccinfra/snakeyaml-1.27.jar:${CLASSPATH} export CLASSPATH   Copy back the modified setDomainEnv.sh file to the pod:\n$ kubectl cp setDomainEnv.sh wccns/wccinfra-adminserver:/u01/oracle/user_projects/domains/wccinfra/bin/setDomainEnv.sh ``\n  Create a Configuration File for the WebLogic Logging Exporter In this step, we will be creating the configuration file for weblogic-logging-exporter.\n  Specify the Elasticsearch server host and port number in file $WORKDIR/logging-services/weblogic-logging-exporter/WebLogicLoggingExporter.yaml:\nSample:\nweblogicLoggingIndexName: wls publishHost: elasticsearch.default.svc.cluster.local publishPort: 9200 domainUID: wccinfra weblogicLoggingExporterEnabled: true weblogicLoggingExporterSeverity: Notice weblogicLoggingExporterBulkSize: 1 weblogicLoggingExporterFilters: - FilterExpression: NOT(MSGID = 'BEA-000449')   Copy the WebLogicLoggingExporter.yaml file to the domain home directory in the WebLogic Administration Server pod:\n$ kubectl cp ${WORKDIR}/logging-services/weblogic-logging-exporter/WebLogicLoggingExporter.yaml wccns/wccinfra-adminserver:/u01/oracle/user_projects/domains/wccinfra/config/   Restart All the Servers in the Domain To restart the servers, stop and then start them using the following commands:\nTo STOP the servers: $ kubectl patch domain wccinfra -n wccns --type='json' -p='[{\u0026quot;op\u0026quot;: \u0026quot;replace\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/spec/serverStartPolicy\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;NEVER\u0026quot; }]' To START the servers: $ kubectl patch domain wccinfra -n wccns --type='json' -p='[{\u0026quot;op\u0026quot;: \u0026quot;replace\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/spec/serverStartPolicy\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;IF_NEEDED\u0026quot; }]' After all the servers are restarted, see their server logs to check that the weblogic-logging-exporter class is called, as shown below:\n======================= Weblogic Logging Exporter Startup class called ================== Reading configuration from file name: /u01/oracle/user_projects/domains/wccinfra/config/WebLogicLoggingExporter.yaml Config{weblogicLoggingIndexName='wls', publishHost='elasticsearch.default.svc.cluster.local', publishPort=9200, weblogicLoggingExporterSeverity='Notice', weblogicLoggingExporterBulkSize='1', enabled=true, weblogicLoggingExporterFilters=[ FilterConfig{expression='NOT(MSGID = 'BEA-000449')', servers=[]}], domainUID='wccinfra'} ====================== WebLogic Logging Exporter is ebled ================= publishHost in initialize: elasticsearch.default.svc.cluster.local ================= publishPort in initialize: 9200 ================= url in executePutOrPostOnUrl: http://elasticsearch.default.svc.cluster.local:9200/wls Create an Index Pattern in Kibana Create an appropriate index pattern in Kibana \u0026gt; Management. After the servers are started, you will see the log data in the Kibana dashboard.\n"
},
{
	"uri": "/fmw-kubernetes/soa-domains/patch_and_upgrade/",
	"title": "Patch and upgrade",
	"tags": [],
	"description": "",
	"content": "Patch an existing Oracle SOA Suite image or upgrade the infrastructure, such as upgrading the underlying Kubernetes cluster to a new release and upgrading the WebLogic Kubernetes Operator release.\n Patch an image  Create a patched Oracle SOA Suite image using the WebLogic Image Tool.\n Upgrade an operator release  Upgrade the WebLogic Kubernetes Operator release to a newer version.\n Upgrade a Kubernetes cluster  Upgrade the underlying Kubernetes cluster version in a running SOA Kubernetes environment.\n "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/oracle-cloud/ocir/",
	"title": "Creating an OCIR",
	"tags": [],
	"description": "Running WebLogic Kubernetes Operator managed Oracle WebCenter Sites domains on OKE",
	"content": "Creation of OCIR Push all the required images to OCIR and use from OCIR. Follow the below steps before pushing the images to OCIR\nCreate an \u0026ldquo;Auth token\u0026rdquo; Create an \u0026ldquo;Auth token\u0026rdquo; which will be used as docker password to push/pull images from OCIR Login to Console and navigate to User Settings, which is in the drop down under your OCI username in the top nav  On User Details page, select \u0026ldquo;Auth Tokens\u0026rdquo; in the left nav and then Click the \u0026ldquo;Generate Token\u0026rdquo; button: Enter a Name and Click \u0026ldquo;Generate Token\u0026rdquo;  Token will get generated  Copy the generated token. NOTE: It will only be displayed this one time, and you will need to copy it to a secure place for further use. NOTE: It will only be displayed this one time, and you will need to copy it to a secure place for further use.  Get the OCIR name Get the OCIR Repo Name by Log in to Oracle Cloud Infrastructure Console. In he OCI Console, open the Navigation menu. Under Solutions and Platform, go to Developer Services and click Registry (OCIR). Using the OCIR Using the Docker CLI to login to OCIR ( for phoenix : phx.ocir.io , ashburn: iad.ocir.io etc) a. docker login phx.ocir.io b. When promoted for username enter docker username as OCIR RepoName/oci username ( eg., axcmmdmzqtqb/oracleidentitycloudservice/myemailid@oracle.com) c. When prompted for your password, enter the generated Auth Token i.e p[3k;pYePDSTD:-(LlAS Now you can tag the images and push to OCIR.\n$ docker login phx.ocir.io $ username - axcmmdmzqtqb/oracleidentitycloudservice/myemailid@oracle.com $ password - p[3k;pYePDSTD:-(LlAS (Token Generated for OCIR using user setting) This has to be done on Bastion Node for all the images.\n"
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/patch-and-upgrade/",
	"title": "Upgrade and Patch ",
	"tags": [],
	"description": "Pre-requisites for setting up WebCenter Sites domains with WebLogic Kubernetes Operator",
	"content": "Patch an existing Oracle WebCenter Sites image or upgrade the infrastructure, such as upgrading the underlying Kubernetes cluster to a new release and upgrading the WebLogic Kubernetes Operator release.\n Patch a Oracle WebCenter Sites product Docker image  Upgrade the underlying Oracle WebCenter Sites product image in a running Oracle WebCenter Sites Kubernetes environment.\n Upgrade an operator release  Upgrade the WebLogic Kubernetes Operator release to a newer version.\n Upgrade a Kubernetes cluster  Upgrade the underlying Kubernetes cluster version in a running Oracle WebCenter Sites Kubernetes environment.\n "
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/manage-wcportal-domains/",
	"title": "Administration Guide",
	"tags": [],
	"description": "Describes how to use some common utility tools and configurations to administer  WebCenter Portal domain.",
	"content": "Administer Oracle WebCenter Portal domain in Kubernetes.\n Set up a load balancer  Configure different load balancers for the Oracle WebCenter Portal domain.\n Monitor a domain and publish logs  Monitor Oracle WebCenter Portal and publishing logs to Elasticsearch.\n "
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/create-or-update-image/",
	"title": "Create or update an image",
	"tags": [],
	"description": "Create or update an Oracle WebCenter Portal Docker image used for deploying Oracle WebCenter Portal domains. An Oracle WebCenter Portal Docker image can be created using the WebLogic Image Tool or using the Dockerfile approach.",
	"content": "You can build an Oracle WebCenter Portal image for production deployments with patches (bundle or interim) using the WebLogic Image Tool, you must have access to the My Oracle Support (MOS) to download (bundle or interim) patches.\n Create or update an Oracle WebCenter Portal Docker image using the WebLogic Image Tool  Set up the WebLogic Image Tool Create an image Update an image   Create an Oracle WebCenter Portal Docker image using Dockerfile  Create or update an Oracle WebCenter Portal Docker image using the WebLogic Image Tool Using the WebLogic Image Tool, you can create a new Oracle WebCenter Portal Docker image (can include patches as well) or update an existing image with one or more patches (bundle patch and interim patches).\n Recommendations:\n Use create for creating a new Oracle WebCenter Portal Docker image:  without any patches or, containing the Oracle WebCenter Portal binaries, bundle , and interim patches. This is the recommended approach if you have access to the Oracle WebCenter Portal patches because it optimizes the size of the image.   Use update for patching an existing Oracle WebCenter Portal Docker image with a single interim patch. Note that the patched image size may increase considerably due to additional image layers introduced by the patch application tool.    Prerequisites Set up the WebLogic Image Tool Validate the setup WebLogic Image Tool build directory WebLogic Image Tool cache Set up additional build scripts  Prerequisites Verify that your environment meets the following prerequisites:\n Docker client and daemon on the build machine, with minimum Docker version 18.03.1.ce. Bash version 4.0 or later, to enable the command complete feature. JAVA_HOME environment variable set to the appropriate JDK location.  Set up the WebLogic Image Tool To set up the WebLogic Image Tool:\n  Create a working directory and change to it. In these steps, this directory is imagetool-setup.\n$ mkdir imagetool-setup $ cd imagetool-setup   Download the latest version of the WebLogic Image Tool from the releases page.\n  Unzip the release ZIP file to the imagetool-setup directory.\n  Execute the following commands to set up the WebLogic Image Tool on a Linux environment:\n$ cd imagetool-setup/imagetool/bin $ source setup.sh   Validate the setup To validate the setup of the WebLogic Image Tool:\n  Enter the following command to retrieve the version of the WebLogic Image Tool:\n$ imagetool --version   Enter imagetool then press the Tab key to display the available imagetool commands:\n$ imagetool \u0026lt;TAB\u0026gt; cache create help rebase update   WebLogic Image Tool build directory The WebLogic Image Tool creates a temporary Docker context directory, prefixed by wlsimgbuilder_temp, every time the tool runs. Under normal circumstances, this context directory is deleted. However, if the process is aborted or the tool is unable to remove the directory, it is safe for you to delete it manually. By default, the WebLogic Image Tool creates the Docker context directory under the user\u0026rsquo;s home directory. If you prefer to use a different directory for the temporary context, set the environment variable WLSIMG_BLDDIR:\n$ export WLSIMG_BLDDIR=\u0026#34;/path/to/buid/dir\u0026#34; WebLogic Image Tool cache The WebLogic Image Tool maintains a local file cache store. This store is used to look up where the Java, WebLogic Server installers, and WebLogic Server patches reside in the local file system. By default, the cache store is located in the user\u0026rsquo;s $HOME/cache directory. Under this directory, the lookup information is stored in the .metadata file. All automatically downloaded patches also reside in this directory. You can change the default cache store location by setting the environment variable WLSIMG_CACHEDIR:\n$ export WLSIMG_CACHEDIR=\u0026#34;/path/to/cachedir\u0026#34; Set up additional build scripts To create an Oracle WebCenter Portal Docker image using the WebLogic Image Tool, additional container scripts for Oracle WebCenter Portal domains are required.\n  Clone the docker-images repository to set up those scripts. In these steps, this directory is DOCKER_REPO:\n$ cd imagetool-setup $ git clone https://github.com/oracle/docker-images.git   Copy the additional WebLogic Image Tool build files from the operator source repository to the imagetool-setup location:\n$ mkdir -p imagetool-setup/docker-images/OracleWebCenterPortal/imagetool/12.2.1.4.0 $ cd imagetool-setup/docker-images/OracleWebCenterPortal/imagetool/12.2.1.4.0 $ cp -rf ${WORKDIR}/imagetool-scripts/* .    Note: To create the image, continue with the following steps. To update the image, see update an image.\n Create an image After setting up the WebLogic Image Tool and configuring the required build scripts, create a new Oracle WebCenter Portal Docker image using the WebLogic Image Tool as described ahead.\nDownload the Oracle WebCenter Portal installation binaries and patches You must download the required Oracle WebCenter Portal installation binaries and patches listed below from the Oracle Software Delivery Cloud and save them in a directory of your choice. In these steps, the directory is download location.\nThe installation binaries and patches required for release 21.2.3 are:\n  JDK:\n jdk-8u281-linux-x64.tar.gz    Fusion Middleware Infrastructure installer:\n fmw_12.2.1.4.0_infrastructure.jar    WCP installers:\n fmw_12.2.1.4.0_wcportal.jar    Fusion Middleware Infrastructure patches:\n p28186730_139425_Generic.zip (OPatch) p32253037_122140_Generic.zip(WLS) p31544353_122140_Linux-x86-64.zip(WLS ADR Patch) p32124456_122140_Generic.zip(Bundle patch for Oracle Coherence Version 12.2.1.4.7) p31666198_122140_Generic.zip(OPSS Bundle Patch 12.2.1.4.200724) p32357288_122140_Generic.zip(ADF BUNDLE PATCH 12.2.1.4.210107)    WCP patches:\n p32224021_122140_Generic.zip(WCP BUNDLE PATCH 12.2.1.4.201126) p31852495_122140_Generic.zip(WEBCENTER CORE BUNDLE PATCH 12.2.1.4.200905))    Update required build files The following files in the code repository location \u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleWebCenterPortal/imagetool/12.2.1.4.0 are used for creating the image:\n additionalBuildCmds.txt buildArgs    In the buildArgs file, update all occurrences of %DOCKER_REPO% with the docker-images repository location, which is the complete path of \u0026lt;imagetool-setup-location\u0026gt;/docker-images.\nFor example, update:\n%DOCKER_REPO%/OracleWebCenterPortal/imagetool/12.2.1.4.0/\nto:\n\u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleWebCenterPortal/imagetool/12.2.1.4.0/\n  Similarly, update the placeholders %JDK_VERSION% and %BUILDTAG% with appropriate values.\n  Update the response file \u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleFMWInfrastructure/dockerfiles/12.2.1.4/install.file to add the parameter INSTALL_TYPE=\u0026quot;Fusion Middleware Infrastructure\u0026quot; in the [GENERIC] section.\n  Create the image   Add a JDK package to the WebLogic Image Tool cache:\n$ imagetool cache addInstaller --type jdk --version 8u281 --path \u0026lt;download location\u0026gt;/jdk-8u281-linux-x64.tar.gz   Add the downloaded installation binaries to the WebLogic Image Tool cache:\n$ imagetool cache addInstaller --type fmw --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_infrastructure.jar $ imagetool cache addInstaller --type wcp --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_wcportal.jar   Add the downloaded OPatch patch to the WebLogic Image Tool cache:\n$ imagetool cache addEntry --key 28186730_13.9.4.2.5 --value \u0026lt;download location\u0026gt;/p28186730_139425_Generic.zip   Append the --opatchBugNumber flag and the OPatch patch key to the create command in the buildArgs file:\n--opatchBugNumber 28186730_13.9.4.2.5   Add the downloaded product patches to the WebLogic Image Tool cache:\n$ imagetool cache addEntry --key 32253037_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32253037_122140_Generic.zip $ imagetool cache addEntry --key 32124456_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32124456_122140_Generic.zip $ imagetool cache addEntry --key 32357288_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32357288_122140_Generic.zip $ imagetool cache addEntry --key 32224021_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32224021_122140_Generic.zip $ imagetool cache addEntry --key 31666198_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p31666198_122140_Generic.zip $ imagetool cache addEntry --key 31544353_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p31544353_122140_Linux-x86-64.zip $ imagetool cache addEntry --key 31852495_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p31852495_122140_Generic.zip   Append the --patches flag and the product patch keys to the create command in the buildArgs file. The --patches list must be a comma-separated collection of patch --key values used in the imagetool cache addEntry commands above.\nSample --patches list for the product patches added in to the cache:\n--patches 32253037_12.2.1.4.0,32124456_12.2.1.4.0,32357288_12.2.1.4.0,32224021_12.2.1.4.0 Example buildArgs file after appending the OPatch patch and product patches:\ncreate --jdkVersion=8u281 --type wcp --version=12.2.1.4.0 --tag=oracle/wcportal:12.2.1.4 --pull --fromImage ghcr.io/oracle/oraclelinux:7-slim --additionalBuildCommands \u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleWebCenterPortal/imagetool/12.2.1.4.0/additionalBuildCmds.txt --additionalBuildFiles \u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleWebCenterPortal/dockerfiles/12.2.1.4/container-scripts --opatchBugNumber 28186730_13.9.4.2.5 --patches 32253037_12.2.1.4.0,32124456_12.2.1.4.0,32357288_12.2.1.4.0,32224021_12.2.1.4.0,31666198_12.2.1.4.0,31544353_12.2.1.4.0,31852495_12.2.1.4.0  Note: In the buildArgs file:\n --jdkVersion value must match the --version value used in the imagetool cache addInstaller command for --type jdk. --version value must match the --version value used in the imagetool cache addInstaller command for --type wcp. --pull always pulls the latest base Linux image oraclelinux:7-slim from the Docker registry. This flag can be removed if you want to use the Linux image oraclelinux:7-slim, which is already available on the host where the WCP image is created.   Refer to this page for the complete list of options available with the WebLogic Image Tool create command.\n  Create the Oracle WebCenter Portal image:\n$ imagetool @\u0026lt;absolute path to buildargs file\u0026gt;  Note: Make sure that the absolute path to the buildargs file is prepended with a @ character, as shown in the example above.\n For example:\n$ imagetool @\u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleWebCenterPortal/imagetool/12.2.1.4.0/buildArgs    Click here to see the sample Dockerfile generated with the imagetool command.    ########## BEGIN DOCKERFILE ########## # # Copyright (c) 2019, 2021, Oracle and/or its affiliates. # # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. # # FROM ghcr.io/oracle/oraclelinux:7-slim as os_update LABEL com.oracle.weblogic.imagetool.buildid=\u0026quot;dabe3ff7-ec35-4b8d-b62a-c3c02fed5571\u0026quot; USER root RUN yum -y --downloaddir=/tmp/imagetool install gzip tar unzip libaio jq hostname procps sudo zip \\ \u0026amp;\u0026amp; yum -y --downloaddir=/tmp/imagetool clean all \\ \u0026amp;\u0026amp; rm -rf /var/cache/yum/* \\ \u0026amp;\u0026amp; rm -rf /tmp/imagetool ## Create user and group RUN if [ -z \u0026quot;$(getent group oracle)\u0026quot; ]; then hash groupadd \u0026amp;\u0026gt; /dev/null \u0026amp;\u0026amp; groupadd oracle || exit -1 ; fi \\ \u0026amp;\u0026amp; if [ -z \u0026quot;$(getent passwd oracle)\u0026quot; ]; then hash useradd \u0026amp;\u0026gt; /dev/null \u0026amp;\u0026amp; useradd -g oracle oracle || exit -1; fi \\ \u0026amp;\u0026amp; mkdir -p /u01 \\ \u0026amp;\u0026amp; chown oracle:oracle /u01 \\ \u0026amp;\u0026amp; chmod 775 /u01 # Install Java FROM os_update as jdk_build LABEL com.oracle.weblogic.imagetool.buildid=\u0026quot;dabe3ff7-ec35-4b8d-b62a-c3c02fed5571\u0026quot; ENV JAVA_HOME=/u01/jdk COPY --chown=oracle:oracle jdk-8u251-linux-x64.tar.gz /tmp/imagetool/ USER oracle RUN tar xzf /tmp/imagetool/jdk-8u251-linux-x64.tar.gz -C /u01 \\ \u0026amp;\u0026amp; $(test -d /u01/jdk* \u0026amp;\u0026amp; mv /u01/jdk* /u01/jdk || mv /u01/graal* /u01/jdk) \\ \u0026amp;\u0026amp; rm -rf /tmp/imagetool \\ \u0026amp;\u0026amp; rm -f /u01/jdk/javafx-src.zip /u01/jdk/src.zip # Install Middleware FROM os_update as wls_build LABEL com.oracle.weblogic.imagetool.buildid=\u0026quot;dabe3ff7-ec35-4b8d-b62a-c3c02fed5571\u0026quot; ENV JAVA_HOME=/u01/jdk \\ ORACLE_HOME=/u01/oracle \\ OPATCH_NO_FUSER=true RUN mkdir -p /u01/oracle \\ \u0026amp;\u0026amp; mkdir -p /u01/oracle/oraInventory \\ \u0026amp;\u0026amp; chown oracle:oracle /u01/oracle/oraInventory \\ \u0026amp;\u0026amp; chown oracle:oracle /u01/oracle COPY --from=jdk_build --chown=oracle:oracle /u01/jdk /u01/jdk/ COPY --chown=oracle:oracle fmw_12.2.1.4.0_infrastructure.jar fmw.rsp /tmp/imagetool/ COPY --chown=oracle:oracle fmw_12.2.1.4.0_wcportal.jar wcp.rsp /tmp/imagetool/ COPY --chown=oracle:oracle oraInst.loc /u01/oracle/ COPY --chown=oracle:oracle p28186730_139425_Generic.zip /tmp/imagetool/opatch/ COPY --chown=oracle:oracle patches/* /tmp/imagetool/patches/ USER oracle RUN echo \u0026quot;INSTALLING MIDDLEWARE\u0026quot; \\ \u0026amp;\u0026amp; echo \u0026quot;INSTALLING fmw\u0026quot; \\ \u0026amp;\u0026amp; \\ /u01/jdk/bin/java -Xmx1024m -jar /tmp/imagetool/fmw_12.2.1.4.0_infrastructure.jar -silent ORACLE_HOME=/u01/oracle \\ -responseFile /tmp/imagetool/fmw.rsp -invPtrLoc /u01/oracle/oraInst.loc -ignoreSysPrereqs -force -novalidation \\ \u0026amp;\u0026amp; echo \u0026quot;INSTALLING wcp\u0026quot; \\ \u0026amp;\u0026amp; \\ /u01/jdk/bin/java -Xmx1024m -jar /tmp/imagetool/fmw_12.2.1.4.0_wcportal.jar -silent ORACLE_HOME=/u01/oracle \\ -responseFile /tmp/imagetool/wcp.rsp -invPtrLoc /u01/oracle/oraInst.loc -ignoreSysPrereqs -force -novalidation \\ \u0026amp;\u0026amp; chmod -R g+r /u01/oracle RUN cd /tmp/imagetool/opatch \\ \u0026amp;\u0026amp; /u01/jdk/bin/jar -xf /tmp/imagetool/opatch/p28186730_139425_Generic.zip \\ \u0026amp;\u0026amp; /u01/jdk/bin/java -jar /tmp/imagetool/opatch/6880880/opatch_generic.jar -silent -ignoreSysPrereqs -force -novalidation oracle_home=/u01/oracle # Apply all patches provided at the same time RUN /u01/oracle/OPatch/opatch napply -silent -oh /u01/oracle -phBaseDir /tmp/imagetool/patches \\ \u0026amp;\u0026amp; test $? -eq 0 \\ \u0026amp;\u0026amp; /u01/oracle/OPatch/opatch util cleanup -silent -oh /u01/oracle \\ || (cat /u01/oracle/cfgtoollogs/opatch/opatch*.log \u0026amp;\u0026amp; exit 1) FROM os_update as final_build ARG ADMIN_NAME ARG ADMIN_HOST ARG ADMIN_PORT ARG MANAGED_SERVER_PORT ENV ORACLE_HOME=/u01/oracle \\ JAVA_HOME=/u01/jdk \\ PATH=${PATH}:/u01/jdk/bin:/u01/oracle/oracle_common/common/bin:/u01/oracle/wlserver/common/bin:/u01/oracle LABEL com.oracle.weblogic.imagetool.buildid=\u0026quot;dabe3ff7-ec35-4b8d-b62a-c3c02fed5571\u0026quot; COPY --from=jdk_build --chown=oracle:oracle /u01/jdk /u01/jdk/ COPY --from=wls_build --chown=oracle:oracle /u01/oracle /u01/oracle/ USER oracle WORKDIR /u01/oracle #ENTRYPOINT /bin/bash ENV ORACLE_HOME=/u01/oracle \\ SCRIPT_FILE=/u01/oracle/container-scripts/* \\ USER_MEM_ARGS=\u0026quot;-Djava.security.egd=file:/dev/./urandom\u0026quot; \\ PATH=$PATH:/usr/java/default/bin:/u01/oracle/oracle_common/common/bin:/u01/oracle/wlserver/common/bin:/u01/oracle/container-scripts USER root RUN env \u0026amp;\u0026amp; \\ mkdir -p /u01/oracle/container-scripts \u0026amp;\u0026amp; \\ mkdir -p /u01/oracle/logs \u0026amp;\u0026amp; \\ mkdir -p /u01/esHome/esNode \u0026amp;\u0026amp; \\ chown oracle:oracle -R /u01 $VOLUME_DIR \u0026amp;\u0026amp; \\ chmod a+xr /u01 COPY --chown=oracle:oracle files/container-scripts/ /u01/oracle/container-scripts/ RUN chmod +xr $SCRIPT_FILE \u0026amp;\u0026amp; \\ rm /u01/oracle/oracle_common/lib/ons.jar /u01/oracle/oracle_common/modules/oracle.jdbc/simplefan.jar USER oracle EXPOSE $WCPORTAL_PORT $ADMIN_PORT WORKDIR ${ORACLE_HOME} CMD [\u0026quot;/u01/oracle/container-scripts/configureOrStartAdminServer.sh\u0026quot;] ########## END DOCKERFILE ##########      Check the created image using the docker images command:\n$ docker images | grep wcportal   Update an image After setting up the WebLogic Image Tool and configuring the build scripts, use the WebLogic Image Tool to update an existing Oracle WebCenter Portal Docker image:\n  Enter the following command to add the OPatch patch to the WebLogic Image Tool cache:\n$ imagetool cache addEntry --key 28186730_13.9.4.2.5 --value \u0026lt;downloaded-patches-location\u0026gt;/p28186730_139425_Generic.zip   Execute the imagetool cache addEntry command for each patch to add the required patch(es) to the WebLogic Image Tool cache. For example, to add patch p30761841_122140_Generic.zip:\n$ imagetool cache addEntry --key=32224021_12.2.1.4.0 --value \u0026lt;downloaded-patches-location\u0026gt;/p32224021_122140_Generic.zip   Provide the following arguments to the WebLogic Image Tool update command:\n –-fromImage - Identify the image that needs to be updated. In the example below, the image to be updated is oracle/wcportal:12.2.1.4. –-patches - Multiple patches can be specified as a comma-separated list. --tag - Specify the new tag to be applied for the image being built.  Refer here for the complete list of options available with the WebLogic Image Tool update command.\n Note: The WebLogic Image Tool cache should have the latest OPatch zip. The WebLogic Image Tool updates the OPatch if it is not already updated in the image.\n Examples   Click here to see the example of update command:    $ imagetool update --fromImage oracle/wcportal:12.2.1.4 --tag=wcportal:12.2.1.4-32224021 --patches=32224021_12.2.1.4.0 [INFO ] Image Tool build ID: 50f9b9aa-596c-4bae-bdff-c47c16b4c928 [INFO ] Temporary directory used for docker build context: /scratch/imagetoolcache/builddir/wlsimgbuilder_temp5130105621506307568 [INFO ] Using patch 28186730_13.9.4.2.5 from cache: /home/imagetool-setup/jars/p28186730_139425_Generic.zip [INFO ] Updating OPatch in final image from version 13.9.4.2.1 to version 13.9.4.2.5 [WARNING] Skipping patch conflict check, no support credentials provided [WARNING] No credentials provided, skipping validation of patches [INFO ] Using patch 32224021_12.2.1.4 from cache: /home/imagetool-setup/jars/p32224021_122140_Generic.zip [INFO ] docker cmd = docker build --no-cache --force-rm --tag wcportal:12.2.1.4-32224021 --build-arg http_proxy=http://\u0026lt;YOUR-COMPANY-PROXY\u0026gt; --build-arg https_proxy=http://\u0026lt;YOUR-COMPANY-PROXY\u0026gt; --build-arg no_proxy=\u0026lt;IP addresses and Domain address for no_proxy\u0026gt;,/var/run/docker.sock \u0026lt;work-directory\u0026gt;/wlstmp/wlsimgbuilder_temp5130105621506307568 Sending build context to Docker daemon 192.4MB Step 1/9 : FROM oracle/wcportal:12.2.1.4 as final_build ---\u0026gt; 5592ff7e5a02 Step 2/9 : USER root ---\u0026gt; Running in 0b3ff2600f11 Removing intermediate container 0b3ff2600f11 ---\u0026gt; faad3a32f39c Step 3/9 : ENV OPATCH_NO_FUSER=true ---\u0026gt; Running in 2beab0bfe88b Removing intermediate container 2beab0bfe88b ---\u0026gt; 6fd9e1664818 Step 4/9 : LABEL com.oracle.weblogic.imagetool.buildid=\u0026quot;50f9b9aa-596c-4bae-bdff-c47c16b4c928\u0026quot; ---\u0026gt; Running in 9a5f8fc172c9 Removing intermediate container 9a5f8fc172c9 ---\u0026gt; 499620a1f857 Step 5/9 : USER oracle ---\u0026gt; Running in fe28af056858 Removing intermediate container fe28af056858 ---\u0026gt; 3507971c35d5 Step 6/9 : COPY --chown=oracle:oracle p28186730_139425_Generic.zip /tmp/imagetool/opatch/ ---\u0026gt; c44c3c7b17f7 Step 7/9 : RUN cd /tmp/imagetool/opatch \u0026amp;\u0026amp; /u01/jdk/bin/jar -xf /tmp/imagetool/opatch/p28186730_139425_Generic.zip \u0026amp;\u0026amp; /u01/jdk/bin/java -jar /tmp/imagetool/opatch/6880880/opatch_generic.jar -silent -ignoreSysPrereqs -force -novalidation oracle_home=/u01/oracle \u0026amp;\u0026amp; rm -rf /tmp/imagetool ---\u0026gt; Running in 8380260fe62d Launcher log file is /tmp/OraInstall2021-04-08_05-18-14AM/launcher2021-04-08_05-18-14AM.log. Extracting the installer . . . . Done Checking if CPU speed is above 300 MHz. Actual 2195.098 MHz Passed Checking swap space: must be greater than 512 MB. Actual 14999 MB Passed Checking if this platform requires a 64-bit JVM. Actual 64 Passed (64-bit not required) Checking temp space: must be greater than 300 MB. Actual 152772 MB Passed Preparing to launch the Oracle Universal Installer from /tmp/OraInstall2021-04-08_05-18-14AM Installation Summary Disk Space : Required 34 MB, Available 152,736 MB Feature Sets to Install: Next Generation Install Core 13.9.4.0.1 OPatch 13.9.4.2.5 OPatch Auto OPlan 13.9.4.2.5 Session log file is /tmp/OraInstall2021-04-08_05-18-14AM/install2021-04-08_05-18-14AM.log Loading products list. Please wait. 1% 40% Loading products. Please wait. 98% 99% Updating Libraries Starting Installations 1% 94% 95% 96% Install pending Installation in progress Component : oracle.glcm.logging 1.6.4.0.0 Copying files for oracle.glcm.logging 1.6.4.0.0 Component : oracle.glcm.comdev 7.8.4.0.0 Copying files for oracle.glcm.comdev 7.8.4.0.0 Component : oracle.glcm.dependency 1.8.4.0.0 Copying files for oracle.glcm.dependency 1.8.4.0.0 Component : oracle.glcm.xmldh 3.4.4.0.0 Copying files for oracle.glcm.xmldh 3.4.4.0.0 Component : oracle.glcm.wizard 7.8.4.0.0 Copying files for oracle.glcm.wizard 7.8.4.0.0 Component : oracle.glcm.opatch.common.api 13.9.4.0.0 Copying files for oracle.glcm.opatch.common.api 13.9.4.0.0 Component : oracle.nginst.common 13.9.4.0.0 Copying files for oracle.nginst.common 13.9.4.0.0 Component : oracle.nginst.core 13.9.4.0.0 Copying files for oracle.nginst.core 13.9.4.0.0 Component : oracle.glcm.encryption 2.7.4.0.0 Copying files for oracle.glcm.encryption 2.7.4.0.0 Component : oracle.swd.opatch 13.9.4.2.5 Copying files for oracle.swd.opatch 13.9.4.2.5 Component : oracle.glcm.osys.core 13.9.1.0.0 Copying files for oracle.glcm.osys.core 13.9.1.0.0 Component : oracle.glcm.oplan.core 13.9.4.2.0 Copying files for oracle.glcm.oplan.core 13.9.4.2.0 Install successful Post feature install pending Post Feature installing Feature Set : glcm_common_lib Feature Set : glcm_common_logging_lib Post Feature installing glcm_common_lib Post Feature installing glcm_common_logging_lib Feature Set : commons-cli_1.3.1.0.0 Post Feature installing commons-cli_1.3.1.0.0 Feature Set : oracle.glcm.opatch.common.api.classpath Post Feature installing oracle.glcm.opatch.common.api.classpath Feature Set : glcm_encryption_lib Post Feature installing glcm_encryption_lib Feature Set : oracle.glcm.osys.core.classpath Post Feature installing oracle.glcm.osys.core.classpath Feature Set : oracle.glcm.oplan.core.classpath Post Feature installing oracle.glcm.oplan.core.classpath Feature Set : oracle.glcm.opatchauto.core.classpath Post Feature installing oracle.glcm.opatchauto.core.classpath Feature Set : oracle.glcm.opatchauto.core.binary.classpath Post Feature installing oracle.glcm.opatchauto.core.binary.classpath Feature Set : oracle.glcm.opatchauto.core.actions.classpath Post Feature installing oracle.glcm.opatchauto.core.actions.classpath Feature Set : oracle.glcm.opatchauto.core.wallet.classpath Post Feature installing oracle.glcm.opatchauto.core.wallet.classpath Post feature install complete String substitutions pending String substituting Component : oracle.glcm.logging 1.6.4.0.0 String substituting oracle.glcm.logging 1.6.4.0.0 Component : oracle.glcm.comdev 7.8.4.0.0 String substituting oracle.glcm.comdev 7.8.4.0.0 Component : oracle.glcm.dependency 1.8.4.0.0 String substituting oracle.glcm.dependency 1.8.4.0.0 Component : oracle.glcm.xmldh 3.4.4.0.0 String substituting oracle.glcm.xmldh 3.4.4.0.0 Component : oracle.glcm.wizard 7.8.4.0.0 String substituting oracle.glcm.wizard 7.8.4.0.0 Component : oracle.glcm.opatch.common.api 13.9.4.0.0 String substituting oracle.glcm.opatch.common.api 13.9.4.0.0 Component : oracle.nginst.common 13.9.4.0.0 String substituting oracle.nginst.common 13.9.4.0.0 Component : oracle.nginst.core 13.9.4.0.0 String substituting oracle.nginst.core 13.9.4.0.0 Component : oracle.glcm.encryption 2.7.4.0.0 String substituting oracle.glcm.encryption 2.7.4.0.0 Component : oracle.swd.opatch 13.9.4.2.5 String substituting oracle.swd.opatch 13.9.4.2.5 Component : oracle.glcm.osys.core 13.9.1.0.0 String substituting oracle.glcm.osys.core 13.9.1.0.0 Component : oracle.glcm.oplan.core 13.9.4.2.0 String substituting oracle.glcm.oplan.core 13.9.4.2.0 String substitutions complete Link pending Linking in progress Component : oracle.glcm.logging 1.6.4.0.0 Linking oracle.glcm.logging 1.6.4.0.0 Component : oracle.glcm.comdev 7.8.4.0.0 Linking oracle.glcm.comdev 7.8.4.0.0 Component : oracle.glcm.dependency 1.8.4.0.0 Linking oracle.glcm.dependency 1.8.4.0.0 Component : oracle.glcm.xmldh 3.4.4.0.0 Linking oracle.glcm.xmldh 3.4.4.0.0 Component : oracle.glcm.wizard 7.8.4.0.0 Linking oracle.glcm.wizard 7.8.4.0.0 Component : oracle.glcm.opatch.common.api 13.9.4.0.0 Linking oracle.glcm.opatch.common.api 13.9.4.0.0 Component : oracle.nginst.common 13.9.4.0.0 Linking oracle.nginst.common 13.9.4.0.0 Component : oracle.nginst.core 13.9.4.0.0 Linking oracle.nginst.core 13.9.4.0.0 Component : oracle.glcm.encryption 2.7.4.0.0 Linking oracle.glcm.encryption 2.7.4.0.0 Component : oracle.swd.opatch 13.9.4.2.5 Linking oracle.swd.opatch 13.9.4.2.5 Component : oracle.glcm.osys.core 13.9.1.0.0 Linking oracle.glcm.osys.core 13.9.1.0.0 Component : oracle.glcm.oplan.core 13.9.4.2.0 Linking oracle.glcm.oplan.core 13.9.4.2.0 Linking in progress Link successful Setup pending Setup in progress Component : oracle.glcm.logging 1.6.4.0.0 Setting up oracle.glcm.logging 1.6.4.0.0 Component : oracle.glcm.comdev 7.8.4.0.0 Setting up oracle.glcm.comdev 7.8.4.0.0 Component : oracle.glcm.dependency 1.8.4.0.0 Setting up oracle.glcm.dependency 1.8.4.0.0 Component : oracle.glcm.xmldh 3.4.4.0.0 Setting up oracle.glcm.xmldh 3.4.4.0.0 Component : oracle.glcm.wizard 7.8.4.0.0 Setting up oracle.glcm.wizard 7.8.4.0.0 Component : oracle.glcm.opatch.common.api 13.9.4.0.0 Setting up oracle.glcm.opatch.common.api 13.9.4.0.0 Component : oracle.nginst.common 13.9.4.0.0 Setting up oracle.nginst.common 13.9.4.0.0 Component : oracle.nginst.core 13.9.4.0.0 Setting up oracle.nginst.core 13.9.4.0.0 Component : oracle.glcm.encryption 2.7.4.0.0 Setting up oracle.glcm.encryption 2.7.4.0.0 Component : oracle.swd.opatch 13.9.4.2.5 Setting up oracle.swd.opatch 13.9.4.2.5 Component : oracle.glcm.osys.core 13.9.1.0.0 Setting up oracle.glcm.osys.core 13.9.1.0.0 Component : oracle.glcm.oplan.core 13.9.4.2.0 Setting up oracle.glcm.oplan.core 13.9.4.2.0 Setup successful Save inventory pending Saving inventory 97% Saving inventory complete 98% Configuration complete Component : glcm_common_logging_lib Saving the inventory glcm_common_logging_lib Component : glcm_encryption_lib Component : oracle.glcm.opatch.common.api.classpath Saving the inventory oracle.glcm.opatch.common.api.classpath Saving the inventory glcm_encryption_lib Component : cieCfg_common_rcu_lib Component : glcm_common_lib Saving the inventory cieCfg_common_rcu_lib Saving the inventory glcm_common_lib Component : oracle.glcm.logging Saving the inventory oracle.glcm.logging Component : cieCfg_common_lib Saving the inventory cieCfg_common_lib Component : svctbl_lib Saving the inventory svctbl_lib Component : com.bea.core.binxml_dependencies Saving the inventory com.bea.core.binxml_dependencies Component : svctbl_jmx_client Saving the inventory svctbl_jmx_client Component : cieCfg_wls_shared_lib Saving the inventory cieCfg_wls_shared_lib Component : rcuapi_lib Saving the inventory rcuapi_lib Component : rcu_core_lib Saving the inventory rcu_core_lib Component : cieCfg_wls_lib Saving the inventory cieCfg_wls_lib Component : cieCfg_wls_external_lib Saving the inventory cieCfg_wls_external_lib Component : cieCfg_wls_impl_lib Saving the inventory cieCfg_wls_impl_lib Component : rcu_dependencies_lib Saving the inventory rcu_dependencies_lib Component : oracle.fmwplatform.fmwprov_lib Saving the inventory oracle.fmwplatform.fmwprov_lib Component : fmwplatform-wlst-dependencies Saving the inventory fmwplatform-wlst-dependencies Component : oracle.fmwplatform.ocp_lib Saving the inventory oracle.fmwplatform.ocp_lib Component : oracle.fmwplatform.ocp_plugin_lib Saving the inventory oracle.fmwplatform.ocp_plugin_lib Component : wlst.wls.classpath Saving the inventory wlst.wls.classpath Component : maven.wls.classpath Saving the inventory maven.wls.classpath Component : com.oracle.webservices.fmw.ws-assembler Saving the inventory com.oracle.webservices.fmw.ws-assembler Component : sdpmessaging_dependencies Saving the inventory sdpmessaging_dependencies Component : sdpclient_dependencies Saving the inventory sdpclient_dependencies Component : com.oracle.jersey.fmw.client Saving the inventory com.oracle.jersey.fmw.client Component : com.oracle.webservices.fmw.client Saving the inventory com.oracle.webservices.fmw.client Component : oracle.jrf.wls.classpath Saving the inventory oracle.jrf.wls.classpath Component : oracle.jrf.wlst Saving the inventory oracle.jrf.wlst Component : fmwshare-wlst-dependencies Saving the inventory fmwshare-wlst-dependencies Component : oracle.fmwshare.pyjar Saving the inventory oracle.fmwshare.pyjar Component : com.oracle.webservices.wls.jaxws-owsm-client Saving the inventory com.oracle.webservices.wls.jaxws-owsm-client Component : glcm_common_logging_lib Component : glcm_common_lib Saving the inventory glcm_common_lib Component : glcm_encryption_lib Saving the inventory glcm_encryption_lib Component : oracle.glcm.opatch.common.api.classpath Saving the inventory oracle.glcm.opatch.common.api.classpath Component : cieCfg_common_rcu_lib Saving the inventory cieCfg_common_rcu_lib Saving the inventory glcm_common_logging_lib Component : oracle.glcm.logging Saving the inventory oracle.glcm.logging Component : cieCfg_common_lib Saving the inventory cieCfg_common_lib Component : svctbl_lib Saving the inventory svctbl_lib Component : com.bea.core.binxml_dependencies Saving the inventory com.bea.core.binxml_dependencies Component : svctbl_jmx_client Saving the inventory svctbl_jmx_client Component : cieCfg_wls_shared_lib Saving the inventory cieCfg_wls_shared_lib Component : rcuapi_lib Saving the inventory rcuapi_lib Component : rcu_core_lib Saving the inventory rcu_core_lib Component : cieCfg_wls_lib Saving the inventory cieCfg_wls_lib Component : cieCfg_wls_external_lib Saving the inventory cieCfg_wls_external_lib Component : cieCfg_wls_impl_lib Saving the inventory cieCfg_wls_impl_lib Component : soa_com.bea.core.binxml_dependencies Saving the inventory soa_com.bea.core.binxml_dependencies Component : glcm_common_logging_lib Saving the inventory glcm_common_logging_lib Component : glcm_common_lib Saving the inventory glcm_common_lib Component : glcm_encryption_lib Saving the inventory glcm_encryption_lib Component : oracle.glcm.opatch.common.api.classpath Component : oracle.glcm.oplan.core.classpath Saving the inventory oracle.glcm.oplan.core.classpath Saving the inventory oracle.glcm.opatch.common.api.classpath The install operation completed successfully. Logs successfully copied to /u01/oracle/.inventory/logs. Removing intermediate container 8380260fe62d ---\u0026gt; d57be7ffa162 Step 8/9 : COPY --chown=oracle:oracle patches/* /tmp/imagetool/patches/ ---\u0026gt; dd421aae5aaf Step 9/9 : RUN /u01/oracle/OPatch/opatch napply -silent -oh /u01/oracle -phBaseDir /tmp/imagetool/patches \u0026amp;\u0026amp; test $? -eq 0 \u0026amp;\u0026amp; /u01/oracle/OPatch/opatch util cleanup -silent -oh /u01/oracle || (cat /u01/oracle/cfgtoollogs/opatch/opatch*.log \u0026amp;\u0026amp; exit 1) ---\u0026gt; Running in 323e7ae70339 Oracle Interim Patch Installer version 13.9.4.2.5 Copyright (c) 2021, Oracle Corporation. All rights reserved. Oracle Home : /u01/oracle Central Inventory : /u01/oracle/.inventory from : /u01/oracle/oraInst.loc OPatch version : 13.9.4.2.5 OUI version : 13.9.4.0.0 Log file location : /u01/oracle/cfgtoollogs/opatch/opatch2021-04-08_05-20-25AM_1.log OPatch detects the Middleware Home as \u0026quot;/u01/oracle\u0026quot; Verifying environment and performing prerequisite checks... OPatch continues with these patches: 32224021 Do you want to proceed? [y|n] Y (auto-answered by -silent) User Responded with: Y All checks passed. Please shutdown Oracle instances running out of this ORACLE_HOME on the local system. (Oracle Home = '/u01/oracle') Is the local system ready for patching? [y|n] Y (auto-answered by -silent) User Responded with: Y Backing up files... Applying interim patch '32224021' to OH '/u01/oracle' ApplySession: Optional component(s) [ oracle.webcenter.sca, 12.2.1.4.0 ] , [ oracle.webcenter.sca, 12.2.1.4.0 ] , [ oracle.webcenter.ucm, 12.2.1.4.0 ] , [ oracle.webcenter.ucm, 12.2.1.4.0 ] not present in the Oracle Home or a higher version is found. Patching component oracle.webcenter.portal, 12.2.1.4... Patching component oracle.webcenter.portal, 12.2.1.4... Patching component oracle.rcu.webcenter.portal, 12.2.1.0... Patching component oracle.rcu.webcenter.portal, 12.2.1.0... Patch 32224021 successfully applied. Log file location: /u01/oracle/cfgtoollogs/opatch/opatch2021-04-08_05-20-25AM_1.log OPatch succeeded. Oracle Interim Patch Installer version 13.9.4.2.5 Copyright (c) 2021, Oracle Corporation. All rights reserved. Oracle Home : /u01/oracle Central Inventory : /u01/oracle/.inventory from : /u01/oracle/oraInst.loc OPatch version : 13.9.4.2.5 OUI version : 13.9.4.0.0 Log file location : /u01/oracle/cfgtoollogs/opatch/opatch2021-04-08_05-27-11AM_1.log OPatch detects the Middleware Home as \u0026quot;/u01/oracle\u0026quot; Invoking utility \u0026quot;cleanup\u0026quot; OPatch will clean up 'restore.sh,make.txt' files and 'scratch,backup' directories. You will be still able to rollback patches after this cleanup. Do you want to proceed? [y|n] Y (auto-answered by -silent) User Responded with: Y Backup area for restore has been cleaned up. For a complete list of files/directories deleted, Please refer log file. OPatch succeeded. Removing intermediate container 323e7ae70339 ---\u0026gt; 0e7c514dcf7b Successfully built 0e7c514dcf7b Successfully tagged wcportal:12.2.1.4-32224021 [INFO ] Build successful. Build time=645s. Image tag=wcportal:12.2.1.4-32224021      Click here to see the example Dockerfile generated by the WebLogic Image Tool with the --dryRun option:    $ imagetool update --fromImage oracle/wcportal:12.2.1.4 --tag=wcportal:12.2.1.4-30761841 --patches=30761841_12.2.1.4.0 --dryRun [INFO ] Image Tool build ID: a473ba32-84b6-4374-9425-9e92ac90ee87 [INFO ] Temporary directory used for docker build context: /scratch/imagetoolcache/builddir/wlsimgbuilder_temp874401188519547557 [INFO ] Using patch 28186730_13.9.4.2.5 from cache: /home/imagetool-setup/jars/p28186730_139425_Generic.zip [INFO ] Updating OPatch in final image from version 13.9.4.2.1 to version 13.9.4.2.5 [WARNING] Skipping patch conflict check, no support credentials provided [WARNING] No credentials provided, skipping validation of patches [INFO ] Using patch 32224021_12.2.1.4 from cache: /home/imagetool-setup/jars/p32224021_122140_Generic.zip [INFO ] docker cmd = docker build --no-cache --force-rm --tag wcportal:12.2.1.4-32224021 --build-arg http_proxy=http://\u0026lt;YOUR-COMPANY-PROXY\u0026gt; --build-arg https_proxy=http://\u0026lt;YOUR-COMPANY-PROXY\u0026gt; --build-arg no_proxy=\u0026lt;IP addresses and Domain address for no_proxy\u0026gt;,/var/run/docker.sock \u0026lt;work-directory\u0026gt;/wlstmp/wlsimgbuilder_temp874401188519547557 ########## BEGIN DOCKERFILE ########## # # Copyright (c) 2019, 2021, Oracle and/or its affiliates. # # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. # # FROM oracle/wcportal:12.2.1.4 as final_build USER root ENV OPATCH_NO_FUSER=true LABEL com.oracle.weblogic.imagetool.buildid=\u0026quot;a473ba32-84b6-4374-9425-9e92ac90ee87\u0026quot; USER oracle COPY --chown=oracle:oracle p28186730_139425_Generic.zip /tmp/imagetool/opatch/ RUN cd /tmp/imagetool/opatch \\ \u0026amp;\u0026amp; /u01/jdk/bin/jar -xf /tmp/imagetool/opatch/p28186730_139425_Generic.zip \\ \u0026amp;\u0026amp; /u01/jdk/bin/java -jar /tmp/imagetool/opatch/6880880/opatch_generic.jar -silent -ignoreSysPrereqs -force -novalidation oracle_home=/u01/oracle \\ \u0026amp;\u0026amp; rm -rf /tmp/imagetool COPY --chown=oracle:oracle patches/* /tmp/imagetool/patches/ # Apply all patches provided at the same time RUN /u01/oracle/OPatch/opatch napply -silent -oh /u01/oracle -phBaseDir /tmp/imagetool/patches \\ \u0026amp;\u0026amp; test $? -eq 0 \\ \u0026amp;\u0026amp; /u01/oracle/OPatch/opatch util cleanup -silent -oh /u01/oracle \\ || (cat /u01/oracle/cfgtoollogs/opatch/opatch*.log \u0026amp;\u0026amp; exit 1) ########## END DOCKERFILE ##########      Check the built image using the docker images command:\n$ docker images | grep wcportal wcportal 12.2.1.4-30761841 2ef2a67a685b About a minute ago 3.58GB $   Create an Oracle WebCenter Portal Docker image using Dockerfile For test and development purposes, you can create an Oracle WebCenter Portal image using the Dockerfile. Consult the README file for important prerequisite steps, such as building or pulling the Server JRE Docker image, Oracle Fusion Middleware Infrastructure Docker image and downloading the Oracle WebCenter Portal installer and bundle patch binaries.\nA prebuilt Oracle Fusion Middleware Infrastructure image, container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4, is available at container-registry.oracle.com. We recommend that you pull and rename this image to build the Oracle WebCenter Portal image.\n$ docker pull container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4 $ docker tag container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4 oracle/fmw-infrastructure:12.2.1.4 To build an Oracle Fusion Middleware Infrastructure image and on top of that the Oracle WebCenter Portal image as a layer, follow these steps:\n  Make a local clone of the sample repository:\n$ git clone https://github.com/oracle/docker-images   Download the Oracle WebCenter Portal installer from the Oracle Technology Network or e-delivery.\n Note: Copy the installer binaries to the same location as the Dockerfile.\n   Create the Oracle WebCenter Portal image by running the provided script:\n$ cd docker-images/OracleWebCenterPortal/dockerfiles $ ./buildDockerImage.sh -v 12.2.1.4 -s The image produced is named oracle/wcportal:12.2.1.4. The samples and instructions assume the Oracle WebCenter Portal image is named oracle/wcportal:12.2.1.4. You must rename your image to match this name, or update the samples to refer to the image you created.\n  "
},
{
	"uri": "/fmw-kubernetes/soa-domains/",
	"title": "Oracle SOA Suite",
	"tags": [],
	"description": "The Oracle WebLogic Kubernetes Operator (the “operator”) supports deployment of Oracle SOA Suite components such as Oracle Service-Oriented Architecture (SOA), Oracle Service Bus, and Oracle Enterprise Scheduler (ESS). Follow the instructions in this guide to set up these Oracle SOA Suite domains on Kubernetes.",
	"content": "The WebLogic Kubernetes Operator (the “operator”) supports deployment of Oracle SOA Suite components such as Oracle Service-Oriented Architecture (SOA), Oracle Service Bus, and Oracle Enterprise Scheduler (ESS). Currently the operator supports these domain types:\n soa : Deploys a SOA domain with Oracle Enterprise Scheduler (ESS) osb : Deploys an Oracle Service Bus domain soaosb : Deploys a domain with SOA, Oracle Service Bus, and Oracle Enterprise Scheduler (ESS)  In this release, Oracle SOA Suite domains are supported using the “domain on a persistent volume” model only, where the domain home is located in a persistent volume (PV).\nThe operator has several key features to assist you with deploying and managing Oracle SOA Suite domains in a Kubernetes environment. You can:\n Create Oracle SOA Suite instances in a Kubernetes persistent volume (PV). This PV can reside in an NFS file system or other Kubernetes volume types. Start servers based on declarative startup parameters and desired states. Expose the Oracle SOA Suite services and composites for external access. Scale Oracle SOA Suite domains by starting and stopping Managed Servers on demand, or by integrating with a REST API. Publish operator and WebLogic Server logs to Elasticsearch and interact with them in Kibana. Monitor the Oracle SOA Suite instance using Prometheus and Grafana.  Current production release The current production release for the Oracle SOA Suite domains deployment on Kubernetes is 25.1.2. This release uses the WebLogic Kubernetes Operator version 4.2.13.\nRecent changes and known issues See the Release Notes for recent changes and known issues for Oracle SOA Suite domains deployment on Kubernetes.\nPricing and licensing See here for pricing and licensing details.\nLimitations See here for limitations in this release.\nAbout this documentation This documentation includes sections targeted to different audiences. To help you find what you are looking for more easily, please consult this table of contents:\n  Quick Start explains how to quickly get an Oracle SOA Suite domain instance running using default settings. Note that this is only for development and test purposes.\n  Install Guide and Administration Guide provide detailed information about all aspects of using the Kubernetes operator including:\n Installing and configuring the operator. Using the operator to create and manage Oracle SOA Suite domains. Configuring Kubernetes load balancers. Configuring custom SSL certificates. Configuring Elasticsearch and Kibana to access the operator and WebLogic Server log files. Deploying composite applications for Oracle SOA Suite and Oracle Service Bus. Patching an Oracle SOA Suite Docker image. Removing domains. And much more!    Enterprise Deployment Guide (preview release) provides information on the topology and set up steps for Oracle SOA Suite Enterprise Deployment on Kubernetes.\n  Documentation for earlier releases To view documentation for an earlier release, see:\n Version 24.4.2 Version 24.3.2 Version 24.2.2 Version 24.1.2 Version 23.4.2 Version 23.3.2 Version 23.2.2 Version 23.1.2 Version 22.4.2 Version 22.3.2 Version 22.2.2 Version 22.1.2 Version 21.4.2 Version 21.3.2 Version 21.2.2 Version 21.1.2 Version 20.4.2 Version 20.3.3  Additional reading Oracle SOA Suite domains deployment on Kubernetes leverages the WebLogic Kubernetes Operator framework.\n To develop an understanding of the operator, including design, architecture, domain life cycle management, and configuration overrides, review the operator documentation. To learn more about the Oracle SOA Suite architecture and components, see Understanding Oracle SOA Suite. To review the known issues and common questions for Oracle SOA Suite domains deployment on Kubernetes, see the frequently asked questions.  "
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/manage-wcportal-domains/configure-load-balancer/apachewebtier/",
	"title": "Apache webtier",
	"tags": [],
	"description": "Configure the Apache webtier load balancer for an Oracle WebCenter Portal domain.",
	"content": "To load balance Oracle WebCenter Portal domain clusters, you can install Apache webtier and configure it for non-SSL and SSL termination access of the application URL. Follow these steps to set up Apache webtier as a load balancer for an Oracle WebCenter Portal domain in a Kubernetes cluster:\n Build the Apache webtier image Create the Apache plugin configuration file Prepare the certificate and private key Install the Apache webtier Helm chart Verify domain application URL access Uninstall Apache webtier  Build the Apache webtier image To build the Apache webtier Docker image, refer to the sample.\nCreate the Apache plugin configuration file  The configuration file named custom_mod_wl_apache.conf should have all the URL routing rules for the Oracle WebCenter Portal applications deployed in the domain that needs to be accessible externally. Update this file with values based on your environment. The file content is similar to below.    Click here to see the sample content of the configuration file custom_mod_wl_apache.conf for wcp-domain domain   $ cat ${WORKDIR}/charts/apache-samples/custom-sample/custom_mod_wl_apache.conf #Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved. # # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. # \u0026lt;IfModule mod_weblogic.c\u0026gt; WebLogicHost \u0026lt;WEBLOGIC_HOST\u0026gt; WebLogicPort 7001 \u0026lt;/IfModule\u0026gt; # Directive for weblogic admin Console deployed on Weblogic Admin Server \u0026lt;Location /console\u0026gt; SetHandler weblogic-handler WebLogicHost wcp-domain-adminserver WebLogicPort 7001 \u0026lt;/Location\u0026gt; \u0026lt;Location /em\u0026gt; SetHandler weblogic-handler WebLogicHost wcp-domain-adminserver WebLogicPort 7001 \u0026lt;/Location\u0026gt; \u0026lt;Location /webcenter\u0026gt; WLSRequest On WebLogicCluster wcp-domain-cluster-wcp-cluster:8888 PathTrim /weblogic1 \u0026lt;/Location\u0026gt; \u0026lt;Location /rsscrawl\u0026gt; WLSRequest On WebLogicCluster wcp-domain-cluster-wcp-cluster:8888 PathTrim /weblogic1 \u0026lt;/Location\u0026gt; \u0026lt;Location /rest\u0026gt; WLSRequest On WebLogicCluster wcp-domain-cluster-wcp-cluster:8888 PathTrim /weblogic1 \u0026lt;/Location\u0026gt; \u0026lt;Location /webcenterhelp\u0026gt; WLSRequest On WebLogicCluster wcp-domain-cluster-wcp-cluster:8888 PathTrim /weblogic1 \u0026lt;/Location\u0026gt; \u0026lt;Location /wsrp-tools\u0026gt; WLSRequest On WebLogicCluster wcp-domain-cluster-wcportlet-cluster:8889 PathTrim /weblogic1 \u0026lt;/Location\u0026gt; \u0026lt;Location /portalTools\u0026gt; WLSRequest On WebLogicCluster wcp-domain-cluster-wcportlet-cluster:8889 PathTrim /weblogic1 \u0026lt;/Location\u0026gt;     Update persistentVolumeClaimName in ${WORKDIR}/charts/apache-samples/custom-sample/input.yamlwith Persistence Volume which contains your own custom_mod_wl_apache.conf file. Use the PV/PVC created at the time of preparing environment, Copy the custom_mod_wl_apache.conf file to existing PersistantVolume.  Prepare the certificate and private key   (For the SSL termination configuration only) Run the following commands to generate your own certificate and private key using openssl.\n$ cd ${WORKDIR}/charts/apache-samples/custom-sample $ export VIRTUAL_HOST_NAME=WEBLOGIC_HOST $ export SSL_CERT_FILE=WEBLOGIC_HOST.crt $ export SSL_CERT_KEY_FILE=WEBLOGIC_HOST.key $ sh certgen.sh  NOTE: Replace WEBLOGIC_HOST with the name of the host on which Apache webtier is to be installed.\n   Click here to see the output of the certifcate generation   $ls certgen.sh custom_mod_wl_apache.conf custom_mod_wl_apache.conf_orig input.yaml README.md $ sh certgen.sh Generating certs for WEBLOGIC_HOST Generating a 2048 bit RSA private key ........................+++ .......................................................................+++ unable to write \u0026#39;random state\u0026#39; writing new private key to \u0026#39;apache-sample.key\u0026#39; ----- $ ls certgen.sh custom_mod_wl_apache.conf_orig WEBLOGIC_HOST.info config.txt input.yaml WEBLOGIC_HOST.key custom_mod_wl_apache.conf WEBLOGIC_HOST.crt README.md      Prepare input values for the Apache webtier Helm chart.\nRun the following commands to prepare the input value file for the Apache webtier Helm chart.\n$ base64 -i ${SSL_CERT_FILE} | tr -d \u0026#39;\\n\u0026#39; $ base64 -i ${SSL_CERT_KEY_FILE} | tr -d \u0026#39;\\n\u0026#39; $ touch input.yaml Update virtualHostName with the value of the WEBLOGIC_HOST in file ${WORKDIR}/charts/apache-samples/custom-sample/input.yaml\n  Click here to see the snapshot of the sample input.yaml file   $ cat apache-samples/custom-sample/input.yaml # Use this to provide your own Apache webtier configuration as needed; simply define this # path and put your own custom_mod_wl_apache.conf file under this path. persistentVolumeClaimName: wcp-domain-domain-pvc # The VirtualHostName of the Apache HTTP server. It is used to enable custom SSL configuration. virtualHostName: \u0026lt;WEBLOGIC_HOST\u0026gt;      Install the Apache webtier Helm chart   Install the Apache webtier Helm chart to the domain wcpns namespace with the specified input parameters:\n$ cd ${WORKDIR}/charts $ kubectl create namespace apache-webtier $ helm install apache-webtier --values apache-samples/custom-sample/input.yaml --namespace wcpns apache-webtier --set image=oracle/apache:12.2.1.3   Check the status of the Apache webtier:\n$ kubectl get all -n wcpns | grep apache Sample output of the status of the apache webtier:\npod/apache-webtier-apache-webtier-65f69dc6bc-zg5pj 1/1 Running 0 22h service/apache-webtier-apache-webtier NodePort 10.108.29.98 \u0026lt;none\u0026gt; 80:30305/TCP,4433:30443/TCP 22h deployment.apps/apache-webtier-apache-webtier 1/1 1 1 22h replicaset.apps/apache-webtier-apache-webtier-65f69dc6bc 1 1 1 22h   Verify domain application URL access Once the Apache webtier load balancer is up, verify that the domain applications are accessible through the load balancer port 30305/30443. The application URLs for domain of type wcp are:\n Note: Port 30305 is the LOADBALANCER-Non-SSLPORT and Port 30443 is LOADBALANCER-SSLPORT.\n Non-SSL configuration http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/console http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/em http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/webcenter http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/webcenterhelp http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/rest http://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-Non-SSLPORT}/rsscrawl SSL configuration https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/webcenter https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/console https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/em https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/rsscrawl https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/webcenterhelp https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-SSLPORT}/rest Uninstall Apache webtier $ helm delete apache-webtier -n wcpns "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/adminguide/elasticsearch-integration/",
	"title": "Elasticsearch integration for logs",
	"tags": [],
	"description": "Monitor an Oracle WebCenter Sites domain and publish the WebLogic Server logs to Elasticsearch.",
	"content": "1. Integrate Elasticsearch to WebLogic Kubernetes Operator For reference information, see Elasticsearch integration for the WebLogic Kubernetes Operator.\nTo enable elasticsearch integration, you must edit file kubernetes/charts/weblogic-operator/values.yaml before deploying the WebLogic Kubernetes Operator.\n# elkIntegrationEnabled specifies whether or not ELK integration is enabled. elkIntegrationEnabled: true # logStashImage specifies the Docker image containing logstash. # This parameter is ignored if 'elkIntegrationEnabled' is false. logStashImage: \u0026quot;logstash:6.6.0\u0026quot; # elasticSearchHost specifies the hostname of where Elasticsearch is running. # This parameter is ignored if 'elkIntegrationEnabled' is false. elasticSearchHost: \u0026quot;elasticsearch.default.svc.cluster.local\u0026quot; # elasticSearchPort specifies the port number of where Elasticsearch is running. # This parameter is ignored if 'elkIntegrationEnabled' is false. elasticSearchPort: 9200\rAfter you\u0026rsquo;ve deployed WebLogic Kubernetes Operator and made the above changes, the weblogic-operator pod will have additional Logstash container. The Logstash container will push the weblogic-operator logs to the configured Elasticsearch server.\n2. Publish WebLogic Server and WebCenter Sites Logs using Logstash Pod You can publish the WebLogic Server logs to Elasticsearch Server using Logstash pod. This Logstash pod must have access to the shared domain home. For the WebCenter Sites wcsitesinfra, you can use the persistent volume of the domain home in the Logstash pod. The steps to create the Logstash pod are as follows:\nSample Logstash configuration file is located at kubernetes/create-wcsites-domain/utils/logstash/logstash.conf\n$ vi kubernetes/create-wcsites-domain/utils/logstash/logstash.conf input {\rfile {\rpath =\u0026gt; \u0026quot;/u01/oracle/user_projects/logs/wcsitesinfra/adminserver.log\u0026quot;\rstart_position =\u0026gt; beginning\r}\rfile {\rpath =\u0026gt; \u0026quot;/u01/oracle/user_projects/logs/wcsitesinfra/wcsites-server*.log\u0026quot;\rstart_position =\u0026gt; beginning\r}\rfile {\rpath =\u0026gt; \u0026quot;/u01/oracle/user_projects/logs/wcsitesinfra/adminserver.out\u0026quot;\rstart_position =\u0026gt; beginning\r}\rfile {\rpath =\u0026gt; \u0026quot;/u01/oracle/user_projects/logs/wcsitesinfra/wcsites-server*.out\u0026quot;\rstart_position =\u0026gt; beginning\r}\rfile {\rpath =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/wcsitesinfra/servers/**/logs/sites.log\u0026quot;\rstart_position =\u0026gt; beginning\r}\rfile {\rpath =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/wcsitesinfra/servers/**/logs/cas.log\u0026quot;\rstart_position =\u0026gt; beginning\r}\r}\rfilter {\rgrok {\rmatch =\u0026gt; [ \u0026quot;message\u0026quot;, \u0026quot;\u0026lt;%{DATA:log_timestamp}\u0026gt; \u0026lt;%{WORD:log_level}\u0026gt; \u0026lt;%{WORD:thread}\u0026gt; \u0026lt;%{HOSTNAME:hostname}\u0026gt; \u0026lt;%{HOSTNAME:servername}\u0026gt; \u0026lt;%{DATA:timer}\u0026gt; \u0026lt;\u0026lt;%{DATA:kernel}\u0026gt;\u0026gt; \u0026lt;\u0026gt; \u0026lt;%{DATA:uuid}\u0026gt; \u0026lt;%{NUMBER:timestamp}\u0026gt; \u0026lt;%{DATA:misc}\u0026gt; \u0026lt;%{DATA:log_number}\u0026gt; \u0026lt;%{DATA:log_message}\u0026gt;\u0026quot; ]\r}\r}\routput {\relasticsearch {\rhosts =\u0026gt; [\u0026quot;elasticsearch.default.svc.cluster.local:9200\u0026quot;]\r}\r}\rHere ** means that all sites.log and cas.log from any servers under wcsitesinfra will be pushed to Logstash.\n$ kubectl cp kubernetes/create-wcsites-domain/utils/logstash/logstash.conf wcsites-ns/wcsitesinfra-adminserver:/u01/oracle/user_projects/logs/logstash.conf Get the persistent volume details of the domain home of the WebLogic Server(s). The following command will list the persistent volume details in the namespace - \u0026ldquo;wcsites-ns\u0026rdquo;:\n$ kubectl get pv -n wcsites-ns NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE wcsitesinfra-domain-pv 10Gi RWX Retain Bound wcsites-ns/wcsitesinfra-domain-pvc wcsitesinfra-domain-storage-class 5d21h Sample Logstash deployment is located at kubernetes/create-wcsites-domain/utils/logstash/logstash.yaml for Logstash pod. The mounted persistent volume of the domain home will provide access to the WebLogic Server logs to Logstash pod.\napiVersion: apps/v1beta1\rkind: Deployment\rmetadata:\rname: logstash-wls\rnamespace: wcsites-ns\rspec:\rtemplate: # create pods using pod definition in this template\rmetadata:\rlabels:\rk8s-app: logstash-wls\rspec:\rvolumes:\r- name: weblogic-domain-storage-volume\rpersistentVolumeClaim:\rclaimName: wcsitesinfra-domain-pvc\r- name: shared-logs\remptyDir: {}\rcontainers:\r- name: logstash\rimage: logstash:6.6.0\rcommand: [\u0026quot;/bin/sh\u0026quot;]\rargs: [\u0026quot;/usr/share/logstash/bin/logstash\u0026quot;, \u0026quot;-f\u0026quot;, \u0026quot;/u01/oracle/user_projects/logs/logstash.conf\u0026quot;]\rimagePullPolicy: IfNotPresent\rvolumeMounts:\r- mountPath: /u01/oracle/user_projects\rname: weblogic-domain-storage-volume\r- name: shared-logs\rmountPath: /shared-logs\rports:\r- containerPort: 5044\rname: logstash\rAfter you have created the Logstash deployment yaml and Logstash configuration file, deploy Logstash using following command:\n$ kubectl create -f kubernetes/create-wcsites-domain/utils/logstash/logstash.yaml 3. Test the Deployment of Elasticsearch and Kibana The WebLogic Operator also provides a sample deployment of Elasticsearch and Kibana for testing purpose. You can deploy Elasticsearch and Kibana on the Kubernetes cluster as shown below:\n$ kubectl create -f kubernetes/elasticsearch-and-kibana/elasticsearch_and_kibana.yaml Get the Kibana dashboard port information as shown below: Wait for pods to start:\n-bash-4.2$ kubectl get pods -w NAME READY STATUS RESTARTS AGE elasticsearch-8bdb7cf54-mjs6s 1/1 Running 0 4m3s kibana-dbf8964b6-n8rcj 1/1 Running 0 4m3s -bash-4.2$ kubectl get svc NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE elasticsearch ClusterIP 10.100.11.154 \u0026lt;none\u0026gt; 9200/TCP,9300/TCP 4m32s kibana NodePort 10.97.205.0 \u0026lt;none\u0026gt; 5601:31884/TCP 4m32s kubernetes ClusterIP 10.96.0.1 \u0026lt;none\u0026gt; 443/TCP 71d You can access the Kibana dashboard at http://mycompany.com:kibana-nodeport/. In our example, the node port would be 31884.\nCreate an Index Pattern in Kibana Create an index pattern logstash* in Kibana \u0026gt; Management. After the servers are started, you will see the log data in the Kibana dashboard:\n"
},
{
	"uri": "/fmw-kubernetes/soa-domains/adminguide/monitoring-soa-domains/",
	"title": "Monitor a domain and publish logs",
	"tags": [],
	"description": "Monitor an Oracle SOA Suite domain and publish the WebLogic Server logs to Elasticsearch.",
	"content": "After the Oracle SOA Suite domain is set up, you can:\n Monitor the Oracle SOA Suite instance using Prometheus and Grafana Publish WebLogic Server logs into Elasticsearch Publish SOA server diagnostics logs into Elasticsearch  Monitor the Oracle SOA Suite instance using Prometheus and Grafana Using the WebLogic Monitoring Exporter you can scrape runtime information from a running Oracle SOA Suite instance and monitor them using Prometheus and Grafana.\nSet up monitoring Follow these steps to set up monitoring for an Oracle SOA Suite instance. For more details on WebLogic Monitoring Exporter, see here.\nPublish WebLogic Server logs into Elasticsearch WebLogic Server logs can be published to Elasticsearch using Fluentd. See Fluentd configuration steps.\nPublish SOA server diagnostics logs into Elasticsearch This section shows you how to publish diagnostics logs to Elasticsearch and view them in Kibana. For publishing operator logs, see this sample.\nPrerequisites If you have not already set up Elasticsearch and Kibana for logs collection, refer to this document and complete the setup.\nPublish to Elasticsearch The diagnostics or other logs can be pushed to Elasticsearch server using logstash pod. The logstash pod should have access to the shared domain home or the log location. In case of the Oracle SOA Suite domain, the persistent volume of the domain home can be used in the logstash pod. To create the logstash pod, follow these steps:\n  Get the domain home persistence volume claim details of the domain home of the Oracle SOA Suite domain. The following command lists the persistent volume claim details in the namespace - soans. In the example below, the persistent volume claim is soainfra-domain-pvc:\n$ kubectl get pvc -n soans Sample output:\nNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE soainfra-domain-pvc Bound soainfra-domain-pv 10Gi RWX soainfra-domain-storage-class xxd   Create the logstash configuration file (logstash.conf). Below is a sample logstash configuration to push diagnostic logs of all servers available at DOMAIN_HOME/servers/\u0026lt;server_name\u0026gt;/logs/-diagnostic.log:\ninput { file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/soainfra/servers/**/logs/*-diagnostic.log\u0026quot; start_position =\u0026gt; beginning } } filter { grok { match =\u0026gt; [ \u0026quot;message\u0026quot;, \u0026quot;\u0026lt;%{DATA:log_timestamp}\u0026gt; \u0026lt;%{WORD:log_level}\u0026gt; \u0026lt;%{WORD:thread}\u0026gt; \u0026lt;%{HOSTNAME:hostname}\u0026gt; \u0026lt;%{HOSTNAME:servername}\u0026gt; \u0026lt;%{DATA:timer}\u0026gt; \u0026lt;\u0026lt;%{DATA:kernel}\u0026gt;\u0026gt; \u0026lt;\u0026gt; \u0026lt;%{DATA:uuid}\u0026gt; \u0026lt;%{NUMBER:timestamp}\u0026gt; \u0026lt;%{DATA:misc}\u0026gt; \u0026lt;%{DATA:log_number}\u0026gt; \u0026lt;%{DATA:log_message}\u0026gt;\u0026quot; ] } } output { elasticsearch { hosts =\u0026gt; [\u0026quot;elasticsearch.default.svc.cluster.local:9200\u0026quot;] } }   Copy the logstash.conf into /u01/oracle/user_projects/domains so that it can be used for logstash deployment, using the Administration Server pod (for example soainfra-adminserver pod in namespace soans):\n$ kubectl cp logstash.conf soans/soainfra-adminserver:/u01/oracle/user_projects/domains --namespace soans   Create a deployment YAML (logstash.yaml) for the logstash pod using the domain home persistence volume claim. Make sure to point the logstash configuration file to the correct location (for example, copy logstash.conf to /u01/oracle/user_projects/domains/logstash.conf) and also the correct domain home persistence volume claim. Below is a sample logstash deployment YAML:\napiVersion: apps/v1 kind: Deployment metadata: name: logstash-soa namespace: soans spec: selector: matchLabels: app: logstash-soa template: # create pods using pod definition in this template metadata: labels: app: logstash-soa spec: volumes: - name: soainfra-domain-storage-volume persistentVolumeClaim: claimName: soainfra-domain-pvc - name: shared-logs emptyDir: {} containers: - name: logstash image: logstash:6.6.0 command: [\u0026quot;/bin/sh\u0026quot;] args: [\u0026quot;/usr/share/logstash/bin/logstash\u0026quot;, \u0026quot;-f\u0026quot;, \u0026quot;/u01/oracle/user_projects/domains/logstash.conf\u0026quot;] imagePullPolicy: IfNotPresent volumeMounts: - mountPath: /u01/oracle/user_projects name: soainfra-domain-storage-volume - name: shared-logs mountPath: /shared-logs ports: - containerPort: 5044 name: logstash   Deploy logstash to start publish logs to Elasticsearch:\n$ kubectl create -f logstash.yaml   Now, you can view the diagnostics logs using Kibana with index pattern \u0026ldquo;logstash-*\u0026rdquo;.\n  "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/adminguide/weblogic-logging-exporter-setup/",
	"title": "Publish logs to Elasticsearch",
	"tags": [],
	"description": "Monitor an Oracle WebCenter Sites domain and publish the WebLogic Server logs to Elasticsearch.",
	"content": "The WebLogic Logging Exporter adds a log event handler to WebLogic Server. WebLogic Server logs can be pushed to Elasticsearch in Kubernetes directly by using the Elasticsearch REST API. For more details, see to the WebLogic Logging Exporter project.\nThis sample shows you how to publish WebLogic Server logs to Elasticsearch and view them in Kibana. For publishing operator logs, see this sample.\nPrerequisites This document assumes that you have already set up Elasticsearch and Kibana for logs collection. If you have not, please see this document.\n Download the WebLogic Logging Exporter binaries The pre-built binaries are available on the WebLogic Logging Exporter Releases page.\nDownload:\n weblogic-logging-exporter-1.0.0.jar from the Releases page. snakeyaml-1.25.jar from Maven Central.  These identifiers are used in the sample commands in this document.\n wcsites-ns: WebCenter Sites domain namespace wcsitesinfra: domainUID wcsitesinfra-adminserver: Administration Server pod name   Copy the JAR Files to the WebLogic Domain Home Copy the weblogic-logging-exporter-1.0.0.jar and snakeyaml-1.25.jar files to the domain home directory in the Administration Server pod.\n$ kubectl cp \u0026lt;file-to-copy\u0026gt; \u0026lt;namespace\u0026gt;/\u0026lt;Administration-Server-pod\u0026gt;:\u0026lt;domainhome\u0026gt; $ kubectl cp snakeyaml-1.25.jar wcsites-ns/wcsitesinfra-adminserver:/u01/oracle/user_projects/domains/wcsitesinfra/ $ kubectl cp weblogic-logging-exporter-1.0.0.jar wcsites-ns/wcsitesinfra-adminserver:/u01/oracle/user_projects/domains/wcsitesinfra/ Add a Startup Class to the Domain Configuration   In the WebLogic Server Administration Console, in the left navigation pane, expand Environment, and then select Startup and Shutdown Classes.\n  Add a new startup class. You may choose any descriptive name, however, the class name must be weblogic.logging.exporter.Startup.\n  Target the startup class to each server from which you want to export logs.\n  In your /u01/oracle/user_projects/domains/wcsitesinfra/config/config.xml file, this update should look similar to the following example:\n$ kubectl exec -it wcsitesinfra-adminserver -n wcsites-ns cat /u01/oracle/user_projects/domains/wcsitesinfra/config/config.xml \u0026lt;startup-class\u0026gt; \u0026lt;name\u0026gt;weblogic-logging-exporter\u0026lt;/name\u0026gt; \u0026lt;target\u0026gt;AdminServer,wcsites_cluster\u0026lt;/target\u0026gt; \u0026lt;class-name\u0026gt;weblogic.logging.exporter.Startup\u0026lt;/class-name\u0026gt; \u0026lt;/startup-class\u0026gt;   Update the WebLogic Server CLASSPATH   Copy the setDomainEnv.sh file from the pod to a local folder:\n$ kubectl cp wcsites-ns/wcsitesinfra-adminserver:/u01/oracle/user_projects/domains/wcsitesinfra/bin/setDomainEnv.sh $PWD/setDomainEnv.sh tar: Removing leading `/' from member names Ignore exception: tar: Removing leading '/' from member names\n  Update the server class path in setDomainEnv.sh:\nCLASSPATH=/u01/oracle/user_projects/domains/wcsitesinfra/weblogic-logging-exporter-1.0.0.jar:/u01/oracle/user_projects/domains/wcsitesinfra/snakeyaml-1.25.jar:${CLASSPATH} export CLASSPATH   Copy back the modified setDomainEnv.sh file to the pod:\n$ kubectl cp setDomainEnv.sh wcsites-ns/wcsitesinfra-adminserver:/u01/oracle/user_projects/domains/wcsitesinfra/bin/setDomainEnv.sh ``\n  Create a Configuration File for the WebLogic Logging Exporter   Specify the Elasticsearch server host and port number in file kubernetes/create-wcsites-domain/utils/weblogic-logging-exporter/WebLogicLoggingExporter.yaml:\nExample:\nweblogicLoggingIndexName: wls publishHost: elasticsearch.default.svc.cluster.local publishPort: 9200 domainUID: wcsitesinfra weblogicLoggingExporterEnabled: true weblogicLoggingExporterSeverity: TRACE weblogicLoggingExporterBulkSize: 1   Copy the WebLogicLoggingExporter.yaml file to the domain home directory in the WebLogic Administration Server pod:\n$ kubectl cp kubernetes/create-wcsites-domain/utils/weblogic-logging-exporter/WebLogicLoggingExporter.yaml wcsites-ns/wcsitesinfra-adminserver:/u01/oracle/user_projects/domains/wcsitesinfra/config/   Restart All the Servers in the Domain To restart the servers, stop and then start them using the following commands:\nTo stop the servers:\n$ kubectl patch domain wcsitesinfra -n wcsites-ns --type='json' -p='[{\u0026quot;op\u0026quot;: \u0026quot;replace\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/spec/serverStartPolicy\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;Never\u0026quot; }]' To start the servers:\n$ kubectl patch domain wcsitesinfra -n wcsites-ns --type='json' -p='[{\u0026quot;op\u0026quot;: \u0026quot;replace\u0026quot;, \u0026quot;path\u0026quot;: \u0026quot;/spec/serverStartPolicy\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;IfNeeded\u0026quot; }]' After all the servers are restarted, see their server logs to check that the weblogic-logging-exporter class is called, as shown below:\n======================= WebLogic Logging Exporter Startup class called Reading configuration from file name: /u01/oracle/user_projects/domains/wcsitesinfra/config/WebLogicLoggingExporter.yaml Config{weblogicLoggingIndexName='wls', publishHost='domain.host.com', publishPort=9200, weblogicLoggingExporterSeverity='Notice', weblogicLoggingExporterBulkSize='2', enabled=true, weblogicLoggingExporterFilters=FilterConfig{expression='NOT(MSGID = 'BEA-000449')', servers=[]}], domainUID='wcsitesinfra'} Create an Index Pattern in Kibana Create an index pattern wls* in Kibana \u0026gt; Management. After the servers are started, you will see the log data in the Kibana dashboard:\n"
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/appendix/additional-configuration/",
	"title": "Additional Configuration",
	"tags": [],
	"description": "Describes how to create connections to Oracle WebCenter Content Server to enable content integration within Oracle WebCenter Portal.",
	"content": "Creating a Connection to Oracle WebCenter Content Server To enable content integration within Oracle WebCenter Portal create a connection to Oracle WebCenter Content Server using JAX-WS. Follow the steps in the documentation link to create the connection.\n Note: If the Oracle WebCenter Content Server is configured with SSL, before creating the connection, the SSL certificate should be imported into any location under mount path of domain persistent volume to avoid loss of certificate due pod restart.\n Import SSL Certificate Import the certificate using below sample command, update the keystore location to a directory under mount path of the domain persistent volume :\n$ kubectl exec -it wcp-domain-adminserver -n wcpns /bin/bash $ cd $JAVA_HOME/bin $ ./keytool -importcert -alias collab_cert -file /filepath/sslcertificate/contentcert.crt -keystore /u01/oracle/user_projects/domains/wcp-domain/DemoTrust.jks Update the TrustStore To update the truststore location edit domain.yaml file, append -Djavax.net.ssl.trustStore to the spec.serverPod.env.JAVA_OPTIONS environment variable value. The truststore location used in -Djavax.net.ssl.trustStore option should be same as keystore location where the SSL certificate has been imported.\nserverPod: # an (optional) list of environment variable to be set on the servers env: - name: JAVA_OPTIONS value: \u0026#34;-Dweblogic.StdoutDebugEnabled=true -Dweblogic.ssl.Enabled=true -Dweblogic.security.SSL.ignoreHostnameVerification=true -Djavax.net.ssl.trustStore=/u01/oracle/user_projects/domains/wcp-domain/DemoTrust.jks\u0026#34; - name: USER_MEM_ARGS value: \u0026#34;-Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx1024m \u0026#34; volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: wcp-domain-domains-pvc volumeMounts: - mountPath: /u01/oracle/user_projects/domains name: weblogic-domain-storage-volume Apply the domain.yaml file to restart the Oracle WebCenter Portal domain.\n$ kubectl apply -f domain.yaml "
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/installguide/configure-wcp-search/",
	"title": "Configure WebCenter Portal For Search",
	"tags": [],
	"description": "Set up search functionality in Oracle WebCenter Portal using Elasticsearch.",
	"content": " Introduction Set Up Persistent Volume and Persistent Volume Claim Create a Secret Headless Service LoadBalancer LoadBalancer Validation Elasticsearch Cluster Deployment Validation  Introduction Elasticsearch is a highly scalable search engine. It allows you to store, search, and analyze big volumes of data quickly and provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON document.\nSet Up Persistent Volume and Persistent Volume Claim Create a Kubernetes PV and PVC (Persistent Volume and Persistent Volume Claim) to store Elasticsearch data. To create PV and PVC, use the deployment YAML configuration file located at ${WORKDIR}/create-wcp-es-cluster/es-pvpvc.yaml.\napiVersion: v1 kind: PersistentVolume metadata: name: es-data-pv namespace: wcpns spec: storageClassName: es-data-pv-storage-class capacity: storage: 10Gi accessModes: - ReadWriteMany persistentVolumeReclaimPolicy: Retain hostPath: path: \u0026#34;/scratch/esdata\u0026#34; --- apiVersion: v1 kind: PersistentVolumeClaim metadata: name: es-data-pvc namespace: wcpns spec: storageClassName: es-data-pv-storage-class accessModes: - ReadWriteMany resources: requests: storage: 10Gi To create PV \u0026amp; PVC run the below command:\n$ kubectl apply -f es-pvpvc.yaml Create a Secret To grant access to Oracle WebCenter Portal, create a Kubernetes secret using the deployment YAML configuration file located at ${WORKDIR}/create-wcp-es-cluster/es-secret.yaml\napiVersion: v1 kind: Secret metadata: name: es-secret namespace: wcpns data: # base64 encoded strings wls-admin: d2VibG9naWM= wls-admin-pwd: d2VsY29tZTE= search-admin: d2NjcmF3bGFkbWlu search-admin-pwd: d2VsY29tZTE= Where: wls-admin :Oracle WebCenter Admin UserName wls-admin-pwd :Oracle WebCenter Admin Password search-admin :ElasticSearch Username search-admin-pwd : ElasticSearch Password  To create Kubernetes Secret run the below command:\n$ kubectl apply -f es-secret.yaml Headless Service Each node in Elasticsearch cluster can communicate using a headless service. Create a headless service using the deployment YAML configuration file located at ${WORKDIR}/create-wcp-es-cluster/es-service.yaml to establish cluster communication.\napiVersion: v1 kind: Service metadata: name: es-svc namespace: wcpns labels: service: elasticsearch spec: # headless service clusterIP: None ports: - port: 9200 name: http - port: 9300 name: transport selector: service: elasticsearch To create Headless Service run below command:\n$ kubectl apply -f es-service.yaml LoadBalancer To access the Elasticsearch service outside of the Kubernetes cluster, create an external loadbalancer. Then access the Elasticsearch service by using the external IP of loadbalancer, create a loadbalancer using the deployment YAML configuration file located at ${WORKDIR}/create-wcp-es-cluster/es-loadbalancer.yaml.\napiVersion: v1 kind: Service metadata: name: es-loadbalancer namespace: wcpns labels: type: external spec: type: LoadBalancer selector: service: elasticsearch ports: - name: http port: 9200 targetPort: 9200 To create a loadbalancer run below command:\n$ kubectl apply -f es-loadbalancer.yaml LoadBalancer Validation Once the loadbalancer is successfully deployed, validate it by running the following command:\n$ kubectl get svc -n wcpns -l type=external Make a note of the external IP from the above command and use this below sample URL to access Elasticsearch cluster health : http://externalIP:9200/_cluster/health\nElasticsearch Cluster Using the Kubernetes StatefulSet controller create an Elasticsearch Cluster comprising of three node using the deployment YAML configuration file located at ${WORKDIR}/create-wcp-es-cluster/es-statefulset.yaml\napiVersion: apps/v1 kind: StatefulSet metadata: name: es-statefulset namespace: wcpns labels: service: elasticsearch spec: serviceName: es-svc replicas: 1 selector: matchLabels: service: elasticsearch template: metadata: labels: service: elasticsearch spec: initContainers: - name: increase-the-vm-max-map-count image: busybox command: - sysctl - -w - vm.max_map_count=262144 securityContext: privileged: true - name: increase-the-ulimit image: busybox command: - sh - -c - ulimit -n 65536 securityContext: privileged: true volumes: - name: es-node persistentVolumeClaim: claimName: es-data-pvc - name: wcp-domain persistentVolumeClaim: claimName: wcp-domain-domain-pvc containers: - name: es-container image: oracle/wcportal:12.2.1.4 imagePullPolicy: IfNotPresent command: [ \u0026#34;/bin/sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;/u01/oracle/container-scripts/configureOrStartElasticsearch.sh\u0026#34; ] readinessProbe: httpGet: path: / port: 9200 httpHeaders: - name: Authorization value: Basic d2NjcmF3bGFkbWluOndlbGNvbWUx initialDelaySeconds: 150 periodSeconds: 30 timeoutSeconds: 10 successThreshold: 1 failureThreshold: 10 lifecycle: preStop: exec: command: [ \u0026#34;/bin/sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;/u01/oracle/container-scripts/elasticsearchPreStopHandler.sh\u0026#34; ] ports: - containerPort: 9200 name: http - containerPort: 9300 name: tcp env: - name: NODE_NAME valueFrom: fieldRef: fieldPath: metadata.name - name: UNICAST_HOST_LIST value: \u0026#34;es-svc\u0026#34; - name: ADMIN_USERNAME valueFrom: secretKeyRef: name: es-secret key: wls-admin - name: ADMIN_PASSWORD valueFrom: secretKeyRef: name: es-secret key: wls-admin-pwd - name: SEARCH_APP_USERNAME valueFrom: secretKeyRef: name: es-secret key: search-admin - name: SEARCH_APP_USER_PASSWORD valueFrom: secretKeyRef: name: es-secret key: search-admin-pwd - name: ADMIN_SERVER_CONTAINER_NAME value: wcp-domain-adminserver - name: ADMIN_PORT value: \u0026#34;7001\u0026#34; - name: ES_CLUSTER_NAME value: es-cluster - name: DOMAIN_NAME value: wcp-domain - name: CONFIGURE_ES_CONNECTION value: \u0026#34;true\u0026#34; - name: LOAD_BALANCER_IP value: \u0026#34;es-loadbalancer.wcpns.svc.cluster.local\u0026#34; volumeMounts: - name: es-node mountPath: /u01/esHome/esNode - name: wcp-domain mountPath: /u01/oracle/user_projects/domains  Note: The values used for ADMIN_PORT and Image name should be same as values passed to create-domain.sh job while creating domain.\n To create a es-statefulset run below command:\n$ kubectl apply -f es-statefulset.yaml  Note: After setting up Elasticsearch cluster restart all the instance of Oracle WebCenter Portal server.\n Deployment Validation Validate the deployment by running the following command:\n$ kubectl get pods -n wcpns -l service=elasticsearch "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/installguide/additional-steps-to-launch-native-binaries/",
	"title": "Launch Oracle Webcenter Content Native Applications in Containers",
	"tags": [],
	"description": "How to launch Oracle WebCenter Content native binaries from inside containerized environment.",
	"content": "This section provides the steps required to use product native binaries with user interfaces.\nIssue with Launching Headful User Interfaces for Oracle WebCenter Content Native Binaries Oracle WebCenter Content (UCM) provide a set of native binaries with headful UIs, which are delivered as part of the product container image. WebCenter Content container images are, by default, created with Oracle slim linux image, which doesn\u0026rsquo;t come with all the packages pre-installed to support headful applications with UIs to be launched. UCM provides many such native binaries which uses JAVA AWT for UI support. With current Oracle WebCenter Content container images, running native applications fails, being unable to launch UIs.\nThe following sections document the solution, by providing a set of instructions, enabling users to run UCM native applications with UIs.\nThese instructions are divided in two parts -\n Steps to update the existing container image Steps to launch native apps using VNC sessions  Steps to Update out-of-the-box Oracle WebCenter Content Container Image Using WebLogic Image Tool This section describes the method to update image with a OS package using WebLogic Image Tool. Please refer this for setting up the WebLogic Image Tool.\nAdditional Build Commands The installation of required OS packages in the image, can be done using yum command in additional build command option available in WebLogic Image Tool. Here is the sample additionalBuildCmds.txt file, to be used, to install required Linux packages (libXext.x86_64, libXrender.x86_64 and libXtst.x86_64).\n[final-build-commands] USER root RUN yum -y --downloaddir=/tmp/imagetool install libXext libXrender libXtst \\ \u0026amp;\u0026amp; yum -y --downloaddir=/tmp/imagetool clean all \\ \u0026amp;\u0026amp; rm -rf /var/cache/yum/* \\ \u0026amp;\u0026amp; rm -rf /tmp/imagetool USER oracle  Note: It is important to change the user to oracle, otherwise the user during the container execution will be root.\n Build arguments The arguments required for updating the image can be passed as file to the WebLogic Image Tool.\n'update' is the sub command to Image Tool for updating an existing docker image. '--fromImage' option provides the existing docker image that has to be updated. '--tag' option should be provided with the new tag for the updated image. '--additionalBuildCommands' option should be provided with the above created additional build commands file. '--chown oracle:root' option should be provided to update file permissions.  Below is a sample build argument (buildArgs) file, to be used for updating the image,\n update --fromImage \u0026lt;existing_WCContent_image_without_dependent_packages\u0026gt; --tag \u0026lt;name_of_updated_WCContent_image_to_be_built\u0026gt; --additionalBuildCommands ./additionalBuildCmds.txt --chown oracle:root Update Oracle WebCenter Content Container Image Now we can execute the WebLogic Image Tool to update the out-of-the-box image, using the build-argument file described above -\n$ imagetool @buildArgs WebLogic Image Tool provides multiple options for updating the image. For detailed information on the update options, please refer to this document.\nUpdating the image does not modify the \u0026lsquo;CMD\u0026rsquo; from the source image unless it is modified in the additional build commands.\n$ docker inspect -f '{{.Config.Cmd}}' \u0026lt;name_of_updated_Wccontent_image\u0026gt; [/u01/oracle/container-scripts/createDomainandStartAdmin.sh] Steps to launch Oracle WebCenter Content native applications using VNC sessions. Once updated image is successfully built and available on all required nodes, do the following: a. Update the domain.yaml file with updated image name and apply the domain.yaml file.\n$ kubectl apply -f domain.yaml b. After applying the modified domain.yaml, pods will get restarted and start running with updated image with required packages.\n$ kubectl get pods -n \u0026lt;namespace_being_used_for_wccontent_domain\u0026gt; c. Create VNC sessions on the master node to launch native apps. These are the steps to be followed using the VNC session.\nd. Run this command on each VNC session:\n$ xhost + \u0026lt;HOST-IP or HOST-NAME of the node, on which POD is deployed\u0026gt;  Note: The above command works for multi-node clusters (in which master node and worker nodes are deployed on different hosts and pods are distributed among worker nodes, running on different hosts). In case of single node clusters (where there is only master node and no worker nodes and all pods are deployed on the host, on which master node is running), one needs to use container/pod’s IP instead of the master-node’s HOST-IP itself.\n To obtain the container IP, follow the command mentioned in step g, from within that container\u0026rsquo;s shell.\n$ xhost + \u0026lt;IP of the container, from which binaries are to be run \u0026gt; e. Get into the pod\u0026rsquo;s (for example, wccinfra-ucm-server1) shell:\n$ kubectl exec -n wccns -it wccinfra-ucm-server1 -- /bin/bash f. Traverse to the binaries location:\n$ cd /u01/oracle/user_projects/domains/wccinfra/ucm/cs/bin g. Get the container IP:\n$ hostname -i h. Set DISPLAY variable within the container:\n$ export DISPLAY=\u0026lt;HOST-IP/HOST-NAME of the master node, where VNC session was created\u0026gt;:vnc-session display-id i. Launch any native UCM application, from within the container, like this:\n$ ./SystemProperties If the application has an UI, it will get launched now.\n"
},
{
	"uri": "/fmw-kubernetes/idm-products/oud/prepare-your-environment/",
	"title": "Prepare Your Environment",
	"tags": [],
	"description": "Prepare your environment",
	"content": " Check the Kubernetes cluster is ready Obtain the OUD container image Create a persistent volume directory Setup the code repository to deploy OUD  Check the Kubernetes cluster is ready As per the Prerequisites a Kubernetes cluster should have already been configured.\n  Run the following command on the master node to check the cluster and worker nodes are running:\n$ kubectl get nodes,pods -n kube-system The output will look similar to the following:\nNAME STATUS ROLES AGE VERSION node/worker-node1 Ready \u0026lt;none\u0026gt; 17h v1.29.9+3.el8 node/worker-node2 Ready \u0026lt;none\u0026gt; 17h v1.29.9+3.el8 node/master-node Ready control-plane,master 23h v1.29.9+3.el8 NAME READY STATUS RESTARTS AGE pod/coredns-66bff467f8-fnhbq 1/1 Running 0 23h pod/coredns-66bff467f8-xtc8k 1/1 Running 0 23h pod/etcd-master 1/1 Running 0 21h pod/kube-apiserver-master-node 1/1 Running 0 21h pod/kube-controller-manager-master-node 1/1 Running 0 21h pod/kube-flannel-ds-amd64-lxsfw 1/1 Running 0 17h pod/kube-flannel-ds-amd64-pqrqr 1/1 Running 0 17h pod/kube-flannel-ds-amd64-wj5nh 1/1 Running 0 17h pod/kube-proxy-2kxv2 1/1 Running 0 17h pod/kube-proxy-82vvj 1/1 Running 0 17h pod/kube-proxy-nrgw9 1/1 Running 0 23h pod/kube-scheduler-master 1/1 Running 0 21h   Obtain the OUD container image The OUD Kubernetes deployment requires access to an OUD container image. The image can be obtained in the following ways:\n Prebuilt OUD container image Build your own OUD container image using WebLogic Image Tool  Prebuilt OUD container image The prebuilt OUD January 2025 container image can be downloaded from Oracle Container Registry. This image is prebuilt by Oracle and includes Oracle Unified Directory 12.2.1.4.0, the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program..\nNote: Before using this image you must login to Oracle Container Registry, navigate to Middleware \u0026gt; oud_cpu and accept the license agreement.\nYou can use this image in the following ways:\n Pull the container image from the Oracle Container Registry automatically during the OUD Kubernetes deployment. Manually pull the container image from the Oracle Container Registry and then upload it to your own container registry. Manually pull the container image from the Oracle Container Registry and manually stage it on the master node and each worker node.  Build your own OUD container image using WebLogic Image Tool You can build your own OUD container image using the WebLogic Image Tool. This is recommended if you need to apply one off patches to a Prebuilt OUD container image. For more information about building your own container image with WebLogic Image Tool, see Create or update image.\nYou can use an image built with WebLogic Image Tool in the following ways:\n Manually upload them to your own container registry. Manually stage them on the master node and each worker node.  Note: This documentation does not tell you how to pull or push the above images into a private container registry, or stage them on the master and worker nodes. Details of this can be found in the Enterprise Deployment Guide.\nCreate a persistent volume directory Note: This section should not be followed if using block storage.\nAs referenced in Prerequisites the nodes in the Kubernetes cluster must have access to a persistent volume such as a Network File System (NFS) mount or a shared file system.\nIn this example /scratch/shared/ is a shared directory accessible from all nodes.\n  On the master node run the following command to create a user_projects directory:\n$ cd \u0026lt;persistent_volume\u0026gt; $ mkdir oud_user_projects $ sudo chown -R 1000:0 oud_user_projects For example:\n$ cd /scratch/shared $ mkdir oud_user_projects $ sudo chown -R 1000:0 oud_user_projects   On the master node run the following to ensure it is possible to read and write to the persistent volume:\n$ cd \u0026lt;persistent_volume\u0026gt;/oud_user_projects $ touch file.txt $ ls filemaster.txt For example:\n$ cd /scratch/shared/oud_user_projects $ touch filemaster.txt $ ls filemaster.txt On the first worker node run the following to ensure it is possible to read and write to the persistent volume:\n$ cd /scratch/shared/oud_user_projects $ ls filemaster.txt $ touch fileworker1.txt $ ls fileworker1.txt Repeat the above for any other worker nodes e.g fileworker2.txt etc. Once proven that it\u0026rsquo;s possible to read and write from each node to the persistent volume, delete the files created.\n  Setup the code repository to deploy OUD Oracle Unified Directory deployment on Kubernetes leverages deployment scripts provided by Oracle for creating Oracle Unified Directory containers using the Helm charts provided. To deploy Oracle Unified Directory on Kubernetes you should set up the deployment scripts as below:\n  Create a working directory to setup the source code.\n$ mkdir \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/shared/OUDContainer   Download the latest OUD deployment scripts from the OUD repository:\n$ cd \u0026lt;workdir\u0026gt; $ git clone https://github.com/oracle/fmw-kubernetes.git For example:\n$ cd /scratch/shared/OUDContainer $ git clone https://github.com/oracle/fmw-kubernetes.git   Set the $WORKDIR environment variable as follows:\n$ export WORKDIR=\u0026lt;workdir\u0026gt;/fmw-kubernetes/OracleUnifiedDirectory For example:\n$ export WORKDIR=/scratch/shared/OUDContainer/fmw-kubernetes/OracleUnifiedDirectory You are now ready to create the OUD deployment as per Create OUD instances.\n  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oudsm/prepare-your-environment/",
	"title": "Prepare Your Environment",
	"tags": [],
	"description": "Prepare your environment",
	"content": " Check the Kubernetes cluster is ready Obtain the OUDSM container image Setup the code repository to deploy OUDSM  Check the Kubernetes cluster is ready As per the Prerequisites a Kubernetes cluster should have already been configured.\n  Run the following command on the master node to check the cluster and worker nodes are running:\n$ kubectl get nodes,pods -n kube-system The output will look similar to the following:\nNAME STATUS ROLES AGE VERSION node/worker-node1 Ready \u0026lt;none\u0026gt; 17h v1.29.9+3.el8 node/worker-node2 Ready \u0026lt;none\u0026gt; 17h v1.29.9+3.el8 node/master-node Ready master 23h v1.29.9+3.el8 NAME READY STATUS RESTARTS AGE pod/coredns-66bff467f8-fnhbq 1/1 Running 0 23h pod/coredns-66bff467f8-xtc8k 1/1 Running 0 23h pod/etcd-master 1/1 Running 0 21h pod/kube-apiserver-master-node 1/1 Running 0 21h pod/kube-controller-manager-master-node 1/1 Running 0 21h pod/kube-flannel-ds-amd64-lxsfw 1/1 Running 0 17h pod/kube-flannel-ds-amd64-pqrqr 1/1 Running 0 17h pod/kube-flannel-ds-amd64-wj5nh 1/1 Running 0 17h pod/kube-proxy-2kxv2 1/1 Running 0 17h pod/kube-proxy-82vvj 1/1 Running 0 17h pod/kube-proxy-nrgw9 1/1 Running 0 23h pod/kube-scheduler-master 1/1 Running 0 21$   Obtain the OUDSM container image The Oracle Unified Directory Services Manager (OUDSM) Kubernetes deployment requires access to an OUDSM container image. The image can be obtained in the following ways:\n Prebuilt OUDSM container image Build your own OUDSM container image using WebLogic Image Tool  Prebuilt OUDSM container image The prebuilt OUDSM January 2025 container image can be downloaded from Oracle Container Registry. This image is prebuilt by Oracle and includes Oracle Unified Directory Services Manager 12.2.1.4.0, the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.\nNote: Before using this image you must login to Oracle Container Registry, navigate to Middleware \u0026gt; oudsm_cpu and accept the license agreement.\nYou can use this image in the following ways:\n Pull the container image from the Oracle Container Registry automatically during the OUDSM Kubernetes deployment. Manually pull the container image from the Oracle Container Registry and then upload it to your own container registry. Manually pull the container image from the Oracle Container Registry and manually stage it on the master node and each worker node.  Build your own OUDSM container image using WebLogic Image Tool You can build your own OUDSM container image using the WebLogic Image Tool. This is recommended if you need to apply one off patches to a Prebuilt OUDSM container image. For more information about building your own container image with WebLogic Image Tool, see Create or update image\nYou can use an image built with WebLogic Image Tool in the following ways:\n Manually upload them to your own container registry. Manually stage them on the master node and each worker node.  Note: This documentation does not tell you how to pull or push the above images into a private container registry, or stage them on the master and worker nodes. Details of this can be found in the Enterprise Deployment Guide.\nSetup the code repository to deploy OUDSM Oracle Unified Directory Services Manager deployment on Kubernetes leverages deployment scripts provided by Oracle for creating Oracle Unified Directory Services Manager containers using the Helm charts provided. To deploy Oracle Unified Directory Services Manager on Kubernetes you should set up the deployment scripts on the master node as below:\n  Create a working directory to setup the source code.\n$ mkdir \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/OUDSMContainer   Download the latest OUDSM deployment scripts from the OUDSM repository:\n$ cd \u0026lt;workdir\u0026gt; $ git clone https://github.com/oracle/fmw-kubernetes.git For example:\n$ cd /scratch/OUDSMContainer $ git clone https://github.com/oracle/fmw-kubernetes.git   Set the $WORKDIR environment variable as follows:\n$ export WORKDIR=\u0026lt;workdir\u0026gt;/fmw-kubernetes/OracleUnifiedDirectorySM For example:\n$ export WORKDIR=/scratch/OUDSMContainer/fmw-kubernetes/OracleUnifiedDirectorySM You are now ready to create the OUDSM deployment as per Create OUDSM instances.\n  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/prepare-your-environment/",
	"title": "Prepare your environment",
	"tags": [],
	"description": "Sample for creating an OAM domain home on an existing PV or PVC, and the domain resource YAML file for deploying the generated OAM domain.",
	"content": "To prepare for Oracle Access Management 12.2.1.4 deployment in a Kubernetes environment, complete the following steps:\n  Check the Kubernetes cluster is ready\n  Obtain the OAM container image\n  Set up the code repository to deploy OAM domains\n  Install the WebLogic Kubernetes Operator\n  Create a namespace for Oracle Access Management\n  Create a Kubernetes secret for the container registry\n  Create OAM Domains Using WDT Models\n  Create OAM Domains Using WLST Scripts\na. RCU schema creation\nb. Creating Kubernetes secrets for the domain and RCU\nc. Create a Kubernetes persistent volume and persistent volume claim\n  Check the Kubernetes cluster is ready As per the Prerequisites a Kubernetes cluster should have already been configured.\nCheck that all the nodes in the Kubernetes cluster are running.\n  Run the following command on the master node to check the cluster and worker nodes are running:\n$ kubectl get nodes,pods -n kube-system The output will look similar to the following:\nNAME STATUS ROLES AGE VERSION node/worker-node1 Ready \u0026lt;none\u0026gt; 17h v1.29.9+3.el8 node/worker-node2 Ready \u0026lt;none\u0026gt; 17h v1.29.9+3.el8 node/master-node Ready control-plane,master 23h v1.29.9+3.el8 NAME READY STATUS RESTARTS AGE pod/coredns-66bff467f8-fnhbq 1/1 Running 0 23h pod/coredns-66bff467f8-xtc8k 1/1 Running 0 23h pod/etcd-master 1/1 Running 0 21h pod/kube-apiserver-master-node 1/1 Running 0 21h pod/kube-controller-manager-master-node 1/1 Running 0 21h pod/kube-flannel-ds-amd64-lxsfw 1/1 Running 0 17h pod/kube-flannel-ds-amd64-pqrqr 1/1 Running 0 17h pod/kube-flannel-ds-amd64-wj5nh 1/1 Running 0 17h pod/kube-proxy-2kxv2 1/1 Running 0 17h pod/kube-proxy-82vvj 1/1 Running 0 17h pod/kube-proxy-nrgw9 1/1 Running 0 23h pod/kube-scheduler-master 1/1 Running 0 21h   Obtain the OAM container image The OAM Kubernetes deployment requires access to an OAM container image. The image can be obtained in the following ways:\n Prebuilt OAM container image Build your own OAM container image using WebLogic Image Tool  Prebuilt OAM container image The prebuilt OAM January 2025 container image can be downloaded from Oracle Container Registry. This image is prebuilt by Oracle and includes Oracle Access Management 12.2.1.4.0, the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.\nNote: Before using this image you must login to Oracle Container Registry, navigate to Middleware \u0026gt; oam_cpu and accept the license agreement.\nYou can use this image in the following ways:\n Pull the container image from the Oracle Container Registry automatically during the OAM Kubernetes deployment. Manually pull the container image from the Oracle Container Registry and then upload it to your own container registry. Manually pull the container image from the Oracle Container Registry and manually stage it on the master node and each worker node.  Build your own OAM container image using WebLogic Image Tool You can build your own OAM container image using the WebLogic Image Tool. This is recommended if you need to apply one off patches to a Prebuilt OAM container image. For more information about building your own container image with WebLogic Image Tool, see Create or update image.\nYou can use an image built with WebLogic Image Tool in the following ways:\n Manually upload them to your own container registry. Manually stage them on the master node and each worker node.  Note: This documentation does not tell you how to pull or push the above images into a private container registry, or stage them on the master and worker nodes. Details of this can be found in the Enterprise Deployment Guide.\nSet up the code repository to deploy OAM domains OAM domain deployment on Kubernetes leverages the WebLogic Kubernetes Operator infrastructure. For deploying the OAM domains, you need to set up the deployment scripts on the master node as below:\n  Create a working directory to setup the source code.\n$ mkdir \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/OAMK8S   Download the latest OAM deployment scripts from the OAM repository.\n$ cd \u0026lt;workdir\u0026gt; $ git clone https://github.com/oracle/fmw-kubernetes.git For example:\n$ cd /scratch/OAMK8S $ git clone https://github.com/oracle/fmw-kubernetes.git   Set the $WORKDIR environment variable as follows:\n$ export WORKDIR=\u0026lt;workdir\u0026gt;/fmw-kubernetes/OracleAccessManagement For example:\n$ export WORKDIR=/scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement   Run the following command and see if the WebLogic custom resource definition name already exists:\n$ kubectl get crd In the output you should see:\nNo resources found If you see any of the following:\nNAME AGE clusters.weblogic.oracle 5d domains.weblogic.oracle 5d then run the following command to delete the existing crd\u0026rsquo;s:\n$ kubectl delete crd clusters.weblogic.oracle $ kubectl delete crd domains.weblogic.oracle   Install the WebLogic Kubernetes Operator   On the master node run the following command to create a namespace for the operator:\n$ kubectl create namespace \u0026lt;sample-kubernetes-operator-ns\u0026gt; For example:\n$ kubectl create namespace opns The output will look similar to the following:\nnamespace/opns created   Create a service account for the operator in the operator\u0026rsquo;s namespace by running the following command:\n$ kubectl create serviceaccount -n \u0026lt;sample-kubernetes-operator-ns\u0026gt; \u0026lt;sample-kubernetes-operator-sa\u0026gt; For example:\n$ kubectl create serviceaccount -n opns op-sa The output will look similar to the following:\nserviceaccount/op-sa created   Run the following helm command to install and start the operator:\n$ cd $WORKDIR $ helm install weblogic-kubernetes-operator kubernetes/charts/weblogic-operator \\ --namespace \u0026lt;sample-kubernetes-operator-ns\u0026gt; \\ --set image=ghcr.io/oracle/weblogic-kubernetes-operator:4.2.10 \\ --set serviceAccount=\u0026lt;sample-kubernetes-operator-sa\u0026gt; \\ --set “enableClusterRoleBinding=true” \\ --set \u0026#34;domainNamespaceSelectionStrategy=LabelSelector\u0026#34; \\ --set \u0026#34;domainNamespaceLabelSelector=weblogic-operator\\=enabled\u0026#34; \\ --set \u0026#34;javaLoggingLevel=FINE\u0026#34; --wait For example:\n$ cd $WORKDIR $ helm install weblogic-kubernetes-operator kubernetes/charts/weblogic-operator \\ --namespace opns \\ --set image=ghcr.io/oracle/weblogic-kubernetes-operator:4.2.10 \\ --set serviceAccount=op-sa \\ --set \u0026#34;enableClusterRoleBinding=true\u0026#34; \\ --set \u0026#34;domainNamespaceSelectionStrategy=LabelSelector\u0026#34; \\ --set \u0026#34;domainNamespaceLabelSelector=weblogic-operator\\=enabled\u0026#34; \\ --set \u0026#34;javaLoggingLevel=FINE\u0026#34; --wait The output will look similar to the following:\nNAME: weblogic-kubernetes-operator LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: opns STATUS: deployed REVISION: 1 TEST SUITE: None   Verify that the operator\u0026rsquo;s pod and services are running by executing the following command:\n$ kubectl get all -n \u0026lt;sample-kubernetes-operator-ns\u0026gt; For example:\n$ kubectl get all -n opns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE pod/weblogic-operator-676d5cc6f4-wct7b 1/1 Running 0 40s pod/weblogic-operator-webhook-7996b8b58b-9sfhd 1/1 Running 0 40s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/weblogic-operator-webhook-svc ClusterIP 10.100.91.237 \u0026lt;none\u0026gt; 8083/TCP,8084/TCP 47s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/weblogic-operator 1/1 1 1 40s deployment.apps/weblogic-operator-webhook 1/1 1 1 40s NAME DESIRED CURRENT READY AGE replicaset.apps/weblogic-operator-676d5cc6f4 1 1 1 40s replicaset.apps/weblogic-operator-webhook-7996b8b58b 1 1 1 46s   Verify the operator pod\u0026rsquo;s log:\n$ kubectl logs -n \u0026lt;sample-kubernetes-operator-ns\u0026gt; -c weblogic-operator deployments/weblogic-operator For example:\n$ kubectl logs -n opns -c weblogic-operator deployments/weblogic-operator The output will look similar to the following:\n... {\u0026quot;timestamp\u0026quot;:\u0026quot;\u0026lt;DATE\u0026gt;\u0026quot;,\u0026quot;thread\u0026quot;:21,\u0026quot;fiber\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;namespace\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;domainUID\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;level\u0026quot;:\u0026quot;FINE\u0026quot;,\u0026quot;class\u0026quot;:\u0026quot;oracle.kubernetes.operator.DeploymentLiveness\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;run\u0026quot;,\u0026quot;timeInMillis\u0026quot;:1678183291191,\u0026quot;message\u0026quot;:\u0026quot;Liveness file last modified time set\u0026quot;,\u0026quot;exception\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;code\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;headers\u0026quot;:{},\u0026quot;body\u0026quot;:\u0026quot;\u0026quot;} {\u0026quot;timestamp\u0026quot;:\u0026quot;\u0026lt;DATE\u0026gt;\u0026quot;,\u0026quot;thread\u0026quot;:37,\u0026quot;fiber\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;namespace\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;domainUID\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;level\u0026quot;:\u0026quot;FINE\u0026quot;,\u0026quot;class\u0026quot;:\u0026quot;oracle.kubernetes.operator.DeploymentLiveness\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;run\u0026quot;,\u0026quot;timeInMillis\u0026quot;:1678183296193,\u0026quot;message\u0026quot;:\u0026quot;Liveness file last modified time set\u0026quot;,\u0026quot;exception\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;code\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;headers\u0026quot;:{},\u0026quot;body\u0026quot;:\u0026quot;\u0026quot;} {\u0026quot;timestamp\u0026quot;:\u0026quot;\u0026lt;DATE\u0026gt;\u0026quot;,\u0026quot;thread\u0026quot;:31,\u0026quot;fiber\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;namespace\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;domainUID\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;level\u0026quot;:\u0026quot;FINE\u0026quot;,\u0026quot;class\u0026quot;:\u0026quot;oracle.kubernetes.operator.DeploymentLiveness\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;run\u0026quot;,\u0026quot;timeInMillis\u0026quot;:1678183301194,\u0026quot;message\u0026quot;:\u0026quot;Liveness file last modified time set\u0026quot;,\u0026quot;exception\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;code\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;headers\u0026quot;:{},\u0026quot;body\u0026quot;:\u0026quot;\u0026quot;} {\u0026quot;timestamp\u0026quot;:\u0026quot;\u0026lt;DATE\u0026gt;\u0026quot;,\u0026quot;thread\u0026quot;:31,\u0026quot;fiber\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;namespace\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;domainUID\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;level\u0026quot;:\u0026quot;FINE\u0026quot;,\u0026quot;class\u0026quot;:\u0026quot;oracle.kubernetes.operator.DeploymentLiveness\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;run\u0026quot;,\u0026quot;timeInMillis\u0026quot;:1678183306195,\u0026quot;message\u0026quot;:\u0026quot;Liveness file last modified time set\u0026quot;,\u0026quot;exception\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;code\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;headers\u0026quot;:{},\u0026quot;body\u0026quot;:\u0026quot;\u0026quot;}   Create a namespace for Oracle Access Management   Run the following command to create a namespace for the domain:\n$ kubectl create namespace \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl create namespace oamns The output will look similar to the following:\nnamespace/oamns created   Run the following command to tag the namespace so the WebLogic Kubernetes Operator can manage it:\n$ kubectl label namespaces \u0026lt;domain_namespace\u0026gt; weblogic-operator=enabled For example:\n$ kubectl label namespaces oamns weblogic-operator=enabled The output will look similar to the following:\nnamespace/oamns labeled   Run the following command to check the label was created:\n$ kubectl describe namespace \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe namespace oamns The output will look similar to the following:\nName: oamns Labels: kubernetes.io/metadata.name=oamns weblogic-operator=enabled Annotations: \u0026lt;none\u0026gt; Status: Active No resource quota. No LimitRange resource.   Create a Kubernetes secret for the container registry In this section you create a secret that stores the credentials for the container registry where the OAM image is stored.\nIf you are not using a container registry and have loaded the images on each of the master and worker nodes, then there is no need to create the registry secret.\n  Run the following command to create the secret:\nkubectl create secret docker-registry \u0026#34;orclcred\u0026#34; --docker-server=\u0026lt;CONTAINER_REGISTRY\u0026gt; \\ --docker-username=\u0026#34;\u0026lt;USER_NAME\u0026gt;\u0026#34; \\ --docker-password=\u0026lt;PASSWORD\u0026gt; --docker-email=\u0026lt;EMAIL_ID\u0026gt; \\ --namespace=\u0026lt;domain_namespace\u0026gt; For example, if using Oracle Container Registry:\nkubectl create secret docker-registry \u0026#34;orclcred\u0026#34; --docker-server=container-registry.oracle.com \\ --docker-username=\u0026#34;user@example.com\u0026#34; \\ --docker-password=password --docker-email=user@example.com \\ --namespace=oamns Replace \u0026lt;USER_NAME\u0026gt; and \u0026lt;PASSWORD\u0026gt; with the credentials for the registry with the following caveats:\n  If using Oracle Container Registry to pull the OAM container image, this is the username and password used to login to Oracle Container Registry. Before you can use this image you must login to Oracle Container Registry, navigate to Middleware \u0026gt; oam_cpu and accept the license agreement.\n  If using your own container registry to store the OAM container image, this is the username and password (or token) for your container registry.\n  The output will look similar to the following:\nsecret/orclcred created   Create OAM Domains Using WDT Models If you want to create an OAM domain using WDT models, ignore everything else on this page and move directly to Create OAM Domains Using WDT Models.\nCreate OAM Domains Using WLST Scripts If you want to create an OAM domain using WLST scripts, follow the rest of the instructions below.\na. RCU schema creation\nb. Creating Kubernetes secrets for the domain and RCU\nc. Create a Kubernetes persistent volume and persistent volume claim\nRCU schema creation In this section you create the RCU schemas in the Oracle Database.\nBefore following the steps in this section, make sure that the database and listener are up and running and you can connect to the database via SQL*Plus or other client tool.\n  If using Oracle Container Registry or your own container registry for your OAM container image, run the following command to create a helper pod to run RCU:\n$ kubectl run --image=\u0026lt;image_name-from-registry\u0026gt;:\u0026lt;tag\u0026gt; --image-pull-policy=\u0026#34;IfNotPresent\u0026#34; --overrides=\u0026#39;{\u0026#34;apiVersion\u0026#34;: \u0026#34;v1\u0026#34;, \u0026#34;spec\u0026#34;:{\u0026#34;imagePullSecrets\u0026#34;: [{\u0026#34;name\u0026#34;: \u0026#34;orclcred\u0026#34;}]}}\u0026#39; helper -n \u0026lt;domain_namespace\u0026gt; -- sleep infinity For example:\n$ kubectl run --image=container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January\u0026#39;25\u0026gt; --image-pull-policy=\u0026#34;IfNotPresent\u0026#34; --overrides=\u0026#39;{\u0026#34;apiVersion\u0026#34;: \u0026#34;v1\u0026#34;,\u0026#34;spec\u0026#34;:{\u0026#34;imagePullSecrets\u0026#34;: [{\u0026#34;name\u0026#34;: \u0026#34;orclcred\u0026#34;}]}}\u0026#39; helper -n oamns -- sleep infinity If you are not using a container registry and have loaded the image on each of the master and worker nodes, run the following command:\n$ kubectl run helper --image \u0026lt;image\u0026gt;:\u0026lt;tag\u0026gt; -n oamns -- sleep infinity For example:\n$ kubectl run helper --image oracle/oam:12.2.1.4-jdk8-ol8-\u0026lt;January\u0026#39;25\u0026gt; -n oamns -- sleep infinity The output will look similar to the following:\npod/helper created   Run the following command to check the pod is running:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE helper 1/1 Running 0 3m Note: If you are pulling the image from a container registry it may take several minutes before the pod has a STATUS of 1\\1. While the pod is starting you can check the status of the pod, by running the following command:\n$ kubectl describe pod helper -n oamns   Run the following command to start a bash shell in the helper pod:\n$ kubectl exec -it helper -n \u0026lt;domain_namespace\u0026gt; -- /bin/bash For example:\n$ kubectl exec -it helper -n oamns -- /bin/bash This will take you into a bash shell in the running helper pod:\n[oracle@helper ~]$   In the helper bash shell run the following commands to set the environment:\n[oracle@helper ~]$ export CONNECTION_STRING=\u0026lt;db_host.domain\u0026gt;:\u0026lt;db_port\u0026gt;/\u0026lt;service_name\u0026gt; [oracle@helper ~]$ export RCUPREFIX=\u0026lt;rcu_schema_prefix\u0026gt; [oracle@helper ~]$ echo -e \u0026lt;db_pwd\u0026gt;\u0026#34;\\n\u0026#34;\u0026lt;rcu_schema_pwd\u0026gt; \u0026gt; /tmp/pwd.txt [oracle@helper ~]$ cat /tmp/pwd.txt where:\n\u0026lt;db_host.domain\u0026gt;:\u0026lt;db_port\u0026gt;/\u0026lt;service_name\u0026gt;\tis your database connect string\n\u0026lt;rcu_schema_prefix\u0026gt; is the RCU schema prefix you want to set\n\u0026lt;db_pwd\u0026gt; is the SYS password for the database\n\u0026lt;rcu_schema_pwd\u0026gt; is the password you want to set for the \u0026lt;rcu_schema_prefix\u0026gt;\nFor example:\n[oracle@helper ~]$ export CONNECTION_STRING=mydatabasehost.example.com:1521/orcl.example.com [oracle@helper ~]$ export RCUPREFIX=OAMK8S [oracle@helper ~]$ echo -e \u0026lt;password\u0026gt;\u0026#34;\\n\u0026#34;\u0026lt;password\u0026gt; \u0026gt; /tmp/pwd.txt [oracle@helper ~]$ cat /tmp/pwd.txt \u0026lt;password\u0026gt; \u0026lt;password\u0026gt;   In the helper bash shell run the following command to create the RCU schemas in the database:\n$ [oracle@helper ~]$ /u01/oracle/oracle_common/bin/rcu -silent -createRepository -databaseType ORACLE -connectString \\ $CONNECTION_STRING -dbUser sys -dbRole sysdba -useSamePasswordForAllSchemaUsers true \\ -selectDependentsForComponents true -schemaPrefix $RCUPREFIX -component MDS -component IAU \\ -component IAU_APPEND -component IAU_VIEWER -component OPSS -component WLS -component STB -component OAM -f \u0026lt; /tmp/pwd.txt The output will look similar to the following:\nRCU Logfile: /tmp/RCU\u0026lt;DATE\u0026gt;/logs/rcu.log Processing command line .... Repository Creation Utility - Checking Prerequisites Checking Global Prerequisites Repository Creation Utility - Checking Prerequisites Checking Component Prerequisites Repository Creation Utility - Creating Tablespaces Validating and Creating Tablespaces Create tablespaces in the repository database Repository Creation Utility - Create Repository Create in progress. Executing pre create operations Percent Complete: 18 Percent Complete: 18 Percent Complete: 19 Percent Complete: 20 Percent Complete: 21 Percent Complete: 21 Percent Complete: 22 Percent Complete: 22 Creating Common Infrastructure Services(STB) Percent Complete: 30 Percent Complete: 30 Percent Complete: 39 Percent Complete: 39 Percent Complete: 39 Creating Audit Services Append(IAU_APPEND) Percent Complete: 46 Percent Complete: 46 Percent Complete: 55 Percent Complete: 55 Percent Complete: 55 Creating Audit Services Viewer(IAU_VIEWER) Percent Complete: 62 Percent Complete: 62 Percent Complete: 63 Percent Complete: 63 Percent Complete: 64 Percent Complete: 64 Creating Metadata Services(MDS) Percent Complete: 73 Percent Complete: 73 Percent Complete: 73 Percent Complete: 74 Percent Complete: 74 Percent Complete: 75 Percent Complete: 75 Percent Complete: 75 Creating Weblogic Services(WLS) Percent Complete: 80 Percent Complete: 80 Percent Complete: 83 Percent Complete: 83 Percent Complete: 91 Percent Complete: 98 Percent Complete: 98 Creating Audit Services(IAU) Percent Complete: 100 Creating Oracle Platform Security Services(OPSS) Creating Oracle Access Manager(OAM) Executing post create operations Repository Creation Utility: Create - Completion Summary Database details: ----------------------------- Host Name : mydatabasehost.example.com Port : 1521 Service Name : ORCL.EXAMPLE.COM Connected As : sys Prefix for (prefixable) Schema Owners : OAMK8S RCU Logfile : /tmp/RCU\u0026lt;DATE\u0026gt;/logs/rcu.log Component schemas created: ----------------------------- Component Status Logfile Common Infrastructure Services Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/stb.log Oracle Platform Security Services Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/opss.log Oracle Access Manager Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/oam.log Audit Services Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/iau.log Audit Services Append Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/iau_append.log Audit Services Viewer Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/iau_viewer.log Metadata Services Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/mds.log WebLogic Services Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/wls.log Repository Creation Utility - Create : Operation Completed [oracle@helper ~]$   Exit the helper bash shell by issuing the command exit.\n  Creating Kubernetes secrets for the domain and RCU   Create a Kubernetes secret for the domain using the create-weblogic-credentials script in the same Kubernetes namespace as the domain:\n$ cd $WORKDIR/kubernetes/create-weblogic-domain-credentials $ ./create-weblogic-credentials.sh -u weblogic -p \u0026lt;pwd\u0026gt; -n \u0026lt;domain_namespace\u0026gt; -d \u0026lt;domain_uid\u0026gt; -s \u0026lt;kubernetes_domain_secret\u0026gt; where:\n-u weblogic is the WebLogic username\n-p \u0026lt;pwd\u0026gt; is the password for the weblogic user\n-n \u0026lt;domain_namespace\u0026gt; is the domain namespace\n-d \u0026lt;domain_uid\u0026gt; is the domain UID to be created. The default is domain1 if not specified\n-s \u0026lt;kubernetes_domain_secret\u0026gt; is the name you want to create for the secret for this namespace. The default is to use the domainUID if not specified\nFor example:\n$ cd $WORKDIR/kubernetes/create-weblogic-domain-credentials $ ./create-weblogic-credentials.sh -u weblogic -p \u0026lt;password\u0026gt; -n oamns -d accessdomain -s accessdomain-credentials The output will look similar to the following:\nsecret/accessdomain-credentials created secret/accessdomain-credentials labeled The secret accessdomain-credentials has been successfully created in the oamns namespace.   Verify the secret is created using the following command:\n$ kubectl get secret \u0026lt;kubernetes_domain_secret\u0026gt; -o yaml -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get secret accessdomain-credentials -o yaml -n oamns The output will look similar to the following:\napiVersion: v1 data: password: V2VsY29tZTE= username: d2VibG9naWM= kind: Secret metadata: creationTimestamp: \u0026quot;\u0026lt;DATE\u0026gt;\u0026quot; labels: weblogic.domainName: accessdomain weblogic.domainUID: accessdomain name: accessdomain-credentials namespace: oamns resourceVersion: \u0026quot;29428101\u0026quot; uid: 6dac0561-d157-4144-9ed7-c475a080eb3a type: Opaque   Create a Kubernetes secret for RCU using the create-weblogic-credentials script in the same Kubernetes namespace as the domain:\n$ cd $WORKDIR/kubernetes/create-rcu-credentials $ ./create-rcu-credentials.sh -u \u0026lt;rcu_prefix\u0026gt; -p \u0026lt;rcu_schema_pwd\u0026gt; -a sys -q \u0026lt;sys_db_pwd\u0026gt; -d \u0026lt;domain_uid\u0026gt; -n \u0026lt;domain_namespace\u0026gt; -s \u0026lt;kubernetes_rcu_secret\u0026gt; where:\n-u \u0026lt;rcu_prefix\u0026gt; is the name of the RCU schema prefix created previously\n-p \u0026lt;rcu_schema_pwd\u0026gt; is the password for the RCU schema prefix\n-q \u0026lt;sys_db_pwd\u0026gt; is the sys database password\n-d \u0026lt;domain_uid\u0026gt; is the domain_uid that you created earlier\n-n \u0026lt;domain_namespace\u0026gt; is the domain namespace\n-s \u0026lt;kubernetes_rcu_secret\u0026gt; is the name of the rcu secret to create\nFor example:\n$ cd $WORKDIR/kubernetes/create-rcu-credentials $ ./create-rcu-credentials.sh -u OAMK8S -p \u0026lt;password\u0026gt; -a sys -q \u0026lt;password\u0026gt; -d accessdomain -n oamns -s accessdomain-rcu-credentials The output will look similar to the following:\nsecret/accessdomain-rcu-credentials created secret/accessdomain-rcu-credentials labeled The secret accessdomain-rcu-credentials has been successfully created in the oamns namespace.   Verify the secret is created using the following command:\n$ kubectl get secret \u0026lt;kubernetes_rcu_secret\u0026gt; -o yaml -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get secret accessdomain-rcu-credentials -o yaml -n oamns The output will look similar to the following:\napiVersion: v1 data: password: T3JhY2xlXzEyMw== sys_password: T3JhY2xlXzEyMw== sys_username: c3lz username: T0FNSzhT kind: Secret metadata: creationTimestamp: \u0026quot;\u0026lt;DATE\u0026gt;\u0026quot; labels: weblogic.domainName: accessdomain weblogic.domainUID: accessdomain name: accessdomain-rcu-credentials namespace: oamns resourceVersion: \u0026quot;29428242\u0026quot; uid: 1b81b6e0-fd7d-40b8-a060-454c8d23f4dc type: Opaque   Create a Kubernetes persistent volume and persistent volume claim As referenced in Prerequisites the nodes in the Kubernetes cluster must have access to a persistent volume such as a Network File System (NFS) mount or a shared file system.\nA persistent volume is the same as a disk mount but is inside a container. A Kubernetes persistent volume is an arbitrary name (determined in this case, by Oracle) that is mapped to a physical volume on a disk.\nWhen a container is started, it needs to mount that volume. The physical volume should be on a shared disk accessible by all the Kubernetes worker nodes because it is not known on which worker node the container will be started. In the case of Identity and Access Management, the persistent volume does not get erased when a container stops. This enables persistent configurations.\nThe example below uses an NFS mounted volume (\u0026lt;persistent_volume\u0026gt;/accessdomainpv). Other volume types can also be used. See the official Kubernetes documentation for Volumes.\nNote: The persistent volume directory needs to be accessible to both the master and worker node(s). In this example /scratch/shared/accessdomainpv is accessible from all nodes via NFS.\nTo create a Kubernetes persistent volume, perform the following steps:\n  Make a backup copy of the create-pv-pvc-inputs.yaml file and create required directories:\n$ cd $WORKDIR/kubernetes/create-weblogic-domain-pv-pvc $ cp create-pv-pvc-inputs.yaml create-pv-pvc-inputs.yaml.orig $ mkdir output $ mkdir -p \u0026lt;persistent_volume\u0026gt;/accessdomainpv $ sudo chown -R 1000:0 \u0026lt;persistent_volume\u0026gt;/accessdomainpv For example:\n$ cd $WORKDIR/kubernetes/create-weblogic-domain-pv-pvc $ cp create-pv-pvc-inputs.yaml create-pv-pvc-inputs.yaml.orig $ mkdir output $ mkdir -p /scratch/shared/accessdomainpv $ sudo chown -R 1000:0 /scratch/shared/accessdomainpv   On the master node run the following command to ensure it is possible to read and write to the persistent volume:\ncd \u0026lt;persistent_volume\u0026gt;/accessdomainpv touch filemaster.txt ls filemaster.txt For example:\ncd /scratch/shared/accessdomainpv touch filemaster.txt ls filemaster.txt On the first worker node run the following to ensure it is possible to read and write to the persistent volume:\ncd /scratch/shared/accessdomainpv ls filemaster.txt touch fileworker1.txt ls fileworker1.txt Repeat the above for any other worker nodes e.g fileworker2.txt etc. Once proven that it\u0026rsquo;s possible to read and write from each node to the persistent volume, delete the files created.\n  Navigate to $WORKDIR/kubernetes/create-weblogic-domain-pv-pvc:\n$ cd $WORKDIR/kubernetes/create-weblogic-domain-pv-pvc and edit the create-pv-pvc-inputs.yaml file and update the following parameters to reflect your settings. Save the file when complete:\nbaseName: \u0026lt;domain\u0026gt; domainUID: \u0026lt;domain_uid\u0026gt; namespace: \u0026lt;domain_namespace\u0026gt; weblogicDomainStorageType: NFS weblogicDomainStorageNFSServer: \u0026lt;nfs_server\u0026gt; weblogicDomainStoragePath: \u0026lt;physical_path_of_persistent_storage\u0026gt; weblogicDomainStorageSize: 10Gi For example:\n\t# The base name of the pv and pvc baseName: domain # Unique ID identifying a domain. # If left empty, the generated pv can be shared by multiple domains # This ID must not contain an underscope (\u0026quot;_\u0026quot;), and must be lowercase and unique across all domains in a Kubernetes cluster. domainUID: accessdomain # Name of the namespace for the persistent volume claim namespace: oamns ... # Persistent volume type for the persistent storage. # The value must be 'HOST_PATH' or 'NFS'. # If using 'NFS', weblogicDomainStorageNFSServer must be specified. weblogicDomainStorageType: NFS # The server name or ip address of the NFS server to use for the persistent storage. # The following line must be uncomment and customized if weblogicDomainStorateType is NFS: weblogicDomainStorageNFSServer: mynfsserver # Physical path of the persistent storage. # When weblogicDomainStorageType is set to HOST_PATH, this value should be set the to path to the # domain storage on the Kubernetes host. # When weblogicDomainStorageType is set to NFS, then weblogicDomainStorageNFSServer should be set # to the IP address or name of the DNS server, and this value should be set to the exported path # on that server. # Note that the path where the domain is mounted in the WebLogic containers is not affected by this # setting, that is determined when you create your domain. # The following line must be uncomment and customized: weblogicDomainStoragePath: /scratch/shared/accessdomainpv # Reclaim policy of the persistent storage # The valid values are: 'Retain', 'Delete', and 'Recycle' weblogicDomainStorageReclaimPolicy: Retain # Total storage allocated to the persistent storage. weblogicDomainStorageSize: 10Gi   Execute the create-pv-pvc.sh script to create the PV and PVC configuration files:\n$ ./create-pv-pvc.sh -i create-pv-pvc-inputs.yaml -o output The output will be similar to the following:\nInput parameters being used export version=\u0026quot;create-weblogic-sample-domain-pv-pvc-inputs-v1\u0026quot; export baseName=\u0026quot;domain\u0026quot; export domainUID=\u0026quot;accessdomain\u0026quot; export namespace=\u0026quot;oamns\u0026quot; export weblogicDomainStorageType=\u0026quot;NFS\u0026quot; export weblogicDomainStorageNFSServer=\u0026quot;mynfsserver\u0026quot; export weblogicDomainStoragePath=\u0026quot;/scratch/shared/accessdomainpv\u0026quot; export weblogicDomainStorageReclaimPolicy=\u0026quot;Retain\u0026quot; export weblogicDomainStorageSize=\u0026quot;10Gi\u0026quot; Generating output/pv-pvcs/accessdomain-domain-pv.yaml Generating output/pv-pvcs/accessdomain-domain-pvc.yaml The following files were generated: output/pv-pvcs/accessdomain-domain-pv.yaml.yaml output/pv-pvcs/accessdomain-domain-pvc.yaml   Run the following to show the files are created:\n$ ls output/pv-pvcs accessdomain-domain-pv.yaml accessdomain-domain-pvc.yaml create-pv-pvc-inputs.yaml   Run the following kubectl command to create the PV and PVC in the domain namespace:\n$ kubectl create -f output/pv-pvcs/accessdomain-domain-pv.yaml -n \u0026lt;domain_namespace\u0026gt; $ kubectl create -f output/pv-pvcs/accessdomain-domain-pvc.yaml -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl create -f output/pv-pvcs/accessdomain-domain-pv.yaml -n oamns $ kubectl create -f output/pv-pvcs/accessdomain-domain-pvc.yaml -n oamns The output will look similar to the following:\npersistentvolume/accessdomain-domain-pv created persistentvolumeclaim/accessdomain-domain-pvc created   Run the following commands to verify the PV and PVC were created successfully:\n$ kubectl describe pv \u0026lt;pv_name\u0026gt; $ kubectl describe pvc \u0026lt;pvc_name\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe pv accessdomain-domain-pv $ kubectl describe pvc accessdomain-domain-pvc -n oamns The output will look similar to the following:\n$ kubectl describe pv accessdomain-domain-pv Name: accessdomain-domain-pv Labels: weblogic.domainUID=accessdomain Annotations: pv.kubernetes.io/bound-by-controller: yes Finalizers: [kubernetes.io/pv-protection] StorageClass: accessdomain-domain-storage-class Status: Bound Claim: oamns/accessdomain-domain-pvc Reclaim Policy: Retain Access Modes: RWX VolumeMode: Filesystem Capacity: 10Gi Node Affinity: \u0026lt;none\u0026gt; Message: Source: Type: NFS (an NFS mount that lasts the lifetime of a pod) Server: mynfsserver Path: /scratch/shared/accessdomainpv ReadOnly: false Events: \u0026lt;none\u0026gt; $ kubectl describe pvc accessdomain-domain-pvc -n oamns Name: accessdomain-domain-pvc Namespace: oamns StorageClass: accessdomain-domain-storage-class Status: Bound Volume: accessdomain-domain-pv Labels: weblogic.domainUID=accessdomain Annotations: pv.kubernetes.io/bind-completed: yes pv.kubernetes.io/bound-by-controller: yes Finalizers: [kubernetes.io/pvc-protection] Capacity: 10Gi Access Modes: RWX VolumeMode: Filesystem Events: \u0026lt;none\u0026gt; Mounted By: \u0026lt;none\u0026gt; You are now ready to create the OAM domain with WLST scripts as as per Create OAM Domains Using WLST scripts.\n  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/prepare-your-environment/",
	"title": "Prepare your environment",
	"tags": [],
	"description": "Preparation to deploy OIG on Kubernetes",
	"content": "To prepare for Oracle Identity Governance 12.2.1.4 deployment in a Kubernetes environment, complete the following steps:\n  Check the Kubernetes cluster is ready\n  Obtain the OIG container image\n  Setup the code repository to deploy OIG domains\n  Install the WebLogic Kubernetes Operator\n  Create a namespace for Oracle Identity Governance\n  Create a Kubernetes secret for the container registry\n  Create OIG Domains Using WDT Models\n  Create OIG Domains Using WLST Scripts\na. RCU schema creation\nb. Creating Kubernetes secrets for the domain and RCU\nc. Create a Kubernetes persistent volume and persistent volume claim\n  Check the Kubernetes cluster is ready As per the Prerequisites a Kubernetes cluster should have already been configured.\n  Run the following command on the master node to check the cluster and worker nodes are running:\n$ kubectl get nodes,pods -n kube-system The output will look similar to the following:\nNAME STATUS ROLES AGE VERSION node/worker-node1 Ready \u0026lt;none\u0026gt; 17h v1.29.9+3.el8 node/worker-node2 Ready \u0026lt;none\u0026gt; 17h v1.29.9+3.el8 node/master-node Ready master 23h v1.29.9+3.el8 NAME READY STATUS RESTARTS AGE pod/coredns-66bff467f8-fnhbq 1/1 Running 0 23h pod/coredns-66bff467f8-xtc8k 1/1 Running 0 23h pod/etcd-master 1/1 Running 0 21h pod/kube-apiserver-master-node 1/1 Running 0 21h pod/kube-controller-manager-master-node 1/1 Running 0 21h pod/kube-flannel-ds-amd64-lxsfw 1/1 Running 0 17h pod/kube-flannel-ds-amd64-pqrqr 1/1 Running 0 17h pod/kube-flannel-ds-amd64-wj5nh 1/1 Running 0 17h pod/kube-proxy-2kxv2 1/1 Running 0 17h pod/kube-proxy-82vvj 1/1 Running 0 17h pod/kube-proxy-nrgw9 1/1 Running 0 23h pod/kube-scheduler-master 1/1 Running 0 21h   Obtain the OIG container image The OIG 12.2.1.4 Kubernetes deployment requires access to an OIG container image. The image can be obtained in the following ways:\n Prebuilt OIG container image Build your own OIG container image using WebLogic Image Tool  Prebuilt OIG container image The latest prebuilt OIG January 2025 container image can be downloaded from Oracle Container Registry. This image is prebuilt by Oracle and includes Oracle Identity Governance 12.2.1.4.0, the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program..\nNote: Before using this image you must login to Oracle Container Registry, navigate to Middleware \u0026gt; oig_cpu and accept the license agreement.\nYou can use this image in the following ways:\n Pull the container image from the Oracle Container Registry automatically during the OIG Kubernetes deployment. Manually pull the container image from the Oracle Container Registry and then upload it to your own container registry. Manually pull the container image from the Oracle Container Registry and manually stage it on the master node and each worker node.  Build your own OIG container image using WebLogic Image Tool You can build your own OIG container image using the WebLogic Image Tool. This is recommended if you need to apply one off patches to a Prebuilt OIG container image. For more information about building your own container image with WebLogic Image Tool, see Create or update image.\nYou can use an image built with WebLogic Image Tool in the following ways:\n Manually upload them to your own container registry. Manually stage them on the master node and each worker node.  Note: This documentation does not tell you how to pull or push the above images into a private container registry, or stage them on the master and worker nodes. Details of this can be found in the Enterprise Deployment Guide.\nSetup the code repository to deploy OIG domains Oracle Identity Governance domain deployment on Kubernetes leverages the WebLogic Kubernetes Operator infrastructure. For deploying the OIG domains, you need to set up the deployment scripts on the master node as below:\n  Create a working directory to setup the source code.\n$ mkdir \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/OIGK8S   Download the latest OIG deployment scripts from the OIG repository.\n$ cd \u0026lt;workdir\u0026gt; $ git clone https://github.com/oracle/fmw-kubernetes.git For example:\n$ cd /scratch/OIGK8S $ git clone https://github.com/oracle/fmw-kubernetes.git   Set the $WORKDIR environment variable as follows:\n$ export WORKDIR=\u0026lt;workdir\u0026gt;/fmw-kubernetes/OracleIdentityGovernance For example:\n$ export WORKDIR=/scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance   Run the following command and see if the WebLogic custom resource definition name already exists:\n$ kubectl get crd In the output you should see:\nNo resources found in default namespace. If you see any of the following:\nNAME AGE clusters.weblogic.oracle 5d domains.weblogic.oracle 5d then run the following command to delete the existing crd\u0026rsquo;s:\n$ kubectl delete crd clusters.weblogic.oracle $ kubectl delete crd domains.weblogic.oracle   Install the WebLogic Kubernetes Operator   On the master node run the following command to create a namespace for the operator:\n$ kubectl create namespace \u0026lt;sample-kubernetes-operator-ns\u0026gt; For example:\n$ kubectl create namespace opns The output will look similar to the following:\nnamespace/opns created   Create a service account for the operator in the operator\u0026rsquo;s namespace by running the following command:\n$ kubectl create serviceaccount -n \u0026lt;sample-kubernetes-operator-ns\u0026gt; \u0026lt;sample-kubernetes-operator-sa\u0026gt; For example:\n$ kubectl create serviceaccount -n opns op-sa The output will look similar to the following:\nserviceaccount/op-sa created   Run the following helm command to install and start the operator:\n$ cd $WORKDIR $ helm install weblogic-kubernetes-operator kubernetes/charts/weblogic-operator \\ --namespace \u0026lt;sample-kubernetes-operator-ns\u0026gt; \\ --set image=ghcr.io/oracle/weblogic-kubernetes-operator:4.2.10 \\ --set serviceAccount=\u0026lt;sample-kubernetes-operator-sa\u0026gt; \\ --set “enableClusterRoleBinding=true” \\ --set \u0026#34;domainNamespaceSelectionStrategy=LabelSelector\u0026#34; \\ --set \u0026#34;domainNamespaceLabelSelector=weblogic-operator\\=enabled\u0026#34; \\ --set \u0026#34;javaLoggingLevel=FINE\u0026#34; --wait For example:\n$ cd $WORKDIR $ helm install weblogic-kubernetes-operator kubernetes/charts/weblogic-operator \\ --namespace opns \\ --set image=ghcr.io/oracle/weblogic-kubernetes-operator:4.2.10 \\ --set serviceAccount=op-sa \\ --set \u0026#34;enableClusterRoleBinding=true\u0026#34; \\ --set \u0026#34;domainNamespaceSelectionStrategy=LabelSelector\u0026#34; \\ --set \u0026#34;domainNamespaceLabelSelector=weblogic-operator\\=enabled\u0026#34; \\ --set \u0026#34;javaLoggingLevel=FINE\u0026#34; --wait The output will look similar to the following:\nNAME: weblogic-kubernetes-operator LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: opns STATUS: deployed REVISION: 1 TEST SUITE: None   Verify that the operator\u0026rsquo;s pod and services are running by executing the following command:\n$ kubectl get all -n \u0026lt;sample-kubernetes-operator-ns\u0026gt; For example:\n$ kubectl get all -n opns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE pod/weblogic-operator-b7d6df78c-vxnpt 1/1 Running 0 33s pod/weblogic-operator-webhook-7996b8b58b-68l8s 1/1 Running 0 33s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/weblogic-operator-webhook-svc ClusterIP 10.109.163.130 \u0026lt;none\u0026gt; 8083/TCP,8084/TCP 34s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/weblogic-operator 1/1 1 1 33s deployment.apps/weblogic-operator-webhook 1/1 1 1 33s NAME DESIRED CURRENT READY AGE replicaset.apps/weblogic-operator-b7d6df78c 1 1 1 33s replicaset.apps/weblogic-operator-webhook-7996b8b58b 1 1 1 33s   Verify the operator pod\u0026rsquo;s log:\n$ kubectl logs -n \u0026lt;sample-kubernetes-operator-ns\u0026gt; -c weblogic-operator deployments/weblogic-operator For example:\n$ kubectl logs -n opns -c weblogic-operator deployments/weblogic-operator The output will look similar to the following:\n{\u0026quot;timestamp\u0026quot;:\u0026quot;\u0026lt;DATE\u0026gt;\u0026quot;,\u0026quot;thread\u0026quot;:37,\u0026quot;fiber\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;namespace\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;domainUID\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;level\u0026quot;:\u0026quot;FINE\u0026quot;,\u0026quot;class\u0026quot;:\u0026quot;oracle.kubernetes.operator.DeploymentLiveness\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;run\u0026quot;,\u0026quot;timeInMillis\u0026quot;:1678902295852,\u0026quot;message\u0026quot;:\u0026quot;Liveness file last modified time set\u0026quot;,\u0026quot;exception\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;code\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;headers\u0026quot;:{},\u0026quot;body\u0026quot;:\u0026quot;\u0026quot;} {\u0026quot;timestamp\u0026quot;:\u0026quot;\u0026lt;DATE\u0026gt;\u0026quot;,\u0026quot;thread\u0026quot;:42,\u0026quot;fiber\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;namespace\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;domainUID\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;level\u0026quot;:\u0026quot;FINE\u0026quot;,\u0026quot;class\u0026quot;:\u0026quot;oracle.kubernetes.operator.DeploymentLiveness\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;run\u0026quot;,\u0026quot;timeInMillis\u0026quot;:1678902300853,\u0026quot;message\u0026quot;:\u0026quot;Liveness file last modified time set\u0026quot;,\u0026quot;exception\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;code\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;headers\u0026quot;:{},\u0026quot;body\u0026quot;:\u0026quot;\u0026quot;} {\u0026quot;timestamp\u0026quot;:\u0026quot;\u0026lt;DATE\u0026gt;\u0026quot;,\u0026quot;thread\u0026quot;:21,\u0026quot;fiber\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;namespace\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;domainUID\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;level\u0026quot;:\u0026quot;FINE\u0026quot;,\u0026quot;class\u0026quot;:\u0026quot;oracle.kubernetes.operator.DeploymentLiveness\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;run\u0026quot;,\u0026quot;timeInMillis\u0026quot;:1678902305854,\u0026quot;message\u0026quot;:\u0026quot;Liveness file last modified time set\u0026quot;,\u0026quot;exception\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;code\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;headers\u0026quot;:{},\u0026quot;body\u0026quot;:\u0026quot;\u0026quot;}   Create a namespace for Oracle Identity Governance   Run the following command to create a namespace for the domain:\n$ kubectl create namespace \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl create namespace oigns The output will look similar to the following:\nnamespace/oigns created   Run the following command to tag the namespace so the WebLogic Kubernetes Operator can manage it:\n$ kubectl label namespaces \u0026lt;domain_namespace\u0026gt; weblogic-operator=enabled For example:\n$ kubectl label namespaces oigns weblogic-operator=enabled The output will look similar to the following:\nnamespace/oigns labeled   Run the following command to check the label was created:\n$ kubectl describe namespace \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe namespace oigns The output will look similar to the following:\nName: oigns Labels: kubernetes.io/metadata.name=oigns weblogic-operator=enabled Annotations: \u0026lt;none\u0026gt; Status: Active No resource quota. No LimitRange resource.   Create a Kubernetes secret for the container registry In this section you create a secret that stores the credentials for the container registry where the OIG image is stored.\nIf you are not using a container registry and have loaded the images on each of the master and worker nodes, then there is no need to create the registry secret.\n  Run the following command to create the secret:\nkubectl create secret docker-registry \u0026#34;orclcred\u0026#34; --docker-server=\u0026lt;CONTAINER_REGISTRY\u0026gt; \\ --docker-username=\u0026#34;\u0026lt;USER_NAME\u0026gt;\u0026#34; \\ --docker-password=\u0026lt;PASSWORD\u0026gt; --docker-email=\u0026lt;EMAIL_ID\u0026gt; \\ --namespace=\u0026lt;domain_namespace\u0026gt; For example, if using Oracle Container Registry:\nkubectl create secret docker-registry \u0026#34;orclcred\u0026#34; --docker-server=container-registry.oracle.com \\ --docker-username=\u0026#34;user@example.com\u0026#34; \\ --docker-password=password --docker-email=user@example.com \\ --namespace=oigns Replace \u0026lt;USER_NAME\u0026gt; and \u0026lt;PASSWORD\u0026gt; with the credentials for the registry with the following caveats:\n  If using Oracle Container Registry to pull the OIG container image, this is the username and password used to login to Oracle Container Registry. Before you can use this image you must login to Oracle Container Registry, navigate to Middleware \u0026gt; oig_cpu and accept the license agreement.\n  If using your own container registry to store the OIG container image, this is the username and password (or token) for your container registry.\n  The output will look similar to the following:\nsecret/orclcred created   Create OIG Domains Using WDT Models If you want to create an OIG domain using WDT models, ignore everything else on this page and move directly to Create OIG Domains Using WDT Models.\nCreate OIG Domains Using WLST Scripts If you want to create an OIG domain using WLST scripts, follow the rest of the instructions below.\na. RCU schema creation\nb. Creating Kubernetes secrets for the domain and RCU\nc. Create a Kubernetes persistent volume and persistent volume claim\nRCU schema creation In this section you create the RCU schemas in the Oracle Database.\nBefore following the steps in this section, make sure that the database and listener are up and running and you can connect to the database via SQL*Plus or other client tool.\n  If using Oracle Container Registry or your own container registry for your OIG container image, run the following command to create a helper pod to run RCU:\n$ kubectl run --image=\u0026lt;image_name-from-registry\u0026gt; --image-pull-policy=\u0026#34;IfNotPresent\u0026#34; --overrides=\u0026#39;{\u0026#34;apiVersion\u0026#34;: \u0026#34;v1\u0026#34;, \u0026#34;spec\u0026#34;:{\u0026#34;imagePullSecrets\u0026#34;: [{\u0026#34;name\u0026#34;: \u0026#34;orclcred\u0026#34;}]}}\u0026#39; helper -n \u0026lt;domain_namespace\u0026gt; -- sleep infinity For example:\n$ kubectl run --image=container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January`25\u0026gt; --image-pull-policy=\u0026#34;IfNotPresent\u0026#34; --overrides=\u0026#39;{\u0026#34;apiVersion\u0026#34;: \u0026#34;v1\u0026#34;,\u0026#34;spec\u0026#34;:{\u0026#34;imagePullSecrets\u0026#34;: [{\u0026#34;name\u0026#34;: \u0026#34;orclcred\u0026#34;}]}}\u0026#39; helper -n oigns -- sleep infinity If you are not using a container registry and have loaded the image on each of the master and worker nodes, run the following command:\n$ kubectl run helper --image \u0026lt;image\u0026gt; -n oigns -- sleep infinity For example:\n$ kubectl run helper --image oracle/oig:12.2.1.4-jdk8-ol8-\u0026lt;January`25\u0026gt; -n oigns -- sleep infinity The output will look similar to the following:\npod/helper created   Run the following command to check the pod is running:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oigns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE helper 1/1 Running 0 3m Note: If you are pulling the image from a container registry it may take several minutes before the pod has a STATUS of 1\\1. While the pod is starting you can check the status of the pod, by running the following command:\n$ kubectl describe pod helper -n oigns   Run the following command to start a bash shell in the helper pod:\n$ kubectl exec -it helper -n \u0026lt;domain_namespace\u0026gt; -- /bin/bash For example:\n$ kubectl exec -it helper -n oigns -- /bin/bash This will take you into a bash shell in the running helper pod:\n[oracle@helper oracle]$   In the helper bash shell run the following commands to set the environment:\n[oracle@helper oracle]$ export DB_HOST=\u0026lt;db_host.domain\u0026gt; [oracle@helper oracle]$ export DB_PORT=\u0026lt;db_port\u0026gt; [oracle@helper oracle]$ export DB_SERVICE=\u0026lt;service_name\u0026gt; [oracle@helper oracle]$ export RCUPREFIX=\u0026lt;rcu_schema_prefix\u0026gt; [oracle@helper oracle]$ export RCU_SCHEMA_PWD=\u0026lt;rcu_schema_pwd\u0026gt; [oracle@helper oracle]$ echo -e \u0026lt;db_pwd\u0026gt;\u0026#34;\\n\u0026#34;\u0026lt;rcu_schema_pwd\u0026gt; \u0026gt; /tmp/pwd.txt [oracle@helper oracle]$ cat /tmp/pwd.txt where:\n\u0026lt;db_host.domain\u0026gt; is the database server hostname\n\u0026lt;db_port\u0026gt; is the database listener port\n\u0026lt;service_name\u0026gt; is the database service name\n\u0026lt;rcu_schema_prefix\u0026gt; is the RCU schema prefix you want to set. Note: The RCU schema prefix can only contain alpha-numeric characters, and contain no spaces, or other special characters. It must begin with a letter and be no longer than 8 characters.\n\u0026lt;rcu_schema_pwd\u0026gt; is the password you want to set for the \u0026lt;rcu_schema_prefix\u0026gt;\n\u0026lt;db_pwd\u0026gt; is the SYS password for the database\nFor example:\n[oracle@helper oracle]$ export DB_HOST=mydatabasehost.example.com [oracle@helper oracle]$ export DB_PORT=1521 [oracle@helper oracle]$ export DB_SERVICE=orcl.example.com [oracle@helper oracle]$ export RCUPREFIX=OIGK8S [oracle@helper oracle]$ export RCU_SCHEMA_PWD=\u0026lt;password\u0026gt; [oracle@helper oracle]$ echo -e \u0026lt;password\u0026gt;\u0026#34;\\n\u0026#34;\u0026lt;password\u0026gt; \u0026gt; /tmp/pwd.txt [oracle@helper oracle]$ cat /tmp/pwd.txt \u0026lt;password\u0026gt; \u0026lt;password\u0026gt;   In the helper bash shell run the following commands to create the RCU schemas in the database:\n[oracle@helper oracle]$ /u01/oracle/oracle_common/bin/rcu -silent -createRepository -databaseType ORACLE -connectString \\ $DB_HOST:$DB_PORT/$DB_SERVICE -dbUser sys -dbRole sysdba -useSamePasswordForAllSchemaUsers true \\ -selectDependentsForComponents true -schemaPrefix $RCUPREFIX -component OIM -component MDS -component SOAINFRA -component OPSS \\ -f \u0026lt; /tmp/pwd.txt The output will look similar to the following:\nRCU Logfile: /tmp/RCU\u0026lt;DATE\u0026gt;/logs/rcu.log Processing command line .... Repository Creation Utility - Checking Prerequisites Checking Global Prerequisites Repository Creation Utility - Checking Prerequisites Checking Component Prerequisites Repository Creation Utility - Creating Tablespaces Validating and Creating Tablespaces Create tablespaces in the repository database Repository Creation Utility - Create Repository Create in progress. Percent Complete: 10 Executing pre create operations Percent Complete: 25 Percent Complete: 25 Percent Complete: 26 Percent Complete: 27 Percent Complete: 28 Percent Complete: 28 Percent Complete: 29 Percent Complete: 29 Creating Common Infrastructure Services(STB) Percent Complete: 36 Percent Complete: 36 Percent Complete: 44 Percent Complete: 44 Percent Complete: 44 Creating Audit Services Append(IAU_APPEND) Percent Complete: 51 Percent Complete: 51 Percent Complete: 59 Percent Complete: 59 Percent Complete: 59 Creating Audit Services Viewer(IAU_VIEWER) Percent Complete: 66 Percent Complete: 66 Percent Complete: 67 Percent Complete: 67 Percent Complete: 68 Percent Complete: 68 Creating Metadata Services(MDS) Percent Complete: 76 Percent Complete: 76 Percent Complete: 76 Percent Complete: 77 Percent Complete: 77 Percent Complete: 78 Percent Complete: 78 Percent Complete: 78 Creating Weblogic Services(WLS) Percent Complete: 82 Percent Complete: 82 Percent Complete: 83 Percent Complete: 84 Percent Complete: 86 Percent Complete: 88 Percent Complete: 88 Percent Complete: 88 Creating User Messaging Service(UCSUMS) Percent Complete: 92 Percent Complete: 92 Percent Complete: 95 Percent Complete: 95 Percent Complete: 100 Creating Audit Services(IAU) Creating Oracle Platform Security Services(OPSS) Creating SOA Infrastructure(SOAINFRA) Creating Oracle Identity Manager(OIM) Executing post create operations Repository Creation Utility: Create - Completion Summary Database details: ----------------------------- Host Name : mydatabasehost.example.com Port : 1521 Service Name : ORCL.EXAMPLE.COM Connected As : sys Prefix for (prefixable) Schema Owners : OIGK8S RCU Logfile : /tmp/RCU\u0026lt;DATE\u0026gt;/logs/rcu.log Component schemas created: ----------------------------- Component Status Logfile Common Infrastructure Services Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/stb.log Oracle Platform Security Services Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/opss.log SOA Infrastructure Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/soainfra.log Oracle Identity Manager Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/oim.log User Messaging Service Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/ucsums.log Audit Services Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/iau.log Audit Services Append Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/iau_append.log Audit Services Viewer Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/iau_viewer.log Metadata Services Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/mds.log WebLogic Services Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/wls.log Repository Creation Utility - Create : Operation Completed [oracle@helper oracle]$   Run the following command to patch schemas in the database:\nThis command should be run if you are using an OIG image that contains OIG bundle patches. If using an OIG image without OIG bundle patches, then you can skip this step.\n [oracle@helper oracle]$ /u01/oracle/oracle_common/modules/thirdparty/org.apache.ant/1.10.5.0.0/apache-ant-1.10.5/bin/ant \\ -f /u01/oracle/idm/server/setup/deploy-files/automation.xml \\ run-patched-sql-files \\ -logger org.apache.tools.ant.NoBannerLogger \\ -logfile /u01/oracle/idm/server/bin/patch_oim_wls.log \\ -DoperationsDB.host=$DB_HOST \\ -DoperationsDB.port=$DB_PORT \\ -DoperationsDB.serviceName=$DB_SERVICE \\ -DoperationsDB.user=${RCUPREFIX}_OIM \\ -DOIM.DBPassword=$RCU_SCHEMA_PWD \\ -Dojdbc=/u01/oracle/oracle_common/modules/oracle.jdbc/ojdbc8.jar The output will look similar to the following:\nBuildfile: /u01/oracle/idm/server/setup/deploy-files/automation.xml   Verify the database was patched successfully by viewing the patch_oim_wls.log:\n[oracle@helper oracle]$ cat /u01/oracle/idm/server/bin/patch_oim_wls.log The output should look similar to below:\n... [sql] Executing resource: /u01/oracle/idm/server/db/oim/oracle/Upgrade/oim12cps4/list/oim12cps4_upg_ent_trg_bkp.sql [sql] Executing resource: /u01/oracle/idm/server/db/oim/oracle/Upgrade/oim12cps4/list/oim12cps4_upg_ent_trg_fix.sql [sql] Executing resource: /u01/oracle/idm/server/db/oim/oracle/Upgrade/oim12cps4/list/oim12cps4_upg_ent_trg_restore_bkp.sql [sql] Executing resource: /u01/oracle/idm/server/db/oim/oracle/Upgrade/oim12cps4/list/oim12cps4_ddl_alter_pwr_add_column.sql [sql] 74 of 74 SQL statements executed successfully BUILD SUCCESSFUL Total time: 6 seconds   Exit the helper bash shell by issuing the command exit.\n  Creating Kubernetes secrets for the domain and RCU   Create a Kubernetes secret for the domain using the create-weblogic-credentials script in the same Kubernetes namespace as the domain:\n$ cd $WORKDIR/kubernetes/create-weblogic-domain-credentials $ ./create-weblogic-credentials.sh -u weblogic -p \u0026lt;pwd\u0026gt; -n \u0026lt;domain_namespace\u0026gt; -d \u0026lt;domain_uid\u0026gt; -s \u0026lt;kubernetes_domain_secret\u0026gt; where:\n-u weblogic is the WebLogic username\n-p \u0026lt;pwd\u0026gt; is the password for the WebLogic user\n-n \u0026lt;domain_namespace\u0026gt; is the domain namespace\n-d \u0026lt;domain_uid\u0026gt; is the domain UID to be created. The default is domain1 if not specified\n-s \u0026lt;kubernetes_domain_secret\u0026gt; is the name you want to create for the secret for this namespace. The default is to use the domainUID if not specified\nFor example:\n$ cd $WORKDIR/kubernetes/create-weblogic-domain-credentials $ ./create-weblogic-credentials.sh -u weblogic -p \u0026lt;password\u0026gt; -n oigns -d governancedomain -s oig-domain-credentials The output will look similar to the following:\nsecret/oig-domain-credentials created secret/oig-domain-credentials labeled The secret oig-domain-credentials has been successfully created in the oigns namespace.   Verify the secret is created using the following command:\n$ kubectl get secret \u0026lt;kubernetes_domain_secret\u0026gt; -o yaml -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get secret oig-domain-credentials -o yaml -n oigns The output will look similar to the following:\n$ kubectl get secret oig-domain-credentials -o yaml -n oigns apiVersion: v1 data: password: V2VsY29tZTE= username: d2VibG9naWM= kind: Secret metadata: creationTimestamp: \u0026quot;\u0026lt;DATE\u0026gt;\u0026quot; labels: weblogic.domainName: governancedomain weblogic.domainUID: governancedomain name: oig-domain-credentials namespace: oigns resourceVersion: \u0026quot;3216738\u0026quot; uid: c2ec07e0-0135-458d-bceb-c648d2a9ac54 type: Opaque   Create a Kubernetes secret for RCU in the same Kubernetes namespace as the domain, using the create-rcu-credentials.sh script:\n$ cd $WORKDIR/kubernetes/create-rcu-credentials $ ./create-rcu-credentials.sh -u \u0026lt;rcu_prefix\u0026gt; -p \u0026lt;rcu_schema_pwd\u0026gt; -a sys -q \u0026lt;sys_db_pwd\u0026gt; -d \u0026lt;domain_uid\u0026gt; -n \u0026lt;domain_namespace\u0026gt; -s \u0026lt;kubernetes_rcu_secret\u0026gt; where:\n-u \u0026lt;rcu_prefix\u0026gt; is the name of the RCU schema prefix created previously\n-p \u0026lt;rcu_schema_pwd\u0026gt; is the password for the RCU schema prefix\n-a \u0026lt;sys_db_user\u0026gt; is the database user with sys dba privilege\n-q \u0026lt;sys_db_pwd\u0026gt; is the sys database password\n-d \u0026lt;domain_uid\u0026gt; is the domain_uid that you created earlier\n-n \u0026lt;domain_namespace\u0026gt; is the domain namespace\n-s \u0026lt;kubernetes_rcu_secret\u0026gt; is the name of the rcu secret to create\nFor example:\n$ cd $WORKDIR/kubernetes/create-rcu-credentials $ ./create-rcu-credentials.sh -u OIGK8S -p \u0026lt;password\u0026gt; -a sys -q \u0026lt;password\u0026gt; -d governancedomain -n oigns -s oig-rcu-credentials The output will look similar to the following:\nsecret/oig-rcu-credentials created secret/oig-rcu-credentials labeled The secret oig-rcu-credentials has been successfully created in the oigns namespace.   Verify the secret is created using the following command:\n$ kubectl get secret \u0026lt;kubernetes_rcu_secret\u0026gt; -o yaml -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get secret oig-rcu-credentials -o yaml -n oigns The output will look similar to the following:\napiVersion: v1 data: password: V2VsY29tZTE= sys_password: V2VsY29tZTE= sys_username: c3lz username: T0lHSzhT kind: Secret metadata: creationTimestamp: \u0026quot;\u0026lt;DATE\u0026gt;\u0026quot; labels: weblogic.domainName: governancedomain weblogic.domainUID: governancedomain name: oig-rcu-credentials namespace: oigns resourceVersion: \u0026quot;3217023\u0026quot; uid: ce70b91a-fbbc-4839-9616-4cc2c1adeb4f type: Opaque   Create a Kubernetes persistent volume and persistent volume claim As referenced in Prerequisites the nodes in the Kubernetes cluster must have access to a persistent volume such as a Network File System (NFS) mount or a shared file system.\nA persistent volume is the same as a disk mount but is inside a container. A Kubernetes persistent volume is an arbitrary name (determined in this case, by Oracle) that is mapped to a physical volume on a disk.\nWhen a container is started, it needs to mount that volume. The physical volume should be on a shared disk accessible by all the Kubernetes worker nodes because it is not known on which worker node the container will be started. In the case of Identity and Access Management, the persistent volume does not get erased when a container stops. This enables persistent configurations.\nThe example below uses an NFS mounted volume (\u0026lt;persistent_volume\u0026gt;/governancedomainpv). Other volume types can also be used. See the official Kubernetes documentation for Volumes.\nNote: The persistent volume directory needs to be accessible to both the master and worker node(s). In this example /scratch/shared/governancedomainpv is accessible from all nodes via NFS.\n  Make a backup copy of the create-pv-pvc-inputs.yaml file and create required directories:\n$ cd $WORKDIR/kubernetes/create-weblogic-domain-pv-pvc $ cp create-pv-pvc-inputs.yaml create-pv-pvc-inputs.yaml.orig $ mkdir output $ mkdir -p \u0026lt;persistent_volume\u0026gt;/governancedomainpv $ sudo chown -R 1000:0 \u0026lt;persistent_volume\u0026gt;/governancedomainpv For example:\n$ cd $WORKDIR/kubernetes/create-weblogic-domain-pv-pvc $ cp create-pv-pvc-inputs.yaml create-pv-pvc-inputs.yaml.orig $ mkdir output $ mkdir -p /scratch/shared/governancedomainpv $ sudo chown -R 1000:0 /scratch/shared/governancedomainpv   On the master node run the following command to ensure it is possible to read and write to the persistent volume:\ncd \u0026lt;persistent_volume\u0026gt;/governancedomainpv touch file.txt ls filemaster.txt For example:\ncd /scratch/shared/governancedomainpv touch filemaster.txt ls filemaster.txt On the first worker node run the following to ensure it is possible to read and write to the persistent volume:\ncd /scratch/shared/governancedomainpv ls filemaster.txt touch fileworker1.txt ls fileworker1.txt Repeat the above for any other worker nodes e.g fileworker2.txt etc. Once proven that it\u0026rsquo;s possible to read and write from each node to the persistent volume, delete the files created.\n  Navigate to $WORKDIR/kubernetes/create-weblogic-domain-pv-pvc:\n$ cd $WORKDIR/kubernetes/create-weblogic-domain-pv-pvc and edit the create-pv-pvc-inputs.yaml file and update the following parameters to reflect your settings. Save the file when complete:\nbaseName: \u0026lt;domain\u0026gt; domainUID: \u0026lt;domain_uid\u0026gt; namespace: \u0026lt;domain_namespace\u0026gt; weblogicDomainStorageType: NFS weblogicDomainStorageNFSServer: \u0026lt;nfs_server\u0026gt; weblogicDomainStoragePath: \u0026lt;physical_path_of_persistent_storage\u0026gt; weblogicDomainStorageSize: 10Gi For example:\n# The base name of the pv and pvc baseName: domain # Unique ID identifying a domain. # If left empty, the generated pv can be shared by multiple domains # This ID must not contain an underscope (\u0026quot;_\u0026quot;), and must be lowercase and unique across all domains in a Kubernetes cluster. domainUID: governancedomain # Name of the namespace for the persistent volume claim namespace: oigns # Persistent volume type for the persistent storage. # The value must be 'HOST_PATH' or 'NFS'. # If using 'NFS', weblogicDomainStorageNFSServer must be specified. weblogicDomainStorageType: NFS # The server name or ip address of the NFS server to use for the persistent storage. # The following line must be uncomment and customized if weblogicDomainStorateType is NFS: weblogicDomainStorageNFSServer: mynfsserver # Physical path of the persistent storage. # When weblogicDomainStorageType is set to HOST_PATH, this value should be set the to path to the # domain storage on the Kubernetes host. # When weblogicDomainStorageType is set to NFS, then weblogicDomainStorageNFSServer should be set # to the IP address or name of the DNS server, and this value should be set to the exported path # on that server. # Note that the path where the domain is mounted in the WebLogic containers is not affected by this # setting, that is determined when you create your domain. # The following line must be uncomment and customized: weblogicDomainStoragePath: /scratch/shared/governancedomainpv # Reclaim policy of the persistent storage # The valid values are: 'Retain', 'Delete', and 'Recycle' weblogicDomainStorageReclaimPolicy: Retain # Total storage allocated to the persistent storage. weblogicDomainStorageSize: 10Gi   Execute the create-pv-pvc.sh script to create the PV and PVC configuration files:\n$ ./create-pv-pvc.sh -i create-pv-pvc-inputs.yaml -o output The output will be similar to the following:\nInput parameters being used export version=\u0026quot;create-weblogic-sample-domain-pv-pvc-inputs-v1\u0026quot; export baseName=\u0026quot;domain\u0026quot; export domainUID=\u0026quot;governancedomain\u0026quot; export namespace=\u0026quot;oigns\u0026quot; export weblogicDomainStorageType=\u0026quot;NFS\u0026quot; export weblogicDomainStorageNFSServer=\u0026quot;mynfsserver\u0026quot; export weblogicDomainStoragePath=\u0026quot;/scratch/shared/governancedomainpv\u0026quot; export weblogicDomainStorageReclaimPolicy=\u0026quot;Retain\u0026quot; export weblogicDomainStorageSize=\u0026quot;10Gi\u0026quot; Generating output/pv-pvcs/governancedomain-domain-pv.yaml Generating output/pv-pvcs/governancedomain-domain-pvc.yaml The following files were generated: output/pv-pvcs/governancedomain-domain-pv.yaml output/pv-pvcs/governancedomain-domain-pvc.yaml Completed   Run the following to show the files are created:\n$ ls output/pv-pvcs create-pv-pvc-inputs.yaml governancedomain-domain-pv.yaml governancedomain-domain-pvc.yaml   Run the following kubectl command to create the PV and PVC in the domain namespace:\n$ kubectl create -f output/pv-pvcs/governancedomain-domain-pv.yaml -n \u0026lt;domain_namespace\u0026gt; $ kubectl create -f output/pv-pvcs/governancedomain-domain-pvc.yaml -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl create -f output/pv-pvcs/governancedomain-domain-pv.yaml -n oigns $ kubectl create -f output/pv-pvcs/governancedomain-domain-pvc.yaml -n oigns The output will look similar to the following:\npersistentvolume/governancedomain-domain-pv created persistentvolumeclaim/governancedomain-domain-pvc created   Run the following commands to verify the PV and PVC were created successfully:\n$ kubectl describe pv \u0026lt;pv_name\u0026gt; $ kubectl describe pvc \u0026lt;pvc_name\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe pv governancedomain-domain-pv $ kubectl describe pvc governancedomain-domain-pvc -n oigns The output will look similar to the following:\n$ kubectl describe pv governancedomain-domain-pv Name: governancedomain-domain-pv Labels: weblogic.domainUID=governancedomain Annotations: pv.kubernetes.io/bound-by-controller: yes Finalizers: [kubernetes.io/pv-protection] StorageClass: governancedomain-domain-storage-class Status: Bound Claim: oigns/governancedomain-domain-pvc Reclaim Policy: Retain Access Modes: RWX VolumeMode: Filesystem Capacity: 10Gi Node Affinity: \u0026lt;none\u0026gt; Message: Source: Type: NFS (an NFS mount that lasts the lifetime of a pod) Server: mynfsserver Path: /scratch/shared/governancedomainpv ReadOnly: false Events: \u0026lt;none\u0026gt; $ kubectl describe pvc governancedomain-domain-pvc -n oigns Name: governancedomain-domain-pvc Namespace: oigns StorageClass: governancedomain-domain-storage-class Status: Bound Volume: governancedomain-domain-pv Labels: weblogic.domainUID=governancedomain Annotations: pv.kubernetes.io/bind-completed: yes pv.kubernetes.io/bound-by-controller: yes Finalizers: [kubernetes.io/pvc-protection] Capacity: 10Gi Access Modes: RWX VolumeMode: Filesystem Mounted By: \u0026lt;none\u0026gt; Events: \u0026lt;none\u0026gt; You are now ready to create the OIG domain as per Create OIG Domains\n  "
},
{
	"uri": "/fmw-kubernetes/ohs/prepare-your-environment/",
	"title": "Prepare your environment",
	"tags": [],
	"description": "Prepare your environment for OHS on Kubernetes.",
	"content": "To prepare for Oracle HTTP Server (OHS) deployment in a Kubernetes environment, complete the following steps:\n Check the Kubernetes cluster is ready Obtain the OHS container image Set up the code repository to deploy OHS Prepare your OHS configuration files Create configmaps for the OHS configuration files Create a namespace for OHS Create a Kubernetes secret for the container registry Prepare the ohs.yaml file  Check the Kubernetes cluster is ready As per the Prerequisites a Kubernetes cluster should have already been configured.\nCheck that all the nodes in the Kubernetes cluster are running.\n  Run the following command on the master node to check the cluster and worker nodes are running:\n$ kubectl get nodes,pods -n kube-system The output will look similar to the following:\n NAME STATUS ROLES AGE VERSION node/worker-node1 Ready \u0026lt;none\u0026gt; 17h v1.28.3+3.el8 node/worker-node2 Ready \u0026lt;none\u0026gt; 17h v1.28.3+3.el8 node/master-node Ready control-plane,master 23h v1.28.3+3.el8 NAME READY STATUS RESTARTS AGE pod/coredns-66bff467f8-fnhbq 1/1 Running 0 23h pod/coredns-66bff467f8-xtc8k 1/1 Running 0 23h pod/etcd-master 1/1 Running 0 21h pod/kube-apiserver-master-node 1/1 Running 0 21h pod/kube-controller-manager-master-node 1/1 Running 0 21h pod/kube-flannel-ds-amd64-lxsfw 1/1 Running 0 17h pod/kube-flannel-ds-amd64-pqrqr 1/1 Running 0 17h pod/kube-flannel-ds-amd64-wj5nh 1/1 Running 0 17h pod/kube-proxy-2kxv2 1/1 Running 0 17h pod/kube-proxy-82vvj 1/1 Running 0 17h pod/kube-proxy-nrgw9 1/1 Running 0 23h pod/kube-scheduler-master 1/1 Running 0 21h   Obtain the OHS container image The OHS Kubernetes deployment requires access to an OHS container image. The image can be obtained in the following ways:\n Prebuilt OHS container image Build your own OHS container image using WebLogic Image Tool  Prebuilt OHS container image The prebuilt OHS January 2025 container image can be downloaded from Oracle Container Registry. This image is prebuilt by Oracle and includes Oracle HTTP Server 12.2.1.4.0, the January 2025 Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.\nNote: Before using this image you must login to Oracle Container Registry, navigate to Middleware \u0026gt; ohs_cpu and accept the license agreement.\nYou can use this image in the following ways:\n Pull the container image from the Oracle Container Registry automatically during the OHS Kubernetes deployment. Manually pull the container image from the Oracle Container Registry and then upload it to your own container registry. Manually pull the container image from the Oracle Container Registry and manually stage it on each worker node.  Build your own OHS container image using WebLogic Image Tool You can build your own OHS container image using the WebLogic Image Tool. This is recommended if you need to apply one off patches to a Prebuilt OHS container image. For more information about building your own container image with WebLogic Image Tool, see Create or update image.\nYou can use an image built with WebLogic Image Tool in the following ways:\n Manually upload them to your own container registry. Manually stage them on each worker node.  Note: This documentation does not tell you how to pull or push the above images into a private container registry, or stage them on worker nodes. Details of this can be found in the Enterprise Deployment Guide.\nIn all the sections below, the commands are run from a server that has access to the Kubernetes cluster.\nSet up the code repository to deploy OHS To deploy OHS you need to set up the code repository which provides sample deployment yaml files:\n  Create a directory to setup the source code.\n$ mkdir \u0026lt;ohsscripts\u0026gt; For example:\n$ mkdir -p /OHSK8S/OHSscripts   Download the latest OHS deployment scripts from the OHS repository.\n$ cd \u0026lt;ohsscripts\u0026gt; $ git clone https://github.com/oracle/fmw-kubernetes.git For example:\n$ cd /OHSK8S/OHSscripts $ git clone https://github.com/oracle/fmw-kubernetes.git   Set the $SCRIPTDIR environment variable as follows:\n$ export SCRIPTDIR=\u0026lt;ohsscripts\u0026gt;/fmw-kubernetes/OracleHTTPServer/kubernetes For example:\n$ export SCRIPTDIR=/OHSK8S/OHSscripts/fmw-kubernetes/OracleHTTPServer/kubernetes   Prepare your OHS configuration files Before you deploy OHS, you must prepare your OHS configuration files.\nThe steps below assume familiarity with on premises Oracle HTTP Server in terms of general configuration and use of Oracle WebGate.\nNote: Administrators should be aware of the following:\n If you do not specify configuration files beforehand, then the OHS container is deployed with a default configuration of Oracle HTTP Server. The directories listed below are optional. For example, if you do not want to deploy WebGate then you do not need to create the webgateConf and webgateWallet directories. Similarly, if you do not want to copy files to htdocs then you do not need to create the htdocs directory.    Make a directory to store your OHS configuration files:\nmkdir -p \u0026lt;myohsfiles\u0026gt; For example:\nmkdir -p /OHSK8S/myOHSfiles   Set the $MYOHSFILES environment variable as follows:\n$ export MYOHSFILES=\u0026lt;myohsfiles\u0026gt; For example:\n$ export MYOHSFILES=/OHSK8S/myOHSfiles   Create the following directories for your OHS configuration:\nmkdir -p $MYOHSFILES/ohsConfig/httpconf mkdir -p $MYOHSFILES/ohsConfig/moduleconf mkdir -p $MYOHSFILES/ohsConfig/htdocs mkdir -p $MYOHSFILES/ohsConfig/htdocs/myapp mkdir -p $MYOHSFILES/ohsConfig/webgate/config/wallet mkdir -p $MYOHSFILES/ohsConfig/wallet/mywallet Where:\n httpconf - contains any configuration files you want to configure that are usually found in the $OHS_DOMAIN_HOME/config/fmwconfig/components/OHS/ohs1 directory. For example httpd.conf, ssl.conf and mod_wl_ohs.conf. The webgate.conf does not need to be copied as this will get generated automatically if deploying with WebGate. moduleconf - contains any additional config files, for example virtual host configuration files that you want to copy to the $OHS_DOMAIN_HOME/config/fmwconfig/components/OHS/ohs1/moduleconf folder in the container. htdocs - contains any html files, or similar, that you want to copy to the $OHS_DOMAIN_HOME/config/fmwconfig/components/OHS/ohs1/htdocs folder in the container. htdocs/myapp - myapp is an example directory name that exists under htdocs. If you need to copy any directories under htdocs above, then create the directories you require. webgate/config - contains the extracted WebGate configuration. For example, when you download the \u0026lt;agent\u0026gt;.zip file from Oracle Access Management Console, you extract the zip file into this directory. If you are accessing OAM URL\u0026rsquo;s via SSL, this directory must also contain the Certificate Authority cacert.pem file that signed the certificate of the OAM entry point. For example, if you will access OAM via a HTTPS Load Balancer URL, then cacert.pem is the CA certificate that signed the load balancer certificate. webgate/config/wallet - contains the contents of the wallet directory extracted from the \u0026lt;agent.zip\u0026gt; file. wallet/mywallet - If OHS is to be configured to use SSL, this directory contains the preconfigured OHS Wallet file cwallet.sso.  Note: Administrators should be aware of the following if configuring OHS for SSL:\n The wallet must contain a valid certificate. Only auto-login-only wallets (cwallet.sso only) are supported. For example, wallets created with orapki using the -auto-login-only option. Password protected wallets (ewallet.p12) are not supported. You must configure ssl.conf in $WORKDIR/ohsConfig/httpconf and set the directory for SSLWallet to: SSLWallet \u0026quot;${ORACLE_INSTANCE}/config/fmwconfig/components/${COMPONENT_TYPE}/instances/${COMPONENT_NAME}/keystores/wallet/mywallet\u0026quot;.  An example file system may contain the following:\nls -R $MYOHSFILES/ohsConfig /OHSK8S/myOHSfiles/ohsConfig: htdocs httpconf moduleconf wallet webgate /OHSK8S/myOHSfiles/ohsConfig/htdocs: myapp mypage.html /OHSK8S/myOHSfiles/ohsConfig/htdocs/myapp: index.html /OHSK8S/myOHSfiles/ohsConfig/httpconf: httpd.conf mod_wl_ohs.conf ssl.conf /OHSK8S/myOHSfiles/ohsConfig/moduleconf: vh.conf /OHSK8S/myOHSfiles/ohsConfig/wallet: mywallet /OHSK8S/myOHSfiles/ohsConfig/wallet/mywallet: cwallet.sso /OHSK8S/myOHSfiles/ohsConfig/webgate: config /OHSK8S/myOHSfiles/ohsConfig/webgate/config: cacert.pem cwallet.sso cwallet.sso.lck ObAccessClient.xml wallet /OHSK8S/myOHSfiles/ohsConfig/webgate/config/wallet: cwallet.sso cwallet.sso.lck   Set WLDNSRefreshInterval and WebLogicCluster directives If your OHS deployment is configured to communicate with Oracle WebLogic Server, then you must set the WLDNSRefreshInterval and WebLogicCluster directives in your OHS configuration files appropriately.\nIn the file where your WLS location directives reside, you must set the following:\n\u0026lt;IfModule weblogic_module\u0026gt; WLDNSRefreshInterval 10 \u0026lt;/IfModule\u0026gt; For WebLogicCluster, the values to set depend on whether the WLS is deployed on-premises, on the same Kubernetes cluster as OHS, or on a different Kubernetes cluster to OHS. The following sections explain how to set the values in each case.\nOn-premises configuration If OHS is connecting to a WebLogic Server deployed in an on-premises configuration (non-Kubernetes), then set:\nWebLogicCluster \u0026lt;APPHOST1\u0026gt;:\u0026lt;PORT\u0026gt;,\u0026lt;APPHOST2\u0026gt;:\u0026lt;PORT\u0026gt; For example, if you were connecting to the WebLogic Server Administration Server port:\n \u0026lt;Location /console\u0026gt; WLSRequest ON DynamicServerList OFF WLProxySSL ON WLProxySSLPassThrough ON WLCookieName OAMJSESSIONID WebLogicCluster APPHOST1.example.com:7001,APPHOST2.example.com:7001 \u0026lt;/Location\u0026gt; Oracle HTTP Server on a shared Kubernetes Cluster If OHS is connecting to a WebLogic Server deployed on the same Kubernetes cluster, then set the following depending on your environment:\nWebLogicHost \u0026lt;service_name\u0026gt;.\u0026lt;namespace\u0026gt;.svc.cluster.local WebLogicPort \u0026lt;port\u0026gt; or:\nWebLogicCluster \u0026lt;service_name\u0026gt;.\u0026lt;namespace\u0026gt;.svc.cluster.local:\u0026lt;port\u0026gt; Note: You can get the \u0026lt;service_name\u0026gt; and \u0026lt;port\u0026gt; by running kubectl get svc -n \u0026lt;namespace\u0026gt; on your Kubernetes cluster.\nThe following shows an example when connecting to an Oracle Access Management (OAM) Administration Server cluster service and port:\n\u0026lt;Location /console\u0026gt; WLSRequest ON DynamicServerList OFF WLProxySSL ON WLProxySSLPassThrough ON WLCookieName OAMJSESSIONID WebLogicHost accessdomain-adminserver.oamns.svc.cluster.local WebLogicPort 7001 \u0026lt;/Location\u0026gt; The following shows an example when connecting to an Oracle Access Management (OAM) Managed Server cluster service and port:\n\u0026lt;Location /oam\u0026gt; WLSRequest ON DynamicServerList OFF WLProxySSL ON WLProxySSLPassThrough ON WLCookieName OAMJSESSIONID WebLogicCluster accessdomain-cluster-oam-cluster.oamns.svc.cluster.local:14100 Oracle HTTP Server on an independent Kubernetes Cluster If OHS is connecting to a WebLogic Server deployed on a separate Kubernetes cluster, then set:\nWebLogicCluster \u0026lt;K8S_WORKER_HOST1\u0026gt;:30777,\u0026lt;K8S_WORKER_HOST2\u0026gt;:30777,\u0026lt;K8S_WORKER_HOST3\u0026gt;:30777 Where \u0026lt;K8S_WORKER_HOSTX\u0026gt; is your Kubernetes worker node hostname.domain, and 30777 is the HTTP port of the ingress controller.\nFor example:\n \u0026lt;Location /console\u0026gt; WLSRequest ON DynamicServerList OFF WLProxySSL ON WLProxySSLPassThrough ON WLCookieName OAMJSESSIONID WebLogicCluster K8_WORKER_HOST1.example.com:30777,K8_WORKER_HOST2.example.com:30777,K8_WORKER_HOST3.example.com:30777 \u0026lt;/Location\u0026gt; Create a namespace for OHS Run the following command to create a namespace for the OHS:\n$ kubectl create namespace \u0026lt;namespace\u0026gt; For example:\n$ kubectl create namespace ohsns The output will look similar to the following:\nnamespace/ohsns created Create configmaps for the OHS configuration files Note: Before following this section, make sure you have created the directories and files as per Prepare your OHS configuration files.\n  Run the following commands to create the required configmaps for the OHS directories and files created in Prepare your OHS configuration files.\ncd $MYOHSFILES kubectl create cm -n ohsns ohs-config --from-file=ohsConfig/moduleconf kubectl create cm -n ohsns ohs-httpd --from-file=ohsConfig/httpconf kubectl create cm -n ohsns ohs-htdocs --from-file=ohsConfig/htdocs kubectl create cm -n ohsns ohs-myapp --from-file=ohsConfig/htdocs/myapp kubectl create cm -n ohsns webgate-config --from-file=ohsConfig/webgate/config kubectl create cm -n ohsns webgate-wallet --from-file=ohsConfig/webgate/config/wallet kubectl create cm -n ohsns ohs-wallet --from-file=ohsConfig/wallet/mywallet Note: Only create the configmaps for directories that you want to copy to OHS.\n  Create a Kubernetes secret for the container registry In this section you create a secret that stores the credentials for the container registry where the OHS image is stored.\nIf you are not using a container registry and have loaded the images on each of the worker nodes, then there is no need to create the registry secret.\n  Run the following command to create the secret:\n$ kubectl create secret docker-registry \u0026quot;regcred\u0026quot; --docker-server=\u0026lt;CONTAINER_REGISTRY\u0026gt; \\ --docker-username=\u0026quot;\u0026lt;USER_NAME\u0026gt;\u0026quot; \\ --docker-password=\u0026lt;PASSWORD\u0026gt; --docker-email=\u0026lt;EMAIL_ID\u0026gt; \\ --namespace=\u0026lt;domain_namespace\u0026gt; For example, if using Oracle Container Registry:\n$ kubectl create secret docker-registry \u0026quot;regcred\u0026quot; --docker-server=container-registry.oracle.com \\ --docker-username=\u0026quot;user@example.com\u0026quot; \\ --docker-password=password --docker-email=user@example.com \\ --namespace=ohsns Replace \u0026lt;USER_NAME\u0026gt; and \u0026lt;PASSWORD\u0026gt; with the credentials for the registry with the following caveats:\nIf using Oracle Container Registry to pull the OHS container image, this is the username and password used to login to Oracle Container Registry. Before you can use this image you must login to Oracle Container Registry , navigate to Middleware \u0026gt; ohs_cpu and accept the license agreement.\nIf using your own container registry to store the OHS container image, this is the username and password (or token) for your container registry.\nThe output will look similar to the following:\nsecret/regcred created   Create a Kubernetes secret for the OHS domain credentials In this section you create a secret that stores the credentials for the OHS domain.\n  Run the following command to create the secret:\n$ kubectl create secret generic ohs-secret -n \u0026lt;namespace\u0026gt; --from-literal=username=weblogic --from-literal=password='\u0026lt;password\u0026gt;' For example:\n$ kubectl create secret generic ohs-secret -n ohsns --from-literal=username=weblogic --from-literal=password='\u0026lt;password\u0026gt;` Replace \u0026lt;password\u0026gt; with a password of your choice.\nThe output will look similar to the following:\nsecret/ohs-secret created   Prepare the ohs.yaml file In this section you prepare the ohs.yaml file ready for OHS deployment.\n  Copy the sample yaml files to $MYOHSFILES:\n$ cd $MYOHSFILES $ cp $SCRIPTDIR/*.yaml .   Edit the $MYOHSFILES/ohs.yaml and change the following parameters to match your installation:\nNote:\n \u0026lt;NAMESPACE\u0026gt;  to your namespace, for example ohsns. \u0026lt;IMAGE_NAME\u0026gt; to the correct image tag on Oracle Container Registry. If you are using your own container registry for the image, you will need to change the image location appropriately. If your own container registry is open, you do not need the imagePullSecrets. During the earlier creation of the configmaps, and secret, if you changed the names from the given examples, then you will need to update the values accordingly. All configMaps are shown for completeness. Remove any configMaps that you are not using, for example if you don\u0026rsquo;t require htdocs then remove the ohs-htdocs configMap. If you are not deploying webgate then remove the webgate-config and webgate-wallet configMaps, and so forth. If you have created any additional directories under htdocs, then add the additional entries in that match the configmap and directory names. All configMaps used must mount to the directories stated. Ports can be changed if required. Set DEPLOY_WG to true or false depending on whether webgate is to be deployed. If using SSL change \u0026lt;WALLET_NAME\u0026gt; to the wallet directory created under ohsConfig/webgate/config/wallet, for example mywallet. initialDelaySeconds may need to be changed to 10 on slower systems. See, Issues with LivenessProbe.    Click here to see an example ohs.yaml:   apiVersion: v1 kind: ConfigMap metadata: name: ohs-script-configmap namespace: ohsns data: ohs-script.sh: | #!/bin/bash mkdir -p /u01/oracle/bootdir /u01/oracle/config /u01/oracle/config/moduleconf /u01/oracle/config/webgate/config { echo -en \u0026quot;username=\u0026quot; \u0026amp;\u0026amp; cat /ohs-config/username \u0026amp;\u0026amp; echo -en \u0026quot;\\npassword=\u0026quot; \u0026amp;\u0026amp; cat /ohs-config/password; } \u0026gt; /u01/oracle/bootdir/domain.properties /u01/oracle/provisionOHS.sh --- apiVersion: apps/v1 kind: Deployment metadata: name: ohs-domain namespace: ohsns spec: progressDeadlineSeconds: 600 replicas: 1 selector: matchLabels: oracle: ohs template: metadata: labels: oracle: ohs spec: containers: - name: ohs image: container-registry.oracle.com/middleware/ohs_cpu:12.2.1.4-db19-jdk8-ol8-\u0026lt;January'25\u0026gt; env: - name: DEPLOY_WG value: \u0026quot;true\u0026quot; ports: - name: clear containerPort: 7777 - name: https containerPort: 4443 resources: requests: cpu: 1000m memory: 1Gi securityContext: allowPrivilegeEscalation: false capabilities: drop: - ALL privileged: false runAsNonRoot: true runAsUser: 1000 livenessProbe: exec: command: - /bin/bash - -c - pgrep httpd initialDelaySeconds: 10 periodSeconds: 5 readinessProbe: httpGet: port: 7777 path: /helloWorld.html volumeMounts: - name: ohs-secret mountPath: /ohs-config - name: ohs-config mountPath: /u01/oracle/config/moduleconf - name: ohs-htdocs mountPath: /u01/oracle/config/htdocs - name: ohs-myapp mountPath: /u01/oracle/config/htdocs/myapp - name: ohs-httpd mountPath: /u01/oracle/config/httpd - name: webgate-config mountPath: /u01/oracle/config/webgate/config - name: webgate-wallet mountPath: /u01/oracle/config/webgate/config/wallet - name: ohs-wallet mountPath: /u01/oracle/config/wallet/mywallet - name: script-volume mountPath: /ohs-bin readOnly: true command: [\u0026quot;/ohs-bin/ohs-script.sh\u0026quot;] imagePullSecrets: - name: regcred\taffinity: podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 100 podAffinityTerm: labelSelector: matchExpressions: - key: oracle operator: In values: - ohs topologyKey: \u0026quot;kubernetes.io/hostname\u0026quot; restartPolicy: Always securityContext: seccompProfile: type: RuntimeDefault terminationGracePeriodSeconds: 30 volumes: - name: ohs-secret secret: defaultMode: 0444 secretName: ohs-secret - name: script-volume configMap: defaultMode: 0555 name: ohs-script-configmap - name: ohs-config configMap: defaultMode: 0555 name: ohs-config - name: ohs-httpd configMap: defaultMode: 0555 name: ohs-httpd - name: ohs-htdocs configMap: defaultMode: 0555 name: ohs-htdocs - name: ohs-myapp configMap: defaultMode: 0555 name: ohs-myapp - name: webgate-config configMap: defaultMode: 0555 name: webgate-config - name: webgate-wallet configMap: defaultMode: 0555 name: webgate-wallet - name: ohs-wallet configMap: defaultMode: 0555 name: ohs-wallet strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 1      Next Steps You are now ready to create the OHS container, see Create the OHS Container and Nodeport.\n"
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/oracle-cloud/configure-wcc-for-idcs/",
	"title": "Configuring Oracle WebCenter Content for  Oracle Identity Cloud Service (IDCS)",
	"tags": [],
	"description": "Configuring Oracle WebCenter Content for  Oracle Identity Cloud Service (IDCS)",
	"content": "Contents  Introduction Updating SSL.hostnameVerifier Property Configuring IDCS Security Provider Configuring Oracle Identity Cloud Integrator Provider Setting Up Trust between IDCS and WebLogic Creating Admin User in IDCS Admin Console for WebCenter Content Managing Group Memberships, Roles, and Accounts Configuring WebCenter Content for User Logout  Introduction Configuring WebCenter Content for Oracle Identity Cloud Service (IDCS) on OKE. Configuration information is provided in the following sections:\n Updating SSL.hostnameVerifier Property Configuring IDCS Security Provider Configuring WebCenter Content for User Logout  Updating SSL.hostnameVerifier Property To update SSL.hostnameVerifier property, do the following: This is necessary for the IDCS provider to access IDCS.\n  Stop all the servers in the domain including Administration server and all Managed WebLogic servers.\n  Update the SSL.hostnameVerifier property:\nedit the file \u0026lt;DOMAIN_HOME\u0026gt;//bin/setDomainEnv.sh: go to pv location file system and modify the file setDomainEnv.sh sample: /WCCFS/wccinfra/bin/setDomainEnv.sh\nOR\nAlternatively create or modify the file \u0026lt;DOMAIN_HOME\u0026gt;/\u0026lt;domain_name\u0026gt;/bin/setUserOverrides.sh. Add the SSL.hostnameVerifier property for the IDCS Authenticator: sample: /WCCFS/wccinfra/bin/setUserOverrides.sh\nEXTRA_JAVA_PROPERTIES=\u0026#34;${EXTRA_JAVA_PROPERTIES}-Dweblogic.security.SSL.hostnameVerifier=weblogic.security.utils.SSLWLSWildcardHostnameVerifier\u0026#34; export EXTRA_JAVA_PROPERTIES   Start the Administration server and all Managed WebLogic servers.\n  Configuring IDCS Security Provider   Log in to the IDCS administration console.\n  Create a trusted application. In the Add Confidential Application wizard:\n Enter the client name and the description (optional). Select the Configure this application as a client now option. To configure this application, expand the Client Configuration in the Configuration tab. In the Allowed Grant Types , select Client Credentials field the check box. In the Grant the client access to Identity Cloud Service Admin APIs section, click Add to add the APP Roles (application roles). You can add the Identity Domain Administrator role. Keep the default settings for the pages and click Finish. Record/Copy the Client ID and Client Secret.This is needed when you will create the IDCS provider. Activate the application.    Configuring Oracle Identity Cloud Integrator Provider To configure Identity Cloud Integrator Provider:\n  Log in to the WebLogic Server Administration console.\n  Select Security Realm in the Domain Structure pane.\n  On the Summary of Security Realms page, select the name of the realm (for example, myrealm). Click myrealm. The Settings for myrealm page appears.\n  On the Settings for Realm Name page, select Providers and then Authentication. To create a new Authentication Provider, in the Authentication Providers table, click New.\n  In the Create a New Authentication Provider page, enter the name of the authentication provider, for example, IDCSIntegrator and select the OracleIdentityCloudIntegrator type of authentication provider from the drop-down list and click OK.\n  In the Authentication Providers table, click the newly created Oracle Identity Cloud Integrator, IDCSIntegrator link.\n  In the Settings for IDCSIntegrator page, for the Control Flag field, select the Sufficient option from the drop-down list Click Save.\n  Go to the Provider Specific page to configure the additional attributes for the security provider. Enter the values for the following fields \u0026amp; Click Save:\n Host Port 443(default) select SSLEnabled Tenant Client Id Client Secret.   NOTE: If IDCS URL is idcs-abcde.identity.example.com, then IDCS host would be identity.example.com and tenant name would be idcs-abcde. Keep the default settings for other sections of the page.\n   Select Security Realm, then myrealm, and then Providers. In the Authentication Providers table, click Reorder.\n  In the Reorder Authentication Providers page, move IDCSIntegrator on the top and click OK.\n  In the Authentication Providers table, click the DefaultAuthenticator link. In the Settings for DefaultAuthenticator page, for the Control Flag field, select the Sufficient option from the drop-down list. Click Save.\n  All changes will be activated. Restart the Administration server.\n  Setting Up Trust between IDCS and WebLogic To set up trust between IDCS and WebLogic\n Import certificate in KSS store.  Run this from the Administration Server node. Get IDCS certificate: echo -n | openssl s_client -showcerts -servername \u0026lt;IDCS_URL\u0026gt; -connect \u0026lt;IDCS_URL\u0026gt;:443|sed -ne \u0026#39;/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p\u0026#39; \u0026gt; /tmp/idcs_cert_chain.crt #sample echo -n | openssl s_client -showcerts -servername xyz.identity.oraclecloud.com -connect idcs-xyz.identity.oraclecloud.com:443|sed -ne \u0026#39;/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p\u0026#39; \u0026gt; /tmp/idcs_cert_chain.crt #copy the certificate inside the admin_pod kubectl cp /tmp/idcs_cert_chain.crt wccns/xyz-adminserver:/u01/idcs_cert_chain.crt  Import certificate. Run \u0026lt;ORACLE_HOME\u0026gt;/oracle_common/common/bin/wlst.sh file. connect(\u0026#39;weblogic\u0026#39;,\u0026#39;Welcome_1\u0026#39;,\u0026#39;t3://\u0026lt;WEBLOGIC_HOST\u0026gt;:7001\u0026#39;) svc=getOpssService(name=\u0026#39;KeyStoreService\u0026#39;) svc.importKeyStoreCertificate(appStripe=\u0026#39;system\u0026#39;,name=\u0026#39;trust\u0026#39;,password=\u0026#39;\u0026#39;,alias=\u0026#39;idcs_cert_chain\u0026#39;,type=\u0026#39;TrustedCertificate\u0026#39;,filepath=\u0026#39;/tmp/idcs_cert_chain.crt\u0026#39;,keypassword=\u0026#39;\u0026#39;) syncKeyStores(appStripe=\u0026#39;system\u0026#39;,keystoreFormat=\u0026#39;KSS\u0026#39;) #sample $./wlst.sh wls:/offline\u0026gt; connect(\u0026#39;weblogic\u0026#39;,\u0026#39;welcome\u0026#39;,\u0026#39;t3://xyz-adminserver:7001\u0026#39;) wls:/wccinfra/serverConfig/\u0026gt; svc=getOpssService(name=\u0026#39;KeyStoreService\u0026#39;) wls:/wccinfra/serverConfig/\u0026gt;svc.importKeyStoreCertificate(appStripe=\u0026#39;system\u0026#39;,name=\u0026#39;trust\u0026#39;,password=\u0026#39;\u0026#39;,alias=\u0026#39;idcs_cert_chain\u0026#39;,type=\u0026#39;TrustedCertificate\u0026#39;,filepath=\u0026#39;/u01/idcs_cert_chain.crt\u0026#39;,keypassword=\u0026#39;\u0026#39;) wls:/wccinfra/domainRuntime/\u0026gt;syncKeyStores(appStripe=\u0026#39;system\u0026#39;,keystoreFormat=\u0026#39;KSS\u0026#39;)  exit()   Restart the Administration server and Managed servers  Creating Admin User in IDCS Administration Console for WebCenter Content It is important to create the Admin user in IDCS because once the Managed servers are configured for SAML, the domain admin user (typically weblogic user) will not be able to log into the Managed servers.\nTo create WebLogic Admin user in IDCS for WebCenter Content JaxWS connection:\n Go to the Groups tab and create Administrators and sysmanager roles in IDCS. Go to the Users tab and create a wls admin user, for example, weblogic and assign it to Administrators and sysmanager groups. Restart all the Managed servers.  Managing Group Memberships, Roles, and Accounts This will require modifying OPSS and libOVD to access IDCS. The following steps are required if using IDCS for user authorization. Do not run these steps if you are using IDCS only for user authentication. Ensure that all the servers are stopped (including Administration) before proceeding with the following steps:\n NOTE: Shutdown all the servers using WebLogic Server Administration Console. Please keep in mind - kubectl patch domain command is the recommended way for starting/stopping pods. Please refrain from using WebLogic Server Administration Console for the same, anywhere else.\n   Run the following script:\n#exec the Administration server kubectl exec -n wccns -it wccinfra-adminserver -- /bin/bash #Run the wlst.sh cd /u01/oracle/oracle_common/common/bin/ ./wlst.sh  NOTE: It\u0026rsquo;s not required to connect to WebLogic Administration Server.\n   Read the domain:\nreadDomain(\u0026lt;DOMAIN_HOME\u0026gt;) #sample wls:/offline\u0026gt; readDomain(\u0026#39;/u01/oracle/user_projects/domains/wccinfra\u0026#39;)   Add the template:\naddTemplate(\u0026lt;MIDDLEWARE_HOME\u0026gt;/oracle_common/common/templates/wls/oracle.opss_scim_template.jar\u0026#34;) #sample wls:/offline/wccinfra\u0026gt;addTemplate(\u0026#39;/u01/oracle/oracle_common/common/templates/wls/oracle.opss_scim_template.jar\u0026#39;)  NOTE: This step may throw a warning, which can be ignored. The addTemplate is deprecated. Use selectTemplate followed by loadTemplates in place of addTemplate.\n   Update the domain:\nupdateDomain() #sample wls:/offline/wccinfra\u0026gt; updateDomain()   Close the domain:\ncloseDomain() #sample wls:/offline/wccinfra\u0026gt; closeDomain()   Exit from the Administration server container:\nexit   Start the servers (Administration and Managed).\n  Configuring WebCenter Content for User Logout If the Logout link is selected, you will be re-authenticated by SAML. To be able to select the Logout link:\n Log in to WebCenter Content Server as an administrator. Select Administration, then Admin Server, and then General Configuration. In the Additional Configuration Variables pane, add the following parameter: EXTRA_JAVA_PROPERTIES=\u0026#34;${EXTRA_JAVA_PROPERTIES}-Dweblogic.security.SSL.hostnameVerifier=weblogic.security.utils.SSLWLSWildcardHostnameVerifier\u0026#34;  Click Save. Restart the Administration and Managed servers.  "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/create-or-update-image/",
	"title": "Create or update an image",
	"tags": [],
	"description": "Create or update an Oracle WebCenter Content Docker image used for deploying Oracle WebCenter Content domains. An Oracle WebCenter Content Docker image can be created using the WebLogic Image Tool or using the Dockerfile approach.",
	"content": "If you have access to the My Oracle Support (MOS), and there is a need to build a new image with a patch (bundle or interim), it is recommended to use the WebLogic Image Tool to build an Oracle WebCenter Content image for production deployments.\n Create or update an Oracle WebCenter Content Docker image using the WebLogic Image Tool  Set up the WebLogic Image Tool Create an image Update an image   Create an Oracle WebCenter Content Docker image using Dockerfile  Create or update an Oracle WebCenter Content Docker image using the WebLogic Image Tool Using the WebLogic Image Tool, you can create a new Oracle WebCenter Content Docker image (can include patches as well) or update an existing image with one or more patches (bundle patch and interim patches).\n Recommendations:\n Use create for creating a new Oracle WebCenter Content Docker image either:  without any patches or, containing the Oracle WebCenter Content binaries, bundle patch and interim patches. This is the recommended approach if you have access to the Oracle WebCenter Content patches because it optimizes the size of the image.   Use update for patching an existing Oracle WebCenter Content Docker image with a single interim patch. Note that the patched image size may increase considerably due to additional image layers introduced by the patch application tool.   Set up the WebLogic Image Tool  Prerequisites Set up the WebLogic Image Tool Validate setup WebLogic Image Tool build directory WebLogic Image Tool cache Set up additional build scripts  Prerequisites Verify that your environment meets the following prerequisites:\n Docker client and daemon on the build machine, with minimum Docker version 19.03.1. Bash version 4.0 or later, to enable the command complete feature. JAVA_HOME environment variable set to the appropriate JDK location.  Set up the WebLogic Image Tool To set up the WebLogic Image Tool:\n  Create a working directory and change to it. In these steps, this directory is imagetool-setup.\n$ mkdir imagetool-setup $ cd imagetool-setup   Download the latest version of the WebLogic Image Tool from the releases page.\n  Unzip the release ZIP file to the imagetool-setup directory.\n  Execute the following commands to set up the WebLogic Image Tool on a Linux environment:\n$ cd imagetool-setup/imagetool/bin $ source setup.sh   Validate setup To validate the setup of the WebLogic Image Tool:\n  Enter the following command to retrieve the version of the WebLogic Image Tool:\n$ imagetool --version   Enter imagetool then press the Tab key to display the available imagetool commands:\n$ imagetool \u0026lt;TAB\u0026gt; cache create help rebase update   WebLogic Image Tool build directory The WebLogic Image Tool creates a temporary Docker context directory, prefixed by wlsimgbuilder_temp, every time the tool runs. Under normal circumstances, this context directory will be deleted. However, if the process is aborted or the tool is unable to remove the directory, it is safe for you to delete it manually. By default, the WebLogic Image Tool creates the Docker context directory under the user\u0026rsquo;s home directory. If you prefer to use a different directory for the temporary context, set the environment variable WLSIMG_BLDDIR:\n$ export WLSIMG_BLDDIR=\u0026#34;/path/to/buid/dir\u0026#34; WebLogic Image Tool cache The WebLogic Image Tool maintains a local file cache store. This store is used to look up where the Java, WebLogic Server installers, and WebLogic Server patches reside in the local file system. By default, the cache store is located in the user\u0026rsquo;s $HOME/cache directory. Under this directory, the lookup information is stored in the .metadata file. All automatically downloaded patches also reside in this directory. You can change the default cache store location by setting the environment variable WLSIMG_CACHEDIR:\n$ export WLSIMG_CACHEDIR=\u0026#34;/path/to/cachedir\u0026#34; Set up additional build scripts Creating an Oracle WebCenter Content Docker image using the WebLogic Image Tool requires additional container scripts for Oracle WebCenter Content domains.\n  Clone the docker-images repository to set up those scripts. In these steps, this directory is DOCKER_REPO:\n$ cd imagetool-setup $ git clone https://github.com/oracle/docker-images.git   Copy the additional WebLogic Image Tool build files from the WebLogic Kubernetes Operator source repository to the imagetool-setup location:\n$ mkdir -p imagetool-setup/docker-images/WebCenterContent/imagetool/12.2.1.4.0 $ cd imagetool-setup/docker-images/WebCenterContent/imagetool/12.2.1.4.0 $ cp -rf ${WORKDIR}/weblogic-kubernetes-operator/kubernetes/samples/scripts/imagetool-scripts/* .   Create an image After setting up the WebLogic Image Tool and required build scripts, follow these steps to use the WebLogic Image Tool to create a new Oracle WebCenter Content Docker image.\nDownload the Oracle WebCenter Content installation binaries and patches You must download the required Oracle WebCenter Content installation binaries and patches as listed below from the Oracle Software Delivery Cloud and save them in a directory of your choice. In these steps, this directory is download location.\n  Click here to see the sample list of installation binaries and patches:     JDK:\n jdk-8u251-linux-x64.tar.gz    Fusion MiddleWare Infrastructure installer:\n fmw_12.2.1.4.0_infrastructure_generic.jar    WebCenter Content installers:\n fmw_12.2.1.4.0_wccontent.jar    Fusion MiddleWare Infrastructure patches:\n p28186730_139424_Generic-23574493.zip (Opatch)    WebCenter Content patches:\n p31390302_122140_Generic.zip (wcc)       Note: This is a sample list of patches. You must get the appropriate list of patches for your Oracle WebCenter Content image.\n Update required build files The following files available in the code repository location \u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleWebCenterContent/imagetool/12.2.1.4.0 are used for creating the image.\n additionalBuildCmds.txt buildArgs    In the buildArgs file, update all the occurrences of %DOCKER_REPO% with the docker-images repository location, which is the complete path of imagetool-setup/docker-images.\nFor example, update:\n%DOCKER_REPO%/OracleWebCenterContent/imagetool/12.2.1.4.0/\nto:\n\u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleWebCenterContent/imagetool/12.2.1.4.0/\n  Similarly, update the placeholders %JDK_VERSION% and %BUILDTAG% with appropriate values.\n  Create the image   Add a JDK package to the WebLogic Image Tool cache:\n$ imagetool cache addInstaller --type jdk --version 8u251 --path \u0026lt;download location\u0026gt;/jdk-8u251-linux-x64.tar.gz   Add the downloaded installation binaries to the WebLogic Image Tool cache:\n$ imagetool cache addInstaller --type fmw --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_infrastructure.jar $ imagetool cache addInstaller --type wcc --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_wccontent.jar   Add the downloaded patches to the WebLogic Image Tool cache:\n  Click here to see the commands to add patches in to the cache:   ``` bash $ imagetool cache addEntry --key p33578966_122140_Generic --path \u0026lt;download location\u0026gt;/p33578966_122140_Generic.zip $ imagetool cache addEntry --key 28186730_13.9.4.2.8 --path \u0026lt;download location\u0026gt;/p28186730_139428_Generic-24497645.zip ```      Update the patches list to buildArgs.\nTo the create command in the buildArgs file, append the Oracle WebCenter Content patches list using the --patches flag and Opatch patch using the --opatchBugNumber flag. Sample options for the list of patches above are:\n--patches 33578966_12.2.1.4.0 --opatchBugNumber=28186730_13.9.4.2.8 Example buildArgs file after appending product\u0026rsquo;s list of patches and Opatch patch:\ncreate --jdkVersion=8u251 --type WCC --version=12.2.1.4.0 --tag=oracle/wccontent_create_1015:12.2.1.4.0 --pull --chown oracle:root --additionalBuildCommands \u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleWebCenterContent/imagetool/12.2.1.4.0/additionalBuildCmds.txt --additionalBuildFiles \u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleWebCenterContent/dockerfiles/12.2.1.4.0/container-scripts --patches 33578966_12.2.1.4.0 --opatchBugNumber=28186730_13.9.4.2.8 Refer to this page for the complete list of options available with the WebLogic Image Tool create command.\n  Enter the following command to create the Oracle WebCenter Content image:\n$ imagetool @\u0026lt;absolute path to `buildargs` file\u0026gt;\u0026#34;     Click here to see the sample Dockerfile generated with the imagetool command.   ########## BEGIN DOCKERFILE ########## # # Copyright (c) 2019, 2021, Oracle and/or its affiliates. # # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. # # FROM ghcr.io/oracle/oraclelinux:7-slim as os_update LABEL com.oracle.weblogic.imagetool.buildid=\u0026#34;f46ab190-077e-4ed7-b747-7bb170fe592c\u0026#34; USER root RUN yum -y --downloaddir=/tmp/imagetool install gzip tar unzip libaio jq hostname \\  \u0026amp;\u0026amp; yum -y --downloaddir=/tmp/imagetool clean all \\  \u0026amp;\u0026amp; rm -rf /var/cache/yum/* \\  \u0026amp;\u0026amp; rm -rf /tmp/imagetool ## Create user and group RUN if [ -z \u0026#34;$(getent group root)\u0026#34; ]; then hash groupadd \u0026amp;\u0026gt; /dev/null \u0026amp;\u0026amp; groupadd root || exit -1 ; fi \\  \u0026amp;\u0026amp; if [ -z \u0026#34;$(getent passwd oracle)\u0026#34; ]; then hash useradd \u0026amp;\u0026gt; /dev/null \u0026amp;\u0026amp; useradd -g root oracle || exit -1; fi \\  \u0026amp;\u0026amp; mkdir -p /u01 \\  \u0026amp;\u0026amp; chown oracle:root /u01 \\  \u0026amp;\u0026amp; chmod 775 /u01 # Install Java FROM os_update as jdk_build LABEL com.oracle.weblogic.imagetool.buildid=\u0026#34;f46ab190-077e-4ed7-b747-7bb170fe592c\u0026#34; ENV JAVA_HOME=/u01/jdk COPY --chown=oracle:root jdk-8u251-linux-x64.tar.gz /tmp/imagetool/ USER oracle RUN tar xzf /tmp/imagetool/jdk-8u251-linux-x64.tar.gz -C /u01 \\  \u0026amp;\u0026amp; $(test -d /u01/jdk* \u0026amp;\u0026amp; mv /u01/jdk* /u01/jdk || mv /u01/graal* /u01/jdk) \\  \u0026amp;\u0026amp; rm -rf /tmp/imagetool \\  \u0026amp;\u0026amp; rm -f /u01/jdk/javafx-src.zip /u01/jdk/src.zip # Install Middleware FROM os_update as wls_build LABEL com.oracle.weblogic.imagetool.buildid=\u0026#34;f46ab190-077e-4ed7-b747-7bb170fe592c\u0026#34; ENV JAVA_HOME=/u01/jdk \\  ORACLE_HOME=/u01/oracle \\  OPATCH_NO_FUSER=true RUN mkdir -p /u01/oracle \\  \u0026amp;\u0026amp; mkdir -p /u01/oracle/oraInventory \\  \u0026amp;\u0026amp; chown oracle:root /u01/oracle/oraInventory \\  \u0026amp;\u0026amp; chown oracle:root /u01/oracle COPY --from=jdk_build --chown=oracle:root /u01/jdk /u01/jdk/ COPY --chown=oracle:root fmw_12.2.1.4.0_infrastructure_generic.jar fmw.rsp /tmp/imagetool/ COPY --chown=oracle:root fmw_12.2.1.4.0_wccontent.jar wcc.rsp /tmp/imagetool/ COPY --chown=oracle:root oraInst.loc /u01/oracle/ USER oracle RUN echo \u0026#34;INSTALLING MIDDLEWARE\u0026#34; \\  \u0026amp;\u0026amp; echo \u0026#34;INSTALLING fmw\u0026#34; \\  \u0026amp;\u0026amp; \\  /u01/jdk/bin/java -Xmx1024m -jar /tmp/imagetool/fmw_12.2.1.4.0_infrastructure_generic.jar -silent ORACLE_HOME=/u01/oracle \\  -responseFile /tmp/imagetool/fmw.rsp -invPtrLoc /u01/oracle/oraInst.loc -ignoreSysPrereqs -force -novalidation \\  \u0026amp;\u0026amp; echo \u0026#34;INSTALLING wcc\u0026#34; \\  \u0026amp;\u0026amp; \\  /u01/jdk/bin/java -Xmx1024m -jar /tmp/imagetool/fmw_12.2.1.4.0_wccontent.jar -silent ORACLE_HOME=/u01/oracle \\  -responseFile /tmp/imagetool/wcc.rsp -invPtrLoc /u01/oracle/oraInst.loc -ignoreSysPrereqs -force -novalidation \\  \u0026amp;\u0026amp; chmod -R g+r /u01/oracle FROM os_update as final_build ARG ADMIN_NAME ARG ADMIN_HOST ARG ADMIN_PORT ARG MANAGED_SERVER_PORT ENV ORACLE_HOME=/u01/oracle \\  JAVA_HOME=/u01/jdk \\  PATH=${PATH}:/u01/jdk/bin:/u01/oracle/oracle_common/common/bin:/u01/oracle/wlserver/common/bin:/u01/oracle LABEL com.oracle.weblogic.imagetool.buildid=\u0026#34;f46ab190-077e-4ed7-b747-7bb170fe592c\u0026#34; COPY --from=jdk_build --chown=oracle:root /u01/jdk /u01/jdk/ COPY --from=wls_build --chown=oracle:root /u01/oracle /u01/oracle/ USER oracle WORKDIR /u01/oracle #ENTRYPOINT /bin/bash ENV ORACLE_HOME=/u01/oracle \\  VOLUME_DIR=/u01/oracle/user_projects \\  SCRIPT_FILE=/u01/oracle/container-scripts/* \\  USER_MEM_ARGS=\u0026#34;-Djava.security.egd=file:/dev/./urandom\u0026#34; \\  PATH=$PATH:$JAVA_HOME/bin:$ORACLE_HOME/oracle_common/common/bin:/u01/oracle/wlserver/common/bin:/u01/oracle/container-scripts USER root RUN mkdir -p $VOLUME_DIR \u0026amp;\u0026amp; \\  mkdir -p /u01/oracle/container-scripts \u0026amp;\u0026amp; \\  mkdir -p /u01/oracle/silent-install-files-tmp/config \u0026amp;\u0026amp; \\  mkdir -p /u01/oracle/logs \u0026amp;\u0026amp; \\  chown oracle:root -R /u01 $VOLUME_DIR \u0026amp;\u0026amp; \\  chmod a+xr /u01 COPY --chown=oracle:root files/container-scripts/ /u01/oracle/container-scripts/ RUN chmod +xr $SCRIPT_FILE USER oracle EXPOSE $UCM_PORT $UCM_INTRADOC_PORT $IBR_INTRADOC_PORT $IBR_PORT $ADMIN_PORT WORKDIR ${ORACLE_HOME} CMD [\u0026#34;/u01/oracle/container-scripts/createDomainandStartAdmin.sh\u0026#34;] ########## END DOCKERFILE ##########      Check the created image using the docker images command:\n$ docker images | grep wcc   Update an image After setting up the WebLogic Image Tool and required build scripts, use the WebLogic Image Tool to update an existing Oracle WebCenter Content Docker image:\n  Enter the following command for each patch to add the required patch(es) to the WebLogic Image Tool cache:\n$ cd \u0026lt;imagetool-setup\u0026gt; $ imagetool cache addEntry --key=33578966_12.2.1.4.0 --value \u0026lt;downloaded-patches-location\u0026gt;/p33578966_122140_Generic.zip [INFO ] Added entry 33578966_12.2.1.4.0=\u0026lt;downloaded-patches-location\u0026gt;/p33578966_122140_Generic.zip   Provide the following arguments to the WebLogic Image Tool update command:\n –-fromImage - Identify the image that needs to be updated. In the example below, the image to be updated is wccontent:12.2.1.4.0. –-patches - Multiple patches can be specified as a comma-separated list. --tag - Specify the new tag to be applied for the image being built.  Refer here for the complete list of options available with the WebLogic Image Tool update command.\n Note: The WebLogic Image Tool cache should have the latest OPatch zip. The WebLogic Image Tool will update the OPatch if it is not already updated in the image.\n Examples     Click here to see the example `update` command:    # If you are using a pre-built Oracle WebCenter Content image, obtained from My Oracle Support, then please use this command: $ imagetool update --fromImage oracle/wccontent:12.2.1.4.0 --tag=oracle/wccontent_update_1015:12.2.1.4.0 --patches=33578966_12.2.1.4.0 --opatchBugNumber=28186730_13.9.4.2.8 # In case, you chose to build an Oracle WebCenter Content image, please use the command given below: $ imagetool update --chown oracle:root --fromImage oracle/wccontent:12.2.1.4.0 --tag=oracle/wccontent_update_1015:12.2.1.4.0 --patches=33578966_12.2.1.4.0 --opatchBugNumber=28186730_13.9.4.2.8     Check the built image using the docker images command: $ docker images | grep wcc   Create an Oracle WebCenter Content Docker image using Dockerfile For test and development purposes, you can create an Oracle WebCenter Content image using the Dockerfile. Consult the README file for important prerequisite steps, such as building or pulling the Server JRE Docker image, Oracle FMW Infrastructure Docker image, and downloading the Oracle WebCenter Content installer and bundle patch binaries.\nA prebuilt Oracle Fusion Middleware Infrastructure image, container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4-210407, is available at container-registry.oracle.com. We recommend that you pull and rename this image to build the Oracle WebCenter Content image.\n$ docker pull container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4-210407 $ docker tag container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4-210407 oracle/fmw-infrastructure:12.2.1.4.0 Follow these steps to build an Oracle WebCenter Content image :\n  Make a local clone of the sample repository:\n$ git clone https://github.com/oracle/docker-images   Download the Oracle WebCenter Content installer from the Oracle Technology Network or e-delivery.\n Note: Copy the installer binaries to the same location as the Dockerfile.\n   Create the Oracle WebCenter Content image by running the provided script:\n$ cd docker-images/OracleWebCenterContent/dockerfiles $ ./buildDockerImage.sh -v 12.2.1.4 -s The image produced will be named oracle/wccontent:12.2.1.4. The samples and instructions assume the Oracle WebCenter Content image is named wccontent:12.2.1.4.0. You must rename your image to match this name, or update the samples to refer to the image you created.\n$ docker tag oracle/wccontent:12.2.1.4 wccontent:12.2.1.4.0   "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/adminguide/logging-fluentd-setup/",
	"title": "Publish logs to Elasticsearch Using Fluentd",
	"tags": [],
	"description": "Configure a WebLogic domain to use Fluentd to send log information to Elasticsearch.",
	"content": "Introduction This page describes to how to configure a WebLogic domain to use Fluentd to send log information to Elasticsearch. Here’s the general mechanism for how this works:\n fluentd runs as a separate container in the Administration Server and Managed Server pods The log files reside on a volume that is shared between the weblogic-server and fluentd containers fluentd tails the domain logs files and exports them to Elasticsearch A ConfigMap contains the filter and format rules for exporting log records.  Create fluentd configuration Create a ConfigMap named fluentd-config in the namespace of the domain. The ConfigMap contains the parsing rules and Elasticsearch configuration. Here’s an explanation of some elements defined in the ConfigMap:\n The @type tail indicates that tail will be used to obtain updates to the log file The path of the log file is obtained from the LOG_PATH environment variable that is defined in the fluentd container The tag value of log records is obtained from the DOMAIN_UID environment variable that is defined in the fluentd container The parse section defines how to interpret and tag each element of a log record The match section contains the configuration information for connecting to Elasticsearch and defines the index name of each record to be the domainUID  Here is a sample configmap for fluentd configuration,\n  Click here to see sample configmap for fluentd configuration `fluentd_configmap.yaml`.   apiVersion: v1 kind: ConfigMap metadata: labels: weblogic.domainUID: wccinfra weblogic.resourceVersion: domain-v2 name: fluentd-config namespace: wccns data: fluentd.conf: | \u0026lt;match fluent.**\u0026gt; @type null \u0026lt;/match\u0026gt; \u0026lt;source\u0026gt; @type tail path \u0026quot;#{ENV['LOG_PATH']}\u0026quot; pos_file /tmp/server.log.pos read_from_head true tag \u0026quot;#{ENV['DOMAIN_UID']}\u0026quot; # multiline_flush_interval 20s \u0026lt;parse\u0026gt; @type multiline format_firstline /^####/ format1 /^####\u0026lt;(?\u0026lt;timestamp\u0026gt;(.*?))\u0026gt;/ format2 / \u0026lt;(?\u0026lt;level\u0026gt;(.*?))\u0026gt;/ format3 / \u0026lt;(?\u0026lt;subSystem\u0026gt;(.*?))\u0026gt;/ format4 / \u0026lt;(?\u0026lt;serverName\u0026gt;(.*?))\u0026gt;/ format5 / \u0026lt;(?\u0026lt;serverName2\u0026gt;(.*?))\u0026gt;/ format6 / \u0026lt;(?\u0026lt;threadName\u0026gt;(.*?))\u0026gt;/ format7 / \u0026lt;(?\u0026lt;info1\u0026gt;(.*?))\u0026gt;/ format8 / \u0026lt;(?\u0026lt;info2\u0026gt;(.*?))\u0026gt;/ format9 / \u0026lt;(?\u0026lt;info3\u0026gt;(.*?))\u0026gt;/ format10 / \u0026lt;(?\u0026lt;sequenceNumber\u0026gt;(.*?))\u0026gt;/ format11 / \u0026lt;(?\u0026lt;severity\u0026gt;(.*?))\u0026gt;/ format12 / \u0026lt;(?\u0026lt;messageID\u0026gt;(.*?))\u0026gt;/ format13 / \u0026lt;(?\u0026lt;message\u0026gt;(.*?))\u0026gt;/ \u0026lt;/parse\u0026gt; \u0026lt;/source\u0026gt; \u0026lt;match **\u0026gt; @type elasticsearch host \u0026quot;#{ENV['ELASTICSEARCH_HOST']}\u0026quot; port \u0026quot;#{ENV['ELASTICSEARCH_PORT']}\u0026quot; user \u0026quot;#{ENV['ELASTICSEARCH_USER']}\u0026quot; password \u0026quot;#{ENV['ELASTICSEARCH_PASSWORD']}\u0026quot; index_name \u0026quot;#{ENV['DOMAIN_UID']}\u0026quot; \u0026lt;/match\u0026gt;    Create the ConfigMap using the following command\n$kubectl create -f fluentd_configmap.yaml Mount fluentd configuration - Configmap as volume in the WebLogic container. Edit the domain definition and configure a volume for the ConfigMap containing the fluentd configuration.\n$kubectl edit domain -n wccns Below sample yaml code add Configmap as volume,\n volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: wccinfra-domain-pvc - configMap: defaultMode: 420 name: fluentd-config name: fluentd-config-volume Add fluentd container to WebLogic Server pods Add a \u0026ldquo;fluentd container yaml\u0026rdquo; to the domain under serverPod: section that will run fluentd in the Administration Server and Managed Server pods.\nNotice the container definition:\n Defines a LOG_PATH environment variable that points to the log location of WebLogic servers. Defines ELASTICSEARCH_HOST, ELASTICSEARCH_PORT, ELASTICSEARCH_USER, and ELASTICSEARCH_PASSWORD environment variables. Has volume mounts for the fluentd-config ConfigMap and the volume containing the domain logs.  $kubectl edit domain -n wccns    Click here to see sample fluentd container yaml `fluentd container`.   containers: - args: - -c - /etc/fluent.conf env: - name: DOMAIN_UID valueFrom: fieldRef: fieldPath: metadata.labels['weblogic.domainUID'] - name: SERVER_NAME valueFrom: fieldRef: fieldPath: metadata.labels['weblogic.serverName'] - name: LOG_PATH value: /u01/oracle/user_projects/domains/logs/wccinfra/$(SERVER_NAME).log - name: FLUENTD_CONF value: fluentd.conf - name: FLUENT_ELASTICSEARCH_SED_DISABLE value: \u0026quot;true\u0026quot; - name: ELASTICSEARCH_HOST value: elasticsearch.default.svc.cluster.local - name: ELASTICSEARCH_PORT value: \u0026quot;9200\u0026quot; - name: ELASTICSEARCH_USER value: elastic - name: ELASTICSEARCH_PASSWORD value: changeme image: fluent/fluentd-kubernetes-daemonset:v1.3.3-debian-elasticsearch-1.3 imagePullPolicy: IfNotPresent name: fluentd resources: {} volumeMounts: - mountPath: /fluentd/etc/fluentd.conf name: fluentd-config-volume subPath: fluentd.conf - mountPath: /u01/oracle/user_projects/domains name: weblogic-domain-storage-volume    Restart WebLogic Servers To restart the servers, edit the domain and change serverStartPolicy to NEVER for the WebLogic servers to shutdown\n$kubectl edit domain -n wccns After all the servers are shutdown edit domain again and set serverStartPolicy to IF_NEEDED for the servers to start again.\nCreate index pattern in Kibana Create an index pattern \u0026ldquo;wccinfra*\u0026rdquo; in Kibana \u0026gt; Management. After the server starts, you will be able to see the log data in the Kibana dashboard,\n"
},
{
	"uri": "/fmw-kubernetes/soa-domains/create-or-update-image/",
	"title": "Create or update an image",
	"tags": [],
	"description": "Create or update an Oracle SOA Suite Docker image used for deploying Oracle SOA Suite domains. An Oracle SOA Suite Docker image can be created using the WebLogic Image Tool or using the Dockerfile approach.",
	"content": "If you have access to the My Oracle Support (MOS), and there is a need to build a new image with a patch (bundle or interim), it is recommended to use the WebLogic Image Tool to build an Oracle SOA Suite image for production deployments.\n Create or update an Oracle SOA Suite Docker image using the WebLogic Image Tool  Set up the WebLogic Image Tool Create an image Update an image   Create an Oracle SOA Suite Docker image using Dockerfile  Create or update an Oracle SOA Suite Docker image using the WebLogic Image Tool Using the WebLogic Image Tool, you can create a new Oracle SOA Suite Docker image (can include patches as well) or update an existing image with one or more patches (bundle patch and interim patches).\n Recommendations:\n Use create for creating a new Oracle SOA Suite Docker image either:  without any patches or, containing the Oracle SOA Suite binaries, bundle patch and interim patches. This is the recommended approach if you have access to the Oracle SOA Suite patches because it optimizes the size of the image.   Use update for patching an existing Oracle SOA Suite Docker image with a single interim patch. Note that the patched image size may increase considerably due to additional image layers introduced by the patch application tool.   Set up the WebLogic Image Tool  Prerequisites Set up the WebLogic Image Tool Validate setup WebLogic Image Tool build directory WebLogic Image Tool cache Set up additional build scripts  Prerequisites Verify that your environment meets the following prerequisites:\n Docker client and daemon on the build machine, with minimum Docker version 18.03.1.ce. Bash version 4.0 or later, to enable the command complete feature. JAVA_HOME environment variable set to the appropriate JDK location.  Set up the WebLogic Image Tool To set up the WebLogic Image Tool:\n  Create a working directory and change to it. In these steps, this directory is imagetool-setup.\n$ mkdir imagetool-setup $ cd imagetool-setup   Download the latest version of the WebLogic Image Tool from the releases page.\n  Unzip the release ZIP file to the imagetool-setup directory.\n  Execute the following commands to set up the WebLogic Image Tool on a Linux environment:\n$ cd imagetool-setup/imagetool/bin $ source setup.sh   Validate setup To validate the setup of the WebLogic Image Tool:\n  Enter the following command to retrieve the version of the WebLogic Image Tool:\n$ imagetool --version   Enter imagetool then press the Tab key to display the available imagetool commands:\n$ imagetool \u0026lt;TAB\u0026gt; cache create help rebase update   WebLogic Image Tool build directory The WebLogic Image Tool creates a temporary Docker context directory, prefixed by wlsimgbuilder_temp, every time the tool runs. Under normal circumstances, this context directory will be deleted. However, if the process is aborted or the tool is unable to remove the directory, it is safe for you to delete it manually. By default, the WebLogic Image Tool creates the Docker context directory under the user\u0026rsquo;s home directory. If you prefer to use a different directory for the temporary context, set the environment variable WLSIMG_BLDDIR:\n$ export WLSIMG_BLDDIR=\u0026#34;/path/to/buid/dir\u0026#34; WebLogic Image Tool cache The WebLogic Image Tool maintains a local file cache store. This store is used to look up where the Java, WebLogic Server installers, and WebLogic Server patches reside in the local file system. By default, the cache store is located in the user\u0026rsquo;s $HOME/cache directory. Under this directory, the lookup information is stored in the .metadata file. All automatically downloaded patches also reside in this directory. You can change the default cache store location by setting the environment variable WLSIMG_CACHEDIR:\n$ export WLSIMG_CACHEDIR=\u0026#34;/path/to/cachedir\u0026#34; Set up additional build scripts Creating an Oracle SOA Suite Docker image using the WebLogic Image Tool requires additional container scripts for Oracle SOA Suite domains.\n  Clone the docker-images repository to set up those scripts. In these steps, this directory is DOCKER_REPO:\n$ cd imagetool-setup $ git clone https://github.com/oracle/docker-images.git   Copy the additional WebLogic Image Tool build files from the operator source repository to the imagetool-setup location:\n$ mkdir -p imagetool-setup/docker-images/OracleSOASuite/imagetool/12.2.1.4.0 $ cd imagetool-setup/docker-images/OracleSOASuite/imagetool/12.2.1.4.0 $ cp -rf ${WORKDIR}/imagetool-scripts/* .    Note: If you want to create the image continue with the following steps, otherwise to update the image see update an image.\n Create an image After setting up the WebLogic Image Tool and required build scripts, follow these steps to use the WebLogic Image Tool to create a new Oracle SOA Suite Docker image.\nDownload the Oracle SOA Suite installation binaries and patches You must download the required Oracle SOA Suite installation binaries and patches as listed below from the Oracle Software Delivery Cloud and save them in a directory of your choice. In these steps, this directory is download location.\nThe installation binaries and patches required for release 25.1.2 are:\n  JDK:\n jdk-8u441-linux-x64.tar.gz    Fusion Middleware Infrastructure installer:\n fmw_12.2.1.4.0_infrastructure.jar    Oracle SOA Suite installers:\n fmw_12.2.1.4.0_soa.jar fmw_12.2.1.4.0_osb.jar fmw_12.2.1.4.0_b2bhealthcare.jar    In this release, Oracle B2B is not supported to be configured, but the installer is required for completeness.\n   Fusion Middleware Infrastructure patches:\n p28186730_1394218_Generic.zip (OPATCH 13.9.4.2.17 FOR EM 13.5 AND FMW/WLS 12.2.1.4.0 AND 14.1.1.0.0) p37453807_122140_Generic.zip (WLS PATCH SET UPDATE 12.2.1.4.250107) p37374672_122140_Generic.zip (FMW Thirdparty Bundle Patch 12.2.1.4.241210) p36316422_122140_Generic.zip (OPSS BUNDLE PATCH 12.2.1.4.240220) p37035947_122140_Generic.zip (OWSM BUNDLE PATCH 12.2.1.4.240908) p37388935_122140_Generic.zip (ADF BUNDLE PATCH 12.2.1.4.241212) p37351860_122140_Generic.zip (Coherence 12.2.1.4 Cumulative Patch 24 (12.2.1.4.24)) p33093748_122140_Generic.zip (FMW PLATFORM 12.2.1.4.0 SPU FOR APRCPU2021) p37056593_122140_Generic.zip (OCT 2024 CLONING SPU FOR FMW 12.2.1.4.0) p35965629_122140_Generic.zip (ADR FOR WEBLOGIC SERVER 12.2.1.4.0 - SIZE OPTIMIZED FOR JAN 2024) p37258699_122140_Generic.zip (JDBC19.25 BUNDLE PATCH 12.2.1.4.241107) p37202255_122140_Generic.zip (RDA release 25.1-2025121 for FMW 12.2.1.4.0) p37284722_122140_Generic.zip (WebCenter Core Bundle Patch 12.2.1.4.241114) p37297691_122140_Generic.zip OSS 19C BUNDLE PATCH 12.2.1.4.241119 p36789759_122140_Generic.zip FMW PLATFORM BUNDLE PATCH 12.2.1.4.240812 p34065178_122140_Generic.zip (OVD One Off) p36426672_122140_Generic.zip (WLS One Off) p34809489_122140_Generic.zip (JDEV One Off) p34542329_122140_Generic.zip (EM One Off) p34765492_122140_Generic.zip (EM One Off)    Oracle SOA Suite and Oracle Service Bus patches\n p37389582_122140_Generic.zip (SOA Bundle Patch 12.2.1.4.241212) p36918958_122140_Generic.zip (OSB BUNDLE PATCH 12.2.1.4.240805) p33404495_122140_Generic.zip (SOA One-off) p32827327_122140_Generic.zip (OSB One-off) p31713053_122140_Generic.zip (One-off patch)    Update required build files The following files in the code repository location \u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleSOASuite/imagetool/12.2.1.4.0 are used for creating the image:\n additionalBuildCmds.txt buildArgs    In the buildArgs file, update all occurrences of %DOCKER_REPO% with the docker-images repository location, which is the complete path of \u0026lt;imagetool-setup-location\u0026gt;/docker-images.\nFor example, update:\n%DOCKER_REPO%/OracleSOASuite/imagetool/12.2.1.4.0/\nto:\n\u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleSOASuite/imagetool/12.2.1.4.0/\n  Similarly, update the placeholders %JDK_VERSION% and %BUILDTAG% with appropriate values.\n  Update the response file \u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleFMWInfrastructure/dockerfiles/12.2.1.4/install.file to add the parameter INSTALL_TYPE=\u0026quot;Fusion Middleware Infrastructure\u0026quot; in the [GENERIC] section.\n  Create the image   Add a JDK package to the WebLogic Image Tool cache:\n$ imagetool cache addInstaller --type jdk --version 8u441 --path \u0026lt;download location\u0026gt;/jdk-8u441-linux-x64.tar.gz   Add the downloaded installation binaries to the WebLogic Image Tool cache:\n$ imagetool cache addInstaller --type fmw --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_infrastructure.jar $ imagetool cache addInstaller --type soa --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_soa.jar $ imagetool cache addInstaller --type osb --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_osb.jar $ imagetool cache addInstaller --type b2b --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_b2bhealthcare.jar   Add the downloaded OPatch patch to the WebLogic Image Tool cache:\n$ imagetool cache addEntry --key 28186730_13.9.4.2.18 --value \u0026lt;download location\u0026gt;/p28186730_13942178Generic.zip   Append the --opatchBugNumber flag and the OPatch patch key to the create command in the buildArgs file:\n--opatchBugNumber 28186730_13.9.4.2.18   Add the downloaded product patches to the WebLogic Image Tool cache:\n$ imagetool cache addEntry --key 37453807_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p37453807_122140_Generic.zip $ imagetool cache addEntry --key 37374672_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p37374672_122140_Generic.zip $ imagetool cache addEntry --key 36316422_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p36316422_122140_Generic.zip $ imagetool cache addEntry --key 37035947_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p37035947_122140_Generic.zip $ imagetool cache addEntry --key 37388935_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p37388935_122140_Generic.zip $ imagetool cache addEntry --key 37351860_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p37351860_122140_Generic.zip $ imagetool cache addEntry --key 33093748_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33093748_122140_Generic.zip $ imagetool cache addEntry --key 37056593_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p37056593_122140_Generic.zip $ imagetool cache addEntry --key 35965629_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p35965629_122140_Generic.zip $ imagetool cache addEntry --key 37258699_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p37258699_122140_Generic.zip $ imagetool cache addEntry --key 37202255_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p37202255_122140_Generic.zip $ imagetool cache addEntry --key 37284722_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p37284722_122140_Generic.zip $ imagetool cache addEntry --key 37297691_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p37297691_122140_Generic.zip $ imagetool cache addEntry --key 36789759_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p36789759_122140_Generic.zip $ imagetool cache addEntry --key 34065178_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p34065178_122140_Generic.zip $ imagetool cache addEntry --key 36426672_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p36426672_122140_Generic.zip $ imagetool cache addEntry --key 34809489_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p34809489_122140_Generic.zip $ imagetool cache addEntry --key 34542329_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p34542329_122140_Generic.zip $ imagetool cache addEntry --key 34765492_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p34765492_122140_Generic.zip   Append the --patches flag and the product patch keys to the create command in the buildArgs file. The --patches list must be a comma-separated collection of patch --key values used in the imagetool cache addEntry commands above.\nSample --patches list for the product patches added in to the cache:\n--patches 37453807_12.2.1.4.0,37374672_12.2.1.4.0,36316422_12.2.1.4.0,37035947_12.2.1.4.0,37388935_12.2.1.4.0,37351860_12.2.1.4.0,33093748_12.2.1.4.0,37056593_12.2.1.4.0,35965629_12.2.1.4.0,37258699_12.2.1.4.0,37202255_12.2.1.4.0,37284722_12.2.1.4.0,37297691_12.2.1.4.0,36789759_12.2.1.4.0,34065178_12.2.1.4.0,36426672_12.2.1.4.0,34809489_12.2.1.4.0,34542329_12.2.1.4.0,34765492_12.2.1.4.0 Example buildArgs file after appending the OPatch patch and product patches:\ncreate --jdkVersion 8u441 --type soa_osb_b2b --version 12.2.1.4.0 --tag oracle/soasuite:12.2.1.4.0 --pull --fromImage ghcr.io/oracle/oraclelinux:7-slim --chown oracle:root --additionalBuildCommands \u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleSOASuite/imagetool/12.2.1.4.0/additionalBuildCmds.txt --additionalBuildFiles \u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleSOASuite/dockerfiles/12.2.1.4/container-scripts --installerResponseFile \u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleFMWInfrastructure/dockerfiles/12.2.1.4/install.file,\u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleSOASuite/dockerfiles/12.2.1.4/install/soasuite.response,\u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleSOASuite/dockerfiles/12.2.1.4/install/osb.response,\u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleSOASuite/dockerfiles/12.2.1.4/install/b2b.response --patches 37453807_12.2.1.4.0,37374672_12.2.1.4.0,36316422_12.2.1.4.0,37035947_12.2.1.4.0,37388935_12.2.1.4.0,37351860_12.2.1.4.0,33093748_12.2.1.4.0,37056593_12.2.1.4.0,35965629_12.2.1.4.0,37258699_12.2.1.4.0,37202255_12.2.1.4.0,37284722_12.2.1.4.0,37297691_12.2.1.4.0,36789759_12.2.1.4.0,34065178_12.2.1.4.0,36426672_12.2.1.4.0,34809489_12.2.1.4.0,34542329_12.2.1.4.0,34765492_12.2.1.4.0  Note: In the buildArgs file:\n --jdkVersion value must match the --version value used in the imagetool cache addInstaller command for --type jdk. --version value must match the --version value used in the imagetool cache addInstaller command for --type soa. --pull always pulls the latest base Linux image oraclelinux:7-slim from the Docker registry. This flag can be removed if you want to use the Linux image oraclelinux:7-slim, which is already available on the host where the SOA image is created.   Refer to this page for the complete list of options available with the WebLogic Image Tool create command.\n  Create the Oracle SOA Suite image:\n$ imagetool @\u0026lt;absolute path to buildargs file\u0026gt;  Note: Make sure that the absolute path to the buildargs file is prepended with a @ character, as shown in the example above.\n For example:\n$ imagetool @\u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleSOASuite/imagetool/12.2.1.4.0/buildArgs    Click here to see the sample Dockerfile generated with the `imagetool` command.   ########## BEGIN DOCKERFILE ########## # Copyright (c) 2019, 2021, Oracle and/or its affiliates. # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. # FROM ghcr.io/oracle/oraclelinux:7-slim as os_update LABEL com.oracle.weblogic.imagetool.buildid=\u0026quot;b4554a25-22dd-4793-b121-9989bd4be40a\u0026quot; USER root # Use package manager to make sure that unzip, tar, and other required packages are installed # # Copyright (c) 2021, Oracle and/or its affiliates. # # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. # # Ensure necessary OS packages are installed RUN yum -y --downloaddir=/tmp/imagetool install gzip tar unzip libaio jq findutils diffutils hostname \\ \u0026amp;\u0026amp; yum -y --downloaddir=/tmp/imagetool clean all \\ \u0026amp;\u0026amp; rm -rf /var/cache/yum/* \\ \u0026amp;\u0026amp; rm -rf /tmp/imagetool # Create the Oracle user that will be the owner of the installed software # # Copyright (c) 2021, Oracle and/or its affiliates. # # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. # # Create user and group RUN if [ -z \u0026quot;$(getent group root)\u0026quot; ]; then hash groupadd \u0026amp;\u0026gt; /dev/null \u0026amp;\u0026amp; groupadd root || exit -1 ; fi \\ \u0026amp;\u0026amp; if [ -z \u0026quot;$(getent passwd oracle)\u0026quot; ]; then hash useradd \u0026amp;\u0026gt; /dev/null \u0026amp;\u0026amp; useradd -g root oracle || exit -1; fi \\ \u0026amp;\u0026amp; mkdir -p /u01 \\ \u0026amp;\u0026amp; chown oracle:root /u01 \\ \u0026amp;\u0026amp; chmod 775 /u01 # If Java is not already in the base image, install it # Copyright (c) 2021, Oracle and/or its affiliates. # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. # # Installing Java FROM os_update as jdk_build LABEL com.oracle.weblogic.imagetool.buildid=\u0026quot;b4554a25-22dd-4793-b121-9989bd4be40a\u0026quot; ENV JAVA_HOME=/u01/jdk COPY --chown=oracle:root jdk-8u301-linux-x64.tar.gz /tmp/imagetool/ USER oracle RUN tar xzf /tmp/imagetool/jdk-8u301-linux-x64.tar.gz -C /u01 \\ \u0026amp;\u0026amp; $(test -d /u01/jdk* \u0026amp;\u0026amp; mv /u01/jdk* /u01/jdk || mv /u01/graal* /u01/jdk) \\ \u0026amp;\u0026amp; rm -rf /tmp/imagetool \\ \u0026amp;\u0026amp; rm -f /u01/jdk/javafx-src.zip /u01/jdk/src.zip # If an Oracle Home is not already in the base image, install the middleware components # Copyright (c) 2021, Oracle and/or its affiliates. # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. # # Installing Middleware FROM os_update as wls_build LABEL com.oracle.weblogic.imagetool.buildid=\u0026quot;b4554a25-22dd-4793-b121-9989bd4be40a\u0026quot; ENV JAVA_HOME=/u01/jdk \\ ORACLE_HOME=/u01/oracle \\ OPATCH_NO_FUSER=true RUN mkdir -p /u01/oracle \\ \u0026amp;\u0026amp; mkdir -p /u01/oracle/oraInventory \\ \u0026amp;\u0026amp; chown oracle:root /u01/oracle/oraInventory \\ \u0026amp;\u0026amp; chown oracle:root /u01/oracle COPY --from=jdk_build --chown=oracle:root /u01/jdk /u01/jdk/ COPY --chown=oracle:root fmw_12.2.1.4.0_infrastructure.jar install.file /tmp/imagetool/ COPY --chown=oracle:root fmw_12.2.1.4.0_soa.jar soasuite.response /tmp/imagetool/ COPY --chown=oracle:root fmw_12.2.1.4.0_osb.jar osb.response /tmp/imagetool/ COPY --chown=oracle:root fmw_12.2.1.4.0_b2bhealthcare.jar b2b.response /tmp/imagetool/ COPY --chown=oracle:root oraInst.loc /u01/oracle/ USER oracle RUN echo \u0026quot;INSTALLING MIDDLEWARE\u0026quot; \\ \u0026amp;\u0026amp; echo \u0026quot;INSTALLING fmw\u0026quot; \\ \u0026amp;\u0026amp; \\ /u01/jdk/bin/java -Xmx1024m -jar /tmp/imagetool/fmw_12.2.1.4.0_infrastructure.jar -silent ORACLE_HOME=/u01/oracle \\ -responseFile /tmp/imagetool/install.file -invPtrLoc /u01/oracle/oraInst.loc -ignoreSysPrereqs -force -novalidation \\ \u0026amp;\u0026amp; echo \u0026quot;INSTALLING soa\u0026quot; \\ \u0026amp;\u0026amp; \\ /u01/jdk/bin/java -Xmx1024m -jar /tmp/imagetool/fmw_12.2.1.4.0_soa.jar -silent ORACLE_HOME=/u01/oracle \\ -responseFile /tmp/imagetool/soasuite.response -invPtrLoc /u01/oracle/oraInst.loc -ignoreSysPrereqs -force -novalidation \\ \u0026amp;\u0026amp; echo \u0026quot;INSTALLING osb\u0026quot; \\ \u0026amp;\u0026amp; \\ /u01/jdk/bin/java -Xmx1024m -jar /tmp/imagetool/fmw_12.2.1.4.0_osb.jar -silent ORACLE_HOME=/u01/oracle \\ -responseFile /tmp/imagetool/osb.response -invPtrLoc /u01/oracle/oraInst.loc -ignoreSysPrereqs -force -novalidation \\ \u0026amp;\u0026amp; echo \u0026quot;INSTALLING b2b\u0026quot; \\ \u0026amp;\u0026amp; \\ /u01/jdk/bin/java -Xmx1024m -jar /tmp/imagetool/fmw_12.2.1.4.0_b2bhealthcare.jar -silent ORACLE_HOME=/u01/oracle \\ -responseFile /tmp/imagetool/b2b.response -invPtrLoc /u01/oracle/oraInst.loc -ignoreSysPrereqs -force -novalidation \\ \u0026amp;\u0026amp; test $? -eq 0 \\ \u0026amp;\u0026amp; chmod -R g+r /u01/oracle \\ || (grep -vh \u0026quot;NOTIFICATION\u0026quot; /tmp/OraInstall*/install*.log \u0026amp;\u0026amp; exit 1) # # Copyright (c) 2021, Oracle and/or its affiliates. # # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. # # Update OPatch and apply WebLogic patches COPY --chown=oracle:root p28186730_1394217_Generic.zip /tmp/imagetool/opatch/ RUN cd /tmp/imagetool/opatch \\ \u0026amp;\u0026amp; /u01/jdk/bin/jar -xf /tmp/imagetool/opatch/p28186730_1394216_Generic.zip \\ \u0026amp;\u0026amp; /u01/jdk/bin/java -jar /tmp/imagetool/opatch/6880880/opatch_generic.jar -silent -ignoreSysPrereqs -force -novalidation oracle_home=/u01/oracle \\ \u0026amp;\u0026amp; rm -rf /tmp/imagetool COPY --chown=oracle:root patches/* /tmp/imagetool/patches/ # Apply all patches provided at the same time RUN /u01/oracle/OPatch/opatch napply -silent -oh /u01/oracle -nonrollbackable -phBaseDir /tmp/imagetool/patches \\ \u0026amp;\u0026amp; test $? -eq 0 \\ \u0026amp;\u0026amp; /u01/oracle/OPatch/opatch util cleanup -silent -oh /u01/oracle FROM os_update as final_build ENV ORACLE_HOME=/u01/oracle \\ JAVA_HOME=/u01/jdk \\ PATH=${PATH}:/u01/jdk/bin:/u01/oracle/oracle_common/common/bin:/u01/oracle/wlserver/common/bin:/u01/oracle LABEL com.oracle.weblogic.imagetool.buildid=\u0026quot;b4554a25-22dd-4793-b121-9989bd4be40a\u0026quot; COPY --from=jdk_build --chown=oracle:root /u01/jdk /u01/jdk/ COPY --from=wls_build --chown=oracle:root /u01/oracle /u01/oracle/ USER oracle WORKDIR /u01/oracle #ENTRYPOINT /bin/bash ENV ORACLE_HOME=/u01/oracle \\ VOLUME_DIR=/u01/oracle/user_projects \\ SCRIPT_FILE=/u01/oracle/container-scripts/* \\ HEALTH_SCRIPT_FILE=/u01/oracle/container-scripts/get_healthcheck_url.sh \\ JAVA_OPTIONS=\u0026quot;-Doracle.jdbc.fanEnabled=false -Dweblogic.StdoutDebugEnabled=false\u0026quot; \\ PATH=$PATH:/u01/oracle/container-scripts:/u01/oracle/oracle_common/modules/thirdparty/org.apache.ant/1.10.5.0.0/apache-ant-1.10.5/bin USER root RUN mkdir -p $VOLUME_DIR \u0026amp;\u0026amp; chown oracle:root /u01 $VOLUME_DIR \u0026amp;\u0026amp; \\ mkdir -p /u01/oracle/container-scripts COPY --chown=oracle:root files/container-scripts/ /u01/oracle/container-scripts/ RUN chmod +xr $SCRIPT_FILE USER oracle RUN if [ -f \u0026quot;${ORACLE_HOME}/soa/soa/thirdparty/edifecs/XEngine_8_4_1_23.tar.gz\u0026quot; ]; then \\ cd $ORACLE_HOME/soa/soa/thirdparty/edifecs \u0026amp;\u0026amp; \\ tar -zxvf XEngine_8_4_1_23.tar.gz; \\ else \\ echo -e \u0026quot;\\nXEngine_8_4_1_23.tar.gz not present in ${ORACLE_HOME}/soa/soa/thirdparty/edifecs directory. Skipping untar.\u0026quot;; \\ fi HEALTHCHECK --start-period=5m --interval=1m CMD curl -k -s --fail `$HEALTH_SCRIPT_FILE` || exit 1 WORKDIR ${ORACLE_HOME} CMD [\u0026quot;/u01/oracle/container-scripts/createDomainAndStart.sh\u0026quot;] ########## END DOCKERFILE ##########      Check the created image using the docker images command:\n$ docker images | grep soasuite   Update an image After setting up the WebLogic Image Tool and required build scripts, use the WebLogic Image Tool to update an existing Oracle SOA Suite Docker image:\n  Enter the following command to add the OPatch patch to the WebLogic Image Tool cache:\n$ imagetool cache addEntry --key 28186730_13.9.4.2.18 --value \u0026lt;download location\u0026gt;/p28186730_1394218_Generic.zip   Execute the imagetool cache addEntry command for each patch to add the required patch(es) to the WebLogic Image Tool cache. For example, to add patch p30761841_122140_Generic.zip:\n$ imagetool cache addEntry --key=30761841_12.2.1.4.0 --value \u0026lt;downloaded-patches-location\u0026gt;/p30761841_122140_Generic.zip   Provide the following arguments to the WebLogic Image Tool update command:\n –-fromImage - Identify the image that needs to be updated. In the example below, the image to be updated is soasuite:12.2.1.4. –-patches - Multiple patches can be specified as a comma-separated list. --tag - Specify the new tag to be applied for the image being built.  Refer here for the complete list of options available with the WebLogic Image Tool update command.\n Note: The WebLogic Image Tool cache should have the latest OPatch zip. The WebLogic Image Tool will update the OPatch if it is not already updated in the image.\n Examples   Click here to see the example \u0026#39;update\u0026#39; command:   $ imagetool update --fromImage soasuite:12.2.1.4 --chown oracle:root --tag=soasuite:12.2.1.4-30761841 --patches=30761841_12.2.1.4.0 --opatchBugNumber=28186730_13.9.4.2.17 [INFO ] Image Tool build ID: bd21dc73-b775-4186-ae03-8219bf02113e [INFO ] Temporary directory used for docker build context: \u0026lt;work-directory\u0026gt;/wlstmp/wlsimgbuilder_temp1117031733123594064 [INFO ] Using patch 28186730_13.9.4.2.17 from cache: \u0026lt;downloaded-patches-location\u0026gt;/p28186730_1394217_Generic.zip [WARNING] skipping patch conflict check, no support credentials provided [WARNING] No credentials provided, skipping validation of patches [INFO ] Using patch 30761841_12.2.1.4.0 from cache: \u0026lt;downloaded-patches-location\u0026gt;/p30761841_122140_Generic.zip [INFO ] docker cmd = docker build --force-rm=true --no-cache --tag soasuite:12.2.1.4-30761841 --build-arg http_proxy=http://\u0026lt;YOUR-COMPANY-PROXY\u0026gt; --build-arg https_proxy=http://\u0026lt;YOUR-COMPANY-PROXY\u0026gt; --build-arg no_proxy=\u0026lt;IP addresses and Domain address for no_proxy\u0026gt;,/var/run/docker.sock \u0026lt;work-directory\u0026gt;/wlstmp/wlsimgbuilder_temp1117031733123594064 Sending build context to Docker daemon 53.47MB Step 1/7 : FROM soasuite:12.2.1.4 as FINAL_BUILD ---\u0026gt; 445b649a3459 Step 2/7 : USER root ---\u0026gt; Running in 27f45e6958c3 Removing intermediate container 27f45e6958c3 ---\u0026gt; 150ae0161d46 Step 3/7 : ENV OPATCH_NO_FUSER=true ---\u0026gt; Running in daddfbb8fd9e Removing intermediate container daddfbb8fd9e ---\u0026gt; a5fc6b74be39 Step 4/7 : LABEL com.oracle.weblogic.imagetool.buildid=\u0026quot;bd21dc73-b775-4186-ae03-8219bf02113e\u0026quot; ---\u0026gt; Running in cdfec79c3fd4 Removing intermediate container cdfec79c3fd4 ---\u0026gt; 4c773aeb956f Step 5/7 : USER oracle ---\u0026gt; Running in ed3432e43e89 Removing intermediate container ed3432e43e89 ---\u0026gt; 54fe6b07c447 Step 6/7 : COPY --chown=oracle:oracle patches/* /tmp/imagetool/patches/ ---\u0026gt; d6d12f02a9be Step 7/7 : RUN /u01/oracle/OPatch/opatch napply -silent -oh /u01/oracle -phBaseDir /tmp/imagetool/patches \u0026amp;\u0026amp; /u01/oracle/OPatch/opatch util cleanup -silent -oh /u01/oracle \u0026amp;\u0026amp; rm -rf /tmp/imagetool ---\u0026gt; Running in a79addca4d2f Oracle Interim Patch Installer version 13.9.4.2.17 Copyright (c) 2020, Oracle Corporation. All rights reserved. Oracle Home : /u01/oracle Central Inventory : /u01/oracle/oraInventory from : /u01/oracle/oraInst.loc OPatch version : 13.9.4.2.18 OUI version : 13.9.4.0.0 Log file location : /u01/oracle/cfgtoollogs/opatch/opatch2020-06-01_10-56-13AM_1.log OPatch detects the Middleware Home as \u0026quot;/u01/oracle\u0026quot; Verifying environment and performing prerequisite checks... OPatch continues with these patches: 30761841 Do you want to proceed? [y|n] Y (auto-answered by -silent) User Responded with: Y All checks passed. Please shutdown Oracle instances running out of this ORACLE_HOME on the local system. (Oracle Home = '/u01/oracle') Is the local system ready for patching? [y|n] Y (auto-answered by -silent) User Responded with: Y Backing up files... Applying interim patch '30761841' to OH '/u01/oracle' ApplySession: Optional component(s) [ oracle.org.bouncycastle.bcprov.ext.jdk15on, 1.55.0.0.0 ] , [ oracle.org.bouncycastle.bcprov.ext.jdk15on, 1.55.0.0.0 ] , [ oracle.org.bouncycastle.bcprov.ext.jdk15on, 1.5.0.0.0 ] , [ oracle.org.bouncycastle.bcprov.ext.jdk15on, 1.5.0.0.0 ] , [ oracle.org.bouncycastle.bcprov.jdk15on, 1.55.0.0.0 ] , [ oracle.org.bouncycastle.bcprov.jdk15on, 1.55.0.0.0 ] , [ oracle.org.bouncycastle.bcprov.jdk15on, 1.52.0.0.0 ] , [ oracle.org.bouncycastle.bcprov.jdk15on, 1.52.0.0.0 ] , [ oracle.org.bouncycastle.bcprov.ext.jdk15on, 1.48.0.0.0 ] , [ oracle.org.bouncycastle.bcprov.ext.jdk15on, 1.48.0.0.0 ] , [ oracle.org.bouncycastle.bcpkix.jdk15on, 1.49.0.0.0 ] , [ oracle.org.bouncycastle.bcpkix.jdk15on, 1.49.0.0.0 ] , [ oracle.org.bouncycastle.bcprov.jdk15on, 1.51.0.0.0 ] , [ oracle.org.bouncycastle.bcprov.jdk15on, 1.51.0.0.0 ] , [ oracle.org.bouncycastle.bcprov.jdk15on, 1.54.0.0.0 ] , [ oracle.org.bouncycastle.bcprov.jdk15on, 1.54.0.0.0 ] , [ oracle.org.bouncycastle.bcprov.ext.jdk15on, 1.54.0.0.0 ] , [ oracle.org.bouncycastle.bcprov.ext.jdk15on, 1.54.0.0.0 ] , [ oracle.org.bouncycastle.bcpkix.jdk15on, 1.5.0.0.0 ] , [ oracle.org.bouncycastle.bcpkix.jdk15on, 1.5.0.0.0 ] , [ oracle.org.bouncycastle.bcpkix.jdk15on, 1.54.0.0.0 ] , [ oracle.org.bouncycastle.bcpkix.jdk15on, 1.54.0.0.0 ] , [ oracle.org.bouncycastle.bcpkix.jdk15on, 1.55.0.0.0 ] , [ oracle.org.bouncycastle.bcpkix.jdk15on, 1.55.0.0.0 ] , [ oracle.org.bouncycastle.bcprov.jdk15on, 1.49.0.0.0 ] , [ oracle.org.bouncycastle.bcprov.jdk15on, 1.49.0.0.0 ] , [ oracle.org.bouncycastle.bcprov.jdk15on, 1.5.0.0.0 ] , [ oracle.org.bouncycastle.bcprov.jdk15on, 1.5.0.0.0 ] not present in the Oracle Home or a higher version is found. Patching component oracle.org.bouncycastle.bcprov.jdk15on, 1.60.0.0.0... Patching component oracle.org.bouncycastle.bcprov.jdk15on, 1.60.0.0.0... Patching component oracle.org.bouncycastle.bcprov.ext.jdk15on, 1.60.0.0.0... Patching component oracle.org.bouncycastle.bcprov.ext.jdk15on, 1.60.0.0.0... Patching component oracle.org.bouncycastle.bcpkix.jdk15on, 1.60.0.0.0... Patching component oracle.org.bouncycastle.bcpkix.jdk15on, 1.60.0.0.0... Patch 30761841 successfully applied. Log file location: /u01/oracle/cfgtoollogs/opatch/opatch2020-06-01_10-56-13AM_1.log OPatch succeeded. Oracle Interim Patch Installer version 13.9.4.2.17 Copyright (c) 2020, Oracle Corporation. All rights reserved. Oracle Home : /u01/oracle Central Inventory : /u01/oracle/oraInventory from : /u01/oracle/oraInst.loc OPatch version : 13.9.4.2.17 OUI version : 13.9.4.0.0 Log file location : /u01/oracle/cfgtoollogs/opatch/opatch2020-06-01_10-57-19AM_1.log OPatch detects the Middleware Home as \u0026quot;/u01/oracle\u0026quot; Invoking utility \u0026quot;cleanup\u0026quot; OPatch will clean up 'restore.sh,make.txt' files and 'scratch,backup' directories. You will be still able to rollback patches after this cleanup. Do you want to proceed? [y|n] Y (auto-answered by -silent) User Responded with: Y Backup area for restore has been cleaned up. For a complete list of files/directories deleted, Please refer log file. OPatch succeeded. Removing intermediate container a79addca4d2f ---\u0026gt; 2ef2a67a685b Successfully built 2ef2a67a685b Successfully tagged soasuite:12.2.1.4-30761841 [INFO ] Build successful. Build time=112s. Image tag=soasuite:12.2.1.4-30761841      Click here to see the example Dockerfile generated by the WebLogic Image Tool with the \u0026#39;--dryRun\u0026#39; option:   $ imagetool update --fromImage soasuite:12.2.1.4 --chown oracle:root --tag=soasuite:12.2.1.4-30761841 --patches=30761841_12.2.1.4.0 --opatchBugNumber=28186730_13.9.4.2.17 --dryRun [INFO ] Image Tool build ID: f9feea35-c52c-4974-b155-eb7f34d95892 [INFO ] Temporary directory used for docker build context: \u0026lt;work-directory\u0026gt;/wlstmp/wlsimgbuilder_temp1799120592903014749 [INFO ] Using patch 28186730_13.9.4.2.17 from cache: \u0026lt;downloaded-patches-location\u0026gt;/p28186730_1394216_Generic.zip [WARNING] skipping patch conflict check, no support credentials provided [WARNING] No credentials provided, skipping validation of patches [INFO ] Using patch 30761841_12.2.1.4.0 from cache: \u0026lt;downloaded-patches-location\u0026gt;/p30761841_122140_Generic.zip [INFO ] docker cmd = docker build --force-rm=true --no-cache --tag soasuite:12.2.1.4-30761841 --build-arg http_proxy=http://www.yourcompany.proxy.com:80 --build-arg https_proxy=http://www.yourcompany.proxy.com:80 --build-arg no_proxy=10.250.109.251,localhost,127.0.0.1,/var/run/docker.sock \u0026lt;work-directory\u0026gt;/wlstmp/wlsimgbuilder_temp1799120592903014749 ########## BEGIN DOCKERFILE ########## # # Copyright (c) 2019, 2020, Oracle and/or its affiliates. # # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. # # FROM soasuite:12.2.1.4 as FINAL_BUILD USER root ENV OPATCH_NO_FUSER=true LABEL com.oracle.weblogic.imagetool.buildid=\u0026quot;f9feea35-c52c-4974-b155-eb7f34d95892\u0026quot; USER oracle COPY --chown=oracle:oracle patches/* /tmp/imagetool/patches/ RUN /u01/oracle/OPatch/opatch napply -silent -oh /u01/oracle -phBaseDir /tmp/imagetool/patches \\ \u0026amp;\u0026amp; /u01/oracle/OPatch/opatch util cleanup -silent -oh /u01/oracle \\ \u0026amp;\u0026amp; rm -rf /tmp/imagetool ########## END DOCKERFILE ##########      Check the built image using the docker images command:\n$ docker images | grep soasuite soasuite 12.2.1.4-30761841 2ef2a67a685b About a minute ago 4.84GB $   Create an Oracle SOA Suite Docker image using Dockerfile For test and development purposes, you can create an Oracle SOA Suite image using the Dockerfile. Consult the README file for important prerequisite steps, such as building or pulling the Server JRE Docker image, Oracle FMW Infrastructure Docker image, and downloading the Oracle SOA Suite installer and bundle patch binaries.\nA prebuilt Oracle Fusion Middleware Infrastructure image, container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4, is available at container-registry.oracle.com. We recommend that you pull and rename this image to build the Oracle SOA Suite image.\n$ docker pull container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4 $ docker tag container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4 oracle/fmw-infrastructure:12.2.1.4.0 Follow these steps to build an Oracle Fusion Middleware Infrastructure image, and then the Oracle SOA Suite image as a layer on top of that:\n  Make a local clone of the sample repository:\n$ git clone https://github.com/oracle/docker-images   Build the oracle/fmw-infrastructure:12.2.1.4 image:\n$ cd docker-images/OracleFMWInfrastructure/dockerfiles $ sh buildDockerImage.sh -v 12.2.1.4 -s This will produce an image named oracle/fmw-infrastructure:12.2.1.4.\n  Tag the image as follows:\n$ docker tag oracle/fmw-infrastructure:12.2.1.4 oracle/fmw-infrastructure:12.2.1.4.0   Download the Oracle SOA Suite installer from the Oracle Technology Network or e-delivery.\n Note: Copy the installer binaries to the same location as the Dockerfile.\n   To build the Oracle SOA Suite image with patches, you must download and drop the patch zip files (for example, p29928100_122140_Generic.zip) into the patches/ folder under the version that is required. For example, for 12.2.1.4.0 the folder is 12.2.1.4/patches. Similarly, to build the image by including the OPatch patch, download and drop the OPatch patch zip file (for example, p28186730_1394217_Generic.zip) into the opatch_patch/ folder.\n  Create the Oracle SOA Suite image by running the provided script:\n$ cd docker-images/OracleSOASuite/dockerfiles $ ./buildDockerImage.sh -v 12.2.1.4 -s The image produced will be named oracle/soasuite:12.2.1.4. The samples and instructions assume the Oracle SOA Suite image is named soasuite:12.2.1.4. You must rename your image to match this name, or update the samples to refer to the image you created.\n$ docker tag oracle/soasuite:12.2.1.4 soasuite:12.2.1.4   "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/create-or-update-image/",
	"title": "Create or update an image",
	"tags": [],
	"description": "Create or update an Oracle WebCenter Sites Docker image used for deploying Oracle WebCenter Sites domains. An Oracle WebCenter Sites Docker image can be created using the WebLogic Image Tool or using the Dockerfile approach.",
	"content": "If you have access to the My Oracle Support (MOS), and there is a need to build a new image with a patch (bundle or interim), it is recommended to use the WebLogic Image Tool to build an Oracle WebCenter Sites image for production deployments.\n Create or update an Oracle WebCenter Sites Docker image using the WebLogic Image Tool  Set up the WebLogic Image Tool Create an image Update an image   Create an Oracle WebCenter Sites Docker image using Dockerfile  Create or update an Oracle WebCenter Sites Docker image using the WebLogic Image Tool Using the WebLogic Image Tool, you can create a new Oracle WebCenter Sites Docker image (can include patches as well) or update an existing image with one or more patches (bundle patch and interim patches).\n Recommendations:\n Use create for creating a new Oracle WebCenter Sites Docker image either:  without any patches or, containing the Oracle WebCenter Sites binaries, bundle patch and interim patches. This is the recommended approach if you have access to the Oracle WebCenter Sites patches because it optimizes the size of the image.   Use update for patching an existing Oracle WebCenter Sites Docker image with a single interim patch. Note that the patched image size may increase considerably due to additional image layers introduced by the patch application tool.   Set up the WebLogic Image Tool  Prerequisites Set up the WebLogic Image Tool Validate setup WebLogic Image Tool build directory WebLogic Image Tool cache Set up additional build scripts  Prerequisites Verify that your environment meets the following prerequisites:\n Docker client and daemon on the build machine, with minimum Docker version 19.03.1.ce. Bash version 4.0 or later, to enable the command complete feature. JAVA_HOME environment variable set to the appropriate JDK location.  Set up the WebLogic Image Tool To set up the WebLogic Image Tool:\n  Create a working directory and change to it. In these steps, this directory is imagetool-setup.\n$ mkdir imagetool-setup $ cd imagetool-setup   Download the latest version of the WebLogic Image Tool from the releases page.\n  Unzip the release ZIP file to the imagetool-setup directory.\n  Execute the following commands to set up the WebLogic Image Tool on a Linux environment:\n$ cd imagetool-setup/imagetool/bin $ source setup.sh   Validate setup To validate the setup of the WebLogic Image Tool:\n  Enter the following command to retrieve the version of the WebLogic Image Tool:\n$ imagetool --version   Enter imagetool then press the Tab key to display the available imagetool commands:\n$ imagetool \u0026lt;TAB\u0026gt; cache create help rebase update   WebLogic Image Tool build directory The WebLogic Image Tool creates a temporary Docker context directory, prefixed by wlsimgbuilder_temp, every time the tool runs. Under normal circumstances, this context directory will be deleted. However, if the process is aborted or the tool is unable to remove the directory, it is safe for you to delete it manually. By default, the WebLogic Image Tool creates the Docker context directory under the user\u0026rsquo;s home directory. If you prefer to use a different directory for the temporary context, set the environment variable WLSIMG_BLDDIR:\n$ export WLSIMG_BLDDIR=\u0026#34;/path/to/buid/dir\u0026#34; WebLogic Image Tool cache The WebLogic Image Tool maintains a local file cache store. This store is used to look up where the Java, WebLogic Server installers, and WebLogic Server patches reside in the local file system. By default, the cache store is located in the user\u0026rsquo;s $HOME/cache directory. Under this directory, the lookup information is stored in the .metadata file. All automatically downloaded patches also reside in this directory. You can change the default cache store location by setting the environment variable WLSIMG_CACHEDIR:\n$ export WLSIMG_CACHEDIR=\u0026#34;/path/to/cachedir\u0026#34; Set up additional build scripts Creating an Oracle WebCenter Sites Docker image using the WebLogic Image Tool requires additional container scripts for Oracle WebCenter Sites domains.\n  Clone the docker-images repository to set up those scripts. In these steps, this directory is DOCKER_REPO:\n$ cd imagetool-setup $ git clone https://github.com/oracle/docker-images.git   Copy the additional WebLogic Image Tool build files from the operator source repository to the imagetool-setup location:\n$ mkdir -p imagetool-setup/docker-images/OracleWebCenterSites/imagetool/12.2.1.4 $ cd imagetool-setup/docker-images/OracleWebCenterSites/imagetool/12.2.1.4 $ cp -rf ${WORKDIR}/fmw-kubernetes/OracleWebCenterSites/kubernetes/imagetool-scripts/* .   Create an image After setting up the WebLogic Image Tool and required build scripts, follow these steps to use the WebLogic Image Tool to create a new Oracle WebCenter Sites Docker image.\nDownload the Oracle WebCenter Sites installation binaries and patches You must download the required Oracle WebCenter Sites installation binaries and patches as listed below from the Oracle Software Delivery Cloud and save them in a directory of your choice. In these steps, this directory is download location.\n  Click here to see the sample list of installation binaries and patches:     JDK:\n jdk-8u291-linux-x64.tar.gz    Fusion MiddleWare Infrastructure installer:\n fmw_12.2.1.4.0_infrastructure.jar    Fusion MiddleWare Infrastructure patches:\n p28186730_1394212_Generic.zip (Opatch) p35226999_122140_Generic.zip (WLS) p35122398_122140_Generic.zip (COH) p34542329_122140_Generic.zip(EM)    WCS installers:\n fmw_12.2.1.4.0_wcsites.jar    WCS patches:\n p35188131_122140_Generic.zip (WCS)       Note: This is a sample list of patches. You must get the appropriate list of patches for your Oracle WebCenter Sites image.\n Update required build files The following files available in the code repository location ${WORKDIR}/fmw-kubernetes/OracleWebCenterSites/kubernetes/imagetool-scripts are used for creating the image.\n additionalBuildCmds.txt buildArgs    In the buildArgs file, update all the occurrences of %DOCKER_REPO% with the docker-images repository location, which is the complete path of imagetool-setup/docker-images.\nFor example, update:\n%DOCKER_REPO%/OracleWebCenterSites/imagetool/12.2.1.4/\nto:\n\u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleWebCenterSites/imagetool/12.2.1.4/\n  Similarly, update the placeholders %JDK_VERSION% and %BUILDTAG% with appropriate values.\n  Create the image   Add a JDK package to the WebLogic Image Tool cache:\n$ imagetool cache addInstaller --type jdk --version 8u291 --path \u0026lt;download location\u0026gt;/jdk-8u291-linux-x64.tar.gz   Add the downloaded installation binaries to the WebLogic Image Tool cache:\n$ imagetool cache addInstaller --type fmw --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_infrastructure.jar $ imagetool cache addInstaller --type wcs --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_wcsites.jar   Add the downloaded patches to the WebLogic Image Tool cache:\n  Click here to see the commands to add patches in to the cache:   ``` bash $ imagetool cache addEntry --key 28186730_13.9.4.2.12 --value \u0026lt;download location\u0026gt;/p28186730_1394212_Generic.zip $ imagetool cache addEntry --key 35226999_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p35226999_122140_Generic.zip $ imagetool cache addEntry --key 35122398_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p35122398_122140_Generic.zip $ imagetool cache addEntry --key 35188131_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p35188131_122140_Generic.zip $ imagetool cache addEntry --key 34542329_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p34542329_122140_Generic.zip ```      Update the patches list to buildArgs.\nTo the create command in the buildArgs file, append the Oracle WebCenter Sites patches list using the --patches flag and Opatch patch using the --opatchBugNumber flag. Sample options for the list of patches above are:\n--patches 35226999_12.2.1.4.0,35122398_12.2.1.4.0,35188131_12.2.1.4.0,34542329_12.2.1.4.0 --opatchBugNumber=28186730_13.9.4.2.12 Example buildArgs file after appending product\u0026rsquo;s list of patches and Opatch patch:\ncreate --jdkVersion=8u291 --type WCS --version=12.2.1.4.0 --tag=oracle/wcsites:12.2.1.4 --installerResponseFile %path-to-downloaded-docker-repo%/OracleWebCenterSites/dockerfiles/12.2.1.4.0/wcs.file,%path-to-downloaded-docker-repo%/OracleWebCenterSites/dockerfiles/12.2.1.4.0/install.file --additionalBuildCommands %path-to-downloaded-docker-repo%/OracleWebCenterSites/imagetool/12.2.1.4.0/addtionalBuildCmds.txt --additionalBuildFiles %path-to-downloaded-docker-repo%/OracleWebCenterSites/dockerfiles/12.2.1.4.0/sites-container-scripts,%path-to-downloaded-docker-repo%/OracleWebCenterSites/dockerfiles/12.2.1.4.0/wcs-wls-docker-install --patches 35226999_12.2.1.4.0,35122398_12.2.1.4.0,35188131_12.2.1.4.0,34542329_12.2.1.4.0 --opatchBugNumber=28186730_13.9.4.2.12 Refer to this page for the complete list of options available with the WebLogic Image Tool create command.\n  Create a wcs-wls-docker-install installer jar\n  cd %docker_repo%/OracleWebCenterSites/dockerfiles/12.2.1.4.0/wcs-wls-docker-install docker run --rm -u root -v ${PWD}:/wcs-wls-docker-install groovy:2.4.8-jdk8 /wcs-wls-docker-install/packagejar.sh   Enter the following command to create the Oracle WebCenter Sites image:\n$ imagetool @\u0026lt;absolute path to `buildargs` file\u0026gt;\u0026#34;    Click here to see the sample Dockerfile generated with the imagetool command.   ```bash ########## BEGIN DOCKERFILE ########## # # Copyright (c) 2021, Oracle and/or its affiliates. # # Licensed under the Universal Permissive License v 1.0 as shown at # https://oss.oracle.com/licenses/upl # # FROM oraclelinux:7-slim as OS_UPDATE LABEL com.oracle.weblogic.imagetool.buildid=\u0026quot;3b37c045-11c6-4eb8-b69c-f42256c1e082\u0026quot; USER root RUN yum -y --downloaddir= install gzip tar unzip libaio \\ \u0026amp;\u0026amp; yum -y --downloaddir= clean all \\ \u0026amp;\u0026amp; rm -rf /var/cache/yum/* \\ \u0026amp;\u0026amp; rm -rf ## Create user and group RUN if [ -z \u0026quot;$(getent group oracle)\u0026quot; ]; then hash groupadd \u0026amp;\u0026gt; /dev/null \u0026amp;\u0026amp; groupadd oracle || exit -1 ; fi \\ \u0026amp;\u0026amp; if [ -z \u0026quot;$(getent passwd oracle)\u0026quot; ]; then hash useradd \u0026amp;\u0026gt; /dev/null \u0026amp;\u0026amp; useradd -g oracle oracle || exit -1; fi \\ \u0026amp;\u0026amp; mkdir /u01 \\ \u0026amp;\u0026amp; chown oracle:root /u01 # Install Java FROM OS_UPDATE as JDK_BUILD LABEL com.oracle.weblogic.imagetool.buildid=\u0026quot;3b37c045-11c6-4eb8-b69c-f42256c1e082\u0026quot; ENV JAVA_HOME=/u01/jdk COPY --chown=oracle:root jdk-8u291-linux-x64.tar.gz /tmp/imagetool/ USER oracle RUN tar xzf /tmp/imagetool/jdk-8u291-linux-x64.tar.gz -C /u01 \\ \u0026amp;\u0026amp; mv /u01/jdk* /u01/jdk \\ \u0026amp;\u0026amp; rm -rf /tmp/imagetool # Install Middleware FROM OS_UPDATE as WLS_BUILD LABEL com.oracle.weblogic.imagetool.buildid=\u0026quot;3b37c045-11c6-4eb8-b69c-f42256c1e082\u0026quot; ENV JAVA_HOME=/u01/jdk \\ ORACLE_HOME=/u01/oracle \\ OPATCH_NO_FUSER=true RUN mkdir -p /u01/oracle \\ \u0026amp;\u0026amp; mkdir -p /u01/oracle/oraInventory \\ \u0026amp;\u0026amp; chown oracle:root /u01/oracle/oraInventory \\ \u0026amp;\u0026amp; chown oracle:root /u01/oracle COPY --from=JDK_BUILD --chown=oracle:root /u01/jdk /u01/jdk/ COPY --chown=oracle:root fmw_12.2.1.4.0_infrastructure.jar install.file /tmp/imagetool/ COPY --chown=oracle:root fmw_12.2.1.4.0_wcsites.jar wcs.file /tmp/imagetool/ COPY --chown=oracle:root oraInst.loc /u01/oracle/ COPY --chown=oracle:root p28186730_139428_Generic.zip /tmp/imagetool/opatch/ COPY --chown=oracle:root patches/* /tmp/imagetool/patches/ USER oracle RUN \\ /u01/jdk/bin/java -Xmx1024m -jar /tmp/imagetool/fmw_12.2.1.4.0_infrastructure.jar -silent ORACLE_HOME=/u01/oracle \\ -responseFile /tmp/imagetool/install.file -invPtrLoc /u01/oracle/oraInst.loc -ignoreSysPrereqs -force -novalidation RUN \\ /u01/jdk/bin/java -Xmx1024m -jar /tmp/imagetool/fmw_12.2.1.4.0_wcsites.jar -silent ORACLE_HOME=/u01/oracle \\ -responseFile /tmp/imagetool/wcs.file -invPtrLoc /u01/oracle/oraInst.loc -ignoreSysPrereqs -force -novalidation RUN cd /tmp/imagetool/opatch \\ \u0026amp;\u0026amp; /u01/jdk/bin/jar -xf /tmp/imagetool/opatch/p28186730_139428_Generic.zip \\ \u0026amp;\u0026amp; /u01/jdk/bin/java -jar /tmp/imagetool/opatch/6880880/opatch_generic.jar -silent -ignoreSysPrereqs -force -novalidation oracle_home=/u01/oracle RUN /u01/oracle/OPatch/opatch napply -silent -oh /u01/oracle -phBaseDir /tmp/imagetool/patches \\ \u0026amp;\u0026amp; /u01/oracle/OPatch/opatch util cleanup -silent -oh /u01/oracle FROM OS_UPDATE as FINAL_BUILD ARG ADMIN_NAME ARG ADMIN_HOST ARG ADMIN_PORT ARG MANAGED_SERVER_PORT ENV ORACLE_HOME=/u01/oracle \\ JAVA_HOME=/u01/jdk \\ LC_ALL=${DEFAULT_LOCALE:-en_US.UTF-8} \\ PATH=${PATH}:/u01/jdk/bin:/u01/oracle/oracle_common/common/bin:/u01/oracle/wlserver/common/bin:/u01/oracle LABEL com.oracle.weblogic.imagetool.buildid=\u0026quot;3b37c045-11c6-4eb8-b69c-f42256c1e082\u0026quot; COPY --from=JDK_BUILD --chown=oracle:root /u01/jdk /u01/jdk/ COPY --from=WLS_BUILD --chown=oracle:root /u01/oracle /u01/oracle/ USER oracle WORKDIR /u01/oracle #ENTRYPOINT /bin/bash USER root COPY --chown=oracle:root files/sites-container-scripts/overrides/oui/ /u01/oracle/wcsites/common/templates/wls/ USER oracle RUN cd /u01/oracle/wcsites/common/templates/wls \u0026amp;\u0026amp; \\ $JAVA_HOME/bin/jar uvf oracle.wcsites.base.template.jar startup-plan.xml file-definition.xml \u0026amp;\u0026amp; \\ rm /u01/oracle/wcsites/common/templates/wls/startup-plan.xml \u0026amp;\u0026amp; \\ rm /u01/oracle/wcsites/common/templates/wls/file-definition.xml # # Install the required packages # ----------------------------- USER root ENV SITES_CONTAINER_SCRIPTS=/u01/oracle/sites-container-scripts \\ SITES_INSTALLER_PKG=wcs-wls-docker-install \\ DOMAIN_ROOT=\u0026quot;${DOMAIN_ROOT:-/u01/oracle/user_projects/domains}\u0026quot; \\ ADMIN_PORT=7001 \\ WCSITES_PORT=7002 \\ ADMIN_SSL_PORT=9001 \\ WCSITES_SSL_PORT=9002 \\ PATH=$PATH:/u01/oracle/sites-container-scripts RUN yum install -y hostname \u0026amp;\u0026amp; \\ rm -rf /var/cache/yum RUN mkdir -p ${SITES_CONTAINER_SCRIPTS} \u0026amp;\u0026amp; \\ mkdir -p /u01/wcs-wls-docker-install COPY --chown=oracle:root files/sites-container-scripts/ ${SITES_CONTAINER_SCRIPTS}/ COPY --chown=oracle:root files/wcs-wls-docker-install/ /u01/wcs-wls-docker-install/ RUN chown oracle:root -R /u01/oracle/sites-container-scripts \u0026amp;\u0026amp; \\ chown oracle:root -R /u01/wcs-wls-docker-install \u0026amp;\u0026amp; \\ chmod a+xr /u01/oracle/sites-container-scripts/* \u0026amp;\u0026amp; \\ chmod a+xr /u01/wcs-wls-docker-install/*.sh # Expose all Ports # ------------------------------------------------------------- EXPOSE $ADMIN_PORT $ADMIN_SSL_PORT $WCSITES_PORT $WCSITES_SSL_PORT USER oracle WORKDIR ${ORACLE_HOME} # Define default command to start. # ------------------------------------------------------------- CMD [\u0026quot;/u01/oracle/sites-container-scripts/createOrStartSitesDomain.sh\u0026quot;] ########## END DOCKERFILE ########## ```      Check the created image using the Docker images command:\n$ Docker images | grep wcsites   Update an image After setting up the WebLogic Image Tool and required build scripts, use the WebLogic Image Tool to update an existing Oracle WebCenter Sites Docker image:\n  Enter the following command for each patch to add the required patch(es) to the WebLogic Image Tool cache:\n$ cd \u0026lt;imagetool-setup\u0026gt; $ imagetool cache addEntry --key 35188131_12.2.1.4.0 --value \u0026lt; %path-to-downloaded-pathes%/patches/p35188131_122140_Generic.zip [INFO] Added entry 35188131_12.2.1.4.0=\u0026lt; %path-to-downloaded-pathes%/patches/p35188131_122140_Generic.zip   Provide the following arguments to the WebLogic Image Tool update command:\n –-fromImage - Identify the image that needs to be updated. In the example below, the image to be updated is oracle/wcsites:12.2.1.4. –-patches - Multiple patches can be specified as a comma-separated list. --tag - Specify the new tag to be applied for the image being built.  Refer here for the complete list of options available with the WebLogic Image Tool update command.\n Note: The WebLogic Image Tool cache should have the latest OPatch zip. The WebLogic Image Tool will update the OPatch if it is not already updated in the image.\n Examples   Click here to see the example `update` command:   $ imagetool update --fromImage oracle/wcsites:12.2.1.4 --chown oracle:root --tag=oracle/wcsites:12.2.1.4-35188131 --patches=35188131_12.2.1.4.0 --opatchBugNumber=28186730_13.9.4.2.12 [INFO ] Image Tool build ID: 7c268a9a-723f-424e-a06e-cb615c783e6d [INFO ] Temporary directory used for docker build context: %path-to-temp-directory%/tmpBuild/wlsimgbuilder_temp8555048225669509 [INFO ] Using patch 28186730_13.9.4.2.8 from cache: %path-to-downloaded-pathes%/patches /p28186730_139428_Generic.zip [INFO ] OPatch will not be updated, fromImage has version 13.9.4.2.4, available version is 13.9.4.2.4 [WARNING] skipping patch conflict check, no support credentials provided [WARNING] No credentials provided, skipping validation of patches [INFO ] Using patch 31548912_12.2.1.4.0 from cache: %path-to-downloaded-pathes%/patches /p31548912_122140_Generic.zip [INFO ] docker cmd = docker build --no-cache --force-rm --tag oracle/wcsites:12.2.1.4-21.1.1 --build-arg http_proxy=http://www-proxy-your-company.com:80 --build-arg https_proxy=http://www-proxy-your-company.com:80 --build-arg no_proxy=localhost,127.0.0.0/8,/var/run/docker.sock %path-to-temp-directory%/tmpBuild/wlsimgbuilder_temp8555048225669509 Sending build context to Docker daemon 212.7MB Step 1/7 : FROM oracle/wcsites:12.2.1.4-21.1.1 as FINAL_BUILD ---\u0026gt; 480f1a31c02b Step 2/7 : USER root ---\u0026gt; Running in 9d5a81ad5bde Removing intermediate container 9d5a81ad5bde ---\u0026gt; 71b50b0b34dc Step 3/7 : ENV OPATCH_NO_FUSER=true ---\u0026gt; Running in c361884e8a71 Removing intermediate container c361884e8a71 ---\u0026gt; 2951de256951 Step 4/7 : LABEL com.oracle.weblogic.imagetool.buildid=\u0026quot;7c268a9a-723f-424e-a06e-cb615c783e6d\u0026quot; ---\u0026gt; Running in e2f485ac9039 Removing intermediate container e2f485ac9039 ---\u0026gt; 970f6552ef9a Step 5/7 : USER oracle ---\u0026gt; Running in e3c85228af4b Removing intermediate container e3c85228af4b ---\u0026gt; 4401fdb4ebbe Step 6/7 : COPY --chown=oracle:root patches/* /tmp/imagetool/patches/ ---\u0026gt; 978a48e1cc95 Step 7/7 : RUN /u01/oracle/OPatch/opatch napply -silent -oh /u01/oracle -phBaseDir /tmp/imagetool/patches \u0026amp;\u0026amp; /u01/oracle/OPatch/opatch util cleanup -silent -oh /u01/oracle \u0026amp;\u0026amp; rm -rf /tmp/imagetool ---\u0026gt; Running in 5039320b2f10 Oracle Interim Patch Installer version 13.9.4.2.4 Copyright (c) 2020, Oracle Corporation. All rights reserved. Oracle Home : /u01/oracle Central Inventory : /u01/oracle/oraInventory from : /u01/oracle/oraInst.loc OPatch version : 13.9.4.2.4 OUI version : 13.9.4.0.0 Log file location : /u01/oracle/cfgtoollogs/opatch/opatch2020-08-04_05-15-38AM_1.log OPatch detects the Middleware Home as \u0026quot;/u01/oracle\u0026quot; Verifying environment and performing prerequisite checks... OPatch continues with these patches: 31548912 Do you want to proceed? [y|n] Y (auto-answered by -silent) User Responded with: Y All checks passed. Please shutdown Oracle instances running out of this ORACLE_HOME on the local system. (Oracle Home = '/u01/oracle') Is the local system ready for patching? [y|n] Y (auto-answered by -silent) User Responded with: Y Backing up files... Applying interim patch '31548912' to OH '/u01/oracle' ApplySession: Optional component(s) [ oracle.wcsites.wccintegration, 12.2.1.4.0 ] , [ oracle.wcsites.wccintegration, 12.2.1.4.0 ] not present in the Oracle Home or a higher version is found. Patching component oracle.wcsites, 12.2.1.4.0... Patching component oracle.wcsites, 12.2.1.4.0... Patching component oracle.wcsites.visitorservices, 12.2.1.4.0... Patching component oracle.wcsites.visitorservices, 12.2.1.4.0... Patching component oracle.wcsites.examples, 12.2.1.4.0... Patching component oracle.wcsites.examples, 12.2.1.4.0... Patching component oracle.wcsites.developer.tools, 12.2.1.4.0... Patching component oracle.wcsites.developer.tools, 12.2.1.4.0... Patching component oracle.wcsites.satelliteserver, 12.2.1.4.0... Patching component oracle.wcsites.satelliteserver, 12.2.1.4.0... Patching component oracle.wcsites.sitecapture, 12.2.1.4.0... Patching component oracle.wcsites.sitecapture, 12.2.1.4.0... Patch 31548912 successfully applied. Log file location: /u01/oracle/cfgtoollogs/opatch/opatch2020-08-04_05-15-38AM_1.log OPatch succeeded. Oracle Interim Patch Installer version 13.9.4.2.4 Copyright (c) 2020, Oracle Corporation. All rights reserved. Oracle Home : /u01/oracle Central Inventory : /u01/oracle/oraInventory from : /u01/oracle/oraInst.loc OPatch version : 13.9.4.2.4 OUI version : 13.9.4.0.0 Log file location : /u01/oracle/cfgtoollogs/opatch/opatch2020-08-04_05-16-11AM_1.log OPatch detects the Middleware Home as \u0026quot;/u01/oracle\u0026quot; Invoking utility \u0026quot;cleanup\u0026quot; OPatch will clean up 'restore.sh,make.txt' files and 'scratch,backup' directories. You will be still able to rollback patches after this cleanup. Do you want to proceed? [y|n] Y (auto-answered by -silent) User Responded with: Y Backup area for restore has been cleaned up. For a complete list of files/directories deleted, Please refer log file. OPatch succeeded. Removing intermediate container 5039320b2f10 ---\u0026gt; 1be958e1e859 Successfully built 1be958e1e859 Successfully tagged oracle/wcsites:12.2.1.4-21.1.1-29710661 [INFO ] Build successful. Build time=73s. Image tag=oracle/wcsites:12.2.1.4-21.1.1-29710661      Click here to see the example Dockerfile generated by the WebLogic Image Tool with the `–-dryRun` option:   $ imagetool update --fromImage oracle/wcsites:12.2.1.4 --chown oracle:root --tag=oracle/wcsites:12.2.1.4-35188131 --patches=35188131_12.2.1.4.0 --opatchBugNumber=28186730_13.9.4.2.12 --dryRun [INFO ] Image Tool build ID: a2fca032-7807-4bfb-b5a4-0ed90a710a56 [INFO ] Temporary directory used for docker build context: %path-to-temp-directory%/tmpBuild/wlsimgbuilder_temp4743247141639108603 [INFO ] Using patch 28186730_13.9.4.2.8 from cache: %path-to-downloaded-pathes%/patches /p28186730_139428_Generic.zip [INFO ] OPatch will not be updated, fromImage has version 13.9.4.2.8, available version is 13.9.4.2.8 [WARNING] skipping patch conflict check, no support credentials provided [WARNING] No credentials provided, skipping validation of patches [INFO ] Using patch 29710661_12.2.1.4.0 from cache: %path-to-downloaded-pathes%/patches /p29710661_122140_Generic.zip [INFO ] docker cmd = docker build --no-cache --force-rm --tag oracle/wcsites:12.2.1.4 --build-arg http_proxy=http://www-proxy-your-company.com:80 --build-arg https_proxy=http://www-proxy-your-company.com:80 --build-arg no_proxy=localhost,127.0.0.0/8,/var/run/docker.sock %path-to-temp-directory%/tmpBuild/wlsimgbuilder_temp4743247141639108603 ########## BEGIN DOCKERFILE ########## # # Copyright (c) 2019, 2020, Oracle and/or its affiliates. # # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. # # FROM oracle/wcsites:12.2.1.4 as FINAL_BUILD USER root ENV OPATCH_NO_FUSER=true LABEL com.oracle.weblogic.imagetool.buildid=\u0026#34;a2fca032-7807-4bfb-b5a4-0ed90a710a56\u0026#34; USER oracle COPY --chown=oracle:root patches/* /tmp/imagetool/patches/ RUN /u01/oracle/OPatch/opatch napply -silent -oh /u01/oracle -phBaseDir /tmp/imagetool/patches \\  \u0026amp;\u0026amp; /u01/oracle/OPatch/opatch util cleanup -silent -oh /u01/oracle \\  \u0026amp;\u0026amp; rm -rf /tmp/imagetool ########## END DOCKERFILE ########## [INFO ] Dry run complete. No image created.      Check the built image using the Docker images command:\n$ Docker images | grep wcsites oracle/wcsites 12.2.1.4.0-35188131 2ef2a67a685b About a minute ago 2.84GB   Create an Oracle WebCenter Sites Docker image using Dockerfile For test and development purposes, you can create an Oracle WebCenter Sites image using the Dockerfile. Consult the README file for important prerequisite steps, such as building or pulling the Server JRE Docker image, Oracle FMW Infrastructure Docker image, and downloading the Oracle WebCenter Sites installer and bundle patch binaries.\nA prebuilt Oracle Fusion Middleware Infrastructure image, container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4, is available at container-registry.oracle.com. We recommend that you pull and rename this image to build the Oracle WebCenter Sites image.\n$ docker pull \u0026lt;path-to-container-registry\u0026gt;/fmw-infrastructure:12.2.1.4 $ docker tag \u0026lt;path-to-container-registry\u0026gt;/fmw-infrastructure:12.2.1.4 oracle/fmw-infrastructure:12.2.1.4 Follow these steps to build an Oracle Fusion Middleware Infrastructure image, and then the Oracle WebCenter Sites image as a layer on top of that:\n  Make a local clone of the sample repository:\n$ git clone https://github.com/oracle/docker-images   Build the oracle/fmw-infrastructure:12.2.1.4 image:\n$ cd docker-images/OracleFMWInfrastructure/dockerfiles $ sh buildDockerImage.sh -v 12.2.1.4 -s This will produce an image named oracle/fmw-infrastructure:12.2.1.4.\n  Download the Oracle WebCenter Sites installer from the Oracle Technology Network or e-delivery.\n Note: Copy the installer binaries to the same location as the Dockerfile.\n   To build the Oracle WebCenter Sites image with patches, you must download and drop the patch zip files (for example, p35188131_122140_Generic.zip) into the patches/ folder under the version that is required. For example, for 12.2.1.4.0 the folder is 12.2.1.4.0/patches.\n  Create the Oracle WebCenter Sites image by running the provided script:\n$ cd docker-images/OracleWebCenterSites/dockerfiles $ ./buildDockerImage.sh -v 12.2.1.4.0 -s The image produced will be named oracle/wcsites:12.2.1.4.0. The samples and instructions assume the Oracle WebCenter Sites image is named wcsites:12.2.1.4. You must rename your image to match this name, or update the samples to refer to the image you created.\n  "
},
{
	"uri": "/fmw-kubernetes/soa-domains/adminguide/enablingt3/",
	"title": "Expose the T3/T3S protocol",
	"tags": [],
	"description": "Create a T3/T3S channel and the corresponding Kubernetes service to expose the T3/T3S protocol for the Administration Server and Managed Servers in an Oracle SOA Suite domain.",
	"content": " Oracle strongly recommends that you do not expose non-HTTPS traffic (T3/T3s/LDAP/IIOP/IIOPs) outside of the external firewall. You can control this access using a combination of network channels and firewalls.\n You can create T3/T3S channels and the corresponding Kubernetes service to expose the T3/T3S protocol for the Administration Server and Managed Servers in an Oracle SOA Suite domain.\nThe WebLogic Kubernetes Operator provides an option to expose a T3 channel for the Administration Server using the exposeAdminT3Channel setting during domain creation, then the matching T3 service can be used to connect. By default, when exposeAdminT3Channel is set, the WebLogic Kubernetes Operator environment exposes the NodePort for the T3 channel of the NetworkAccessPoint at 30012 (use t3ChannelPort to configure the port to a different value).\nIf you miss enabling exposeAdminT3Channel during domain creation, follow these steps to create a T3 channel for Administration Server manually.\nExpose a T3/T3S Channel for the Administration Server To create a custom T3/T3S channel for the Administration Server that has a listen port listen_port and a paired public port public_port:\n  Create t3_admin_config.py with the following content:\nadmin_pod_name = sys.argv[1] admin_port = sys.argv[2] user_name = sys.argv[3] password = sys.argv[4] listen_port = sys.argv[5] public_port = sys.argv[6] public_address = sys.argv[7] AdminServerName = sys.argv[8] channelType = sys.argv[9] print(\u0026#39;custom admin_pod_name : [%s]\u0026#39; % admin_pod_name); print(\u0026#39;custom admin_port : [%s]\u0026#39; % admin_port); print(\u0026#39;custom user_name : [%s]\u0026#39; % user_name); print(\u0026#39;custom password : ********\u0026#39;); print(\u0026#39;public address : [%s]\u0026#39; % public_address); print(\u0026#39;channel listen port : [%s]\u0026#39; % listen_port); print(\u0026#39;channel public listen port : [%s]\u0026#39; % public_port); connect(user_name, password, \u0026#39;t3://\u0026#39; + admin_pod_name + \u0026#39;:\u0026#39; + admin_port) edit() startEdit() cd(\u0026#39;/\u0026#39;) cd(\u0026#39;Servers/%s/\u0026#39; % AdminServerName ) if channelType == \u0026#39;t3\u0026#39;: create(\u0026#39;T3Channel_AS\u0026#39;,\u0026#39;NetworkAccessPoint\u0026#39;) cd(\u0026#39;NetworkAccessPoints/T3Channel_AS\u0026#39;) set(\u0026#39;Protocol\u0026#39;,\u0026#39;t3\u0026#39;) set(\u0026#39;ListenPort\u0026#39;,int(listen_port)) set(\u0026#39;PublicPort\u0026#39;,int(public_port)) set(\u0026#39;PublicAddress\u0026#39;, public_address) print(\u0026#39;Channel T3Channel_AS added\u0026#39;) elif channelType == \u0026#39;t3s\u0026#39;:\tcreate(\u0026#39;T3SChannel_AS\u0026#39;,\u0026#39;NetworkAccessPoint\u0026#39;) cd(\u0026#39;NetworkAccessPoints/T3SChannel_AS\u0026#39;) set(\u0026#39;Protocol\u0026#39;,\u0026#39;t3s\u0026#39;) set(\u0026#39;ListenPort\u0026#39;,int(listen_port)) set(\u0026#39;PublicPort\u0026#39;,int(public_port)) set(\u0026#39;PublicAddress\u0026#39;, public_address) set(\u0026#39;HttpEnabledForThisProtocol\u0026#39;, true) set(\u0026#39;OutboundEnabled\u0026#39;, false) set(\u0026#39;Enabled\u0026#39;, true) set(\u0026#39;TwoWaySSLEnabled\u0026#39;, true) set(\u0026#39;ClientCertificateEnforced\u0026#39;, false) else: print(\u0026#39;channelType [%s] not supported\u0026#39;,channelType) activate() disconnect()   Copy t3_admin_config.py into the domain home (for example, /u01/oracle/user_projects/domains/soainfra) of the Administration Server pod (for example, soainfra-adminserver in soans namespace).\n $ kubectl cp t3_admin_config.py soans/soainfra-adminserver:/u01/oracle/user_projects/domains/soainfra    Run wlst.sh t3_admin_config.py by using exec into the Administration Server pod with the following parameters:\n admin_pod_name: soainfra-adminserver # Administration Server pod admin_port: 7001 user_name: weblogic password: Welcome1 # weblogic password listen_port: 30014 # New port for T3 Administration Server public_port: 30014 # Kubernetes NodePort which will be used to expose T3 port externally public_address:  AdminServerName: AdminServer # Give administration Server name channelType: t3 # t3 or t3s protocol channel  $ kubectl exec -it \u0026lt;Administration Server pod\u0026gt; -n \u0026lt;namespace\u0026gt; -- /u01/oracle/oracle_common/common/bin/wlst.sh \u0026lt;domain_home\u0026gt;/t3_admin_config.py \u0026lt;Administration Server pod\u0026gt; \u0026lt;Administration Server port\u0026gt; weblogic \u0026lt;password for weblogic\u0026gt; \u0026lt;t3 port on Administration Server\u0026gt; \u0026lt;t3 nodeport\u0026gt; \u0026lt;master_ip\u0026gt; \u0026lt;AdminServerName\u0026gt; \u0026lt;channelType t3 or t3s\u0026gt; For example:\n$ kubectl exec -it soainfra-adminserver -n soans -- /u01/oracle/oracle_common/common/bin/wlst.sh /u01/oracle/user_projects/domains/soainfra/t3_admin_config.py soainfra-adminserver 7001 weblogic Welcome1 30014 30014 xxx.xxx.xxx.xxx AdminServer t3   Create t3_admin_svc.yaml with the following contents to expose T3 at NodePort 30014 for domainName and domainUID as soainfra and domain deployed in soans namespace:\n Note: For T3S, replace NodePort 30014 with the appropriate value used with public_port while creating the T3S channel using wlst.sh in the previous step.\n apiVersion: v1 kind: Service metadata: name: soainfra-adminserver-t3-external namespace: soans labels: weblogic.serverName: AdminServer weblogic.domainName: soainfra weblogic.domainUID: soainfra spec: type: NodePort selector: weblogic.domainName: soainfra weblogic.domainUID: soainfra weblogic.serverName: AdminServer ports: - name: t3adminport protocol: TCP port: 30014 targetPort: 30014 nodePort: 30014   Create the NodePort service for port 30014:\n$ kubectl create -f t3_admin_svc.yaml   Verify that you can access T3 for the Administration Server with the following URL:\nt3://\u0026lt;master_ip\u0026gt;:30014   Similarly, you can access T3S as follows:\na. First get the certificates from the Administration Server to be used for secured (T3S) connection from the client. You can export the certificate from the Administration Server with WLST commands. For example, to export the default demoidentity:\n Note: If you are using the custom SSL certificate, replace the steps accordingly.\n $ kubectl exec -it soainfra-adminserver -n soans -- bash $ /u01/oracle/oracle_common/common/bin/wlst.sh $ connect('weblogic','Welcome1','t3://soainfra-adminserver:7001') $ svc = getOpssService(name='KeyStoreService') $ svc.exportKeyStoreCertificate(appStripe='system', name='demoidentity', password='DemoIdentityKeyStorePassPhrase', alias='DemoIdentity', type='Certificate', filepath='/tmp/cert.txt/') These steps download the certificate at /tmp/cert.txt.\nb. Use the same certificates from the client side and connect using t3s. For example:\n$ export JAVA_HOME=/u01/jdk $ keytool -import -v -trustcacerts -alias soadomain -file cert.txt -keystore $JAVA_HOME/jre/lib/security/cacerts -keypass changeit -storepass changeit $ export WLST_PROPERTIES=\u0026quot;-Dweblogic.security.SSL.ignoreHostnameVerification=true\u0026quot; $ cd $ORACLE_HOME/oracle_common/common/bin $ ./wlst.sh Initializing WebLogic Scripting Tool (WLST) ... Welcome to WebLogic Server Administration Scripting Shell Type help() for help on available commands $ wls:/offline\u0026gt; connect('weblogic','Welcome1','t3s://\u0026lt;Master IP address\u0026gt;:30014')   Expose T3/T3S for Managed Servers To create a custom T3/T3S channel for all Managed Servers, with a listen port listen_port and a paired public port public_port:\n  Create t3_ms_config.py with the following content:\nadmin_pod_name = sys.argv[1] admin_port = sys.argv[2] user_name = sys.argv[3] password = sys.argv[4] listen_port = sys.argv[5] public_port = sys.argv[6] public_address = sys.argv[7] managedNameBase = sys.argv[8] ms_count = sys.argv[9] channelType = sys.argv[10] print(\u0026#39;custom host : [%s]\u0026#39; % admin_pod_name); print(\u0026#39;custom port : [%s]\u0026#39; % admin_port); print(\u0026#39;custom user_name : [%s]\u0026#39; % user_name); print(\u0026#39;custom password : ********\u0026#39;); print(\u0026#39;public address : [%s]\u0026#39; % public_address); print(\u0026#39;channel listen port : [%s]\u0026#39; % listen_port); print(\u0026#39;channel public listen port : [%s]\u0026#39; % public_port); connect(user_name, password, \u0026#39;t3://\u0026#39; + admin_pod_name + \u0026#39;:\u0026#39; + admin_port) edit() startEdit() for index in range(0, int(ms_count)): cd(\u0026#39;/\u0026#39;) msIndex = index+1 cd(\u0026#39;/\u0026#39;) name = \u0026#39;%s%s\u0026#39; % (managedNameBase, msIndex) cd(\u0026#39;Servers/%s/\u0026#39; % name ) if channelType == \u0026#39;t3\u0026#39;: create(\u0026#39;T3Channel_MS\u0026#39;,\u0026#39;NetworkAccessPoint\u0026#39;) cd(\u0026#39;NetworkAccessPoints/T3Channel_MS\u0026#39;) set(\u0026#39;Protocol\u0026#39;,\u0026#39;t3\u0026#39;) set(\u0026#39;ListenPort\u0026#39;,int(listen_port)) set(\u0026#39;PublicPort\u0026#39;,int(public_port)) set(\u0026#39;PublicAddress\u0026#39;, public_address) print(\u0026#39;Channel T3Channel_MS added ...for \u0026#39; + name) elif channelType == \u0026#39;t3s\u0026#39;:\tcreate(\u0026#39;T3SChannel_MS\u0026#39;,\u0026#39;NetworkAccessPoint\u0026#39;) cd(\u0026#39;NetworkAccessPoints/T3SChannel_MS\u0026#39;) set(\u0026#39;Protocol\u0026#39;,\u0026#39;t3s\u0026#39;) set(\u0026#39;ListenPort\u0026#39;,int(listen_port)) set(\u0026#39;PublicPort\u0026#39;,int(public_port)) set(\u0026#39;PublicAddress\u0026#39;, public_address) set(\u0026#39;HttpEnabledForThisProtocol\u0026#39;, true) set(\u0026#39;OutboundEnabled\u0026#39;, false) set(\u0026#39;Enabled\u0026#39;, true) set(\u0026#39;TwoWaySSLEnabled\u0026#39;, true) set(\u0026#39;ClientCertificateEnforced\u0026#39;, false) print(\u0026#39;Channel T3SChannel_MS added ...for \u0026#39; + name) else: print(\u0026#39;Protocol [%s] not supported\u0026#39; % channelType) activate() disconnect()   Copy t3_ms_config.py into the domain home (for example, /u01/oracle/user_projects/domains/soainfra) of the Administration Server pod (for example, soainfra-adminserver in soans namespace).\n$ kubectl cp t3_ms_config.py soans/soainfra-adminserver:/u01/oracle/user_projects/domains/soainfra   Run wlst.sh t3_ms_config.py by exec into the Administration Server pod with the following parameters:\n admin_pod_name: soainfra-adminserver # Administration Server pod admin_port: 7001 user_name: weblogic password: Welcome1 # weblogic password listen_port: 30016 # New port for T3 Managed Servers public_port: 30016 # Kubernetes NodePort which will be used to expose T3 port externally public_address:  managedNameBase: soa_server # Give Managed Server base name. For osb_cluster this will be osb_server ms_count: 5 # Number of configured Managed Servers channelType: t3 # channelType is t3 or t3s  $ kubectl exec -it \u0026lt;Administration Server pod\u0026gt; -n \u0026lt;namespace\u0026gt; -- /u01/oracle/oracle_common/common/bin/wlst.sh \u0026lt;domain_home\u0026gt;/t3_ms_config.py \u0026lt;Administration Server pod\u0026gt; \u0026lt;Administration Server port\u0026gt; weblogic \u0026lt;password for weblogic\u0026gt; \u0026lt;t3 port on Managed Server\u0026gt; \u0026lt;t3 nodeport\u0026gt; \u0026lt;master_ip\u0026gt; \u0026lt;managedNameBase\u0026gt; \u0026lt;ms_count\u0026gt; \u0026lt;channelType t3 or t3s\u0026gt; For example:\n$ kubectl exec -it soainfra-adminserver -n soans -- /u01/oracle/oracle_common/common/bin/wlst.sh /u01/oracle/user_projects/domains/soainfra/t3_ms_config.py soainfra-adminserver 7001 weblogic Welcome1 30016 30016 xxx.xxx.xxx.xxx soa_server 5 t3   Create t3_ms_svc.yaml with the following contents to expose T3 at Managed Server port 30016 for domainName, domainUID as soainfra, and clusterName as soa_cluster for the SOA cluster. Similarly, you can create the Kubernetes service with clusterName as osb_cluster for an Oracle Service Bus cluster:\n Note: For T3S, replace NodePort 30016 with the appropriate value used with public_port while creating the T3S channel using wlst.sh in the previous step.\n apiVersion: v1 kind: Service metadata: name: soainfra-soa-cluster-t3-external namespace: soans labels: weblogic.clusterName: soa_cluster weblogic.domainName: soainfra weblogic.domainUID: soainfra spec: type: NodePort selector: weblogic.domainName: soainfra weblogic.domainUID: soainfra weblogic.clusterName: soa_cluster ports: - name: t3soaport protocol: TCP port: 30016 targetPort: 30016 nodePort: 30016   Create the NodePort service for port 30016:\n$ kubectl create -f t3_ms_svc.yaml   Verify that you can access T3 for the Managed Server with the following URL:\nt3://\u0026lt;master_ip\u0026gt;:30016   Similarly, you can access T3S as follows:\na. First get the certificates from the Administration Server to be used for secured (t3s) connection from client. You can export the certificate from the Administration Server with wlst commands. Sample commands to export the default demoidentity:\n Note: In case you are using the custom SSL certificate, replaces the steps accordingly\n $ kubectl exec -it soainfra-adminserver -n soans -- bash $ /u01/oracle/oracle_common/common/bin/wlst.sh $ connect('weblogic','Welcome1','t3://soainfra-adminserver:7001') $ svc = getOpssService(name='KeyStoreService') $ svc.exportKeyStoreCertificate(appStripe='system', name='demoidentity', password='DemoIdentityKeyStorePassPhrase', alias='DemoIdentity', type='Certificate', filepath='/tmp/cert.txt/') The above steps download the certificate at /tmp/cert.txt.\nb. Use the same certificates from the client side and connect using t3s. For example:\n$ export JAVA_HOME=/u01/jdk $ keytool -import -v -trustcacerts -alias soadomain -file cert.txt -keystore $JAVA_HOME/jre/lib/security/cacerts -keypass changeit -storepass changeit $ export WLST_PROPERTIES=\u0026quot;-Dweblogic.security.SSL.ignoreHostnameVerification=true\u0026quot; $ cd $ORACLE_HOME/oracle_common/common/bin $ ./wlst.sh Initializing WebLogic Scripting Tool (WLST) ... Welcome to WebLogic Server Administration Scripting Shell Type help() for help on available commands $ wls:/offline\u0026gt; connect('weblogic','Welcome1','t3s://\u0026lt;Master IP address\u0026gt;:30016')   Remove T3/T3S configuration For Administration Server   Create t3_admin_delete.py with the following content:\nadmin_pod_name = sys.argv[1] admin_port = sys.argv[2] user_name = sys.argv[3] password = sys.argv[4] AdminServerName = sys.argv[5] channelType = sys.argv[6] print(\u0026#39;custom admin_pod_name : [%s]\u0026#39; % admin_pod_name); print(\u0026#39;custom admin_port : [%s]\u0026#39; % admin_port); print(\u0026#39;custom user_name : [%s]\u0026#39; % user_name); print(\u0026#39;custom password : ********\u0026#39;); connect(user_name, password, \u0026#39;t3://\u0026#39; + admin_pod_name + \u0026#39;:\u0026#39; + admin_port) edit() startEdit() cd(\u0026#39;/\u0026#39;) cd(\u0026#39;Servers/%s/\u0026#39; % AdminServerName ) if channelType == \u0026#39;t3\u0026#39;: delete(\u0026#39;T3Channel_AS\u0026#39;,\u0026#39;NetworkAccessPoint\u0026#39;) elif channelType == \u0026#39;t3s\u0026#39;: delete(\u0026#39;T3SChannel_AS\u0026#39;,\u0026#39;NetworkAccessPoint\u0026#39;) else: print(\u0026#39;channelType [%s] not supported\u0026#39;,channelType) activate() disconnect()   Copy t3_admin_delete.py into the domain home (for example, /u01/oracle/user_projects/domains/soainfra) of the Administration Server pod (for example, soainfra-adminserver in soans namespace).\n$ kubectl cp t3_admin_delete.py soans/soainfra-adminserver:/u01/oracle/user_projects/domains/soainfra   Run wlst.sh t3_admin_delete.py by exec into the Administration Server pod with the following parameters:\n admin_pod_name: soainfra-adminserver # Administration Server pod admin_port: 7001 user_name: weblogic password: Welcome1 # weblogic password AdminServerName: AdminServer # Give administration Server name channelType: t3 # T3 channel  $ kubectl exec -it \u0026lt;Administration Server pod\u0026gt; -n \u0026lt;namespace\u0026gt; -- /u01/oracle/oracle_common/common/bin/wlst.sh \u0026lt;domain_home\u0026gt;/t3_admin_delete.py \u0026lt;Administration Server pod\u0026gt; \u0026lt;Administration Server port\u0026gt; weblogic \u0026lt;password for weblogic\u0026gt; \u0026lt;AdminServerName\u0026gt; \u0026lt;protocol t3 or t3s\u0026gt; For example:\n$ kubectl exec -it soainfra-adminserver -n soans -- /u01/oracle/oracle_common/common/bin/wlst.sh /u01/oracle/user_projects/domains/soainfra/t3_admin_delete.py soainfra-adminserver 7001 weblogic Welcome1 AdminServer t3   Delete the NodePort service for port 30014:\n$ kubectl delete -f t3_admin_svc.yaml   For Managed Servers These steps delete the custom T3/T3S channel created by Expose T3/T3S for Managed Servers for all Managed Servers.\n  Create t3_ms_delete.py with the following content:\nadmin_pod_name = sys.argv[1] admin_port = sys.argv[2] user_name = sys.argv[3] password = sys.argv[4] managedNameBase = sys.argv[5] ms_count = sys.argv[6] channelType = sys.argv[7] print(\u0026#39;custom host : [%s]\u0026#39; % admin_pod_name); print(\u0026#39;custom port : [%s]\u0026#39; % admin_port); print(\u0026#39;custom user_name : [%s]\u0026#39; % user_name); print(\u0026#39;custom password : ********\u0026#39;); connect(user_name, password, \u0026#39;t3://\u0026#39; + admin_pod_name + \u0026#39;:\u0026#39; + admin_port) edit() startEdit() for index in range(0, int(ms_count)): cd(\u0026#39;/\u0026#39;) msIndex = index+1 cd(\u0026#39;/\u0026#39;) name = \u0026#39;%s%s\u0026#39; % (managedNameBase, msIndex) cd(\u0026#39;Servers/%s/\u0026#39; % name ) if channelType == \u0026#39;t3\u0026#39;: delete(\u0026#39;T3Channel_MS\u0026#39;,\u0026#39;NetworkAccessPoint\u0026#39;) elif channelType == \u0026#39;t3s\u0026#39;: delete(\u0026#39;T3SChannel_MS\u0026#39;,\u0026#39;NetworkAccessPoint\u0026#39;) else: print(\u0026#39;Protocol [%s] not supported\u0026#39; % channelType) activate() disconnect()   Copy t3_ms_delete.py into the domain home (for example, /u01/oracle/user_projects/domains/soainfra) of the Administration Server pod (for example, soainfra-adminserver in soans namespace).\n$ kubectl cp t3_ms_delete.py soans/soainfra-adminserver:/u01/oracle/user_projects/domains/soainfra   Run wlst.sh t3_ms_delete.py by exec into the Administration Server pod with the following parameters:\n admin_pod_name: soainfra-adminserver # Administration Server pod admin_port: 7001 user_name: weblogic password: Welcome1 # weblogic password managedNameBase: soa_server # Give Managed Server base name. For osb_cluster this will be osb_server ms_count: 5 # Number of configured Managed Servers channelType: t3 # channelType is t3 or t3s  $ kubectl exec -it \u0026lt;Administration Server pod\u0026gt; -n \u0026lt;namespace\u0026gt; -- /u01/oracle/oracle_common/common/bin/wlst.sh \u0026lt;domain_home\u0026gt;/t3_ms_delete.py \u0026lt;Administration Server pod\u0026gt; \u0026lt;Administration Server port\u0026gt; weblogic \u0026lt;password for weblogic\u0026gt; \u0026lt;t3 port on Managed Server\u0026gt; \u0026lt;t3 nodeport\u0026gt; \u0026lt;master_ip\u0026gt; \u0026lt;managedNameBase\u0026gt; \u0026lt;ms_count\u0026gt; \u0026lt;channelType t3 or t3s\u0026gt; For example:\n$ kubectl exec -it soainfra-adminserver -n soans -- /u01/oracle/oracle_common/common/bin/wlst.sh /u01/oracle/user_projects/domains/soainfra/t3_ms_delete.py soainfra-adminserver 7001 weblogic Welcome1 soa_server 5 t3   Delete the NodePort service for port 30016 (or the NodePort used while creating the Kubernetes service):\n$ kubectl delete -f t3_ms_svc.yaml   "
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/cleanup-domain-setup/",
	"title": "Uninstall an Oracle WebCenter Portal domain",
	"tags": [],
	"description": "Clean up the Oracle WebCenter Portal domain setup.",
	"content": "To clean up the Oracle WebCenter Portal domain setup, follow the steps below.\nDelete the Generated Domain Home To remove a domain home that you generated by running the create-domain.sh script in your production or testing environment, use the delete-domain-job.yaml file located at, \u0026lt;$WORKDIR\u0026gt;/create-wcp-domain/domain-home-on-pv/output/weblogic-domains/wcp-domain\u0026gt; directory.\n$ kubectl create -f delete-domain-job.yaml Clean Up the create-domain-job script After Execution Failure To clean up the create-domain-job script:\n  Get the create domain job and configmaps:\n$ kubectl get configmaps,jobs -n wcpns |grep \u0026#34;create-domain-job\u0026#34;   Delete the job and configmap:\n$ kubectl delete job job.batch/wcp-domain-create-fmw-infra-sample-domain-job -n wcpns $ kubectl delete configmap wcp-domain-create-fmw-infra-sample-domain-job-cm -n wcpns   Delete the contents of the PV, if any:\n$ sudo rm -rf /scratch/kubevolume   "
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/create-oam-domains/",
	"title": "Create OAM domains",
	"tags": [],
	"description": "Create OAM domains on Kubernetes",
	"content": "Choose one of the following supported methods to create an OAM domain:\na. Create OAM domains Using WLST Offline Scripts\nb. Create OAM domains Using WDT Models\n"
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/create-oig-domains/",
	"title": "Create OIG domains",
	"tags": [],
	"description": "Create OIG domains on Kubernetes",
	"content": "Choose one of the following supported methods to create an OIG domain:\na. Create OIG domains Using WLST Offline Scripts\nb. Create OIG domains Using WDT Models\n"
},
{
	"uri": "/fmw-kubernetes/idm-products/oud/create-oud-instances/",
	"title": "Create Oracle Unified Directory Instances",
	"tags": [],
	"description": "This document provides details of the oud-ds-rs Helm chart.",
	"content": " Introduction Create a Kubernetes namespace Create a Kubernetes secret for the container registry Create a Kubernetes secret for cronjob images The oud-ds-rs Helm chart Create OUD instances Enabling Assured Replication (Optional) Helm command output Verify the OUD deployment Verify the OUD replication Verify the cronjob Undeploy an OUD deployment Appendix A: Configuration parameters Appendix B: Environment Variables  Introduction This chapter demonstrates how to deploy Oracle Unified Directory (OUD) 12c instance(s) and replicated instances using the Helm package manager for Kubernetes.\nThe helm chart can be used to deploy an Oracle Unified Directory instance as a base, with configured sample entries, and multiple replicated Oracle Unified Directory instances/pods/services based on the specified replicaCount.\nBased on the configuration, this chart deploys the following objects in the specified namespace of a Kubernetes cluster.\n Service Account Secret Persistent Volume and Persistent Volume Claim Pod(s)/Container(s) for Oracle Unified Directory Instances Services for interfaces exposed through Oracle Unified Directory Instances Ingress configuration  Note: From July 22 (22.3.1) onwards OUD deployment is performed using StatefulSets.\nCreate a Kubernetes namespace Create a Kubernetes namespace for the OUD deployment by running the following command:\n$ kubectl create namespace \u0026lt;namespace\u0026gt; For example:\n$ kubectl create namespace oudns The output will look similar to the following:\nnamespace/oudns created Create a Kubernetes secret for the container registry Create a Kubernetes secret to stores the credentials for the container registry where the OUD image is stored. This step must be followed if using Oracle Container Registry or your own private container registry. If you are not using a container registry and have loaded the images on each of the master and worker nodes, you can skip this step.\n  Run the following command to create the secret:\nkubectl create secret docker-registry \u0026#34;orclcred\u0026#34; --docker-server=\u0026lt;CONTAINER_REGISTRY\u0026gt; \\ --docker-username=\u0026#34;\u0026lt;USER_NAME\u0026gt;\u0026#34; \\ --docker-password=\u0026lt;PASSWORD\u0026gt; --docker-email=\u0026lt;EMAIL_ID\u0026gt; \\ --namespace=\u0026lt;domain_namespace\u0026gt; For example, if using Oracle Container Registry:\n$ kubectl create secret docker-registry \u0026#34;orclcred\u0026#34; --docker-server=container-registry.oracle.com \\ --docker-username=\u0026#34;user@example.com\u0026#34; \\ --docker-password=password --docker-email=user@example.com \\ --namespace=oudns Replace \u0026lt;USER_NAME\u0026gt; and \u0026lt;PASSWORD\u0026gt; with the credentials for the registry with the following caveats:\n  If using Oracle Container Registry to pull the OUD container image, this is the username and password used to login to Oracle Container Registry. Before you can use this image you must login to Oracle Container Registry, navigate to Middleware \u0026gt; oud_cpu and accept the license agreement.\n  If using your own container registry to store the OUD container image, this is the username and password (or token) for your container registry.\n  The output will look similar to the following:\nsecret/orclcred created   Create a Kubernetes secret for cronjob images Once OUD is deployed, if the Kubernetes node where the OUD pod(s) is/are running goes down after the pod eviction time-out, the pod(s) don\u0026rsquo;t get evicted but move to a Terminating state. The pod(s) will then remain in that state forever. To avoid this problem a cron-job is created during OUD deployment that checks for any pods in Terminating state. If there are any pods in Terminating state, the cron job will delete them. The pods will then start again automatically. This cron job requires access to images on hub.docker.com. A Kubernetes secret must therefore be created to enable access to these images.\n  Create a Kubernetes secret to access the required images on hub.docker.com:\nNote: You must first have a user account on hub.docker.com:\n$ kubectl create secret docker-registry \u0026#34;dockercred\u0026#34; --docker-server=\u0026#34;https://index.docker.io/v1/\u0026#34; --docker-username=\u0026#34;\u0026lt;docker_username\u0026gt;\u0026#34; --docker-password=\u0026lt;password\u0026gt; --docker-email=\u0026lt;docker_email_credentials\u0026gt; --namespace=\u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl create secret docker-registry \u0026quot;dockercred\u0026quot; --docker-server=\u0026quot;https://index.docker.io/v1/\u0026quot; --docker-username=\u0026quot;username\u0026quot; --docker-password=\u0026lt;password\u0026gt; --docker-email=user@example.com --namespace=oudns The output will look similar to the following:\nsecret/dockercred created   The oud-ds-rs Helm chart The oud-ds-rs Helm chart allows you to create or deploy a group of replicated Oracle Unified Directory instances along with Kubernetes objects in a specified namespace.\nThe deployment can be initiated by running the following Helm command with reference to the oud-ds-rs Helm chart, along with configuration parameters according to your environment.\n$ cd $WORKDIR/kubernetes/helm $ helm install --namespace \u0026lt;namespace\u0026gt; \\ \u0026lt;Configuration Parameters\u0026gt; \\ \u0026lt;deployment/release name\u0026gt; \\ \u0026lt;Helm Chart Path/Name\u0026gt; Configuration Parameters (override values in chart) can be passed on with --set arguments on the command line and/or with -f / --values arguments when referring to files.\nNote: The examples in Create OUD instances below provide values which allow the user to override the default values provided by the Helm chart. A full list of configuration parameters and their default values is shown in Appendix A: Configuration parameters.\nFor more details about the helm command and parameters, please execute helm --help and helm install --help.\nCreate OUD instances You can create OUD instances using one of the following methods:\n Using a YAML file Using --set argument  Note: While it is possible to install sample data during the OID deployment is it not possible to load your own data via an ldif file . In order to load data in OUD, create the OUD deployment and then use ldapmodify post the ingress deployment. See Using LDAP utilities.\nUsing a YAML file   Navigate to the $WORKDIR/kubernetes/helm directory:\n$ cd $WORKDIR/kubernetes/helm   Create an oud-ds-rs-values-override.yaml as follows:\nimage: repository: \u0026lt;image_location\u0026gt; tag: \u0026lt;image_tag\u0026gt; pullPolicy: IfNotPresent imagePullSecrets: - name: orclcred oudConfig: # memory, cpu parameters for both requests and limits for oud instances resources: limits: cpu: \u0026#34;1\u0026#34; memory: \u0026#34;4Gi\u0026#34; requests: cpu: \u0026#34;500m\u0026#34; memory: \u0026#34;4Gi\u0026#34; rootUserPassword: \u0026lt;password\u0026gt; sampleData: \u0026#34;200\u0026#34; persistence: type: filesystem filesystem: hostPath: path: \u0026lt;persistent_volume\u0026gt;/oud_user_projects cronJob: kubectlImage: repository: bitnami/kubectl tag: \u0026lt;version\u0026gt; pullPolicy: IfNotPresent imagePullSecrets: - name: dockercred For example:\nimage: repository: container-registry.oracle.com/middleware/oud_cpu tag: 12.2.1.4-jdk8-ol8-\u0026lt;January\u0026#39;25\u0026gt; pullPolicy: IfNotPresent imagePullSecrets: - name: orclcred oudConfig: # memory, cpu parameters for both requests and limits for oud instances resources: limits: cpu: \u0026#34;1\u0026#34; memory: \u0026#34;8Gi\u0026#34; requests: cpu: \u0026#34;500m\u0026#34; memory: \u0026#34;4Gi\u0026#34; rootUserPassword: \u0026lt;password\u0026gt; sampleData: \u0026#34;200\u0026#34; persistence: type: filesystem filesystem: hostPath: path: /scratch/shared/oud_user_projects cronJob: kubectlImage: repository: bitnami/kubectl tag: 1.28.3 pullPolicy: IfNotPresent imagePullSecrets: - name: dockercred The following caveats exist:\n  Replace \u0026lt;password\u0026gt; with the relevant password.\n  sampleData: \u0026quot;200\u0026quot; will load 200 sample users into the default baseDN dc=example,dc=com. If you do not want sample data, remove this entry. If sampleData is set to 1,000,000 users or greater, then you must add the following entries to the yaml file to prevent inconsistencies in dsreplication:\ndeploymentConfig: startupTime: 720 period: 120 timeout: 60   The \u0026lt;version\u0026gt; in kubectlImage tag: should be set to the same version as your Kubernetes version (kubectl version). For example if your Kubernetes version is 1.28.3 set to 1.28.3.\n  If you are not using Oracle Container Registry or your own container registry for your OUD container image, then you can remove the following:\nimagePullSecrets: - name: orclcred   If your cluster does not have access to the internet to pull external images, such as bitnami/kubectl or busybox, you must load the images in a local container registry. You must then set the following:\ncronJob: kubectlImage: repository: container-registry.example.com/bitnami/kubectl tag: 1.28.3 pullPolicy: IfNotPresent busybox: image: container-registry.example.com/busybox   If using NFS for your persistent volume then change the persistence section as follows:\nNote: If you want to use NFS you should ensure that you have a default Kubernetes storage class defined for your environment that allows network storage.\nFor more information on storage classes, see Storage Classes.\npersistence: type: networkstorage networkstorage: nfs: path: \u0026lt;persistent_volume\u0026gt;/oud_user_projects server: \u0026lt;NFS IP address\u0026gt; # if true, it will create the storageclass. if value is false, please provide existing storage class (storageClass) to be used. storageClassCreate: true storageClass: oud-sc # if storageClassCreate is true, please provide the custom provisioner if any to use. If you do not have a custom provisioner, delete this line, and it will use the default class kubernetes.io/is-default-class. provisioner: kubernetes.io/is-default-class The following caveats exist:\n If you want to create your own storage class, set storageClassCreate: true. If storageClassCreate: true it is recommended to set storageClass to a value of your choice, and provisioner to the provisioner supported by your cloud vendor. If you have an existing storageClass that supports network storage, set storageClassCreate: false and storageClass to the NAME value returned in \u0026ldquo;kubectl get storageclass\u0026rdquo;. The provisioner can be ignored.    If using Block Device storage for your persistent volume then change the persistence section as follows:\nNote: If you want to use block devices you should ensure that you have a default Kubernetes storage class defined for your environment that allows dynamic storage. Each vendor has its own storage provider but it may not be configured to provide dynamic storage allocation.\nFor more information on storage classes, see Storage Classes.\npersistence: type: blockstorage # Specify Accessmode ReadWriteMany for NFS and for block ReadWriteOnce accessMode: ReadWriteOnce # if true, it will create the storageclass. if value is false, please provide existing storage class (storageClass) to be used. storageClassCreate: true storageClass: oud-sc # if storageClassCreate is true, please provide the custom provisioner if any to use or else it will use default. provisioner: oracle.com/oci The following caveats exist:\n If you want to create your own storage class, set storageClassCreate: true. If storageClassCreate: true it is recommended to set storageClass to a value of your choice, and provisioner to the provisioner supported by your cloud vendor. If you have an existing storageClass that supports dynamic storage, set storageClassCreate: false and storageClass to the NAME value returned in \u0026ldquo;kubectl get storageclass\u0026rdquo;. The provisioner can be ignored.    For resources, limits and requests, the example CPU and memory values shown are for development environments only. For Enterprise Deployments, please review the performance recommendations and sizing requirements in Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster.\nNote: Limits and requests for CPU resources are measured in CPU units. One CPU in Kubernetes is equivalent to 1 vCPU/Core for cloud providers, and 1 hyperthread on bare-metal Intel processors. An \u0026ldquo;m\u0026rdquo; suffix in a CPU attribute indicates ‘milli-CPU’, so 500m is 50% of a CPU. Memory can be expressed in various units, where one Mi is one IEC unit mega-byte (1024^2), and one Gi is one IEC unit giga-byte (1024^3). For more information, see Resource Management for Pods and Containers, Assign Memory Resources to Containers and Pods, and Assign CPU Resources to Containers and Pods.\nNote: The parameters above are also utilized by the Kubernetes Horizontal Pod Autoscaler (HPA). For more details on HPA, see Kubernetes Horizontal Pod Autoscaler.\n  If you plan on integrating OUD with other Oracle components then you must specify the following under the oudConfig: section:\n integration: \u0026lt;Integration option\u0026gt;  For example: oudConfig: etc... integration: \u0026lt;Integration option\u0026gt;  It is recommended to choose the option covering your minimal requirements. Allowed values include: `no-integration` (no integration), `basic` (Directory Integration Platform), `generic` (Directory Integration Platform, Database Net Services and E-Business Suite integration), `eus` (Directory Integration Platform, Database Net Services, E-Business Suite and Enterprise User Security integration). The default value is `no-integration` **Note**: This will enable the integration type only. To integrate OUD with the Oracle component referenced, refer to the relevant product component documentation.   If you want to enable Assured Replication, see Enabling Assured Replication (Optional).\n    Run the following command to deploy OUD:\n$ helm install --namespace \u0026lt;namespace\u0026gt; \\ --values oud-ds-rs-values-override.yaml \\ \u0026lt;release_name\u0026gt; oud-ds-rs For example:\n$ helm install --namespace oudns \\ --values oud-ds-rs-values-override.yaml \\ oud-ds-rs oud-ds-rs   Check the OUD deployment as per Verify the OUD deployment and Verify the OUD replication.\n  Using --set argument   Navigate to the $WORKDIR/kubernetes/helm directory:\n$ cd $WORKDIR/kubernetes/helm   Run the following command to create OUD instances:\n$ helm install --namespace \u0026lt;namespace\u0026gt; \\ --set oudConfig.rootUserPassword=\u0026lt;password\u0026gt; \\ --set persistence.filesystem.hostPath.path=\u0026lt;persistent_volume\u0026gt;/oud_user_projects \\ --set image.repository=\u0026lt;image_location\u0026gt;,image.tag=\u0026lt;image_tag\u0026gt; \\ --set oudConfig.sampleData=\u0026#34;200\u0026#34; \\ --set oudConfig.resources.limits.cpu=\u0026#34;1\u0026#34;,oudConfig.resources.limits.memory=\u0026#34;8Gi\u0026#34;,oudConfig.resources.requests.cpu=\u0026#34;500m\u0026#34;,oudConfig.resources.requests.memory=\u0026#34;4Gi\u0026#34; \\ --set cronJob.kubectlImage.repository=bitnami/kubectl,cronJob.kubectlImage.tag=\u0026lt;version\u0026gt; \\ --set cronJob.imagePullSecrets[0].name=\u0026#34;dockercred\u0026#34; \\ --set imagePullSecrets[0].name=\u0026#34;orclcred\u0026#34; \\ \u0026lt;release_name\u0026gt; oud-ds-rs For example:\n$ helm install --namespace oudns \\ --set oudConfig.rootUserPassword=\u0026lt;password\u0026gt; \\ --set persistence.filesystem.hostPath.path=/scratch/shared/oud_user_projects \\ --set image.repository=container-registry.oracle.com/middleware/oud_cpu,image.tag=12.2.1.4-jdk8-ol8-\u0026lt;January\u0026#39;25\u0026gt; \\ --set oudConfig.sampleData=\u0026#34;200\u0026#34; \\ --set oudConfig.resources.limits.cpu=\u0026#34;1\u0026#34;,oudConfig.resources.limits.memory=\u0026#34;8Gi\u0026#34;,oudConfig.resources.requests.cpu=\u0026#34;500m\u0026#34;,oudConfig.resources.requests.memory=\u0026#34;4Gi\u0026#34; \\ --set cronJob.kubectlImage.repository=bitnami/kubectl,cronJob.kubectlImage.tag=1.28.3 \\ --set cronJob.imagePullSecrets[0].name=\u0026#34;dockercred\u0026#34; \\ --set imagePullSecrets[0].name=\u0026#34;orclcred\u0026#34; \\ oud-ds-rs oud-ds-rs The following caveats exist:\n  Replace \u0026lt;password\u0026gt; with a the relevant password.\n  sampleData: \u0026quot;200\u0026quot; will load 200 sample users into the default baseDN dc=example,dc=com. If you do not want sample data, remove this entry. If sampleData is set to 1,000,000 users or greater, then you must add the following entries to the yaml file to prevent inconsistencies in dsreplication: --set deploymentConfig.startupTime=720,deploymentConfig.period=120,deploymentConfig.timeout=60.\n  The \u0026lt;version\u0026gt; in kubectlImage tag: should be set to the same version as your Kubernetes version (kubectl version). For example if your Kubernetes version is 1.28.3 set to 1.28.3.\n  If using using NFS for your persistent volume then use:\n--set persistence.networkstorage.nfs.path=\u0026lt;persistent_volume\u0026gt;/oud_user_projects,persistence.networkstorage.nfs.server:\u0026lt;NFS IP address\u0026gt;` \\ --set persistence.storageClassCreate=\u0026quot;true\u0026quot;,persistence.storageClass=\u0026quot;oud-sc\u0026quot;,persistence.provisioner=\u0026quot;kubernetes.io/is-default-class\u0026quot; \\ * If you want to create your own storage class, set `storageClassCreate: true`. If `storageClassCreate: true` it is recommended to set `storageClass` to a value of your choice, and `provisioner` to the provisioner supported by your cloud vendor. * If you have an existing storageClass that supports dynamic storage, set `storageClassCreate: false` and `storageClass` to the NAME value returned in \u0026quot;`kubectl get storageclass`\u0026quot;. The `provisioner` can be ignored.   If using using block storage for your persistent volume then use:\n--set persistence.type=\u0026quot;blockstorage\u0026quot;,persistence.accessMode=\u0026quot;ReadWriteOnce\u0026quot; \\ --set persistence.storageClassCreate=\u0026quot;true\u0026quot;,persistence.storageClass=\u0026quot;oud-sc\u0026quot;,persistence.provisioner=\u0026quot;oracle.com/oci\u0026quot; \\ * If you want to create your own storage class, set `storageClassCreate: true`. If `storageClassCreate: true` it is recommended to set `storageClass` to a value of your choice, and `provisioner` to the provisioner supported by your cloud vendor. * If you have an existing storageClass that supports dynamic storage, set `storageClassCreate: false` and `storageClass` to the NAME value returned in \u0026quot;`kubectl get storageclass`\u0026quot;. The `provisioner` can be ignored.   If you are not using Oracle Container Registry or your own container registry for your OUD container image, then you can remove the following: --set imagePullSecrets[0].name=\u0026quot;orclcred\u0026quot;.\n  For resources, limits and `requests1, the example CPU and memory values shown are for development environments only. For Enterprise Deployments, please review the performance recommendations and sizing requirements in Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster.\nNote: Limits and requests for CPU resources are measured in CPU units. One CPU in Kubernetes is equivalent to 1 vCPU/Core for cloud providers, and 1 hyperthread on bare-metal Intel processors. An \u0026ldquo;m\u0026rdquo; suffix in a CPU attribute indicates ‘milli-CPU’, so 500m is 50% of a CPU. Memory can be expressed in various units, where one Mi is one IEC unit mega-byte (1024^2), and one Gi is one IEC unit giga-byte (1024^3). For more information, see Resource Management for Pods and Containers, Assign Memory Resources to Containers and Pods, and Assign CPU Resources to Containers and Pods.\nNote: The parameters above are also utilized by the Kubernetes Horizontal Pod Autoscaler (HPA). For more details on HPA, see Kubernetes Horizontal Pod Autoscaler.\n  If you plan on integrating OUD with other Oracle components then you must specify the following:\n--set oudConfig.integration=\u0026lt;Integration option\u0026gt;  It is recommended to choose the option covering your minimal requirements. Allowed values include: `no-integration` (no integration), `basic` (Directory Integration Platform), `generic` (Directory Integration Platform, Database Net Services and E-Business Suite integration), `eus` (Directory Integration Platform, Database Net Services, E-Business Suite and Enterprise User Security integration). The default value is `no-integration` **Note**: This will enable the integration type only. To integrate OUD with the Oracle component referenced, refer to the relevant product component documentation.   If you want to enable Assured Replication, see Enabling Assured Replication (Optional).\n    Check the OUD deployment as per Verify the OUD deployment and Verify the OUD replication.\n  Enabling Assured Replication (Optional) If you want to enable assured replication, perform the following steps:\n  Create a directory on the persistent volume as follows:\n$ cd \u0026lt;persistent_volume\u0026gt; $ mkdir oud-repl-config $ sudo chown -R 1000:0 oud-repl-config For example:\n$ cd /scratch/shared $ mkdir oud-repl-config $ sudo chown -R 1000:0 oud-repl-config   Add the following section in the oud-ds-rs-values-override.yaml:\nreplOUD: envVars: - name: post_dsreplication_dsconfig_3 value: set-replication-domain-prop --domain-name ${baseDN} --advanced --set assured-type:safe-data --set assured-sd-level:2 --set assured-timeout:5s - name: execCmd_1 value: /u01/oracle/user_projects/${OUD_INSTANCE_NAME}/OUD/bin/dsconfig --no-prompt --hostname ${sourceHost} --port ${adminConnectorPort} --bindDN \u0026quot;${rootUserDN}\u0026quot; --bindPasswordFile /u01/oracle/user_projects/${OUD_INSTANCE_NAME}/admin/rootPwdFile.txt --trustAll set-replication-domain-prop --domain-name ${baseDN} --advanced --set assured-type:safe-data --set assured-sd-level:2 --set assured-timeout:5s --provider-name \u0026quot;Multimaster Synchronization\u0026quot; configVolume: enabled: true type: networkstorage storageClassCreate: true storageClass: oud-config provisioner: kubernetes.io/is-default-class networkstorage: nfs: server: \u0026lt;IP_address\u0026gt; path: \u0026lt;persistent_volume\u0026gt;/oud-repl-config mountPath: /u01/oracle/config-input The above will enable assured replication with assured type safe-data and assured-sd-level: 2.\nNote: If you prefer assured-type to be set to safe-read, then change to --set assured-type:safe-read and remove --set assured-sd-level:2.\nFor more information on OUD Assured Replication, and other options and levels, see, Understanding the Oracle Unified Directory Replication Model.\nThe following caveats exist:\n  post_dsreplication_dsconfig_N and execCmd_N should be a unique key - change the suffix accordingly. For more information on the environment variable and respective keys, see, Appendix B: Environment Variables.\n  For configVolume the storage can be networkstorage(nfs) or filesystem(hostPath) as the config volume path has to be accessible from all the Kuberenetes nodes. Please note that block storage is not supported for configVolume.\n  If you want to create your own storage class, set storageClassCreate: true. If storageClassCreate: true it is recommended to set storageClass to a value of your choice, and provisioner to the provisioner supported by your cloud vendor.\n  * If you have an existing storageClass that supports network storage, set `storageClassCreate: false` and `storageClass` to the NAME value returned in \u0026quot;`kubectl get storageclass`\u0026quot;. Please note that the storage-class should not be the one you used for the persistent volume earlier. The `provisioner` can be ignored.    Helm command output In all the examples above, the following output is shown following a successful execution of the helm install command.\nNAME: oud-ds-rs LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oudns STATUS: deployed REVISION: 4 NOTES: # # Copyright (c) 2020, Oracle and/or its affiliates. # # Licensed under the Universal Permissive License v 1.0 as shown at # https://oss.oracle.com/licenses/upl # # Since \u0026#34;nginx\u0026#34; has been chosen, follow the steps below to configure nginx ingress controller. Add Repo reference to helm for retriving/installing Chart for nginx-ingress implementation. command-# helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx Command helm install to install nginx-ingress related objects like pod, service, deployment, etc. # helm install --namespace \u0026lt;namespace for ingress\u0026gt; --values nginx-ingress-values-override.yaml lbr-nginx ingress-nginx/ingress-nginx For details of content of nginx-ingress-values-override.yaml refer README.md file of this chart. Run these commands to check port mapping and services: # kubectl --namespace \u0026lt;namespace for ingress\u0026gt; get services -o wide -w lbr-nginx-ingress-controller # kubectl describe --namespace \u0026lt;namespace for oud-ds-rs chart\u0026gt; ingress.extensions/oud-ds-rs-http-ingress-nginx # kubectl describe --namespace \u0026lt;namespace for oud-ds-rs chart\u0026gt; ingress.extensions/oud-ds-rs-admin-ingress-nginx Accessible interfaces through ingress: (External IP Address for LoadBalancer NGINX Controller can be determined through details associated with lbr-nginx-ingress-controller) 1. OUD Admin REST: Port: http/https 2. OUD Data REST: Port: http/https 3. OUD Data SCIM: Port: http/https 4. OUD LDAP/LDAPS: Port: ldap/ldaps 5. OUD Admin LDAPS: Port: ldaps Please refer to README.md from Helm Chart to find more details about accessing interfaces and configuration parameters. Verify the OUD deployment Run the following command to verify the OUD deployment:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; get pod,service,secret,pv,pvc,ingress -o wide For example:\n$ kubectl --namespace oudns get pod,service,secret,pv,pvc,ingress -o wide The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oud-ds-rs-0 1/1 Running 0 14m 10.244.1.180 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-1 1/1 Running 0 8m26s 10.244.1.181 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-2 0/1 Running 0 2m24s 10.244.1.182 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-pod-cron-job-27586680-p5d8q 0/1 Completed 0 50s 10.244.1.183 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service/oud-ds-rs ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1389/TCP,1636/TCP,1080/TCP,1081/TCP,1898/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-0 ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1898/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-0 service/oud-ds-rs-1 ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1898/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-1 service/oud-ds-rs-2 ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1898/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-2 service/oud-ds-rs-http-0 ClusterIP 10.104.112.93 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-0 service/oud-ds-rs-http-1 ClusterIP 10.103.105.70 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-1 service/oud-ds-rs-http-2 ClusterIP 10.110.160.107 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-2 service/oud-ds-rs-lbr-admin ClusterIP 10.99.238.222 \u0026lt;none\u0026gt; 1888/TCP,1444/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-lbr-http ClusterIP 10.101.250.196 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-lbr-ldap ClusterIP 10.104.149.90 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-ldap-0 ClusterIP 10.109.255.221 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-0 service/oud-ds-rs-ldap-1 ClusterIP 10.111.135.142 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-1 service/oud-ds-rs-ldap-2 ClusterIP 10.100.8.145 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-2 NAME TYPE DATA AGE secret/dockercred kubernetes.io/dockerconfigjson 1 4h24m secret/orclcred kubernetes.io/dockerconfigjson 1 14m secret/oud-ds-rs-creds opaque 8 14m secret/oud-ds-rs-tls-cert kubernetes.io/tls 2 14m secret/sh.helm.release.v1.oud-ds-rs.v1 helm.sh/release.v1 1 14m NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE VOLUMEMODE persistentvolume/oud-ds-rs-pv 20Gi RWX Delete Bound oudns/oud-ds-rs-pvc manual 14m Filesystem NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE VOLUMEMODE persistentvolumeclaim/oud-ds-rs-pvc Bound oud-ds-rs-pv 20Gi RWX manual 14m Filesystem NAME CLASS HOSTS ADDRESS PORTS AGE ingress.networking.k8s.io/oud-ds-rs-admin-ingress-nginx \u0026lt;none\u0026gt; oud-ds-rs-admin-0,oud-ds-rs-admin-0,oud-ds-rs-admin-1 + 3 more... 80, 443 14m ingress.networking.k8s.io/oud-ds-rs-http-ingress-nginx \u0026lt;none\u0026gt; oud-ds-rs-http-0,oud-ds-rs-http-1,oud-ds-rs-http-2 + 3 more... 80, 443 14m Note: If you are using block storage you will see slightly different entries for PV and PVC, for example:\nNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE VOLUMEMODE persistentvolume/ocid1.volume.oc1.iad.\u0026lt;unique_ID\u0026gt; 50Gi RWO Delete Bound oudns/oud-ds-rs-pv-oud-ds-rs-2 oud-sc 60m Filesystem persistentvolume/ocid1.volume.oc1.iad.\u0026lt;unique_ID\u0026gt; 50Gi RWO Delete Bound oudns/oud-ds-rs-pv-oud-ds-rs-1 oud-sc 67m Filesystem persistentvolume/ocid1.volume.oc1.iad.\u0026lt;unique_ID\u0026gt; 50Gi RWO Delete Bound oudns/oud-ds-rs-pv-oud-ds-rs-3 oud-sc 45m Filesystem NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE VOLUMEMODE persistentvolumeclaim/oud-ds-rs-pv-oud-ds-rs-1 Bound ocid1.volume.oc1.iad.\u0026lt;unique_ID\u0026gt; 50Gi RWO oud-sc 67m Filesystem persistentvolumeclaim/oud-ds-rs-pv-oud-ds-rs-2 Bound ocid1.volume.oc1.iad.\u0026lt;unique_ID\u0026gt; 50Gi RWO oud-sc 60m Filesystem persistentvolumeclaim/oud-ds-rs-pv-oud-ds-rs-3 Bound ocid1.volume.oc1.iad.\u0026lt;unique_ID\u0026gt; 50Gi RWO oud-sc 45m Filesystem Note: Initially pod/oud-ds-rs-0 will appear with a STATUS of 0/1 and it will take approximately 5 minutes before OUD is started (1/1). Once pod/oud-ds-rs-0 has a STATUS of 1/1, pod/oud-ds-rs-1 will appear with a STATUS of 0/1. Once pod/oud-ds-rs-1 is started (1/1), pod/oud-ds-rs-2 will appear. It will take around 15 minutes for all the pods to fully started.\nWhile the oud-ds-rs pods have a STATUS of 0/1 the pod is running but OUD server associated with it is currently starting. While the pod is starting you can check the startup status in the pod logs, by running the following command:\n$ kubectl logs \u0026lt;pod\u0026gt; -n oudns For example:\n$ kubectl logs oud-ds-rs-0 -n oudns Note : If the OUD deployment fails additionally refer to Troubleshooting for instructions on how describe the failing pod(s). Once the problem is identified follow Undeploy an OUD deployment to clean down the deployment before deploying again.\nKubernetes Objects Kubernetes objects created by the Helm chart are detailed in the table below:\n   Type Name Example Name Purpose     Service Account \u0026lt;deployment/release name\u0026gt; oud-ds-rs Kubernetes Service Account for the Helm Chart deployment   Secret \u0026lt;deployment/release name\u0026gt;-creds oud-ds-rs-creds Secret object for Oracle Unified Directory related critical values like passwords   Persistent Volume \u0026lt;deployment/release name\u0026gt;-pv oud-ds-rs-pv Persistent Volume for user_projects mount.   Persistent Volume Claim \u0026lt;deployment/release name\u0026gt;-pvc oud-ds-rs-pvc Persistent Volume Claim for user_projects mount.   Persistent Volume \u0026lt;deployment/release name\u0026gt;-pv-config oud-ds-rs-pv-config Persistent Volume for mounting volume in containers for configuration files like ldif, schema, jks, java.security, etc.   Persistent Volume Claim \u0026lt;deployment/release name\u0026gt;-pvc-config oud-ds-rs-pvc-config Persistent Volume Claim for mounting volume in containers for configuration files like ldif, schema, jks, java.security, etc.   Pod \u0026lt;deployment/release name\u0026gt;-0 oud-ds-rs-0 Pod/Container for base Oracle Unified Directory Instance which would be populated first with base configuration (like number of sample entries)   Pod \u0026lt;deployment/release name\u0026gt;-N oud-ds-rs-1, oud-ds-rs-2, \u0026hellip; Pod(s)/Container(s) for Oracle Unified Directory Instances - each would have replication enabled against base Oracle Unified Directory instance \u0026lt;deployment/release name\u0026gt;-0   Service \u0026lt;deployment/release name\u0026gt;-0 oud-ds-rs-0 Service for LDAPS Admin, REST Admin and Replication interfaces from base Oracle Unified Directory instance \u0026lt;deployment/release name\u0026gt;-0   Service \u0026lt;deployment/release name\u0026gt;-http-0 oud-ds-rs-http-0 Service for HTTP and HTTPS interfaces from base Oracle Unified Directory instance \u0026lt;deployment/release name\u0026gt;-0   Service \u0026lt;deployment/release name\u0026gt;-ldap-0 oud-ds-rs-ldap-0 Service for LDAP and LDAPS interfaces from base Oracle Unified Directory instance \u0026lt;deployment/release name\u0026gt;-0   Service \u0026lt;deployment/release name\u0026gt;-N oud-ds-rs-1, oud-ds-rs-2, \u0026hellip; Service(s) for LDAPS Admin, REST Admin and Replication interfaces from base Oracle Unified Directory instance \u0026lt;deployment/release name\u0026gt;-N   Service \u0026lt;deployment/release name\u0026gt;-http-N oud-ds-rs-http-1, oud-ds-rs-http-2, \u0026hellip; Service(s) for HTTP and HTTPS interfaces from base Oracle Unified Directory instance \u0026lt;deployment/release name\u0026gt;-N   Service \u0026lt;deployment/release name\u0026gt;-ldap-N oud-ds-rs-ldap-1, oud-ds-rs-ldap-2, \u0026hellip; Service(s) for LDAP and LDAPS interfaces from base Oracle Unified Directory instance \u0026lt;deployment/release name\u0026gt;-N   Service \u0026lt;deployment/release name\u0026gt;-lbr-admin oud-ds-rs-lbr-admin Service for LDAPS Admin, REST Admin and Replication interfaces from all Oracle Unified Directory instances   Service \u0026lt;deployment/release name\u0026gt;-lbr-http oud-ds-rs-lbr-http Service for HTTP and HTTPS interfaces from all Oracle Unified Directory instances   Service \u0026lt;deployment/release name\u0026gt;-lbr-ldap oud-ds-rs-lbr-ldap Service for LDAP and LDAPS interfaces from all Oracle Unified Directory instances   Ingress \u0026lt;deployment/release name\u0026gt;-admin-ingress-nginx oud-ds-rs-admin-ingress-nginx Ingress Rules for HTTP Admin interfaces.   Ingress \u0026lt;deployment/release name\u0026gt;-http-ingress-nginx oud-ds-rs-http-ingress-nginx Ingress Rules for HTTP (Data/REST) interfaces.     In the table above the \u0026lsquo;Example Name\u0026rsquo; for each Object is based on the value \u0026lsquo;oud-ds-rs\u0026rsquo; as deployment/release name for the Helm chart installation.  Verify the OUD replication Once all the PODs created are visible as READY (i.e. 1/1), you can verify your replication across multiple Oracle Unified Directory instances.\n  To verify the replication group, connect to the container and issue an OUD administration command to show the details. The name of the container can be found by issuing the following:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; -o jsonpath=\u0026#39;{.items[*].spec.containers[*].name}\u0026#39; For example:\n$ kubectl get pods -n oudns -o jsonpath=\u0026#39;{.items[*].spec.containers[*].name}\u0026#39; The output will look similar to the following:\noud-ds-rs oud-ds-rs oud-ds-rs Once you have the container name you can verify the replication status in the following ways:\n Run dresplication inside the pod Using kubectl commands    Run dresplication inside the pod   Run the following command to create a bash shell in the pod:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; exec -it -c \u0026lt;containername\u0026gt; \u0026lt;podname\u0026gt; -- bash For example:\n$ kubectl --namespace oudns exec -it -c oud-ds-rs oud-ds-rs-0 -- bash This will take you into the pod:\n[oracle@oud-ds-rs-0 oracle]$   From the prompt, use the dsreplication command to check the status of your replication group:\n$ cd /u01/oracle/user_projects/oud-ds-rs-0/OUD/bin $ ./dsreplication status --trustAll \\ --hostname oud-ds-rs-0 --port 1444 --adminUID admin \\ --dataToDisplay compat-view --dataToDisplay rs-connections The output will look similar to the following. Enter credentials where prompted:\n\u0026gt;\u0026gt;\u0026gt;\u0026gt; Specify Oracle Unified Directory LDAP connection parameters Password for user \u0026#39;admin\u0026#39;: Establishing connections and reading configuration ..... Done. dc=example,dc=com - Replication Enabled ======================================= Server : Entries : M.C. [1] : A.O.M.C. [2] : Port [3] : Encryption [4] : Trust [5] : U.C. [6] : Status [7] : ChangeLog [8] : Group ID [9] : Connected To [10] ---------------------:---------:----------:--------------:----------:----------------:-----------:----------:------------:---------------:--------------:------------------------------- oud-ds-rs-0:1444 : 202 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-0:1898 : : : : : : : : : : : (GID=1) oud-ds-rs-1:1444 : 202 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-1:1898 : : : : : : : : : : : (GID=1) oud-ds-rs-2:1444 : 202 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-2:1898 : : : : : : : : : : : (GID=1) Replication Server [11] : RS #1 : RS #2 : RS #3 -------------------------------:-------:-------:------ oud-ds-rs-0:1898 : -- : Yes : Yes (#1) : : : oud-ds-rs-1:1898 : Yes : -- : Yes (#2) : : : oud-ds-rs-2:1898 : Yes : Yes : -- (#3) : : : [1] The number of changes that are still missing on this element (and that have been applied to at least one other server). [2] Age of oldest missing change: the age (in seconds) of the oldest change that has not yet arrived on this element. [3] The replication port used to communicate between the servers whose contents are being replicated. [4] Whether the replication communication initiated by this element is encrypted or not. [5] Whether the directory server is trusted or not. Updates coming from an untrusted server are discarded and not propagated. [6] The number of untrusted changes. These are changes generated on this server while it is untrusted. Those changes are not propagated to the rest of the topology but are effective on the untrusted server. [7] The status of the replication on this element. [8] Whether the external change log is enabled for the base DN on this server or not. [9] The ID of the replication group to which the server belongs. [10] The replication server this server is connected to with its group ID between brackets. [11] This table represents the connections between the replication servers. The headers of the columns use a number as identifier for each replication server. See the values of the first column to identify the corresponding replication server for each number.   Type exit to exit the pod.\n  Using kubectl commands   The dsreplication status command can be invoked using the following kubectl command:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; exec -it -c \u0026lt;containername\u0026gt; \u0026lt;podname\u0026gt; -- \\ /u01/oracle/user_projects/\u0026lt;OUD Instance/Pod Name\u0026gt;/OUD/bin/dsreplication status \\ --trustAll --hostname \u0026lt;OUD Instance/Pod Name\u0026gt; --port 1444 --adminUID admin \\ --dataToDisplay compat-view --dataToDisplay rs-connections For example:\n$ kubectl --namespace oudns exec -it -c oud-ds-rs oud-ds-rs-0 -- \\ /u01/oracle/user_projects/oud-ds-rs-0/OUD/bin/dsreplication status \\ --trustAll --hostname oud-ds-rs-0 --port 1444 --adminUID admin \\ --dataToDisplay compat-view --dataToDisplay rs-connections The output will be the same as per Run dresplication inside the pod.\n  Verify OUD assured replication status Note: This section only needs to be followed if you enabled assured replication as per Enabling Assured Replication (Optional).\n  Run the following command to create a bash shell in the pod:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; exec -it -c \u0026lt;containername\u0026gt; \u0026lt;podname\u0026gt; -- bash For example:\n$ kubectl --namespace oudns exec -it -c oud-ds-rs oud-ds-rs-0 -- bash This will take you into the pod:\n[oracle@oud-ds-rs-0 oracle]$   At the prompt, enter the following commands:\n$ echo $bindPassword1 \u0026gt; /tmp/pwd.txt $ /u01/oracle/user_projects/${OUD_INSTANCE_NAME}/OUD/bin/dsconfig --no-prompt --hostname ${OUD_INSTANCE_NAME} --port ${adminConnectorPort} --bindDN \u0026#34;${rootUserDN}\u0026#34; --bindPasswordFile /tmp/pwd.txt --trustAll get-replication-domain-prop --domain-name ${baseDN} --advanced --property assured-type --property assured-sd-level --property assured-timeout --provider-name \u0026#34;Multimaster Synchronization\u0026#34; The output will look similar to the following:\nProperty : Value(s) -----------------:---------- assured-sd-level : 2 assured-timeout : 5 s assured-type : safe-data   Verify the cronjob   Run the following command to make sure the cronjob is created:\n$ kubectl get cronjob -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get cronjob -n oudns The output will look similar to the following:\nNAME SCHEDULE SUSPEND ACTIVE LAST SCHEDULE AGE oud-pod-cron-job */30 * * * * False 0 5m18s 19m   Run the following command to make sure the job(s) is created:\n$ kubectl get job -n \u0026lt;namespace\u0026gt; -o wide For example:\n$ kubectl get job -n oudns -o wide The output will look similar to the following:\nNAME COMPLETIONS DURATION AGE CONTAINERS IMAGES SELECTOR oud-pod-cron-job-27586680 1/1 1s 5m36s cron-kubectl bitnami/kubectl:1.28.3 controller-uid=700ab9f7-6094-488a-854d-f1b914de5f61   Disabling the cronjob If you need to disable the job, for example if maintenance needs to be performed on the node, you can disable the job as follows:\n  Run the following command to edit the cronjob:\n$ kubectl edit cronjob pod-cron-job -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl edit cronjob oud-pod-cron-job -n oudns Note: This opens an edit session for the cronjob where parameters can be changed using standard vi commands.\n  In the edit session search for suspend and change the vaule from false to true:\n... schedule: '*/30 * * * *' successfulJobsHistoryLimit: 3 suspend: true ...   Save the file and exit (wq!).\n  Run the following to make sure the cronjob is suspended:\n$ kubectl get cronjob -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get cronjob -n oudns The output will look similar to the following:\nNAME SCHEDULE SUSPEND ACTIVE LAST SCHEDULE AGE oud-pod-cron-job */30 * * * * True 0 7m47s 21m   To enable the cronjob again, repeat the above steps and set suspend to false.\n  Ingress Configuration With an OUD instance now deployed you are now ready to configure an ingress controller to direct traffic to OUD as per Configure an ingress for an OUD.\nUndeploy an OUD deployment Delete the OUD deployment   Find the deployment release name:\n$ helm --namespace \u0026lt;namespace\u0026gt; list For example:\n$ helm --namespace oudns list The output will look similar to the following:\nNAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION oud-ds-rs oudns 1 \u0026lt;DATE\u0026gt; deployed oud-ds-rs-0.2 12.2.1.4.0   Delete the deployment using the following command:\n$ helm uninstall --namespace \u0026lt;namespace\u0026gt; \u0026lt;release\u0026gt; For example:\n$ helm uninstall --namespace oudns oud-ds-rs release \u0026#34;oud-ds-rs\u0026#34; uninstalled   Run the following command to view the status:\n$ kubectl --namespace oudns get pod,service,secret,pv,pvc,ingress -o wide Initially the pods and persistent volume (PV) and persistent volume claim (PVC) will move to a Terminating status:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oud-ds-rs-0 1/1 Terminating 0 24m 10.244.1.180 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-1 1/1 Terminating 0 18m 10.244.1.181 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-2 1/1 Terminating 0 12m 10.244.1.182 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; NAME TYPE DATA AGE secret/default-token-msmmd kubernetes.io/service-account-token 3 3d20h secret/dockercred kubernetes.io/dockerconfigjson 1 3d20h secret/orclcred kubernetes.io/dockerconfigjson 1 3d20h NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE VOLUMEMODE persistentvolume/oud-ds-rs-pv 20Gi RWX Delete Terminating oudns/oud-ds-rs-pvc manual 24m Filesystem NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE VOLUMEMODE persistentvolumeclaim/oud-ds-rs-pvc Terminating oud-ds-rs-pv 20Gi RWX manual 24m Filesystem Run the command again until the pods, PV and PVC disappear.\n  If the PV or PVC\u0026rsquo;s don\u0026rsquo;t delete, remove them manually:\n$ kubectl delete pvc oud-ds-rs-pvc -n oudns $ kubectl delete pv oud-ds-rs-pv -n oudns Note: If using blockstorage, you will see a PV and PVC for each pod. Delete all of the PVC\u0026rsquo;s and PV\u0026rsquo;s using the above commands.\n  Delete the persistent volume contents Note: The steps below are not relevant for block storage.\n  Delete the contents of the oud_user_projects directory in the persistent volume:\n$ cd \u0026lt;persistent_volume\u0026gt;/oud_user_projects $ rm -rf * For example:\n$ cd /scratch/shared/oud_user_projects $ rm -rf *   Appendix A: Configuration Parameters The following table lists the configurable parameters of the oud-ds-rs chart and their default values.\n   Parameter Description Default Value     replicaCount Number of DS+RS instances/pods/services to be created with replication enabled against a base Oracle Unified Directory instance/pod. 3   restartPolicyName restartPolicy to be configured for each POD containing Oracle Unified Directory instance OnFailure   image.repository Oracle Unified Directory Image Registry/Repository and name. Based on this, image parameter would be configured for Oracle Unified Directory pods/containers oracle/oud   image.tag Oracle Unified Directory Image Tag. Based on this, image parameter would be configured for Oracle Unified Directory pods/containers 12.2.1.4.0   image.pullPolicy policy to pull the image IfnotPresent   imagePullSecrets.name name of Secret resource containing private registry credentials regcred   nameOverride override the fullname with this name    fullnameOverride Overrides the fullname with the provided string    serviceAccount.create Specifies whether a service account should be created true   serviceAccount.name If not set and create is true, a name is generated using the fullname template oud-ds-rs-\u0026lt; fullname \u0026gt;-token-\u0026lt; randomalphanum \u0026gt;   podSecurityContext Security context policies to add to the controller pod    securityContext Security context policies to add by default    service.type type of controller service to create ClusterIP   nodeSelector node labels for pod assignment    tolerations node taints to tolerate    affinity node/pod affinities    ingress.enabled  true   ingress.type Supported value: nginx nginx   ingress.nginx.http.host Hostname to be used with Ingress Rules. If not set, hostname would be configured according to fullname. Hosts would be configured as \u0026lt; fullname \u0026gt;-http.\u0026lt; domain \u0026gt;, \u0026lt; fullname \u0026gt;-http-0.\u0026lt; domain \u0026gt;, \u0026lt; fullname \u0026gt;-http-1.\u0026lt; domain \u0026gt;, etc.    ingress.nginx.http.domain Domain name to be used with Ingress Rules. In ingress rules, hosts would be configured as \u0026lt; host \u0026gt;.\u0026lt; domain \u0026gt;, \u0026lt; host \u0026gt;-0.\u0026lt; domain \u0026gt;, \u0026lt; host \u0026gt;-1.\u0026lt; domain \u0026gt;, etc.    ingress.nginx.http.backendPort  http   ingress.nginx.http.nginxAnnotations  { ingressClassName: \u0026ldquo;nginx\u0026quot;}   ingress.nginx.admin.host Hostname to be used with Ingress Rules. If not set, hostname would be configured according to fullname. Hosts would be configured as \u0026lt; fullname \u0026gt;-admin.\u0026lt; domain \u0026gt;, \u0026lt; fullname \u0026gt;-admin-0.\u0026lt; domain \u0026gt;, \u0026lt; fullname \u0026gt;-admin-1.\u0026lt; domain \u0026gt;, etc.    ingress.nginx.admin.domain Domain name to be used with Ingress Rules. In ingress rules, hosts would be configured as \u0026lt; host \u0026gt;.\u0026lt; domain \u0026gt;, \u0026lt; host \u0026gt;-0.\u0026lt; domain \u0026gt;, \u0026lt; host \u0026gt;-1.\u0026lt; domain \u0026gt;, etc.    ingress.nginx.admin.nginxAnnotations  { ingressClassName: \u0026ldquo;nginx\u0026rdquo; nginx.ingress.kubernetes.io/backend-protocol: \u0026ldquo;https\u0026quot;}   ingress.ingress.tlsSecret Secret name to use an already created TLS Secret. If such secret is not provided, one would be created with name \u0026lt; fullname \u0026gt;-tls-cert. If the TLS Secret is in different namespace, name can be mentioned as \u0026lt; namespace \u0026gt;/\u0026lt; tlsSecretName \u0026gt;    ingress.certCN Subject\u0026rsquo;s common name (cn) for SelfSigned Cert. \u0026lt; fullname \u0026gt;   ingress.certValidityDays Validity of Self-Signed Cert in days 365   secret.enabled If enabled it will use the secret created with base64 encoding. if value is false, secret would not be used and input values (through \u0026ndash;set, \u0026ndash;values, etc.) would be used while creation of pods. true   secret.name secret name to use an already created Secret oud-ds-rs-\u0026lt; fullname \u0026gt;-creds   secret.type Specifies the type of the secret Opaque   persistence.enabled If enabled, it will use the persistent volume. if value is false, PV and PVC would not be used and pods would be using the default emptyDir mount volume. true   persistence.pvname pvname to use an already created Persistent Volume , If blank will use the default name oud-ds-rs-\u0026lt; fullname \u0026gt;-pv   persistence.pvcname pvcname to use an already created Persistent Volume Claim , If blank will use default name oud-ds-rs-\u0026lt; fullname \u0026gt;-pvc   persistence.type supported values: either filesystem or networkstorage or blockstorage or custom filesystem   persistence.filesystem.hostPath.path The path location mentioned should be created and accessible from the local host provided with necessary privileges for the user. /scratch/shared/oud_user_projects   persistence.networkstorage.nfs.path Path of NFS Share location /scratch/shared/oud_user_projects   persistence.networkstorage.nfs.server IP or hostname of NFS Server 0.0.0.0   persistence.custom.* Based on values/data, YAML content would be included in PersistenceVolume Object    persistence.accessMode Specifies the access mode of the location provided. ReadWriteMany for Filesystem/NFS, ReadWriteOnce for block storage. ReadWriteMany   persistence.size Specifies the size of the storage 10Gi   persistence.storageClassCreate if true, it will create the storageclass. if value is false, please provide existing storage class (storageClass) to be used. empty   persistence.storageClass Specifies the storageclass of the persistence volume. empty   persistence.provisioner If storageClassCreate is true, provide the custom provisioner if any . kubernetes.io/is-default-class   persistence.annotations specifies any annotations that will be used { }   configVolume.enabled If enabled, it will use the persistent volume. If value is false, PV and PVC would not be used and pods would be using the default emptyDir mount volume. true   configVolume.mountPath If enabled, it will use the persistent volume. If value is false, PV and PVC would not be used and there would not be any mount point available for config false   configVolume.pvname pvname to use an already created Persistent Volume , If blank will use the default name oud-ds-rs-\u0026lt; fullname \u0026gt;-pv-config   configVolume.pvcname pvcname to use an already created Persistent Volume Claim , If blank will use default name oud-ds-rs-\u0026lt; fullname \u0026gt;-pvc-config   configVolume.type supported values: either filesystem or networkstorage or custom filesystem   configVolume.filesystem.hostPath.path The path location mentioned should be created and accessible from the local host provided with necessary privileges for the user. /scratch/shared/oud_user_projects   configVolume.networkstorage.nfs.path Path of NFS Share location /scratch/shared/oud_config   configVolume.networkstorage.nfs.server IP or hostname of NFS Server 0.0.0.0   configVolume.custom.* Based on values/data, YAML content would be included in PersistenceVolume Object    configVolume.accessMode Specifies the access mode of the location provided ReadWriteMany   configVolume.size Specifies the size of the storage 10Gi   configVolume.storageClass Specifies the storageclass of the persistence volume. empty   configVolume.annotations Specifies any annotations that will be used { }   configVolume.storageClassCreate If true, it will create the storageclass. if value is false, provide existing storage class (storageClass) to be used. true   configVolume.provisioner If configVolume.storageClassCreate is true, please provide the custom provisioner if any. kubernetes.io/is-default-class   oudPorts.adminldaps Port on which Oracle Unified Directory Instance in the container should listen for Administration Communication over LDAPS Protocol 1444   oudPorts.adminhttps Port on which Oracle Unified Directory Instance in the container should listen for Administration Communication over HTTPS Protocol. 1888   oudPorts.ldap Port on which Oracle Unified Directory Instance in the container should listen for LDAP Communication. 1389   oudPorts.ldaps Port on which Oracle Unified Directory Instance in the container should listen for LDAPS Communication. 1636   oudPorts.http Port on which Oracle Unified Directory Instance in the container should listen for HTTP Communication. 1080   oudPorts.https Port on which Oracle Unified Directory Instance in the container should listen for HTTPS Communication. 1081   oudPorts.replication Port value to be used while setting up replication server. 1898   oudConfig.baseDN BaseDN for Oracle Unified Directory Instances dc=example,dc=com   oudConfig.rootUserDN Root User DN for Oracle Unified Directory Instances cn=Directory Manager   oudConfig.rootUserPassword Password for Root User DN RandomAlphanum   oudConfig.sampleData To specify that the database should be populated with the specified number of sample entries. 0   oudConfig.sleepBeforeConfig Based on the value for this parameter, initialization/configuration of each Oracle Unified Directory replica would be delayed. 120   oudConfig.adminUID AdminUID to be configured with each replicated Oracle Unified Directory instance admin   oudConfig.adminPassword Password for AdminUID. If the value is not passed, value of rootUserPassword would be used as password for AdminUID. rootUserPassword   baseOUD.envVarsConfigMap Reference to ConfigMap which can contain additional environment variables to be passed on to POD for Base Oracle Unified Directory Instance. Following are the environment variables which would not be honored from the ConfigMap. instanceType, sleepBeforeConfig, OUD_INSTANCE_NAME, hostname, baseDN, rootUserDN, rootUserPassword, adminConnectorPort, httpAdminConnectorPort, ldapPort, ldapsPort, httpPort, httpsPort, replicationPort, sampleData. -   baseOUD.envVars Environment variables in Yaml Map format. This is helpful when its requried to pass environment variables through \u0026ndash;values file. List of env variables which would not be honored from envVars map is same as list of env var names mentioned for envVarsConfigMap. For a full list of environment variables, see Appendix B: Environment Variables. -   replOUD.envVarsConfigMap Reference to ConfigMap which can contain additional environment variables to be passed on to PODs for Replicated Oracle Unified Directory Instances. Following are the environment variables which would not be honored from the ConfigMap. instanceType, sleepBeforeConfig, OUD_INSTANCE_NAME, hostname, baseDN, rootUserDN, rootUserPassword, adminConnectorPort, httpAdminConnectorPort, ldapPort, ldapsPort, httpPort, httpsPort, replicationPort, sampleData, sourceHost, sourceServerPorts, sourceAdminConnectorPort, sourceReplicationPort, dsreplication_1, dsreplication_2, dsreplication_3, dsreplication_4, post_dsreplication_dsconfig_1, post_dsreplication_dsconfig_2 -   replOUD.envVars Environment variables in Yaml Map format. This is helpful when its required to pass environment variables through \u0026ndash;values file. List of env variables which would not be honored from envVars map is same as list of env var names mentioned for envVarsConfigMap. For a full list of environment variables, see Appendix B: Environment Variables. -   podManagementPolicy Defines the policy for pod management within the statefulset. Typical values are OrderedReady/Parallel OrderedReady   updateStrategy Allows you to configure and disable automated rolling updates for containers, labels, resource request/limits, and annotations for the Pods in a StatefulSet. Typical values are OnDelete/RollingUpdate RollingUpdate   busybox.image busy box image name. Used for initcontainers busybox   oudConfig.cleanupbeforeStart Used to remove the individual pod directories during restart. Recommended value is false. Note: Do not change the default value (false) as it will delete the existing data and clone it from base pod again. false   oudConfig.disablereplicationbeforeStop This parameter is used to disable replication when a pod is restarted. Recommended value is false. Note Do not change the default value (false), as changing the value will result in an issue where the pod won\u0026rsquo;t join the replication topology after a restart. false   oudConfig.resources.requests.memory This parameter is used to set the memory request for the OUD pod 4Gi   oudConfig.resources.requests.cpu This parameter is used to set the cpu request for the OUD pod 0.5   oudConfig.resources.limits.memory This parameter is used to set the memory limit for the OUD pod 4Gi   oudConfig.resources.limits.cpu This parameter is used to set the cpu limit for the OUD pod 1   replOUD.groupId Group ID to be used/configured with each Oracle Unified Directory instance in replicated topology. 1   service.lbrtype Type of load balancer Service to be created for admin, http,ldap services. Values allowed: ClusterIP/NodePort ClusterIP   oudPorts.nodePorts.adminldaps Public port on which the OUD instance in the container should listen for administration communication over LDAPS Protocol. The port number should be between 30000-32767. No duplicate values are allowed. Note: Set only if service.lbrtype is set as NodePort. If left blank then k8s will assign random ports in between 30000 and 32767.    oudPorts.nodePorts.adminhttps Public port on which the OUD instance in the container should listen for administration communication over HTTPS Protocol. The port number should be between 30000-32767. No duplicate values are allowed. Note: Set only if service.lbrtype is set as NodePort. If left blank then k8s will assign random ports in between 30000 and 32767.    oudPorts.nodePorts.ldap Public port on which the OUD instance in the container should listen for LDAP communication. The port number should be between 30000-32767. No duplicate values are allowed. Note: Set only if service.lbrtype is set as NodePort. If left blank then k8s will assign random ports in between 30000 and 32767.    oudPorts.nodePorts.ldaps Public port on which the OUD instance in the container should listen for LDAPS communication. The port number should be between 30000-32767. No duplicate values are allowed. Note: Set only if service.lbrtype is set as NodePort. If left blank then k8s will assign random ports in between 30000 and 32767.    oudPorts.nodePorts.http Public port on which the OUD instance in the container should listen for HTTP communication. The port number should be between 30000-32767. No duplicate values are allowed. Note: Set only if service.lbrtype is set as NodePort. If left blank then k8s will assign random ports in between 30000 and 32767.    oudPorts.nodePorts.https Public port on which the OUD instance in the container should listen for HTTPS communication. The port number should be between 30000-32767. No duplicate values are allowed. Note: Set only if service.lbrtype is set as NodePort. If left blank then k8s will assign random ports in between 30000 and 32767.    oudConfig.integration Specifies which Oracle components the server can be integrated with. It is recommended to choose the option covering your minimal requirements. Allowed values: no-integration (no integration), basic (Directory Integration Platform), generic (Directory Integration Platform, Database Net Services and E-Business Suite integration), eus (Directory Integration Platform, Database Net Services, E-Business Suite and Enterprise User Security integration) no-integration   elk.logStashImage The version of logstash you want to install logstash:8.3.1   elk.sslenabled If SSL is enabled for ELK set the value to true, or if NON-SSL set to false. This value must be lowercase TRUE   elk.eshosts The URL for sending logs to Elasticsearch. HTTP if NON-SSL is used https://elasticsearch.example.com:9200   elk.esuser The name of the user for logstash to access Elasticsearch logstash_internal   elk.espassword The password for ELK_USER password   elk.esapikey The API key details apikey   elk.esindex The log name oudlogs-00001   elk.imagePullSecrets secret to be used for pulling logstash image dockercred    Appendix B: Environment Variables    Environment Variable Description Default Value     ldapPort Port on which the Oracle Unified Directory instance in the container should listen for LDAP communication. Use \u0026lsquo;disabled\u0026rsquo; if you do not want to enable it. 1389   ldapsPort Port on which the Oracle Unified Directory instance in the container should listen for LDAPS communication. Use \u0026lsquo;disabled\u0026rsquo; if you do not want to enable it. 1636   rootUserDN DN for the Oracle Unified Directory instance root user. \u0026mdash;\u0026mdash;   rootUserPassword Password for the Oracle Unified Directory instance root user. \u0026mdash;\u0026mdash;   adminConnectorPort Port on which the Oracle Unified Directory instance in the container should listen for administration communication over LDAPS. Use \u0026lsquo;disabled\u0026rsquo; if you do not want to enable it. Note that at least one of the LDAP or the HTTP administration ports must be enabled. 1444   httpAdminConnectorPort Port on which the Oracle Unified Directory Instance in the container should listen for Administration Communication over HTTPS Protocol. Use \u0026lsquo;disabled\u0026rsquo; if you do not want to enable it. Note that at least one of the LDAP or the HTTP administration ports must be enabled. 1888   httpPort Port on which the Oracle Unified Directory Instance in the container should listen for HTTP Communication. Use \u0026lsquo;disabled\u0026rsquo; if you do not want to enable it. 1080   httpsPort Port on which the Oracle Unified Directory Instance in the container should listen for HTTPS Communication. Use \u0026lsquo;disabled\u0026rsquo; if you do not want to enable it. 1081   sampleData Specifies the number of sample entries to populate the Oracle Unified Directory instance with on creation. If this parameter has a non-numeric value, the parameter addBaseEntry is added to the command instead of sampleData. Similarly, when the ldifFile_n parameter is specified sampleData will not be considered and ldifFile entries will be populated. 0   adminUID User ID of the Global Administrator to use to bind to the server. This parameter is primarily used with the dsreplication command. \u0026mdash;\u0026mdash;   adminPassword Password for adminUID \u0026mdash;\u0026mdash;   bindDN1 BindDN to be used while setting up replication using dsreplication to connect to First Directory/Replication Instance. \u0026mdash;\u0026mdash;   bindPassword1 Password for bindDN1 \u0026mdash;\u0026mdash;   bindDN2 BindDN to be used while setting up replication using dsreplication to connect to Second Directory/Replication Instance. \u0026mdash;\u0026mdash;   bindPassword2 Password for bindDN2 \u0026mdash;\u0026mdash;   replicationPort Port value to be used while setting up a replication server. This variable is used to substitute values in dsreplication parameters. 1898   sourceHost Value for the hostname to be used while setting up a replication server. This variable is used to substitute values in dsreplication parameters. \u0026mdash;\u0026mdash;   initializeFromHost Value for the hostname to be used while initializing data on a new Oracle Unified Directory instance replicated from an existing instance. This variable is used to substitute values in dsreplication parameters. It is possible to have a different value for sourceHost and initializeFromHost while setting up replication with Replication Server, sourceHost can be used for the Replication Server and initializeFromHost can be used for an existing Directory instance from which data will be initialized. $sourceHost   serverTuning Values to be used to tune JVM settings. The default value is jvm-default. If specific tuning parameters are required, they can be added using this variable. jvm-default   offlineToolsTuning Values to be used to specify the tuning for offline tools. This variable if not specified will consider jvm-default as the default or specify the complete set of values with options if wanted to set to specific tuning jvm-default   generateSelfSignedCertificate Set to \u0026ldquo;true\u0026rdquo; if the requirement is to generate a self signed certificate when creating an Oracle Unified Directory instance. If no value is provided this value takes the default, \u0026ldquo;true\u0026rdquo;. If using a certificate generated separately this value should be set to \u0026ldquo;false\u0026rdquo;. true   usePkcs11Keystore Use a certificate in a PKCS#11 token that the replication gateway will use as servercertificate when accepting encrypted connections from the Oracle Directory Server Enterprise Edition server. Set to \u0026ldquo;true\u0026rdquo; if the requirement is to use the usePkcs11Keystore parameter when creating an Oracle Unified Directory instance. By default this parameter is not set. To use this option generateSelfSignedCertificate should be set to \u0026ldquo;false\u0026rdquo;. \u0026mdash;\u0026mdash;   enableStartTLS Enable StartTLS to allow secure communication with the directory server by using the LDAP port. By default this parameter is not set. To use this option generateSelfSignedCertificate should be set to \u0026ldquo;false\u0026rdquo;. \u0026mdash;\u0026mdash;   useJCEKS Specifies the path of a JCEKS that contains a certificate that the replication gateway will use as server certificate when accepting encrypted connections from the Oracle Directory Server Enterprise Edition server. If required this should specify the keyStorePath, for example, /u01/oracle/config/keystore. \u0026mdash;\u0026mdash;   useJavaKeystore Specify the path to the Java Keystore (JKS) that contains the server certificate. If required this should specify the path to the JKS, for example, /u01/oracle/config/keystore. By default this parameter is not set. To use this option generateSelfSignedCertificate should be set to \u0026ldquo;false\u0026rdquo;. \u0026mdash;\u0026mdash;   usePkcs12keyStore Specify the path to the PKCS#12 keystore that contains the server certificate. If required this should specify the path, for example, /u01/oracle/config/keystore.p12. By default this parameter is not set. \u0026mdash;\u0026mdash;   keyStorePasswordFile Use the password in the specified file to access the certificate keystore. A password is required when you specify an existing certificate (JKS, JCEKS, PKCS#11, orPKCS#12) as a server certificate. If required this should specify the path of the password file, for example, /u01/oracle/config/keystorepassword.txt. By default this parameter is not set. \u0026mdash;\u0026mdash;   eusPasswordScheme Set password storage scheme, if configuring Oracle Unified Directory for Enterprise User Security. Set this to a value of either \u0026ldquo;sha1\u0026rdquo; or \u0026ldquo;sha2\u0026rdquo;. By default this parameter is not set. \u0026mdash;\u0026mdash;   jmxPort Port on which the Directory Server should listen for JMX communication. Use \u0026lsquo;disabled\u0026rsquo; if you do not want to enable it. disabled   javaSecurityFile Specify the path to the Java security file. If required this should specify the path, for example, /u01/oracle/config/new_security_file. By default this parameter is not set. \u0026mdash;\u0026mdash;   schemaConfigFile_n \u0026lsquo;n\u0026rsquo; in the variable name represents a numeric value between 1 and 50. This variable is used to set the full path of LDIF files that need to be passed to the Oracle Unified Directory instance for schema configuration/extension. If required this should specify the path, for example, schemaConfigFile_1=/u01/oracle/config/00_test.ldif. \u0026mdash;\u0026mdash;   ldifFile_n \u0026lsquo;n\u0026rsquo; in the variable name represents a numeric value between 1 and 50. This variable is used to set the full path of LDIF files that need to be passed to the Oracle Unified Directory instance for initial data population. If required this should specify the path, for example, ldifFile_1=/u01/oracle/config/test1.ldif. \u0026mdash;\u0026mdash;   dsconfigBatchFile_n \u0026lsquo;n\u0026rsquo; in the variable name represents a numeric value between 1 and 50. This variable is used to set the full path of LDIF files that need to be passed to the Oracle Unified Directory instance for batch processing by the dsconfig command. If required this should specify the path, for example, dsconfigBatchFile_1=/u01/oracle/config/dsconfig_1.txt. When executing the dsconfig command the following values are added implicitly to the arguments contained in the batch file : ${hostname}, ${adminConnectorPort}, ${bindDN} and ${bindPasswordFile} \u0026mdash;\u0026mdash;   dstune_n \u0026lsquo;n\u0026rsquo; in the variable name represents a numeric value between 1 and 50. Allows commands and options to be passed to the dstune utility as a full command. \u0026mdash;\u0026mdash;   dsconfig_n \u0026lsquo;n\u0026rsquo; in the variable name represents a numeric value between 1 and 300. Each file represents a set of execution parameters for the dsconfig command. For each dsconfig execution, the following variables are added implicitly : ${hostname}, ${adminConnectorPort}, ${bindDN}, ${bindPasswordFile}. \u0026mdash;\u0026mdash;   dsreplication_n \u0026lsquo;n\u0026rsquo; in the variable name represents a numeric value between 1 and 50. Each file represents a set of execution parameters for the dsreplication command. For each dsreplication execution, the following variables are added implicitly : ${hostname}, ${ldapPort}, ${ldapsPort}, ${adminConnectorPort}, ${replicationPort}, ${sourceHost}, ${initializeFromHost}, and ${baseDN}. Depending on the dsreplication sub-command, the following variables are added implicitly : ${bindDN1}, ${bindPasswordFile1}, ${bindDN2}, ${bindPasswordFile2}, ${adminUID}, and ${adminPasswordFile}. \u0026mdash;\u0026mdash;   post_dsreplication_dsconfig_n \u0026lsquo;n\u0026rsquo; in the variable name represents a numeric value between 1 and 300. Each file represents a set of execution parameters for the dsconfig command to be run following execution of the dsreplication command. For each dsconfig execution, the following variables/values are added implicitly : \u0026ndash;provider-name \u0026ldquo;Multimaster Synchronization\u0026rdquo;, ${hostname}, ${adminConnectorPort}, ${bindDN}, ${bindPasswordFile}. \u0026mdash;\u0026mdash;   rebuildIndex_n \u0026lsquo;n\u0026rsquo; in the variable name represents a numeric value between 1 and 50. Each file represents a set of execution parameters for the rebuild-index command. For each rebuild-index execution, the following variables are added implicitly : ${hostname}, ${adminConnectorPort}, ${bindDN}, ${bindPasswordFile}, and ${baseDN}. \u0026mdash;\u0026mdash;   manageSuffix_n \u0026lsquo;n\u0026rsquo; in the variable name represents a numeric value between 1 and 50. Each file represents a set of execution parameters for the manage-suffix command. For each manage-suffix execution, the following variables are added implicitly : ${hostname}, ${adminConnectorPort}, ${bindDN}, ${bindPasswordFile}. \u0026mdash;\u0026mdash;   importLdif_n \u0026lsquo;n\u0026rsquo; in the variable name represents a numeric value between 1 and 50. Each file represents a set of execution parameters for the import-ldif command. For each import-ldif execution, the following variables are added implicitly : ${hostname}, ${adminConnectorPort}, ${bindDN}, ${bindPasswordFile}. \u0026mdash;\u0026mdash;   execCmd_n \u0026lsquo;n\u0026rsquo; in the variable name represents a numeric value between 1 and 300. Each file represents a command to be executed in the container. For each command execution, the following variables are replaced, if present in the command : ${hostname}, ${ldapPort}, ${ldapsPort}, ${adminConnectorPort}. \u0026mdash;\u0026mdash;   restartAfterRebuildIndex Specifies whether to restart the server after building the index. false   restartAfterSchemaConfig Specifies whether to restart the server after configuring the schema. false    Note For the following parameters above, the following statement applies:\n dsconfig_n dsreplication_n post_dsreplication_dsconfig_n rebuildIndex_n manageSuffix_n importLdif_n execCmd_n  If values are provided the following variables will be substituted with their values: ${hostname},${ldapPort},${ldapsPort},${adminConnectorPort},${replicationPort},${sourceHost},${initializeFromHost},${sourceAdminConnectorPort},${sourceReplicationPort},${baseDN},${rootUserDN},${adminUID},${rootPwdFile},${bindPasswordFile},${adminPwdFile},${bindPwdFile1},${bindPwdFile2}\n"
},
{
	"uri": "/fmw-kubernetes/idm-products/oudsm/create-oudsm-instances/",
	"title": "Create Oracle Unified Directory Services Manager Instances",
	"tags": [],
	"description": "This document provides details of the oudsm Helm chart.",
	"content": " Introduction Create a Kubernetes namespace Create a Kubernetes secret for the container registry Create a persistent volume directory The oudsm Helm chart Create OUDSM instances Helm command output Verify the OUDSM deployment Undeploy an OUDSM deployment Appendix: Configuration parameters  Introduction This chapter demonstrates how to deploy Oracle Unified Directory Services Manager (OUDSM) 12c instance(s) using the Helm package manager for Kubernetes.\nBased on the configuration, this chart deploys the following objects in the specified namespace of a Kubernetes cluster.\n Service Account Secret Persistent Volume and Persistent Volume Claim Pod(s)/Container(s) for Oracle Unified Directory Services Manager Instances Services for interfaces exposed through Oracle Unified Directory Services Manager Instances Ingress configuration  Create a Kubernetes namespace Create a Kubernetes namespace for the OUDSM deployment by running the following command:\n$ kubectl create namespace \u0026lt;namespace\u0026gt; For example:\n$ kubectl create namespace oudsmns The output will look similar to the following:\nnamespace/oudsmns created Create a Kubernetes secret for the container registry Create a Kubernetes secret that stores the credentials for the container registry where the OUDSM image is stored. This step must be followed if using Oracle Container Registry or your own private container registry. If you are not using a container registry and have loaded the images on each of the master and worker nodes, you can skip this step.\n  Run the following command to create the secret:\nkubectl create secret docker-registry \u0026#34;orclcred\u0026#34; --docker-server=\u0026lt;CONTAINER_REGISTRY\u0026gt; \\ --docker-username=\u0026#34;\u0026lt;USER_NAME\u0026gt;\u0026#34; \\ --docker-password=\u0026lt;PASSWORD\u0026gt; --docker-email=\u0026lt;EMAIL_ID\u0026gt; \\ --namespace=\u0026lt;domain_namespace\u0026gt; For example, if using Oracle Container Registry:\nkubectl create secret docker-registry \u0026#34;orclcred\u0026#34; --docker-server=container-registry.oracle.com \\ --docker-username=\u0026#34;user@example.com\u0026#34; \\ --docker-password=password --docker-email=user@example.com \\ --namespace=oudsmns Replace \u0026lt;USER_NAME\u0026gt; and \u0026lt;PASSWORD\u0026gt; with the credentials for the registry with the following caveats:\n  If using Oracle Container Registry to pull the OUDSM container image, this is the username and password used to login to Oracle Container Registry. Before you can use this image you must login to Oracle Container Registry, navigate to Middleware \u0026gt; oudsm_cpu and accept the license agreement.\n  If using your own container registry to store the OUDSM container image, this is the username and password (or token) for your container registry.\n  The output will look similar to the following:\nsecret/orclcred created   Create a persistent volume directory As referenced in Prerequisites the nodes in the Kubernetes cluster must have access to a persistent volume such as a Network File System (NFS) mount or a shared file system.\nIn this example /scratch/shared/ is a shared directory accessible from all nodes.\n  On the master node run the following command to create a user_projects directory:\n$ cd \u0026lt;persistent_volume\u0026gt; $ mkdir oudsm_user_projects $ sudo chown -R 1000:0 oudsm_user_projects For example:\n$ cd /scratch/shared $ mkdir oudsm_user_projects $ sudo chown -R 1000:0 oudsm_user_projects   On the master node run the following to ensure it is possible to read and write to the persistent volume:\n$ cd \u0026lt;persistent_volume\u0026gt;/oudsm_user_projects $ touch file.txt $ ls filemaster.txt For example:\n$ cd /scratch/shared/oudsm_user_projects $ touch filemaster.txt $ ls filemaster.txt On the first worker node run the following to ensure it is possible to read and write to the persistent volume:\n$ cd /scratch/shared/oudsm_user_projects $ ls filemaster.txt $ touch fileworker1.txt $ ls fileworker1.txt Repeat the above for any other worker nodes e.g fileworker2.txt etc. Once proven that it\u0026rsquo;s possible to read and write from each node to the persistent volume, delete the files created.\n  The oudsm Helm chart The oudsm Helm chart allows you to create or deploy Oracle Unified Directory Services Manager instances along with Kubernetes objects in a specified namespace.\nThe deployment can be initiated by running the following Helm command with reference to the oudsm Helm chart, along with configuration parameters according to your environment.\ncd $WORKDIR/kubernetes/helm $ helm install --namespace \u0026lt;namespace\u0026gt; \\ \u0026lt;Configuration Parameters\u0026gt; \\ \u0026lt;deployment/release name\u0026gt; \\ \u0026lt;Helm Chart Path/Name\u0026gt; Configuration Parameters (override values in chart) can be passed on with --set arguments on the command line and/or with -f / --values arguments when referring to files.\nNote: The examples in Create OUDSM instances below provide values which allow the user to override the default values provided by the Helm chart. A full list of configuration parameters and their default values is shown in Appendix: Configuration parameters.\nFor more details about the helm command and parameters, please execute helm --help and helm install --help.\nCreate OUDSM instances You can create OUDSM instances using one of the following methods:\n Using a YAML file Using --set argument  Using a YAML file   Navigate to the $WORKDIR/kubernetes/helm directory:\n$ cd $WORKDIR/kubernetes/helm   Create an oudsm-values-override.yaml as follows:\nimage: repository: \u0026lt;image_location\u0026gt; tag: \u0026lt;image_tag\u0026gt; pullPolicy: IfNotPresent imagePullSecrets: - name: orclcred oudsm: adminUser: weblogic adminPass: \u0026lt;password\u0026gt; persistence: type: filesystem filesystem: hostPath: path: \u0026lt;persistent_volume\u0026gt;/oudsm_user_projects For example:\nimage: repository: container-registry.oracle.com/middleware/oudsm_cpu tag: 12.2.1.4-jdk8-ol8-\u0026lt;January\u0026#39;25\u0026gt; pullPolicy: IfNotPresent imagePullSecrets: - name: orclcred oudsm: adminUser: weblogic adminPass: \u0026lt;password\u0026gt; persistence: type: filesystem filesystem: hostPath: path: /scratch/shared/oudsm_user_projects The following caveats exist:\n  Replace \u0026lt;password\u0026gt; with a the relevant passwords.\n  If you are not using Oracle Container Registry or your own container registry for your OUD container image, then you can remove the following:\nimagePullSecrets: - name: orclcred   If using NFS for your persistent volume the change the persistence section as follows:\n  persistence: type: networkstorage networkstorage: nfs: path: \u0026lt;persistent_volume\u0026gt;/oudsm_user_projects server: \u0026lt;NFS IP address\u0026gt;   Run the following command to deploy OUDSM:\n$ helm install --namespace \u0026lt;namespace\u0026gt; \\ --values oudsm-values-override.yaml \\ \u0026lt;release_name\u0026gt; oudsm $ helm install --namespace oudsmns \\ --values oudsm-values-override.yaml \\ oudsm oudsm   Check the OUDSM deployment as per Verify the OUDSM deployment\n  Using --set argument   Navigate to the $WORKDIR/kubernetes/helm directory:\n$ cd $WORKDIR/kubernetes/helm   Run the following command to create OUDSM instance:\n$ helm install --namespace oudsmns \\ --set oudsm.adminUser=weblogic,oudsm.adminPass=\u0026lt;password\u0026gt;,persistence.filesystem.hostPath.path=\u0026lt;persistent_volume\u0026gt;/oudsm_user_projects,image.repository=\u0026lt;image_location\u0026gt;,image.tag=\u0026lt;image_tag\u0026gt; \\ --set imagePullSecrets[0].name=\u0026#34;orclcred\u0026#34; \\ \u0026lt;release_name\u0026gt; oudsm For example:\n$ helm install --namespace oudsmns \\ --set oudsm.adminUser=weblogic,oudsm.adminPass=\u0026lt;password\u0026gt;,persistence.filesystem.hostPath.path=/scratch/shared/oudsm_user_projects,image.repository=container-registry.oracle.com/middleware/oudsm_cpu,image.tag=12.2.1.4-jdk8-ol8-\u0026lt;January\u0026#39;25\u0026gt; \\ --set imagePullSecrets[0].name=\u0026#34;orclcred\u0026#34; \\ oudsm oudsm The following caveats exist:\n Replace \u0026lt;password\u0026gt; with a the relevant password. If you are not using Oracle Container Registry or your own container registry for your OUDSM container image, then you can remove the following: --set imagePullSecrets[0].name=\u0026quot;orclcred\u0026quot; If using using NFS for your persistent volume then use persistence.networkstorage.nfs.path=\u0026lt;persistent_volume\u0026gt;/oudsm_user_projects,persistence.networkstorage.nfs.server:\u0026lt;NFS IP address\u0026gt;.    Check the OUDSM deployment as per Verify the OUDSM deployment\n  Helm command output In all the examples above, the following output is shown following a successful execution of the helm install command.\nNAME: oudsm LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oudsmns STATUS: deployed REVISION: 1 TEST SUITE: None Verify the OUDSM deployment Run the following command to verify the OUDSM deployment:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; get pod,service,secret,pv,pvc,ingress -o wide For example:\n$ kubectl --namespace oudsmns get pod,service,secret,pv,pvc,ingress -o wide The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oudsm-1 1/1 Running 0 73m 10.244.0.19 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service/oudsm-1 ClusterIP 10.96.108.200 \u0026lt;none\u0026gt; 7001/TCP,7002/TCP 73m app.kubernetes.io/instance=oudsm,app.kubernetes.io/name=oudsm,oudsm/instance=oudsm-1 service/oudsm-lbr ClusterIP 10.96.41.201 \u0026lt;none\u0026gt; 7001/TCP,7002/TCP 73m app.kubernetes.io/instance=oudsm,app.kubernetes.io/name=oudsm NAME TYPE DATA AGE secret/orclcred kubernetes.io/dockerconfigjson 1 3h13m secret/oudsm-creds opaque 2 73m secret/oudsm-token-ksr4g kubernetes.io/service-account-token 3 73m secret/sh.helm.release.v1.oudsm.v1 helm.sh/release.v1 1 73m NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE VOLUMEMODE persistentvolume/oudsm-pv 30Gi RWX Retain Bound myoudsmns/oudsm-pvc manual 73m Filesystem NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE VOLUMEMODE persistentvolumeclaim/oudsm-pvc Bound oudsm-pv 30Gi RWX manual 73m Filesystem NAME HOSTS ADDRESS PORTS AGE ingress.extensions/oudsm-ingress-nginx oudsm-1,oudsm-2,oudsm + 1 more... 100.102.51.230 80 73m Note: It will take several minutes before all the services listed above show. While the oudsm pods have a STATUS of 0/1 the pod is started but the OUDSM server associated with it is currently starting. While the pod is starting you can check the startup status in the pod logs, by running the following command:\n$ kubectl logs oudsm-1 -n oudsmns Note : If the OUDSM deployment fails additionally refer to Troubleshooting for instructions on how describe the failing pod(s). Once the problem is identified follow Undeploy an OUDSM deployment to clean down the deployment before deploying again.\nKubernetes Objects Kubernetes objects created by the Helm chart are detailed in the table below:\n   Type Name Example Name Purpose     Service Account \u0026lt;deployment/release name\u0026gt; oudsm Kubernetes Service Account for the Helm Chart deployment   Secret \u0026lt;deployment/release name\u0026gt;-creds oudsm-creds Secret object for Oracle Unified Directory Services Manager related critical values like passwords   Persistent Volume \u0026lt;deployment/release name\u0026gt;-pv oudsm-pv Persistent Volume for user_projects mount.   Persistent Volume Claim \u0026lt;deployment/release name\u0026gt;-pvc oudsm-pvc Persistent Volume Claim for user_projects mount.   Pod \u0026lt;deployment/release name\u0026gt;-N oudsm-1, oudsm-2, \u0026hellip; Pod(s)/Container(s) for Oracle Unified Directory Services Manager Instances   Service \u0026lt;deployment/release name\u0026gt;-N oudsm-1, oudsm-2, \u0026hellip; Service(s) for HTTP and HTTPS interfaces from Oracle Unified Directory Services Manager instance \u0026lt;deployment/release name\u0026gt;-N   Ingress \u0026lt;deployment/release name\u0026gt;-ingress-nginx oudsm-ingress-nginx Ingress Rules for HTTP and HTTPS interfaces.     In the table above, the Example Name for each Object is based on the value \u0026lsquo;oudsm\u0026rsquo; as the deployment/release name for the Helm chart installation.  Ingress Configuration With an OUDSM instance now deployed you are now ready to configure an ingress controller to direct traffic to OUDSM as per Configure an ingress for an OUDSM.\nUndeploy an OUDSM deployment Delete the OUDSM deployment   Find the deployment release name:\n$ helm --namespace \u0026lt;namespace\u0026gt; list For example:\n$ helm --namespace oudsmns list The output will look similar to the following:\nNAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION oudsm oudsmns 2 \u0026lt;DATE\u0026gt; deployed oudsm-0.1 12.2.1.4.0   Delete the deployment using the following command:\n$ helm uninstall --namespace \u0026lt;namespace\u0026gt; \u0026lt;release\u0026gt; For example:\n$ helm uninstall --namespace oudsmns oudsm release \u0026#34;oudsm\u0026#34; uninstalled   Delete the persistent volume contents   Delete the contents of the oudsm_user_projects directory in the persistent volume:\n$ cd \u0026lt;persistent_volume\u0026gt;/oudsm_user_projects $ rm -rf * For example:\n$ cd /scratch/shared/oudsm_user_projects $ rm -rf *   Appendix: Configuration Parameters The following table lists the configurable parameters of the \u0026lsquo;oudsm\u0026rsquo; chart and their default values.\n   Parameter Description Default Value     replicaCount Number of Oracle Unified Directory Services Manager instances/pods/services to be created 1   restartPolicyName restartPolicy to be configured for each POD containing Oracle Unified Directory Services Manager instance OnFailure   image.repository Oracle Unified Directory Services Manager Image Registry/Repository and name. Based on this, image parameter would be configured for Oracle Unified Directory Services Manager pods/containers oracle/oudsm   image.tag Oracle Unified Directory Services Manager Image Tag. Based on this, image parameter would be configured for Oracle Unified Directory Services Manager pods/containers 12.2.1.4.0   image.pullPolicy policy to pull the image IfnotPresent   imagePullSecrets.name name of Secret resource containing private registry credentials regcred   nameOverride override the fullname with this name    fullnameOverride Overrides the fullname with the provided string    serviceAccount.create Specifies whether a service account should be created true   serviceAccount.name If not set and create is true, a name is generated using the fullname template oudsm-\u0026lt; fullname \u0026gt;-token-\u0026lt; randomalphanum \u0026gt;   podSecurityContext Security context policies to add to the controller pod    securityContext Security context policies to add by default    service.type type of controller service to create ClusterIP   nodeSelector node labels for pod assignment    tolerations node taints to tolerate    affinity node/pod affinities    ingress.enabled  true   ingress.type Supported value: nginx nginx   ingress.host Hostname to be used with Ingress Rules. If not set, hostname would be configured according to fullname. Hosts would be configured as \u0026lt; fullname \u0026gt;-http.\u0026lt; domain \u0026gt;, \u0026lt; fullname \u0026gt;-http-0.\u0026lt; domain \u0026gt;, \u0026lt; fullname \u0026gt;-http-1.\u0026lt; domain \u0026gt;, etc.    ingress.domain Domain name to be used with Ingress Rules. In ingress rules, hosts would be configured as \u0026lt; host \u0026gt;.\u0026lt; domain \u0026gt;, \u0026lt; host \u0026gt;-0.\u0026lt; domain \u0026gt;, \u0026lt; host \u0026gt;-1.\u0026lt; domain \u0026gt;, etc.    ingress.backendPort  http   ingress.nginxAnnotations  { kubernetes.io/ingress.class: \u0026ldquo;nginx\u0026quot;nginx.ingress.kubernetes.io/affinity-mode: \u0026ldquo;persistent\u0026rdquo; nginx.ingress.kubernetes.io/affinity: \u0026ldquo;cookie\u0026rdquo; }   ingress.ingress.tlsSecret Secret name to use an already created TLS Secret. If such secret is not provided, one would be created with name \u0026lt; fullname \u0026gt;-tls-cert. If the TLS Secret is in different namespace, name can be mentioned as \u0026lt; namespace \u0026gt;/\u0026lt; tlsSecretName \u0026gt;    ingress.certCN Subject\u0026rsquo;s common name (cn) for SelfSigned Cert. \u0026lt; fullname \u0026gt;   ingress.certValidityDays Validity of Self-Signed Cert in days 365   secret.enabled If enabled it will use the secret created with base64 encoding. if value is false, secret would not be used and input values (through \u0026ndash;set, \u0026ndash;values, etc.) would be used while creation of pods. true   secret.name secret name to use an already created Secret oudsm-\u0026lt; fullname \u0026gt;-creds   secret.type Specifies the type of the secret Opaque   persistence.enabled If enabled, it will use the persistent volume. if value is false, PV and PVC would not be used and pods would be using the default emptyDir mount volume. true   persistence.pvname pvname to use an already created Persistent Volume , If blank will use the default name oudsm-\u0026lt; fullname \u0026gt;-pv   persistence.pvcname pvcname to use an already created Persistent Volume Claim , If blank will use default name oudsm-\u0026lt; fullname \u0026gt;-pvc   persistence.type supported values: either filesystem or networkstorage or custom filesystem   persistence.filesystem.hostPath.path The path location mentioned should be created and accessible from the local host provided with necessary privileges for the user. /scratch/shared/oudsm_user_projects   persistence.networkstorage.nfs.path Path of NFS Share location /scratch/shared/oudsm_user_projects   persistence.networkstorage.nfs.server IP or hostname of NFS Server 0.0.0.0   persistence.custom.* Based on values/data, YAML content would be included in PersistenceVolume Object    persistence.accessMode Specifies the access mode of the location provided ReadWriteMany   persistence.size Specifies the size of the storage 10Gi   persistence.storageClass Specifies the storageclass of the persistence volume. empty   persistence.annotations specifies any annotations that will be used { }   oudsm.adminUser Weblogic Administration User weblogic   oudsm.adminPass Password for Weblogic Administration User    oudsm.startupTime Expected startup time. After specified seconds readinessProbe would start 900   oudsm.livenessProbeInitialDelay Paramter to decide livenessProbe initialDelaySeconds 1200   elk.logStashImage The version of logstash you want to install logstash:8.3.1   elk.sslenabled If SSL is enabled for ELK set the value to true, or if NON-SSL set to false. This value must be lowercase TRUE   elk.eshosts The URL for sending logs to Elasticsearch. HTTP if NON-SSL is used https://elasticsearch.example.com:9200   elk.esuser The name of the user for logstash to access Elasticsearch logstash_internal   elk.espassword The password for ELK_USER password   elk.esapikey The API key details apikey   elk.esindex The log name oudsmlogs-00001   elk.imagePullSecrets secret to be used for pulling logstash image dockercred    "
},
{
	"uri": "/fmw-kubernetes/ohs/create-ohs-container/",
	"title": "Create the OHS Container and Nodeport",
	"tags": [],
	"description": "Deploying the OHS Container and Nodeport",
	"content": "  Introduction\n  Create the OHS Nodeport\n  Create the OHS Container\n  Validating the OHS Container\na. Validating the OHS container file system\nb. Validating the OHS nodeport\n  Introduction This section demonstrates how to create the OHS container and OHS nodeport.\nThe OHS nodeport is the Kubernetes entry port (HTTP/HTTPS) for OHS , for example 31777 (HTTP) and 31443 (HTTPS).\nCreate the OHS Nodeport In this section you create the OHS nodeport using the $MYOHSFILES/ohs_service.yaml.\nThe nodeport is the entry point for OHS. For example http://ohs.example.com:31777 or https://ohs.example.com:31443\n  Edit the $MYOHSFILES/ohs_service.yaml and make the following changes:\n \u0026lt;NAMESPACE\u0026gt; to your namespace, for example ohsns. If you want your OHS node port to listen on something other that 31777 and 31443, change accordingly If you are using your own httpd.conf file and have changed the port to anything other than 7777, you must change the targetPort and port to match. If you are using your own ssl.conf file and have changed the port to anything other than 4443, you must change the targetPort and port to match.  kind: Service apiVersion: v1 metadata: name: ohs-domain-nodeport namespace: ohsns spec: selector: oracle: ohs type: NodePort ports: - port: 7777 name: http targetPort: 7777 nodePort: 31777 protocol: TCP - port: 4443 name: https targetPort: 4443 nodePort: 31443 protocol: TCP   Run the following command to create a Kubernetes service nodeport for OHS.\nNote: Administrators should be aware of the following:\n As this is a Kubernetes service the port is accessible on all the worker nodes in the cluster. If you create another OHS container on a different port, you will need to create another nodeport service for that OHS.  $ kubectl create -f $MYOHSFILES/ohs_service.yaml The output will look similar to the following:\nservice/ohs-domain-nodeport created   Validate the service has been created using the command:\n$ kubectl get service -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get service -n ohsns The output will look similar to the following:\nNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE ohs-domain-nodeport NodePort 10.98.163.75 \u0026lt;none\u0026gt; 7777:31777/TCP,4443:31443/TCP 22s   Create the OHS Container In this section you create the OHS container using the ohs.yaml file created in Prepare the ohs.yaml file.\n  Run the following command to create the OHS container:\n$ kubectl create -f $MYOHSFILES/ohs.yaml The output will look similar to the following:\nconfigmap/ohs-script-configmap created deployment.apps/ohs-domain created Run the following command to view the status of the pods:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; -w For example:\n$ kubectl get pods -n ohsns -w Whilst the OHS container is creating you, may see:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-vkp4s 0/1 ContainerCreating 0 2m13s To check what is happening while the pod is in ContainerCreating status, you can run:\nkubectl describe pod \u0026lt;podname\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe pod ohs-domain-d5b648bc5-vkp4s -n ohsns Once the container is created, it will go to a READY status of 0/1 with STATUS of Running. For example:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-vkp4s 1/1 Running 0 3m10s To check what is happening while the pod is in this status, you can run:\n$ kubectl logs -f \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; Once everything is started you should see the OHS is running (READY 1/1):\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-vkp4s 1/1 Running 0 4m10s If there are any failures, follow Troubleshooting.\n  Validating the OHS Container In this section you validate the OHS container and check you can access OHS using the nodeport.\nValidating the OHS container file system To validate the OHS container file system:\n  Run the following command to get the name of the OHS container:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods -n ohsns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-vkp4s 1/1 Running 0 5m34s   Run the following command to create a bash shell inside the container:\n$ kubectl exec -n \u0026lt;namespace\u0026gt; -ti \u0026lt;pod\u0026gt; -- /bin/bash For example:\n$ kubectl exec -n ohsns -ti ohs-domain-79f8f99575-8qwfh -- /bin/bash This will take you to a bash shell inside the container:\n[oracle@ohs-domain-75fbd9b597-z77d8 oracle]$   Inside the bash shell navigate to the /u01/oracle/user_projects/domains/ohsDomain/config/fmwconfig/components/OHS/ohs1/ directory:\ncd /u01/oracle/user_projects/domains/ohsDomain/config/fmwconfig/components/OHS/ohs1/ From within this directory, you can navigate around and list (ls) or cat any files you configured using the configmaps.\n  Validating the OHS nodeport In this section you validate the OHS nodeport by accessing the OHS URL\u0026rsquo;s.\nIn the examples below, ${OHS-HOSTNAME} refers to the hostname.domain of the server where the OHS nodeport was deployed. ${OHS-NODEPORT} refers to the nodePort specified in your ohs-service.yaml, for example 31777for HTTP, or 31443 for HTTPS.\nNote: If OHS is accessed via a loadbalancer, replace ${OHS-HOSTNAME} and ${OHS-NODEPORT} with the loadbalancer hostname.domain and port.\nIf you have any problems accessing the URL\u0026rsquo;s, refer to Troubleshooting.\nLaunch a browser and access the following:\nNote: If you have deployed OHS with WebGate, then it will depend on your policy setup as to whether the URL\u0026rsquo;s below are accessible or not.\na) The OHS homepage http(s)://${OHS-HOSTNAME}:${OHS-NODEPORT}.\nb) Any other files copied in your ohs-htdocs configmap, for example http(s)://${OHS-HOSTNAME}:${OHS-NODEPORT}/mypage.html.\nc) Any files from directories crested under htdocs, for example the ohs-myapp configmap, for example http(s)://${OHS-HOSTNAME}:${OHS-NODEPORT}/myapp.\nd) Any URI\u0026rsquo;s defined for mod_wl_ohs in your httpd.conf, ssl.conf or moduleconf/*.conf files, for example http(s)://${OHS-HOSTNAME}:${OHS-NODEPORT}/console.\ne) If WebGate is deployed, any protected applications, for example http(s)://${OHS-HOSTNAME}:${OHS-NODEPORT}/myprotectedapp.\n"
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/oracle-cloud/configure-mount-share/",
	"title": "Configure an additional mount or shared space to a domain for Imaging and Capture",
	"tags": [],
	"description": "Configure an additional mount or shared space to a domain, for WebCenter Imaging and WebCenter Capture",
	"content": "A volume can be mounted to a server pod which can be accessible directly from outside Kubernetes cluster so that an external application could write new files to it.\nThis can be used specifically in WebCenter Imaging and WebCenter Capture applications for File Imports.\nKubernetes supports several types of volumes as given in Volumes | Kubernetes.\nFurther in this section, we will take nfs volume as an example.\nMount \u0026ldquo;nfs\u0026rdquo; as volume Create a NFS File system as described in the section Preparing a file system or an already existing NFS server can also be used.\nTo use a volume, specify the volumes to provide for the Pod in .spec.volumes and declare where to mount those volumes into containers in .spec.containers[*].volumeMounts in domain.yaml file.\nUpdate the domain.yaml and apply the changes as shown in sample below for mounting nfs server (for example, 100.XXX.XXX.X with shared export path at /sharedir) to all the server pods at /u01/sharedir.\nThe path /u01/sharedir can be configured as the file import path in WebCenter Imaging and WebCenter Capture applications and the files put to /sharedir will be processed by the applications.\nSample entry of domain.yaml with nfs-volume configuration\n... serverPod: # an (optional) list of environment variable to be set on the servers env: - name: JAVA_OPTIONS value: \u0026#34;-Dweblogic.StdoutDebugEnabled=false\u0026#34; - name: USER_MEM_ARGS value: \u0026#34;-Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx1024m \u0026#34; volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: wccinfra-domain-pvc - name: nfs-volume nfs: server: 100.XXX.XXX.XXX path: /sharedir volumeMounts: - mountPath: /u01/oracle/user_projects/domains name: weblogic-domain-storage-volume - mountPath: /u01/sharedir name: nfs-volume ... "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/cleanup-domain-setup/",
	"title": "Uninstall",
	"tags": [],
	"description": "Clean up the Oracle WebCenter Content domain setup.",
	"content": "Learn how to clean up the Oracle WebCenter Content domain setup.\nStop all Administration and Managed server pods First stop the all pods related to a domain. This can be done by patching domain \u0026ldquo;serverStartPolicy\u0026rdquo; to \u0026ldquo;NEVER\u0026rdquo;. Here is the sample command for the same.\n$ kubectl patch domain wcc-domain-name -n wcc-namespace --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;NEVER\u0026#34; }]\u0026#39; For example:\nkubectl patch domain wccinfra -n wccns --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;NEVER\u0026#34; }]\u0026#39; Remove the domain   Remove the domain\u0026rsquo;s ingress (for example, Traefik ingress) using Helm:\n$ helm uninstall wcc-domain-ingress -n sample-domain1-ns For example:\n$ helm uninstall wccinfra-traefik -n wccns   Remove the domain resources by using the sample delete-weblogic-domain-resources.sh script present at ${WORKDIR}/weblogic-kubernetes-operator/kubernetes/samples/scripts/delete-domain:\n$ cd ${WORKDIR}/weblogic-kubernetes-operator/kubernetes/samples/scripts/delete-domain $ ./delete-weblogic-domain-resources.sh -d sample-domain1 For example:\n$ cd ${WORKDIR}/weblogic-kubernetes-operator/kubernetes/samples/scripts/delete-domain $ ./delete-weblogic-domain-resources.sh -d wccinfra   Use kubectl to confirm that the server pods and domain resource are deleted:\n$ kubectl get pods -n sample-domain1-ns $ kubectl get domains -n sample-domain1-ns For example:\n$ kubectl get pods -n wccns $ kubectl get domains -n wccns   Drop the RCU schemas Follow these steps to drop the RCU schemas created for Oracle WebCenter Content domain.\nRemove the domain namespace   Configure the installed ingress load balancer (for example, Traefik) to stop managing the ingresses in the domain namespace:\n$ helm upgrade traefik-operator traefik/traefik \\  --namespace traefik \\  --reuse-values \\  --set \u0026#34;kubernetes.namespaces={traefik}\u0026#34; \\  --wait   Configure the WebLogic Kubernetes Operator to stop managing the domain:\n$ helm upgrade sample-weblogic-operator \\  kubernetes/charts/weblogic-operator \\  --namespace sample-weblogic-operator-ns \\  --reuse-values \\  --set \u0026#34;domainNamespaces={}\u0026#34; \\  --wait For example:\n$ cd ${WORKDIR}/weblogic-kubernetes-operator $ helm upgrade weblogic-kubernetes-operator \\  kubernetes/charts/weblogic-operator \\  --namespace opns \\  --reuse-values \\  --set \u0026#34;domainNamespaces={}\u0026#34; \\  --wait   Delete the domain namespace:\n$ kubectl delete namespace sample-domain1-ns For example:\n$ kubectl delete namespace wccns   Remove the WebLogic Kubernetes Operator   Remove the WebLogic Kubernetes Operator:\n$ helm uninstall sample-weblogic-operator -n sample-weblogic-operator-ns For example:\n$ helm uninstall weblogic-kubernetes-operator -n opns   Remove WebLogic Kubernetes Operator\u0026rsquo;s namespace:\n$ kubectl delete namespace sample-weblogic-operator-ns For example:\n$ kubectl delete namespace opns   Remove the load balancer   Remove the installed ingress based load balancer (for example, Traefik):\n$ helm uninstall traefik -n traefik   Remove the Traefik namespace:\n$ kubectl delete namespace traefik   Delete the domain home To remove the domain home that is generated using the create-domain.sh script, with appropriate privileges manually delete the contents of the storage attached to the domain home persistent volume (PV).\nFor example, for the domain\u0026rsquo;s persistent volume of type host_path:\n$ rm -rf /scratch/k8s_dir/WCC "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/adminguide/configure-mount-share/",
	"title": "Configure an additional mount or shared space to a domain for Imaging and Capture",
	"tags": [],
	"description": "Configure an additional mount or shared space to a domain, for WebCenter Imaging and WebCenter Capture",
	"content": "A volume can be mounted to a server pod which can be accessible directly from outside Kubernetes cluster so that an external application could write new files to it.\nThis can be used specifically in WebCenter Imaging and WebCenter Capture applications for File Imports.\nKubernetes supports several types of volumes as given in Volumes | Kubernetes.\nFurther in this section, we will take nfs volume as an example.\nMount \u0026ldquo;nfs\u0026rdquo; as volume To use a volume, specify the volumes to provide for the Pod in .spec.volumes and declare where to mount those volumes into containers in .spec.containers[*].volumeMounts in domain.yaml file.\nUpdate the domain.yaml and apply the changes as shown in sample below for mounting nfs server (for example, 100.XXX.XXX.X with shared export path at /sharedir) to all the server pods at /u01/sharedir.\nThe path /u01/sharedir can be configured as the file import path in WebCenter Imaging and WebCenter Capture applications and the files put to /sharedir will be processed by the applications.\nSample entry of domain.yaml with nfs-volume configuration\n... serverPod: # an (optional) list of environment variable to be set on the servers env: - name: JAVA_OPTIONS value: \u0026#34;-Dweblogic.StdoutDebugEnabled=false\u0026#34; - name: USER_MEM_ARGS value: \u0026#34;-Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx1024m \u0026#34; volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: wccinfra-domain-pvc - name: nfs-volume nfs: server: 100.XXX.XXX.XXX path: /sharedir volumeMounts: - mountPath: /u01/oracle/user_projects/domains name: weblogic-domain-storage-volume - mountPath: /u01/sharedir name: nfs-volume ... "
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/appendix/",
	"title": "Appendix",
	"tags": [],
	"description": "",
	"content": "This section provides information on miscellaneous tasks related to the Oracle WebCenter Portal deployment on Kubernetes.\n Domain resource sizing  Describes the resourse sizing information for the Oracle WebCenter Portal domain setup on Kubernetes cluster.\n Quick start deployment on-premise  Describes how to quickly get an Oracle WebCenter Portal domain instance running (using the defaults, nothing special) for development and test purposes.\n Security hardening  Review resources for the Docker and Kubernetes cluster hardening.\n Additional Configuration  Describes how to create connections to Oracle WebCenter Content Server to enable content integration within Oracle WebCenter Portal.\n "
},
{
	"uri": "/fmw-kubernetes/soa-domains/adminguide/deploying-composites/",
	"title": "Deploy composite applications",
	"tags": [],
	"description": "Deploy composite applications for Oracle SOA Suite and Oracle Service Bus domains.",
	"content": "Learn how to deploy the composite applications for Oracle SOA Suite and Oracle Service Bus domains.\n Deploy using JDeveloper  Deploy Oracle SOA Suite and Oracle Service Bus composite applications from Oracle JDeveloper to Oracle SOA Suite in the WebLogic Kubernetes Operator environment.\n Deploy using Maven and Ant  Deploy Oracle SOA Suite and Oracle Service Bus composite applications using the Maven and Ant based approach in an Oracle SOA Suite deployment.\n Deploy using composites in a persistent volume or image  Deploy Oracle SOA Suite and Oracle Service Bus composite applications artifacts in a persistent volume or in an image.\n "
},
{
	"uri": "/fmw-kubernetes/soa-domains/cleanup-domain-setup/",
	"title": "Uninstall",
	"tags": [],
	"description": "Clean up the Oracle SOA Suite domain setup.",
	"content": "Learn how to clean up the Oracle SOA Suite domain setup.\nRemove the domain   Remove the domain\u0026rsquo;s ingress (for example, Traefik ingress) using Helm:\n$ helm uninstall soa-domain-ingress -n sample-domain1-ns For example:\n$ helm uninstall soainfra-traefik -n soans   Remove the domain resources by using the sample delete-weblogic-domain-resources.sh script present at ${WORKDIR}/delete-domain:\n$ cd ${WORKDIR}/delete-domain $ ./delete-weblogic-domain-resources.sh -d sample-domain1 For example:\n$ cd ${WORKDIR}/delete-domain $ ./delete-weblogic-domain-resources.sh -d soainfra   Use kubectl to confirm that the server pods and domain resource are deleted:\n$ kubectl get pods -n sample-domain1-ns $ kubectl get domains -n sample-domain1-ns $ kubectl get clusters -n sample-domain1-ns For example:\n$ kubectl get pods -n soans $ kubectl get domains -n soans $ kubectl get clusters -n soans   Drop the RCU schemas Follow these steps to drop the RCU schemas created for Oracle SOA Suite domains.\nRemove the domain namespace   Configure the installed ingress load balancer (for example, Traefik) to stop managing the ingresses in the domain namespace:\n$ helm upgrade traefik traefik/traefik \\  --namespace traefik \\  --reuse-values \\  --set \u0026#34;kubernetes.namespaces={traefik}\u0026#34; \\  --wait   Delete the domain namespace:\n$ kubectl delete namespace sample-domain1-ns For example:\n$ kubectl delete namespace soans   Remove the operator   Remove the operator:\n$ helm uninstall sample-weblogic-operator -n sample-weblogic-operator-ns For example:\n$ helm uninstall weblogic-kubernetes-operator -n opns   Remove the operator\u0026rsquo;s namespace:\n$ kubectl delete namespace sample-weblogic-operator-ns For example:\n$ kubectl delete namespace opns   Remove the load balancer   Remove the installed ingress based load balancer (for example, Traefik):\n$ helm uninstall traefik -n traefik   Remove the Traefik namespace:\n$ kubectl delete namespace traefik   Delete the domain home To remove the domain home that is generated using the create-domain.sh script, with appropriate privileges manually delete the contents of the storage attached to the domain home persistent volume (PV).\nFor example, for the domain\u0026rsquo;s persistent volume of type host_path:\n$ rm -rf /scratch/k8s_dir/SOA/* "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/cleanup-domain-setup/",
	"title": "Uninstall",
	"tags": [],
	"description": "Clean up the Oracle WebCenter Sites domain setup.",
	"content": "Learn how to clean up the Oracle WebCenter Sites domain setup.\nStop all Administration and Managed server pods First stop the all pods related to a domain. This can be done by patching domain \u0026ldquo;serverStartPolicy\u0026rdquo; to \u0026ldquo;Never\u0026rdquo;. Here is the sample command for the same.\n$ kubectl patch domain wcsites-domain-name -n wcsites-namespace --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Never\u0026#34; }]\u0026#39; For example:\n$ kubectl patch domain wcsitesinfra -n wcsites-ns --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Never\u0026#34; }]\u0026#39; Drop the RCU schemas $ cd work-dir-name/weblogic-kubernetes-operator $ kubectl apply -f kubernetes/create-wcsites-domain/output/weblogic-domains/wcsitesinfra/delete-domain-job.yaml Check if the job has finished.\nRemove the domain   Remove the domain\u0026rsquo;s ingress (for example, Traefik ingress) using Helm:\n$ helm uninstall wcsites-domain-ingress -n wcsites-namespace For example:\n$ helm uninstall wcsitesinfra-ingress -n wsites-ns   Remove the domain resources by using the sample delete-weblogic-domain-resources.sh script present at ${WORKDIR}/fmw-kubernetes/OracleWebCenterSites/kubernetes/delete-domain:\n$ cd ${WORKDIR}/fmw-kubernetes/OracleWebCenterSites/kubernetes/delete-domain $ ./delete-weblogic-domain-resources.sh -d sample-domain1 For example:\n$ cd ${WORKDIR}/fmw-kubernetes/OracleWebCenterSites/kubernetes/delete-domain $ ./delete-weblogic-domain-resources.sh -d wcsites-ns   Use kubectl to confirm that the server pods and domain resource are deleted:\n$ kubectl get pods -n sample-domain1-ns $ kubectl get domains -n sample-domain1-ns For example:\n$ kubectl get pods -n wcsites-ns $ kubectl get domains -n wcsites-ns   Remove the domain namespace   Configure the installed ingress load balancer (for example, Traefik) to stop managing the ingresses in the domain namespace:\n$ helm upgrade traefik-operator stable/traefik \\  --namespace traefik \\  --reuse-values \\  --set \u0026#34;kubernetes.namespaces={traefik}\u0026#34; \\  --wait   Configure the operator to stop managing the domain:\n$ helm upgrade sample-weblogic-operator \\  kubernetes/charts/weblogic-operator \\  --namespace sample-weblogic-operator-ns \\  --reuse-values \\  --set \u0026#34;domainNamespaces={}\u0026#34; \\  --wait \\ For example:\n$ cd ${WORKDIR}/fmw-kubernetes/OracleWebCenterSites $ helm upgrade weblogic-kubernetes-operator \\  kubernetes/charts/weblogic-operator \\  --namespace operator-ns \\  --reuse-values \\  --set \u0026#34;domainNamespaces={}\u0026#34; \\  --wait \\   Delete the domain namespace:\n$ kubectl delete namespace sample-domain1-ns For example:\n$ kubectl delete namespace wcsites-ns   Remove the operator   Remove the operator:\n$ helm uninstall sample-weblogic-operator -n sample-weblogic-operator-ns For example:\n$ helm uninstall weblogic-kubernetes-operator -n operator-ns   Remove the operator\u0026rsquo;s namespace:\n$ kubectl delete namespace sample-weblogic-operator-ns For example:\n$ kubectl delete namespace operator-ns   Remove the load balancer   Remove the installed ingress based load balancer (for example, Traefik):\n$ helm uninstall traefik-operator -n traefik   Remove the Traefik namespace:\n$ kubectl delete namespace traefik   Delete the domain home To remove the domain home that is generated using the create-domain.sh script, with appropriate privileges manually delete the contents of the storage attached to the domain home persistent volume (PV).\nFor example, for the domain\u0026rsquo;s persistent volume of type host_path:\n$ rm -rf /scratch/K8SVolume/WCSites\r"
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/configure-ingress/",
	"title": "Configure an Ingress for an OAM domain",
	"tags": [],
	"description": "This document provides steps to configure an Ingress to direct traffic to the OAM domain.",
	"content": "Configuring an ingress for NGINX for the OAM Domain The instructions below explain how to set up NGINX as an ingress for the OAM domain.\nThe ingress can be configured in the following ways:\n Without SSL With SSL OAM URI\u0026rsquo;s are accessible from all hosts OAM URI\u0026rsquo;s are accessible using virtual hostnames only  The option you choose will depend on the architecture you are configuring. For example, if you have an architecture such as Oracle HTTP Server on an independent Kubernetes cluster, where SSL is terminated at the load balancer, then you would configure the ingress without SSL.\nIn almost all circumstances, the ingress should be configured to be accessible from all hosts (using host.enabled: false in the values.yaml). You can only configure ingress to use virtual hostnames only (using host.enabled: true in the values.yaml), if all of the following criteria are met:\n SSL is terminated at the load balancer The SSL port is 443 You have separate hostnames for OAM administration URL\u0026rsquo;s (for example https://admin.example.com/console), and OAM runtime URL\u0026rsquo;s (for example https://runtime.example.com/oam/server).  See, Prepare the values.yaml for the ingress for more details.\nThe steps to generate an ingress are as follows:\n Install NGINX Generate a SSL Certificate Create an ingress controller Prepare the values.yaml for the ingress Create the Ingress Verify that you can access the domain URL  Install NGINX Use helm to install NGINX.\n  Add the helm chart repository for NGINX using the following command:\n$ helm repo add stable https://kubernetes.github.io/ingress-nginx The output will look similar to the following:\n\u0026quot;stable\u0026quot; has been added to your repositories   Update the repository using the following command:\n$ helm repo update The output will look similar to the following:\nHang tight while we grab the latest from your chart repositories... ...Successfully got an update from the \u0026quot;stable\u0026quot; chart repository Update Complete. ⎈ Happy Helming!⎈   Generate a SSL Certificate This section should only be followed if you want to configure your ingress for SSL.\n  Generate a private key and certificate signing request (CSR) using a tool of your choice. Send the CSR to your certificate authority (CA) to generate the certificate.\nIf you want to use a certificate for testing purposes you can generate a self signed certificate using openssl:\n$ mkdir \u0026lt;workdir\u0026gt;/ssl $ cd \u0026lt;workdir\u0026gt;/ssl $ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj \u0026#34;/CN=\u0026lt;nginx-hostname\u0026gt;\u0026#34; For example:\n$ mkdir /scratch/OAMK8S/ssl $ cd /scratch/OAMK8S/ssl $ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj \u0026#34;/CN=masternode.example.com\u0026#34; Note: The CN should match the host.domain of the master node in order to prevent hostname problems during certificate verification.\nThe output will look similar to the following:\nGenerating a 2048 bit RSA private key ..........................................+++ .......................................................................................................+++ writing new private key to 'tls.key' -----   Create a secret for SSL by running the following command:\n$ kubectl -n oamns create secret tls \u0026lt;domain_uid\u0026gt;-tls-cert --key \u0026lt;workdir\u0026gt;/tls.key --cert \u0026lt;workdir\u0026gt;/tls.crt For example:\n$ kubectl -n oamns create secret tls accessdomain-tls-cert --key /scratch/OAMK8S/ssl/tls.key --cert /scratch/OAMK8S/ssl/tls.crt The output will look similar to the following:\nsecret/accessdomain-tls-cert created   Create an ingress controller In this section you create an ingress controller.\nIf you can connect directly to the master node IP address from a browser, then install NGINX with the --set controller.service.type=NodePort parameter.\nIf you are using a Managed Service for your Kubernetes cluster, for example Oracle Kubernetes Engine (OKE) on Oracle Cloud Infrastructure (OCI), and connect from a browser to the Load Balancer IP address, then use the --set controller.service.type=LoadBalancer parameter. This instructs the Managed Service to setup a Load Balancer to direct traffic to the NGINX ingress.\nThe instructions below use --set controller.service.type=NodePort. If using a managed service, change to --set controller.service.type=LoadBalancer.\nThe following sections show how to install the ingress with SSL or without SSL. Follow the relevant section based on your architecture.\nConfigure an ingress controller with SSL   To configure the ingress controller to use SSL, run the following command:\n$ helm install nginx-ingress -n \u0026lt;domain_namespace\u0026gt; --set controller.service.nodePorts.http=\u0026lt;http_port\u0026gt; --set controller.service.nodePorts.https=\u0026lt;https_port\u0026gt; --set controller.extraArgs.default-ssl-certificate=\u0026lt;domain_namespace\u0026gt;/\u0026lt;ssl_secret\u0026gt; --set controller.service.type=\u0026lt;type\u0026gt; --set controller.config.use-forwarded-headers=true --set controller.config.enable-underscores-in-headers=true --set controller.admissionWebhooks.enabled=false stable/ingress-nginx where:\n \u0026lt;domain_namespace\u0026gt; is your namespace, for example oamns. \u0026lt;http_port\u0026gt; is the HTTP port that you want the controller to listen on, for example 30777. \u0026lt;https_port\u0026gt; is the HTTPS port that you want the controller to listen on, for example 30443. \u0026lt;type\u0026gt; is the controller type. If using NodePort set to NodePort. If using a managed service set to LoadBalancer. If using LoadBalancer remove --set controller.service.nodePorts.http=\u0026lt;http_port\u0026gt; and --set controller.service.nodePorts.https=\u0026lt;https_port\u0026gt;. \u0026lt;ssl_secret\u0026gt; is the secret you created in Generate a SSL Certificate.  For example:\n$ helm install nginx-ingress -n oamns --set controller.service.nodePorts.http=30777 --set controller.service.nodePorts.https=30443 --set controller.extraArgs.default-ssl-certificate=oamns/accessdomain-tls-cert --set controller.service.type=NodePort --set controller.config.use-forwarded-headers=true --set controller.config.enable-underscores-in-headers=true --set controller.admissionWebhooks.enabled=false stable/ingress-nginx --version 4.7.2 The output will look similar to the following:\nNAME: nginx-ingress LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oamns STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The nginx-ingress controller has been installed. Get the application URL by running these commands: export HTTP_NODE_PORT=30777 export HTTPS_NODE_PORT=30443 export NODE_IP=$(kubectl --namespace oamns get nodes -o jsonpath=\u0026quot;{.items[0].status.addresses[1].address}\u0026quot;) echo \u0026quot;Visit http://$NODE_IP:$HTTP_NODE_PORT to access your application via HTTP.\u0026quot; echo \u0026quot;Visit https://$NODE_IP:$HTTPS_NODE_PORT to access your application via HTTPS.\u0026quot; An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1 kind: Ingress metadata: annotations: kubernetes.io/ingress.class: nginx name: example namespace: foo spec: ingressClassName: example-class rules: - host: www.example.com http: paths: - path: / pathType: Prefix backend: service: name: exampleService port: 80 # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls   Configure an ingress controller without SSL   To configure the ingress controller without SSL, run the following command:\n$ helm install nginx-ingress -n \u0026lt;domain_namespace\u0026gt; --set controller.service.nodePorts.http=\u0026lt;http_port\u0026gt; --set controller.service.type=NodePort --set controller.config.use-forwarded-headers=true --set controller.config.enable-underscores-in-headers=true --set controller.admissionWebhooks.enabled=false stable/ingress-nginx where:\n \u0026lt;domain_namespace\u0026gt; is your namespace, for example oamns. \u0026lt;http_port\u0026gt; is the HTTP port that you want the controller to listen on, for example 30777. \u0026lt;type\u0026gt; is the controller type. If using NodePort set to NodePort. If using a managed service set to LoadBalancer. If using LoadBalancer remove --set controller.service.nodePorts.http=\u0026lt;http_port\u0026gt;.  For example:\n$ helm install nginx-ingress -n oamns --set controller.service.nodePorts.http=30777 --set controller.service.type=NodePort --set controller.config.use-forwarded-headers=true --set controller.config.enable-underscores-in-headers=true --set controller.admissionWebhooks.enabled=false stable/ingress-nginx --version 4.7.2 The output will look similar to the following:\nNAME: nginx-ingress LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oamns STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The nginx-ingress controller has been installed. Get the application URL by running these commands: export HTTP_NODE_PORT=30777 export HTTPS_NODE_PORT=$(kubectl --namespace oamns get services -o jsonpath=\u0026quot;{.spec.ports[1].nodePort}\u0026quot; nginx-ingress-ingress-nginx-controller) export NODE_IP=$(kubectl --namespace oamns get nodes -o jsonpath=\u0026quot;{.items[0].status.addresses[1].address}\u0026quot;) echo \u0026quot;Visit http://$NODE_IP:$HTTP_NODE_PORT to access your application via HTTP.\u0026quot; echo \u0026quot;Visit https://$NODE_IP:$HTTPS_NODE_PORT to access your application via HTTPS.\u0026quot; An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1 kind: Ingress metadata: annotations: kubernetes.io/ingress.class: nginx name: example namespace: foo spec: ingressClassName: example-class rules: - host: www.example.com http: paths: - path: / pathType: Prefix backend: service: name: exampleService port: 80 # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls   Prepare the values.yaml for the ingress   Navigate to the following directory and make a copy of the values.yaml:\n$ cd $WORKDIR/kubernetes/charts/ingress-per-domain $ cp values.yaml $WORKDIR/   Edit the $WORKDIR/kubernetes/charts/ingress-per-domain/values.yaml and modify the following parameters if required:\n domainUID: - If you created your OAM domain with anything other than the default accessdomain, change accordingly. sslType: - Values supported are SSL and NONSSL. If you created your ingress controller to use SSL then set to SSL, otherwise set to NONSSL. hostName.enabled: false - This should be set to false in almost all circumstances. Setting to false allows OAM URI\u0026rsquo;s to be accessible from all hosts. Setting to true configures ingress for virtual hostnames only. See Configuring an ingress for NGINX for the OAM Domain for full details of the criteria that must be met set to this value to true. hostName.admin: \u0026lt;hostname\u0026gt; - Should only be set if hostName.enabled: true and sslType: NONSSL. This should be set to the hostname.domain of the URL you access OAM administration URL\u0026rsquo;s from, for example if you access the OAM Administration Console via https://admin.example.com/oamconsole, then set to admin.example.com. hostName.runtime: \u0026lt;hostname\u0026gt; - Should only be set if hostName.enabled: true. This should be set to the hostname.domain of the URL you access OAM runtime URL\u0026rsquo;s from, for example if the oam/server URI is accessed via https://runtime.example.com/oam/server, then set to runtime.example.com.  The following shows example files based on different configuration types:\n  Click here to see a values.yaml for SSL   # Load balancer type. Supported values are: NGINX type: NGINX # Type of Configuration Supported Values are : SSL and NONSSL sslType: SSL # domainType. Supported values are: oam domainType: oam #WLS domain as backend to the load balancer wlsDomain: domainUID: accessdomain adminServerName: AdminServer adminServerPort: 7001 adminServerSSLPort: oamClusterName: oam_cluster oamManagedServerPort: 14100 oamManagedServerSSLPort: policyClusterName: policy_cluster policyManagedServerPort: 15100 policyManagedServerSSLPort: # Host specific values hostName: enabled: false admin: runtime:      Click here to see a values.yaml for NONSSL using all hostnames   # Load balancer type. Supported values are: NGINX type: NGINX # Type of Configuration Supported Values are : SSL and NONSSL sslType: NONSSL # domainType. Supported values are: oam domainType: oam #WLS domain as backend to the load balancer wlsDomain: domainUID: accessdomain adminServerName: AdminServer adminServerPort: 7001 adminServerSSLPort: oamClusterName: oam_cluster oamManagedServerPort: 14100 oamManagedServerSSLPort: policyClusterName: policy_cluster policyManagedServerPort: 15100 policyManagedServerSSLPort: # Host specific values hostName: enabled: false admin: runtime:      Click here to see a values.yaml for NONSSL using virtual hostnames   # Load balancer type. Supported values are: NGINX type: NGINX # Type of Configuration Supported Values are : SSL and NONSSL sslType: NONSSL # domainType. Supported values are: oam domainType: oam #WLS domain as backend to the load balancer wlsDomain: domainUID: accessdomain adminServerName: AdminServer adminServerPort: 7001 adminServerSSLPort: oamClusterName: oam_cluster oamManagedServerPort: 14100 oamManagedServerSSLPort: policyClusterName: policy_cluster policyManagedServerPort: 15100 policyManagedServerSSLPort: # Host specific values hostName: enabled: true admin: admin.example.com runtime: runtime.example.com      Create the ingress   Run the following helm command to create the ingress:\n$ cd $WORKDIR $ helm install oam-nginx kubernetes/charts/ingress-per-domain --namespace \u0026lt;domain_namespace\u0026gt; --values kubernetes/charts/ingress-per-domain/values.yaml For example:\n$ cd $WORKDIR $ helm install oam-nginx kubernetes/charts/ingress-per-domain --namespace oamns --values kubernetes/charts/ingress-per-domain/values.yaml The output will look similar to the following:\nNAME: oam-nginx LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oamns STATUS: deployed REVISION: 1 TEST SUITE: None   Run the following command to show the ingress is created successfully:\n$ kubectl get ing -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get ing -n oamns If hostname.enabled: false, the output will look similar to the following:\nNAME CLASS HOSTS ADDRESS PORTS AGE accessdomain-nginx \u0026lt;none\u0026gt; * 80 5s If hostname.enabled: true, the output will look similar to the following:\nNAME CLASS HOSTS ADDRESS PORTS AGE oamadmin-ingress nginx admin.example.com 80 14s oamruntime-ingress nginx runtime.example.com 80 14s ``\n  Run the following command to check the ingress:\n$ kubectl describe ing \u0026lt;ingress\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe ing accessdomain-nginx -n oamns The output will look similar to the following for accessdomain-nginx:\nName: accessdomain-nginx Labels: app.kubernetes.io/managed-by=Helm Namespace: oamns Address: Ingress Class: \u0026lt;none\u0026gt; Default backend: \u0026lt;default\u0026gt; Rules: Host Path Backends ---- ---- -------- * /console accessdomain-adminserver:7001 (10.244.1.200:7001) /consolehelp accessdomain-adminserver:7001 (10.244.1.200:7001) /rreg/rreg accessdomain-adminserver:7001 (10.244.1.200:7001) /em accessdomain-adminserver:7001 (10.244.1.200:7001) /oamconsole accessdomain-adminserver:7001 (10.244.1.200:7001) /dms accessdomain-adminserver:7001 (10.244.1.200:7001) /oam/services/rest accessdomain-adminserver:7001 (10.244.1.200:7001) /iam/admin/config accessdomain-adminserver:7001 (10.244.1.200:7001) /iam/admin/diag accessdomain-adminserver:7001 (10.244.1.200:7001) /iam/access accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /oam/admin/api accessdomain-adminserver:7001 (10.244.1.200:7001) /oam/services/rest/access/api accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /access accessdomain-cluster-policy-cluster:15100 (10.244.2.126:15100) /oam accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) / accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) Annotations: meta.helm.sh/release-name: oam-nginx meta.helm.sh/release-namespace: oamns nginx.ingress.kubernetes.io/enable-access-log: false nginx.ingress.kubernetes.io/proxy-buffer-size: 2000k Events: \u0026lt;none\u0026gt; Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 33s nginx-ingress-controller Scheduled for sync The output will look similar to the following for oamadmin-ingress:\nName: oamadmin-ingress Labels: app.kubernetes.io/managed-by=Helm Namespace: oamns Address: Ingress Class: nginx Default backend: \u0026lt;default\u0026gt; Rules: Host Path Backends ---- ---- -------- admin.example.com /console accessdomain-adminserver:7001 (10.244.1.200:7001) /consolehelp accessdomain-adminserver:7001 (10.244.1.200:7001) /rreg/rreg accessdomain-adminserver:7001 (10.244.1.200:7001) /em accessdomain-adminserver:7001 (10.244.1.200:7001) /oamconsole accessdomain-adminserver:7001 (10.244.1.200:7001) /dms accessdomain-adminserver:7001 (10.244.1.200:7001) /oam/services/rest accessdomain-adminserver:7001 (10.244.1.200:7001) /iam/admin/config accessdomain-adminserver:7001 (10.244.1.200:7001) /oam/admin/api accessdomain-adminserver:7001 (10.244.1.200:7001) /iam/admin/diag accessdomain-adminserver:7001 (10.244.1.200:7001) /oam/services accessdomain-adminserver:7001 (10.244.1.200:7001) /iam/admin accessdomain-adminserver:7001 (10.244.1.200:7001) /oam/services/rest/11.1.2.0.0 accessdomain-adminserver:7001 (10.244.1.200:7001) /oam/services/rest/ssa accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /access accessdomain-cluster-policy-cluster:15100 (10.244.2.126:15100) Annotations: meta.helm.sh/release-name: oam-nginx meta.helm.sh/release-namespace: oamns nginx.ingress.kubernetes.io/affinity: cookie nginx.ingress.kubernetes.io/enable-access-log: false nginx.ingress.kubernetes.io/ingress.allow-http: true nginx.ingress.kubernetes.io/proxy-buffer-size: 2000k nginx.ingress.kubernetes.io/ssl-redirect: false Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 32s nginx-ingress-controller Scheduled for sync The output will look similar to the following for oamruntime-ingress:\nName: oamruntime-ingress Labels: app.kubernetes.io/managed-by=Helm Namespace: oamns Address: 10.106.62.184 Ingress Class: nginx Default backend: \u0026lt;default\u0026gt; Rules: Host Path Backends ---- ---- -------- runtime.example.com /ms_oauth accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /oam/services/rest/auth accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /oam/services/rest/access accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /oamfed accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /otpfp/ accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /oauth2 accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /oam accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /.well-known/openid-configuration accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /.well-known/oidc-configuration accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /CustomConsent accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /iam/access accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) Annotations: meta.helm.sh/release-name: oam-nginx meta.helm.sh/release-namespace: oamns nginx.ingress.kubernetes.io/affinity: cookie nginx.ingress.kubernetes.io/enable-access-log: false nginx.ingress.kubernetes.io/proxy-buffer-size: 2000k Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 3m34s (x2 over 4m10s) nginx-ingress-controller Scheduled for sync   To confirm that the new ingress is successfully routing to the domain\u0026rsquo;s server pods, run the following command to send a request to the OAM Administration Console:\nFor SSL:\n$ curl -v -k https://${HOSTNAME}:${PORT}/oamconsole For NON SSL:\n$ curl -v http://${HOSTNAME}:${PORT}/oamconsole The ${HOSTNAME}:${PORT} to use depends on the value set for hostName.enabled. If hostName.enabled: false use the hostname and port where the ingress controller is installed, for example http://masternode.example.com:30777.\nIf using hostName.enabled: true then you can only access via the admin hostname, for example https://admin.example.com/oamconsole. Note: You can only access via the admin URL if it is currently accessible and routing correctly to the ingress host and port.\nFor example:\n$ curl -v http://masternode.example.com:30777/oamconsole The output will look similar to the following. You should receive a 302 Moved Temporarily message:\n\u0026gt; GET /oamconsole HTTP/1.1 \u0026gt; Host: masternode.example:30777 \u0026gt; User-Agent: curl/7.61.1 \u0026gt; Accept: */* \u0026gt; \u0026lt; HTTP/1.1 302 Moved Temporarily \u0026lt; Date: \u0026lt;DATE\u0026gt; \u0026lt; Content-Type: text/html \u0026lt; Content-Length: 333 \u0026lt; Connection: keep-alive \u0026lt; Location: http://masternode.example.com:30777/oamconsole/ \u0026lt; X-Content-Type-Options: nosniff \u0026lt; X-Frame-Options: DENY \u0026lt; \u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;302 Moved Temporarily\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body bgcolor=\u0026quot;#FFFFFF\u0026quot;\u0026gt; \u0026lt;p\u0026gt;This document you requested has moved temporarily.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;It's now at \u0026lt;a href=\u0026quot;http://masternode.example.com:30777/oamconsole/\u0026quot;\u0026gt;http://masternode.example.com:30777/oamconsole/\u0026lt;/a\u0026gt;.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; * Connection #0 to host doc-master.lcma.susengdev2phx.oraclevcn.com left intact   Verify that you can access the domain URLs After setting up the NGINX ingress, verify that the domain applications are accessible as per Validate Domain URLs \n"
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/configure-ingress/",
	"title": "Configure an ingress for an OIG domain",
	"tags": [],
	"description": "This document provides steps to configure an Ingress to direct traffic to the OIG domain.",
	"content": "Choose one of the following supported methods to configure an Ingress to direct traffic for your OIG domain.\n a. Using an Ingress with NGINX (non-SSL)  Steps to set up an Ingress for NGINX to direct traffic to the OIG domain (non-SSL).\n b. Using an Ingress with NGINX (SSL)  Steps to set up an Ingress for NGINX to direct traffic to the OIG domain using SSL.\n "
},
{
	"uri": "/fmw-kubernetes/idm-products/oud/configure-ingress/",
	"title": "Configure an Ingress for OUD",
	"tags": [],
	"description": "This document provides steps to configure an ingress controller to direct traffic to OUD.",
	"content": "  Introduction\n  Install NGINX\na. Configure the repository\nb. Create a namespace\nc. Install NGINX using helm\n  Access to interfaces through ingress\na. Changes in /etc/hosts to validate hostname based ingress rules\nb. Using LDAP utilities\nc. Validate access using LDAP\nd. Validate access using HTTPS\n  Introduction The instructions below explain how to set up NGINX as an ingress for OUD.\nBy default the ingress configuration only supports HTTP and HTTPS ports. To allow LDAP and LDAPS communication over TCP, configuration is required at the ingress controller/implementation level.\nInstall NGINX Use Helm to install NGINX.\nConfigure the repository   Add the Helm chart repository for installing NGINX using the following command:\n$ helm repo add stable https://kubernetes.github.io/ingress-nginx The output will look similar to the following:\n\u0026quot;stable\u0026quot; has been added to your repositories   Update the repository using the following command:\n$ helm repo update The output will look similar to the following:\nHang tight while we grab the latest from your chart repositories... ...Successfully got an update from the \u0026quot;stable\u0026quot; chart repository Update Complete. Happy Helming!   Create a namespace   Create a Kubernetes namespace for NGINX:\n$ kubectl create namespace \u0026lt;namespace\u0026gt; For example:\n$ kubectl create namespace mynginx The output will look similar to the following:\nnamespace/mynginx created   Install NGINX using helm   Create a $WORKDIR/kubernetes/helm/nginx-ingress-values-override.yaml that contains the following:\nNote: The configuration below:\n Assumes that you have oud-ds-rs installed with value oud-ds-rs as a deployment/release name in the namespace oudns. If using a different deployment name and/or namespace change appropriately. Deploys an ingress using LoadBalancer. If you prefer to use NodePort, change the configuration accordingly. For more details about NGINX configuration see: NGINX Ingress Controller.  # Configuration for additional TCP ports to be exposed through Ingress # Format for each port would be like: # \u0026lt;PortNumber\u0026gt;: \u0026lt;Namespace\u0026gt;/\u0026lt;Service\u0026gt; tcp: # Map 1389 TCP port to LBR LDAP service to get requests handled through any available POD/Endpoint serving LDAP Port 1389: oudns/oud-ds-rs-lbr-ldap:ldap # Map 1636 TCP port to LBR LDAP service to get requests handled through any available POD/Endpoint serving LDAPS Port 1636: oudns/oud-ds-rs-lbr-ldap:ldaps controller: admissionWebhooks: enabled: false extraArgs: # The secret referred to by this flag contains the default certificate to be used when accessing the catch-all server. # If this flag is not provided NGINX will use a self-signed certificate. # If the TLS Secret is in different namespace, name can be mentioned as \u0026lt;namespace\u0026gt;/\u0026lt;tlsSecretName\u0026gt; default-ssl-certificate: oudns/oud-ds-rs-tls-cert service: # controller service external IP addresses # externalIPs: # - \u0026lt; External IP Address \u0026gt; # To configure Ingress Controller Service as LoadBalancer type of Service # Based on the Kubernetes configuration, External LoadBalancer would be linked to the Ingress Controller Service type: LoadBalancer # Configuration for NodePort to be used for Ports exposed through Ingress # If NodePorts are not defied/configured, Node Port would be assigend automatically by Kubernetes # These NodePorts are helpful while accessing services directly through Ingress and without having External Load Balancer. nodePorts: # For HTTP Interface exposed through LoadBalancer/Ingress http: 30080 # For HTTPS Interface exposed through LoadBalancer/Ingress https: 30443 tcp: # For LDAP Interface 1389: 31389 # For LDAPS Interface 1636: 31636   To install and configure NGINX Ingress issue the following command:\n$ helm install --namespace \u0026lt;namespace\u0026gt; \\ --values nginx-ingress-values-override.yaml \\ lbr-nginx stable/ingress-nginx Where:\n lbr-nginx is your deployment name stable/ingress-nginx is the chart reference  For example:\n$ helm install --namespace mynginx \\ --values nginx-ingress-values-override.yaml \\ lbr-nginx stable/ingress-nginx The output will look similar to the following:\nNAME: lbr-nginx LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: mynginx STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The ingress-nginx controller has been installed. It may take a few minutes for the LoadBalancer IP to be available. You can watch the status by running 'kubectl --namespace mynginx get services -o wide -w lbr-nginx-ingress-nginx-controller' An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1beta1 kind: Ingress metadata: annotations: kubernetes.io/ingress.class: nginx name: example namespace: foo spec: rules: - host: www.example.com http: paths: - backend: serviceName: exampleService servicePort: 80 path: / # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls   Optional: Command helm upgrade to update nginx-ingress If required, an nginx-ingress deployment can be updated/upgraded with following command. In this example, nginx-ingress configuration is updated with an additional TCP port and Node Port for accessing the LDAP/LDAPS port of a specific POD:\n  Create a nginx-ingress-values-override.yaml that contains the following:\n# Configuration for additional TCP ports to be exposed through Ingress # Format for each port would be like: # \u0026lt;PortNumber\u0026gt;: \u0026lt;Namespace\u0026gt;/\u0026lt;Service\u0026gt; tcp: # Map 1389 TCP port to LBR LDAP service to get requests handled through any available POD/Endpoint serving LDAP Port 1389: oudns/oud-ds-rs-lbr-ldap:ldap # Map 1636 TCP port to LBR LDAP service to get requests handled through any available POD/Endpoint serving LDAPS Port 1636: oudns/oud-ds-rs-lbr-ldap:ldaps # Map specific ports for LDAP and LDAPS communication from individual Services/Pods # To redirect requests on 3890 port to oudns/oud-ds-rs-ldap-0:ldap 3890: oudns/oud-ds-rs-ldap-0:ldap # To redirect requests on 6360 port to oudns/oud-ds-rs-ldaps-0:ldap 6360: oudns/oud-ds-rs-ldap-0:ldaps # To redirect requests on 3891 port to oudns/oud-ds-rs-ldap-1:ldap 3891: oudns/oud-ds-rs-ldap-1:ldap # To redirect requests on 6361 port to oudns/oud-ds-rs-ldaps-1:ldap 6361: oudns/oud-ds-rs-ldap-1:ldaps # To redirect requests on 3892 port to oudns/oud-ds-rs-ldap-2:ldap 3892: oudns/oud-ds-rs-ldap-2:ldap # To redirect requests on 6362 port to oudns/oud-ds-rs-ldaps-2:ldap 6362: oudns/oud-ds-rs-ldap-2:ldaps # Map 1444 TCP port to LBR Admin service to get requests handled through any available POD/Endpoint serving Admin LDAPS Port 1444: oudns/oud-ds-rs-lbr-admin:adminldaps # To redirect requests on 4440 port to oudns/oud-ds-rs-0:adminldaps 4440: oudns/oud-ds-rs-0:adminldaps # To redirect requests on 4441 port to oudns/oud-ds-rs-1:adminldaps 4441: oudns/oud-ds-rs-1:adminldaps # To redirect requests on 4442 port to oudns/oud-ds-rs-2:adminldaps 4442: oudns/oud-ds-rs-2:adminldaps controller: admissionWebhooks: enabled: false extraArgs: # The secret referred to by this flag contains the default certificate to be used when accessing the catch-all server. # If this flag is not provided NGINX will use a self-signed certificate. # If the TLS Secret is in different namespace, name can be mentioned as \u0026lt;namespace\u0026gt;/\u0026lt;tlsSecretName\u0026gt; default-ssl-certificate: oudns/oud-ds-rs-tls-cert service: # controller service external IP addresses # externalIPs: # - \u0026lt; External IP Address \u0026gt; # To configure Ingress Controller Service as LoadBalancer type of Service # Based on the Kubernetes configuration, External LoadBalancer would be linked to the Ingress Controller Service type: LoadBalancer # Configuration for NodePort to be used for Ports exposed through Ingress # If NodePorts are not defied/configured, Node Port would be assigend automatically by Kubernetes # These NodePorts are helpful while accessing services directly through Ingress and without having External Load Balancer. nodePorts: # For HTTP Interface exposed through LoadBalancer/Ingress http: 30080 # For HTTPS Interface exposed through LoadBalancer/Ingress https: 30443 tcp: # For LDAP Interface referring to LBR LDAP services serving LDAP port 1389: 31389 # For LDAPS Interface referring to LBR LDAP services serving LDAPS port 1636: 31636 # For LDAP Interface from specific service oud-ds-rs-ldap-0 3890: 30890 # For LDAPS Interface from specific service oud-ds-rs-ldap-0 6360: 30360 # For LDAP Interface from specific service oud-ds-rs-ldap-1 3891: 30891 # For LDAPS Interface from specific service oud-ds-rs-ldap-1 6361: 30361 # For LDAP Interface from specific service oud-ds-rs-ldap-2 3892: 30892 # For LDAPS Interface from specific service oud-ds-rs-ldap-2 6362: 30362 # For LDAPS Interface referring to LBR Admin services serving adminldaps port 1444: 31444 # For Admin LDAPS Interface from specific service oud-ds-rs-0 4440: 30440 # For Admin LDAPS Interface from specific service oud-ds-rs-1 4441: 30441 # For Admin LDAPS Interface from specific service oud-ds-rs-2 4442: 30442   Run the following command to upgrade the ingress:\n$ helm upgrade --namespace \u0026lt;namespace\u0026gt; \\ --values nginx-ingress-values-override.yaml \\ lbr-nginx stable/ingress-nginx Where:\n lbr-nginx is your deployment name stable/ingress-nginx is the chart reference  For example:\n$ helm upgrade --namespace mynginx \\ --values nginx-ingress-values-override.yaml \\ lbr-nginx stable/ingress-nginx   Access to interfaces through ingress Using the Helm chart, ingress objects are created according to configuration. The following table details the rules configured in ingress object(s) for access to Oracle Unified Directory Interfaces through ingress.\n   Port NodePort Host Example Hostname Path Backend Service:Port Example Service Name:Port     http/https 30080/30443 \u0026lt;deployment/release name\u0026gt;-admin-0 oud-ds-rs-admin-0 * \u0026lt;deployment/release name\u0026gt;-0:adminhttps oud-ds-rs-0:adminhttps   http/https 30080/30443 \u0026lt;deployment/release name\u0026gt;-admin-N oud-ds-rs-admin-N * \u0026lt;deployment/release name\u0026gt;-N:adminhttps oud-ds-rs-1:adminhttps   http/https 30080/30443 \u0026lt;deployment/release name\u0026gt;-admin oud-ds-rs-admin * \u0026lt;deployment/release name\u0026gt;-lbr-admin:adminhttps oud-ds-rs-lbr-admin:adminhttps   http/https 30080/30443 * * /rest/v1/admin \u0026lt;deployment/release name\u0026gt;-lbr-admin:adminhttps oud-ds-rs-lbr-admin:adminhttps   http/https 30080/30443 \u0026lt;deployment/release name\u0026gt;-http-0 oud-ds-rs-http-0 * \u0026lt;deployment/release name\u0026gt;-http-0:http oud-ds-rs-http-0:http   http/https 30080/30443 \u0026lt;deployment/release name\u0026gt;-http-N oud-ds-rs-http-N * \u0026lt;deployment/release name\u0026gt;-http-N:http oud-ds-rs-http-N:http   http/https 30080/30443 \u0026lt;deployment/release name\u0026gt;-http oud-ds-rs-http * \u0026lt;deployment/release name\u0026gt;-lbr-http:http oud-ds-rs-lbr-http:http   http/https 30080/30443 * * /rest/v1/directory \u0026lt;deployment/release name\u0026gt;-lbr-http:http oud-ds-rs-lbr-http:http   http/https 30080/30443 * * /iam/directory \u0026lt;deployment/release name\u0026gt;-lbr-http:http oud-ds-rs-lbr-http:http     In the table above, example values are based on the value \u0026lsquo;oud-ds-rs\u0026rsquo; as the deployment/release name for Helm chart installation.The NodePorts mentioned in the table are according to ingress configuration described in previous section.When External LoadBalancer is not available/configured, interfaces can be accessed through NodePort on a Kubernetes node.\n For LDAP/LDAPS access (based on the updated/upgraded configuration mentioned in previous section)\n   Port NodePort Backend Service:Port Example Service Name:Port     1389 31389 \u0026lt;deployment/release name\u0026gt;-lbr-ldap:ldap oud-ds-rs-lbr-ldap:ldap   1636 31636 \u0026lt;deployment/release name\u0026gt;-lbr-ldap:ldap oud-ds-rs-lbr-ldap:ldaps   1444 31444 \u0026lt;deployment/release name\u0026gt;-lbr-admin:adminldaps oud-ds-rs-lbr-admin:adminldaps   3890 30890 \u0026lt;deployment/release name\u0026gt;-ldap-0:ldap oud-ds-rs-ldap-0:ldap   6360 30360 \u0026lt;deployment/release name\u0026gt;-ldap-0:ldaps oud-ds-rs-ldap-0:ldaps   3891 30891 \u0026lt;deployment/release name\u0026gt;-ldap-1:ldap oud-ds-rs-ldap-1:ldap   6361 30361 \u0026lt;deployment/release name\u0026gt;-ldap-1:ldaps oud-ds-rs-ldap-1:ldaps   3892 30892 \u0026lt;deployment/release name\u0026gt;-ldap-2:ldap oud-ds-rs-ldap-2:ldap   6362 30362 \u0026lt;deployment/release name\u0026gt;-ldap-2:ldaps oud-ds-rs-ldap-2:ldaps   4440 30440 \u0026lt;deployment/release name\u0026gt;-0:adminldaps oud-ds-rs-ldap-0:adminldaps   4441 30441 \u0026lt;deployment/release name\u0026gt;-1:adminldaps oud-ds-rs-ldap-1:adminldaps   4442 30442 \u0026lt;deployment/release name\u0026gt;-2:adminldaps oud-ds-rs-ldap-2:adminldaps     In the table above, example values are based on value \u0026lsquo;oud-ds-rs\u0026rsquo; as the deployment/release name for helm chart installation. The NodePorts mentioned in the table are according to Ingress configuration described in previous section. When external LoadBalancer is not available/configured, Interfaces can be accessed through NodePort on a Kubernetes Node.  Changes in /etc/hosts to validate hostname based ingress rules If it is not possible to have a LoadBalancer configuration updated to have host names added for Oracle Unified Directory Interfaces then the following entries can be added in /etc/hosts files on the host from where Oracle Unified Directory interfaces will be accessed.\n\u0026lt;IP Address of External LBR or Kubernetes Node\u0026gt;\toud-ds-rs-http oud-ds-rs-http-0 oud-ds-rs-http-1 oud-ds-rs-http-2 oud-ds-rs-http-N \u0026lt;IP Address of External LBR or Kubernetes Node\u0026gt;\toud-ds-rs-admin oud-ds-rs-admin-0 oud-ds-rs-admin-1 oud-ds-rs-admin-2 oud-ds-rs-admin-N  In the table above, host names are based on the value \u0026lsquo;oud-ds-rs\u0026rsquo; as the deployment/release name for Helm chart installation. When External LoadBalancer is not available/configured, Interfaces can be accessed through NodePort on Kubernetes Node.  Using LDAP utilities To use Oracle LDAP utilities such as ldapbind, ldapsearch, ldapmodify etc. you can either:\n  Run the LDAP commands from an OUD installation outside the Kubernetes cluster. This requires access to an On-Premises OUD installation oustide the Kubernetes cluster.\n  Run the LDAP commands from inside the OUD Kubernetes pod.\n$ kubectl exec -ti \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; -- bash For example:\n$ kubectl exec -ti oud-ds-rs-0 -n oudns -- bash This will take you into a bash session in the pod:\n[oracle@oud-ds-rs-0 oracle]$ Inside the container navigate to /u01/oracle/oud/bin to view the LDAP utilties:\n[oracle@oud-ds-rs-0 oracle]$ cd /u01/oracle/oud/bin [oracle@oud-ds-rs-0 bin]$ ls ldap* ldapcompare ldapdelete ldapmodify ldappasswordmodify ldapsearch Note: For commands that require an ldif file, copy the file into the \u0026lt;persistent_volume\u0026gt;/oud_user_projects directory:\n$ cp file.ldif \u0026lt;peristent_volume\u0026gt;/oud_user_projects For example:\n$ cp file.ldif /scratch/shared/oud_user_projects The file can then be viewed inside the pod:\n[oracle@oud-ds-rs-0 bin]$ cd /u01/oracle/user_projects [oracle@oud-ds-rs-0 user_projects]$ ls *.ldif file.ldif   Validate access using LDAP Note: The examples assume sample data was installed when creating the OUD instance.\nLDAP against External Load Balancer Note If your ingress is configured with type: LoadBalancer then you cannot connect to the external LoadBalancer hostname and ports from inside the pod and must connect from an OUD installation outside the cluster.\n  Command to perform ldapsearch against External LBR and LDAP port\n$OUD_HOME/bin/ldapsearch --hostname \u0026lt;External LBR\u0026gt; --port 1389 \\ -D \u0026#34;\u0026lt;Root User DN\u0026gt;\u0026#34; -w \u0026lt;Password for Root User DN\u0026gt; \\ -b \u0026#34;\u0026#34; -s base \u0026#34;(objectClass=*)\u0026#34; \u0026#34;*\u0026#34; The output will look similar to the following:\ndn: objectClass: top objectClass: ds-root-dse lastChangeNumber: 0 firstChangeNumber: 0 changelog: cn=changelog entryDN: pwdPolicySubentry: cn=Default Password Policy,cn=Password Policies,cn=config subschemaSubentry: cn=schema supportedAuthPasswordSchemes: SHA256 supportedAuthPasswordSchemes: SHA1 supportedAuthPasswordSchemes: SHA384 supportedAuthPasswordSchemes: SHA512 supportedAuthPasswordSchemes: MD5 numSubordinates: 1 supportedFeatures: 1.3.6.1.1.14 supportedFeatures: 1.3.6.1.4.1.4203.1.5.1 supportedFeatures: 1.3.6.1.4.1.4203.1.5.2 supportedFeatures: 1.3.6.1.4.1.4203.1.5.3 lastExternalChangelogCookie: vendorName: Oracle Corporation vendorVersion: Oracle Unified Directory 12.2.1.4.0 componentVersion: 4 releaseVersion: 1 platformVersion: 0 supportedLDAPVersion: 2 supportedLDAPVersion: 3 supportedControl: 1.2.826.0.1.3344810.2.3 supportedControl: 1.2.840.113556.1.4.1413 supportedControl: 1.2.840.113556.1.4.319 supportedControl: 1.2.840.113556.1.4.473 supportedControl: 1.2.840.113556.1.4.805 supportedControl: 1.3.6.1.1.12 supportedControl: 1.3.6.1.1.13.1 supportedControl: 1.3.6.1.1.13.2 supportedControl: 1.3.6.1.4.1.26027.1.5.2 supportedControl: 1.3.6.1.4.1.26027.1.5.4 supportedControl: 1.3.6.1.4.1.26027.1.5.5 supportedControl: 1.3.6.1.4.1.26027.1.5.6 supportedControl: 1.3.6.1.4.1.26027.2.3.1 supportedControl: 1.3.6.1.4.1.26027.2.3.2 supportedControl: 1.3.6.1.4.1.26027.2.3.4 supportedControl: 1.3.6.1.4.1.42.2.27.8.5.1 supportedControl: 1.3.6.1.4.1.42.2.27.9.5.2 supportedControl: 1.3.6.1.4.1.42.2.27.9.5.8 supportedControl: 1.3.6.1.4.1.4203.1.10.1 supportedControl: 1.3.6.1.4.1.4203.1.10.2 supportedControl: 2.16.840.1.113730.3.4.12 supportedControl: 2.16.840.1.113730.3.4.16 supportedControl: 2.16.840.1.113730.3.4.17 supportedControl: 2.16.840.1.113730.3.4.18 supportedControl: 2.16.840.1.113730.3.4.19 supportedControl: 2.16.840.1.113730.3.4.2 supportedControl: 2.16.840.1.113730.3.4.3 supportedControl: 2.16.840.1.113730.3.4.4 supportedControl: 2.16.840.1.113730.3.4.5 supportedControl: 2.16.840.1.113730.3.4.9 supportedControl: 2.16.840.1.113894.1.8.21 supportedControl: 2.16.840.1.113894.1.8.31 supportedControl: 2.16.840.1.113894.1.8.36 maintenanceVersion: 2 supportedSASLMechanisms: PLAIN supportedSASLMechanisms: EXTERNAL supportedSASLMechanisms: CRAM-MD5 supportedSASLMechanisms: DIGEST-MD5 majorVersion: 12 orclGUID: D41D8CD98F003204A9800998ECF8427E entryUUID: d41d8cd9-8f00-3204-a980-0998ecf8427e ds-private-naming-contexts: cn=schema hasSubordinates: true nsUniqueId: d41d8cd9-8f003204-a9800998-ecf8427e structuralObjectClass: ds-root-dse supportedExtension: 1.3.6.1.4.1.4203.1.11.1 supportedExtension: 1.3.6.1.4.1.4203.1.11.3 supportedExtension: 1.3.6.1.1.8 supportedExtension: 1.3.6.1.4.1.26027.1.6.3 supportedExtension: 1.3.6.1.4.1.26027.1.6.2 supportedExtension: 1.3.6.1.4.1.26027.1.6.1 supportedExtension: 1.3.6.1.4.1.1466.20037 namingContexts: cn=changelog namingContexts: dc=example,dc=com   Command to perform ldapsearch against External LBR and LDAP port for specific Oracle Unified Directory Interface\n$OUD_HOME/bin/ldapsearch --hostname \u0026lt;External LBR\u0026gt; --port 3890 \\ -D \u0026#34;\u0026lt;Root User DN\u0026gt;\u0026#34; -w \u0026lt;Password for Root User DN\u0026gt; \\ -b \u0026#34;\u0026#34; -s base \u0026#34;(objectClass=*)\u0026#34; \u0026#34;*\u0026#34;   LDAPS against Kubernetes NodePort for Ingress Controller Service In the example below LDAP utilities are executed from inside the oud-ds-rs-0 pod. If your ingress is configured with type: LoadBalancer you can connect to the Kubernetes hostname where the ingress is deployed using the NodePorts.\n  Command to perform ldapsearch against Kubernetes NodePort and LDAP port\n[oracle@oud-ds-rs-0 bin]$ ./ldapsearch --hostname \u0026lt;Kubernetes Node\u0026gt; --port 31636 \\ --useSSL --trustAll \\ -D \u0026#34;\u0026lt;Root User DN\u0026gt;\u0026#34; -w \u0026lt;Password for Root User DN\u0026gt; \\ -b \u0026#34;\u0026#34; -s base \u0026#34;(objectClass=*)\u0026#34; \u0026#34;*\u0026#34;   Validate access using HTTPS HTTPS/REST API against External LBR Host:Port Note: In all the examples below:\na) You need to have an external IP assigned at ingress level.\nb) | json_pp is used to format output in readable json format on the client side. It can be ignored if you do not have the json_pp library.\nc) Base64 of userDN:userPassword can be generated using echo -n \u0026quot;userDN:userPassword\u0026quot; | base64.\n  Command to invoke Data REST API:\n$curl --noproxy \u0026#34;*\u0026#34; -k --location \\ --request GET \u0026#39;https://\u0026lt;External LBR Host\u0026gt;/rest/v1/directory/uid=user.1,ou=People,dc=example,dc=com?scope=sub\u0026amp;attributes=*\u0026#39; \\ --header \u0026#39;Authorization: Basic \u0026lt;Base64 of userDN:userPassword\u0026gt;\u0026#39; | json_pp The output will look similar to the following:\n{ \u0026#34;msgType\u0026#34; : \u0026#34;urn:ietf:params:rest:schemas:oracle:oud:1.0:SearchResponse\u0026#34;, \u0026#34;totalResults\u0026#34; : 1, \u0026#34;searchResultEntries\u0026#34; : [ { \u0026#34;dn\u0026#34; : \u0026#34;uid=user.1,ou=People,dc=example,dc=com\u0026#34;, \u0026#34;attributes\u0026#34; : { \u0026#34;st\u0026#34; : \u0026#34;OH\u0026#34;, \u0026#34;employeeNumber\u0026#34; : \u0026#34;1\u0026#34;, \u0026#34;postalCode\u0026#34; : \u0026#34;93694\u0026#34;, \u0026#34;description\u0026#34; : \u0026#34;This is the description for Aaren Atp.\u0026#34;, \u0026#34;telephoneNumber\u0026#34; : \u0026#34;+1 390 103 6917\u0026#34;, \u0026#34;homePhone\u0026#34; : \u0026#34;+1 280 375 4325\u0026#34;, \u0026#34;initials\u0026#34; : \u0026#34;ALA\u0026#34;, \u0026#34;objectClass\u0026#34; : [ \u0026#34;top\u0026#34;, \u0026#34;inetorgperson\u0026#34;, \u0026#34;organizationalperson\u0026#34;, \u0026#34;person\u0026#34; ], \u0026#34;uid\u0026#34; : \u0026#34;user.1\u0026#34;, \u0026#34;sn\u0026#34; : \u0026#34;Atp\u0026#34;, \u0026#34;street\u0026#34; : \u0026#34;70110 Fourth Street\u0026#34;, \u0026#34;mobile\u0026#34; : \u0026#34;+1 680 734 6300\u0026#34;, \u0026#34;givenName\u0026#34; : \u0026#34;Aaren\u0026#34;, \u0026#34;mail\u0026#34; : \u0026#34;user.1@maildomain.net\u0026#34;, \u0026#34;l\u0026#34; : \u0026#34;New Haven\u0026#34;, \u0026#34;postalAddress\u0026#34; : \u0026#34;Aaren Atp$70110 Fourth Street$New Haven, OH 93694\u0026#34;, \u0026#34;pager\u0026#34; : \u0026#34;+1 850 883 8888\u0026#34;, \u0026#34;cn\u0026#34; : \u0026#34;Aaren Atp\u0026#34; } } ] }   Command to invoke Data REST API against specific Oracle Unified Directory Interface:\n$ curl --noproxy \u0026#34;*\u0026#34; -k --location \\ --request GET \u0026#39;https://oud-ds-rs-http-0/rest/v1/directory/uid=user.1,ou=People,dc=example,dc=com?scope=sub\u0026amp;attributes=*\u0026#39; \\ --header \u0026#39;Authorization: Basic \u0026lt;Base64 of userDN:userPassword\u0026gt;\u0026#39; | json_pp  For this example, it is assumed that the value \u0026lsquo;oud-ds-rs\u0026rsquo; is used as the deployment/release name for helm chart installation. It is assumed that \u0026lsquo;oud-ds-rs-http-0\u0026rsquo; points to an External LoadBalancer    HTTPS/REST API against Kubernetes NodePort for Ingress Controller Service Note: In all the examples below:\na) | json_pp is used to format output in readable json format on the client side. It can be ignored if you do not have the json_pp library.\nb) Base64 of userDN:userPassword can be generated using echo -n \u0026quot;userDN:userPassword\u0026quot; | base64.\nc) It is assumed that the value \u0026lsquo;oud-ds-rs\u0026rsquo; is used as the deployment/release name for helm chart installation.\n  Command to invoke Data SCIM API:\n$ curl --noproxy \u0026#34;*\u0026#34; -k --location \\ --request GET \u0026#39;https://\u0026lt;Kubernetes Node\u0026gt;:30443/iam/directory/oud/scim/v1/Users\u0026#39; \\ --header \u0026#39;Authorization: Basic \u0026lt;Base64 of userDN:userPassword\u0026gt;\u0026#39; | json_pp The output will look similar to the following:\n{ \u0026#34;Resources\u0026#34; : [ { \u0026#34;id\u0026#34; : \u0026#34;ad55a34a-763f-358f-93f9-da86f9ecd9e4\u0026#34;, \u0026#34;userName\u0026#34; : [ { \u0026#34;value\u0026#34; : \u0026#34;user.0\u0026#34; } ], \u0026#34;schemas\u0026#34; : [ \u0026#34;urn:ietf:params:scim:schemas:core:2.0:User\u0026#34;, \u0026#34;urn:ietf:params:scim:schemas:extension:oracle:2.0:OUD:User\u0026#34;, \u0026#34;urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\u0026#34; ], \u0026#34;meta\u0026#34; : { \u0026#34;location\u0026#34; : \u0026#34;http://\u0026lt;Kubernetes Node\u0026gt;:30443/iam/directory/oud/scim/v1/Users/ad55a34a-763f-358f-93f9-da86f9ecd9e4\u0026#34;, \u0026#34;resourceType\u0026#34; : \u0026#34;User\u0026#34; }, \u0026#34;addresses\u0026#34; : [ { \u0026#34;postalCode\u0026#34; : \u0026#34;50369\u0026#34;, \u0026#34;formatted\u0026#34; : \u0026#34;Aaccf Amar$01251 Chestnut Street$Panama City, DE 50369\u0026#34;, \u0026#34;streetAddress\u0026#34; : \u0026#34;01251 Chestnut Street\u0026#34;, \u0026#34;locality\u0026#34; : \u0026#34;Panama City\u0026#34;, \u0026#34;region\u0026#34; : \u0026#34;DE\u0026#34; } ], \u0026#34;urn:ietf:params:scim:schemas:extension:oracle:2.0:OUD:User\u0026#34; : { \u0026#34;description\u0026#34; : [ { \u0026#34;value\u0026#34; : \u0026#34;This is the description for Aaccf Amar.\u0026#34; } ], \u0026#34;mobile\u0026#34; : [ { \u0026#34;value\u0026#34; : \u0026#34;+1 010 154 3228\u0026#34; } ], \u0026#34;pager\u0026#34; : [ { \u0026#34;value\u0026#34; : \u0026#34;+1 779 041 6341\u0026#34; } ], \u0026#34;objectClass\u0026#34; : [ { \u0026#34;value\u0026#34; : \u0026#34;top\u0026#34; }, { \u0026#34;value\u0026#34; : \u0026#34;organizationalperson\u0026#34; }, { \u0026#34;value\u0026#34; : \u0026#34;person\u0026#34; }, { \u0026#34;value\u0026#34; : \u0026#34;inetorgperson\u0026#34; } ], \u0026#34;initials\u0026#34; : [ { \u0026#34;value\u0026#34; : \u0026#34;ASA\u0026#34; } ], \u0026#34;homePhone\u0026#34; : [ { \u0026#34;value\u0026#34; : \u0026#34;+1 225 216 5900\u0026#34; } ] }, \u0026#34;name\u0026#34; : [ { \u0026#34;givenName\u0026#34; : \u0026#34;Aaccf\u0026#34;, \u0026#34;familyName\u0026#34; : \u0026#34;Amar\u0026#34;, \u0026#34;formatted\u0026#34; : \u0026#34;Aaccf Amar\u0026#34; } ], \u0026#34;emails\u0026#34; : [ { \u0026#34;value\u0026#34; : \u0026#34;user.0@maildomain.net\u0026#34; } ], \u0026#34;phoneNumbers\u0026#34; : [ { \u0026#34;value\u0026#34; : \u0026#34;+1 685 622 6202\u0026#34; } ], \u0026#34;urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\u0026#34; : { \u0026#34;employeeNumber\u0026#34; : [ { \u0026#34;value\u0026#34; : \u0026#34;0\u0026#34; } ] } } , . . . }   Command to invoke Data SCIM API against specific Oracle Unified Directory Interface:\n$ curl --noproxy \u0026#34;*\u0026#34; -k --location \\ --request GET \u0026#39;https://oud-ds-rs-http-0:30443/iam/directory/oud/scim/v1/Users\u0026#39; \\ --header \u0026#39;Authorization: Basic \u0026lt;Base64 of userDN:userPassword\u0026gt;\u0026#39; | json_pp   HTTPS/REST Admin API Note: In all the examples below:\na) | json_pp is used to format output in readable json format on the client side. It can be ignored if you do not have the json_pp library.\nb) Base64 of userDN:userPassword can be generated using echo -n \u0026quot;userDN:userPassword\u0026quot; | base64.\n  Command to invoke Admin REST API against External LBR:\n$ curl --noproxy \u0026#34;*\u0026#34; -k --insecure --location \\ --request GET \u0026#39;https://\u0026lt;External LBR Host\u0026gt;/rest/v1/admin/?scope=base\u0026amp;attributes=vendorName\u0026amp;attributes=vendorVersion\u0026amp;attributes=ds-private-naming-contexts\u0026amp;attributes=subschemaSubentry\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Basic \u0026lt;Base64 of userDN:userPassword\u0026gt;\u0026#39; | json_pp The output will look similar to the following:\n{ \u0026#34;totalResults\u0026#34; : 1, \u0026#34;searchResultEntries\u0026#34; : [ { \u0026#34;dn\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;attributes\u0026#34; : { \u0026#34;vendorVersion\u0026#34; : \u0026#34;Oracle Unified Directory 12.2.1.4.0\u0026#34;, \u0026#34;ds-private-naming-contexts\u0026#34; : [ \u0026#34;cn=admin data\u0026#34;, \u0026#34;cn=ads-truststore\u0026#34;, \u0026#34;cn=backups\u0026#34;, \u0026#34;cn=config\u0026#34;, \u0026#34;cn=monitor\u0026#34;, \u0026#34;cn=schema\u0026#34;, \u0026#34;cn=tasks\u0026#34;, \u0026#34;cn=virtual acis\u0026#34;, \u0026#34;dc=replicationchanges\u0026#34; ], \u0026#34;subschemaSubentry\u0026#34; : \u0026#34;cn=schema\u0026#34;, \u0026#34;vendorName\u0026#34; : \u0026#34;Oracle Corporation\u0026#34; } } ], \u0026#34;msgType\u0026#34; : \u0026#34;urn:ietf:params:rest:schemas:oracle:oud:1.0:SearchResponse\u0026#34; }   Command to invoke Admin REST API against specific Oracle Unified Directory Admin Interface:\n$ curl --noproxy \u0026#34;*\u0026#34; -k --insecure --location \\ --request GET \u0026#39;https://oud-ds-rs-admin-0/rest/v1/admin/?scope=base\u0026amp;attributes=vendorName\u0026amp;attributes=vendorVersion\u0026amp;attributes=ds-private-naming-contexts\u0026amp;attributes=subschemaSubentry\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Basic \u0026lt;Base64 of userDN:userPassword\u0026gt;\u0026#39; | json_pp   Command to invoke Admin REST API against Kubernetes NodePort for Ingress Controller Service\n$ curl --noproxy \u0026#34;*\u0026#34; -k --insecure --location \\ --request GET \u0026#39;https://oud-ds-rs-admin-0:30443/rest/v1/admin/?scope=base\u0026amp;attributes=vendorName\u0026amp;attributes=vendorVersion\u0026amp;attributes=ds-private-naming-contexts\u0026amp;attributes=subschemaSubentry\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Basic \u0026lt;Base64 of userDN:userPassword\u0026gt;\u0026#39; | json_pp   "
},
{
	"uri": "/fmw-kubernetes/idm-products/oudsm/configure-ingress/",
	"title": "Configure an Ingress for OUDSM",
	"tags": [],
	"description": "This document provides steps to configure an ingress controller to direct traffic to OUDSM.",
	"content": "  Introduction\n  Install NGINX\na. Configure the repository\nb. Create a namespace\nc. Install NGINX using helm\n  Access to interfaces through ingress\n  Introduction The instructions below explain how to set up NGINX as an ingress for OUDSM.\nInstall NGINX Use Helm to install NGINX.\nConfigure the repository   Add the Helm chart repository for installing NGINX using the following command:\n$ helm repo add stable https://kubernetes.github.io/ingress-nginx The output will look similar to the following:\n\u0026quot;stable\u0026quot; has been added to your repositories   Update the repository using the following command:\n$ helm repo update The output will look similar to the following:\nHang tight while we grab the latest from your chart repositories... ...Successfully got an update from the \u0026quot;stable\u0026quot; chart repository Update Complete. Happy Helming!   Create a namespace   Create a Kubernetes namespace for NGINX:\n$ kubectl create namespace \u0026lt;namespace\u0026gt; For example:\n$ kubectl create namespace mynginx The output will look similar to the following:\nnamespace/mynginx created   Install NGINX using helm   Create a $WORKDIR/kubernetes/helm/nginx-ingress-values-override.yaml that contains the following:\nNote: The configuration below deploys an ingress using LoadBalancer. If you prefer to use NodePort, change the configuration accordingly. For more details about NGINX configuration see: NGINX Ingress Controller.\ncontroller: admissionWebhooks: enabled: false extraArgs: # The secret referred to by this flag contains the default certificate to be used when accessing the catch-all server. # If this flag is not provided NGINX will use a self-signed certificate. # If the TLS Secret is in different namespace, name can be mentioned as \u0026lt;namespace\u0026gt;/\u0026lt;tlsSecretName\u0026gt; default-ssl-certificate: oudsmns/oudsm-tls-cert service: # controller service external IP addresses # externalIPs: # - \u0026lt; External IP Address \u0026gt; # To configure Ingress Controller Service as LoadBalancer type of Service # Based on the Kubernetes configuration, External LoadBalancer would be linked to the Ingress Controller Service type: LoadBalancer # Configuration for NodePort to be used for Ports exposed through Ingress # If NodePorts are not defined/configured, Node Port would be assigned automatically by Kubernetes # These NodePorts are helpful while accessing services directly through Ingress and without having External Load Balancer. nodePorts: # For HTTP Interface exposed through LoadBalancer/Ingress http: 30080 # For HTTPS Interface exposed through LoadBalancer/Ingress https: 30443   To install and configure NGINX ingress issue the following command:\n$ helm install --namespace \u0026lt;namespace\u0026gt; \\ --values nginx-ingress-values-override.yaml \\ lbr-nginx stable/ingress-nginx Where:\n lbr-nginx is your deployment name stable/ingress-nginx is the chart reference  For example:\n$ helm install --namespace mynginx \\ --values nginx-ingress-values-override.yaml \\ lbr-nginx stable/ingress-nginx The output will be similar to the following:\nNAME: lbr-nginx LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: mynginx STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The ingress-nginx controller has been installed. It may take a few minutes for the LoadBalancer IP to be available. You can watch the status by running 'kubectl --namespace mynginx get services -o wide -w lbr-nginx-ingress-nginx-controller' An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: example namespace: foo spec: ingressClassName: nginx rules: - host: www.example.com http: paths: - pathType: Prefix backend: service: name: exampleService port: number: 80 path: / # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls   Access to interfaces through ingress Using the Helm chart, ingress objects are created according to configuration. The following table details the rules configured in ingress object(s) for access to Oracle Unified Directory Services Manager Interfaces through ingress.\n   Port NodePort Host Example Hostname Path Backend Service:Port Example Service Name:Port     http/https 30080/30443 \u0026lt;deployment/release name\u0026gt;-N oudsm-N * \u0026lt;deployment/release name\u0026gt;-N:http oudsm-1:http   http/https 30080/30443 * * /oudsm/console \u0026lt;deployment/release name\u0026gt;-lbr:http oudsm-lbr:http     In the table above, the Example Name for each Object is based on the value \u0026lsquo;oudsm\u0026rsquo; as the deployment/release name for the Helm chart installation. The NodePorts mentioned in the table are according to ingress configuration described in previous section. When an External LoadBalancer is not available/configured, interfaces can be accessed through NodePort on the Kubernetes node.  Changes in /etc/hosts to validate hostname based ingress rules If it is not possible to have LoadBalancer configuration updated to have host names added for Oracle Unified Directory Services Manager Interfaces, then the following entries can be added in /etc/hosts files on the host from where Oracle Unified Directory Services Manager interfaces would be accessed.\n\u0026lt;IP Address of External LBR or Kubernetes Node\u0026gt;\toudsm oudsm-1 oudsm-2 oudsm-N  In the table above, host names are based on the value \u0026lsquo;oudsm\u0026rsquo; as the deployment/release name for the Helm chart installation. When an External LoadBalancer is not available/configured, Interfaces can be accessed through NodePort on the Kubernetes Node.  Validate OUDSM URL\u0026rsquo;s   Launch a browser and access the OUDSM console.\n If using an External LoadBalancer: https://\u0026lt;External LBR Host\u0026gt;/oudsm. If not using an External LoadBalancer use https://\u0026lt;Kubernetes Node\u0026gt;:30443/oudsm.    Access the WebLogic Administration console by accessing the following URL and login with weblogic/\u0026lt;password\u0026gt; where weblogic/\u0026lt;password\u0026gt; is the adminUser and adminPass set when creating the OUDSM instance.\n If using an External LoadBalancer: https://\u0026lt;External LBR Host\u0026gt;/console. If not using an External LoadBalancer use https://\u0026lt;Kubernetes Node\u0026gt;:30443/console.    "
},
{
	"uri": "/fmw-kubernetes/ohs/manage-ohs-containers/",
	"title": "Manage OHS Domains",
	"tags": [],
	"description": "This document provides steps to manage the OHS container.",
	"content": "Important considerations for Oracle HTTP Server containers in Kubernetes.\n a. Domain Lifecycle  Learn about the domain lifecycle of an OHS container.\n b. Modifying the OHS container  Learn about modifying the OHS configuration.\n c. Delete the OHS container  Learn about the steps to delete the OHS container.\n "
},
{
	"uri": "/fmw-kubernetes/soa-domains/edg-guide/",
	"title": "Enterprise Deployment Guide",
	"tags": [],
	"description": "Enterprise Deployment Guide for Oracle SOA Suite on Kubernetes.",
	"content": " This Enterprise Deployment Guide is for preview release.\n This section provides information on the Enterprise Deployment Guide (single data center reference in Maximum Availability Architectures Guide).\n Topology  Topology for Oracle SOA Suite Enterprise Deployment on Kubernetes.\n Setup steps  Set up Oracle SOA Suite Enterprise Deployment on Kubernetes.\n "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/oracle-cloud/",
	"title": "Oracle Cloud Infrastructure",
	"tags": [],
	"description": "",
	"content": "This is a guide to run WebLogic Kubernetes Operator managed WebCenter Content domain on Oracle Cloud Infrastructure. This section of the documentation is certified for Kubernetes version 1.23.4+, WebLogic Kubernetes Operator version 3.4.2 and Oracle WebCenter Content 12.2.1.4 July'22 PSU (container image for this release can be downloaded from My Oracle Support MOS patch 34409720).\n Preparing an OKE environment  Running WebLogic Kubernetes Operator managed WebCenter Content domain on Oracle Kubernetes Engine (OKE).\n Preparing a file system  Running WebLogic Kubernetes Operator managed Oracle WebCenter Content domains on OKE\n Preparing OCIR  Running WebLogic Kubernetes Operator managed Oracle WebCenter Content domains on OKE\n Prepare environment for WCC domain  Prepare environment for WCC domain on Oracle Kubernetes Engine (OKE).\n Set up a load balancer  Configure different load balancers for Oracle WebCenter Content domains.\n Create Oracle WebCenter Content domain  Create Oracle WebCenter Content domain on Oracle Kubernetes Engine (OKE).\n Configuring Oracle WebCenter Content for Oracle Identity Cloud Service (IDCS)  Configuring Oracle WebCenter Content for Oracle Identity Cloud Service (IDCS)\n Configure an additional mount or shared space to a domain for Imaging and Capture  Configure an additional mount or shared space to a domain, for WebCenter Imaging and WebCenter Capture\n Launch Oracle Webcenter Content Native Applications in Containers deployed in Oracle Cloud Infrastructure  How to launch Oracle WebCenter Content native binaries from inside containerized environment in OCI.\n "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/",
	"title": "Oracle WebCenter Content",
	"tags": [],
	"description": "WebLogic Kubernetes Operator (the “operator”) supports deployment of Oracle WebCenter Content servers such as Oracle WebCenter Content(Content Server) and Oracle WebCenter Content(Inbound Refinery Server). Follow the instructions in this guide to set up Oracle WebCenter Content domain on Kubernetes.",
	"content": "In this release, Oracle WebCenter Content domain is supported using the “domain on a persistent volume” model only, where the domain home is located in a persistent volume (PV).\nThe WebLogic Kubernetes Operator has several key features to assist you with deploying and managing Oracle WebCenter Content domain in a Kubernetes environment. You can:\n Create Oracle WebCenter Content instances(Oracle WebCenter Content server \u0026amp; Oracle WebCenter Content Inbounnd Refinery server) in a Kubernetes persistent volume (PV). This PV can reside in an NFS file system or other Kubernetes volume types. Start servers based on declarative startup parameters and desired states. Expose the Oracle WebCenter Content services and composites for external access. Scale Oracle WebCenter Content domains by starting and stopping Managed Servers on demand, or by integrating with a REST API. Publish WebLogic Kubernetes Operator and WebLogic Server logs to Elasticsearch and interact with them in Kibana. Monitor the Oracle WebCenter Content instance using Prometheus and Grafana.  Current production release The current supported production release of WebLogic Kubernetes Operator, for Oracle WebCenter Content domain deployment is 3.4.2.\nRecent changes See the Release Notes for recent changes for Oracle WebCenter Content domain deployment on Kubernetes.\nLimitations See here for limitations in this release.\nAbout this documentation This documentation includes sections targeted to different audiences. To help you find what you are looking for easily, please consult this table of contents:\n  Quick Start explains how to quickly get an Oracle WebCenter Content instance running, using the defaults. Note that this is only for development and test purposes.\n  Install Guide and Administration Guide provide detailed information about all aspects of using WebLogic Kubernetes Operator including:\n Installing and configuring WebLogic Kubernetes Operator. Using WebLogic Kubernetes Operator to create and manage Oracle WebCenter Content domain. Configuring Kubernetes load balancers. Configuring Custom SSL certificates. Configuring Elasticsearch and Kibana to access the WebLogic Kubernetes Operator and WebLogic Server log files. Deploying composite applications for Oracle WebCenter Content. Patching an Oracle WebCenter Content Docker image. Removing/deleting domain. And much more!    Documentation for earlier releases To view documentation for an earlier release, see:\n Version 22.2.3 Version 22.1.3 Version 21.4.3 Version 21.2.3 Version 21.1.2  Additional reading Oracle WebCenter Content domain deployment on Kubernetes leverages WebLogic Kubernetes Operator framework.\n To develop an understanding of WebLogic Kubernetes Operator, including design, architecture, domain life cycle management, and configuration overrides, review the WebLogic Kubernetes Operator documentation. To learn more about the Oracle WebCenter Content architecture and components, see Understanding Oracle WebCenter Content.  "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/oracle-cloud/",
	"title": "Oracle Cloud Infrastructure",
	"tags": [],
	"description": "Setting up WebCenter Sites domains with WebLogic Kubernetes Operator",
	"content": "This is a guide to run WebLogic Kubernetes Operator managed WebcenterSites domains on Oracle Cloud Infrastructure.\n"
},
{
	"uri": "/fmw-kubernetes/soa-domains/adminguide/persisting-soa-adapters-customizations/",
	"title": "Persist adapter customizations",
	"tags": [],
	"description": "Persist the customizations done for Oracle SOA Suite adapters.",
	"content": "The lifetime for any customization done in a file on a server pod is up to the lifetime of that pod. The changes are not persisted once the pod goes down or is restarted.\nFor example, the following configuration updates DbAdapter.rar to create a new connection instance and creates data source CoffeeShop on the Administration Console for the same with jdbc/CoffeeShopDS.\nFile location: /u01/oracle/soa/soa/connectors/DbAdapter.rar\n\u0026lt;connection-instance\u0026gt; \u0026lt;jndi-name\u0026gt;eis/DB/CoffeeShop\u0026lt;/jndi-name\u0026gt; \u0026lt;connection-properties\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;XADataSourceName\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;jdbc/CoffeeShopDS\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;DataSourceName\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;PlatformClassName\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;org.eclipse.persistence.platform.database.Oracle10Platform\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;/connection-properties\u0026gt; \u0026lt;/connection-instance\u0026gt; If you need to persist the customizations for any of the adapter files under the SOA Oracle Home in the server pod, use one of the following methods.\nMethod 1: Customize the Adapter file using the WebLogic Administration Console:   Log in to the WebLogic Administration Console, and go to Deployments \u0026gt; ABC.rar \u0026gt; Configuration \u0026gt; Outbound Connection Pools.\n  Click New to create a new connection, then provide a new connection name, and click Finish.\n  Go back to the new connection, update the properties as required, and save.\n  Under Deployments, select ABC.rar, then Update.\nThis step asks for the Plan.xml location. This location by default will be in ${ORACLE_HOME}/soa/soa which is not under Persistent Volume (PV). Therefore, provide the domain\u0026rsquo;s PV location such as {DOMAIN_HOME}/soainfra/servers.\nNow the Plan.xml will be persisted under this location for each Managed Server.\n  Method 2: Customize the Adapter file on the Worker Node:   Copy ABC.rar from the server pod to a PV path:\n$ kubectl cp \u0026lt;namespace\u0026gt;/\u0026lt;SOA Managed Server pod name\u0026gt;:\u0026lt;full path of .rar file\u0026gt; \u0026lt;destination path inside PV\u0026gt; For example:\n$ kubectl cp soans/soainfra-soa-server1:/u01/oracle/soa/soa/connectors/ABC.rar ${DockerVolume}/domains/soainfra/servers/ABC.rar or do a normal file copy between these locations after entering (using kubectl exec) in to the Managed Server pod.\n  Unrar ABC.rar.\n  Update the new connection details in the weblogic-ra.xml file under META_INF.\n  In the WebLogic Administration Console, under Deployments, select ABC.rar, then Update.\n  Select the ABC.rar path as the new location, which is ${DOMAIN_HOME}/user_projects/domains/soainfra/servers/ABC.rar and click Update.\n  Verify that the plan.xml or updated .rar should be persisted in the PV.\n  "
},
{
	"uri": "/fmw-kubernetes/ohs/create-or-update-image/",
	"title": "Create or update an image",
	"tags": [],
	"description": "Create or update an Oracle HTTP Server (OHS) container image used for deploying OHS domains.",
	"content": "As described in Prepare Your Environment you can create your own OHS container image. If you have access to the My Oracle Support (MOS), and there is a need to build a new image with an interim or one off patch, it is recommended to use the WebLogic Image Tool to build an Oracle HTTP Server image for production deployments.\nCreate or update an Oracle HTTP Server image using the WebLogic Image Tool Using the WebLogic Image Tool, you can create a new Oracle HTTP Server image with PSU\u0026rsquo;s and interim patches or update an existing image with one or more interim patches.\n Recommendations:\n Use create for creating a new Oracle HTTP Server image containing the Oracle HTTP Server binaries, bundle patch and interim patches. This is the recommended approach if you have access to the OHS patches because it optimizes the size of the image. Use update for patching an existing Oracle HTTP Server image with a single interim patch. Note that the patched image size may increase considerably due to additional image layers introduced by the patch application tool.   Create an image Set up the WebLogic Image Tool  Prerequisites Set up the WebLogic Image Tool Validate setup WebLogic Image Tool build directory WebLogic Image Tool cache  Prerequisites Verify that your environment meets the following prerequisites:\n Docker client and daemon on the build machine, with minimum Docker version 18.03.1.ce. Bash version 4.0 or later, to enable the command complete feature. JAVA_HOME environment variable set to the appropriate JDK location e.g: /scratch/export/oracle/product/jdk  Set up the WebLogic Image Tool To set up the WebLogic Image Tool:\n  Create a working directory and change to it:\n$ mkdir \u0026lt;workdir\u0026gt; $ cd \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/imagetool-setup $ cd /scratch/imagetool-setup   Download the latest version of the WebLogic Image Tool from the releases page.\n$ wget https://github.com/oracle/weblogic-image-tool/releases/download/release-X.X.X/imagetool.zip where X.X.X is the latest release referenced on the releases page.\n Note: You must use WebLogic Image Tool 1.14.2 or later.\n   Unzip the release ZIP file in the imagetool-setup directory.\n$ unzip imagetool.zip   Execute the following commands to set up the WebLogic Image Tool:\n$ cd \u0026lt;workdir\u0026gt;/imagetool-setup/imagetool/bin $ source setup.sh For example:\n$ cd /scratch/imagetool-setup/imagetool/bin $ source setup.sh   Validate setup To validate the setup of the WebLogic Image Tool:\n  Enter the following command to retrieve the version of the WebLogic Image Tool:\n$ imagetool --version   Enter imagetool then press the Tab key to display the available imagetool commands:\n$ imagetool \u0026lt;TAB\u0026gt; cache create help rebase update   WebLogic Image Tool build directory The WebLogic Image Tool creates a temporary Docker context directory, prefixed by wlsimgbuilder_temp, every time the tool runs. Under normal circumstances, this context directory will be deleted. However, if the process is aborted or the tool is unable to remove the directory, it is safe for you to delete it manually. By default, the WebLogic Image Tool creates the Docker context directory under the user\u0026rsquo;s home directory. If you prefer to use a different directory for the temporary context, set the environment variable WLSIMG_BLDDIR:\n$ export WLSIMG_BLDDIR=\u0026#34;/path/to/build/dir\u0026#34; WebLogic Image Tool cache The WebLogic Image Tool maintains a local file cache store. This store is used to look up where the OHS and JDK installers, and OHS patches reside in the local file system. By default, the cache store is located in the user\u0026rsquo;s $HOME/cache directory. Under this directory, the lookup information is stored in the .metadata file. All automatically downloaded patches also reside in this directory. You can change the default cache store location by setting the environment variable WLSIMG_CACHEDIR:\n$ export WLSIMG_CACHEDIR=\u0026#34;/path/to/cachedir\u0026#34; Set up additional build scripts Creating an Oracle HTTP Server container image using the WebLogic Image Tool requires additional container scripts for Oracle HTTP Server domains.\n  Clone the docker-images repository to set up those scripts. In these steps, this directory is DOCKER_REPO:\n$ cd \u0026lt;workdir\u0026gt;/imagetool-setup $ git clone https://github.com/oracle/docker-images.git For example:\n$ cd /scratch/imagetool-setup $ git clone https://github.com/oracle/docker-images.git    Note: If you want to create the image continue with the following steps, otherwise to update the image see update an image.\n Create an image After setting up the WebLogic Image Tool, follow these steps to use the WebLogic Image Tool to create a new Oracle HTTP Server image.\nExport the PWD variable In order for the WebLogic Image Tool to build OHS with all the latest patches, the image creation downloads patches from My Oracle Support.\nDuring the image build you are asked to enter your My Oracle Support credentials, however the password is passed as a variable. Set the variable as follows:\nexport MYPWD=\u0026quot;MY_ORACLE_SUPPORT_PWD\u0026quot; Download the Oracle HTTP Server installation binaries and patches You must download the required Oracle HTTP Server installation binaries and patches as listed below from Oracle Software Delivery Cloud and My Oracle Support. Save them in a directory of your choice.\nThe installation binaries and patches required are:\n  Oracle Web Tier 12.2.1.4.0\n V983369-01.zip    Oracle JDK v8\n jdk-8uXXX-linux-x64.tar.gz    Oracle Database 19c Upgrade for FMW 12.2.1.4.0 (OID/OHS/OTD homes only)\n Patch 34761383 DB Client 19c Upgrade for FMW 12.2.1.4.0 (OID/OHS/OTD homes only)    Update required build files The following files are used for creating the image:\n additionalBuildCmds.txt buildArgs    Create the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleHTTPServer/additionalBuildCmds.txt file as follows and change the following:\n[package-manager-packages] binutils make glibc-devel procps [final-build-commands] ENV PATH=$PATH:/u01/oracle/ohssa/oracle_common/common/bin \\ NM_PORT=5556 \\ OHS_LISTEN_PORT=7777 \\ OHS_SSL_PORT=4443 \\ MW_HOME=/u01/oracle/ohssa \\ DOMAIN_NAME=ohsDomain \\ OHS_COMPONENT_NAME=ohs1 \\ PATH=$PATH:$ORACLE_HOME/oracle_common/common/bin:$ORACLE_HOME/user_projects/domains/ohsDomain/bin:/u01/oracle/ \\ WLST_HOME=/u01/oracle/ohssa/oracle_common/common/bin COPY --chown=oracle:root files/create-sa-ohs-domain.py files/configureWLSProxyPlugin.sh files/mod_wl_ohs.conf.sample files/provisionOHS.sh files/start-ohs.py files/stop-ohs.py files/helloWorld.html /u01/oracle/ WORKDIR ${ORACLE_HOME} CMD [\u0026quot;/u01/oracle/provisionOHS.sh\u0026quot;] Note: oracle:root is used for OpenShift which has more stringent policies. Users who do not want those permissions can change to the permissions they require.\n  Create the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleHTTPServer/buildArgs file as follows and change the following:\n \u0026lt;workdir\u0026gt; to your working directory, for example /scratch/ %BUILDTAG% to the tag you want create for the image, for example oracle/ohs:12.2.1.4-db19 %JDK_VERSION% to the version of your JDK, for example 8uXXX \u0026lt;user\u0026gt; to your My Oracle Support username  create --tag=%BUILDTAG% --additionalBuildCommands /\u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleHTTPServer/additionalBuildCmds.txt --additionalBuildFiles \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/create-sa-ohs-domain.py,\u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/provisionOHS.sh,\u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/configureWLSProxyPlugin.sh,\u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/mod_wl_ohs.conf.sample,\u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/start-ohs.py,\u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/stop-ohs.py,\u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/helloWorld.html --type=OHS --pull --recommendedPatches --chown=oracle:root --user=\u0026lt;user\u0026gt; --passwordEnv=MYPWD --version=12.2.1.4.0 --jdkVersion=\u0026lt;latest jdk 8 update\u0026gt; For example:\ncreate --tag=oracle/ohs:12.2.1.4-db19 --additionalBuildCommands /scratch/imagetool-setup/docker-images/OracleHTTPServer/additionalBuildCmds.txt --additionalBuildFiles /scratch/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/create-sa-ohs-domain.py,/scratch/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/provisionOHS.sh,/scratch/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/configureWLSProxyPlugin.sh,/scratch/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/mod_wl_ohs.conf.sample,/scratch/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/start-ohs.py,/scratch/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/stop-ohs.py,/scratch/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/helloWorld.html --type=OHS --pull --recommendedPatches --chown=oracle:root --user=user@example.com --passwordEnv=MYPWD --version=12.2.1.4.0 --jdkVersion=8u421 Refer to this page for the complete list of options available with the WebLogic Image Tool create command.\n  Create the image   Add a JDK package to the WebLogic Image Tool cache. For example:\n$ imagetool cache addInstaller --type jdk --version 8uXXX --path \u0026lt;download location\u0026gt;/jdk-8uXXX-linux-x64.tar.gz where XXX is the JDK version downloaded.\n  Add the downloaded installation binaries to the WebLogic Image Tool cache. For example:\n$ imagetool cache addInstaller --type ohs --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/V983369-01.zip $ imagetool cache addInstaller --type db19 --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/p34761383_122140_Linux-x86-64.zip   Create the Oracle HTTP Server image:\n$ imagetool @\u0026lt;absolute path to buildargs file\u0026gt;  Note: Make sure that the absolute path to the buildargs file is prepended with a @ character, as shown in the example above.\n For example:\n$ imagetool @/scratch/imagetool-setup/docker-images/OracleHTTPServer/buildArgs   Check the created image using the docker images command:\n$ docker images | grep OHS The output will look similar to the following:\noracle/ohs:12.2.1.4-db19 12.2.1.4.0 ad732fc7c16b About a minute ago 3.83GB   If you want to see what patches were installed, you can run:\n$ imagetool inspect --image=\u0026lt;REPOSITORY\u0026gt;:\u0026lt;TAG\u0026gt; --patches For example:\n$ imagetool inspect --image=oracle/ohs:12.2.1.4-db19 --patches   Run the following command to save the container image to a tar file:\n$ docker save -o \u0026lt;path\u0026gt;/\u0026lt;file\u0026gt;.tar \u0026lt;image\u0026gt; For example:\n$ docker save -o $WORKDIR/ohs12.2.1.4-db19.tar oracle/ohs:12.2.1.4-db19   Update an image The steps below show how to update an existing Oracle HTTP Server image with an interim patch.\nThe container image to be patched must be loaded in the local docker images repository before attempting these steps.\nIn the examples below the image oracle/OHS:12.2.1.4.0 is updated with an interim patch.\n$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE oracle/ohs:12.2.1.4-db19 12.2.1.4.0 b051804ba15f 3 months ago 3.83GB   Set up the WebLogic Image Tool.\n  Download the required interim patch(es) and latest Opatch (28186730) from My Oracle Support. and save them in a directory of your choice.\n  Add the OPatch patch to the WebLogic Image Tool cache, for example:\n$ imagetool cache addEntry --key 28186730_13.9.4.2.17 --value \u0026lt;downloaded-patches-location\u0026gt;/p28186730_1394217_Generic.zip   Execute the imagetool cache addEntry command for each patch to add the required patch(es) to the WebLogic Image Tool cache. For example, to add patch p6666666_12214241121_Generic.zip:\nNote: This is not a real patch number, it is used purely for an example.\n$ imagetool cache addEntry --key=6666666_12.2.1.4.241121 --value \u0026lt;downloaded-patches-location\u0026gt;/p6666666_12214241121_Generic.zip   Provide the following arguments to the WebLogic Image Tool update command:\n –-fromImage - Identify the image that needs to be updated. In the example below, the image to be updated is oracle/OHS:12.2.1.4.0. –-patches - Multiple patches can be specified as a comma-separated list. --tag - Specify the new tag to be applied for the image being built.  Refer here for the complete list of options available with the WebLogic Image Tool update command.\n Note: The WebLogic Image Tool cache should have the latest OPatch zip. The WebLogic Image Tool will update the OPatch if it is not already updated in the image.\n For example:\n$ imagetool update --fromImage oracle/ohs:12.2.1.4-db19 --tag=oracle/ohs-new:12.2.1.4.0 --patches=6666666_12.2.1.4.241121 --opatchBugNumber=28186730_13.9.4.2.17  Note: If the command fails because the files in the image being upgraded are not owned by oracle:root, then add the parameter --chown \u0026lt;userid\u0026gt;:\u0026lt;groupid\u0026gt; to correspond with the values returned in the error.\n   Check the built image using the docker images command:\n$ docker images | grep OHS The output will look similar to the following:\nREPOSITORY TAG IMAGE ID CREATED SIZE oracle/ohs-new:12.2.1.4-db19 12.2.1.4.0 78ccd1ad67eb 5 minutes ago 4.5GB oracle/ohs:12.2.1.4-db19 12.2.1.4.0 b051804ba15f 3 months ago 3.83GB   Run the following command to save the patched container image to a tar file:\n$ docker save -o \u0026lt;path\u0026gt;/\u0026lt;file\u0026gt;.tar \u0026lt;image\u0026gt; For example:\n$ docker save -o $WORKDIR/ohs-new12.2.1.4-db19.tar oracle/ohs-new:12.2.1.4-db19:12.2.1.4.0   "
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/oracle-cloud/additional-steps-to-launch-native-binaries-in-oci/",
	"title": "Launch Oracle Webcenter Content Native Applications in Containers deployed in Oracle Cloud Infrastructure",
	"tags": [],
	"description": "How to launch Oracle WebCenter Content native binaries from inside containerized environment in OCI.",
	"content": "This section provides the steps required to use Oracle WebCenter Content native binaries with user interfaces, from containerized Managed Servers deployed in OCI.\nIssue with Launching Headful User Interfaces for Oracle WebCenter Content Native Binaries Oracle WebCenter Content (UCM) provide a set of native binaries with headful UIs, which are delivered as part of the product container image. WebCenter Content container images are, by default, created with Oracle slim linux image, which doesn\u0026rsquo;t come with all the packages pre-installed to support headful applications with UIs to be launched. UCM provides many such native binaries which uses JAVA AWT for UI support. With current Oracle WebCenter Content container images, native applications fails to run, being unable to launch UIs.\nThe following sections document the solution, by providing a set of instructions, enabling users to run UCM native applications with UIs.\nThese instructions are divided in two parts -\n Steps to update the existing container image Steps to launch native apps using VNC sessions  Steps to Update out-of-the-box Oracle WebCenter Content Container Image Using WebLogic Image Tool This section describes the method to update image with a OS package using WebLogic Image Tool. Please refer this for setting up the WebLogic Image Tool.\nAdditional Build Commands The installation of required OS packages in the image, can be done using yum command in additional build command option available in WebLogic Image Tool. Here is the sample additionalBuildCmds.txt file, to be used, to install required Linux packages (libXext.x86_64, libXrender.x86_64 and libXtst.x86_64).\n[final-build-commands] USER root RUN yum -y --downloaddir=/tmp/imagetool install libXext libXrender libXtst \\ \u0026amp;\u0026amp; yum -y --downloaddir=/tmp/imagetool clean all \\ \u0026amp;\u0026amp; rm -rf /var/cache/yum/* \\ \u0026amp;\u0026amp; rm -rf /tmp/imagetool USER oracle  Note: It is important to change the user to oracle, otherwise the user during the container execution will be root.\n Build arguments The arguments required for updating the image can be passed as file to the WebLogic Image Tool.\n'update' is the sub command to Image Tool for updating an existing docker image. '--fromImage' option provides the existing docker image that has to be updated. '--tag' option should be provided with the new tag for the updated image. '--additionalBuildCommands' option should be provided with the above created additional build commands file. '--chown oracle:root' option should be provided to update file permissions.  Below is a sample build argument (buildArgs) file, to be used for updating the image,\n update --fromImage \u0026lt;existing_WCContent_image_without_dependent_packages\u0026gt; --tag \u0026lt;name_of_updated_WCContent_image_to_be_built\u0026gt; --additionalBuildCommands ./additionalBuildCmds.txt --chown oracle:root Update Oracle WebCenter Content Container Image Now we can execute the WebLogic Image Tool to update the out-of-the-box image, using the build-argument file described above -\n$ imagetool @buildArgs WebLogic Image Tool provides multiple options for updating the image. For detailed information on the update options, please refer to this document.\nUpdating the image does not modify the \u0026lsquo;CMD\u0026rsquo; from the source image unless it is modified in the additional build commands.\n$ docker inspect -f '{{.Config.Cmd}}' \u0026lt;name_of_updated_Wccontent_image\u0026gt; [/u01/oracle/container-scripts/createDomainandStartAdmin.sh] Steps to launch Oracle WebCenter Content native applications using VNC sessions. Once updated image is successfully built and available on all required nodes, do the following:\na. Update the domain.yaml file with updated image name and apply the domain.yaml file.\n$ kubectl apply -f domain.yaml b. After applying the modified domain.yaml, pods will get restarted and start running with updated image with required packages.\n$ kubectl get pods -n \u0026lt;namespace_being_used_for_wccontent_domain\u0026gt; c. Install VNC SERVER on any one worker node, on which there is an UCM server pod deployed.\nd. After starting vncserver systemctl daemon in the Worker Node, execute the following command from Bastion Host to the Private Subnet Instance (Worker Node).\n# The default VNC port is 5900, but that number is incremented according to the configured display number. Thus, display 1 corresponds to 5901, display 2 to 5902, and so on. $ ssh -i \u0026lt;Workernode_private.key\u0026gt; -L 590\u0026lt;display_number\u0026gt;:localhost:590\u0026lt;display_number\u0026gt; -p 22 -L 590\u0026lt;display number\u0026gt;:localhost:590\u0026lt;display number\u0026gt; -N -f \u0026lt;user\u0026gt;@\u0026lt;Workernode_privateIPAddress\u0026gt; # Sample command $ ssh -i \u0026lt;Workernode_private.key\u0026gt; -L 5901:localhost:5901 -p 22 -L 5901:localhost:5901 -N -f opc@10.0.10.xx e. From personal client execute the below command with the above session opened.\n# Use any Linux emulator (like, Windows Power Shell for Windows) to run the following command $ ssh -i \u0026lt;Bastionnode_private.key\u0026gt; -L 590\u0026lt;display_number\u0026gt;:localhost:590\u0026lt;display_number\u0026gt; -p 22 -L 590\u0026lt;display_number\u0026gt;:localhost:590\u0026lt;display_number\u0026gt; -N -f \u0026lt;user\u0026gt;@\u0026lt;BastionHost_publicIPAddress\u0026gt; # Sample command $ ssh -i \u0026lt;Bastionnode_private.key\u0026gt; -L 5901:localhost:5901 -p 22 -L 5901:localhost:5901 -N -f opc@129.xxx.249.xxx f. Open VNC Client software in personal client and connect to Worker Node VNC Server using localhost:590\u0026lt;display_number\u0026gt;.\ng. Open a terminal once the VNC session to the Worker Node is connected -\n$ xhost + h. Run the following commands from Bastion Host terminal –\n# Get into the pod's (for example, wccinfra-ucm-server1) shell: $ kubectl exec -n wccns -it wccinfra-ucm-server1 -- /bin/bash # Traverse to the Native Binaries' location $ cd /u01/oracle/user_projects/domains/wccinfra/ucm/cs/bin # Set DISPLAY variable within the container $ export DISPLAY=\u0026lt;Workernode_privateIPAddress, where VNC session was created\u0026gt;:\u0026lt;dispay_number\u0026gt; # Sample command $ export DISPLAY=10.0.10.xx:1 # Launch any native UCM application, from within the container, like this: $ ./SystemProperties i. If the application has an UI, it\u0026rsquo;ll get launched now in the VNC session connected from personal client.\n"
},
{
	"uri": "/fmw-kubernetes/idm-products/oud/manage-oud-containers/",
	"title": "Manage Oracle Unified Directory Containers",
	"tags": [],
	"description": "This document provides steps manage Oracle Unified Directory containers.",
	"content": "Important considerations for Oracle Unified Directory instances in Kubernetes.\n a) Scaling Up/Down OUD Pods   Describes the steps for scaling up/down for OUD pods.\n b) Logging and Visualization for Helm Chart oud-ds-rs Deployment  Describes the steps for logging and visualization with Elasticsearch and Kibana.\n c) Monitoring an Oracle Unified Directory Instance  Describes the steps for Monitoring the Oracle Unified Directory environment.\n d. Kubernetes Horizontal Pod Autoscaler  Describes the steps for implementing the Horizontal Pod Autoscaler.\n "
},
{
	"uri": "/fmw-kubernetes/idm-products/oudsm/manage-oudsm-containers/",
	"title": "Manage Oracle Unified Directory Services Manager Containers",
	"tags": [],
	"description": "This document provides steps to manage Oracle Unified Directory Services Manager containers.",
	"content": "Important considerations for Oracle Unified Directory Services Manager instances in Kubernetes.\n a) Scaling Up/Down OUDSM Pods   Describes the steps for scaling up/down for OUDSM pods.\n b) Logging and Visualization for Helm Chart oudsm Deployment  Describes the steps for logging and visualization with Elasticsearch and Kibana.\n c) Monitoring an Oracle Unified Directory Services Manager Instance  Describes the steps for Monitoring the Oracle Unified Directory Services Manager environment.\n "
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/validate-domain-urls/",
	"title": "Validate Domain URLs",
	"tags": [],
	"description": "Sample for validating domain urls.",
	"content": "In this section you validate the OAM domain URLs are accessible via the NGINX ingress.\nValidate the OAM domain urls via the Ingress Launch a browser and access the following URL\u0026rsquo;s. Login with the weblogic username and password (weblogic/\u0026lt;password\u0026gt;).\nNote: The ${HOSTNAME}:${PORT} depends on the architecture configured, and your ingress setup as per Configuring an ingress for NGINX for the OAM Domain.\n   Console or Page URL     WebLogic Administration Console http(s)://${HOSTNAME}:${PORT}/console   Oracle Enterprise Manager Console http(s)://${HOSTNAME}:${PORT}/em   Oracle Access Management Console http(s)://${HOSTNAME}:${PORT}/oamconsole   Oracle Access Management Console http(s)://${HOSTNAME}:${PORT}/access   Logout URL http(s)://${HOSTNAME}:${PORT}/oam/server/logout    Note: WebLogic Administration Console and Oracle Enterprise Manager Console should only be used to monitor the servers in the OAM domain. To control the Administration Server and OAM Managed Servers (start/stop) you must use Kubernetes. See Domain Life Cycle  for more information.\nThe browser will give certificate errors if you used a self signed certificate and have not imported it into the browsers Certificate Authority store. If this occurs you can proceed with the connection and ignore the errors.\nAfter validating the URL\u0026rsquo;s proceed to Post Install Configuration.\n"
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/validate-domain-urls/",
	"title": "Validate domain URLs",
	"tags": [],
	"description": "Sample for validating domain urls.",
	"content": "In this section you validate the OIG domain URLs that are accessible via the NGINX ingress.\nMake sure you know the master hostname and port before proceeding.\nValidate the OIG domain urls via the ingress Launch a browser and access the following URL\u0026rsquo;s. Use http or https depending on whether you configured your ingress for non-ssl or ssl.\nLogin to the WebLogic Administration Console and Oracle Enterprise Manager Console with the WebLogic username and password (weblogic/\u0026lt;password\u0026gt;).\nLogin to Oracle Identity Governance with the xelsysadm username and password (xelsysadm/\u0026lt;password\u0026gt;).\nNote: If using a load balancer for your ingress replace ${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT} with ${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT}.\n   Console or Page URL     WebLogic Administration Console https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/console   Oracle Enterprise Manager Console https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/em   Oracle Identity System Administration https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/sysadmin   Oracle Identity Self Service https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/identity    Note: WebLogic Administration Console and Oracle Enterprise Manager Console should only be used to monitor the servers in the OIG domain. To control the Administration Server and OIG Managed Servers (start/stop) you must use Kubernetes. See Domain Life Cycle  for more information.\nThe browser will give certificate errors if you used a self signed certifcate and have not imported it into the browsers Certificate Authority store. If this occurs you can proceed with the connection and ignore the errors.\nAfter the URL\u0026rsquo;s have been verified follow Post install configuration.\n"
},
{
	"uri": "/fmw-kubernetes/wccontent-domains/appendix/",
	"title": "Appendix",
	"tags": [],
	"description": "",
	"content": "This section provides information on miscellaneous tasks related to Oracle WebCenter Content domain deployment on Kubernetes.\n Domain resource sizing  Describes the resourse sizing information for Oracle WebCenter Content domain setup on Kubernetes cluster.\n Quick start deployment guide  Describes how to quickly get an Oracle WebCenter Content domain instance running (using the defaults, nothing special) for development and test purposes.\n Security hardening  Review resources for the Docker and Kubernetes cluster hardening.\n "
},
{
	"uri": "/fmw-kubernetes/soa-domains/faq/",
	"title": "Frequently Asked Questions",
	"tags": [],
	"description": "This section describes known issues for Oracle SOA Suite domain deployment on Kubernetes. It also provides answers to frequently asked questions.",
	"content": "Overriding tuning parameters is not supported using configuration overrides The WebLogic Kubernetes Operator enables you to override some of the domain configuration using configuration overrides (also called situational configuration). See supported overrides. Overriding the tuning parameters such as MaxMessageSize and PAYLOAD, for Oracle SOA Suite domains is not supported using the configuration overrides feature. However, you can override them using the following steps:\n  Specify the new value using the environment variable K8S_REFCONF_OVERRIDES in serverPod.env section in domain.yaml configuration file (example path: \u0026lt;domain-creation-output-directory\u0026gt;/weblogic-domains/soainfra/domain.yaml) based on the servers to which the changes are to be applied.\nFor example, to override the value at the Administration Server pod level:\nspec: adminServer: serverPod: env: - name: K8S_REFCONF_OVERRIDES value: \u0026#34;-Dweblogic.MaxMessageSize=78787878\u0026#34; - name: USER_MEM_ARGS value: \u0026#39;-Djava.security.egd=file:/dev/./urandom -Xms512m -Xmx1024m \u0026#39; serverStartState: RUNNING For example, to override the value at a specific cluster level (soa_cluster or osb_cluster):\napiVersion: \u0026#34;weblogic.oracle/v1\u0026#34; kind: Cluster metadata: name: soainfra-soa-cluster # Update this with the namespace your domain will run in: namespace: soans labels: # Update this with the `domainUID` of your domain: weblogic.domainUID: soainfra spec: clusterName: soa_cluster serverService: precreateService: true serverPod: env: - name: K8S_REFCONF_OVERRIDES value: \u0026#34;-Dsoa.payload.threshold.kb=102410\u0026#34;  Note: When multiple system properties are specified for serverPod.env.value, make sure each system property is separated by a space.\n   Apply the updated domain.yaml file:\n$ kubectl apply -f domain.yaml  Note: The server pod(s) will be automatically restarted (rolling restart).\n   Deployments in the WebLogic Server Administration Console may display unexpected error In an Oracle SOA Suite environment deployed using the operator, accessing Deployments from the WebLogic Server Administration Console home page may display the error message Unexpected error encountered while obtaining monitoring information for applications. This error does not have any functional impact and can be ignored. You can verify that the applications are in Active state from the Control tab in Summary of deployments page.\nEnterprise Manager Console may display ADF_FACES-30200 error In an Oracle SOA Suite environment deployed using the operator, the Enterprise Manager Console may intermittently display the following error when the domain servers are restarted:\nADF_FACES-30200: For more information, please see the server\u0026#39;s error log for an entry beginning with: The UIViewRoot is null. Fatal exception during PhaseId: RESTORE_VIEW 1. You can refresh the Enterprise Manager Console URL to successfully log in to the Console.\nConfigure the external URL access for Oracle SOA Suite composite applications For Oracle SOA Suite composite applications to access the external URLs over the internet (if your cluster is behind a http proxy server), you must configure the following proxy parameters for Administration Server and Managed Server pods.\n-Dhttp.proxyHost=www-your-proxy.com -Dhttp.proxyPort=proxy-port -Dhttps.proxyHost=www-your-proxy.com -Dhttps.proxyPort=proxy-port -Dhttp.nonProxyHosts=\u0026#34;localhost|soainfra-adminserver|soainfra-soa-server1|soainfra-osb-server1|...soainfra-soa-serverN|*.svc.cluster.local|*.your.domain.com|/var/run/docker.sock\u0026#34; To do this, edit the domain.yaml configuration file and append the proxy parameters to the spec.serverPod.env.JAVA_OPTIONS environment variable value.\nFor example:\nserverPod: env: - name: JAVA_OPTIONS value: -Dweblogic.StdoutDebugEnabled=false -Dweblogic.ssl.Enabled=true -Dweblogic.security.SSL.ignoreHostnameVerification=true -Dhttp.proxyHost=www-your-proxy.com -Dhttp.proxyPort=proxy-port -Dhttps.proxyHost=www-your-proxy.com -Dhttps.proxyPort=proxy-port -Dhttp.nonProxyHosts=\u0026#34;localhost|soainfra-adminserver|soainfra-soa-server1|soainfra-osb-server1|...soainfra-soa-serverN|*.svc.cluster.local|*.your.domain.com|/var/run/docker.sock\u0026#34; - name: USER_MEM_ARGS value: \u0026#39;-Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx1024m \u0026#39; volumeMounts:  Note: The -Dhttp.nonProxyHosts parameter must have the pod names of the Administration Server and each Managed Server. For example: soainfra-adminserver, soainfra-soa-server1, soainfra-osb-server1, and so on.\n Apply the updated domain.yaml file:\n$ kubectl apply -f domain.yaml  Note: The server pod(s) will be automatically restarted (rolling restart).\n Configure the external access for the Oracle Enterprise Scheduler WebServices WSDL URLs In an Oracle SOA Suite domain deployed including the Oracle Enterprise Scheduler (ESS) component, the following ESS WebServices WSDL URLs shown in the table format in the ess/essWebServicesWsdl.jsp page are not reachable outside the Kubernetes cluster.\nESSWebService EssAsyncCallbackService EssWsJobAsyncCallbackService Follow these steps to configure the external access for the Oracle Enterprise Scheduler WebServices WSDL URLs:\n Log in to the Administration Console URL of the domain.\nFor example: http://\u0026lt;LOADBALANCER-HOST\u0026gt;:\u0026lt;port\u0026gt;/console In the Home Page, click Clusters. Then click the soa_cluster. Click the HTTP tab and then click Lock \u0026amp; Edit in the Change Center panel. Update the following values:  Frontend Host: host name of the load balancer. For example, domain1.example.com. Frontend HTTP Port: load balancer port. For example, 30305. Frontend HTTPS Port: load balancer https port. For example, 30443.   Click Save. Click Activate Changes in the Change Center panel. Restart the servers in the SOA cluster.   Note: Do not restart servers from the Administration Console.\n Missing gif images in Oracle Service Bus console pipeline configuration page In an Oracle SOA Suite domain environment upgraded to the release 21.1.2, some gif images are not rendered in the Oracle Serice Bus console pipeline configuration page, as their corresponding url paths are not exposed via the Ingress path rules in the earlier releases (for Non-SSL and SSL termination). To resolve this issue, perform the following steps to apply the latest ingress configuration:\n$ cd ${WORKDIR} $ helm upgrade \u0026lt;helm_release_for_ingress\u0026gt; \\ charts/ingress-per-domain \\ --namespace \u0026lt;domain_namespace\u0026gt; \\ --reuse-values  Note: helm_release_for_ingress is the ingress name used in the corresponding helm install command for the ingress installation.\n For example, to upgrade the NGINX based ingress configuration:\n$ cd ${WORKDIR} $ helm upgrade soa-nginx-ingress \\ charts/ingress-per-domain \\ --namespace soans \\ --reuse-values WebLogic Kubernetes Operator FAQs See the general frequently asked questions for using the WebLogic Kubernetes Operator.\n"
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/faq/",
	"title": "Frequently Asked Questions",
	"tags": [],
	"description": "This section describes known issues for Oracle WebCenter Sites domains deployment on Kubernetes. Also, provides answers to frequently asked questions.",
	"content": "Configure the external URL access for Oracle WebCenter Sites composite applications For Oracle WebCenter Sites composite applications to access the external URLs over the internet (if your cluster is behind a http proxy server), you must configure the following proxy parameters for Administration Server and Managed Server pods.\n-Dhttp.proxyHost=www-your-proxy.com -Dhttp.proxyPort=proxy-port -Dhttps.proxyHost=www-your-proxy.com -Dhttps.proxyPort=proxy-port -Dhttp.nonProxyHosts=\u0026#34;localhost|wcsitesinfra-adminserver|wcsitesinfra-wcsites-server1|*.svc.cluster.local|*.your.domain.com|/var/run/docker.sock\u0026#34; To do this, edit the domain.yaml configuration file and append the proxy parameters to the spec.serverPod.env.JAVA_OPTIONS environment variable value.\nFor example:\nserverPod: env: - name: JAVA_OPTIONS value: -Dweblogic.StdoutDebugEnabled=false -Dweblogic.ssl.Enabled=true -Dweblogic.security.SSL.ignoreHostnameVerification=true -Dhttp.proxyHost=www-your-proxy.com -Dhttp.proxyPort=proxy-port -Dhttps.proxyHost=www-your-proxy.com -Dhttps.proxyPort=proxy-port -Dhttp.nonProxyHosts=\u0026#34;localhost|wcsitesinfra-adminserver|wcsitesinfra-wcsites-server1|*.svc.cluster.local|*.your.domain.com|/var/run/docker.sock\u0026#34; - name: USER_MEM_ARGS value: \u0026#39;-Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx1024m \u0026#39; volumeMounts:  Note: The -Dhttp.nonProxyHosts parameter must have the pod names of the Administration Server and each Managed Server. For example: wcsitesinfra-adminserver, wcsitesinfra-wcsites-server1, and so on.\n Apply the updated domain.yaml file:\n$ kubectl apply -f domain.yaml  Note: The server pod(s) will be automatically restarted (rolling restart).\n Oracle WebLogic Server Kubernetes Operator FAQs See the general frequently asked questions for using the Oracle WebLogic Server Kubernetes operator.\n"
},
{
	"uri": "/fmw-kubernetes/soa-domains/adminguide/performing-wlst-operations/",
	"title": "Perform WLST operations",
	"tags": [],
	"description": "Perform WLST administration operations using a helper pod running in the same Kubernetes cluster as the Oracle SOA Suite domain.",
	"content": "You can use the WebLogic Scripting Tool (WLST) to manage a domain running in a Kubernetes cluster. Some of the many ways to do this are provided here.\nIf the Administration Server was configured to expose a T3 channel using exposeAdminT3Channel when creating the domain, refer to Use WLST.\nIf you do not want to expose additional ports and perform WLST administration operations using the existing Kubernetes services created by the WebLogic Server Kubernetes operator, then follow this documentation. Here we will be creating and using a helper pod in the same Kubernetes cluster as the Oracle SOA Suite domain to perform WLST operations.\n Note: To avoid any misconfigurations, Oracle recommends that you do not use the Administration Server pod directly for WLST operations.\n  Create a Kubernetes helper pod Perform WLST operations Sample WLST operations  Create a Kubernetes helper pod Before creating a Kubernetes helper pod, make sure that the Oracle SOA Suite Docker image is available on the node, or you can create an image pull secret so that the pod can pull the Docker image on the host where it gets created.\n  Create an image pull secret to pull image soasuite:12.2.1.4 by the helper pod.\nNote: Skip this step if you are not using an image pull secret.\n$ kubectl create secret docker-registry \u0026lt;secret-name\u0026gt; --namespace soans \\ --docker-server=\u0026lt;docker-registry-name\u0026gt; \\ --docker-username=\u0026lt;docker-user\u0026gt; \\ --docker-password=\u0026lt;docker-user\u0026gt; \\ --docker-email=\u0026lt;email-id\u0026gt; For example:\n$ kubectl create secret docker-registry image-secret --namespace soans \\ --docker-server=your-registry.com \\ --docker-username=xxxxxx \\ --docker-password=xxxxxxx \\ --docker-email=my@company.com   Create a helper pod.\n$ kubectl run helper \\ --image \u0026lt;image_name\u0026gt; \\ --namespace \u0026lt;domain_namespace\u0026gt; \\ --overrides='{ \u0026quot;apiVersion\u0026quot;: \u0026quot;v1\u0026quot;, \u0026quot;spec\u0026quot;: { \u0026quot;imagePullSecrets\u0026quot;: [{\u0026quot;name\u0026quot;: \u0026quot;\u0026lt;secret-name\u0026gt;\u0026quot;}] } }' \\ -- sleep infinity For example:\n$ kubectl run helper \\ --image soasuite:12.2.1.4 \\ --namespace soans \\ --overrides='{ \u0026quot;apiVersion\u0026quot;: \u0026quot;v1\u0026quot;, \u0026quot;spec\u0026quot;: { \u0026quot;imagePullSecrets\u0026quot;: [{\u0026quot;name\u0026quot;: \u0026quot;image-secret\u0026quot;}] } }' \\ -- sleep infinity  Note: If you are not using the image pull secret, remove --overrides='{ \u0026quot;apiVersion\u0026quot;: \u0026quot;v1\u0026quot;, \u0026quot;spec\u0026quot;: { \u0026quot;imagePullSecrets\u0026quot;: [{\u0026quot;name\u0026quot;: \u0026quot;\u0026lt;secret-name\u0026gt;\u0026quot;}] } }' .\n   Perform WLST operations Once the Kubernetes helper pod is deployed, you can exec into the pod, connect to servers using t3 or t3s and perform WLST operations. By default, t3s is not enabled for the Administration Server or Managed Servers. If you enabled SSL with sslEnabled when creating the domain, then you can use t3s to perform WLST operations.\nInteractive mode   Start a bash shell in the helper pod:\n$ kubectl exec -it helper -n \u0026lt;domain_namespace\u0026gt; -- /bin/bash For example:\n$ kubectl exec -it helper -n soans -- /bin/bash This opens a bash shell in the running helper pod:\n[oracle@helper oracle]$   Invoke WLST:\n[oracle@helper oracle]$ cd $ORACLE_HOME/oracle_common/common/bin [oracle@helper bin]$ ./wlst.sh The output will look similar to the following:\n[oracle@helper bin]$ ./wlst.sh Initializing WebLogic Scripting Tool (WLST) ... Jython scans all the jar files it can find at first startup. Depending on the system, this process may take a few minutes to complete, and WLST may not return a prompt right away. Welcome to WebLogic Server Administration Scripting Shell Type help() for help on available commands wls:/offline\u0026gt;   Connect using t3:\na. To connect to the Administration Server or Managed Servers using t3, you can use the Kubernetes services created by the WebLogic Server Kubernetes operator:\nwls:/offline\u0026gt; connect('weblogic','\u0026lt;password\u0026gt;','t3://\u0026lt;domainUID\u0026gt;-\u0026lt;WebLogic Server Name\u0026gt;:\u0026lt;Server Port\u0026gt;') For example, if the domainUID is soainfra, Administration Server name is AdminServer, and Administration Server port is 7001, then you can connect to the Administration Server using t3:\nwls:/offline\u0026gt; connect('weblogic','\u0026lt;password\u0026gt;','t3://soainfra-adminserver:7001') The output will look similar to the following:\nwls:/offline\u0026gt; connect('weblogic','\u0026lt;password\u0026gt;','t3://soainfra-adminserver:7001') Connecting to t3://soainfra-adminserver:7001 with userid weblogic ... Successfully connected to Admin Server \u0026quot;AdminServer\u0026quot; that belongs to domain \u0026quot;soainfra\u0026quot;. Warning: An insecure protocol was used to connect to the server. To ensure on-the-wire security, the SSL port or Admin port should be used instead. wls:/soainfra/serverConfig/\u0026gt; b. To connect a WebLogic Server cluster (SOA or Oracle Service Bus) using t3, you can use the Kubernetes services created by the WebLogic Server Kubernetes operator:\nwls:/offline\u0026gt; connect('weblogic','\u0026lt;password\u0026gt;','t3://\u0026lt;domainUID\u0026gt;-cluster-\u0026lt;Cluster name\u0026gt;:\u0026lt;Managed Server Port\u0026gt;') For example, if the domainUID is soainfra, SOA cluster name is soa-cluster, and SOA Managed Server port is 7003, then you can connect to SOA Cluster using t3:\nwls:/offline\u0026gt; connect('weblogic','\u0026lt;password\u0026gt;','t3://soainfra-cluster-soa-cluster:7003') The output will look similar to the following:\nwls:/offline\u0026gt; connect('weblogic','\u0026lt;password\u0026gt;','t3://soainfra-cluster-soa-cluster:7003') Connecting to t3://soainfra-cluster-soa-cluster:7003 with userid weblogic ... Successfully connected to Managed Server \u0026quot;soa_server1\u0026quot; that belongs to domain \u0026quot;soainfra\u0026quot;. Warning: An insecure protocol was used to connect to the server. To ensure on-the-wire security, the SSL port or Admin port should be used instead. wls:/soainfra/serverConfig/\u0026gt;   Connect using t3s.\nIf you enabled SSL with sslEnabled when creating the domain, then you can use t3s to perform WLST operations:\na. Obtain the certificate from the Administration Server to be used for a secured (t3s) connection from the client by exporting the certificate from the Administration Server using WLST commands. Sample commands to export the default demoidentity:\n[oracle@helper oracle]$ cd $ORACLE_HOME/oracle_common/common/bin [oracle@helper bin]$ ./wlst.sh . . wls:/offline\u0026gt; connect('weblogic','\u0026lt;password\u0026gt;','t3://soainfra-adminserver:7001') . . wls:/soainfra/serverConfig/\u0026gt; svc = getOpssService(name='KeyStoreService') wls:/soainfra/serverConfig/\u0026gt; svc.exportKeyStoreCertificate(appStripe='system', name='demoidentity', password='DemoIdentityKeyStorePassPhrase', alias='DemoIdentity', type='Certificate', filepath='/tmp/cert.txt/') These commands download the certificate for the default demoidentity certificate at /tmp/cert.txt.\nb. Import the certificate to the Java trust store:\n[oracle@helper oracle]$ export JAVA_HOME=/u01/jdk [oracle@helper oracle]$ keytool -import -v -trustcacerts -alias soadomain -file /tmp/cert.txt -keystore $JAVA_HOME/jre/lib/security/cacerts -keypass changeit -storepass changeit c. Connect to WLST and set the required environment variable before connecting using t3s:\n[oracle@helper oracle]$ export WLST_PROPERTIES=\u0026quot;-Dweblogic.security.SSL.ignoreHostnameVerification=true\u0026quot; [oracle@helper oracle]$ cd $ORACLE_HOME/oracle_common/common/bin [oracle@helper bin]$ ./wlst.sh d. Access t3s for the Administration Server.\nFor example, if the domainUID is soainfra, Administration Server name is AdminServer, and Administration Server SSL port is 7002, connect to the Administration Server as follows:\nwls:/offline\u0026gt; connect('weblogic','\u0026lt;password\u0026gt;','t3s://soainfra-adminserver:7002') e. Access t3s for the SOA cluster.\nFor example, if the domainUID is soainfra, SOA cluster name is soa-cluster, and SOA Managed Server SSL port is 7004, connect to the SOA cluster as follows:\nwls:/offline\u0026gt; connect('weblogic','\u0026lt;password\u0026gt;','t3s://soainfra-cluster-soa-cluster:7004')   Script mode In script mode, scripts contain WLST commands in a text file with a .py file extension (for example, mywlst.py). Before invoking WLST using the script file, you must copy the .py file into the helper pod.\nTo copy the .py file into the helper pod using WLST operations in script mode:\n  Create a .py file containing all the WLST commands.\n  Copy the .py file into the helper pod:\n$ kubectl cp \u0026lt;filename\u0026gt;.py \u0026lt;domain namespace\u0026gt;/helper:\u0026lt;directory\u0026gt; For example:\n$ kubectl cp mywlst.py soans/helper:/u01/oracle   Run wlst.sh on the .py file by exec into the helper pod:\n$ kubectl exec -it helper -n \u0026lt;domain_namespace\u0026gt; -- /bin/bash [oracle@helper oracle]$ cd $ORACLE_HOME/oracle_common/common/bin [oracle@helper oracle]$ ./wlst.sh \u0026lt;directory\u0026gt;/\u0026lt;filename\u0026gt;.py   Note: Refer to Interactive mode for details on how to connect using t3 or t3s.\nSample WLST operations For a full list of WLST operations, refer to WebLogic Server WLST Online and Offline Command Reference.\nDisplay servers $ kubectl exec -it helper -n soans -- /bin/bash [oracle@helper oracle]$ cd $ORACLE_HOME/oracle_common/common/bin [oracle@helper bin]$ ./wlst.sh Initializing WebLogic Scripting Tool (WLST) ... Jython scans all the jar files it can find at first startup. Depending on the system, this process may take a few minutes to complete, and WLST may not return a prompt right away. Welcome to WebLogic Server Administration Scripting Shell Type help() for help on available commands wls:/offline\u0026gt; connect('weblogic','Welcome1','t3://soainfra-adminserver:7001') Connecting to t3://soainfra-adminserver:7001 with userid weblogic ... Successfully connected to Admin Server \u0026quot;AdminServer\u0026quot; that belongs to domain \u0026quot;soainfra\u0026quot;. Warning: An insecure protocol was used to connect to the server. To ensure on-the-wire security, the SSL port or Admin port should be used instead. wls:/soainfra/serverConfig/\u0026gt; cd('/Servers') wls:/soainfra/serverConfig/Servers\u0026gt; ls() dr-- AdminServer dr-- osb_server1 dr-- osb_server2 dr-- osb_server3 dr-- osb_server4 dr-- osb_server5 dr-- soa_server1 dr-- soa_server2 dr-- soa_server3 dr-- soa_server4 dr-- soa_server5 wls:/soainfra/serverConfig/Servers\u0026gt; "
},
{
	"uri": "/fmw-kubernetes/wcportal-domains/",
	"title": "Oracle WebCenter Portal",
	"tags": [],
	"description": "The WebLogic Kubernetes operator (the “operator”) supports deployment of Oracle WebCenter Portal. Follow the instructions in this guide to set up Oracle WebCenter Portal domain on Kubernetes.",
	"content": "With the WebLogic Kubernetes operator (operator), you can deploy your Oracle WebCenter Portal on Kubernetes.\nIn this release, Oracle WebCenter Portal domain is based on the “domain on a persistent volume” model, where the domain home is located in a persistent volume.\nIn this release the support for Portlet Managed Server has been added.\nThe operator has several key features to assist you with deploying and managing the Oracle WebCenter Portal domain in a Kubernetes environment. You can:\n Create Oracle WebCenter Portal instances in a Kubernetes PV. This PV can reside in an Network File System (NFS) or other Kubernetes volume types. Start servers based on declarative startup parameters and desired states. Expose the Oracle WebCenter Portal services for external access. Scale Oracle WebCenter Portal domain by starting and stopping Managed Servers on demand, or by integrating with a REST API. Publish operator and WebLogic Server logs to Elasticsearch and interact with them in Kibana. Monitor the Oracle WebCenter Portal instance using Prometheus and Grafana.  Current release The current release for the Oracle WebCenter Portal domain deployment on Kubernetes is 22.2.3. This release uses the WebLogic Kubernetes Operator version 3.3.0.\n Note that this release is only for evaluation purposes and hence applicable to Development and Test deployments only.\n Recent changes and known issues See the Release Notes for recent changes and known issues with the Oracle WebCenter Portal domain deployment on Kubernetes.\nAbout this documentation This documentation includes sections targeted to different audiences. To help you find what you are looking for more easily, please use this table of contents:\n  Quick Start explains how to quickly get an Oracle WebCenter Portal domain instance running, using the defaults, nothing special. Note that this is only for development and test purposes.\n  Install Guide and Administration Guide provide detailed information about all aspects of using the Kubernetes operator including:\n Installing and configuring the operator Using the operator to create and manage Oracle WebCenter Portal domain Configuring WebCenter Portal for Search Configuring Kubernetes load balancers Configuring Prometheus and Grafana to monitor WebCenter Portal Configuring Logging using ElasticSearch    Documentation for earlier releases To view documentation for an earlier release, see:\n Version 21.2.3  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oud/create-or-update-image/",
	"title": "Create or update an image",
	"tags": [],
	"description": "Create or update an Oracle Unified Directory (OUD) container image used for deploying OUD domains.",
	"content": "As described in Prepare Your Environment you can create your own OUD container image. If you have access to the My Oracle Support (MOS), and there is a need to build a new image with an interim or one off patch, it is recommended to use the WebLogic Image Tool to build an Oracle Unified Directory image for production deployments.\nCreate or update an Oracle Unified Directory image using the WebLogic Image Tool Using the WebLogic Image Tool, you can create a new Oracle Unified Directory image with PSU\u0026rsquo;s and interim patches or update an existing image with one or more interim patches.\n Recommendations:\n Use create for creating a new Oracle Unified Directory image containing the Oracle Unified Directory binaries, bundle patch and interim patches. This is the recommended approach if you have access to the OUD patches because it optimizes the size of the image. Use update for patching an existing Oracle Unified Directory image with a single interim patch. Note that the patched image size may increase considerably due to additional image layers introduced by the patch application tool.   Create an image Set up the WebLogic Image Tool  Prerequisites Set up the WebLogic Image Tool Validate setup WebLogic Image Tool build directory WebLogic Image Tool cache  Prerequisites Verify that your environment meets the following prerequisites:\n Docker client and daemon on the build machine, with minimum Docker version 18.03.1.ce. Bash version 4.0 or later, to enable the command complete feature. JAVA_HOME environment variable set to the appropriate JDK location e.g: /scratch/export/oracle/product/jdk  Set up the WebLogic Image Tool To set up the WebLogic Image Tool:\n  Create a working directory and change to it:\n$ mdir \u0026lt;workdir\u0026gt; $ cd \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/imagetool-setup $ cd /scratch/imagetool-setup   Download the latest version of the WebLogic Image Tool from the releases page.\n$ wget https://github.com/oracle/weblogic-image-tool/releases/download/release-X.X.X/imagetool.zip where X.X.X is the latest release referenced on the releases page.\n  Unzip the release ZIP file in the imagetool-setup directory.\n$ unzip imagetool.zip   Execute the following commands to set up the WebLogic Image Tool:\n$ cd \u0026lt;workdir\u0026gt;/imagetool-setup/imagetool/bin $ source setup.sh For example:\n$ cd /scratch/imagetool-setup/imagetool/bin $ source setup.sh   Validate setup To validate the setup of the WebLogic Image Tool:\n  Enter the following command to retrieve the version of the WebLogic Image Tool:\n$ imagetool --version   Enter imagetool then press the Tab key to display the available imagetool commands:\n$ imagetool \u0026lt;TAB\u0026gt; cache create help rebase update   WebLogic Image Tool build directory The WebLogic Image Tool creates a temporary Docker context directory, prefixed by wlsimgbuilder_temp, every time the tool runs. Under normal circumstances, this context directory will be deleted. However, if the process is aborted or the tool is unable to remove the directory, it is safe for you to delete it manually. By default, the WebLogic Image Tool creates the Docker context directory under the user\u0026rsquo;s home directory. If you prefer to use a different directory for the temporary context, set the environment variable WLSIMG_BLDDIR:\n$ export WLSIMG_BLDDIR=\u0026#34;/path/to/buid/dir\u0026#34; WebLogic Image Tool cache The WebLogic Image Tool maintains a local file cache store. This store is used to look up where the Java, WebLogic Server installers, and WebLogic Server patches reside in the local file system. By default, the cache store is located in the user\u0026rsquo;s $HOME/cache directory. Under this directory, the lookup information is stored in the .metadata file. All automatically downloaded patches also reside in this directory. You can change the default cache store location by setting the environment variable WLSIMG_CACHEDIR:\n$ export WLSIMG_CACHEDIR=\u0026#34;/path/to/cachedir\u0026#34; Set up additional build scripts Creating an Oracle Unified Directory container image using the WebLogic Image Tool requires additional container scripts for Oracle Unified Directory domains.\n  Clone the docker-images repository to set up those scripts. In these steps, this directory is DOCKER_REPO:\n$ cd \u0026lt;workdir\u0026gt;/imagetool-setup $ git clone https://github.com/oracle/docker-images.git For example:\n$ cd /scratch/imagetool-setup $ git clone https://github.com/oracle/docker-images.git    Note: If you want to create the image continue with the following steps, otherwise to update the image see update an image.\n Create an image After setting up the WebLogic Image Tool, follow these steps to use the WebLogic Image Tool to create a new Oracle Unified Directory image.\nDownload the Oracle Unified Directory installation binaries and patches You must download the required Oracle Unified Directory installation binaries and patches as listed below from the Oracle Software Delivery Cloud and save them in a directory of your choice.\nThe installation binaries and patches required are:\n  Oracle Unified Directory 12.2.1.4.0\n fmw_12.2.1.4.0_oud.jar    OUD Patches:\n View document ID 2723908.1 on My Oracle Support. In the Container Image Download/Patch Details section, locate the Oracle Unified Directory (OUD) table. For the latest PSU click the README link in the Documentation column. In the README, locate the \u0026ldquo;Installed Software\u0026rdquo; section. All the patch numbers to be download are listed here. Download all these individual patches from My Oracle Support.    Oracle JDK v8\n jdk-8uXXX-linux-x64.tar.gz where XXX is the JDK version referenced in the README above.    Update required build files The following files in the code repository location \u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleUnifiedDirectory/imagetool/12.2.1.4.0 are used for creating the image:\n additionalBuildCmds.txt buildArgs    Edit the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleUnifiedDirectory/imagetool/12.2.1.4.0/buildArgs file and change %DOCKER_REPO%,%JDK_VERSION% and %BUILDTAG% appropriately.\nFor example:\ncreate --jdkVersion=8u321 --type oud --version=12.2.1.4.0 --tag=oud-latestpsu:12.2.1.4.0 --pull --installerResponseFile /scratch/imagetool-setup/docker-images/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/install/oud.response --additionalBuildCommands /scratch/imagetool-setup/docker-images/OracleUnifiedDirectory/imagetool/12.2.1.4.0/additionalBuildCmds.txt --additionalBuildFiles /scratch/imagetool-setup/docker-images/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/container-scripts   The \u0026lt;workdir\u0026gt;/imagetool-setup/imagetool/docker-images/OracleUnifiedDirectory/imagetool/12.2.1.4.0/additionalBuildCmds.txt contains additional build commands. You may edit this file if you want to customize the image further.\n  Create the image   Add a JDK package to the WebLogic Image Tool cache. For example:\n$ imagetool cache addInstaller --type jdk --version 8uXXX --path \u0026lt;download location\u0026gt;/jdk-8uXXX-linux-x64.tar.gz where XXX is the JDK version downloaded\n  Add the downloaded installation binaries to the WebLogic Image Tool cache. For example:\n$ imagetool cache addInstaller --type OUD --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_oud.jar   Add the downloaded OPatch patch to the WebLogic Image Tool cache. For example:\n$ imagetool cache addEntry --key 28186730_13.9.4.2.8 --value \u0026lt;download location\u0026gt;/p28186730_139428_Generic.zip   Add the rest of the downloaded product patches to the WebLogic Image Tool cache:\n$ imagetool cache addEntry --key \u0026lt;patch\u0026gt;_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p\u0026lt;patch\u0026gt;_122140_Generic.zip For example:\n$ imagetool cache addEntry --key 32971905_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33448950_122140_Generic.zip   Edit the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleUnifiedDirectory/imagetool/12.2.1.4.0/buildArgs file and append the product patches and opatch patch as follows:\n--patches 33448950_12.2.1.4.0 --opatchBugNumber=28186730_13.9.4.2.8 An example buildArgs file is now as follows:\ncreate --jdkVersion=8u321 --type oud --version=12.2.1.4.0 --tag=oud-latestpsu:12.2.1.4.0 --pull --installerResponseFile /scratch/imagetool-setup/docker-images/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/install/oud.response --additionalBuildCommands /scratch/imagetool-setup/docker-images/OracleUnifiedDirectory/imagetool/12.2.1.4.0/additionalBuildCmds.txt --additionalBuildFiles /scratch/imagetool-setup/docker-images/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/container-scripts --patches 33448950_12.2.1.4.0 --opatchBugNumber=28186730_13.9.4.2.8  Note: In the buildArgs file:\n --jdkVersion value must match the --version value used in the imagetool cache addInstaller command for --type jdk. --version value must match the --version value used in the imagetool cache addInstaller command for --type OUD.   Refer to this page for the complete list of options available with the WebLogic Image Tool create command.\n  Create the Oracle Unified Directory image:\n$ imagetool @\u0026lt;absolute path to buildargs file\u0026gt; --fromImage ghcr.io/oracle/oraclelinux:7-slim  Note: Make sure that the absolute path to the buildargs file is prepended with a @ character, as shown in the example above.\n For example:\n$ imagetool @\u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleUnifiedDirectory/imagetool/12.2.1.4.0/buildArgs --fromImage ghcr.io/oracle/oraclelinux:7-slim   Check the created image using the docker images command:\n$ docker images | grep oud The output will look similar to the following:\noud-latestpsu 12.2.1.4.0 30b02a692fa3 About a minute ago 1.04GB   Run the following command to save the container image to a tar file:\n$ docker save -o \u0026lt;path\u0026gt;/\u0026lt;file\u0026gt;.tar \u0026lt;image\u0026gt; For example:\n$ docker save -o $WORKDIR/oud-latestpsu.tar oud-latestpsu:12.2.1.4.0   Update an image The steps below show how to update an existing Oracle Unified Directory image with an interim patch.\nThe container image to be patched must be loaded in the local docker images repository before attempting these steps.\nIn the examples below the image oracle/oud:12.2.1.4.0 is updated with an interim patch.\n$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE oracle/oud 12.2.1.4.0 b051804ba15f 3 months ago 1.04GB   Set up the WebLogic Image Tool.\n  Download the required interim patch and latest Opatch (28186730) from My Oracle Support. and save them in a directory of your choice.\n  Add the OPatch patch to the WebLogic Image Tool cache, for example:\n$ imagetool cache addEntry --key 28186730_13.9.4.2.8 --value \u0026lt;downloaded-patches-location\u0026gt;/p28186730_139428_Generic.zip   Execute the imagetool cache addEntry command for each patch to add the required patch(es) to the WebLogic Image Tool cache. For example, to add patch p32701831_12214210607_Generic.zip:\n$ imagetool cache addEntry --key=33521773_12.2.1.4.211008 --value \u0026lt;downloaded-patches-location\u0026gt;/p33521773_12214211008_Generic.zip   Provide the following arguments to the WebLogic Image Tool update command:\n –-fromImage - Identify the image that needs to be updated. In the example below, the image to be updated is oracle/oud:12.2.1.4.0. –-patches - Multiple patches can be specified as a comma-separated list. --tag - Specify the new tag to be applied for the image being built.  Refer here for the complete list of options available with the WebLogic Image Tool update command.\n Note: The WebLogic Image Tool cache should have the latest OPatch zip. The WebLogic Image Tool will update the OPatch if it is not already updated in the image.\n For example:\n$ imagetool update --fromImage oracle/oud:12.2.1.4.0 --tag=oracle/oud-new:12.2.1.4.0 --patches=33521773_12.2.1.4.211008 --opatchBugNumber=28186730_13.9.4.2.8  Note: If the command fails because the files in the image being upgraded are not owned by oracle:oracle, then add the parameter --chown \u0026lt;userid\u0026gt;:\u0026lt;groupid\u0026gt; to correspond with the values returned in the error.\n   Check the built image using the docker images command:\n$ docker images | grep oud The output will look similar to the following:\nREPOSITORY TAG IMAGE ID CREATED SIZE oracle/oud-new 12.2.1.4.0 78ccd1ad67eb 5 minutes ago 1.11GB oracle/oud 12.2.1.4.0 b051804ba15f 3 months ago 1.04GB   Run the following command to save the patched container image to a tar file:\n$ docker save -o \u0026lt;path\u0026gt;/\u0026lt;file\u0026gt;.tar \u0026lt;image\u0026gt; For example:\n$ docker save -o $WORKDIR/oud-new.tar oracle/oud-new:12.2.1.4.0   "
},
{
	"uri": "/fmw-kubernetes/idm-products/oudsm/create-or-update-image/",
	"title": "Create or update an image",
	"tags": [],
	"description": "Create or update an Oracle Unified Directory Services Manager (OUDSM) container image used for deploying OUDSM domains.",
	"content": "As described in Prepare Your Environment you can create your own OUDSM container image. If you have access to the My Oracle Support (MOS), and there is a need to build a new image with an interim or one off patch, it is recommended to use the WebLogic Image Tool to build an Oracle Unified Directory image for production deployments.\nCreate or update an Oracle Unified Directory Services Manager image using the WebLogic Image Tool Using the WebLogic Image Tool, you can create a new Oracle Unified Directory Services Manager image with PSU\u0026rsquo;s and interim patches or update an existing image with one or more interim patches.\n Recommendations:\n Use create for creating a new Oracle Unified Directory Services Manager image containing the Oracle Unified Directory Services Manager binaries, bundle patch and interim patches. This is the recommended approach if you have access to the OUDSM patches because it optimizes the size of the image. Use update for patching an existing Oracle Unified Directory Services Manager image with a single interim patch. Note that the patched image size may increase considerably due to additional image layers introduced by the patch application tool.   Create an image Set up the WebLogic Image Tool  Prerequisites Set up the WebLogic Image Tool Validate setup WebLogic Image Tool build directory WebLogic Image Tool cache  Prerequisites Verify that your environment meets the following prerequisites:\n Docker client and daemon on the build machine, with minimum Docker version 18.03.1.ce. Bash version 4.0 or later, to enable the command complete feature. JAVA_HOME environment variable set to the appropriate JDK location e.g: /scratch/export/oracle/product/jdk  Set up the WebLogic Image Tool To set up the WebLogic Image Tool:\n  Create a working directory and change to it:\n$ mdir \u0026lt;workdir\u0026gt; $ cd \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/imagetool-setup $ cd /scratch/imagetool-setup   Download the latest version of the WebLogic Image Tool from the releases page.\n$ wget https://github.com/oracle/weblogic-image-tool/releases/download/release-X.X.X/imagetool.zip where X.X.X is the latest release referenced on the releases page.\n  Unzip the release ZIP file in the imagetool-setup directory.\n$ unzip imagetool.zip   Execute the following commands to set up the WebLogic Image Tool:\n$ cd \u0026lt;workdir\u0026gt;/imagetool-setup/imagetool/bin $ source setup.sh For example:\n$ cd /scratch/imagetool-setup/imagetool/bin $ source setup.sh   Validate setup To validate the setup of the WebLogic Image Tool:\n  Enter the following command to retrieve the version of the WebLogic Image Tool:\n$ imagetool --version   Enter imagetool then press the Tab key to display the available imagetool commands:\n$ imagetool \u0026lt;TAB\u0026gt; cache create help rebase update   WebLogic Image Tool build directory The WebLogic Image Tool creates a temporary Docker context directory, prefixed by wlsimgbuilder_temp, every time the tool runs. Under normal circumstances, this context directory will be deleted. However, if the process is aborted or the tool is unable to remove the directory, it is safe for you to delete it manually. By default, the WebLogic Image Tool creates the Docker context directory under the user\u0026rsquo;s home directory. If you prefer to use a different directory for the temporary context, set the environment variable WLSIMG_BLDDIR:\n$ export WLSIMG_BLDDIR=\u0026#34;/path/to/buid/dir\u0026#34; WebLogic Image Tool cache The WebLogic Image Tool maintains a local file cache store. This store is used to look up where the Java, WebLogic Server installers, and WebLogic Server patches reside in the local file system. By default, the cache store is located in the user\u0026rsquo;s $HOME/cache directory. Under this directory, the lookup information is stored in the .metadata file. All automatically downloaded patches also reside in this directory. You can change the default cache store location by setting the environment variable WLSIMG_CACHEDIR:\n$ export WLSIMG_CACHEDIR=\u0026#34;/path/to/cachedir\u0026#34; Set up additional build scripts Creating an Oracle Unified Directory Services Manager container image using the WebLogic Image Tool requires additional container scripts for Oracle Unified Directory Services Manager domains.\n  Clone the docker-images repository to set up those scripts. In these steps, this directory is DOCKER_REPO:\n$ cd \u0026lt;workdir\u0026gt;/imagetool-setup $ git clone https://github.com/oracle/docker-images.git For example:\n$ cd /scratch/imagetool-setup $ git clone https://github.com/oracle/docker-images.git    Note: If you want to create the image continue with the following steps, otherwise to update the image see update an image.\n Create an image After setting up the WebLogic Image Tool, follow these steps to use the WebLogic Image Tool to create a new Oracle Unified Directory Services Manager image.\nDownload the Oracle Unified Directory Services Manager installation binaries and patches You must download the required Oracle Unified Directory Services Manager installation binaries and patches as listed below from the Oracle Software Delivery Cloud and save them in a directory of your choice.\nThe installation binaries and patches required are:\n  Oracle Unified Directory 12.2.1.4.0\n fmw_12.2.1.4.0_oud.jar    Oracle Fusion Middleware 12c Infrastructure 12.2.1.4.0\n fmw_12.2.1.4.0_infrastructure.jar    OUDSM and FMW Infrastructure Patches:\n View document ID 2723908.1 on My Oracle Support. In the Container Image Download/Patch Details section, locate the Oracle Unified Directory Services Manager (OUDSM) table. For the latest PSU click the README link in the Documentation column. In the README, locate the \u0026ldquo;Installed Software\u0026rdquo; section. All the patch numbers to be download are listed here. Download all these individual patches from My Oracle Support.    Oracle JDK v8\n jdk-8uXXX-linux-x64.tar.gz where XXX is the JDK version referenced in the README above.    Update required build files The following files in the code repository location \u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleUnifiedDirectorySM/imagetool/12.2.1.4.0 are used for creating the image:\n additionalBuildCmds.txt buildArgs    Edit the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleUnifiedDirectorySM/imagetool/12.2.1.4.0/buildArgs file and change %DOCKER_REPO%,%JDK_VERSION% and %BUILDTAG% appropriately.\nFor example:\ncreate --jdkVersion=8u321 --type oud_wls --version=12.2.1.4.0 --tag=oudsm-latestpsu:12.2.1.4.0 --pull --installerResponseFile /scratch/imagetool-setup/docker-images/OracleFMWInfrastructure/dockerfiles/12.2.1.4/install.file,/scratch/imagetool-setup/docker-images/OracleUnifiedDirectorySM/dockerfiles/12.2.1.4.0/install/oud.response --additionalBuildCommands /scratch/imagetool-setup/docker-images/OracleUnifiedDirectorySM/imagetool/12.2.1.4.0/additionalBuildCmds.txt --additionalBuildFiles /scratch/imagetool-setup/docker-images/OracleUnifiedDirectorySM/dockerfiles/12.2.1.4.0/container-scripts   The \u0026lt;workdir\u0026gt;/imagetool-setup/imagetool/docker-images/OracleUnifiedDirectorySM/imagetool/12.2.1.4.0/additionalBuildCmds.txt contains additional build commands. You may edit this file if you want to customize the image further.\n  Edit the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleFMWInfrastructure/dockerfiles/12.2.1.4/install.file and under the GENERIC section add the line INSTALL_TYPE=\u0026quot;Fusion Middleware Infrastructure\u0026rdquo;. For example:\n[GENERIC] INSTALL_TYPE=\u0026quot;Fusion Middleware Infrastructure\u0026quot; DECLINE_SECURITY_UPDATES=true SECURITY_UPDATES_VIA_MYORACLESUPPORT=false   Create the image   Add a JDK package to the WebLogic Image Tool cache. For example:\n$ imagetool cache addInstaller --type jdk --version 8uXXX --path \u0026lt;download location\u0026gt;/jdk-8uXXX-linux-x64.tar.gz where XXX is the JDK version downloaded\n  Add the downloaded installation binaries to the WebLogic Image Tool cache. For example:\n$ imagetool cache addInstaller --type OUD --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_oud.jar $ imagetool cache addInstaller --type fmw --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_infrastructure.jar   Add the downloaded OPatch patch to the WebLogic Image Tool cache. For example:\n$ imagetool cache addEntry --key 28186730_13.9.4.2.8 --value \u0026lt;download location\u0026gt;/p28186730_139428_Generic.zip   Add the rest of the downloaded product patches to the WebLogic Image Tool cache:\n$ imagetool cache addEntry --key \u0026lt;patch\u0026gt;_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p\u0026lt;patch\u0026gt;_122140_Generic.zip For example:\n$ imagetool cache addEntry --key 33727616_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33727616_122140_Generic.zip $ imagetool cache addEntry --key 33093748_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33093748_122140_Generic.zip $ imagetool cache addEntry --key 32720458_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32720458_122140_Generic.zip $ imagetool cache addEntry --key 33791665_12.2.1.4.220105 --value \u0026lt;download location\u0026gt;/p33791665_12214220105_Generic.zip $ imagetool cache addEntry --key 33723124_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33723124_122140_Generic.zip $ imagetool cache addEntry --key 32647448_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32647448_122140_Linux-x86-64.zip $ imagetool cache addEntry --key 33591019_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33591019_122140_Generic.zip $ imagetool cache addEntry --key 32999272_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32999272_122140_Generic.zip $ imagetool cache addEntry --key 33448950_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33448950_122140_Generic.zip $ imagetool cache addEntry --key 33697227_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33697227_122140_Generic.zip $ imagetool cache addEntry --key 33678607_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33678607_122140_Generic.zip $ imagetool cache addEntry --key 33735326_12.2.1.4.220105 --value \u0026lt;download location\u0026gt;/p33735326_12214220105_Generic.zip   Edit the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleUnifiedDirectorySM/imagetool/12.2.1.4.0/buildArgs file and append the product patches and opatch patch as follows:\n--patches 33727616_12.2.1.4.0,33093748_12.2.1.4.0,32720458_12.2.1.4.0,33791665_12.2.1.4.220105,33723124_12.2.1.4.0,32647448_12.2.1.4.0,33591019_12.2.1.4.0,32999272_12.2.1.4.0,33448950_12.2.1.4.0,32999272_12.2.1.4.0,33448950_12.2.1.4.0,33697227_12.2.1.4.0,33678607_12.2.1.4.0,33735326_12.2.1.4.220105 --opatchBugNumber=28186730_13.9.4.2.8 An example buildArgs file is now as follows:\ncreate --jdkVersion=8u321 --type oud_wls --version=12.2.1.4.0 --tag=oudsm-latestpsu:12.2.1.4.0 --pull --installerResponseFile /scratch/imagetool-setup/docker-images/OracleFMWInfrastructure/dockerfiles/12.2.1.4/install.file,/scratch/imagetool-setup/docker-images/OracleUnifiedDirectorySM/dockerfiles/12.2.1.4.0/install/oud.response --additionalBuildCommands /scratch/imagetool-setup/docker-images/OracleUnifiedDirectorySM/imagetool/12.2.1.4.0/additionalBuildCmds.txt --additionalBuildFiles /scratch/imagetool-setup/docker-images/OracleUnifiedDirectorySM/dockerfiles/12.2.1.4.0/container-scripts --patches 33727616_12.2.1.4.0,33093748_12.2.1.4.0,32720458_12.2.1.4.0,33791665_12.2.1.4.220105,33723124_12.2.1.4.0,32647448_12.2.1.4.0,33591019_12.2.1.4.0,32999272_12.2.1.4.0,33448950_12.2.1.4.0,33448950_12.2.1.4.0,33697227_12.2.1.4.0,33678607_12.2.1.4.0,33735326_12.2.1.4.220105 --opatchBugNumber=28186730_13.9.4.2.8  Note: In the buildArgs file:\n --jdkVersion value must match the --version value used in the imagetool cache addInstaller command for --type jdk. --version value must match the --version value used in the imagetool cache addInstaller command for --type OUDSM.   Refer to this page for the complete list of options available with the WebLogic Image Tool create command.\n  Create the Oracle Unified Directory Services Manager image:\n$ imagetool @\u0026lt;absolute path to buildargs file\u0026gt; --fromImage ghcr.io/oracle/oraclelinux:7-slim  Note: Make sure that the absolute path to the buildargs file is prepended with a @ character, as shown in the example above.\n For example:\n$ imagetool @\u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleUnifiedDirectorySM/imagetool/12.2.1.4.0/buildArgs --fromImage ghcr.io/oracle/oraclelinux:7-slim   Check the created image using the docker images command:\n$ docker images | grep oudsm The output will look similar to the following:\noudsm-latestpsu 12.2.1.4.0 f6dd9d2ca0e6 4 minutes ago 3.72GB   Run the following command to save the container image to a tar file:\n$ docker save -o \u0026lt;path\u0026gt;/\u0026lt;file\u0026gt;.tar \u0026lt;image\u0026gt; For example:\n$ docker save -o $WORKDIR/oudsm-latestpsu.tar oudsm-latestpsu:12.2.1.4.0   Update an image The steps below show how to update an existing Oracle Unified Directory Services Manager image with an interim patch.\nThe container image to be patched must be loaded in the local docker images repository before attempting these steps.\nIn the examples below the image oracle/oudsm:12.2.1.4.0 is updated with an interim patch.\n$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE oracle/oudsm 12.2.1.4.0 b051804ba15f 3 months ago 3.72GB   Set up the WebLogic Image Tool.\n  Download the required interim patch and latest Opatch (28186730) from My Oracle Support. and save them in a directory of your choice.\n  Add the OPatch patch to the WebLogic Image Tool cache, for example:\n$ imagetool cache addEntry --key 28186730_13.9.4.2.8 --value \u0026lt;downloaded-patches-location\u0026gt;/p28186730_139428_Generic.zip   Execute the imagetool cache addEntry command for each patch to add the required patch(es) to the WebLogic Image Tool cache. For example, to add patch p33521773_12214211008_Generic.zip:\n$ imagetool cache addEntry --key=33521773_12.2.1.4.211008 --value \u0026lt;downloaded-patches-location\u0026gt;/p33521773_12214211008_Generic.zip   Provide the following arguments to the WebLogic Image Tool update command:\n –-fromImage - Identify the image that needs to be updated. In the example below, the image to be updated is oracle/oudsm:12.2.1.4.0. –-patches - Multiple patches can be specified as a comma-separated list. --tag - Specify the new tag to be applied for the image being built.  Refer here for the complete list of options available with the WebLogic Image Tool update command.\n Note: The WebLogic Image Tool cache should have the latest OPatch zip. The WebLogic Image Tool will update the OPatch if it is not already updated in the image.\n For example:\n$ imagetool update --fromImage oracle/oudsm:12.2.1.4.0 --tag=oracle/oudsm-new:12.2.1.4.0 --patches=33521773_12.2.1.4.211008 --opatchBugNumber=28186730_13.9.4.2.8  Note: If the command fails because the files in the image being upgraded are not owned by oracle:oracle, then add the parameter --chown \u0026lt;userid\u0026gt;:\u0026lt;groupid\u0026gt; to correspond with the values returned in the error.\n   Check the built image using the docker images command:\n$ docker images | grep oudsm The output will look similar to the following:\nREPOSITORY TAG IMAGE ID CREATED SIZE oracle/oudsm-new 12.2.1.4.0 78ccd1ad67eb 5 minutes ago 1.11GB oracle/oudsm 12.2.1.4.0 b051804ba15f 3 months ago 1.04GB   Run the following command to save the patched container image to a tar file:\n$ docker save -o \u0026lt;path\u0026gt;/\u0026lt;file\u0026gt;.tar \u0026lt;image\u0026gt; For example:\n$ docker save -o $WORKDIR/oudsm-new.tar oracle/oudsm-new:12.2.1.4.0   "
},
{
	"uri": "/fmw-kubernetes/ohs/patch-and-upgrade/",
	"title": "Patch and Upgrade",
	"tags": [],
	"description": "This document provides steps to patch or upgrade an OHS image.",
	"content": "This section shows you how to patch or upgrade the the OHS image used by an OHS container.\n  To show the version of the image the OHS container is currently running, run the following command:\n$ kubectl describe pod \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; | grep Image For example:\n$ kubectl describe pod ohs-domain-d5b648bc5-qsgts -n ohsns | grep Image The output will look similar to the following:\nImage: container-registry.oracle.com/middleware/ohs_cpu:12.2.1.4-db19-jdk8-ol8-\u0026lt;version\u0026gt; Image ID: 9a7199ac903114793d6ad1f320010c3dbd59a39ad9bc987d926d3422a68603e7   Run the following command to update the container with the new image:\n$ kubectl set image deployment/ohs-domain -n \u0026lt;namespace\u0026gt; ohs=\u0026lt;new_image\u0026gt; For example:\n$ kubectl set image deployment/ohs-domain -n ohsns ohs=container-registry.oracle.com/middleware/ohs_cpu:12.2.1.4-db19-jdk8-ol8-\u0026lt;new\u0026gt; The output will look similar to the following:\ndeployment.apps/ohs-domain image updated This command will perform a rolling restart of the OHS container by shutting down the existing OHS container and starting a new one.\n  Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n ohsns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE ohs-domain-5c9c9879d-kpt9j 0/1 ContainerCreating 0 8s ohs-domain-d5b648bc5-qsgts 1/1 Terminating 0 17h The existing OHS pod will move to a STATUS of Terminating and a new OHS pod will be started.\nTo check what is happening while the pods are in ContainerCreating status, you can run:\n$ kubectl describe pod \u0026lt;podname\u0026gt; -n \u0026lt;namespace\u0026gt; To check what is happening while the pods are in 0/1 Running status, you can run:\n$ kubectl logs -f \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; Keep running the kubectl get pods -n \u0026lt;namespace\u0026gt; command until the pod is Running and at READY 1\\1:\nNAME READY STATUS RESTARTS AGE ohs-domain-5c9c9879d-kpt9j 1/1 Running 0 6m40s   To show the OHS container is running the new image, run the following command:\n$ kubectl describe pod \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; | grep Image For example:\n$ kubectl describe pod ohs-domain-5c9c9879d-kpt9j -n ohsns | grep Image The output will look similar to the following:\nImage: container-registry.oracle.com/middleware/ohs_cpu:12.2.1.4-db19-jdk8-ol8-\u0026lt;new\u0026gt; Image ID: 118c5c3713ddd6804cb699ecd0c7bd4a26ebf7e1427c5351c63244b5eb74ca94   "
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/post-install-config/",
	"title": "Post Install Configuration",
	"tags": [],
	"description": "Post install configuration.",
	"content": "Follow these post install configuration steps.\n Create a Server Overrides File Removing OAM Server from WebLogic Server 12c Default Coherence Cluster WebLogic Server Tuning Enable Virtualization Restart the domain  Create a Server Overrides File   Navigate to the following directory:\nFor OAM domains created with WLST:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/output/weblogic-domains/accessdomain For OAM domains created with WDT:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/   Create a setUserOverrides.sh with the following contents:\nDERBY_FLAG=false JAVA_OPTIONS=\u0026quot;${JAVA_OPTIONS} -Djava.net.preferIPv4Stack=true\u0026quot; MEM_ARGS=\u0026quot;-Xms8192m -Xmx8192m\u0026quot;   Copy the setUserOverrides.sh file to the Administration Server pod:\n$ chmod 755 setUserOverrides.sh $ kubectl cp setUserOverrides.sh oamns/accessdomain-adminserver:/u01/oracle/user_projects/domains/accessdomain/bin/setUserOverrides.sh Where oamns is the OAM namespace and accessdomain is the DOMAIN_NAME/UID.\n  Stop the OAM domain using the following command:\n$ kubectl -n \u0026lt;domain_namespace\u0026gt; patch domains \u0026lt;domain_uid\u0026gt; --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Never\u0026#34; }]\u0026#39; For example:\n$ kubectl -n oamns patch domains accessdomain --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Never\u0026#34; }]\u0026#39; The output will look similar to the following:\ndomain.weblogic.oracle/accessdomain patched   Check that all the pods are stopped:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Terminating 0 27m accessdomain-oam-policy-mgr1 1/1 Terminating 0 24m accessdomain-oam-server1 1/1 Terminating 0 24m nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 108m The Administration Server pod and Managed Server pods will move to a STATUS of Terminating. After a few minutes, run the command again and the pods should have disappeared:\nNAME READY STATUS RESTARTS AGE nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 109m   Start the domain using the following command:\n$ kubectl -n \u0026lt;domain_namespace\u0026gt; patch domains \u0026lt;domain_uid\u0026gt; --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;IfNeeded\u0026#34; }]\u0026#39; For example:\n$ kubectl -n oamns patch domains accessdomain --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;IfNeeded\u0026#34; }]\u0026#39; Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-introspector-mckp2 1/1 Running 0 8s nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 110m The Administration Server pod will start followed by the OAM Managed Servers pods. This process will take several minutes, so keep executing the command until all the pods are running with READY status 1/1:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 5m38s accessdomain-oam-policy-mgr1 1/1 Running 0 2m51s accessdomain-oam-server1 1/1 Running 0 2m50s nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 116m   Removing OAM Server from WebLogic Server 12c Default Coherence Cluster Exclude all Oracle Access Management (OAM) clusters (including Policy Manager and OAM runtime server) from the default WebLogic Server 12c coherence cluster by using the WebLogic Server Administration Console.\nFrom 12.2.1.3.0 onwards, OAM server-side session management uses the database and does not require coherence cluster to be established. In some environments, warnings and errors are observed due to default coherence cluster initialized by WebLogic. To avoid or fix these errors, exclude all of the OAM clusters from default WebLogic Server coherence cluster using the following steps:\n Login to the WebLogic Server Console at https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/console. Click Lock \u0026amp; Edit. In Domain Structure, expand Environment and select Coherence Clusters. Click defaultCoherenceCluster and select the Members tab. From Servers and Clusters, deselect all OAM clusters (oam_cluster and policy_cluster). Click Save. Click Activate changes.  WebLogic Server Tuning For production environments, the following WebLogic Server tuning parameters must be set:\nAdd Minimum Thread constraint to worker manager \u0026ldquo;OAPOverRestWM\u0026rdquo;  Login to the WebLogic Server Console at https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/console. Click Lock \u0026amp; Edit. In Domain Structure, click Deployments. On the Deployments page click Next until you see oam_server. Expand oam_server by clicking on the + icon, then click /iam/access/binding. Click the Configuration tab, followed by the Workload tab. Click wm/OAPOverRestWM Under Application Scoped Work Managed Components, click New. In Create a New Work Manager Component, select Minumum Threads Constraint and click Next. In Minimum Threads Constraint Properties enter the Count as 400 and click Finish. In the Save Deployment Plan change the Path to the value /u01/oracle/user_projects/domains/accessdomain/Plan.xml, where accessdomain is your domain_UID. Click OK and then Activate Changes.  Remove Max Thread Constraint and Capacity Constraint  Repeat steps 1-7 above. Under Application Scoped Work Managed Components select the check box for Capacity and MaxThreadsCount. Click Delete. In the Delete Work Manage Components screen, click OK to delete. Click on Release Configuration and then Log Out.  oamDS DataSource Tuning  Login to the WebLogic Server Console at https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/console. Click Lock \u0026amp; Edit. In Domain Structure, Expand Services and click Data Sources. Click on oamDS. In Settings for oamDS, select the Configuration tab, and then the Connection Pool tab. Change Initial Capacity, Maximum Capacity, and Minimum Capacity to 800 and click Save. Click Activate Changes.  Enable Virtualization  Log in to Oracle Enterprise Manager Fusion Middleware Control at https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/em Click WebLogic Domain \u0026gt; Security \u0026gt; Security Provider Configuration. Expand Security Store Provider. Expand Identity Store Provider. Click Configure. Add a custom property. Select virtualize property with value true and click OK. Click OK again to persist the change.  Restart the domain For the above changes to take effect, you must restart the OAM domain:\n  Stop the OAM domain using the following command:\n$ kubectl -n \u0026lt;domain_namespace\u0026gt; patch domains \u0026lt;domain_uid\u0026gt; --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Never\u0026#34; }]\u0026#39; For example:\n$ kubectl -n oamns patch domains accessdomain --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Never\u0026#34; }]\u0026#39; The output will look similar to the following:\ndomain.weblogic.oracle/accessdomain patched   Check that all the pods are stopped:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Terminating 0 27m accessdomain-oam-policy-mgr1 1/1 Terminating 0 24m accessdomain-oam-server1 1/1 Terminating 0 24m nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 108m The Administration Server pod and Managed Server pods will move to a STATUS of Terminating. After a few minutes, run the command again and the pods should have disappeared:\nNAME READY STATUS RESTARTS AGE nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 109m   Start the domain using the following command:\n$ kubectl -n \u0026lt;domain_namespace\u0026gt; patch domains \u0026lt;domain_uid\u0026gt; --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;IfNeeded\u0026#34; }]\u0026#39; For example:\n$ kubectl -n oamns patch domains accessdomain --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;IfNeeded\u0026#34; }]\u0026#39; Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-introspector-mckp2 1/1 Running 0 8s nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 110m The Administration Server pod will start followed by the OAM Managed Servers pods. This process will take several minutes, so keep executing the command until all the pods are running with READY status 1/1:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 5m38s accessdomain-oam-policy-mgr1 1/1 Running 0 2m51s accessdomain-oam-server1 1/1 Running 0 2m50s nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 116m   "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/post-install-config/",
	"title": "Post install configuration",
	"tags": [],
	"description": "Post install configuration.",
	"content": "Follow these post install configuration steps.\n a. Post Install Tasks  Perform post install tasks.\n b. Install and configure connectors  Install and Configure Connectors.\n "
},
{
	"uri": "/fmw-kubernetes/soa-domains/appendix/",
	"title": "Appendix",
	"tags": [],
	"description": "",
	"content": "This section provides information on miscellaneous tasks related to Oracle SOA Suite domains deployment on Kubernetes.\n Domain resource sizing  Describes the resourse sizing information for Oracle SOA Suite domains setup on Kubernetes cluster.\n Quick start deployment on-premise  Describes how to quickly get an Oracle SOA Suite domain instance running (using the defaults, nothing special) for development and test purposes.\n Security hardening  Review resources for the Docker and Kubernetes cluster hardening.\n "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/appendix/",
	"title": "Appendix",
	"tags": [],
	"description": "",
	"content": "This section provides information on miscellaneous tasks related to Oracle WebCenter Sites domains deployment on Kubernetes.\n Domain resource sizing  Describes the resourse sizing information for Oracle WebCenter Sites domains setup on Kubernetes cluster.\n Quick start deployment on-premise  Describes how to quickly get an Oracle WebCenter Sites domain instance running (using the defaults, nothing special) for development and test purposes.\n Security hardening  Review resources for the Docker and Kubernetes cluster hardening.\n "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/configure-design-console/",
	"title": "Configure Design Console",
	"tags": [],
	"description": "Configure Design Console.",
	"content": "Configure an Ingress to allow Design Console to connect to your Kubernetes cluster.\n a. Using Design Console with NGINX(non-SSL)  Configure Design Console with NGINX(non-SSL).\n b. Using Design Console with NGINX(SSL)  Configure Design Console with NGINX(SSL).\n "
},
{
	"uri": "/fmw-kubernetes/idm-products/oud/patch-and-upgrade/",
	"title": "Patch and Upgrade",
	"tags": [],
	"description": "This document provides steps to patch or upgrade an OUD image",
	"content": "In this section you learn how to upgrade OUD from a previous version. Follow the section relevant to the version you are upgrading from.\n Upgrading to January 25 (25.1.1) from April 23 (23.2.1) or later Upgrading to January 25 (25.1.1) from October 22 (22.4.1) or January 23 (23.1.1) Upgrading to January 25 (25.1.1) from July 22 (22.3.1) Upgrading to January 25 (25.1.1) from releases prior to July 22 (22.3.1) Upgrading Elasticsearch and Kibana  Note: If on July 22 (22.3.1) or later, and have Kubernetes Horizontal Pod Autoscaler (HPA) enabled, you must disable HPA before performing the steps in the relevant upgrade section. See Delete the HPA.\nUpgrading to January 25 (25.1.1) from April 23 (23.2.1) or later The instructions below are for upgrading from April 23 (23.2.1) or later to January 25 (25.1.1).\nNote: If you are not using Oracle Container Registry or your own container registry, then you must first load the new container image on all nodes in your Kubernetes cluster.\n  Navigate to the $WORKDIR/kubernetes/helm directory:\n$ cd $WORKDIR/kubernetes/helm   Create a oud-patch-override.yaml file that contains:\nimage: repository: \u0026lt;image_location\u0026gt; tag: \u0026lt;image_tag\u0026gt; imagePullSecrets: - name: orclcred For example:\nimage: repository: container-registry.oracle.com/middleware/oud_cpu tag: 12.2.1.4-jdk8-ol8-\u0026lt;January\u0026#39;25\u0026gt; imagePullSecrets: - name: orclcred The following caveats exist:\n  If you are not using Oracle Container Registry or your own container registry for your OUD container image, then you can remove the following:\nimagePullSecrets: - name: orclcred     Run the following command to upgrade the deployment:\n$ helm upgrade --namespace \u0026lt;namespace\u0026gt; \\ --values oud-patch-override.yaml \\ \u0026lt;release_name\u0026gt; oud-ds-rs --reuse-values For example:\n$ helm upgrade --namespace oudns \\ --values oud-patch-override.yaml \\ oud-ds-rs oud-ds-rs --reuse-values   Upgrading to January 25 (25.1.1) from October 22 (22.4.1) or January 23 (23.1.1) The instructions below are for upgrading from October 22 (22.4.1) or January 23 (23.1.1), to January 25 (25.1.1).\nNote: If you are not using Oracle Container Registry or your own container registry, then you must first load the new container image on all nodes in your Kubernetes cluster.\nScale down OUD   Make sure the base pod (oud-ds-rs-0) is running and healthy (READY 1/1) by running the following command:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods -n oudns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE oud-ds-rs-0 1/1 Running 0 21h oud-ds-rs-1 1/1 Running 0 20h oud-ds-rs-2 1/1 Running 0 20h   Ensure dsreplication is healthy by running the following command:\n$ $ kubectl --namespace \u0026lt;namespace\u0026gt; exec -it -c \u0026lt;containername\u0026gt; \u0026lt;podname\u0026gt; -- \\ /u01/oracle/user_projects/\u0026lt;OUD Instance/Pod Name\u0026gt;/OUD/bin/dsreplication status \\ --trustAll --hostname \u0026lt;OUD Instance/Pod Name\u0026gt; --port 1444 --adminUID admin \\ --dataToDisplay compat-view --dataToDisplay rs-connections For example:\n$ kubectl --namespace oudns exec -it -c oud-ds-rs oud-ds-rs-0 -- \\ /u01/oracle/user_projects/oud-ds-rs-0/OUD/bin/dsreplication status \\ --trustAll --hostname oud-ds-rs-0 --port 1444 --adminUID admin \\ --dataToDisplay compat-view --dataToDisplay rs-connections The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE \u0026gt;\u0026gt;\u0026gt;\u0026gt; Specify Oracle Unified Directory LDAP connection parameters Password for user 'admin': Establishing connections and reading configuration ..... Done. dc=example,dc=com - Replication Enabled ======================================= Server : Entries : M.C. [1] : A.O.M.C. [2] : Port [3] : Encryption [4] : Trust [5] : U.C. [6] : Status [7] : ChangeLog [8] : Group ID [9] : Connected To [10] ---------------------:---------:----------:--------------:----------:----------------:-----------:----------:------------:---------------:--------------:------------------------------- oud-ds-rs-0:1444 : 202 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-0:1898 : : : : : : : : : : : (GID=1) oud-ds-rs-1:1444 : 202 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-1:1898 : : : : : : : : : : : (GID=1) oud-ds-rs-2:1444 : 202 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-2:1898 : : : : : : : : : : : (GID=1) Replication Server [11] : RS #1 : RS #2 : RS #3 -------------------------------:-------:-------:------ oud-ds-rs-0:1898 : -- : Yes : Yes (#1) : : : oud-ds-rs-1:1898 : Yes : -- : Yes (#2) : : : oud-ds-rs-2:1898 : Yes : Yes : -- (#3) : : : etc...   Scale down OUD by reducing the replicas to 1:\n$ cd $WORKDIR/kubernetes/helm $ helm upgrade -n oudns --set replicaCount=1 oud-ds-rs oud-ds-rs --reuse-values Note: The $WORKDIR is the directory for your existing release, not January 25.\nThe output will be similar to the following:\nRelease \u0026quot;oud-ds-rs\u0026quot; has been upgraded. Happy Helming! NAME: oud-ds-rs LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oudns STATUS: deployed REVISION: 2 NOTES: etc.. Make sure the replica pods are shutdown before proceeding:\n$ kubectl get pods -n oudns NAME READY STATUS RESTARTS AGE oud-ds-rs-0 1/1 Running 0 21h Note: It will take several minutes before the replica pods disappear.\n  Backup OUD data   Take a backup of the OUD data for every pod in the NFS shared volume:\n$ kubectl exec -it -n oudns oud-ds-rs-0 -- bash [oracle@oud-ds-rs-0 oracle]$ cd user_projects [oracle@oud-ds-rs-0 user_projects]$ mkdir OUD_backup_\u0026lt;DATE\u0026gt; [oracle@oud-ds-rs-0 user_projects]$ cp -r oud-ds-rs-* OUD_backup_\u0026lt;DATE\u0026gt;/   Make sure the backup created successfully:\n[oracle@oud-ds-rs-0 user_projects]$ ls -l OUD_backup_\u0026lt;date\u0026gt; total 2 drwxr-x---. 5 oracle root 3 \u0026lt;DATE\u0026gt; oud-ds-rs-0 drwxr-x---. 5 oracle root 3 \u0026lt;DATE\u0026gt; oud-ds-rs-1 drwxr-x---. 5 oracle root 3 \u0026lt;DATE\u0026gt; oud-ds-rs-2   Remove the non-zero pod directories oud-ds-rs-1 and oud-ds-rs-2:\n[oracle@oud-ds-rs-0 user_projects]$ rm -rf oud-ds-rs-1 oud-ds-rs-2   Exit the oud-ds-rs-0 bash session:\n[oracle@oud-ds-rs-0 user_projects]$ exit   Setup the January 25 code repository to deploy OUD   Create a working directory on the persistent volume to setup the latest source code:\n$ mkdir \u0026lt;persistent_volume\u0026gt;/\u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/shared/OUDK8SJan25   Download the latest OUD deployment scripts from the OUD repository:\n$ cd \u0026lt;persistent_volume\u0026gt;/\u0026lt;workdir\u0026gt; $ git clone https://github.com/oracle/fmw-kubernetes.git For example:\n$ mkdir /scratch/shared/OUDK8SJan25 $ git clone https://github.com/oracle/fmw-kubernetes.git   Set the $WORKDIR environment variable as follows:\n$ export WORKDIR=\u0026lt;workdir\u0026gt;/fmw-kubernetes/OracleUnifiedDirectory For example:\n$ export WORKDIR=/scratch/shared/OUDK8SJan25/fmw-kubernetes/OracleUnifiedDirectory   Update the OUD container image   Navigate to the $WORKDIR/kubernetes/helm directory:\n$ cd $WORKDIR/kubernetes/helm   Create a oud-patch-override.yaml file that contains:\nimage: repository: \u0026lt;image_location\u0026gt; tag: \u0026lt;image_tag\u0026gt; pullPolicy: IfNotPresent imagePullSecrets: - name: orclcred oudConfig: cleanupbeforeStart: false disablereplicationbeforeStop: false replicaCount: 3 For example:\nimage: repository: container-registry.oracle.com/middleware/oud_cpu tag: 12.2.1.4-jdk8-ol8-\u0026lt;January\u0026#39;25\u0026gt; pullPolicy: IfNotPresent imagePullSecrets: - name: orclcred oudConfig: cleanupbeforeStart: false disablereplicationbeforeStop: false replicaCount: 3 The following caveats exist:\n  If you are not using Oracle Container Registry or your own container registry for your OUD container image, then you can remove the following:\nimagePullSecrets: - name: orclcred     Run the following command to upgrade the deployment:\n$ cd $WORKDIR/kubernetes/helm $ helm upgrade --namespace \u0026lt;namespace\u0026gt; \\ --values oud-patch-override.yaml \\ \u0026lt;release_name\u0026gt; oud-ds-rs --reuse-values For example:\n$ cd $WORKDIR/kubernetes/helm $ helm upgrade --namespace oudns \\ --values oud-patch-override.yaml \\ oud-ds-rs oud-ds-rs --reuse-values The output should look similar to the following:\nRelease \u0026quot;oud-ds-rs\u0026quot; has been upgraded. Happy Helming! NAME: oud-ds-rs LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oudns STATUS: deployed REVISION: 3 NOTES: etc..   Verify the pods   After updating with the new image the pods will restart. Verify the pods are running:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; get pods For example:\n$ kubectl --namespace oudns get pods The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE oud-ds-rs-0 1/1 Running 0 11m oud-ds-rs-1 1/1 Running 0 28m oud-ds-rs-2 1/1 Running 0 22m ... Note: It will take several minutes before the pods oud-ds-rs-1 and oud-ds-rs-2 start, and oud-ds-rs-0 restarts. While the OUD pods have a STATUS of 0/1 the pods are started but the OUD server associated with it is currently starting.\n  Verify the pods are using the new image by running the following command:\n$ kubectl describe pod \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe pod oud-ds-rs-0 -n oudns | grep Image The output will look similar to the following:\n... Image: container-registry.oracle.com/middleware/oud_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January\u0026#39;25\u0026gt; Image ID: container-registry.oracle.com/middleware/oud_cpu@sha256:\u0026lt;sha256\u0026gt;   Ensure dsreplication is healthy by running the following command:\n$ $ kubectl --namespace \u0026lt;namespace\u0026gt; exec -it -c \u0026lt;containername\u0026gt; \u0026lt;podname\u0026gt; -- \\ /u01/oracle/user_projects/\u0026lt;OUD Instance/Pod Name\u0026gt;/OUD/bin/dsreplication status \\ --trustAll --hostname \u0026lt;OUD Instance/Pod Name\u0026gt; --port 1444 --adminUID admin \\ --dataToDisplay compat-view --dataToDisplay rs-connections For example:\n$ kubectl --namespace oudns exec -it -c oud-ds-rs oud-ds-rs-0 -- \\ /u01/oracle/user_projects/oud-ds-rs-0/OUD/bin/dsreplication status \\ --trustAll --hostname oud-ds-rs-0 --port 1444 --adminUID admin \\ --dataToDisplay compat-view --dataToDisplay rs-connections The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE \u0026gt;\u0026gt;\u0026gt;\u0026gt; Specify Oracle Unified Directory LDAP connection parameters Password for user 'admin': Establishing connections and reading configuration ..... Done. dc=example,dc=com - Replication Enabled ======================================= Server : Entries : M.C. [1] : A.O.M.C. [2] : Port [3] : Encryption [4] : Trust [5] : U.C. [6] : Status [7] : ChangeLog [8] : Group ID [9] : Connected To [10] ---------------------:---------:----------:--------------:----------:----------------:-----------:----------:------------:---------------:--------------:------------------------------- oud-ds-rs-0:1444 : 202 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-0:1898 : : : : : : : : : : : (GID=1) oud-ds-rs-1:1444 : 202 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-1:1898 : : : : : : : : : : : (GID=1) oud-ds-rs-2:1444 : 202 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-2:1898 : : : : : : : : : : : (GID=1) Replication Server [11] : RS #1 : RS #2 : RS #3 -------------------------------:-------:-------:------ oud-ds-rs-0:1898 : -- : Yes : Yes (#1) : : : oud-ds-rs-1:1898 : Yes : -- : Yes (#2) : : : oud-ds-rs-2:1898 : Yes : Yes : -- (#3) : : : etc...   Once the validation steps are performed and you are confident OUD is working correctly, you can optionally delete the OUD backup data in the NFS shared volume:\n$ kubectl exec -it -n oudns oud-ds-rs-0 -- bash [oracle@oud-ds-rs-0 oracle]$ cd user_projects/OUD_backup_\u0026lt;DATE\u0026gt;/ [oracle@oud-ds-rs-0 OUD_backup_\u0026lt;DATE\u0026gt;]$ rm -rf oud-ds-rs-0 oud-ds-rs-1 oud-ds-rs-2   Upgrading to January 25 (25.1.1) from July 22 (22.3.1) The instructions below are for upgrading from July 22 (22.3.1) to January 25 (25.1.1).\n Follow Upgrading to January 25 (25.1.1) from October 22 (22.4.1) or January 23 (23.1.1) to upgrade the image. Once the image is upgraded, follow Upgrading Elasticsearch and Kibana.  Upgrading to January 25 (25.1.1) from releases prior to July 22 (22.3.1) In releases prior to July 22 (22.3.1) OUD used pod based deployment. From July 22 (22.3.1) onwards OUD is deployed using StatefulSets.\nIf you are upgrading from a release prior to July 22 (22.3.1) you must follow the steps below to deploy a new OUD instance to use your existing OUD data in \u0026lt;persistent_volume\u0026gt;/oud_user_projects.\nNote: The steps below will incur a small outage.\nDelete the existing deployment   Find the deployment release name as follows:\n$ helm --namespace \u0026lt;namespace\u0026gt; list For example:\n$ helm --namespace oudns list The output will look similar to the following:\nNAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION oud-ds-rs oudns 1 \u0026lt;DATE\u0026gt; deployed oud-ds-rs-0.2 12.2.1.4.0   Delete the deployment using the following command:\n$ helm uninstall --namespace \u0026lt;namespace\u0026gt; \u0026lt;release\u0026gt; For example:\n$ helm uninstall --namespace oudns oud-ds-rs release \u0026#34;oud-ds-rs\u0026#34; uninstalled   Run the following command to view the status:\n$ kubectl --namespace oudns get pod,service,secret,pv,pvc,ingress -o wide Initially the pods and persistent volume (PV) and persistent volume claim (PVC) will move to a Terminating status:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oud-ds-rs-0 1/1 Terminating 0 24m 10.244.1.180 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-1 1/1 Terminating 0 18m 10.244.1.181 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-2 1/1 Terminating 0 12m 10.244.1.182 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; NAME TYPE DATA AGE secret/default-token-msmmd kubernetes.io/service-account-token 3 3d20h secret/dockercred kubernetes.io/dockerconfigjson 1 3d20h secret/orclcred kubernetes.io/dockerconfigjson 1 3d20h NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE VOLUMEMODE persistentvolume/oud-ds-rs-pv 20Gi RWX Delete Terminating oudns/oud-ds-rs-pvc manual 24m Filesystem NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE VOLUMEMODE persistentvolumeclaim/oud-ds-rs-pvc Terminating oud-ds-rs-pv 20Gi RWX manual 24m Filesystem Run the command again until the pods, PV and PVC disappear.\n  Setup the code repository to deploy OUD   Create a working directory on the persistent volume to setup the latest source code:\n$ mkdir \u0026lt;persistent_volume\u0026gt;/\u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/shared/OUDK8SJan25   Download the latest OUD deployment scripts from the OUD repository:\n$ cd \u0026lt;persistent_volume\u0026gt;/\u0026lt;workdir\u0026gt; $ git clone https://github.com/oracle/fmw-kubernetes.git For example:\n$ cd /scratch/shared/OUDK8SJan25 $ git clone https://github.com/oracle/fmw-kubernetes.git   Set the $WORKDIR environment variable as follows:\n$ export WORKDIR=\u0026lt;workdir\u0026gt;/fmw-kubernetes/OracleUnifiedDirectory For example:\n$ export WORKDIR=/scratch/shared/OUDK8SJan25/fmw-kubernetes/OracleUnifiedDirectory   Create a new instance against your existing persistent volume   Navigate to the $WORKDIR/kubernetes/helm directory\n$ cd $WORKDIR/kubernetes/helm   Create an oud-ds-rs-values-override.yaml as follows:\nimage: repository: \u0026lt;image_location\u0026gt; tag: \u0026lt;image_tag\u0026gt; pullPolicy: IfNotPresent imagePullSecrets: - name: orclcred oudConfig: rootUserPassword: \u0026lt;password\u0026gt; sampleData: \u0026#34;200\u0026#34; persistence: type: filesystem filesystem: hostPath: path: \u0026lt;persistent_volume\u0026gt;/oud_user_projects cronJob: kubectlImage: repository: bitnami/kubectl tag: \u0026lt;version\u0026gt; pullPolicy: IfNotPresent imagePullSecrets: - name: dockercred For example:\nimage: repository: container-registry.oracle.com/middleware/oud_cpu tag: 12.2.1.4-jdk8-ol8-\u0026lt;January\u0026#39;25\u0026gt; pullPolicy: IfNotPresent imagePullSecrets: - name: orclcred oudConfig: rootUserPassword: \u0026lt;password\u0026gt; sampleData: \u0026#34;200\u0026#34; persistence: type: filesystem filesystem: hostPath: path: /scratch/shared/oud_user_projects cronJob: kubectlImage: repository: bitnami/kubectl tag: 1.28.3 pullPolicy: IfNotPresent imagePullSecrets: - name: dockercred The following caveats exist:\n  The \u0026lt;persistent_volume\u0026gt;/oud_user_projects must point to the directory used in your previous deployment otherwise your existing OUD data will not be used. Make sure you take a backup of the \u0026lt;persistent_volume\u0026gt;/oud_user_projects directory before proceeding further.\n  Replace \u0026lt;password\u0026gt; with the password used in your previous deployment.\n  The \u0026lt;version\u0026gt; in kubectlImage tag: should be set to the same version as your Kubernetes version (kubectl version). For example if your Kubernetes version is 1.28.3 set to 1.28.3.\n  If you are not using Oracle Container Registry or your own container registry for your OUD container image, then you can remove the following:\nimagePullSecrets: - name: orclcred   If using NFS for your persistent volume then change the persistence section as follows:\npersistence: type: networkstorage networkstorage: nfs: path: \u0026lt;persistent_volume\u0026gt;/oud_user_projects server: \u0026lt;NFS IP address\u0026gt;     Run the following command to deploy OUD:\n$ helm install --namespace \u0026lt;namespace\u0026gt; \\ --values oud-ds-rs-values-override.yaml \\ \u0026lt;release_name\u0026gt; oud-ds-rs For example:\n$ helm install --namespace oudns \\ --values oud-ds-rs-values-override.yaml \\ oud-ds-rs oud-ds-rs   Check the OUD deployment as per Verify the OUD deployment and Verify the OUD replication.\n  Upgrade Elasticsearch and Kibana by following Upgrading Elasticsearch and Kibana.\n  Upgrading Elasticsearch and Kibana This section shows how to upgrade Elasticsearch and Kibana. From October 22 (22.4.1) onwards, OUD logs should be stored on a centralized Elasticsearch and Kibana stack.\nNote: This section should only be followed if upgrading from July 22 (22.3.1) or earlier to January 25 (25.1.1). If you are upgrading from October 22 or later to January 25 do not follow this section.\nUndeploy Elasticsearch and Kibana From October 22 (22.4.1) onwards, OUD logs should be stored on a centralized Elasticsearch and Kibana (ELK) stack.\nDeployments prior to October 22 (22.4.1) used local deployments of Elasticsearch and Kibana.\nIf you are upgrading from July 22 (22.3.1) or earlier, to January 25 (25.1.1), you must first undeploy Elasticsearch and Kibana using the steps below:\n  Navigate to the $WORKDIR/kubernetes/helm directory and create a logging-override-values-uninstall.yaml with the following:\nelk: enabled: false   Run the following command to remove the existing ELK deployment:\n$ helm upgrade --namespace \u0026lt;domain_namespace\u0026gt; --values \u0026lt;valuesfile.yaml\u0026gt; \u0026lt;releasename\u0026gt; oud-ds-rs --reuse-values For example:\n$ helm upgrade --namespace oudns --values logging-override-values-uninstall.yaml oud-ds-rs oud-ds-rs --reuse-values   Deploy ElasticSearch and Kibana in centralized stack  Follow Install Elasticsearch stack and Kibana to deploy ElasticSearch and Kibana in a centralized stack.  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oudsm/patch-and-upgrade/",
	"title": "Patch and upgrade",
	"tags": [],
	"description": "This document provides steps to patch or upgrade an OUD image, and Elasticsearch and Kibana.",
	"content": "This section shows you how to upgrade the OUDSM image, and how to upgrade the Elasticsearch and Kibana stack.\nThe upgrade path taken depends on the version you are upgrading from.\nPlease refer to the Release Notes for information on which upgrade steps are necessary for the version you are upgrading to.\n a. Patch an image  Instructions on how to update your OUDSM Kubernetes cluster with a new OUDSM container image.\n b. Upgrade Elasticsearch and Kibana  Instructions on how to upgrade Elastic Search and Kibana.\n "
},
{
	"uri": "/fmw-kubernetes/ohs/troubleshooting/",
	"title": "Troubleshooting",
	"tags": [],
	"description": "How to Troubleshoot OHS container failure.",
	"content": " OHS Container in CreatingContainer status OHS Container in ImagePullBackOff OHS Container in 0/1 Running Status Issues with LivenessProbe Viewing OHS log files  The instructions in this section relate to problems creating OHS containers and viewing log files.\nOHS Container in CreatingContainer status During OHS container creation you may see:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-vkp4s 0/1 ContainerCreating 0 2m13s To check what is happening while the pod is in ContainerCreating status, you can run:\n$ kubectl describe pod \u0026lt;podname\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe pod ohs-domain-d5b648bc5-vkp4s -n ohsns The details of the above command can help identify possible problems.\nIn the Events, if you see Pulling image \u0026lt;image\u0026gt;, this means that the container is pulling the image from the container-registry. Depending on the speed of the network this could take 5-10 minutes. Once the image is pulled you should see the pod go to RUNNING 0/1 status, before eventually going to RUNNING 1\\1.\nOHS Container in ImagePullBackOff If you see the following:\nkubectl get pods -n ohsns NAME READY STATUS RESTARTS AGE ohs-domain-58b8dc4749-hzlc9 0/1 ImagePullBackOff 0 16s This could be because you have put the wrong image location in the ohs.yaml, there is a problem with the image itself, or the secrets created are incorrect.\nOnce the problem is identified and resolved, you can delete the container and try again:\n$ cd $MYOHSFILES $ kubectl delete -f ohs.yaml $ kubectl create -f ohs.yaml OHS Container in 0/1 Running Status During OHS container creation you may see:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-vkp4s 0/1 Running 0 2m13s This is normal behaviour during any startup, however the pod should eventually go to RUNNING 1/1\nWhilst the pod is in 0/1  status, you can check what is happening by running:\n$ kubectl logs -f \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl logs -f ohs-domain-d5b648bc5-vkp4s -n ohsns If there are any problems or errors during startup, they will be logged here.\nYou can also describe the pod to determine potential problems:\n$ kubectl describe pod \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe pod ohs-domain-d5b648bc5-vkp4s -n ohsns Additionally, you can view the OHS log files inside the container. See, Viewing OHS log files.\nDepending on the error, you may need to fix the files in the $MYOHSFILES/ohsConfig directories.\nOnce you have fixed your configuration files, you will need to delete the appropriate configmap(s) and recreate. For example if the problem was in httpd.conf, ssl.conf, or mod_wl_ohs.conf:\n$ cd $MYOHSFILES $ kubectl delete -f ohs.yaml $ kubectl delete cm ohs-httpd -n ohsns $ kubectl create cm -n ohsns ohs-httpd --from-file=ohsConfig/httpconf $ kubectl create -f ohs.yaml Issues with LivenessProbe If you see OHS Container in 0/1 Running Status and the container constantly restarts:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-vkp4s 0/1 Running 4 2m13s If this occurs and kubectl logs -f \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; is showing no errors, then run:\n$ kubectl describe pod \u0026lt;podname\u0026gt; -n \u0026lt;namespace\u0026gt; If the output shows:\n ---- ------ ---- ---- ------- Normal Scheduled 63s default-scheduler Successfully assigned ohsns/ohs-domain-857c5d97d5-8nnx9 to doc-worker1 Normal Pulled 17s (x2 over 62s) kubelet Container image \u0026quot;\u0026lt;image\u0026gt;\u0026quot; already present on machine Normal Created 17s (x2 over 62s) kubelet Created container ohs Normal Started 17s (x2 over 62s) kubelet Started container ohs Warning Unhealthy 2s (x9 over 61s) kubelet Readiness probe failed: Get \u0026quot;http://10.244.1.150:7777/helloWorld.html\u0026quot;: dial tcp 10.244.1.150:7777: connect: connection refused Warning Unhealthy 2s (x6 over 57s) kubelet Liveness probe failed: Normal Killing 2s (x2 over 47s) kubelet Container ohs failed liveness probe, will be restarted It\u0026rsquo;s possible the liveness probe is killing and restarting the container because the httpd process has not started before the liveness probe checks. This can happen on slow systems.\nIf this occurs delete the container:\n$ cd $MYOHSFILES $ kubectl delete -f ohs.yaml and edit the ohs.yaml file and increase the initialDelaySeconds from 10 to 30:\n livenessProbe: exec: command: - /bin/bash - -c - pgrep httpd initialDelaySeconds: 30 periodSeconds: 5 Then try creating the container again:\n$ cd $MYOHSFILES $ kubectl create -f ohs.yaml Viewing OHS log files To view OHS log files inside the container, run the following commands:\n$ kubectl exec -n \u0026lt;namespace\u0026gt; -ti \u0026lt;pod\u0026gt; -- /bin/bash For example:\n$ kubectl exec -n ohsns -ti ohs-domain-79f8f99575-8qwfh -- /bin/bash This will take you to a bash shell inside the container:\n[oracle@ohs-domain-75fbd9b597-z77d8 oracle]$ Inside the bash shell navigate to the /u01/oracle/user_projects/domains/ohsDomain/server/ohs1/logs directory:\n$ cd /u01/oracle/user_projects/domains/ohsDomain/server/ohs1/logs From within this directory, you can cat the OHS log files to help diagnose problems.\n"
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/validate-sso-using-webgate/",
	"title": "Validate a Basic SSO Flow using WebGate Registration ",
	"tags": [],
	"description": "Sample for validating a basic SSO flow using WebGate registration.",
	"content": "In this section you validate single-sign on works to the OAM Kubernetes cluster via Oracle WebGate.\nThe instructions below assume you have a running Oracle HTTP Server (OHS) (for example ohs1) and Oracle WebGate installed either in an on-premises setup, or in a Kubernetes cluster. If you are deploying OHS on a Kubernetes cluster, see the Supported Architectures.\nThe instructions also assume you have a working knowledge of OHS and WebGate.\nUpdate the OAM Hostname and Port for the Loadbalancer You must update OAM with the protocol, hostname.domain, and port for your OAM entry point.\nFor example:\n https://loadbalancer.example.com - if OAM URL\u0026rsquo;s are accessed directly via a load balancer URL, with hostname loadbalancer.example.com and port 443. https://ohs.example.com:4443 - if OAM URL\u0026rsquo;s are accessed directly via an OHS URL, with hostname ohs.example.com and port 4443. https://masternode.example.com:31501 - if OAM URL\u0026rsquo;s are accessed directly via the ingress controller, with hostname masternode.example.com and port 31501.  In the following examples change {HOSTNAME}:${PORT} accordingly.\n  Launch a browser and access the OAM console (https://${HOSTNAME}:${PORT}/oamconsole). Login with the weblogic username and password (weblogic/\u0026lt;password\u0026gt;).\n  Navigate to Configuration → Settings ( View ) → Access Manager.\n  Under Load Balancing modify the OAM Server Host and OAM Server Port, to point to the hostname.domain of your OAM entry point, for example loadbalancer.example.com and 443 respectively. In the OAM Server Protocol drop down list select https.\n  Under WebGate Traffic Load Balancer modify the OAM Server Host and OAM Server Port, to point to the hostname.domain of your OAM entry point, for example loadbalancer.example.com and 443 respectively. In the OAM Server Protocol drop down list select https.\n  Click Apply.\n  Register a WebGate Agent   Launch a browser, and access the OAM console.\n  Navigate to Application Security → Quick Start Wizards → SSO Agent Registration. Register the agent in the usual way.\n  After creating the agent, make sure the User Defined Parameters for OAMRestEndPointHostName, OAMRestEndPointPort, and OAMServerCommunicationMode are set to the same values as per Update the OAM Hostname and Port for the Loadbalancer. Click Apply.\n  Click Download to download the agent zip file and keep in a safe place. This file this will be required in Configure OHS to use the WebGate.\n  Configure the Application Domain   In the OAM console, navigate to Application Security → Application Domains. Click Search, and click the domain for the agent just created.\n  In the Application Domain page, under Resources, click Create and protect a simple resource, for example /myapp/**. Change the following:\n Type: HTTP Host Identifier: \u0026lt;your_application_domain\u0026gt; Protection Level: Protected Authentication Policy: Protected Resource Policy Authorization Policy: Protected Resource Policy  Note: The purpose of the above is to test a simple page protection works. Once everything is confirmed as working, you can configure your desired resources and policies.\n  Click Apply.\n  Create Host Identifiers   In the OAM console, navigate to Application Security → Access Manager → Host Identifiers. Click Search, and click the Name for the agent just created.\n  In the Host Name Variations, click Add.\n  In the new line that appears, add the details for any URL that will be used for this WebGate, for example if you access a protected URL via https://loadbalancer.example.com, then under Host Name enter loadbalancer.example.com and under Port enter 443. Click Apply.\n  Repeat for any other required URL\u0026rsquo;s.\n  Configure OHS to use the WebGate Follow the relevant section depending on whether your are using on-premises OHS, or OHS deployed in Kubernetes.\nOn-premises OHS installation The instructions in this section are for on-premises OHS installations only.\nIn all the examples below, change the directory path as appropriate for your installation.\n  Run the following command on the server with Oracle HTTP Server and WebGate installed:\n$ cd \u0026lt;OHS_ORACLE_HOME\u0026gt;/webgate/ohs/tools/deployWebGate $ ./deployWebGateInstance.sh -w \u0026lt;OHS_DOMAIN_HOME\u0026gt;/config/fmwconfig/components/OHS/ohs1 -oh \u0026lt;OHS_ORACLE_HOME\u0026gt; -ws ohs The output will look similar to the following:\nCopying files from WebGate Oracle Home to WebGate Instancedir   Run the following command to update the OHS configuration files appropriately:\n$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:\u0026lt;OHS_ORACLE_HOME\u0026gt;/lib $ cd \u0026lt;OHS_ORACLE_HOME\u0026gt;/webgate/ohs/tools/setup/InstallTools/ $ ./EditHttpConf -w \u0026lt;OHS_DOMAIN_HOME\u0026gt;/config/fmwconfig/components/OHS/ohs1 -oh \u0026lt;OHS_ORACLE_HOME\u0026gt; The output will look similar to the following:\nThe web server configuration file was successfully updated \u0026lt;OHS_DOMAIN_HOME\u0026gt;/config/fmwconfig/components/OHS/ohs1/httpd.conf has been backed up as \u0026lt;OHS_DOMAIN_HOME\u0026gt;/config/fmwconfig/components/OHS/ohs1/httpd.conf.ORIG   Copy the agent zip file downloaded earlier and copy to the OHS server, for example: \u0026lt;OHS_DOMAIN_HOME\u0026gt;/config/fmwconfig/components/OHS/ohs1/webgate/config. Extract the zip file.\n  Obtain the Certificate Authority (CA) certificate (cacert.pem) that signed the certificate for your OAM entry point. Copy to the to the same directory, for example: \u0026lt;OHS_DOMAIN_HOME\u0026gt;/config/fmwconfig/components/OHS/ohs1/webgate/config.\nNote:\n The CA certificate is the certificate that signed the certificate for your OAM entry point. For example if you access OAM directly via a load balancer, then this is the CA of the load balancer certificate. The file must be renamed to cacert.pem.    Restart Oracle HTTP Server.\n  Access the protected resource, for example https://ohs.example.com/myapp, and check you are redirected to the SSO login page. Login and make sure you are redirected successfully to the home page.\n  OHS deployed on Kubernetes If deploying OHS on Kubernetes you must copy the agent zip file downloaded earlier to the $WORKDIR/ohsConfig/webgate/config directory and extract it.\nSee Prepare your OHS configuration files for detailed instructions.\nChanging WebGate agent to use OAP Note: This section should only be followed if you need to change the OAM/WebGate Agent communication from HTTPS to OAP.\nTo change the WebGate agent to use OAP:\n  In the OAM Console click Application Security and then Agents.\n  Search for the agent you want modify and select it.\n  In the User Defined Parameters change:\na) OAMServerCommunicationMode from HTTPS to OAP. For example OAMServerCommunicationMode=OAP\nb) OAMRestEndPointHostName=\u0026lt;hostname\u0026gt; to the {$MASTERNODE-HOSTNAME}. For example OAMRestEndPointHostName=masternode.example.com\n  In the Server Lists section click Add to add a new server with the following values:\n Access Server: Other Host Name: \u0026lt;{$MASTERNODE-HOSTNAME}\u0026gt; Host Port: \u0026lt;oamoap-service NodePort\u0026gt;  Note: To find the value for Host Port run the following:\n$ kubectl describe svc accessdomain-oamoap-service -n oamns The output will look similar to the following:\nName: accessdomain-oamoap-service Namespace: oamns Labels: \u0026lt;none\u0026gt; Annotations: \u0026lt;none\u0026gt; Selector: weblogic.clusterName=oam_cluster Type: NodePort IP Families: \u0026lt;none\u0026gt; IP: 10.100.202.44 IPs: 10.100.202.44 Port: \u0026lt;unset\u0026gt; 5575/TCP TargetPort: 5575/TCP NodePort: \u0026lt;unset\u0026gt; 30540/TCP Endpoints: 10.244.5.21:5575,10.244.6.76:5575 Session Affinity: None External Traffic Policy: Cluster Events: \u0026lt;none\u0026gt; In the example above the NodePort is 30540.\n  Delete all servers in Server Lists except for the one just created, and click Apply.\n  Click Download to download the webgate zip file. Copy the zip file to the desired WebGate.\n  Delete the cache from \u0026lt;OHS_DOMAIN_HOME\u0026gt;/servers/ohs1/cache and restart Oracle HTTP Server.\n  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/manage-oam-domains/",
	"title": "Manage OAM Domains",
	"tags": [],
	"description": "This document provides steps to manage the OAM domain.",
	"content": "Important considerations for Oracle Access Management domains in Kubernetes.\n a. Domain Life Cycle  Learn about the domain life cycle of an OAM domain.\n b. WLST Administration Operations  Describes the steps for WLST administration using helper pod running in the same Kubernetes Cluster as OAM Domain.\n c. Logging and Visualization  Describes the steps for logging and visualization with Elasticsearch and Kibana.\n d. Monitoring an OAM domain  Describes the steps for Monitoring the OAM domain.\n e. Kubernetes Horizontal Pod Autoscaler  Describes the steps for implementing the Horizontal Pod Autoscaler.\n f. Delete the OAM domain home  Learn about the steps to cleanup the OAM domain home.\n "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/manage-oig-domains/",
	"title": "Manage OIG domains",
	"tags": [],
	"description": "This document provides steps to manage the OIG domain.",
	"content": "Important considerations for Oracle Identity Governance domains in Kubernetes.\n a. Domain life cycle  Learn about the domain lifecycle of an OIG domain.\n b. WLST administration operations  Describes the steps for WLST administration using helper pod running in the same Kubernetes Cluster as OIG Domain.\n c. Runnning OIG utilities  Describes the steps for running OIG utilities in Kubernetes.\n d. Logging and visualization  Describes the steps for logging and visualization with Elasticsearch and Kibana.\n e. Monitoring an OIG domain  Describes the steps for Monitoring the OIG domain and Publishing the logs to Elasticsearch.\n f. Kubernetes Horizontal Pod Autoscaler  Describes the steps for implementing the Horizontal Pod Autoscaler.\n g. Delete the OIG domain home  Learn about the steps to cleanup the OIG domain home.\n "
},
{
	"uri": "/fmw-kubernetes/idm-products/oud/troubleshooting/",
	"title": "Troubleshooting",
	"tags": [],
	"description": "How to Troubleshoot issues.",
	"content": " Check the status of a namespace View pod logs View pod description Known issues  Check the status of a namespace To check the status of objects in a namespace use the following command:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; get nodes,pod,service,secret,pv,pvc,ingress -o wide For example:\n$ kubectl --namespace oudns get pod,service,secret,pv,pvc,ingress -o wide The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oud-ds-rs-0 1/1 Running 0 14m 10.244.1.180 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-1 1/1 Running 0 8m26s 10.244.1.181 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-2 0/1 Running 0 2m24s 10.244.1.182 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-pod-cron-job-27586680-p5d8q 0/1 Completed 0 50s 10.244.1.183 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service/oud-ds-rs ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1389/TCP,1636/TCP,1080/TCP,1081/TCP,1898/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-0 ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1898/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-0 service/oud-ds-rs-1 ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1898/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-1 service/oud-ds-rs-2 ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1898/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-2 service/oud-ds-rs-http-0 ClusterIP 10.104.112.93 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-0 service/oud-ds-rs-http-1 ClusterIP 10.103.105.70 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-1 service/oud-ds-rs-http-2 ClusterIP 10.110.160.107 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-2 service/oud-ds-rs-lbr-admin ClusterIP 10.99.238.222 \u0026lt;none\u0026gt; 1888/TCP,1444/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-lbr-http ClusterIP 10.101.250.196 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-lbr-ldap ClusterIP 10.104.149.90 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-ldap-0 ClusterIP 10.109.255.221 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-0 service/oud-ds-rs-ldap-1 ClusterIP 10.111.135.142 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-1 service/oud-ds-rs-ldap-2 ClusterIP 10.100.8.145 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-2 NAME TYPE DATA AGE secret/dockercred kubernetes.io/dockerconfigjson 1 4h24m secret/orclcred kubernetes.io/dockerconfigjson 1 14m secret/oud-ds-rs-creds opaque 8 14m secret/oud-ds-rs-tls-cert kubernetes.io/tls 2 14m secret/sh.helm.release.v1.oud-ds-rs.v1 helm.sh/release.v1 1 14m NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE VOLUMEMODE persistentvolume/oud-ds-rs-pv 20Gi RWX Delete Bound oudns/oud-ds-rs-pvc manual 14m Filesystem NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE VOLUMEMODE persistentvolumeclaim/oud-ds-rs-pvc Bound oud-ds-rs-pv 20Gi RWX manual 14m Filesystem NAME CLASS HOSTS ADDRESS PORTS AGE ingress.networking.k8s.io/oud-ds-rs-admin-ingress-nginx \u0026lt;none\u0026gt; oud-ds-rs-admin-0,oud-ds-rs-admin-0,oud-ds-rs-admin-1 + 3 more... 80, 443 14m ingress.networking.k8s.io/oud-ds-rs-http-ingress-nginx \u0026lt;none\u0026gt; oud-ds-rs-http-0,oud-ds-rs-http-1,oud-ds-rs-http-2 + 3 more... 80, 443 14m Include/exclude elements (nodes,pod,service,secret,pv,pvc,ingress) as required.\nView pod logs To view logs for a pod use the following command:\n$ kubectl logs \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl logs oud-ds-rs-0 -n oudns View pod description Details about a pod can be viewed using the kubectl describe command:\n$ kubectl describe pod \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe pod oud-ds-rs-0 -n oudns The output will look similar to the following:\nName: oud-ds-rs-0 Namespace: oudns Priority: 0 Node: \u0026lt;Worker Node\u0026gt;/100.105.18.114 Start Time: \u0026lt;DATE\u0026gt; Labels: app.kubernetes.io/instance=oud-ds-rs app.kubernetes.io/name=oud-ds-rs controller-revision-hash=oud-ds-rs-5c8b8f67c9 statefulset.kubernetes.io/pod-name=oud-ds-rs-0 Annotations: \u0026lt;none\u0026gt; Status: Running IP: 10.244.2.48 IPs: IP: 10.244.2.48 Controlled By: StatefulSet/oud-ds-rs Init Containers: mount-pv: Container ID: cri-o://905af11c6f032f2dfa18b1e3956d7936cb7dd04d9d0df0cfcf8ed061e6930b52 Image: \u0026lt;location\u0026gt;/busybox Image ID: \u0026lt;location\u0026gt;@sha256:2c8ed5408179ff4f53242a4bdd2706110ce000be239fe37a61be9c52f704c437 Port: \u0026lt;none\u0026gt; Host Port: \u0026lt;none\u0026gt; Command: /bin/sh -c Args: ordinal=${OUD_INSTANCE_NAME##*-}; if [[ ${CLEANUP_BEFORE_START} == \u0026quot;true\u0026quot; ]]; then if [[ \u0026quot;$ordinal\u0026quot; != \u0026quot;0\u0026quot; ]]; then cd /u01/oracle; rm -fr /u01/oracle/user_projects/$(OUD_INSTANCE_NAME)/OUD; fi; fi if [[ ${CONFIGVOLUME_ENABLED} == \u0026quot;true\u0026quot; ]]; then if [[ \u0026quot;$ordinal\u0026quot; == \u0026quot;0\u0026quot; ]]; then cp \u0026quot;/mnt/baseOUD.props\u0026quot; \u0026quot;${CONFIGVOLUME_MOUNTPATH}/config-baseOUD.props\u0026quot;; else cp \u0026quot;/mnt/replOUD.props\u0026quot; \u0026quot;${CONFIGVOLUME_MOUNTPATH}/config-replOUD.props\u0026quot;; fi; fi; State: Terminated Reason: Completed Exit Code: 0 Started: \u0026lt;DATE\u0026gt; Finished: \u0026lt;DATE\u0026gt; Ready: True Restart Count: 0 Environment: OUD_INSTANCE_NAME: oud-ds-rs-0 (v1:metadata.name) CONFIGVOLUME_ENABLED: false CONFIGVOLUME_MOUNTPATH: /u01/oracle/config-input CLEANUP_BEFORE_START: false Mounts: /u01/oracle/user_projects from oud-ds-rs-pv (rw) /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-65skp (ro) Containers: oud-ds-rs: Container ID: cri-o://d691b090dfbb1ee1b8606952497d80642424a82a2290071b325ea720098817c3 Image: container-registry.oracle.com/middleware/oud_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January'25\u0026gt; Image ID: container-registry.oracle.com/middleware/oud_cpu@sha256:faca16dbbcda1985ff567eefe3f2ca7bae6cbbb7ebcd296fffb040ce61e9396a Ports: 1444/TCP, 1888/TCP, 1389/TCP, 1636/TCP, 1080/TCP, 1081/TCP, 1898/TCP Host Ports: 0/TCP, 0/TCP, 0/TCP, 0/TCP, 0/TCP, 0/TCP, 0/TCP State: Running Started: \u0026lt;DATE\u0026gt; Ready: True Restart Count: 0 Limits: cpu: 1 memory: 4Gi Requests: cpu: 500m memory: 4Gi Liveness: tcp-socket :ldap delay=300s timeout=30s period=60s #success=1 #failure=5 Readiness: exec [/u01/oracle/container-scripts/checkOUDInstance.sh] delay=300s timeout=30s period=60s #success=1 #failure=10 Environment: instanceType: DS2RS_STS OUD_INSTANCE_NAME: oud-ds-rs-0 (v1:metadata.name) MY_NODE_NAME: (v1:spec.nodeName) MY_POD_NAME: oud-ds-rs-0 (v1:metadata.name) sleepBeforeConfig: 3 sourceHost: oud-ds-rs-0 baseDN: dc=example,dc=com rootUserDN: \u0026lt;set to the key 'rootUserDN' in secret 'oud-ds-rs-creds'\u0026gt; Optional: false rootUserPassword: \u0026lt;set to the key 'rootUserPassword' in secret 'oud-ds-rs-creds'\u0026gt; Optional: false adminUID: \u0026lt;set to the key 'adminUID' in secret 'oud-ds-rs-creds'\u0026gt; Optional: false adminPassword: \u0026lt;set to the key 'adminPassword' in secret 'oud-ds-rs-creds'\u0026gt; Optional: false bindDN1: \u0026lt;set to the key 'bindDN1' in secret 'oud-ds-rs-creds'\u0026gt; Optional: false bindPassword1: \u0026lt;set to the key 'bindPassword1' in secret 'oud-ds-rs-creds'\u0026gt; Optional: false bindDN2: \u0026lt;set to the key 'bindDN2' in secret 'oud-ds-rs-creds'\u0026gt; Optional: false bindPassword2: \u0026lt;set to the key 'bindPassword2' in secret 'oud-ds-rs-creds'\u0026gt; Optional: false sourceServerPorts: oud-ds-rs-0:1444 sourceAdminConnectorPort: 1444 sourceReplicationPort: 1898 sampleData: 200 adminConnectorPort: 1444 httpAdminConnectorPort: 1888 ldapPort: 1389 ldapsPort: 1636 httpPort: 1080 httpsPort: 1081 replicationPort: 1898 dsreplication_1: verify --hostname ${sourceHost} --port ${sourceAdminConnectorPort} --baseDN ${baseDN} --serverToRemove $(OUD_INSTANCE_NAME):${adminConnectorPort} --connectTimeout 600000 --readTimeout 600000 dsreplication_2: enable --host1 ${sourceHost} --port1 ${sourceAdminConnectorPort} --replicationPort1 ${sourceReplicationPort} --host2 $(OUD_INSTANCE_NAME) --port2 ${adminConnectorPort} --replicationPort2 ${replicationPort} --baseDN ${baseDN} --connectTimeout 600000 --readTimeout 600000 dsreplication_3: initialize --hostSource ${initializeFromHost} --portSource ${sourceAdminConnectorPort} --hostDestination $(OUD_INSTANCE_NAME) --portDestination ${adminConnectorPort} --baseDN ${baseDN} --connectTimeout 600000 --readTimeout 600000 dsreplication_4: verify --hostname $(OUD_INSTANCE_NAME) --port ${adminConnectorPort} --baseDN ${baseDN} --connectTimeout 600000 --readTimeout 600000 post_dsreplication_dsconfig_1: set-replication-domain-prop --domain-name ${baseDN} --set group-id:1 post_dsreplication_dsconfig_2: set-replication-server-prop --set group-id:1 Mounts: /u01/oracle/user_projects from oud-ds-rs-pv (rw) /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-65skp (ro) Conditions: Type Status Initialized True Ready True ContainersReady True PodScheduled True Volumes: oud-ds-rs-pv: Type: PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace) ClaimName: oud-ds-rs-pvc ReadOnly: false kube-api-access-65skp: Type: Projected (a volume that contains injected data from multiple sources) TokenExpirationSeconds: 3607 ConfigMapName: kube-root-ca.crt ConfigMapOptional: \u0026lt;nil\u0026gt; DownwardAPI: true QoS Class: Burstable Node-Selectors: \u0026lt;none\u0026gt; Tolerations: node.kubernetes.io/not-ready:NoExecute op=Exists for 300s node.kubernetes.io/unreachable:NoExecute op=Exists for 300s Events: \u0026lt;none\u0026gt; Known issues dsreplication output after scale up/down shows pod in unknown state Sometimes when scaling up or down, it is possible to get incorrect data in the dsreplication output. In the example below the replicaCount was changed from 4 to 3. The oud-ds-rs-3 server appears as \u0026lt;Unknown\u0026gt; when it should have disappeared:\ndc=example,dc=com - Replication Enabled ======================================= Server : Entries : M.C. [1] : A.O.M.C. [2] : Port [3] : Encryption [4] : Trust [5] : U.C. [6] : Status [7] : ChangeLog [8] : Group ID [9] : Connected To [10] -------------------------------:---------:----------:--------------:----------:----------------:-----------:----------:------------:---------------:--------------:------------------------------- oud-ds-rs-3:\u0026lt;Unknown\u0026gt; : -- : N/A : -- : 1898 : Disabled : -- : -- : Unknown : -- : N/A : -- [11] : : : : : : : : : : : oud-ds-rs-0:1444 : 39135 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-2:1898 : : : : : : : : : : : (GID=1) oud-ds-rs-1:1444 : 39135 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-1:1898 : : : : : : : : : : : (GID=1) oud-ds-rs-2:1444 : 39135 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-2:1898 : : : : : : : : : : : (GID=1) Replication Server [12] : RS #1 : RS #2 : RS #3 : RS #4 ------------------------------:-------:-------:-------:------ oud-ds-rs-0:1898 (#1) : -- : Yes : Yes : N/A oud-ds-rs-1:1898 (#2) : Yes : -- : Yes : N/A oud-ds-rs-2:1898 (#3) : Yes : Yes : -- : N/A oud-ds-rs-3:1898 (#4) : No : No : No : -- In this situation perform the following steps to remove the server:\n  Run the following command to enter the OUD Kubernetes pod:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; exec -it -c \u0026lt;containername\u0026gt; \u0026lt;podname\u0026gt; -- bash For example:\nkubectl --namespace oudns exec -it -c oud-ds-rs oud-ds-rs-0 -- bash This will take you into the pod:\n[oracle@oud-ds-rs-0 oracle]$   Once inside the pod run the following command to create a password file:\necho \u0026lt;ADMIN_PASSWORD\u0026gt; \u0026gt; /tmp/adminpassword.txt   Run the following command to remove the replicationPort:\n/u01/oracle/oud/bin/dsreplication disable --hostname localhost --port $adminConnectorPort --adminUID admin --trustAll --adminPasswordFile /tmp/adminpassword.txt --no-prompt --unreachableServer oud-ds-rs-3:$replicationPort The output will look similar to the following:\nEstablishing connections and reading configuration ........ Done. The following errors were encountered reading the configuration of the existing servers: Could not connect to the server oud-ds-rs-3:1444. Check that the server is running and that is accessible from the local machine. Details: oud-ds-rs-3:1444 The tool will try to update the configuration in a best effort mode. Removing references to replication server oud-ds-rs-3:1898 ..... Done.   Run the following command to remove the adminConnectorPort:\n/u01/oracle/oud/bin/dsreplication disable --hostname localhost --port $adminConnectorPort --adminUID admin --trustAll --adminPasswordFile /tmp/adminpassword.txt --no-prompt --unreachableServer oud-ds-rs-3:$adminConnectorPort The output will look similar to the following:\nEstablishing connections and reading configuration ...... Done. Removing server oud-ds-rs-3:1444 from the registration information ..... Done.   Delete the password file:\nrm /tmp/adminpassword.txt   "
},
{
	"uri": "/fmw-kubernetes/idm-products/oudsm/troubleshooting/",
	"title": "Troubleshooting",
	"tags": [],
	"description": "How to Troubleshoot issues.",
	"content": " Check the status of a namespace View pod logs View pod description  Check the status of a namespace To check the status of objects in a namespace use the following command:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; get nodes,pod,service,secret,pv,pvc,ingress -o wide For example:\n$ kubectl --namespace oudsmns get nodes,pod,service,secret,pv,pvc,ingress -o wide The output will look similar to the following:\n$ kubectl --namespace oudsmns get pod,service,secret,pv,pvc,ingress -o wide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oudsm-1 1/1 Running 0 18m 10.244.1.89 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service/oudsm-1 ClusterIP 10.101.79.110 \u0026lt;none\u0026gt; 7001/TCP,7002/TCP 18m app.kubernetes.io/instance=oudsm,app.kubernetes.io/name=oudsm,oudsm/instance=oudsm-1 service/oudsm-lbr ClusterIP 10.106.241.204 \u0026lt;none\u0026gt; 7001/TCP,7002/TCP 18m app.kubernetes.io/instance=oudsm,app.kubernetes.io/name=oudsm NAME TYPE DATA AGE secret/default-token-jtwn2 kubernetes.io/service-account-token 3 22h secret/orclcred kubernetes.io/dockerconfigjson 1 22h secret/oudsm-creds opaque 2 18m secret/oudsm-tls-cert kubernetes.io/tls 2 18m secret/oudsm-token-7kjff kubernetes.io/service-account-token 3 18m secret/sh.helm.release.v1.oudsm.v1 helm.sh/release.v1 1 18m NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE VOLUMEMODE persistentvolume/oudsm-pv 20Gi RWX Delete Bound oudsmns/oudsm-pvc manual 18m Filesystem NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE VOLUMEMODE persistentvolumeclaim/oudsm-pvc Bound oudsm-pv 20Gi RWX manual 18m Filesystem NAME CLASS HOSTS ADDRESS PORTS AGE ingress.networking.k8s.io/oudsm-ingress-nginx \u0026lt;none\u0026gt; oudsm-1,oudsm 80, 443 18m Include/exclude elements (nodes,pod,service,secret,pv,pvc,ingress) as required.\nView pod logs To view logs for a pod use the following command:\n$ kubectl logs \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl logs oudsm-1 -n oudsmns View pod description Details about a pod can be viewed using the kubectl describe command:\n$ kubectl describe pod \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe pod oudsm-1 -n oudsmns The output will look similar to the following:\nName: oudsm-1 Namespace: oudsmns Priority: 0 Node: \u0026lt;worker-node\u0026gt;/100.102.48.28 Start Time: \u0026lt;DATE\u0026gt; Labels: app.kubernetes.io/instance=oudsm app.kubernetes.io/managed-by=Helm app.kubernetes.io/name=oudsm app.kubernetes.io/version=12.2.1.4.0 helm.sh/chart=oudsm-0.1 oudsm/instance=oudsm-1 Annotations: meta.helm.sh/release-name: oudsm meta.helm.sh/release-namespace: oudsmns Status: Running IP: 10.244.1.89 IPs: IP: 10.244.1.89 Containers: oudsm: Container ID: cri-o://37dbe00257095adc0a424b8841db40b70bbb65645451e0bc53718a0fd7ce22e4 Image: container-registry.oracle.com/middleware/oudsm_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January'25\u0026gt; Image ID: container-registry.oracle.com/middleware/oudsm_cpu@sha256:47960d36d502d699bfd8f9b1be4c9216e302db95317c288f335f9c8a32974f2c Ports: 7001/TCP, 7002/TCP Host Ports: 0/TCP, 0/TCP State: Running Started: \u0026lt;DATE\u0026gt; Ready: True Restart Count: 0 Liveness: http-get http://:7001/oudsm delay=1200s timeout=15s period=60s #success=1 #failure=3 Readiness: http-get http://:7001/oudsm delay=900s timeout=15s period=30s #success=1 #failure=3 Environment: DOMAIN_NAME: oudsmdomain-1 ADMIN_USER: \u0026lt;set to the key 'adminUser' in secret 'oudsm-creds'\u0026gt; Optional: false ADMIN_PASS: \u0026lt;set to the key 'adminPass' in secret 'oudsm-creds'\u0026gt; Optional: false ADMIN_PORT: 7001 ADMIN_SSL_PORT: 7002 WLS_PLUGIN_ENABLED: true Mounts: /u01/oracle/user_projects from oudsm-pv (rw) /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-9ht84 (ro) Conditions: Type Status Initialized True Ready True ContainersReady True PodScheduled True Volumes: oudsm-pv: Type: PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace) ClaimName: oudsm-pvc ReadOnly: false kube-api-access-9ht84: Type: Projected (a volume that contains injected data from multiple sources) TokenExpirationSeconds: 3607 ConfigMapName: kube-root-ca.crt ConfigMapOptional: \u0026lt;nil\u0026gt; DownwardAPI: true QoS Class: BestEffort Node-Selectors: \u0026lt;none\u0026gt; Tolerations: node.kubernetes.io/not-ready:NoExecute op=Exists for 300s node.kubernetes.io/unreachable:NoExecute op=Exists for 300s Events: Type Reason Age From Message ---- ------ ---- ---- ------- Warning FailedScheduling 39m default-scheduler 0/3 nodes are available: 3 pod has unbound immediate PersistentVolumeClaims. Normal Scheduled 39m default-scheduler Successfully assigned oudsmns/oudsm-1 to \u0026lt;worker-node\u0026gt; Normal Pulled 39m kubelet Container image \u0026quot;container-registry.oracle.com/middleware/oudsm_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January'25\u0026gt;\u0026quot; already present on machine Normal Created 39m kubelet Created container oudsm Normal Started 39m kubelet Started container oudsm "
},
{
	"uri": "/fmw-kubernetes/soa-domains/troubleshooting/",
	"title": "Troubleshooting",
	"tags": [],
	"description": "Describes common issues that may occur during Oracle SOA Suite deployment on Kubernetes and the steps to troubleshoot them.",
	"content": "This document describes common issues that may occur during the deployment of Oracle SOA Suite on Kubernetes and the steps to troubleshoot them. Also refer to the FAQs page for frequent issues and steps to resolve them.\n WebLogic Kubernetes Operator installation failure RCU schema creation failure Domain creation failure Common domain creation issues Server pods not started after applying domain configuration file Ingress controller not serving the domain urls Security warnings reported in WebLogic Administration console Disable Remote Anonymous RMI T3 and IIOP Requests Oracle Service Bus OWSM policy error  WebLogic Kubernetes Operator installation failure If the WebLogic Kubernetes Operator installation failed with timing out:\n Check the status of the operator Helm release using the command helm ls -n \u0026lt;operator-namespace\u0026gt;. Check if the operator pod is successfully created in the operator namespace. Describe the operator pod using kubectl describe pod \u0026lt;operator-pod-name\u0026gt; -n \u0026lt;operator-namespace\u0026gt; to identify any obvious errors.  RCU schema creation failure When creating the RCU schema using create-rcu-schema.sh, the possible causes for RCU schema creation failure are:\n Database is not up and running Incorrect database connection URL used Invalid database credentials used Schema prefix already exists  Make sure that all the above causes are reviewed and corrected as needed.\nAlso drop the existing schema with the same prefix before rerunning the create-rcu-schema.sh with correct values.\nDomain creation failure If the Oracle SOA Suite domain creation fails when running create-domain.sh, perform the following steps to diagnose the issue:\n  Run the following command to diagnose the create domain job:\n$ kubectl logs jobs/\u0026lt;domain_job\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl logs jobs/soainfra-create-soa-infra-domain-job -n soans Also run:\n$ kubectl describe pod \u0026lt;domain_job\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe pod soainfra-create-soa-infra-domain-job-mcc6v -n soans Use the output to diagnose the problem and resolve the issue.\n  Clean up the failed domain creation:\n Delete the failed domain creation job in the domain namespace using the command kubectl delete job \u0026lt;domain-creation-job-name\u0026gt; -n \u0026lt;domain-namespace\u0026gt;. Delete the contents of the domain home directory Drop the existing RCU schema    Recreate the domain:\n Recreate the RCU schema Make sure the Persistent Volume and Persistent Volume Claim used for the domain are created with correct permissions and bound together. Rerun the create domain script    Common domain creation issues A common domain creation issue is error Failed to build JDBC Connection object in the create domain job logs.\n  Click here to see the error stack trace:   Configuring the Service Table DataSource... fmwDatabase jdbc:oracle:thin:@orclcdb.soainfra-domain-ns-293-10202010:1521/orclpdb1 Getting Database Defaults... Error: getDatabaseDefaults() failed. Do dumpStack() to see details. Error: runCmd() failed. Do dumpStack() to see details. Problem invoking WLST - Traceback (innermost last): File \u0026quot;/u01/weblogic/..2021_10_20_20_29_37.256759996/createSOADomain.py\u0026quot;, line 943, in ? File \u0026quot;/u01/weblogic/..2021_10_20_20_29_37.256759996/createSOADomain.py\u0026quot;, line 75, in createSOADomain File \u0026quot;/u01/weblogic/..2021_10_20_20_29_37.256759996/createSOADomain.py\u0026quot;, line 695, in extendSoaB2BDomain File \u0026quot;/u01/weblogic/..2021_10_20_20_29_37.256759996/createSOADomain.py\u0026quot;, line 588, in configureJDBCTemplates File \u0026quot;/tmp/WLSTOfflineIni956349269221112379.py\u0026quot;, line 267, in getDatabaseDefaults File \u0026quot;/tmp/WLSTOfflineIni956349269221112379.py\u0026quot;, line 19, in command Failed to build JDBC Connection object: at com.oracle.cie.domain.script.jython.CommandExceptionHandler.handleException(CommandExceptionHandler.java:69) at com.oracle.cie.domain.script.jython.WLScriptContext.handleException(WLScriptContext.java:3085) at com.oracle.cie.domain.script.jython.WLScriptContext.runCmd(WLScriptContext.java:738) at sun.reflect.GeneratedMethodAccessor152.invoke(Unknown Source) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) com.oracle.cie.domain.script.jython.WLSTException: com.oracle.cie.domain.script.jython.WLSTException: Got exception when auto configuring the schema component(s) with data obtained from shadow table: Failed to build JDBC Connection object: ERROR: /u01/weblogic/create-domain-script.sh failed.    This error is reported when there is an issue with database schema access during domain creation. The possible causes are:\n Incorrect schema name specified in create-domain-inputs.yaml. RCU schema credentials specified in the secret soainfra-rcu-credentials are different from the credentials specified while creating the RCU schema using create-rcu-schema.sh.  To resolve these possible causes, check that the schema name and credentials used during the domain creation are the same as when the RCU schema was created.\nServer pods not started after applying domain configuration file When a domain configuration file (YAML) is deployed and no introspector or server pods are initiated, as well as there is no mention of the domain in the operator log, ensure that the domain\u0026rsquo;s namespace has been configured to be managed by WebLogic Kubernetes Operator.\nThe domainNamespaceSelectionStrategy configuration in the operator installation Helm chart determines the namespaces managed by operators. The default value of the domainNamespaceSelectionStrategy Helm chart value was altered between versions 3.4 and 4.0. In version 3.4, the default value was List and in version 4.0, the default value is LabelSelector. Therefore, instead of managing the set of namespaces listed in the domainNamespaces Helm chart value, the operator now searches for namespaces with the label specified in the domainNamespaceLabelSelector Helm chart value, which defaults to weblogic-operator=enabled.\nFor operator versions 3.4 and lower, you can verify the configuration by running the command helm get values \u0026lt;operator-release\u0026gt; -n \u0026lt;operator-namespace\u0026gt; and checking the values under the domainNamespaces section.\nFor example:\n$ helm get values weblogic-kubernetes-operator -n opns USER-SUPPLIED VALUES: domainNamespaces: - soans image: ghcr.io/oracle/weblogic-kubernetes-operator:3.4.4 javaLoggingLevel: FINE serviceAccount: op-sa $ If you don\u0026rsquo;t see the domain namespace value under the domainNamespaces section, run the helm upgrade command in the operator namespace with appropriate values to configure the operator to manage the domain namespace.\n$ helm upgrade --reuse-values --namespace opns --set \u0026quot;domainNamespaces={soans}\u0026quot; --wait weblogic-kubernetes-operator charts/weblogic-operator For operator versions 4.0 and higher, verify if the label weblogic-operator=enabled is specified for domain namespace that is to be managed by the operator, by running the following command:\n$ kubectl get ns --selector=\u0026quot;weblogic-operator=enabled\u0026quot; For example, if your domain namespace is soans and the preceding command did not list the soans namespace, then execute the following command for operator to manage the domain namespace:\n$ kubectl label namespace soans weblogic-operator=enabled Ingress controller not serving the domain URLs To diagnose this issue:\n Verify that the Ingress controller is installed successfully.\nFor example, to verify the Traefik Ingress controller status, run the following command: $ helm list -n traefik NAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION traefik traefik 2 2022-11-30 11:31:18.599876918 +0000 UTC deployed traefik-20.5.3 v2.9.5 $  Verify that the Ingress controller is setup to monitor the domain namespace.\nFor example, to verify the Traefik Ingress controller manages the soans domain namespace, run the following command and check the values under namespaces section. $ helm get values traefik-operator -n traefik USER-SUPPLIED VALUES: kubernetes: namespaces: - traefik - soans $  Verify that the Ingress chart is installed correctly in domain namespace. For example, run the following command: $ helm list -n soans NAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION soainfra-traefik soans 1 2021-10-27 11:24:31.7572791 +0000 UTC deployed ingress-per-domain-0.1.0 1.0 $  Verify that the Ingress URL paths and hostnames are configured correctly by running the following commands:   Click here to see the sample commands and output   $ kubectl get ingress soainfra-traefik -n soans NAME CLASS HOSTS ADDRESS PORTS AGE soainfra-traefik \u0026lt;none\u0026gt; \u0026lt;Hostname\u0026gt; 80 20h $ $ kubectl describe ingress soainfra-traefik -n soans Name: soainfra-traefik Namespace: soans Address: Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) Rules: Host Path Backends ---- ---- -------- \u0026lt;Hostname\u0026gt; /console soainfra-adminserver:7001 (10.244.0.123:7001) /em soainfra-adminserver:7001 (10.244.0.123:7001) /weblogic/ready soainfra-adminserver:7001 (10.244.0.123:7001) /soa-infra soainfra-cluster-soa-cluster:7003 (10.244.0.126:7003,10.244.0.127:7003) /soa/composer soainfra-cluster-soa-cluster:7003 (10.244.0.126:7003,10.244.0.127:7003) /integration/worklistapp soainfra-cluster-soa-cluster:7003 (10.244.0.126:7003,10.244.0.127:7003) /EssHealthCheck soainfra-cluster-soa-cluster:7003 (10.244.0.126:7003,10.244.0.127:7003) Annotations: kubernetes.io/ingress.class: traefik meta.helm.sh/release-name: soainfra-traefik meta.helm.sh/release-namespace: soans Events: \u0026lt;none\u0026gt; $     Security warnings reported in WebLogic Administration console With the July 2021 PSU applied, WebLogic Server regularly validates your domain configuration settings against a set of security configuration guidelines to determine whether the domain meets key security guidelines recommended by Oracle. If your domain does not meet a recommendation for a security configuration setting, a warning is logged in the Security Warnings Report in the WebLogic Administration Console.\nSee Review Potential Security Issues in Securing a Production Environment for Oracle WebLogic Server for more information.\nDisable Remote Anonymous RMI T3 and IIOP Requests If you see security warning message that Remote Anonymous RMI T3 or IIOP requests are enabled, resolve this warning by setting RemoteAnonymousRMIT3Enabled and RemoteAnonymousRMIIIOPEnabled attributes to false in domain.yaml with JAVA_OPTIONS before starting the domain as shown below:\nserverPod: # an (optional) list of environment variable to be set on the servers env: - name: JAVA_OPTIONS value: \u0026quot;-Dweblogic.StdoutDebugEnabled=false -Dweblogic.ssl.Enabled=true -Dweblogic.security.SSL.ignoreHostnameVerification=true -Dweblogic.security.remoteAnonymousRMIT3Enabled=false -Dweblogic.security.remoteAnonymousRMIIIOPEnabled=false\u0026quot; See link for more details.\nOracle Service Bus OWSM policy error If you see error messages like CannotCommit [OSB-387177]OWSM Policy oracle/xxxxxx is not supported on Oracle Service Bus console and exceptions like oracle.wsm.policymanager.PolicyManagerException: WSM-02141 : Unable to connect to the policy access service due to Oracle WSM policy manager host server being down in Administration server logs, resolve this error by targeting the wsm-pm application to Administration server. See link for details.\n"
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/create-or-update-image/",
	"title": "Create or update an image",
	"tags": [],
	"description": "Create or update an Oracle Access Management (OAM) container image used for deploying OAM domains.",
	"content": "As described in Prepare Your Environment you can create your own OAM container image. If you have access to the My Oracle Support (MOS), and there is a need to build a new image with an interim or one off patch, it is recommended to use the WebLogic Image Tool to build an Oracle Access Management image for production deployments.\nCreate or update an Oracle Access Management image using the WebLogic Image Tool Using the WebLogic Image Tool, you can create a new Oracle Access Management image with PSU\u0026rsquo;s and interim patches or update an existing image with one or more interim patches.\n Recommendations:\n Use create for creating a new Oracle Access Management image containing the Oracle Access Management binaries, bundle patch and interim patches. This is the recommended approach if you have access to the OAM patches because it optimizes the size of the image. Use update for patching an existing Oracle Access Management image with a single interim patch. Note that the patched image size may increase considerably due to additional image layers introduced by the patch application tool.   Create an image Set up the WebLogic Image Tool  Prerequisites Set up the WebLogic Image Tool Validate setup WebLogic Image Tool build directory WebLogic Image Tool cache  Prerequisites Verify that your environment meets the following prerequisites:\n Docker client and daemon on the build machine, with minimum Docker version 18.03.1.ce. Bash version 4.0 or later, to enable the command complete feature. JAVA_HOME environment variable set to the appropriate JDK location e.g: /scratch/export/oracle/product/jdk  Set up the WebLogic Image Tool To set up the WebLogic Image Tool:\n  Create a working directory and change to it:\n$ mdir \u0026lt;workdir\u0026gt; $ cd \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/imagetool-setup $ cd /scratch/imagetool-setup   Download the latest version of the WebLogic Image Tool from the releases page.\n$ wget https://github.com/oracle/weblogic-image-tool/releases/download/release-X.X.X/imagetool.zip where X.X.X is the latest release referenced on the releases page.\n  Unzip the release ZIP file in the imagetool-setup directory.\n$ unzip imagetool.zip   Execute the following commands to set up the WebLogic Image Tool:\n$ cd \u0026lt;workdir\u0026gt;/imagetool-setup/imagetool/bin $ source setup.sh For example:\n$ cd /scratch/imagetool-setup/imagetool/bin $ source setup.sh   Validate setup To validate the setup of the WebLogic Image Tool:\n  Enter the following command to retrieve the version of the WebLogic Image Tool:\n$ imagetool --version   Enter imagetool then press the Tab key to display the available imagetool commands:\n$ imagetool \u0026lt;TAB\u0026gt; cache create help rebase update   WebLogic Image Tool build directory The WebLogic Image Tool creates a temporary Docker context directory, prefixed by wlsimgbuilder_temp, every time the tool runs. Under normal circumstances, this context directory will be deleted. However, if the process is aborted or the tool is unable to remove the directory, it is safe for you to delete it manually. By default, the WebLogic Image Tool creates the Docker context directory under the user\u0026rsquo;s home directory. If you prefer to use a different directory for the temporary context, set the environment variable WLSIMG_BLDDIR:\n$ export WLSIMG_BLDDIR=\u0026#34;/path/to/buid/dir\u0026#34; WebLogic Image Tool cache The WebLogic Image Tool maintains a local file cache store. This store is used to look up where the Java, WebLogic Server installers, and WebLogic Server patches reside in the local file system. By default, the cache store is located in the user\u0026rsquo;s $HOME/cache directory. Under this directory, the lookup information is stored in the .metadata file. All automatically downloaded patches also reside in this directory. You can change the default cache store location by setting the environment variable WLSIMG_CACHEDIR:\n$ export WLSIMG_CACHEDIR=\u0026#34;/path/to/cachedir\u0026#34; Set up additional build scripts Creating an Oracle Access Management container image using the WebLogic Image Tool requires additional container scripts for Oracle Access Management domains.\n  Clone the docker-images repository to set up those scripts. In these steps, this directory is DOCKER_REPO:\n$ cd \u0026lt;workdir\u0026gt;/imagetool-setup $ git clone https://github.com/oracle/docker-images.git For example:\n$ cd /scratch/imagetool-setup $ git clone https://github.com/oracle/docker-images.git    Note: If you want to create the image continue with the following steps, otherwise to update the image see update an image.\n Create an image After setting up the WebLogic Image Tool, follow these steps to use the WebLogic Image Tool to create a new Oracle Access Management image.\nDownload the Oracle Access Management installation binaries and patches You must download the required Oracle Access Management installation binaries and patches as listed below from the Oracle Software Delivery Cloud and save them in a directory of your choice.\nThe installation binaries and patches required are:\n  Oracle Identity and Access Management 12.2.1.4.0\n fmw_12.2.1.4.0_idm.jar    Oracle Fusion Middleware 12c Infrastructure 12.2.1.4.0\n fmw_12.2.1.4.0_infrastructure.jar    OAM and FMW Infrastructure Patches:\n View document ID 2723908.1 on My Oracle Support. In the Container Image Download/Patch Details section, locate the Oracle Access Management (OAM) table. For the latest PSU click the README link in the Documentation column. In the README, locate the \u0026ldquo;Installed Software\u0026rdquo; section. All the patch numbers to be download are listed here. Download all these individual patches from My Oracle Support.    Oracle JDK v8\n jdk-8uXXX-linux-x64.tar.gz where XXX is the JDK version referenced in the README above.    Update required build files The following files in the code repository location \u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleAccessManagement/imagetool/12.2.1.4.0 are used for creating the image:\n additionalBuildCmds.txt buildArgs    Edit the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleAccessManagement/imagetool/12.2.1.4.0/buildArgs file and change %DOCKER_REPO%, %JDK_VERSION% and %BUILDTAG% appropriately.\nFor example:\ncreate --jdkVersion=8u301 --type oam --version=12.2.1.4.0 --tag=oam-latestpsu:12.2.1.4.0 --pull --installerResponseFile /scratch/imagetool-setup/docker-images/OracleFMWInfrastructure/dockerfiles/12.2.1.4/install.file,/scratch/imagetool-setup/docker-images/OracleAccessManagement/dockerfiles/12.2.1.4.0/install/iam.response --additionalBuildCommands /scratch/imagetool-setup/docker-images/OracleAccessManagement/imagetool/12.2.1.4.0/addtionalBuildCmds.txt --additionalBuildFiles /scratch/imagetool-setup/docker-images/OracleAccessManagement/dockerfiles/12.2.1.4.0/container-scripts   Edit the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleFMWInfrastructure/dockerfiles/12.2.1.4/install.file and under the GENERIC section add the line INSTALL_TYPE=\u0026quot;Fusion Middleware Infrastructure\u0026rdquo;. For example:\n[GENERIC] INSTALL_TYPE=\u0026quot;Fusion Middleware Infrastructure\u0026quot; DECLINE_SECURITY_UPDATES=true SECURITY_UPDATES_VIA_MYORACLESUPPORT=false   Create the image   Add a JDK package to the WebLogic Image Tool cache. For example:\n$ imagetool cache addInstaller --type jdk --version 8uXXX --path \u0026lt;download location\u0026gt;/jdk-8uXXX-linux-x64.tar.gz where XXX is the JDK version downloaded\n  Add the downloaded installation binaries to the WebLogic Image Tool cache. For example:\n$ imagetool cache addInstaller --type fmw --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_infrastructure.jar $ imagetool cache addInstaller --type OAM --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_idm.jar   Add the downloaded OPatch patch to the WebLogic Image Tool cache. For example:\n$ imagetool cache addEntry --key 28186730_13.9.4.2.8 --value \u0026lt;download location\u0026gt;/p28186730_139428_Generic.zip   Add the rest of the downloaded product patches to the WebLogic Image Tool cache:\n$ imagetool cache addEntry --key \u0026lt;patch\u0026gt;_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p\u0026lt;patch\u0026gt;_122140_Generic.zip For example:\n$ imagetool cache addEntry --key 32971905_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32971905_122140_Generic.zip $ imagetool cache addEntry --key 20812896_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p20812896_122140_Generic.zip $ imagetool cache addEntry --key 32880070_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32880070_122140_Generic.zip $ imagetool cache addEntry --key 33059296_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33059296_122140_Generic.zip $ imagetool cache addEntry --key 32905339_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32905339_122140_Generic.zip $ imagetool cache addEntry --key 33084721_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33084721_122140_Generic.zip $ imagetool cache addEntry --key 31544353_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p31544353_122140_Linux-x86-64.zip $ imagetool cache addEntry --key 32957281_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32957281_122140_Generic.zip $ imagetool cache addEntry --key 33093748_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33093748_122140_Generic.zip   Edit the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleAccessManagement/imagetool/12.2.1.4.0/buildArgs file and append the product patches and opatch patch as follows:\n--patches 32971905_12.2.1.4.0,20812896_12.2.1.4.0,32880070_12.2.1.4.0,33059296_12.2.1.4.0,32905339_12.2.1.4.0,33084721_12.2.1.4.0,31544353_12.2.1.4.0,32957281_12.2.1.4.0,33093748_12.2.1.4.0 --opatchBugNumber=28186730_13.9.4.2.8 An example buildArgs file is now as follows:\ncreate --jdkVersion=8u301 --type oam --version=12.2.1.4.0 --tag=oam-latestpsu:12.2.1.4.0 --pull --installerResponseFile /scratch/imagetool-setup/docker-images/OracleFMWInfrastructure/dockerfiles/12.2.1.4/install.file,/scratch/imagetool-setup/docker-images/OracleAccessManagement/dockerfiles/12.2.1.4.0/install/iam.response --additionalBuildCommands /scratch/imagetool-setup/docker-images/OracleAccessManagement/imagetool/12.2.1.4.0/additionalBuildCmds.txt --additionalBuildFiles /scratch/imagetool-setup/docker-images/OracleAccessManagement/dockerfiles/12.2.1.4.0/container-scripts --patches 32971905_12.2.1.4.0,20812896_12.2.1.4.0,32880070_12.2.1.4.0,33059296_12.2.1.4.0,32905339_12.2.1.4.0,33084721_12.2.1.4.0,31544353_12.2.1.4.0,32957281_12.2.1.4.0,33093748_12.2.1.4.0 --opatchBugNumber=28186730_13.9.4.2.8  Note: In the buildArgs file:\n --jdkVersion value must match the --version value used in the imagetool cache addInstaller command for --type jdk. --version value must match the --version value used in the imagetool cache addInstaller command for --type OAM.   Refer to this page for the complete list of options available with the WebLogic Image Tool create command.\n  Create the Oracle Access Management image:\n$ imagetool @\u0026lt;absolute path to buildargs file\u0026gt; --fromImage ghcr.io/oracle/oraclelinux:7-slim  Note: Make sure that the absolute path to the buildargs file is prepended with a @ character, as shown in the example above.\n For example:\n$ imagetool @\u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleAccessManagement/imagetool/12.2.1.4.0/buildArgs --fromImage ghcr.io/oracle/oraclelinux:7-slim   Check the created image using the docker images command:\n$ docker images | grep oam The output will look similar to the following:\noam-latestpsu 12.2.1.4.0 ad732fc7c16b About a minute ago 3.35GB   Run the following command to save the container image to a tar file:\n$ docker save -o \u0026lt;path\u0026gt;/\u0026lt;file\u0026gt;.tar \u0026lt;image\u0026gt; For example:\n$ docker save -o $WORKDIR/oam-latestpsu.tar oam-latestpsu:12.2.1.4.0   Update an image The steps below show how to update an existing Oracle Access Management image with an interim patch.\nThe container image to be patched must be loaded in the local docker images repository before attempting these steps.\nIn the examples below the image oracle/oam:12.2.1.4.0 is updated with an interim patch.\n$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE oracle/oam 12.2.1.4.0 b051804ba15f 3 months ago 3.34GB   Set up the WebLogic Image Tool.\n  Download the required interim patch and latest Opatch (28186730) from My Oracle Support. and save them in a directory of your choice.\n  Add the OPatch patch to the WebLogic Image Tool cache, for example:\n$ imagetool cache addEntry --key 28186730_13.9.4.2.8 --value \u0026lt;downloaded-patches-location\u0026gt;/p28186730_139428_Generic.zip   Execute the imagetool cache addEntry command for each patch to add the required patch(es) to the WebLogic Image Tool cache. For example, to add patch p32701831_12214210607_Generic.zip:\n$ imagetool cache addEntry --key=32701831_12.2.1.4.210607 --value \u0026lt;downloaded-patches-location\u0026gt;/p32701831_12214210607_Generic.zip   Provide the following arguments to the WebLogic Image Tool update command:\n –-fromImage - Identify the image that needs to be updated. In the example below, the image to be updated is oracle/oam:12.2.1.4.0. –-patches - Multiple patches can be specified as a comma-separated list. --tag - Specify the new tag to be applied for the image being built.  Refer here for the complete list of options available with the WebLogic Image Tool update command.\n Note: The WebLogic Image Tool cache should have the latest OPatch zip. The WebLogic Image Tool will update the OPatch if it is not already updated in the image.\n For example:\n$ imagetool update --fromImage oracle/oam:12.2.1.4.0 --tag=oracle/oam-new:12.2.1.4.0 --patches=32701831_12.2.1.4.210607 --opatchBugNumber=28186730_13.9.4.2.8  Note: If the command fails because the files in the image being upgraded are not owned by oracle:oracle, then add the parameter --chown \u0026lt;userid\u0026gt;:\u0026lt;groupid\u0026gt; to correspond with the values returned in the error.\n   Check the built image using the docker images command:\n$ docker images | grep oam The output will look similar to the following:\nREPOSITORY TAG IMAGE ID CREATED SIZE oracle/oam-new 12.2.1.4.0 78ccd1ad67eb 5 minutes ago 3.8GB oracle/oam 12.2.1.4.0 b051804ba15f 3 months ago 3.34GB   Run the following command to save the patched container image to a tar file:\n$ docker save -o \u0026lt;path\u0026gt;/\u0026lt;file\u0026gt;.tar \u0026lt;image\u0026gt; For example:\n$ docker save -o $WORKDIR/oam-new.tar oracle/oam-new:12.2.1.4.0   "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/create-or-update-image/",
	"title": "Create or update an image",
	"tags": [],
	"description": "Create or update an Oracle Identity Governance (OIG) container image used for deploying OIG domains",
	"content": "As described in Prepare Your Environment you can create your own OIG container image. If you have access to the My Oracle Support (MOS), and there is a need to build a new image with an interim or one off patch, it is recommended to use the WebLogic Image Tool to build an Oracle Identity Governance image for production deployments.\nCreate or update an Oracle Identity Governance image using the WebLogic Image Tool Using the WebLogic Image Tool, you can create a new Oracle Identity Governance image with PSU\u0026rsquo;s and interim patches or update an existing image with one or more interim patches.\n Recommendations:\n Use create for creating a new Oracle Identity Governance image containing the Oracle Identity Governance binaries, bundle patch and interim patches. This is the recommended approach if you have access to the OIG patches because it optimizes the size of the image. Use update for patching an existing Oracle Identity Governance image with a single interim patch. Note that the patched image size may increase considerably due to additional image layers introduced by the patch application tool.   Create an image Set up the WebLogic Image Tool  Prerequisites Set up the WebLogic Image Tool Validate setup WebLogic Image Tool build directory WebLogic Image Tool cache  Prerequisites Verify that your environment meets the following prerequisites:\n Docker client and daemon on the build machine, with minimum Docker version 18.03.1.ce. Bash version 4.0 or later, to enable the command complete feature. JAVA_HOME environment variable set to the appropriate JDK location e.g: /scratch/export/oracle/product/jdk  Set up the WebLogic Image Tool To set up the WebLogic Image Tool:\n  Create a working directory and change to it:\n$ mkdir \u0026lt;workdir\u0026gt; $ cd \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/imagetool-setup $ cd /scratch/imagetool-setup   Download the latest version of the WebLogic Image Tool from the releases page.\n$ wget https://github.com/oracle/weblogic-image-tool/releases/download/release-X.X.X/imagetool.zip where X.X.X is the latest release referenced on the releases page.\n  Unzip the release ZIP file in the imagetool-setup directory.\n$ unzip imagetool.zip   Execute the following commands to set up the WebLogic Image Tool:\n$ cd \u0026lt;workdir\u0026gt;/imagetool-setup/imagetool/bin $ source setup.sh For example:\n$ cd /scratch/imagetool-setup/imagetool/bin $ source setup.sh   Validate setup To validate the setup of the WebLogic Image Tool:\n  Enter the following command to retrieve the version of the WebLogic Image Tool:\n$ imagetool --version   Enter imagetool then press the Tab key to display the available imagetool commands:\n$ imagetool \u0026lt;TAB\u0026gt; cache create help rebase update   WebLogic Image Tool build directory The WebLogic Image Tool creates a temporary Docker context directory, prefixed by wlsimgbuilder_temp, every time the tool runs. Under normal circumstances, this context directory will be deleted. However, if the process is aborted or the tool is unable to remove the directory, it is safe for you to delete it manually. By default, the WebLogic Image Tool creates the Docker context directory under the user\u0026rsquo;s home directory. If you prefer to use a different directory for the temporary context, set the environment variable WLSIMG_BLDDIR:\n$ export WLSIMG_BLDDIR=\u0026#34;/path/to/buid/dir\u0026#34; WebLogic Image Tool cache The WebLogic Image Tool maintains a local file cache store. This store is used to look up where the Java, WebLogic Server installers, and WebLogic Server patches reside in the local file system. By default, the cache store is located in the user\u0026rsquo;s $HOME/cache directory. Under this directory, the lookup information is stored in the .metadata file. All automatically downloaded patches also reside in this directory. You can change the default cache store location by setting the environment variable WLSIMG_CACHEDIR:\n$ export WLSIMG_CACHEDIR=\u0026#34;/path/to/cachedir\u0026#34; Set up additional build scripts Creating an Oracle Identity Governance container image using the WebLogic Image Tool requires additional container scripts for Oracle Identity Governance domains.\n  Clone the docker-images repository to set up those scripts. In these steps, this directory is DOCKER_REPO:\n$ cd \u0026lt;workdir\u0026gt;/imagetool-setup $ git clone https://github.com/oracle/docker-images.git For example:\n$ cd /scratch/imagetool-setup $ git clone https://github.com/oracle/docker-images.git    Note: If you want to create the image continue with the following steps, otherwise to update the image see update an image.\n Create an image After setting up the WebLogic Image Tool, follow these steps to use the WebLogic Image Tool to create a new Oracle Identity Governance image.\nDownload the Oracle Identity Governance installation binaries and patches You must download the required Oracle Identity Governance installation binaries and patches as listed below from the Oracle Software Delivery Cloud and save them in a directory of your choice.\nThe installation binaries and patches required are:\n  Oracle Identity and Access Management 12.2.1.4.0\n fmw_12.2.1.4.0_idm.jar    Oracle Fusion Middleware 12c Infrastructure 12.2.1.4.0\n fmw_12.2.1.4.0_infrastructure.jar    Oracle SOA Suite for Oracle Middleware 12.2.1.4.0\n fmw_12.2.1.4.0_soa.jar    Oracle Service Bus 12.2.1.4.0\n fmw_12.2.1.4.0_osb.jar    OIG and FMW Infrastructure Patches:\n View document ID 2723908.1 on My Oracle Support. In the Container Image Download/Patch Details section, locate the Oracle Identity Governance (OIG) table. For the latest PSU click the README link in the Documentation column. In the README, locate the \u0026ldquo;Installed Software\u0026rdquo; section. All the patch numbers to be download are listed here. Download all these individual patches from My Oracle Support.    Oracle JDK v8\n jdk-8uXXX-linux-x64.tar.gz where XXX is the JDK version referenced in the README above.    Update required build files The following files in the code repository location \u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleIdentityGovernance/imagetool/12.2.1.4.0 are used for creating the image:\n additionalBuildCmds.txt buildArgs  . Edit the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleIdentityGovernance/imagetool/12.2.1.4.0/buildArgs file and change %DOCKER_REPO%, %JDK_VERSION% and %BUILDTAG% appropriately.\nFor example:\ncreate --jdkVersion=8u311 --type oig --chown oracle:root --version=12.2.1.4.0 --tag=oig-latestpsu:12.2.1.4.0 --pull --installerResponseFile /scratch/imagetool-setup/docker-images/OracleFMWInfrastructure/dockerfiles/12.2.1.4/install.file,/scratch/imagetool-setup/docker-images/OracleSOASuite/dockerfiles/12.2.1.4.0/install/soasuite.response,/scratch/imagetool-setup/docker-images/OracleSOASuite/dockerfiles/12.2.1.4.0/install/osb.response,/scratch/imagetool-setup/docker-images/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/idmqs.response --additionalBuildCommands /scratch/imagetool-setup/docker-images/OracleIdentityGovernance/imagetool/12.2.1.4.0/additionalBuildCmds.txt --additionalBuildFiles /scratch/imagetool-setup/docker-images/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/container-scripts   Edit the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleFMWInfrastructure/dockerfiles/12.2.1.4.0/install.file and under the GENERIC section add the line INSTALL_TYPE=\u0026quot;Fusion Middleware Infrastructure\u0026rdquo;. For example:\n[GENERIC] INSTALL_TYPE=\u0026quot;Fusion Middleware Infrastructure\u0026quot; DECLINE_SECURITY_UPDATES=true SECURITY_UPDATES_VIA_MYORACLESUPPORT=false   Create the image   Add a JDK package to the WebLogic Image Tool cache. For example:\n$ imagetool cache addInstaller --type jdk --version 8uXXX --path \u0026lt;download location\u0026gt;/jdk-8uXXX-linux-x64.tar.gz where XXX is the JDK version downloaded\n  Add the downloaded installation binaries to the WebLogic Image Tool cache. For example:\n$ imagetool cache addInstaller --type fmw --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_infrastructure.jar $ imagetool cache addInstaller --type soa --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_soa.jar $ imagetool cache addInstaller --type osb --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_osb.jar $ imagetool cache addInstaller --type idm --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_idm.jar   Add the downloaded OPatch patch to the WebLogic Image Tool cache. For example:\n$ imagetool cache addEntry --key 28186730_13.9.4.2.8 --value \u0026lt;download location\u0026gt;/p28186730_139428_Generic.zip   Add the rest of the downloaded product patches to the WebLogic Image Tool cache:\n$ imagetool cache addEntry --key \u0026lt;patch\u0026gt;_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p\u0026lt;patch\u0026gt;_122140_Generic.zip For example:\n$ imagetool cache addEntry --key 33416868_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33416868_122140_Generic.zip $ imagetool cache addEntry --key 33453703_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33453703_122140_Generic.zip $ imagetool cache addEntry --key 32999272_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32999272_122140_Generic.zip $ imagetool cache addEntry --key 33093748_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33093748_122140_Generic.zip $ imagetool cache addEntry --key 33281560_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33281560_122140_Generic.zip $ imagetool cache addEntry --key 31544353_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p31544353_122140_Linux-x86-64.zip $ imagetool cache addEntry --key 33313802_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33313802_122140_Generic.zip $ imagetool cache addEntry --key 33408307_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33408307_122140_Generic.zip $ imagetool cache addEntry --key 33286160_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33286160_122140_Generic.zip $ imagetool cache addEntry --key 32880070_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32880070_122140_Generic.zip $ imagetool cache addEntry --key 32905339_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32905339_122140_Generic.zip $ imagetool cache addEntry --key 32784652_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32784652_122140_Generic.zip   Edit the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleIdentityGovernance/imagetool/12.2.1.4.0/buildArgs file and append the product patches and opatch patch as follows:\n--patches 33416868_12.2.1.4.0,33453703_12.2.1.4.0,32999272_12.2.1.4.0,33093748_12.2.1.4.0,33281560_12.2.1.4.0,31544353_12.2.1.4.0,33313802_12.2.1.4.0,33408307_12.2.1.4.0,33286160_12.2.1.4.0,32880070_12.2.1.4.0,32905339_12.2.1.4.0,32784652_12.2.1.4.0 --opatchBugNumber=28186730_13.9.4.2.8 An example buildArgs file is now as follows:\ncreate --jdkVersion=8u301 --type oig --version=12.2.1.4.0 --tag=oig-latestpsu:12.2.1.4.0 --pull --installerResponseFile /scratch/imagetool-setup/docker-images/OracleFMWInfrastructure/dockerfiles/12.2.1.4/install.file,/scratch/docker-images/OracleSOASuite/dockerfiles/12.2.1.4.0/install/soasuite.response,/scratch/docker-images/OracleSOASuite/dockerfiles/12.2.1.4.0/install/osb.response,/scratch/docker-images/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/idmqs.response --additionalBuildCommands /scratch/imagetool-setup/docker-images/OracleIdentityGovernance/imagetool/12.2.1.4.0/additionalBuildCmds.txt --additionalBuildFiles /scratch/imagetool-setup/docker-images/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/container-scripts --patches 33416868_12.2.1.4.0,33453703_12.2.1.4.0,32999272_12.2.1.4.0,33093748_12.2.1.4.0,33281560_12.2.1.4.0,31544353_12.2.1.4.0,33313802_12.2.1.4.0,33408307_12.2.1.4.0,33286160_12.2.1.4.0,32880070_12.2.1.4.0,32905339_12.2.1.4.0,32784652_12.2.1.4.0 --opatchBugNumber=28186730_13.9.4.2.8  Note: In the buildArgs file:\n --jdkVersion value must match the --version value used in the imagetool cache addInstaller command for --type jdk. --version value must match the --version value used in the imagetool cache addInstaller command for --type idm.   Refer to this page for the complete list of options available with the WebLogic Image Tool create command.\n  Create the Oracle Identity Governance image:\n$ imagetool @\u0026lt;absolute path to buildargs file\u0026gt; --fromImage ghcr.io/oracle/oraclelinux:7-slim  Note: Make sure that the absolute path to the buildargs file is prepended with a @ character, as shown in the example above.\n For example:\n$ imagetool @\u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleIdentityGovernance/imagetool/12.2.1.4.0/buildArgs --fromImage ghcr.io/oracle/oraclelinux:7-slim   Check the created image using the docker images command:\n$ docker images | grep oig The output will look similar to the following:\noig-latestpsu 12.2.1.4.0 e391ed154bcb 50 seconds ago 4.43GB   Run the following command to save the container image to a tar file:\n$ docker save -o \u0026lt;path\u0026gt;/\u0026lt;file\u0026gt;.tar \u0026lt;image\u0026gt; For example:\n$ docker save -o $WORKDIR/oig-latestpsu.tar oig-latestpsu:12.2.1.4.0   Update an image The steps below show how to update an existing Oracle Identity Governance image with an interim patch.\nThe container image to be patched must be loaded in the local docker images repository before attempting these steps.\nIn the examples below the image oracle/oig:12.2.1.4.0 is updated with an interim patch.\n$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE oracle/oig 12.2.1.4.0 298fdb98e79c 3 months ago 4.42GB   Set up the WebLogic Image Tool.\n  Download the required interim patch and latest Opatch (28186730) from My Oracle Support. and save them in a directory of your choice.\n  Add the OPatch patch to the WebLogic Image Tool cache, for example:\n$ imagetool cache addEntry --key 28186730_13.9.4.2.8 --value \u0026lt;downloaded-patches-location\u0026gt;/p28186730_139428_Generic.zip   Execute the imagetool cache addEntry command for each patch to add the required patch(es) to the WebLogic Image Tool cache. For example, to add patch p32701831_12214210607_Generic.zip:\n$ imagetool cache addEntry --key=33165837_12.2.1.4.210708 --value \u0026lt;downloaded-patches-location\u0026gt;/p33165837_12214210708_Generic.zip   Provide the following arguments to the WebLogic Image Tool update command:\n –-fromImage - Identify the image that needs to be updated. In the example below, the image to be updated is oracle/oig:12.2.1.4.0. –-patches - Multiple patches can be specified as a comma-separated list. --tag - Specify the new tag to be applied for the image being built.  Refer here for the complete list of options available with the WebLogic Image Tool update command.\n Note: The WebLogic Image Tool cache should have the latest OPatch zip. The WebLogic Image Tool will update the OPatch if it is not already updated in the image.\n For example:\n$ imagetool update --fromImage oracle/oig:12.2.1.4.0 --tag=oracle/oig-new:12.2.1.4.0 --patches=33165837_12.2.1.4.210708 --opatchBugNumber=28186730_13.9.4.2.8  Note: If the command fails because the files in the image being upgraded are not owned by oracle:oracle, then add the parameter --chown \u0026lt;userid\u0026gt;:\u0026lt;groupid\u0026gt; to correspond with the values returned in the error.\n   Check the built image using the docker images command:\n$ docker images | grep oig The output will look similar to the following:\nREPOSITORY TAG IMAGE ID CREATED SIZE oracle/oig-new 12.2.1.4.0 0c8381922e95 16 seconds ago 4.91GB oracle/oig 12.2.1.4.0 298fdb98e79c 3 months ago 4.42GB   Run the following command to save the patched container image to a tar file:\n$ docker save -o \u0026lt;path\u0026gt;/\u0026lt;file\u0026gt;.tar \u0026lt;image\u0026gt; For example:\n$ docker save -o $WORKDIR/oig-new.tar oracle/oig-new:12.2.1.4.0   "
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/patch-and-upgrade/",
	"title": "Patch and Upgrade",
	"tags": [],
	"description": "This document provides steps to patch or upgrade an OAM image, WebLogic Kubernetes Operator, ELK, and Ingress.",
	"content": "This section shows you how to upgrade the WebLogic Kubernetes Operator, the OAM image, the Elasticsearch and Kibana stack, and the Ingress.\nThe upgrade path taken depends on the version you are upgrading from, and the version you are upgrading to.\nPlease refer to the Release Notes for information on which upgrade steps are necessary for the version you are upgrading to.\n a. Upgrade an operator release  Instructions on how to update the WebLogic Kubernetes Operator version.\n b. Patch an image  Instructions on how to update your OAM Kubernetes cluster with a new OAM container image.\n c. Upgrade Ingress  Instructions on how to upgrade the ingress.\n d. Upgrade Elasticsearch and Kibana  Instructions on how to upgrade Elastic Search and Kibana.\n "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/patch-and-upgrade/",
	"title": "Patch and upgrade",
	"tags": [],
	"description": "This document provides steps to patch or upgrade an OIG image, or WebLogic Kubernetes Operator.",
	"content": "This section shows you how to upgrade the WebLogic Kubernetes Operator, upgrade the OIG image, and patch the OIG domain. It also shows you how to upgrade the Elasticsearch and Kibana stack, and the Ingress.\nThe upgrade path taken depends on the version you are upgrading from, and the version you are upgrading to.\nPlease refer to the Release Notes for information on which upgrade steps are necessary for the version you are upgrading to.\n a. Upgrade an operator release  Instructions on how to update the WebLogic Kubernetes Operator version.\n b. Patch an image  Instructions on how to update your OIG Kubernetes cluster with a new OIG container image.\n c. Upgrade Ingress  Instructions on how to upgrade the ingress.\n d. Upgrade Elasticsearch and Kibana  Instructions on how to upgrade Elastic Search and Kibana.\n "
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/troubleshooting/",
	"title": "Troubleshooting",
	"tags": [],
	"description": "How to Troubleshoot domain creation failure.",
	"content": "Domain creation failure with WLST The instructions in this section relate to problems creating OAM domains using WLST in Create OAM domain using WLST.\nIf the OAM domain creation fails, run the following to diagnose the issue:\n  Run the following command to diagnose the create domain job:\n$ kubectl logs \u0026lt;domain_job\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl logs accessdomain-create-fmw-infra-sample-domain-job-c6vfb -n oamns Also run:\n$ kubectl describe pod \u0026lt;domain_job\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe pod accessdomain-create-fmw-infra-sample-domain-job-c6vfb -n oamns Using the output you should be able to diagnose the problem and resolve the issue.\nClean down the failed domain creation by following steps 1-3 in Delete the OAM domain home. Then follow RCU schema creation onwards to recreate the RCU schema, kubernetes secrets for domain and RCU, the persistent volume and the persistent volume claim. Then execute the OAM domain creation steps again.\n  If any of the above commands return the following error:\nFailed to start container \u0026quot;create-fmw-infra-sample-domain-job\u0026quot;: Error response from daemon: error while creating mount source path '/scratch/shared/accessdomainpv ': mkdir /scratch/shared/accessdomainpv : permission denied then there is a permissions error on the directory for the PV and PVC and the following should be checked:\na) The directory has 777 permissions: chmod -R 777 \u0026lt;persistent_volume\u0026gt;/accessdomainpv.\nb) If it does have the permissions, check if an oracle user exists and the uid is 1000 and gid is 0.\nCreate the oracle user if it doesn\u0026rsquo;t exist and set the uid to 1000 and gid to 0.\nc) Edit the $WORKDIR/kubernetes/create-weblogic-domain-pv-pvc/create-pv-pvc-inputs.yaml and add a slash to the end of the directory for the weblogicDomainStoragePath parameter:\nweblogicDomainStoragePath: /scratch/shared/accessdomainpv/ Clean down the failed domain creation by following steps 1-3 in Delete the OAM domain home. Then follow RCU schema creation onwards to recreate the RCU schema, kubernetes secrets for domain and RCU, the persistent volume and the persistent volume claim. Then execute the OAM domain creation using WLST Offline Scripts steps again.\n  Domain creation failure with WDT Models The instructions in this section relate to problems creating OAM domains using WDT models in Create OAM domain using WDT Models.\nIf the domain creation fails while creating domain resources using the domain.yaml file, run the following steps to diagnose the issue:\n  Check the domain events, by running the following command:\nkubectl describe domain \u0026lt;domain name\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\nkubectl describe domain accessdomain -n oamns Using the output, you should be able to diagnose the problem and resolve the issue.\n  If the instrospector job fails due to validation errors, then you can recreate the domain resources using the commands:\nkubectl delete -f domain.yaml kubectl create -f domain.yaml   If the domain creation fails because of database issues:\na. Create a helper pod:\n kubectl run --image=container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January`25\u0026gt; --image-pull-policy=\u0026quot;IfNotPresent\u0026quot; --overrides='{\u0026quot;apiVersion\u0026quot;: \u0026quot;v1\u0026quot;,\u0026quot;spec\u0026quot;:{\u0026quot;imagePullSecrets\u0026quot;: [{\u0026quot;name\u0026quot;: \u0026quot;orclcred\u0026quot;}]}}' helper -n oamns -- sleep infinity ``\nb. Clean down the failed domain creation by following steps 1-3 in Delete the OAM domain home.\nc. Execute the steps in Create OAM domain using WDT Models again.\n  Note You might need to recreate the domain creation image depending upon the errors. Domain creation logs are stored in \u0026lt;persistent_volume\u0026gt;/domains/wdt-logs.\n  If there is any issues bringing up the AdminServer, OAM Server or Policy Server pods, you can run the following to check the logs:\n$ kubectl logs -n oamns \u0026lt;POD_name\u0026gt; If the above does not give any information you can also run:\n$ kubectl describe pod -n oamns   For more details related to debugging issues, refer to Domain Debugging.\n"
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/troubleshooting/",
	"title": "Troubleshooting",
	"tags": [],
	"description": "Sample for creating an OIG domain home on an existing PV or PVC, and the domain resource YAML file for deploying the generated OIG domain.",
	"content": "Domain creation failure with WLST scripts If the OIG domain creation fails, run the following to diagnose the issue:\n  Run the following command to diagnose the create domain job:\n$ kubectl logs \u0026lt;job_name\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl logs governancedomain-create-fmw-infra-sample-domain-job-9wqzb -n oigns Also run:\n$ kubectl describe pod \u0026lt;job_domain\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe pod governancedomain-create-fmw-infra-sample-domain-job-9wqzb -n oigns Using the output you should be able to diagnose the problem and resolve the issue.\nClean down the failed domain creation by following steps 1-3 in Delete the OIG domain home. Then follow RCU schema creation onwards to recreate the RCU schema, Kubernetes secrets for domain and RCU, the persistent volume and the persistent volume claim. Then execute the OIG domain creation steps again.\n  If any of the above commands return the following error:\nFailed to start container \u0026quot;create-fmw-infra-sample-domain-job\u0026quot;: Error response from daemon: error while creating mount source path '/scratch/shared/governancedomainpv ': mkdir /scratch/shared/governancedomainpv : permission denied then there is a permissions error on the directory for the PV and PVC and the following should be checked:\na) The directory has 777 permissions: chmod -R 777 \u0026lt;persistent_volume\u0026gt;/governancedomainpv.\nb) If it does have the permissions, check if an oracle user exists and the uid and gid equal 1000, for example:\n$ uid=1000(oracle) gid=1000(spg) groups=1000(spg),59968(oinstall),8500(dba),100(users),1007(cgbudba) Create the oracle user if it doesn\u0026rsquo;t exist and set the uid and gid to 1000.\nc) Edit the $WORKDIR/kubernetes/create-weblogic-domain-pv-pvc/create-pv-pvc-inputs.yaml and add a slash to the end of the directory for the weblogicDomainStoragePath parameter:\nweblogicDomainStoragePath: /scratch/shared/governancedomainpv/ Clean down the failed domain creation by following steps 1-3 in Delete the OIG domain home. Then follow RCU schema creation onwards to recreate the RCU schema, kubernetes secrets for domain and RCU, the persistent volume and the persistent volume claim. Then execute the OIG domain creation steps again.\n  Patch domain failures The instructions in this section relate to problems patching a deployment with a new image as per Patch an image.\n  If the OIG domain patching fails when running patch_oig_domain.sh, run the following to diagnose the issue:\n$ kubectl describe domain \u0026lt;domain name\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe domain governancedomain -n oigns Using the output you should be able to diagnose the problem and resolve the issue.\nIf the domain is already patched successfully and the script failed at the last step of waiting for pods to come up with the new image, then you do not need to rerun the script again after issue resolution. The pods will come up automatically once you resolve the underlying issue.\n  If the script is stuck at the following message for a long time:\n\u0026quot;[INFO] Waiting for weblogic pods to be ready..This may take several minutes, do not close the window. Check log /scratch/OIGK8Slatest/fmw-kubernetes/OracleIdentityGovernance/kubernetes/domain-lifecycle/log/oim_patch_log-\u0026lt;DATE\u0026gt;/monitor_weblogic_pods.log for progress\u0026quot; run the following command to diagnose the issue:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oigns Run the following to check the logs of the AdminServer, SOA server or OIM server pods, as there may be an issue that is not allowing the domain pods to start properly:\n$ kubectl logs \u0026lt;pod\u0026gt; -n oigns If the above does not glean any information you can also run:\n$ kubectl describe pod \u0026lt;pod\u0026gt; -n oigns Further diagnostic logs can also be found under the $WORKDIR/kubernetes/domain-lifecycle.\nOnce any issue is resolved the pods will come up automatically without the need to rerun the script.\n  Domain creation failure with WDT models The instructions in this section relate to problems creating OIG domains using WDT models Create OIG domain using WDT Models.\nIf the domain creation fails while creation domain resources using the domain.yaml file, run the following steps to diagnose the issue:\n  Check the domain events, by running the following command:\nkubectl describe domain \u0026lt;domain name\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\nkubectl describe domain governancedomain -n oigns Using the output, you should be able to diagnose the problem and resolve the issue.\n  If the instrospector job fails due to validation errors, then you can recreate the domain resources using the commands:\nkubectl delete -f domain.yaml kubectl create -f domain.yaml   If the domain creation fails because of database issues:\na. Create a helper pod:\n kubectl run --image=container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January`25\u0026gt; --image-pull-policy=\u0026quot;IfNotPresent\u0026quot; --overrides='{\u0026quot;apiVersion\u0026quot;: \u0026quot;v1\u0026quot;,\u0026quot;spec\u0026quot;:{\u0026quot;imagePullSecrets\u0026quot;: [{\u0026quot;name\u0026quot;: \u0026quot;orclcred\u0026quot;}]}}' helper -n oigns -- sleep infinity ``\nb. Clean down the failed domain creation by following steps 1-3 in Delete the OIG domain home.\nc. Execute the steps in Create OIG domain using WDT Models again.\n  Note You might need to recreate the domain creation image depending upon the errors. Domain creation logs are stored in \u0026lt;persistent_volume\u0026gt;/domains/wdt-logs.\n  If there is any issues while bringing up AdminServer, SOA Server or OIM Server, you can run the following to check the logs:\n$ kubectl logs \u0026lt;pod\u0026gt; -n oigns If the above does not give any information you can also run:\n$ kubectl describe pod \u0026lt;pod\u0026gt; -n oigns For more details related to debugging issues, refer to Domain Debugging.\n  "
},
{
	"uri": "/fmw-kubernetes/idm-products/",
	"title": "Oracle Identity Management on Kubernetes",
	"tags": [],
	"description": "This document lists all the Oracle Identity Management products deployment supported on Kubernetes.",
	"content": "Oracle Fusion Middleware on Kubernetes Oracle supports the deployment of the following Oracle Identity Management 12.2.1.4 products on Kubernetes. Click on the appropriate document link below to get started on configuring the product.\nPlease note the following:\n  The individual product guides below for Oracle Access Management, Oracle Identity Governance, Oracle Unified Directory, and Oracle Unified Directory Services Manager, are for configuring that product on a Kubernetes cluster where no other Oracle Identity Management products will be deployed. For example, if you are deploying Oracle Access Management (OAM) only, then you can follow the Oracle Access Management guide. If you are deploying multiple Oracle Identity Management products on the same Kubernetes cluster, then you must follow the Enterprise Deployment Guide outlined in Enterprise Deployments. Please note, you also have the option to follow the Enterprise Deployment Guide even if you are only installing one product, such as OAM for example.\n  The individual product guides do not explain how to configure a Kubernetes cluster given the product can be deployed on any compliant Kubernetes vendor. If you need to understand how to configure a Kubernetes cluster ready for an Oracle Identity Management deployment, you should follow the Enterprise Deployment Guide in Enterprise Deployments.\n  The Enterprise Deployment Automation section also contains details on automation scripts that can:\n Automate the creation of a Kubernetes cluster on Oracle Cloud Infrastructure (OCI), ready for the deployment of Oracle Identity Management products. Automate the deployment of Oracle Identity Management products on any compliant Kubernetes cluster.     Enterprise Deployments  The complete Oracle Identity Management suite can be deployed in a production environment\n Oracle Access Management  The WebLogic Kubernetes Operator supports deployment of Oracle Access Management (OAM).\n Oracle Identity Governance  The WebLogic Kubernetes Operator supports deployment of Oracle Identity Governance (OIG).\n Oracle Internet Directory  Oracle Internet Directory provides a comprehensive Directory Solution for robust Identity Management\n Oracle Unified Directory  Oracle Unified Directory provides a comprehensive Directory Solution for robust Identity Management\n Oracle Unified Directory Services Manager  Oracle Unified Directory Services Manager provides an interface for managing instances of Oracle Unified Directory\n "
},
{
	"uri": "/fmw-kubernetes/wcsites-domains/",
	"title": "Oracle WebCenter Sites",
	"tags": [],
	"description": "The WebLogic Kubernetes Operator supports deployment of Oracle WebCenter Sites. Follow the instructions in this guide to set up Oracle WebCenter Sites domains on Kubernetes.",
	"content": "In this release, Oracle WebCenter Sites domains are supported using the \u0026ldquo;domain on a persistent volume\u0026rdquo; model only, where the domain home is located in a persistent volume (PV).\nThe operator has several key features to assist you with deploying and managing Oracle WebCenter Sites domains in a Kubernetes environment. You can:\n Create Oracle WebCenter Sites instances in a Kubernetes persistent volume (PV). This PV can reside in an NFS file system or other Kubernetes volume types. Start servers based on declarative startup parameters and desired states. Expose the Oracle WebCenter Sites services and composites for external access. Scale Oracle WebCenter Sites domains by starting and stopping Managed Servers on demand, or by integrating with a REST API to initiate scaling based on WLDF, Prometheus, Grafana, or other rules. Publish operator and WebLogic Server logs to Elasticsearch and interact with them in Kibana. Monitor the Oracle WebCenter Sites instance using Prometheus and Grafana.  Current production release The current supported production release of the Oracle WebLogic Server Kubernetes Operator, for Oracle WebCenter Sites domains deployment is 4.0.6\nRecent changes and known issues See the Release Notes for recent changes and known issues for Oracle WebCenter Sites domains deployment on Kubernetes.\nLimitations See here for limitations in this release.\nAbout this documentation This documentation includes sections targeted to different audiences. To help you find what you are looking for more easily, please consult this table of contents:\n  Quick Start explains how to quickly get an Oracle WebCenter Sites domain instance running, using the defaults, nothing special. Note that this is only for development and test purposes.\n  Install Guide and Administration Guide provide detailed information about all aspects of using the Kubernetes operator including:\n Installing and configuring the operator. Using the operator to create and manage Oracle WebCenter Sites domains. Configuring Kubernetes load balancers. Configuring Elasticsearch and Kibana to access the operator and WebLogic Server log files. Patching an Oracle WebCenter Sites Docker image. Removing/deleting domains. And much more!    Documentation for earlier releases To view documentation for an earlier release, see:\n Version 22.2.2 Version 21.4.3 Version 21.1.1  Additional reading Oracle WebCenter Sites domains deployment on Kubernetes leverages the Oracle WebLogic Server Kubernetes operator framework.\n To develop an understanding of the operator, including design, architecture, domain life cycle management, and configuration overrides, review the operator documentation. To learn more about the Oracle WebCenter Sites architecture and components, see Understanding Oracle WebCenter Sites. To understand the known issues and common questions for Oracle WebCenter Sites domains deployment on Kubernetes, see the frequently asked questions.  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oud/manage-oud-containers/scaling-up-down/",
	"title": "a) Scaling Up/Down OUD Pods ",
	"tags": [],
	"description": "Describes the steps for scaling up/down for OUD pods.",
	"content": "Introduction This section describes how to increase or decrease the number of OUD pods in the Kubernetes deployment.\nNote: The instructions below are for scaling servers up or down manually. If you wish to use autoscaling, see Kubernetes Horizontal Pod Autoscaler. Please note, if you have enabled autoscaling, it is recommended to delete the autoscaler before running the commands below.\nView existing OUD pods By default the oud-ds-rs helm chart deployment starts three pods: oud-ds-rs-0 and two replica pods oud-ds-rs-1 and oud-ds-rs-2.\nThe number of pods started is determined by the replicaCount, which is set to 3 by default. A value of 3 starts the three pods above.\nTo scale up or down the number of OUD pods, set replicaCount accordingly.\nRun the following command to view the number of pods in the OUD deployment:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; get pods -o wide For example:\n$ kubectl --namespace oudns get pods -o wide The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oud-ds-rs-0 1/1 Running 0 22h 10.244.0.195 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-1 1/1 Running 0 22h 10.244.0.194 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-2 1/1 Running 0 22h 10.244.0.193 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; Scaling up OUD pods In this example, replicaCount is increased to 4 which creates a new OUD pod oud-ds-rs-3 with associated services created.\nYou can scale up the number of OUD pods using one of the following methods:\n Using a YAML file Using --set argument  Using a YAML file   Navigate to the $WORKDIR/kubernetes/helm directory:\n$ cd $WORKDIR/kubernetes/helm   Create a oud-scaleup-override.yaml file that contains:\nreplicaCount: 4   Run the following command to scale up the OUD pods:\n$ helm upgrade --namespace \u0026lt;namespace\u0026gt; \\ --values oud-scaleup-override.yaml \\ \u0026lt;release_name\u0026gt; oud-ds-rs --reuse-values For example:\n$ helm upgrade --namespace oudns \\ --values oud-scaleup-override.yaml \\ oud-ds-rs oud-ds-rs --reuse-values   Using --set argument   Run the following command to scale up the OUD pods:\n$ helm upgrade --namespace \u0026lt;namespace\u0026gt; \\ --set replicaCount=4 \\ \u0026lt;release_name\u0026gt; oud-ds-rs --reuse-values For example:\n$ helm upgrade --namespace oudns \\ --set replicaCount=4 \\ oud-ds-rs oud-ds-rs --reuse-values   Verify the pods   Verify the new OUD pod oud-ds-rs-3 and has started:\n$ kubectl get pod,service -o wide -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods,service -n oudns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oud-ds-rs-0 1/1 Running 0 22h 10.244.0.195 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-1 1/1 Running 0 22h 10.244.0.194 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-2 1/1 Running 0 22h 10.244.0.193 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-3 1/1 Running 0 17m 10.244.0.193 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service/oud-ds-rs ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1389/TCP,1636/TCP,1080/TCP,1081/TCP,1898/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-0 ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1898/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-0 service/oud-ds-rs-1 ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1898/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-1 service/oud-ds-rs-2 ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1898/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-2 service/oud-ds-rs-3 ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1898/TCP 9m9s app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-3 service/oud-ds-rs-http-0 ClusterIP 10.104.112.93 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-0 service/oud-ds-rs-http-1 ClusterIP 10.103.105.70 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-1 service/oud-ds-rs-http-2 ClusterIP 10.110.160.107 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-2 service/oud-ds-rs-http-3 ClusterIP 10.102.93.179 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 9m9s app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-3 service/oud-ds-rs-lbr-admin ClusterIP 10.99.238.222 \u0026lt;none\u0026gt; 1888/TCP,1444/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-lbr-http ClusterIP 10.101.250.196 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-lbr-ldap ClusterIP 10.104.149.90 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-ldap-0 ClusterIP 10.109.255.221 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-0 service/oud-ds-rs-ldap-1 ClusterIP 10.111.135.142 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-1 service/oud-ds-rs-ldap-2 ClusterIP 10.100.8.145 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-2 service/oud-ds-rs-ldap-3 ClusterIP 10.111.177.46 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 9m9s app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-3 Note: It will take several minutes before all the services listed above show. While the oud-ds-rs-3 pod has a STATUS of 0/1 the pod is started but the OUD server associated with it is currently starting. While the pod is starting you can check the startup status in the pod log, by running the following command:\n$ kubectl logs oud-ds-rs-3 -n oudns   Scaling down OUD pods Scaling down OUD pods is performed in exactly the same as in Scaling up OUD pods except the replicaCount is reduced to the required number of pods.\nOnce the kubectl command is executed the pod(s) will move to a Terminating state. In the example below replicaCount was reduced from 4 to 3 and hence oud-ds-rs-3 has moved to Terminating:\n$ kubectl get pods -n oudns NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oud-ds-rs-0 1/1 Running 0 22h 10.244.0.195 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-1 1/1 Running 0 22h 10.244.0.194 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-2 1/1 Running 0 22h 10.244.0.193 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-3 1/1 Terminating 0 21m 10.244.0.193 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; The pod will take a minute or two to stop and then will disappear:\n$ kubectl get pods -n oudns NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oud-ds-rs-0 1/1 Running 0 22h 10.244.0.195 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-1 1/1 Running 0 22h 10.244.0.194 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-2 1/1 Running 0 22h 10.244.0.193 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; "
},
{
	"uri": "/fmw-kubernetes/idm-products/oudsm/manage-oudsm-containers/scaling-up-down/",
	"title": "a) Scaling Up/Down OUDSM Pods ",
	"tags": [],
	"description": "Describes the steps for scaling up/down for OUDSM pods.",
	"content": "Introduction This section describes how to increase or decrease the number of OUDSM pods in the Kubernetes deployment.\nView existing OUDSM pods By default the oudsm helm chart deployment starts one pod: oudsm-1.\nThe number of pods started is determined by the replicaCount, which is set to 1 by default. A value of 1 starts the pod above.\nTo scale up or down the number of OUDSM pods, set replicaCount accordingly.\nRun the following command to view the number of pods in the OUDSM deployment:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; get pods -o wide For example:\n$ kubectl --namespace oudsmns get pods -o wide The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oudsm-1 1/1 Running 0 73m 10.244.0.19 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; Scaling up OUDSM pods In this example, replicaCount is increased to 2 which creates a new OUDSM pod oudsm-2 with associated services created.\nYou can scale up the number of OUDSM pods using one of the following methods:\n Using a YAML file Using --set argument  Using a YAML file   Navigate to the $WORKDIR/kubernetes/helm directory:\n$ cd $WORKDIR/kubernetes/helm   Create a oudsm-scaleup-override.yaml file that contains:\nreplicaCount: 2   Run the following command to scale up the OUDSM pods:\n$ helm upgrade --namespace \u0026lt;namespace\u0026gt; \\ --values oudsm-scaleup-override.yaml \\ \u0026lt;release_name\u0026gt; oudsm --reuse-values For example:\n$ helm upgrade --namespace oudsmns \\ --values oudsm-scaleup-override.yaml \\ oudsm oudsm --reuse-values   Using --set argument   Run the following command to scale up the OUDSM pods:\n$ helm upgrade --namespace \u0026lt;namespace\u0026gt; \\ --set replicaCount=2 \\ \u0026lt;release_name\u0026gt; oudsm --reuse-values For example:\n$ helm upgrade --namespace oudsmns \\ --set replicaCount=2 \\ oudsm oudsm --reuse-values   Verify the pods   Verify the new OUDSM pod oudsm-2 has started:\n$ kubectl get pod,service -o wide -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods,service -n oudsmns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oudsm-1 1/1 Running 0 88m 10.244.0.19 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oudsm-2 1/1 Running 0 15m 10.245.3.45 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service/oudsm-1 ClusterIP 10.96.108.200 \u0026lt;none\u0026gt; 7001/TCP,7002/TCP 88m app.kubernetes.io/instance=oudsm,app.kubernetes.io/name=oudsm,oudsm/instance=oudsm-1 service/oudsm-2 ClusterIP 10.96.31.201 \u0026lt;none\u0026gt; 7001/TCP,7002/TCP 15m app.kubernetes.io/instance=oudsm,app.kubernetes.io/name=oudsm,oudsm/instance=oudsm-2 service/oudsm-lbr ClusterIP 10.96.41.201 \u0026lt;none\u0026gt; 7001/TCP,7002/TCP 73m app.kubernetes.io/instance=oudsm,app.kubernetes.io/name=oudsm Note: It will take several minutes before all the services listed above show. While the oudsm-2 pod has a STATUS of 0/1 the pod is started but the OUDSM server associated with it is currently starting. While the pod is starting you can check the startup status in the pod log, by running the following command:\n$ kubectl logs oudsm-2 -n oudsmns   Scaling down OUDSM pods Scaling down OUDSM pods is performed in exactly the same as in Scaling up OUDSM pods except the replicaCount is reduced to the required number of pods.\nOnce the kubectl command is executed the pod(s) will move to a Terminating state. In the example below replicaCount was reduced from 2 to 1 and hence oudsm-2 has moved to Terminating:\n$ kubectl get pods -n oudsmns NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oudsm-1 1/1 Running 0 92m 10.244.0.19 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oudsm-2 1/1 Terminating 0 19m 10.245.3.45 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; The pod will take a minute or two to stop and then will disappear:\n$ kubectl get pods -n oudsmns NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oudsm-1 1/1 Running 0 94m 10.244.0.19 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; "
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/create-oam-domains/create-oam-domains-using-wlst/",
	"title": "a. Create OAM domains using WLST scripts",
	"tags": [],
	"description": "",
	"content": "  Introduction\n  Prerequisites\n  Prepare the create domain script\n  Run the create domain script\n  Set the OAM server memory parameters\n  Initializing the domain\n  Verify the results\na. Verify the domain, pods and services\nb. Verify the domain\nc. Verify the pods\n  Introduction The OAM deployment scripts demonstrate the creation of an OAM 12.2.1.4 domain home on an existing Kubernetes persistent volume (PV) and persistent volume claim (PVC). The scripts also generate the domain YAML file, which can then be used to start the Kubernetes artifacts of the corresponding domain.\nNote: If you want to create the OAM domain using WDT models, skip the steps below and go to Create OAM Domains Using WDT Models.\nPrerequisites Before you begin, perform the following steps:\n Review the Domain resource documentation. Ensure that you have executed all the preliminary steps documented in Prepare your environment. Ensure that the database is up and running.  Prepare the create domain script The sample scripts for Oracle Access Management domain deployment are available at $WORKDIR/kubernetes/create-access-domain.\n  Make a copy of the create-domain-inputs.yaml file:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv $ cp create-domain-inputs.yaml create-domain-inputs.yaml.orig   Edit the create-domain-inputs.yaml and modify the following parameters. Save the file when complete:\ndomainUID: \u0026lt;domain_uid\u0026gt; domainHome: /u01/oracle/user_projects/domains/\u0026lt;domain_uid\u0026gt; image: \u0026lt;image_name\u0026gt;:\u0026lt;tag\u0026gt; imagePullSecretName: \u0026lt;container_registry_secret\u0026gt; weblogicCredentialsSecretName: \u0026lt;kubernetes_domain_secret\u0026gt; logHome: /u01/oracle/user_projects/domains/logs/\u0026lt;domain_uid\u0026gt; namespace: \u0026lt;domain_namespace\u0026gt; persistentVolumeClaimName: \u0026lt;pvc_name\u0026gt; rcuSchemaPrefix: \u0026lt;rcu_prefix\u0026gt; rcuDatabaseURL: \u0026lt;rcu_db_host\u0026gt;:\u0026lt;rcu_db_port\u0026gt;/\u0026lt;rcu_db_service_name\u0026gt; rcuCredentialsSecret: \u0026lt;kubernetes_rcu_secret\u0026gt; For example:\ndomainUID: accessdomain domainHome: /u01/oracle/user_projects/domains/accessdomain image: container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January\u0026#39;25\u0026gt; imagePullSecretName: orclcred weblogicCredentialsSecretName: accessdomain-credentials logHome: /u01/oracle/user_projects/domains/logs/accessdomain namespace: oamns persistentVolumeClaimName: accessdomain-domain-pvc rcuSchemaPrefix: OAMK8S rcuDatabaseURL: mydatabasehost.example.com:1521/orcl.example.com rcuCredentialsSecret: accessdomain-rcu-credentials   A full list of parameters in the create-domain-inputs.yaml file are shown below:\n   Parameter Definition Default     adminPort Port number for the Administration Server inside the Kubernetes cluster. 7001   adminNodePort Port number of the Administration Server outside the Kubernetes cluster. 30701   adminServerName Name of the Administration Server. AdminServer   clusterName Name of the WebLogic cluster instance to generate for the domain. By default the cluster name is oam_cluster for the OAM domain. oam_cluster   configuredManagedServerCount Number of Managed Server instances to generate for the domain. 5   createDomainFilesDir Directory on the host machine to locate all the files to create a WebLogic domain, including the script that is specified in the createDomainScriptName property. By default, this directory is set to the relative path wlst, and the create script will use the built-in WLST offline scripts in the wlst directory to create the WebLogic domain. It can also be set to the relative path wdt, and then the built-in WDT scripts will be used instead. An absolute path is also supported to point to an arbitrary directory in the file system. The built-in scripts can be replaced by the user-provided scripts or model files as long as those files are in the specified directory. Files in this directory are put into a Kubernetes config map, which in turn is mounted to the createDomainScriptsMountPath, so that the Kubernetes pod can use the scripts and supporting files to create a domain home. wlst   createDomainScriptsMountPath Mount path where the create domain scripts are located inside a pod. The create-domain.sh script creates a Kubernetes job to run the script (specified in the createDomainScriptName property) in a Kubernetes pod to create a domain home. Files in the createDomainFilesDir directory are mounted to this location in the pod, so that the Kubernetes pod can use the scripts and supporting files to create a domain home. /u01/weblogic   createDomainScriptName Script that the create domain script uses to create a WebLogic domain. The create-domain.sh script creates a Kubernetes job to run this script to create a domain home. The script is located in the in-pod directory that is specified in the createDomainScriptsMountPath property. If you need to provide your own scripts to create the domain home, instead of using the built-it scripts, you must use this property to set the name of the script that you want the create domain job to run. create-domain-job.sh   domainHome Home directory of the OAM domain. If not specified, the value is derived from the domainUID as /shared/domains/\u0026lt;domainUID\u0026gt;. /u01/oracle/user_projects/domains/accessdomain   domainPVMountPath Mount path of the domain persistent volume. /u01/oracle/user_projects/domains   domainUID Unique ID that will be used to identify this particular domain. Used as the name of the generated WebLogic domain as well as the name of the Kubernetes domain resource. This ID must be unique across all domains in a Kubernetes cluster. This ID cannot contain any character that is not valid in a Kubernetes service name. accessdomain   domainType Type of the domain. Mandatory input for OAM domains. You must provide one of the supported domain type value: oam (deploys an OAM domain) oam   exposeAdminNodePort Boolean indicating if the Administration Server is exposed outside of the Kubernetes cluster. false   exposeAdminT3Channel Boolean indicating if the T3 administrative channel is exposed outside the Kubernetes cluster. true   image OAM container image. The operator requires OAM 12.2.1.4. Refer to Obtain the OAM container image for details on how to obtain or create the image. oracle/oam:12.2.1.4.0   imagePullPolicy WebLogic container image pull policy. Legal values are IfNotPresent, Always, or Never IfNotPresent   imagePullSecretName Name of the Kubernetes secret to access the container registry to pull the OAM container image. The presence of the secret will be validated when this parameter is specified.    includeServerOutInPodLog Boolean indicating whether to include the server .out to the pod\u0026rsquo;s stdout. true   initialManagedServerReplicas Number of Managed Servers to initially start for the domain. 2   javaOptions Java options for starting the Administration Server and Managed Servers. A Java option can have references to one or more of the following pre-defined variables to obtain WebLogic domain information: $(DOMAIN_NAME), $(DOMAIN_HOME), $(ADMIN_NAME), $(ADMIN_PORT), and $(SERVER_NAME). -Dweblogic.StdoutDebugEnabled=false   logHome The in-pod location for the domain log, server logs, server out, and Node Manager log files. If not specified, the value is derived from the domainUID as /shared/logs/\u0026lt;domainUID\u0026gt;. /u01/oracle/user_projects/domains/logs/accessdomain   managedServerNameBase Base string used to generate Managed Server names. oam_server   managedServerPort Port number for each Managed Server. 8001   namespace Kubernetes namespace in which to create the domain. oamns   persistentVolumeClaimName Name of the persistent volume claim created to host the domain home. If not specified, the value is derived from the domainUID as \u0026lt;domainUID\u0026gt;-weblogic-sample-pvc. accessdomain-domain-pvc   productionModeEnabled Boolean indicating if production mode is enabled for the domain. true   serverStartPolicy Determines which WebLogic Server instances will be started. Legal values are Never, IfNeeded, AdminOnly. IfNeeded   t3ChannelPort Port for the T3 channel of the NetworkAccessPoint. 30012   t3PublicAddress Public address for the T3 channel. This should be set to the public address of the Kubernetes cluster. This would typically be a load balancer address. For development environments only: In a single server (all-in-one) Kubernetes deployment, this may be set to the address of the master, or at the very least, it must be set to the address of one of the worker nodes. If not provided, the script will attempt to set it to the IP address of the Kubernetes cluster   weblogicCredentialsSecretName Name of the Kubernetes secret for the Administration Server\u0026rsquo;s user name and password. If not specified, then the value is derived from the domainUID as \u0026lt;domainUID\u0026gt;-weblogic-credentials. accessdomain-domain-credentials   weblogicImagePullSecretName Name of the Kubernetes secret for the container registry, used to pull the WebLogic Server image.    serverPodCpuRequest, serverPodMemoryRequest, serverPodCpuCLimit, serverPodMemoryLimit The maximum amount of compute resources allowed, and minimum amount of compute resources required, for each server pod. Please refer to the Kubernetes documentation on Managing Compute Resources for Containers for details. Resource requests and resource limits are not specified.   rcuSchemaPrefix The schema prefix to use in the database, for example OAM1. You may wish to make this the same as the domainUID in order to simplify matching domains to their RCU schemas. OAM1   rcuDatabaseURL The database URL. oracle-db.default.svc.cluster.local:1521/devpdb.k8s   rcuCredentialsSecret The Kubernetes secret containing the database credentials. accessdomain-rcu-credentials   datasourceType Type of JDBC datasource applicable for the OAM domain. Legal values are agl and generic. Choose agl for Active GridLink datasource and generic for Generic datasource. For enterprise deployments, Oracle recommends that you use GridLink data sources to connect to Oracle RAC databases. See the Enterprise Deployment Guide for further details. generic    Note that the names of the Kubernetes resources in the generated YAML files may be formed with the value of some of the properties specified in the create-inputs.yaml file. Those properties include the adminServerName, clusterName and managedServerNameBase. If those values contain any characters that are invalid in a Kubernetes service name, those characters are converted to valid values in the generated YAML files. For example, an uppercase letter is converted to a lowercase letter and an underscore (\u0026quot;_\u0026quot;) is converted to a hyphen (\u0026quot;-\u0026quot;).\nThe sample demonstrates how to create an OAM domain home and associated Kubernetes resources for a domain that has one cluster only. In addition, the sample provides the capability for users to supply their own scripts to create the domain home for other use cases. The generated domain YAML file could also be modified to cover more use cases.\nRun the create domain script   Run the create domain script, specifying your inputs file and an output directory to store the generated artifacts:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv $ ./create-domain.sh -i create-domain-inputs.yaml -o /\u0026lt;path to output-directory\u0026gt; For example:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv $ ./create-domain.sh -i create-domain-inputs.yaml -o output The output will look similar to the following:\nInput parameters being used export version=\u0026quot;create-weblogic-sample-domain-inputs-v1\u0026quot; export adminPort=\u0026quot;7001\u0026quot; export adminServerName=\u0026quot;AdminServer\u0026quot; export domainUID=\u0026quot;accessdomain\u0026quot; export domainType=\u0026quot;oam\u0026quot; export domainHome=\u0026quot;/u01/oracle/user_projects/domains/accessdomain\u0026quot; export serverStartPolicy=\u0026quot;IfNeeded\u0026quot; export clusterName=\u0026quot;oam_cluster\u0026quot; export configuredManagedServerCount=\u0026quot;5\u0026quot; export initialManagedServerReplicas=\u0026quot;2\u0026quot; export managedServerNameBase=\u0026quot;oam_server\u0026quot; export managedServerPort=\u0026quot;14100\u0026quot; export image=\u0026quot;container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January'25\u0026gt;\u0026quot; export imagePullPolicy=\u0026quot;IfNotPresent\u0026quot; export imagePullSecretName=\u0026quot;orclcred\u0026quot; export productionModeEnabled=\u0026quot;true\u0026quot; export weblogicCredentialsSecretName=\u0026quot;accessdomain-credentials\u0026quot; export includeServerOutInPodLog=\u0026quot;true\u0026quot; export logHome=\u0026quot;/u01/oracle/user_projects/domains/logs/accessdomain\u0026quot; export httpAccessLogInLogHome=\u0026quot;true\u0026quot; export t3ChannelPort=\u0026quot;30012\u0026quot; export exposeAdminT3Channel=\u0026quot;false\u0026quot; export adminNodePort=\u0026quot;30701\u0026quot; export exposeAdminNodePort=\u0026quot;false\u0026quot; export namespace=\u0026quot;oamns\u0026quot; javaOptions=-Dweblogic.StdoutDebugEnabled=false export persistentVolumeClaimName=\u0026quot;accessdomain-domain-pvc\u0026quot; export domainPVMountPath=\u0026quot;/u01/oracle/user_projects/domains\u0026quot; export createDomainScriptsMountPath=\u0026quot;/u01/weblogic\u0026quot; export createDomainScriptName=\u0026quot;create-domain-job.sh\u0026quot; export createDomainFilesDir=\u0026quot;wlst\u0026quot; export rcuSchemaPrefix=\u0026quot;OAMK8S\u0026quot; export rcuDatabaseURL=\u0026quot;mydatabasehost.example.com:1521/orcl.example.com\u0026quot; export rcuCredentialsSecret=\u0026quot;accessdomain-rcu-credentials\u0026quot; export datasourceType=\u0026quot;generic\u0026quot; validateWlsDomainName called with accessdomain createFiles - valuesInputFile is create-domain-inputs.yaml createDomainScriptName is create-domain-job.sh Generating output/weblogic-domains/accessdomain/create-domain-job.yaml Generating output/weblogic-domains/accessdomain/delete-domain-job.yaml Generating output/weblogic-domains/accessdomain/domain.yaml Checking to see if the secret accessdomain-credentials exists in namespace oamns configmap/accessdomain-create-oam-infra-domain-job-cm created Checking the configmap accessdomain-create-oam-infra-domain-job-cm was created configmap/accessdomain-create-oam-infra-domain-job-cm labeled Checking if object type job with name accessdomain-create-oam-infra-domain-job exists No resources found in oamns namespace. Creating the domain by creating the job output/weblogic-domains/accessdomain/create-domain-job.yaml job.batch/accessdomain-create-oam-infra-domain-job created Waiting for the job to complete... status on iteration 1 of 20 pod accessdomain-create-oam-infra-domain-job-6tgw4 status is Running status on iteration 2 of 20 pod accessdomain-create-oam-infra-domain-job-6tgw4 status is Running status on iteration 3 of 20 pod accessdomain-create-oam-infra-domain-job-6tgw4 status is Running status on iteration 4 of 20 pod accessdomain-create-oam-infra-domain-job-6tgw4 status is Running status on iteration 5 of 20 pod accessdomain-create-oam-infra-domain-job-6tgw4 status is Running status on iteration 6 of 20 pod accessdomain-create-oam-infra-domain-job-6tgw4 status is Completed Domain accessdomain was created and will be started by the WebLogic Kubernetes Operator The following files were generated: output/weblogic-domains/accessdomain/create-domain-inputs.yaml output/weblogic-domains/accessdomain/create-domain-job.yaml output/weblogic-domains/accessdomain/domain.yaml Note: If the domain creation fails, refer to the Troubleshooting section.\nThe command creates a domain.yaml file required for domain creation.\n  Set the OAM server memory parameters By default, the java memory parameters assigned to the oam_server cluster are very small. The minimum recommended values are -Xms4096m -Xmx8192m. However, Oracle recommends you to set these to -Xms8192m -Xmx8192m in a production environment.\n  Navigate to the /output/weblogic-domains/\u0026lt;domain_uid\u0026gt; directory:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/output/weblogic-domains/\u0026lt;domain_uid\u0026gt; For example:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/output/weblogic-domains/accessdomain   Edit the domain.yaml file and inside name: accessdomain-oam-cluster, add the memory setting as below:\n serverPod: env: - name: USER_MEM_ARGS value: \u0026quot;-XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m\u0026quot; resources: limits: cpu: \u0026quot;2\u0026quot; memory: \u0026quot;8Gi\u0026quot; requests: cpu: \u0026quot;1000m\u0026quot; memory: \u0026quot;4Gi\u0026quot; For example:\napiVersion: weblogic.oracle/v1 kind: Cluster metadata: name: accessdomain-oam-cluster namespace: oamns spec: clusterName: oam_cluster serverService: precreateService: true serverPod: env: - name: USER_MEM_ARGS value: \u0026quot;-XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m\u0026quot; resources: limits: cpu: \u0026quot;2\u0026quot; memory: \u0026quot;8Gi\u0026quot; requests: cpu: \u0026quot;1000m\u0026quot; memory: \u0026quot;4Gi\u0026quot; replicas: 1 Note: The above CPU and memory values are for examples only. For Enterprise Deployments, please review the performance recommendations and sizing requirements in Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster.\nNote: Limits and requests for CPU resources are measured in CPU units. One CPU in Kubernetes is equivalent to 1 vCPU/Core for cloud providers, and 1 hyperthread on bare-metal Intel processors. An \u0026ldquo;m\u0026rdquo; suffix in a CPU attribute indicates ‘milli-CPU’, so 500m is 50% of a CPU. Memory can be expressed in various units, where one Mi is one IEC unit mega-byte (1024^2), and one Gi is one IEC unit giga-byte (1024^3). For more information, see Resource Management for Pods and Containers, Assign Memory Resources to Containers and Pods, and Assign CPU Resources to Containers and Pods.\nNote: The parameters above are also utilized by the Kubernetes Horizontal Pod Autoscaler (HPA). For more details on HPA, see Kubernetes Horizontal Pod Autoscaler.\nNote: If required you can also set the same resources and limits for the accessdomain-policy-cluster.\n  In the domain.yaml locate the section of the file starting with adminServer:. Under the env: tag add the following CLASSPATH entries. This is required for running the idmconfigtool from the Administration Server.\n- name: CLASSPATH value: \u0026quot;/u01/oracle/wlserver/server/lib/weblogic.jar\u0026quot; For example:\n# adminServer is used to configure the desired behavior for starting the administration server. adminServer: # adminService: # channels: # The Admin Server's NodePort # - channelName: default # nodePort: 30701 # Uncomment to export the T3Channel as a service # - channelName: T3Channel serverPod: # an (optional) list of environment variable to be set on the admin servers env: - name: USER_MEM_ARGS value: \u0026quot;-Djava.security.egd=file:/dev/./urandom -Xms512m -Xmx1024m \u0026quot; - name: CLASSPATH value: \u0026quot;/u01/oracle/wlserver/server/lib/weblogic.jar\u0026quot;   If required, you can add the optional parameter maxClusterConcurrentStartup to the spec section of the domain.yaml. This parameter specifies the number of managed servers to be started in sequence per cluster. For example if you updated the initialManagedServerReplicas to 4 in create-domain-inputs.yaml and only had 2 nodes, then setting maxClusterConcurrentStartup: 1 will start one managed server at a time on each node, rather than starting them all at once. This can be useful to take the strain off individual nodes at startup. Below is an example with the parameter added:\napiVersion: \u0026quot;weblogic.oracle/v9\u0026quot; kind: Domain metadata: name: accessdomain namespace: oamns labels: weblogic.domainUID: accessdomain spec: # The WebLogic Domain Home domainHome: /u01/oracle/user_projects/domains/accessdomain maxClusterConcurrentStartup: 1 # The domain home source type # Set to PersistentVolume for domain-in-pv, Image for domain-in-image, or FromModel for model-in-image domainHomeSourceType: PersistentVolume ....   Save the changes to domain.yaml\n  Initializing the domain   Create the Kubernetes resource using the following command:\n$ kubectl apply -f $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/output/weblogic-domains/\u0026lt;domain_uid\u0026gt;/domain.yaml For example:\n$ kubectl apply -f $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/output/weblogic-domains/accessdomain/domain.yaml The output will look similar to the following:\ndomain.weblogic.oracle/accessdomain created cluster.weblogic.oracle/accessdomain-oam-cluster created cluster.weblogic.oracle/accessdomain-policy-cluster created   Verify the results Verify the domain, pods and services   Verify the domain, servers pods and services are created and in the READY state with a status of 1/1, by running the following command:\n$ kubectl get all,domains -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get all,domains -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE pod/accessdomain-adminserver 1/1 Running 0 11m pod/accessdomain-create-oam-infra-domain-job-7c9r9 0/1 Completed 0 18m pod/accessdomain-oam-policy-mgr1 1/1 Running 0 3m31s pod/accessdomain-oam-server1 1/1 Running 0 3m31s pod/helper 1/1 Running 0 33m NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/accessdomain-adminserver ClusterIP None \u0026lt;none\u0026gt; 7001/TCP 11m service/accessdomain-cluster-oam-cluster ClusterIP 10.101.59.154 \u0026lt;none\u0026gt; 14100/TCP 3m31s service/accessdomain-cluster-policy-cluster ClusterIP 10.98.236.51 \u0026lt;none\u0026gt; 15100/TCP 3m31s service/accessdomain-oam-policy-mgr1 ClusterIP None \u0026lt;none\u0026gt; 15100/TCP 3m31s service/accessdomain-oam-policy-mgr2 ClusterIP 10.104.92.12 \u0026lt;none\u0026gt; 15100/TCP 3m31s service/accessdomain-oam-policy-mgr3 ClusterIP 10.96.244.37 \u0026lt;none\u0026gt; 15100/TCP 3m31s service/accessdomain-oam-policy-mgr4 ClusterIP 10.105.201.23 \u0026lt;none\u0026gt; 15100/TCP 3m31s service/accessdomain-oam-policy-mgr5 ClusterIP 10.110.12.227 \u0026lt;none\u0026gt; 15100/TCP 3m31s service/accessdomain-oam-server1 ClusterIP None \u0026lt;none\u0026gt; 14100/TCP 3m31s service/accessdomain-oam-server2 ClusterIP 10.96.137.33 \u0026lt;none\u0026gt; 14100/TCP 3m31s service/accessdomain-oam-server3 ClusterIP 10.103.178.35 \u0026lt;none\u0026gt; 14100/TCP 3m31s service/accessdomain-oam-server4 ClusterIP 10.97.254.78 \u0026lt;none\u0026gt; 14100/TCP 3m31s service/accessdomain-oam-server5 ClusterIP 10.105.65.104 \u0026lt;none\u0026gt; 14100/TCP 3m31s NAME COMPLETIONS DURATION AGE job.batch/accessdomain-create-oam-infra-domain-job 1/1 2m6s 18m NAME AGE domain.weblogic.oracle/accessdomain 12m NAME AGE cluster.weblogic.oracle/accessdomain-oam-cluster 11m cluster.weblogic.oracle/accessdomain-policy-cluster 11m Note: It will take several minutes before all the services listed above show. When a pod has a STATUS of 0/1 the pod is started but the OAM server associated with it is currently starting. While the pods are starting you can check the startup status in the pod logs, by running the following command:\n$ kubectl logs accessdomain-adminserver -n oamns $ kubectl logs accessdomain-oam-policy-mgr1 -n oamns $ kubectl logs accessdomain-oam-server1 -n oamns etc.. The default domain created by the script has the following characteristics:\n An Administration Server named AdminServer listening on port 7001. A configured OAM cluster named oam_cluster of size 5. A configured Policy Manager cluster named policy_cluster of size 5. One started OAM Managed Server, named oam_server1, listening on port 14100. One started Policy Manager Managed Servers named oam-policy-mgr1, listening on port 15100. Log files that are located in \u0026lt;persistent_volume\u0026gt;/logs/\u0026lt;domainUID\u0026gt;.    Verify the domain   Run the following command to describe the domain:\n$ kubectl describe domain \u0026lt;domain_uid\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe domain accessdomain -n oamns The output will look similar to the following:\nName: accessdomain Namespace: oamns Labels: weblogic.domainUID=accessdomain Annotations: \u0026lt;none\u0026gt; API Version: weblogic.oracle/v9 Kind: Domain Metadata: Creation Timestamp: \u0026lt;DATE\u0026gt; Generation: 1 Managed Fields: API Version: weblogic.oracle/v9 Fields Type: FieldsV1 fieldsV1: f:metadata: f:annotations: .: f:kubectl.kubernetes.io/last-applied-configuration: f:labels: .: f:weblogic.domainUID: f:spec: .: f:adminServer: .: f:adminChannelPortForwardingEnabled: f:serverPod: .: f:env: f:serverStartPolicy: f:clusters: f:dataHome: f:domainHome: f:domainHomeSourceType: f:failureRetryIntervalSeconds: f:failureRetryLimitMinutes: f:httpAccessLogInLogHome: f:image: f:imagePullPolicy: f:imagePullSecrets: f:includeServerOutInPodLog: f:logHome: f:logHomeEnabled: f:logHomeLayout: f:maxClusterConcurrentShutdown: f:maxClusterConcurrentStartup: f:maxClusterUnavailable: f:replicas: f:serverPod: .: f:env: f:volumeMounts: f:volumes: f:serverStartPolicy: f:webLogicCredentialsSecret: .: f:name: Manager: kubectl-client-side-apply Operation: Update Time: \u0026lt;DATE\u0026gt; API Version: weblogic.oracle/v9 Fields Type: FieldsV1 fieldsV1: f:status: .: f:clusters: f:conditions: f:observedGeneration: f:servers: f:startTime: Manager: Kubernetes Java Client Operation: Update Subresource: status Time: \u0026lt;DATE\u0026gt; Resource Version: 2074089 UID: e194d483-7383-4359-adb9-bf97de36518b Spec: Admin Server: Admin Channel Port Forwarding Enabled: true Server Pod: Env: Name: USER_MEM_ARGS Value: -Djava.security.egd=file:/dev/./urandom -Xms512m -Xmx1024m Name: CLASSPATH Value: /u01/oracle/wlserver/server/lib/weblogic.jar Server Start Policy: IfNeeded Clusters: Name: accessdomain-oam-cluster Name: accessdomain-policy-cluster Data Home: Domain Home: /u01/oracle/user_projects/domains/accessdomain Domain Home Source Type: PersistentVolume Failure Retry Interval Seconds: 120 Failure Retry Limit Minutes: 1440 Http Access Log In Log Home: true Image: container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January'25\u0026gt; Image Pull Policy: IfNotPresent Image Pull Secrets: Name: orclcred Include Server Out In Pod Log: true Log Home: /u01/oracle/user_projects/domains/logs/accessdomain Log Home Enabled: true Log Home Layout: ByServers Max Cluster Concurrent Shutdown: 1 Max Cluster Concurrent Startup: 0 Max Cluster Unavailable: 1 Replicas: 1 Server Pod: Env: Name: JAVA_OPTIONS Value: -Dweblogic.StdoutDebugEnabled=false Name: USER_MEM_ARGS Value: -Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx1024m Volume Mounts: Mount Path: /u01/oracle/user_projects/domains Name: weblogic-domain-storage-volume Volumes: Name: weblogic-domain-storage-volume Persistent Volume Claim: Claim Name: accessdomain-domain-pvc Server Start Policy: IfNeeded Web Logic Credentials Secret: Name: accessdomain-credentials Status: Clusters: Cluster Name: oam_cluster Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Label Selector: weblogic.domainUID=accessdomain,weblogic.clusterName=oam_cluster Maximum Replicas: 5 Minimum Replicas: 0 Observed Generation: 1 Ready Replicas: 1 Replicas: 1 Replicas Goal: 1 Cluster Name: policy_cluster Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Label Selector: weblogic.domainUID=accessdomain,weblogic.clusterName=policy_cluster Maximum Replicas: 5 Minimum Replicas: 0 Observed Generation: 1 Ready Replicas: 1 Replicas: 1 Replicas Goal: 1 Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Observed Generation: 1 Servers: Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: worker-node2 Pod Phase: Running Pod Ready: True Server Name: AdminServer State: RUNNING State Goal: RUNNING Cluster Name: oam_cluster Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: worker-node1 Pod Phase: Running Pod Ready: True Server Name: oam_server1 State: RUNNING State Goal: RUNNING Cluster Name: oam_cluster Server Name: oam_server2 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oam_cluster Server Name: oam_server3 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oam_cluster Server Name: oam_server4 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oam_cluster Server Name: oam_server5 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: policy_cluster Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: worker-node1 Pod Phase: Running Pod Ready: True Server Name: oam_policy_mgr1 State: RUNNING State Goal: RUNNING Cluster Name: policy_cluster Server Name: oam_policy_mgr2 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: policy_cluster Server Name: oam_policy_mgr3 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: policy_cluster Server Name: oam_policy_mgr4 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: policy_cluster Server Name: oam_policy_mgr5 State: SHUTDOWN State Goal: SHUTDOWN Start Time: \u0026lt;DATE\u0026gt; Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Created 15m weblogic.operator Domain accessdomain was created. Normal Available 2m56s weblogic.operator Domain accessdomain is available: a sufficient number of its servers have reached the ready state. Normal Completed 2m56s weblogic.operator Domain accessdomain is complete because all of the following are true: there is no failure detected, there are no pending server shutdowns, and all servers expected to be running are ready and at their target image, auxiliary images, restart version, and introspect version. In the Status section of the output, the available servers and clusters are listed.\n  Verify the pods   Run the following command to see the pods running the servers and which nodes they are running on:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; -o wide For example:\n$ kubectl get pods -n oamns -o wide The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES accessdomain-adminserver 1/1 Running 0 18m 10.244.6.63 10.250.42.252 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; accessdomain-create-oam-infra-domain-job-7c9r9 0/1 Completed 0 25m 10.244.6.61 10.250.42.252 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; accessdomain-oam-policy-mgr1 1/1 Running 0 10m 10.244.5.13 10.250.42.255 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; accessdomain-oam-server1 1/1 Running 0 10m 10.244.5.12 10.250.42.255 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; helper 1/1 Running 0 40m 10.244.6.60 10.250.42.252 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; You are now ready to configure an Ingress to direct traffic for your OAM domain as per Configure an Ingress for an OAM domain.\n  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/create-oig-domains/create-oig-domains-using-wlst/",
	"title": "a. Create OIG domains using WLST scripts",
	"tags": [],
	"description": "",
	"content": "  Introduction\n  Prerequisites\n  Prepare the create domain script\n  Run the create domain script\na. Generate the create domain script\nb. Setting the OIM server memory parameters\nc. Run the create domain scripts\n  Verify the results\na. Verify the domain, pods and services\nb. Verify the domain\nc. Verify the pods\n  Introduction The OIG 12.2.1.4 deployment scripts demonstrate the creation of an OIG domain home on an existing Kubernetes persistent volume (PV) and persistent volume claim (PVC). The scripts also generate the domain YAML file, which can then be used to start the Kubernetes artifacts of the corresponding domain.\nNote: If you want to create the OIG domain using WDT models, skip the steps below and go to Create OIG Domains Using WDT Models.\nPrerequisites Before you begin, perform the following steps:\n Review the Domain resource documentation. Ensure that you have executed all the preliminary steps documented in Prepare your environment. Ensure that the database is up and running.  Prepare the create domain script The sample scripts for Oracle Identity Governance domain deployment are available at $WORKDIR/kubernetes/create-oim-domain.\n  Make a copy of the create-domain-inputs.yaml file:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv $ cp create-domain-inputs.yaml create-domain-inputs.yaml.orig   Edit the create-domain-inputs.yaml and modify the following parameters. Save the file when complete:\nNote: Do not edit any other parameters other than ones mentioned below.\ndomainUID: \u0026lt;domain_uid\u0026gt; domainHome: /u01/oracle/user_projects/domains/\u0026lt;domain_uid\u0026gt; image: \u0026lt;image_name\u0026gt; imagePullSecretName: \u0026lt;container_registry_secret\u0026gt; weblogicCredentialsSecretName: \u0026lt;kubernetes_domain_secret\u0026gt; logHome: /u01/oracle/user_projects/domains/logs/\u0026lt;domain_id\u0026gt; namespace: \u0026lt;domain_namespace\u0026gt; persistentVolumeClaimName: \u0026lt;pvc_name\u0026gt; rcuSchemaPrefix: \u0026lt;rcu_prefix\u0026gt; rcuDatabaseURL: \u0026lt;rcu_db_host\u0026gt;:\u0026lt;rcu_db_port\u0026gt;/\u0026lt;rcu_db_service_name\u0026gt; rcuCredentialsSecret: \u0026lt;kubernetes_rcu_secret\u0026gt; frontEndHost: \u0026lt;front_end_hostname\u0026gt; frontEndPort: \u0026lt;front_end_port\u0026gt; For example:\ndomainUID: governancedomain domainHome: /u01/oracle/user_projects/domains/governancedomain image: container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January'25\u0026gt; imagePullSecretName: orclcred weblogicCredentialsSecretName: oig-domain-credentials logHome: /u01/oracle/user_projects/domains/logs/governancedomain namespace: oigns persistentVolumeClaimName: governancedomain-domain-pvc rcuSchemaPrefix: OIGK8S rcuDatabaseURL: mydatabasehost.example.com:1521/orcl.example.com rcuCredentialsSecret: oig-rcu-credentials frontEndHost: example.com frontEndPort: 14100 Note: For now frontEndHost and front_end_port should be set to example.com and 14100 respectively. These values will be changed to the correct values in post installation tasks in Set OIMFrontendURL using MBeans.\n  A full list of parameters in the create-domain-inputs.yaml file are shown below:\n   Parameter Definition Default     adminPort Port number for the Administration Server inside the Kubernetes cluster. 7001   adminNodePort Port number of the Administration Server outside the Kubernetes cluster. 30701   adminServerName Name of the Administration Server. AdminServer   clusterName Name of the WebLogic cluster instance to generate for the domain. By default the cluster name is oimcluster for the OIG domain. oimcluster   configuredManagedServerCount Number of Managed Server instances to generate for the domain. 5   createDomainFilesDir Directory on the host machine to locate all the files to create a WebLogic domain, including the script that is specified in the createDomainScriptName property. By default, this directory is set to the relative path wlst, and the create script will use the built-in WLST offline scripts in the wlst directory to create the WebLogic domain. It can also be set to the relative path wdt, and then the built-in WDT scripts will be used instead. An absolute path is also supported to point to an arbitrary directory in the file system. The built-in scripts can be replaced by the user-provided scripts or model files as long as those files are in the specified directory. Files in this directory are put into a Kubernetes config map, which in turn is mounted to the createDomainScriptsMountPath, so that the Kubernetes pod can use the scripts and supporting files to create a domain home. wlst   createDomainScriptsMountPath Mount path where the create domain scripts are located inside a pod. The create-domain.sh script creates a Kubernetes job to run the script (specified in the createDomainScriptName property) in a Kubernetes pod to create a domain home. Files in the createDomainFilesDir directory are mounted to this location in the pod, so that the Kubernetes pod can use the scripts and supporting files to create a domain home. /u01/weblogic   createDomainScriptName Script that the create domain script uses to create a WebLogic domain. The create-domain.sh script creates a Kubernetes job to run this script to create a domain home. The script is located in the in-pod directory that is specified in the createDomainScriptsMountPath property. If you need to provide your own scripts to create the domain home, instead of using the built-it scripts, you must use this property to set the name of the script that you want the create domain job to run. create-domain-job.sh   domainHome Home directory of the OIG domain. If not specified, the value is derived from the domainUID as /shared/domains/\u0026lt;domainUID\u0026gt;. /u01/oracle/user_projects/domains/oimcluster   domainPVMountPath Mount path of the domain persistent volume. /u01/oracle/user_projects/domains   domainUID Unique ID that will be used to identify this particular domain. Used as the name of the generated WebLogic domain as well as the name of the Kubernetes domain resource. This ID must be unique across all domains in a Kubernetes cluster. This ID cannot contain any character that is not valid in a Kubernetes service name. oimcluster   exposeAdminNodePort Boolean indicating if the Administration Server is exposed outside of the Kubernetes cluster. false   exposeAdminT3Channel Boolean indicating if the T3 administrative channel is exposed outside the Kubernetes cluster. true   image OIG container image. The operator requires OIG 12.2.1.4. Refer to OIG domains for details on how to obtain or create the image. oracle/oig:12.2.1.4.0   imagePullPolicy WebLogic container image pull policy. Legal values are IfNotPresent, Always, or Never IfNotPresent   imagePullSecretName Name of the Kubernetes secret to access the container registry to pull the OIG container image. The presence of the secret will be validated when this parameter is specified.    includeServerOutInPodLog Boolean indicating whether to include the server .out to the pod\u0026rsquo;s stdout. true   initialManagedServerReplicas Number of Managed Servers to initially start for the domain. 2   javaOptions Java options for starting the Administration Server and Managed Servers. A Java option can have references to one or more of the following pre-defined variables to obtain WebLogic domain information: $(DOMAIN_NAME), $(DOMAIN_HOME), $(ADMIN_NAME), $(ADMIN_PORT), and $(SERVER_NAME). -Dweblogic.StdoutDebugEnabled=false   logHome The in-pod location for the domain log, server logs, server out, and Node Manager log files. If not specified, the value is derived from the domainUID as /shared/logs/\u0026lt;domainUID\u0026gt;. /u01/oracle/user_projects/domains/logs/oimcluster   managedServerNameBase Base string used to generate Managed Server names. oim_server   managedServerPort Port number for each Managed Server. 8001   namespace Kubernetes namespace in which to create the domain. oimcluster   persistentVolumeClaimName Name of the persistent volume claim created to host the domain home. If not specified, the value is derived from the domainUID as \u0026lt;domainUID\u0026gt;-weblogic-sample-pvc. oimcluster-domain-pvc   productionModeEnabled Boolean indicating if production mode is enabled for the domain. true   serverStartPolicy Determines which WebLogic Server instances will be started. Legal values are Never, IfNeeded, AdminOnly. IfNeeded   t3ChannelPort Port for the T3 channel of the NetworkAccessPoint. 30012   t3PublicAddress Public address for the T3 channel. This should be set to the public address of the Kubernetes cluster. This would typically be a load balancer address. For development environments only: In a single server (all-in-one) Kubernetes deployment, this may be set to the address of the master, or at the very least, it must be set to the address of one of the worker nodes. If not provided, the script will attempt to set it to the IP address of the Kubernetes cluster   weblogicCredentialsSecretName Name of the Kubernetes secret for the Administration Server\u0026rsquo;s user name and password. If not specified, then the value is derived from the domainUID as \u0026lt;domainUID\u0026gt;-weblogic-credentials. oimcluster-domain-credentials   weblogicImagePullSecretName Name of the Kubernetes secret for the container registry, used to pull the WebLogic Server image.    serverPodCpuRequest, serverPodMemoryRequest, serverPodCpuCLimit, serverPodMemoryLimit The maximum amount of compute resources allowed, and minimum amount of compute resources required, for each server pod. Please refer to the Kubernetes documentation on Managing Compute Resources for Containers for details. Resource requests and resource limits are not specified.   rcuSchemaPrefix The schema prefix to use in the database, for example OIGK8S. You may wish to make this the same as the domainUID in order to simplify matching domains to their RCU schemas. Note: The RCU schema prefix can only contain alpha-numeric characters, and contain no spaces, or other special characters. It must begin with a letter and be no longer than 8 characters. OIGK8S   rcuDatabaseURL The database URL. oracle-db.default.svc.cluster.local:1521/devpdb.k8s   rcuCredentialsSecret The Kubernetes secret containing the database credentials. oimcluster-rcu-credentials   frontEndHost The entry point URL for the OIM. Not set   frontEndPort The entry point port for the OIM. Not set   datasourceType Type of JDBC datasource applicable for the OIG domain. Legal values are agl and generic. Choose agl for Active GridLink datasource and generic for Generic datasource. For enterprise deployments, Oracle recommends that you use GridLink data sources to connect to Oracle RAC databases. See the Enterprise Deployment Guide for further details. generic    Note that the names of the Kubernetes resources in the generated YAML files may be formed with the value of some of the properties specified in the create-inputs.yaml file. Those properties include the adminServerName, clusterName and managedServerNameBase. If those values contain any characters that are invalid in a Kubernetes service name, those characters are converted to valid values in the generated YAML files. For example, an uppercase letter is converted to a lowercase letter and an underscore (\u0026quot;_\u0026quot;) is converted to a hyphen (\u0026quot;-\u0026quot;).\nThe sample demonstrates how to create an OIG domain home and associated Kubernetes resources for a domain that has one cluster only. In addition, the sample provides the capability for users to supply their own scripts to create the domain home for other use cases. The generated domain YAML file could also be modified to cover more use cases.\nRun the create domain script Generate the create domain script   Run the create domain script, specifying your inputs file and an output directory to store the generated artifacts:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv $ mkdir output $ ./create-domain.sh -i create-domain-inputs.yaml -o /\u0026lt;path to output-directory\u0026gt; For example:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv $ mkdir output $ ./create-domain.sh -i create-domain-inputs.yaml -o output The output will look similar to the following:\nInput parameters being used export version=\u0026quot;create-weblogic-sample-domain-inputs-v1\u0026quot; export adminPort=\u0026quot;7001\u0026quot; export adminServerName=\u0026quot;AdminServer\u0026quot; export domainUID=\u0026quot;governancedomain\u0026quot; export domainHome=\u0026quot;/u01/oracle/user_projects/domains/governancedomain\u0026quot; export serverStartPolicy=\u0026quot;IfNeeded\u0026quot; export clusterName=\u0026quot;oim_cluster\u0026quot; export configuredManagedServerCount=\u0026quot;5\u0026quot; export initialManagedServerReplicas=\u0026quot;1\u0026quot; export managedServerNameBase=\u0026quot;oim_server\u0026quot; export managedServerPort=\u0026quot;14000\u0026quot; export image=\u0026quot;container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January'25\u0026gt;\u0026quot; export imagePullPolicy=\u0026quot;IfNotPresent\u0026quot; export imagePullSecretName=\u0026quot;orclcred\u0026quot; export productionModeEnabled=\u0026quot;true\u0026quot; export weblogicCredentialsSecretName=\u0026quot;oig-domain-credentials\u0026quot; export includeServerOutInPodLog=\u0026quot;true\u0026quot; export logHome=\u0026quot;/u01/oracle/user_projects/domains/logs/governancedomain\u0026quot; export t3ChannelPort=\u0026quot;30012\u0026quot; export exposeAdminT3Channel=\u0026quot;false\u0026quot; export adminNodePort=\u0026quot;30701\u0026quot; export exposeAdminNodePort=\u0026quot;false\u0026quot; export namespace=\u0026quot;oigns\u0026quot; javaOptions=-Dweblogic.StdoutDebugEnabled=false export persistentVolumeClaimName=\u0026quot;governancedomain-domain-pvc\u0026quot; export domainPVMountPath=\u0026quot;/u01/oracle/user_projects/domains\u0026quot; export createDomainScriptsMountPath=\u0026quot;/u01/weblogic\u0026quot; export createDomainScriptName=\u0026quot;create-domain-job.sh\u0026quot; export createDomainFilesDir=\u0026quot;wlst\u0026quot; export rcuSchemaPrefix=\u0026quot;OIGK8S\u0026quot; export rcuDatabaseURL=\u0026quot;mydatabasehost.example.com:1521/orcl.example.com\u0026quot; export rcuCredentialsSecret=\u0026quot;oig-rcu-credentials\u0026quot; export frontEndHost=\u0026quot;example.com\u0026quot; export frontEndPort=\u0026quot;14100\u0026quot; export datasourceType=\u0026quot;generic\u0026quot; validateWlsDomainName called with governancedomain createFiles - valuesInputFile is create-domain-inputs.yaml createDomainScriptName is create-domain-job.sh Generating output/weblogic-domains/governancedomain/create-domain-job.yaml Generating output/weblogic-domains/governancedomain/delete-domain-job.yaml Generating output/weblogic-domains/governancedomain/domain.yaml Checking to see if the secret governancedomain-domain-credentials exists in namespace oigns configmap/governancedomain-create-fmw-infra-sample-domain-job-cm created Checking the configmap governancedomain-create-fmw-infra-sample-domain-job-cm was created configmap/governancedomain-create-fmw-infra-sample-domain-job-cm labeled Checking if object type job with name governancedomain-create-fmw-infra-sample-domain-job exists No resources found in oigns namespace. Creating the domain by creating the job output/weblogic-domains/governancedomain/create-domain-job.yaml job.batch/governancedomain-create-fmw-infra-sample-domain-job created Waiting for the job to complete... status on iteration 1 of 40 pod governancedomain-create-fmw-infra-sample-domain-job-8cww8 status is Running status on iteration 2 of 40 pod governancedomain-create-fmw-infra-sample-domain-job-8cww8 status is Running status on iteration 3 of 40 pod governancedomain-create-fmw-infra-sample-domain-job-8cww8 status is Running status on iteration 4 of 40 pod governancedomain-create-fmw-infra-sample-domain-job-8cww8 status is Running status on iteration 5 of 40 pod governancedomain-create-fmw-infra-sample-domain-job-8cww8 status is Running status on iteration 6 of 40 pod governancedomain-create-fmw-infra-sample-domain-job-8cww8 status is Running status on iteration 7 of 40 pod governancedomain-create-fmw-infra-sample-domain-job-8cww8 status is Running status on iteration 8 of 40 pod governancedomain-create-fmw-infra-sample-domain-job-8cww8 status is Running status on iteration 9 of 40 pod governancedomain-create-fmw-infra-sample-domain-job-8cww8 status is Running status on iteration 10 of 40 pod governancedomain-create-fmw-infra-sample-domain-job-8cww8 status is Running status on iteration 11 of 40 pod governancedomain-create-fmw-infra-sample-domain-job-8cww8 status is Completed Domain governancedomain was created and will be started by the WebLogic Kubernetes Operator The following files were generated: output/weblogic-domains/governancedomain/create-domain-inputs.yaml output/weblogic-domains/governancedomain/create-domain-job.yaml output/weblogic-domains/governancedomain/domain.yaml sed Completed $ Note: If the create domain script creation fails, refer to the Troubleshooting section.\n  Setting the OIM server memory parameters   Navigate to the /output/weblogic-domains/\u0026lt;domain_uid\u0026gt; directory:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/output/weblogic-domains/\u0026lt;domain_uid\u0026gt; For example:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/output/weblogic-domains/governancedomain   Edit the domain.yaml and locate the section of the file starting with: - clusterName: oim_cluster under governancedomain-oim-cluster. Add the following lines:\nserverPod: env: - name: USER_MEM_ARGS value: \u0026quot;-Djava.security.egd=file:/dev/./urandom -Xms2408m -Xmx8192m resources: limits: cpu: \u0026quot;2\u0026quot; memory: \u0026quot;8Gi\u0026quot; requests: cpu: \u0026quot;1000m\u0026quot; memory: \u0026quot;4Gi\u0026quot;\tThe file should looks as follows:\n... apiVersion: weblogic.oracle/v1 kind: Cluster metadata: name: governancedomain-oim-cluster namespace: oigns spec: clusterName: oim_cluster serverService: precreateService: true replicas: 0 serverPod: env: - name: USER_MEM_ARGS value: \u0026quot;-XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m\u0026quot; resources: limits: cpu: \u0026quot;2\u0026quot; memory: \u0026quot;8Gi\u0026quot; requests: cpu: \u0026quot;1000m\u0026quot; memory: \u0026quot;4Gi\u0026quot; ... Note: The above CPU and memory values are for examples only. For Enterprise Deployments, please review the performance recommendations and sizing requirements in Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster.\nNote: Limits and requests for CPU resources are measured in CPU units. One CPU in Kubernetes is equivalent to 1 vCPU/Core for cloud providers, and 1 hyperthread on bare-metal Intel processors. An \u0026ldquo;m\u0026rdquo; suffix in a CPU attribute indicates ‘milli-CPU’, so 500m is 50% of a CPU. Memory can be expressed in various units, where one Mi is one IEC unit mega-byte (1024^2), and one Gi is one IEC unit giga-byte (1024^3). For more information, see Resource Management for Pods and Containers, Assign Memory Resources to Containers and Pods, and Assign CPU Resources to Containers and Pods.\nNote: The parameters above are also utilized by the Kubernetes Horizontal Pod Autoscaler (HPA). For more details on HPA, see Kubernetes Horizontal Pod Autoscaler.\nNote: If required you can also set the same resources and limits for the governancedomain-soa-cluster.\n  Run the create domain scripts   Create the Kubernetes resource using the following command:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/output/weblogic-domains/\u0026lt;domain_uid\u0026gt; $ kubectl apply -f domain.yaml For example:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/output/weblogic-domains/governancedomain $ kubectl apply -f domain.yaml The output will look similar to the following:\ndomain.weblogic.oracle/governancedomain unchanged cluster.weblogic.oracle/governancedomain-oim-cluster created cluster.weblogic.oracle/governancedomain-soa-cluster created   Run the following command to view the status of the OIG pods:\n$ kubectl get pods -n oigns The output will initially look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-create-fmw-infra-sample-domain-job-8cww8 0/1 Completed 0 27m governancedomain-introspect-domain-job-p4brt 1/1 Running 0 6s helper 1/1 Running 0 3h30m The introspect-domain-job pod will be displayed first. Run the command again after several minutes and check to see that the Administration Server and SOA Server are both started. When started they should have STATUS = Running and READY = 1/1.\nNAME READY STATUS RESTARTS AGE/ governancedomain-adminserver 1/1 Running 0 7m30s governancedomain-create-fmw-infra-sample-domain-job-8cww8 0/1 Completed 0 35m governancedomain-soa-server1 1/1 Running 0 4m helper 1/1 Running 0 3h38m Note: It will take several minutes before all the pods listed above show. When a pod has a STATUS of 0/1 the pod is started but the OIG server associated with it is currently starting. While the pods are starting you can check the startup status in the pod logs, by running the following command:\n$ kubectl logs governancedomain-adminserver -n oigns $ kubectl logs governancedomain-soa-server1 -n oigns   Check the clusters using the following command:\n$ kubectl get cluster -n oigns The output will look similar to the following:\nNAME AGE governancedomain-oim-cluster 9m governancedomain-soa-cluster 9m   Start the OIM server using the following command:\n$ kubectl patch cluster -n \u0026lt;namespace\u0026gt; \u0026lt;OIMClusterName\u0026gt; --type=merge -p '{\u0026quot;spec\u0026quot;:{\u0026quot;replicas\u0026quot;:\u0026lt;initialManagedServerReplicas\u0026gt;}}' For example:\n$ kubectl patch cluster -n oigns governancedomain-oim-cluster --type=merge -p '{\u0026quot;spec\u0026quot;:{\u0026quot;replicas\u0026quot;:1}}' The output will look similar to the following:\ncluster.weblogic.oracle/governancedomain-oim-cluster patched   Run the following command to view the status of the OIG pods:\n$ kubectl get pods -n oigns The output will initially look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 7m30s governancedomain-create-fmw-infra-sample-domain-job-8cww8 0/1 Completed 0 35m governancedomain-oim-server1 1/1 Running 0 4m25s governancedomain-soa-server1 1/1 Running 0 4m helper 1/1 Running 0 3h38m Note: It will take several minutes before the governancedomain-oim-server1 pod has a STATUS of 1/1. While the pod is starting you can check the startup status in the pod log, by running the following command:\n$ kubectl logs governancedomain-oim-server1 -n oigns   Verify the results Verify the domain, pods and services   Verify the domain, servers pods and services are created and in the READY state with a STATUS of 1/1, by running the following command:\n$ kubectl get all,domains -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get all,domains -n oigns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE pod/governancedomain-adminserver 1/1 Running 0 19m30s pod/governancedomain-create-fmw-infra-sample-domain-job-8cww8 0/1 Completed 0 47m pod/governancedomain-oim-server1 1/1 Running 0 16m25s pod/governancedomain-soa-server1 1/1 Running 0 16m pod/helper 1/1 Running 0 3h50m NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/governancedomain-adminserver ClusterIP None \u0026lt;none\u0026gt; 7001/TCP 28m service/governancedomain-cluster-oim-cluster ClusterIP 10.106.198.40 \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 25m service/governancedomain-cluster-soa-cluster ClusterIP 10.102.218.11 \u0026lt;none\u0026gt; 8001/TCP 25m service/governancedomain-oim-server1 ClusterIP None \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 16m24s service/governancedomain-oim-server2 ClusterIP 10.97.32.112 \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 25m service/governancedomain-oim-server3 ClusterIP 10.100.233.109 \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 25m service/governancedomain-oim-server4 ClusterIP 10.96.154.17 \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 25m service/governancedomain-oim-server5 ClusterIP 10.103.222.213 \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 25m service/governancedomain-soa-server1 ClusterIP None \u0026lt;none\u0026gt; 8001/TCP 25m service/governancedomain-soa-server2 ClusterIP 10.104.43.118 \u0026lt;none\u0026gt; 8001/TCP 25m service/governancedomain-soa-server3 ClusterIP 10.110.180.120 \u0026lt;none\u0026gt; 8001/TCP 25m service/governancedomain-soa-server4 ClusterIP 10.99.161.73 \u0026lt;none\u0026gt; 8001/TCP 25m service/governancedomain-soa-server5 ClusterIP 10.97.67.196 \u0026lt;none\u0026gt; 8001/TCP 25m NAME COMPLETIONS DURATION AGE job.batch/governancedomain-create-fmw-infra-sample-domain-job 1/1 3m6s 125m NAME AGE domain.weblogic.oracle/governancedomain 24m NAME AGE cluster.weblogic.oracle/governancedomain-oim-cluster 23m cluster.weblogic.oracle/governancedomain-soa-cluster 23m   The default domain created by the script has the following characteristics:\n An Administration Server named AdminServer listening on port 7001. A configured OIG cluster named oig_cluster of size 5. A configured SOA cluster named soa_cluster of size 5. One started OIG managed Server, named oim_server1, listening on port 14000. One started SOA managed Server, named soa_server1, listening on port 8001. Log files that are located in \u0026lt;persistent_volume\u0026gt;/logs/\u0026lt;domainUID\u0026gt;  Verify the domain   Run the following command to describe the domain:\n$ kubectl describe domain \u0026lt;domain_uid\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe domain governancedomain -n oigns The output will look similar to the following:\nName: governancedomain Namespace: oigns Labels: weblogic.domainUID=governancedomain Annotations: \u0026lt;none\u0026gt; API Version: weblogic.oracle/v9 Kind: Domain Metadata: Creation Timestamp: \u0026lt;DATE\u0026gt; Generation: 1 Managed Fields: API Version: weblogic.oracle/v9 Fields Type: FieldsV1 fieldsV1: f:metadata: f:annotations: .: f:kubectl.kubernetes.io/last-applied-configuration: f:labels: .: f:weblogic.domainUID: f:spec: .: f:adminServer: .: f:adminChannelPortForwardingEnabled: f:serverPod: .: f:env: f:serverStartPolicy: f:clusters: f:dataHome: f:domainHome: f:domainHomeSourceType: f:failureRetryIntervalSeconds: f:failureRetryLimitMinutes: f:httpAccessLogInLogHome: f:image: f:imagePullPolicy: f:imagePullSecrets: f:includeServerOutInPodLog: f:logHome: f:logHomeEnabled: f:logHomeLayout: f:maxClusterConcurrentShutdown: f:maxClusterConcurrentStartup: f:maxClusterUnavailable: f:replicas: f:serverPod: .: f:env: f:volumeMounts: f:volumes: f:serverStartPolicy: f:webLogicCredentialsSecret: .: f:name: Manager: kubectl-client-side-apply Operation: Update Time: \u0026lt;DATE\u0026gt; API Version: weblogic.oracle/v9 Fields Type: FieldsV1 fieldsV1: f:status: .: f:clusters: f:conditions: f:observedGeneration: f:servers: f:startTime: Manager: Kubernetes Java Client Operation: Update Subresource: status Time: \u0026lt;DATE\u0026gt; Resource Version: 1247307 UID: 4933be73-df97-493f-a20c-bf1e24f6b3f2 Spec: Admin Server: Admin Channel Port Forwarding Enabled: true Server Pod: Env: Name: USER_MEM_ARGS Value: -Djava.security.egd=file:/dev/./urandom -Xms512m -Xmx1024m Server Start Policy: IfNeeded Clusters: Name: governancedomain-oim-cluster Name: governancedomain-soa-cluster Data Home: Domain Home: /u01/oracle/user_projects/domains/governancedomain Domain Home Source Type: PersistentVolume Failure Retry Interval Seconds: 120 Failure Retry Limit Minutes: 1440 Http Access Log In Log Home: true Image: container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January'25\u0026gt; Image Pull Policy: IfNotPresent Image Pull Secrets: Name: orclcred Include Server Out In Pod Log: true Log Home: /u01/oracle/user_projects/domains/logs/governancedomain Log Home Enabled: true Log Home Layout: ByServers Max Cluster Concurrent Shutdown: 1 Max Cluster Concurrent Startup: 0 Max Cluster Unavailable: 1 Replicas: 1 Server Pod: Env: Name: JAVA_OPTIONS Value: -Dweblogic.StdoutDebugEnabled=false Name: USER_MEM_ARGS Value: -Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx1024m Volume Mounts: Mount Path: /u01/oracle/user_projects/domains Name: weblogic-domain-storage-volume Volumes: Name: weblogic-domain-storage-volume Persistent Volume Claim: Claim Name: governancedomain-domain-pvc Server Start Policy: IfNeeded Web Logic Credentials Secret: Name: oig-domain-credentials Status: Clusters: Cluster Name: oim_cluster Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Label Selector: weblogic.domainUID=governancedomain,weblogic.clusterName=oim_cluster Maximum Replicas: 5 Minimum Replicas: 0 Observed Generation: 2 Ready Replicas: 1 Replicas: 1 Replicas Goal: 1 Cluster Name: soa_cluster Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Label Selector: weblogic.domainUID=governancedomain,weblogic.clusterName=soa_cluster Maximum Replicas: 5 Minimum Replicas: 0 Observed Generation: 1 Ready Replicas: 1 Replicas: 1 Replicas Goal: 1 Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Observed Generation: 1 Servers: Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: worker-node2 Pod Phase: Running Pod Ready: True Server Name: AdminServer State: RUNNING State Goal: RUNNING Cluster Name: oim_cluster Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: worker-node1 Pod Phase: Running Pod Ready: True Server Name: oim_server1 State: RUNNING State Goal: RUNNING Cluster Name: oim_cluster Server Name: oim_server2 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oim_cluster Server Name: oim_server3 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oim_cluster Server Name: oim_server4 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oim_cluster Server Name: oim_server5 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: soa_cluster Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: worker-node1 Pod Phase: Running Pod Ready: True Server Name: soa_server1 State: RUNNING State Goal: RUNNING Cluster Name: soa_cluster Server Name: soa_server2 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: soa_cluster Server Name: soa_server3 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: soa_cluster Server Name: soa_server4 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: soa_cluster Server Name: soa_server5 State: SHUTDOWN State Goal: SHUTDOWN Start Time: \u0026lt;DATE\u0026gt; Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Created 35m weblogic.operator Domain governancedomain was created. Normal Changed 34m (x1127 over 35m) weblogic.operator Domain governancedomain was changed. Warning Failed 34m (x227 over 35m) weblogic.operator Domain governancedomain failed due to 'Domain validation error': Cluster resource 'governancedomain-oim-cluster' not found in namespace 'oigns' Cluster resource 'governancedomain-soa-cluster' not found in namespace 'oigns'. Update the domain resource to correct the validation error. Warning Unavailable 17m weblogic.operator Domain governancedomain is unavailable: an insufficient number of its servers that are expected to be running are ready.\u0026quot;; Warning Incomplete 17m weblogic.operator Domain governancedomain is incomplete for one or more of the following reasons: there are failures detected, there are pending server shutdowns, or not all servers expected to be running are ready and at their target image, auxiliary images, restart version, and introspect version. Normal Completed 13m (x2 over 26m) weblogic.operator Domain governancedomain is complete because all of the following are true: there is no failure detected, there are no pending server shutdowns, and all servers expected to be running are ready and at their target image, auxiliary images, restart version, and introspect version. Normal Available 13m (x2 over 26m) weblogic.operator Domain governancedomain is available: a sufficient number of its servers have reached the ready state. In the Status section of the output, the available servers and clusters are listed.\n  Verify the pods   Run the following command to see the pods running the servers and which nodes they are running on:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; -o wide For example:\n$ kubectl get pods -n oigns -o wide The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES governancedomain-adminserver 1/1 Running 0 24m 10.244.1.42 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; governancedomain-create-fmw-infra-sample-domain-job-8cww8 0/1 Completed 0 52m 10.244.1.40 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; governancedomain-oim-server1 1/1 Running 0 52m 10.244.1.44 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; governancedomain-soa-server1 1/1 Running 0 21m 10.244.1.43 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; helper 1/1 Running 0 3h55m 10.244.1.39 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; You are now ready to configure an Ingress to direct traffic for your OIG domain as per Configure an ingress for an OIG domain.\n  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/manage-oam-domains/domain-lifecycle/",
	"title": "a. Domain Life Cycle",
	"tags": [],
	"description": "Learn about the domain life cycle of an OAM domain.",
	"content": " View existing OAM servers Starting/Scaling up OAM Managed servers Stopping/Scaling down OAM Managed servers Starting/Scaling up OAM Policy Managed servers Stopping/Scaling down OAM Policy Managed servers Stopping and starting the Administration Server and Managed Servers Domain lifecycle sample scripts  As OAM domains use the WebLogic Kubernetes Operator, domain lifecyle operations are managed using the WebLogic Kubernetes Operator itself.\nThis document shows the basic operations for starting, stopping and scaling servers in the OAM domain.\nFor more detailed information refer to Domain Life Cycle in the WebLogic Kubernetes Operator documentation.\nDo not use the WebLogic Server Administration Console or Oracle Enterprise Manager Console to start or stop servers.\n Note: The instructions below are for starting, stopping, or scaling servers manually. If you wish to use autoscaling, see Kubernetes Horizontal Pod Autoscaler. Please note, if you have enabled autoscaling, it is recommended to delete the autoscaler before running the commands below.\nView existing OAM servers The default OAM deployment starts the Administration Server (AdminServer), one OAM Managed Server (oam_server1) and one OAM Policy Manager server (oam_policy_mgr1).\nThe deployment also creates, but doesn\u0026rsquo;t start, four extra OAM Managed Servers (oam-server2 to oam-server5) and four more OAM Policy Manager servers (oam_policy_mgr2 to oam_policy_mgr5).\nAll these servers are visible in the WebLogic Server Console https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/console by navigating to Domain Structure \u0026gt; oamcluster \u0026gt; Environment \u0026gt; Servers.\nTo view the running servers using kubectl, run the following command:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oamns The output should look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 3h29m accessdomain-oam-policy-mgr1 1/1 Running 0 3h21m accessdomain-oam-server1 1/1 Running 0 3h21m nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 55m Starting/Scaling up OAM Managed Servers The number of OAM Managed Servers running is dependent on the replicas parameter configured for the oam-cluster. To start more OAM Managed Servers perform the following steps:\n  Run the following kubectl command to edit the oam-cluster:\n$ kubectl edit cluster accessdomain-oam-cluster -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl edit cluster accessdomain-oam-cluster -n oamns Note: This opens an edit session for the oam-cluster where parameters can be changed using standard vi commands.\n  In the edit session, search for spec:, and then look for the replicas parameter under clusterName: oam_cluster. By default the replicas parameter is set to \u0026ldquo;1\u0026rdquo; hence one OAM Managed Server is started (oam_server1):\n... spec: clusterName: oam_cluster replicas: 1 serverPod: env: - name: USER_MEM_ARGS value: -XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m ...   To start more OAM Managed Servers, increase the replicas value as desired. In the example below, two more managed servers will be started by setting replicas to \u0026ldquo;3\u0026rdquo;:\n... spec: clusterName: oam_cluster replicas: 3 serverPod: env: - name: USER_MEM_ARGS value: -XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m ...   Save the file and exit (:wq!)\nThe output will look similar to the following:\ncluster.weblogic.oracle/accessdomain-oam-cluster edited   Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 3h33m accessdomain-oam-policy-mgr1 1/1 Running 0 3h25m accessdomain-oam-server1 1/1 Running 0 3h25m accessdomain-oam-server2 0/1 Running 0 3h25m accessdomain-oam-server3 0/1 Pending 0 9s nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 59m Two new pods (accessdomain-oam-server2 and accessdomain-oam-server3) are started, but currently have a READY status of 0/1. This means oam_server2 and oam_server3 are not currently running but are in the process of starting. The servers will take several minutes to start so keep executing the command until READY shows 1/1:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 3h37m accessdomain-oam-policy-mgr1 1/1 Running 0 3h29m accessdomain-oam-server1 1/1 Running 0 3h29m accessdomain-oam-server2 1/1 Running 0 3h29m accessdomain-oam-server3 1/1 Running 0 3m45s nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 63m Note: To check what is happening during server startup when READY is 0/1, run the following command to view the log of the pod that is starting:\n$ kubectl logs \u0026lt;pod\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl logs accessdomain-oam-server3 -n oamns   Stopping/Scaling down OAM Managed Servers As mentioned in the previous section, the number of OAM Managed Servers running is dependent on the replicas parameter configured for the cluster. To stop one or more OAM Managed Servers, perform the following:\n  Run the following kubectl command to edit the oam-cluster:\n$ kubectl edit cluster accessdomain-oam-cluster -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl edit cluster accessdomain-oam-cluster -n oamns   In the edit session, search for spec:, and then look for the replicas parameter under clusterName: oam_cluster. In the example below replicas is set to \u0026ldquo;3\u0026rdquo;, hence three OAM Managed Servers are started (access-domain-oam_server1 - access-domain-oam_server3):\n... spec: clusterName: oam_cluster replicas: 3 serverPod: env: - name: USER_MEM_ARGS value: -XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m ...   To stop OAM Managed Servers, decrease the replicas value as desired. In the example below, we will stop two managed servers by setting replicas to \u0026ldquo;1\u0026rdquo;:\nspec: clusterName: oam_cluster replicas: 1 serverPod: env: - name: USER_MEM_ARGS value: -XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m ...   Save the file and exit (:wq!)\n  Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 3h45m accessdomain-oam-policy-mgr1 1/1 Running 0 3h37m accessdomain-oam-server1 1/1 Running 0 3h37m accessdomain-oam-server2 1/1 Running 0 3h37m accessdomain-oam-server3 1/1 Terminating 0 11m nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 71m One pod now has a STATUS of Terminating (accessdomain-oam-server3). The server will take a minute or two to stop. Once terminated the other pod (accessdomain-oam-server2) will move to Terminating and then stop. Keep executing the command until the pods have disappeared:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 3h48m accessdomain-oam-policy-mgr1 1/1 Running 0 3h40m accessdomain-oam-server1 1/1 Running 0 3h40m nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 74m   Starting/Scaling up OAM Policy Managed Servers The number of OAM Policy Managed Servers running is dependent on the replicas parameter configured for the policy-cluster. To start more OAM Policy Managed Servers perform the following steps:\n  Run the following kubectl command to edit the policy-cluster:\n$ kubectl edit cluster accessdomain-policy-cluster -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl edit cluster accessdomain-policy-cluster -n oamns Note: This opens an edit session for the policy-cluster where parameters can be changed using standard vi commands.\n  In the edit session, search for spec:, and then look for the replicas parameter under clusterName: policy_cluster. By default the replicas parameter is set to \u0026ldquo;1\u0026rdquo; hence one OAM Policy Managed Server is started (oam_policy_mgr1):\n... spec: clusterName: policy_cluster replicas: 1 serverService: precreateService: true ...   To start more OAM Policy Managed Servers, increase the replicas value as desired. In the example below, two more managed servers will be started by setting replicas to \u0026ldquo;3\u0026rdquo;:\n... spec: clusterName: policy_cluster replicas: 3 serverService: precreateService: true ...   Save the file and exit (:wq!)\nThe output will look similar to the following:\ncluster.weblogic.oracle/accessdomain-policy-cluster edited After saving the changes two new pods will be started (accessdomain-oam-policy-mgr2 and accessdomain-oam-policy-mgr3). After a few minutes they will have a READY status of 1/1. In the example below accessdomain-oam-policy-mgr2 and accessdomain-oam-policy-mgr3 are started:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 3h43m accessdomain-oam-policy-mgr1 1/1 Running 0 3h35m accessdomain-oam-policy-mgr2 1/1 Running 0 3h35m accessdomain-oam-policy-mgr3 1/1 Running 0 4m18s accessdomain-oam-server1 1/1 Running 0 3h35m nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 69m   Stopping/Scaling down OAM Policy Managed Servers As mentioned in the previous section, the number of OAM Policy Managed Servers running is dependent on the replicas parameter configured for the cluster. To stop one or more OAM Policy Managed Servers, perform the following:\n  Run the following kubectl command to edit the policy-cluster:\n$ kubectl edit cluster accessdomain-policy-cluster -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl edit cluster accessdomain-policy-cluster -n oamns   In the edit session, search for spec:, and then look for the replicas parameter under clusterName: policy_cluster. To stop OAM Policy Managed Servers, decrease the replicas value as desired. In the example below, we will stop two managed servers by setting replicas to \u0026ldquo;1\u0026rdquo;:\n... spec: clusterName: policy_cluster replicas: 1 serverService: precreateService: true ... After saving the changes one pod will move to a STATUS of Terminating (accessdomain-oam-policy-mgr3).\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 3h49m accessdomain-oam-policy-mgr1 1/1 Running 0 3h41m accessdomain-oam-policy-mgr2 1/1 Running 0 3h41m accessdomain-oam-policy-mgr3 1/1 Terminating 0 10m accessdomain-oam-server1 1/1 Running 0 3h41m nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 75m The pods will take a minute or two to stop, so keep executing the command until the pods has disappeared:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 3h50m accessdomain-oam-policy-mgr1 1/1 Running 0 3h42m accessdomain-oam-server1 1/1 Running 0 3h42m nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 76m   Stopping and Starting the Administration Server and Managed Servers To stop all the OAM Managed Servers and the Administration Server in one operation:\n  Run the following kubectl command to edit the domain:\n$ kubectl edit domain \u0026lt;domain_uid\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl edit domain accessdomain -n oamns   In the edit session, search for serverStartPolicy: IfNeeded under the domain spec:\n... volumeMounts: - mountPath: /u01/oracle/user_projects/domains name: weblogic-domain-storage-volume volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: accessdomain-domain-pvc serverStartPolicy: IfNeeded ...   Change serverStartPolicy: IfNeeded to Never as follows:\n... volumeMounts: - mountPath: /u01/oracle/user_projects/domains name: weblogic-domain-storage-volume volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: accessdomain-domain-pvc serverStartPolicy: Never ...   Save the file and exit (:wq!).\n  Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Terminating 0 3h52m accessdomain-oam-policy-mgr1 1/1 Terminating 0 3h44m accessdomain-oam-server1 1/1 Terminating 0 3h44m nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 78m The Administration Server pods and Managed Server pods will move to a STATUS of Terminating. After a few minutes, run the command again and the pods should have disappeared:\nNAME READY STATUS RESTARTS AGE nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 80m   To start the Administration Server and Managed Servers up again, repeat the previous steps but change serverStartPolicy: Never to IfNeeded as follows:\n... volumeMounts: - mountPath: /u01/oracle/user_projects/domains name: weblogic-domain-storage-volume volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: accessdomain-domain-pvc serverStartPolicy: IfNeeded ...   Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-introspector-jwqxw 1/1 Running 0 10s nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 81m The Administration Server pod will start followed by the OAM Managed Servers pods. This process will take several minutes, so keep executing the command until all the pods are running with READY status 1/1 :\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 10m accessdomain-oam-policy-mgr1 1/1 Running 0 7m35s accessdomain-oam-server1 1/1 Running 0 7m35s nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 92m   Domain lifecycle sample scripts The WebLogic Kubernetes Operator provides sample scripts to start up or shut down a specific Managed Server or cluster in a deployed domain, or the entire deployed domain.\nNote: Prior to running these scripts, you must have previously created and deployed the domain.\nThe scripts are located in the $WORKDIR/kubernetes/domain-lifecycle directory. For more information, see the README.\n"
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/manage-oig-domains/domain-lifecycle/",
	"title": "a. Domain life cycle",
	"tags": [],
	"description": "Learn about the domain lifecycle of an OIG domain.",
	"content": " View existing OIG servers Starting/Scaling up OIG Managed servers Stopping/Scaling down OIG Managed servers Stopping and starting the Administration Server and Managed Servers Domain lifecycle sample scripts  As OIG domains use the WebLogic Kubernetes Operator, domain lifecyle operations are managed using the WebLogic Kubernetes Operator itself.\nThis document shows the basic operations for starting, stopping and scaling servers in the OIG domain.\nFor more detailed information refer to Domain Life Cycle in the WebLogic Kubernetes Operator documentation.\nDo not use the WebLogic Server Administration Console or Oracle Enterprise Manager Console to start or stop servers.\n Note: The instructions below are for starting, stopping, or scaling servers manually. If you wish to use autoscaling, see Kubernetes Horizontal Pod Autoscaler. Please note, if you have enabled autoscaling, it is recommended to delete the autoscaler before running the commands below.\nView existing OIG Servers The default OIG deployment starts the Administration Server (AdminServer), one OIG Managed Server (oim_server1) and one SOA Managed Server (soa_server1).\nThe deployment also creates, but doesn\u0026rsquo;t start, four extra OIG Managed Servers (oim-server2 to oim-server5) and four more SOA Managed Servers (soa_server2 to soa_server5).\nAll these servers are visible in the WebLogic Server Administration Console https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/console by navigating to Domain Structure \u0026gt; governancedomain \u0026gt; Environment \u0026gt; Servers.\nTo view the running servers using kubectl, run the following command:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oigns The output should look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 23h governancedomain-oim-server1 1/1 Running 0 23h governancedomain-soa-server1 1/1 Running 0 23h Starting/Scaling up OIG Managed Servers The number of OIG Managed Servers running is dependent on the replicas parameter configured for the cluster. To start more OIG Managed Servers perform the following steps:\n  Run the following kubectl command to edit the oim_cluster:\n$ kubectl edit cluster \u0026lt;cluster_name\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl edit cluster governancedomain-oim-cluster -n oigns Note: This opens an edit session for the domain where parameters can be changed using standard vi commands.\n  In the edit session, search for spec:, and then look for the replicas parameter under clusterName: oim_cluster. By default the replicas parameter is set to \u0026ldquo;1\u0026rdquo; hence a single OIG Managed Server is started (oim_server1):\nspec: clusterName: oim_cluster replicas: 1 serverPod: env: - name: USER_MEM_ARGS value: -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m ...   To start more OIG Managed Servers, increase the replicas value as desired. In the example below, one more Managed Server will be started by setting replicas to \u0026ldquo;2\u0026rdquo;:\nspec: clusterName: oim_cluster replicas: 2 serverPod: env: - name: USER_MEM_ARGS value: -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m ...   Save the file and exit (:wq)\nThe output will look similar to the following:\ncluster.weblogic.oracle/governancedomain-oim-cluster edited   Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oigns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 23h governancedomain-oim-server1 1/1 Running 0 23h governancedomain-oim-server2 0/1 Running 0 7s governancedomain-soa-server1 1/1 Running 0 23h One new pod (governancedomain-oim-server2) is started, but currently has a READY status of 0/1. This means oim_server2 is not currently running but is in the process of starting. The server will take several minutes to start so keep executing the command until READY shows 1/1:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 23h governancedomain-oim-server1 1/1 Running 0 23h governancedomain-oim-server2 1/1 Running 0 5m27s governancedomain-soa-server1 1/1 Running 0 23h Note: To check what is happening during server startup when READY is 0/1, run the following command to view the log of the pod that is starting:\n$ kubectl logs \u0026lt;pod\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl logs governancedomain-oim-server2 -n oigns   Stopping/Scaling down OIG Managed Servers As mentioned in the previous section, the number of OIG Managed Servers running is dependent on the replicas parameter configured for the cluster. To stop one or more OIG Managed Servers, perform the following:\n  Run the following kubectl command to edit the oim_cluster:\n$ kubectl edit cluster \u0026lt;cluster_name\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl edit cluster governancedomain-oim-cluster -n oigns   In the edit session, search for spec:, and then look for the replicas parameter under clusterName: oim_cluster. In the example below replicas is set to \u0026ldquo;2\u0026rdquo; hence two OIG Managed Servers are started (oim_server1 and oim_server2):\nspec: clusterName: oim_cluster replicas: 2 serverPod: env: - name: USER_MEM_ARGS value: -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m ...   To stop OIG Managed Servers, decrease the replicas value as desired. In the example below, we will stop one Managed Server by setting replicas to \u0026ldquo;1\u0026rdquo;:\nspec: clusterName: oim_cluster replicas: 1 serverPod: env: - name: USER_MEM_ARGS value: -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m ...   Save the file and exit (:wq)\n  Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oigns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 23h governancedomain-oim-server1 1/1 Running 0 23h governancedomain-oim-server2 1/1 Terminating 0 7m30s governancedomain-soa-server1 1/1 Running 0 23h The exiting pod shows a STATUS of Terminating (governancedomain-oim-server2). The server may take a minute or two to stop, so keep executing the command until the pod has disappeared:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 23h governancedomain-oim-server1 1/1 Running 0 23h governancedomain-soa-server1 1/1 Running 0 23h   Stopping and Starting the Administration Server and Managed Servers To stop all the OIG Managed Servers and the Administration Server in one operation:\n  Run the following kubectl command to edit the domain:\n$ kubectl edit domain \u0026lt;domain_uid\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl edit domain governancedomain -n oigns   In the edit session search for serverStartPolicy: IfNeeded under the domain spec:\n... volumeMounts: - mountPath: /u01/oracle/user_projects/domains name: weblogic-domain-storage-volume volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: governancedomain-domain-pvc serverStartPolicy: IfNeeded webLogicCredentialsSecret: name: oig-domain-credentials ...   Change serverStartPolicy: IfNeeded to Never as follows:\n ... volumeMounts: - mountPath: /u01/oracle/user_projects/domains name: weblogic-domain-storage-volume volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: governancedomain-domain-pvc serverStartPolicy: Never webLogicCredentialsSecret: name: oig-domain-credentials ...   Save the file and exit (:wq).\n  Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oigns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Terminating 0 23h governancedomain-oim-server1 1/1 Terminating 0 23h governancedomain-soa-server1 1/1 Terminating 0 23h The AdminServer pod and Managed Server pods will move to a STATUS of Terminating. After a few minutes, run the command again and the pods should have disappeared:\nNo resources found in oigns namespace.   To start the Administration Server and Managed Servers up again, repeat the previous steps but change serverStartPolicy: Never to IfNeeded as follows:\n ... volumeMounts: - mountPath: /u01/oracle/user_projects/domains name: weblogic-domain-storage-volume volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: governancedomain-domain-pvc serverStartPolicy: IfNeeded webLogicCredentialsSecret: name: oig-domain-credentials ...   Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oigns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 0/1 Running 0 4s The Administration Server pod will start followed by the OIG Managed Servers pods. This process will take several minutes, so keep executing the command until all the pods are running with READY status 1/1 :\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 6m57s governancedomain-oim-server1 1/1 Running 0 4m33s governancedomain-soa-server1 1/1 Running 0 4m33s   Domain lifecycle sample scripts The WebLogic Kubernetes Operator provides sample scripts to start up or shut down a specific Managed Server or cluster in a deployed domain, or the entire deployed domain.\nNote: Prior to running these scripts, you must have previously created and deployed the domain.\nThe scripts are located in the $WORKDIR/kubernetes/domain-lifecycle directory. For more information, see the README.\n"
},
{
	"uri": "/fmw-kubernetes/ohs/manage-ohs-containers/domain-lifecycle/",
	"title": "a. Domain Lifecycle",
	"tags": [],
	"description": "Learn about the domain lifecycle of an OHS container.",
	"content": " View existing OHS servers Starting/Scaling up OHS servers Stopping/Scaling down OHS servers  This document shows the basic operations for scaling servers in OHS containers.\nView existing OHS servers The default OHS deployment starts one OHS server (assuming replicas: 1 in ohs.yaml).\nTo view the running OHS servers, run the following command:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods -n ohsns The output should look similar to the following:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-vkp4s 1/1 Running 0 5h17m Starting/Scaling up OHS Servers The number of OHS Servers running is dependent on the replicas parameter configured for OHS.\n  Run the following kubectl command to start additional OHS servers:\n$ kubectl -n \u0026lt;namespace\u0026gt; patch deployment ohs-domain -p \u0026#39;{\u0026#34;spec\u0026#34;: {\u0026#34;replicas\u0026#34;: \u0026lt;replica count\u0026gt;}}\u0026#39; where \u0026lt;replica count\u0026gt; is the number of OHS servers to start.\nIn the example below, two additional OHS servers are started:\n$ kubectl -n ohsns patch deployment ohs-domain -p \u0026#39;{\u0026#34;spec\u0026#34;: {\u0026#34;replicas\u0026#34;: 3}}\u0026#39; The output will look similar to the following:\ndeployment.apps/ohs-domain patched   Whilst the new OHS containers are being started, you can run the following command to monitor the progress:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; -w For example:\n$ kubectl get pods -n ohsns -w The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-2q8bw 0/1 ContainerCreating 0 26s ohs-domain-d5b648bc5-qvdjn 0/1 Running 0 26s ohs-domain-d5b648bc5-vkp4s 1/1 Running 0 5h21m Two new OHS pods have now been created, in this example ohs-domain-d5b648bc5-2q8bw and ohs-domain-d5b648bc5-qvdjn.\n  To check what is happening while the pods are in ContainerCreating status, you can run:\n$ kubectl describe pod \u0026lt;podname\u0026gt; -n \u0026lt;namespace\u0026gt;   To check what is happening while the pods are in 0/1 Running status, you can run:\n$ kubectl logs -f \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt;   Once everything is started you should see all the additional OHS containers are running (READY 1/1):\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-2q8bw 1/1 Running 0 9m34s ohs-domain-d5b648bc5-qvdjn 1/1 Running 0 9m34s ohs-domain-d5b648bc5-vkp4s 1/1 Running 0 5h30m   Stopping/Scaling down OHS Servers As mentioned in the previous section, the number of OHS servers running is dependent on the replicas parameter configured. To stop one or more OHS servers, perform the following steps:\n  Run the following kubectl command to scale down OHS servers:\n$ kubectl -n \u0026lt;namespace\u0026gt; patch deployment ohs-domain -p \u0026#39;{\u0026#34;spec\u0026#34;: {\u0026#34;replicas\u0026#34;: \u0026lt;replica count\u0026gt;}}\u0026#39; where \u0026lt;replica count\u0026gt; is the number of OHS servers you want to run.\nIn the example below, replicas is dropped to 1 so only one OHS is running:\n$ kubectl -n ohsns patch deployment ohs-domain -p \u0026#39;{\u0026#34;spec\u0026#34;: {\u0026#34;replicas\u0026#34;: 1}}\u0026#39; The output will look similar to the following:\ndeployment.apps/ohs-domain patched   Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods -n ohsns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-2q8bw 0/1 Terminating 0 12m ohs-domain-d5b648bc5-qvdjn 0/1 Terminating 0 12m ohs-domain-d5b648bc5-vkp4s 1/1 Running 0 5h31m Two pods now have a STATUS of Terminating. Keep executing the command until the pods have disappeared and you are left with the one OHS pod:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-vkp4s 1/1 Running 0 5h32m   "
},
{
	"uri": "/fmw-kubernetes/idm-products/enterprise-deployments/enterprise-deployment-guide/",
	"title": "a. Enterprise Deployment Guide",
	"tags": [],
	"description": "The Enterprise Deployment Guide shows how to deploy the entire Oracle Identity Management suite in a production environment",
	"content": "Enterprise Deployment Guide The Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster is a step by step guide that describes how to deploy the entire Oracle Identity and Access Management 12.2.1.4 Suite in a production environment. It incorporates best practices learned over many years to ensure that your Identity and Access Management deployment maintains the highest levels of Availability and Security.\nIt includes:\n Preparing your On-premises Kubernetes, or Oracle Cloud Infrastructure Container Engine for Kubernetes (OCI OKE), for an Identity Management (IDM) Deployment. Deploying and configuring Oracle Unified Directory (OUD) seeding data needed by other IDM products. Deploying and Configuring an Ingress Controller. Deploying and Configuring the WebLogic Kubernetes Operator Deploying and Configuring Oracle Access Management (OAM) and integrating with OUD. Deploying and Configuring Oracle Identity Governance (OIG) and integrating with OUD and OAM. Deploying and Configuring Oracle Identity Role Intelligence (OIRI) and integrating with OIG. Deploying and configuring Oracle Advanced Authentication (OAA) and Oracle Adaptive Risk Management (OARM) and integrating with OAM. Deploying and Configuring Monitoring and Centralised logging and configuring IDM to send monitoring and logging information to it.  Additionally, as per Enterprise Deployment Automation, all of the above can be automated using open source scripts.\n"
},
{
	"uri": "/fmw-kubernetes/idm-products/oudsm/patch-and-upgrade/patch-an-oudsm-image/",
	"title": "a. Patch an image",
	"tags": [],
	"description": "Instructions on how to update your OUDSM Kubernetes cluster with a new OUDSM container image.",
	"content": "Introduction In this section the Oracle Unified Directory Services Manager (OUDSM) deployment is updated with a new OUDSM container image.\nNote: If you are not using Oracle Container Registry or your own container registry, then you must first load the new container image on all nodes in your Kubernetes cluster.\nYou can update the deployment with a new OUDSM container image using one of the following methods:\n Using a YAML file Using --set argument  Using a YAML file   Navigate to the $WORKDIR/kubernetes/helm directory:\n$ cd $WORKDIR/kubernetes/helm   Create a oudsm-patch-override.yaml file that contains:\nimage: repository: \u0026lt;image_location\u0026gt; tag: \u0026lt;image_tag\u0026gt; imagePullSecrets: - name: orclcred For example:\nimage: repository: container-registry.oracle.com/middleware/oudsm_cpu tag: 12.2.1.4-jdk8-ol8-\u0026lt;January\u0026#39;25\u0026gt; imagePullSecrets: - name: orclcred The following caveats exist:\n  If you are not using Oracle Container Registry or your own container registry for your oudsm container image, then you can remove the following:\nimagePullSecrets: - name: orclcred     Run the following command to upgrade the deployment:\n$ helm upgrade --namespace \u0026lt;namespace\u0026gt; \\ --values oudsm-patch-override.yaml \\ \u0026lt;release_name\u0026gt; oudsm --reuse-values For example:\n$ helm upgrade --namespace oudsmns \\ --values oudsm-patch-override.yaml \\ oudsm oudsm --reuse-values   Using --set argument   Navigate to the $WORKDIR/kubernetes/helm directory:\n$ cd $WORKDIR/kubernetes/helm   Run the following command to update the deployment with a new OUDSM container image:\n$ helm upgrade --namespace \u0026lt;namespace\u0026gt; \\ --set image.repository=\u0026lt;image_location\u0026gt;,image.tag=\u0026lt;image_tag\u0026gt; \\ --set imagePullSecrets[0].name=\u0026#34;orclcred\u0026#34; \\ \u0026lt;release_name\u0026gt; oudsm --reuse-values For example:\n$ helm upgrade --namespace oudsmns \\ --set image.repository=container-registry.oracle.com/middleware/oudsm_cpu,image.tag=12.2.1.4-jdk8-ol8-\u0026lt;January\u0026#39;25\u0026gt; \\ --set imagePullSecrets[0].name=\u0026#34;orclcred\u0026#34; \\ oudsm oudsm --reuse-values The following caveats exist:\n If you are not using Oracle Container Registry or your own container registry for your OUDSM container image, then you can remove the following: --set imagePullSecrets[0].name=\u0026quot;orclcred\u0026quot;.    Verify the pods   After updating with the new image the pod will restart. Verify the pod is running:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; get pods For example:\n$ kubectl --namespace oudsmns get pods The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oudsm-1 1/1 Running 0 73m 10.244.0.19 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; Note: It will take several minutes before the pod starts. While the oudsm pods have a STATUS of 0/1 the pod is started but the OUDSM server associated with it is currently starting. While the pod is starting you can check the startup status in the pod logs, by running the following command:\n  Verify the pod is using the new image by running the following command:\n$ kubectl describe pod \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe pod oudsm-1 -n oudsmns The output will look similar to the following:\nName: oudsm-1 Namespace: oudsmns Priority: 0 Node: \u0026lt;worker-node\u0026gt;/100.102.48.28 Start Time: \u0026lt;DATE\u0026gt; Labels: app.kubernetes.io/instance=oudsm app.kubernetes.io/managed-by=Helm app.kubernetes.io/name=oudsm app.kubernetes.io/version=12.2.1.4.0 helm.sh/chart=oudsm-0.1 oudsm/instance=oudsm-1 Annotations: meta.helm.sh/release-name: oudsm meta.helm.sh/release-namespace: oudsmns Status: Running IP: 10.244.1.90 etc... Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Killing 22m kubelet Container oudsm definition changed, will be restarted Normal Created 21m (x2 over 61m) kubelet Created container oudsm Normal Pulling 21m kubelet Container image \u0026#34;container-registry.oracle.com/middleware/oudsm_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January\u0026#39;25\u0026gt;\u0026#34; Normal Started 21m (x2 over 61m) kubelet Started container oudsm   "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/post-install-config/set_oimfronendurl_using_mbeans/",
	"title": "a. Post Install Tasks",
	"tags": [],
	"description": "Perform post install tasks.",
	"content": "Follow these post install configuration steps.\n Create a Server Overrides File Set OIMFrontendURL using MBeans  Create a Server Overrides File   Navigate to the following directory:\ncd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/output/weblogic-domains/governancedomain For OIG domains created with WDT:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/ ``\n  Create a setUserOverrides.sh with the following contents:\nDERBY_FLAG=false JAVA_OPTIONS=\u0026quot;${JAVA_OPTIONS} -Djava.net.preferIPv4Stack=true\u0026quot; MEM_ARGS=\u0026quot;-Xms8192m -Xmx8192m\u0026quot;   Copy the setUserOverrides.sh file to the Administration Server pod:\n$ chmod 755 setUserOverrides.sh $ kubectl cp setUserOverrides.sh oigns/governancedomain-adminserver:/u01/oracle/user_projects/domains/governancedomain/bin/setUserOverrides.sh Where oigns is the OIG namespace and governancedomain is the domain_UID.\n  Stop the OIG domain using the following command:\n$ kubectl -n \u0026lt;domain_namespace\u0026gt; patch domains \u0026lt;domain_uid\u0026gt; --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Never\u0026#34; }]\u0026#39; For example:\n$ kubectl -n oigns patch domains governancedomain --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Never\u0026#34; }]\u0026#39; The output will look similar to the following:\ndomain.weblogic.oracle/governancedomain patched   Check that all the pods are stopped:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oigns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Terminating 0 18h governancedomain-oim-server1 1/1 Terminating 0 18h governancedomain-soa-server1 1/1 Terminating 0 18h The Administration Server pods and Managed Server pods will move to a STATUS of Terminating. After a few minutes, run the command again and the pods should have disappeared:\nNo resources found in oigns namespace.   Start the domain using the following command:\n$ kubectl -n \u0026lt;domain_namespace\u0026gt; patch domains \u0026lt;domain_uid\u0026gt; --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;IfNeeded\u0026#34; }]\u0026#39; For example:\n$ kubectl -n oigns patch domains governancedomain --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;IfNeeded\u0026#34; }]\u0026#39; Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oigns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-introspect-domain-job-7qx29 1/1 Running 0 8s The Administration Server pod will start followed by the OIG Managed Servers pods. This process will take several minutes, so keep executing the command until all the pods are running with READY status 1/1:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 6m4s governancedomain-oim-server1 1/1 Running 0 3m5s governancedomain-soa-server1 1/1 Running 0 3m5s   Set OIMFrontendURL using MBeans   Login to Oracle Enterprise Manager using the following URL:\nhttps://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/em\n  Click the Target Navigation icon in the top left of the screen and navigate to the following:\n Expand Identity and Access \u0026gt; Access \u0026gt; OIM \u0026gt; oim Right click the instance oim and select System MBean Browser Under Application Defined MBeans, navigate to oracle.iam, Server:oim_server1 \u0026gt; Application:oim \u0026gt; XMLConfig \u0026gt; Config \u0026gt; XMLConfig.DiscoveryConfig \u0026gt; Discovery.    Enter a new value for the OimFrontEndURL attribute, in the format:\n If using an External LoadBalancer for your ingress: https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT} If using NodePort for your ingress: https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}  If using HTTP instead of HTTPS for your ingress, change the URL appropriately.\nThen click Apply.\n  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/patch-and-upgrade/upgrade-an-operator-release/",
	"title": "a. Upgrade an operator release",
	"tags": [],
	"description": "Instructions on how to update the WebLogic Kubernetes Operator version.",
	"content": "These instructions apply to upgrading operators from 3.X.X to 4.X, or from within the 4.X release family as additional versions are released.\n  On the master node, download the new WebLogic Kubernetes Operator source code from the operator github project:\n$ mkdir \u0026lt;workdir\u0026gt;/weblogic-kubernetes-operator-4.X.X $ cd \u0026lt;workdir\u0026gt;/weblogic-kubernetes-operator-4.X.X $ git clone https://github.com/oracle/weblogic-kubernetes-operator.git --branch v4.X.X For example:\n$ mkdir /scratch/OAMK8S/weblogic-kubernetes-operator-4.X.X $ cd /scratch/OAMK8S/weblogic-kubernetes-operator-4.X.X $ git clone https://github.com/oracle/weblogic-kubernetes-operator.git --branch v4.X.X This will create the directory \u0026lt;workdir\u0026gt;/weblogic-kubernetes-operator-4.X.X/weblogic-kubernetes-operator\n  Run the following helm command to upgrade the operator:\n$ cd \u0026lt;workdir\u0026gt;/weblogic-kubernetes-operator-4.X.X/weblogic-kubernetes-operator $ helm upgrade --reuse-values --set image=ghcr.io/oracle/weblogic-kubernetes-operator:4.X.X --namespace \u0026lt;sample-kubernetes-operator-ns\u0026gt; --wait weblogic-kubernetes-operator kubernetes/charts/weblogic-operator For example:\n$ cd /scratch/OAMK8S/weblogic-kubernetes-operator-4.X.X/weblogic-kubernetes-operator $ helm upgrade --reuse-values --set image=ghcr.io/oracle/weblogic-kubernetes-operator:4.X.X --namespace opns --wait weblogic-kubernetes-operator kubernetes/charts/weblogic-operator The output will look similar to the following:\nRelease \u0026quot;weblogic-kubernetes-operator\u0026quot; has been upgraded. Happy Helming! NAME: weblogic-kubernetes-operator LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: opns STATUS: deployed REVISION: 2 TEST SUITE: None   Verify that the operator\u0026rsquo;s pod and services are running by executing the following command:\n$ kubectl get all -n \u0026lt;sample-kubernetes-operator-ns\u0026gt; For example:\n$ kubectl get all -n opns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE pod/weblogic-operator-b7d6df78c-mfrc4 1/1 Running 0 40s pod/weblogic-operator-webhook-7996b8b58b-frtwp 1/1 Running 0 42s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/weblogic-operator-webhook-svc ClusterIP 10.106.51.57 \u0026lt;none\u0026gt; 8083/TCP,8084/TCP 42s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/weblogic-operator 1/1 1 1 6d deployment.apps/weblogic-operator-webhook 1/1 1 1 42s NAME DESIRED CURRENT READY AGE replicaset.apps/weblogic-operator-5884685f4f 0 0 0 6d replicaset.apps/weblogic-operator-b7d6df78c 1 1 1 40s replicaset.apps/weblogic-operator-webhook-7996b8b58b 1 1 1 42s Note: When you upgrade a 3.x WebLogic Kubernetes Operator to 4.x, the upgrade process creates a WebLogic Domain resource conversion webhook deployment, and associated resources in the same namespace. The webhook automatically and transparently upgrades the existing WebLogic Domains from the 3.x schema to the 4.x schema. For more information, see Domain Upgrade in the WebLogic Kubernetes Operator documentation.\nNote: In WebLogic Kubernetes Operator 4.X, changes are made to serverStartPolicy that affect starting/stopping of the domain. Refer to the serverStartPolicy entry in the create-domain-inputs.yaml for more information. Also see Domain Life Cycle.\n  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/patch-and-upgrade/upgrade-an-operator-release/",
	"title": "a. Upgrade an operator release",
	"tags": [],
	"description": "Instructions on how to update the WebLogic Kubernetes Operator version.",
	"content": "These instructions apply to upgrading operators from 3.X.X to 4.X, or from within the 4.x release family as additional versions are released.\n  On the master node, download the new WebLogic Kubernetes Operator source code from the operator github project:\n$ mkdir \u0026lt;workdir\u0026gt;/weblogic-kubernetes-operator-4.X.X $ cd \u0026lt;workdir\u0026gt;/weblogic-kubernetes-operator-4.X.X $ git clone https://github.com/oracle/weblogic-kubernetes-operator.git --branch v4.X.X For example:\n$ mkdir /scratch/OIGK8S/weblogic-kubernetes-operator-4.X.X $ cd /scratch/OIGK8S/weblogic-kubernetes-operator-4.X.X $ git clone https://github.com/oracle/weblogic-kubernetes-operator.git --branch v4.X.X This will create the directory \u0026lt;workdir\u0026gt;/weblogic-kubernetes-operator-4.X.X/weblogic-kubernetes-operator\n  Run the following helm command to upgrade the operator:\n$ cd \u0026lt;workdir\u0026gt;/weblogic-kubernetes-operator-4.X.X/weblogic-kubernetes-operator $ helm upgrade --reuse-values --set image=ghcr.io/oracle/weblogic-kubernetes-operator:4.X.X --namespace \u0026lt;sample-kubernetes-operator-ns\u0026gt; --wait weblogic-kubernetes-operator kubernetes/charts/weblogic-operator For example:\n$ cd /scratch/OIGK8S/weblogic-kubernetes-operator-4.X.X/weblogic-kubernetes-operator $ helm upgrade --reuse-values --set image=ghcr.io/oracle/weblogic-kubernetes-operator:4.X.X --namespace operator --wait weblogic-kubernetes-operator kubernetes/charts/weblogic-operator The output will look similar to the following:\nRelease \u0026quot;weblogic-kubernetes-operator\u0026quot; has been upgraded. Happy Helming! NAME: weblogic-kubernetes-operator LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: operator STATUS: deployed REVISION: 2 TEST SUITE: None   Verify that the operator\u0026rsquo;s pod and services are running by executing the following command:\n$ kubectl get all -n \u0026lt;sample-kubernetes-operator-ns\u0026gt; For example:\n$ kubectl get all -n opns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE pod/weblogic-operator-b7d6df78c-mfrc4 1/1 Running 0 40s pod/weblogic-operator-webhook-7996b8b58b-frtwp 1/1 Running 0 42s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/weblogic-operator-webhook-svc ClusterIP 10.106.51.57 \u0026lt;none\u0026gt; 8083/TCP,8084/TCP 42s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/weblogic-operator 1/1 1 1 6d deployment.apps/weblogic-operator-webhook 1/1 1 1 42s NAME DESIRED CURRENT READY AGE replicaset.apps/weblogic-operator-5884685f4f 0 0 0 6d replicaset.apps/weblogic-operator-b7d6df78c 1 1 1 40s replicaset.apps/weblogic-operator-webhook-7996b8b58b 1 1 1 42s Note: When you upgrade a 3.x WebLogic Kubernetes Operator to 4.x, the upgrade process creates a WebLogic Domain resource conversion webhook deployment, and associated resources in the same namespace. The webhook automatically and transparently upgrades the existing WebLogic Domains from the 3.x schema to the 4.x schema. For more information, see Domain Upgrade in the WebLogic Kubernetes Operator documentation.\nNote: In WebLogic Kubernetes Operator 4.X, changes are made to serverStartPolicy that affect starting/stopping of the domain. Refer to the serverStartPolicy entry in the create-domain-inputs.yaml for more information. Also see Domain Life Cycle.\n  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/configure-ingress/ingress-nginx-setup-for-oig-domain-setup-on-k8s/",
	"title": "a. Using an Ingress with NGINX (non-SSL)",
	"tags": [],
	"description": "Steps to set up an Ingress for NGINX to direct traffic to the OIG domain (non-SSL).",
	"content": "Setting up an ingress for NGINX for the OIG domain on Kubernetes (non-SSL) The instructions below explain how to set up NGINX as an ingress for the OIG domain with non-SSL termination.\nNote: All the steps below should be performed on the master node.\n  Install NGINX\na. Configure the repository\nb. Create a namespace\nc. Install NGINX using helm\nd. Setup routing rules for the domain\n  Create an ingress for the domain\n  Verify that you can access the domain URL\n  Install NGINX Use helm to install NGINX.\nConfigure the repository   Add the Helm chart repository for NGINX using the following command:\n$ helm repo add stable https://kubernetes.github.io/ingress-nginx The output will look similar to the following:\n\u0026quot;stable\u0026quot; has been added to your repositories   Update the repository using the following command:\n$ helm repo update The output will look similar to the following:\nHang tight while we grab the latest from your chart repositories... ...Successfully got an update from the \u0026quot;stable\u0026quot; chart repository Update Complete. Happy Helming!   Create a namespace   Create a Kubernetes namespace for NGINX by running the following command:\n$ kubectl create namespace nginx The output will look similar to the following:\nnamespace/nginx created   Install NGINX using helm If you can connect directly to the master node IP address from a browser, then install NGINX with the --set controller.service.type=NodePort parameter.\nIf you are using a Managed Service for your Kubernetes cluster,for example Oracle Kubernetes Engine (OKE) on Oracle Cloud Infrastructure (OCI), and connect from a browser to the Load Balancer IP address, then use the --set controller.service.type=LoadBalancer parameter. This instructs the Managed Service to setup a Load Balancer to direct traffic to the NGINX ingress.\n  To install NGINX use the following helm command depending on if you are using NodePort or LoadBalancer:\na) Using NodePort\n$ helm install nginx-ingress -n nginx --set controller.service.type=NodePort --set controller.admissionWebhooks.enabled=false stable/ingress-nginx --version 4.7.2 The output will look similar to the following:\nNAME: nginx-ingress LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: nginx STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The ingress-nginx controller has been installed. Get the application URL by running these commands: export HTTP_NODE_PORT=$(kubectl --namespace nginx get services -o jsonpath=\u0026quot;{.spec.ports[0].nodePort}\u0026quot; nginx-ingress-ingress-nginx-controller) export HTTPS_NODE_PORT=$(kubectl --namespace nginx get services -o jsonpath=\u0026quot;{.spec.ports[1].nodePort}\u0026quot; nginx-ingress-ingress-nginx-controller) export NODE_IP=$(kubectl --namespace nginx get nodes -o jsonpath=\u0026quot;{.items[0].status.addresses[1].address}\u0026quot;) echo \u0026quot;Visit http://$NODE_IP:$HTTP_NODE_PORT to access your application via HTTP.\u0026quot; echo \u0026quot;Visit https://$NODE_IP:$HTTPS_NODE_PORT to access your application via HTTPS.\u0026quot; An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1 kind: Ingress metadata: annotations: kubernetes.io/ingress.class: nginx name: example namespace: foo spec: ingressClassName: example-class rules: - host: www.example.com http: paths: - path: / pathType: Prefix backend: service: name: exampleService port: 80 # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls b) Using LoadBalancer\n$ helm install nginx-ingress -n nginx --set controller.service.type=LoadBalancer --set controller.admissionWebhooks.enabled=false stable/ingress-nginx --version 4.7.2 The output will look similar to the following:\nNAME: nginx-ingress LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: nginx STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The nginx-ingress controller has been installed. It may take a few minutes for the LoadBalancer IP to be available. You can watch the status by running 'kubectl --namespace nginx get services -o wide -w nginx-ingress-controller' An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1 kind: Ingress metadata: annotations: kubernetes.io/ingress.class: nginx name: example namespace: foo spec: ingressClassName: example-class rules: - host: www.example.com http: paths: - path: / pathType: Prefix backend: service: name: exampleService port: 80 # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls   Setup routing rules for the domain   Setup routing rules by running the following commands:\n$ cd $WORKDIR/kubernetes/charts/ingress-per-domain Edit values.yaml and change the domainUID parameter to match your domainUID, for example domainUID: governancedomain. Also change sslType to NONSSL. The file should look as follows:\n# Load balancer type. Supported values are: NGINX type: NGINX # SSL configuration Type. Supported Values are : NONSSL,SSL sslType: NONSSL # domainType. Supported values are: oim domainType: oim #WLS domain as backend to the load balancer wlsDomain: domainUID: governancedomain adminServerName: AdminServer adminServerPort: 7001 adminServerSSLPort: soaClusterName: soa_cluster soaManagedServerPort: 8001 soaManagedServerSSLPort: oimClusterName: oim_cluster oimManagedServerPort: 14000 oimManagedServerSSLPort: # Host specific values hostName: enabled: false admin: runtime: internal: # Ngnix specific values nginx: nginxTimeOut: 180   Create an ingress for the domain   Create an Ingress for the domain (governancedomain-nginx), in the domain namespace by using the sample Helm chart:\n$ cd $WORKDIR $ helm install governancedomain-nginx kubernetes/charts/ingress-per-domain --namespace \u0026lt;namespace\u0026gt; --values kubernetes/charts/ingress-per-domain/values.yaml Note: The \u0026lt;workdir\u0026gt;/kubernetes/charts/ingress-per-domain/templates/nginx-ingress-nonssl.yaml has nginx.ingress.kubernetes.io/enable-access-log set to false. If you want to enable access logs then set this value to true before executing the command. Enabling access-logs can cause issues with disk space if not regularly maintained.\nFor example:\n$ cd $WORKDIR $ helm install governancedomain-nginx kubernetes/charts/ingress-per-domain --namespace oigns --values kubernetes/charts/ingress-per-domain/values.yaml The output will look similar to the following:\n$ helm install governancedomain-nginx kubernetes/charts/ingress-per-domain --namespace oigns --values kubernetes/charts/ingress-per-domain/values.yaml NAME: governancedomain-nginx LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oigns STATUS: deployed REVISION: 1 TEST SUITE: None   Run the following command to show the ingress is created successfully:\n$ kubectl get ing -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get ing -n oigns The output will look similar to the following:\nNAME CLASS HOSTS ADDRESS PORTS AGE governancedomain-nginx \u0026lt;none\u0026gt; * x.x.x.x 80 47s   Find the NodePort of NGINX using the following command (only if you installed NGINX using NodePort):\n$ kubectl get services -n nginx -o jsonpath=”{.spec.ports[0].nodePort}” nginx-ingress-ingress-nginx-controller The output will look similar to the following:\n31530   Run the following command to check the ingress:\n$ kubectl describe ing governancedomain-ingress -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe ing governancedomain-nginx -n oigns The output will look similar to the following:\nName: governancedomain-nginx Namespace: oigns Address: Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) Rules: Host Path Backends ---- ---- -------- * /console governancedomain-adminserver:7001 (10.244.2.50:7001) /consolehelp governancedomain-adminserver:7001 (10.244.2.50:7001) /em governancedomain-adminserver:7001 (10.244.2.50:7001) /ws_utc governancedomain-cluster-soa-cluster:8001 (10.244.2.51:8001) /soa governancedomain-cluster-soa-cluster:8001 (10.244.2.51:8001) /integration governancedomain-cluster-soa-cluster:8001 (10.244.2.51:8001) /soa-infra governancedomain-cluster-soa-cluster:8001 (10.244.2.51:8001) /identity governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /admin governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /oim governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /sysadmin governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /workflowservice governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /callbackResponseService governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /spml-xsd governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /HTTPClnt governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /reqsvc governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /iam governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /provisioning-callback governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /CertificationCallbackService governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /ucs governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /FacadeWebApp governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /OIGUI governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /weblogic governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) Annotations: meta.helm.sh/release-name: governancedomain-nginx meta.helm.sh/release-namespace: oigns nginx.ingress.kubernetes.io/affinity: cookie nginx.ingress.kubernetes.io/affinity-mode: persistent nginx.ingress.kubernetes.io/enable-access-log: false nginx.ingress.kubernetes.io/proxy-read-timeout: 180 nginx.ingress.kubernetes.io/proxy-send-timeout: 180 nginx.ingress.kubernetes.io/session-cookie-name: sticky Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 27s nginx-ingress-controller Scheduled for sync   To confirm that the new ingress is successfully routing to the domain\u0026rsquo;s server pods, run the following command to send a request to the URL for the WebLogic ReadyApp framework:\nNote: If using a load balancer for your ingress replace ${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT} with ${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT}.\n$ curl -v http://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/weblogic/ready For example:\na) For NodePort\n$ curl -v http://masternode.example.com:31530/weblogic/ready b) For LoadBalancer\n$ curl -v http://masternode.example.com:80/weblogic/ready The output will look similar to the following:\n$ curl -v http://masternode.example.com:31530/weblogic/ready * About to connect() to masternode.example.com port 31530 (#0) * Trying X.X.X.X... * Connected to masternode.example.com (X.X.X.X) port 31530 (#0) \u0026gt; GET /weblogic/ready HTTP/1.1 \u0026gt; User-Agent: curl/7.29.0 \u0026gt; Host: masternode.example.com:31530 \u0026gt; Accept: */* \u0026gt; \u0026lt; HTTP/1.1 200 OK \u0026lt; Server: nginx/1.19.2 \u0026lt; Date: \u0026lt;DATE\u0026gt; \u0026lt; Content-Length: 0 \u0026lt; Connection: keep-alive \u0026lt; * Connection #0 to host masternode.example.com left intact   Verify that you can access the domain URL After setting up the NGINX ingress, verify that the domain applications are accessible through the NGINX ingress port (for example 31530) as per Validate Domain URLs \n"
},
{
	"uri": "/fmw-kubernetes/idm-products/oud/manage-oud-containers/logging-and-visualization/",
	"title": "b) Logging and Visualization for Helm Chart oud-ds-rs Deployment",
	"tags": [],
	"description": "Describes the steps for logging and visualization with Elasticsearch and Kibana.",
	"content": " Introduction Install Elasticsearch and Kibana Create a Kubernetes secret Enable Logstash  Upgrade OUD deployment with ELK configuration Verify the pods Troubleshooting   Verify and access the Kibana console  Introduction This section describes how to install and configure logging and visualization for the oud-ds-rs Helm chart deployment.\nThe ELK stack consists of Elasticsearch, Logstash, and Kibana. Using ELK you can gain insights in real-time from the log data from your applications.\n Elasticsearch is a distributed, RESTful search and analytics engine capable of solving a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data so you can discover the expected and uncover the unexpected. Logstash is an open source, server-side data processing pipeline that ingests data from a multitude of sources simultaneously, transforms it, and then sends it to your favorite “stash.” Kibana lets you visualize your Elasticsearch data and navigate the Elastic Stack. It gives you the freedom to select the way you give shape to your data. And you don’t always have to know what you\u0026rsquo;re looking for.  Install Elasticsearch and Kibana If you do not already have a centralized Elasticsearch (ELK) stack then you must configure this first. For details on how to configure the ELK stack, follow Installing Elasticsearch (ELK) Stack and Kibana\nCreate the logstash pod Variables used in this chapter In order to create the logstash pod, you must create a yaml file. This file contains variables which you must substitute with variables applicable to your ELK environment.\nMost of the values for the variables will be based on your ELK deployment as per Installing Elasticsearch (ELK) Stack and Kibana.\nThe table below outlines the variables and values you must set:\n   Variable Sample Value Description     \u0026lt;ELK_VER\u0026gt; 8.3.1 The version of logstash you want to install.   \u0026lt;ELK_SSL\u0026gt; true If SSL is enabled for ELK set the value to true, or if NON-SSL set to false. This value must be lowercase.   \u0026lt;ELK_HOSTS\u0026gt; https://elasticsearch.example.com:9200 The URL for sending logs to Elasticsearch. HTTP if NON-SSL is used.   \u0026lt;ELK_USER\u0026gt; logstash_internal The name of the user for logstash to access Elasticsearch.   \u0026lt;ELK_PASSWORD\u0026gt; password The password for ELK_USER.   \u0026lt;ELK_APIKEY\u0026gt; apikey The API key details.    You will also need the BASE64 version of the Certificate Authority (CA) certificate(s) that signed the certificate of the Elasticsearch server. If using a self-signed certificate, this is the self signed certificate of the Elasticsearch server. See Copying the Elasticsearch Certificate for details on how to get the correct certificate. In the example below the certificate is called elk.crt.\nCreate a kubernetes secret   Create a Kubernetes secret for Elasticsearch using the API Key or Password.\na) If ELK uses an API Key for authentication:\n$ kubectl create secret generic elasticsearch-pw-elastic -n \u0026lt;domain_namespace\u0026gt; --from-literal password=\u0026lt;ELK_APIKEY\u0026gt; For example:\n$ kubectl create secret generic elasticsearch-pw-elastic -n oudns --from-literal password=\u0026lt;ELK_APIKEY\u0026gt; The output will look similar to the following:\nsecret/elasticsearch-pw-elastic created b) If ELK uses a password for authentication:\n$ kubectl create secret generic elasticsearch-pw-elastic -n \u0026lt;domain_namespace\u0026gt; --from-literal password=\u0026lt;ELK_PASSWORD\u0026gt; For example:\n$ kubectl create secret generic elasticsearch-pw-elastic -n oudns --from-literal password=\u0026lt;ELK_PASSWORD\u0026gt; The output will look similar to the following:\nsecret/elasticsearch-pw-elastic created Note: It is recommended that the ELK Stack is created with authentication enabled. If no authentication is enabled you may create a secret using the values above.\n  Check that the dockercred secret that was created previously in Create a Kubernetes secret for cronjob images exists:\n$ kubectl get secret -n \u0026lt;domain_namespace\u0026gt; | grep dockercred For example,\n$ kubectl get secret -n oudns | grep dockercred The output will look similar to the following:\ndockercred kubernetes.io/dockerconfigjson 1 149m If the secret does not exist, create it as per Create a Kubernetes secret for cronjob images.\n  Enable logstash   Navigate to the $WORKDIR/kubernetes/helm directory and create a logging-override-values.yaml file as follows:\nelk: imagePullSecrets: - name: dockercred IntegrationEnabled: true logStashImage: logstash:\u0026lt;ELK_VER\u0026gt; logstashConfigMap: false esindex: oudlogs-00001 sslenabled: \u0026lt;ELK_SSL\u0026gt; eshosts: \u0026lt;ELK_HOSTS\u0026gt; # Note: We need to provide either esuser,espassword or esapikey esuser: \u0026lt;ELK_USER\u0026gt; espassword: elasticsearch-pw-elastic esapikey: elasticsearch-pw-elastic  Change the \u0026lt;ELK_VER\u0026gt;, \u0026lt;ELK_SSL\u0026gt;, \u0026lt;ELK_HOSTS\u0026gt;, and \u0026lt;ELK_USER\u0026gt; to match the values for your environment. If using SSL, replace the elk.crt in $WORKDIR/kubernetes/helm/oud-ds-rs/certs/ with the elk.crt for your ElasticSearch server. If using API KEY for your ELK authentication, leave both esuser: and espassword: with no value. If using a password for ELK authentication, leave esapi_key: but delete elasticsearch-pw-elastic. If no authentication is used for ELK, leave esuser, espassword, and esapi_key with no value assigned. The rest of the lines in the yaml file should not be changed.  For example:\nelk: imagePullSecrets: - name: dockercred IntegrationEnabled: true logStashImage: logstash:8.3.1 logstashConfigMap: false esindex: oudlogs-00001 sslenabled: true eshosts: https://elasticsearch.example.com:9200 # Note: We need to provide either esuser,espassword or esapikey esuser: logstash_internal espassword: elasticsearch-pw-elastic esapikey:   Upgrade OUD deployment with ELK configuration   Run the following command to upgrade the OUD deployment with the ELK configuration:\n$ helm upgrade --namespace \u0026lt;namespace\u0026gt; --values \u0026lt;valuesfile.yaml\u0026gt; \u0026lt;releasename\u0026gt; oud-ds-rs --reuse-values For example:\n$ helm upgrade --namespace oudns --values logging-override-values.yaml oud-ds-rs oud-ds-rs --reuse-values The output should look similar to the following:\nRelease \u0026quot;oud-ds-rs\u0026quot; has been upgraded. Happy Helming! NAME: oud-ds-rs LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oudns STATUS: deployed REVISION: 2 NOTES: # # Copyright (c) 2020, 2022, Oracle and/or its affiliates. # # Licensed under the Universal Permissive License v 1.0 as shown at # https://oss.oracle.com/licenses/upl # # Since \u0026quot;nginx\u0026quot; has been chosen, follow the steps below to configure nginx ingress controller. Add Repo reference to helm for retriving/installing Chart for nginx-ingress implementation. command-# helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx Command helm install to install nginx-ingress related objects like pod, service, deployment, etc. # helm install --namespace \u0026lt;namespace for ingress\u0026gt; --values nginx-ingress-values-override.yaml lbr-nginx ingress-nginx/ingress-nginx For details of content of nginx-ingress-values-override.yaml refer README.md file of this chart. Run these commands to check port mapping and services: # kubectl --namespace \u0026lt;namespace for ingress\u0026gt; get services -o wide -w lbr-nginx-ingress-controller # kubectl describe --namespace \u0026lt;namespace for oud-ds-rs chart\u0026gt; ingress.extensions/oud-ds-rs-http-ingress-nginx # kubectl describe --namespace \u0026lt;namespace for oud-ds-rs chart\u0026gt; ingress.extensions/oud-ds-rs-admin-ingress-nginx Accessible interfaces through ingress: (External IP Address for LoadBalancer NGINX Controller can be determined through details associated with lbr-nginx-ingress-controller) 1. OUD Admin REST: Port: http/https 2. OUD Data REST: Port: http/https 3. OUD Data SCIM: Port: http/https 4. OUD LDAP/LDAPS: Port: ldap/ldaps 5. OUD Admin LDAPS: Port: ldaps Please refer to README.md from Helm Chart to find more details about accessing interfaces and configuration parameters. Accessible interfaces through ingress: 1. OUD Admin REST: Port: http/https 2. OUD Data REST: Port: http/https 3. OUD Data SCIM: Port: http/https Please refer to README.md from Helm Chart to find more details about accessing interfaces and configuration parameters.   Verify the pods Using NFS Storage If you are using OUD with NFS or file system storage, a new logstash pod will be created.\n  Run the following command to check the logstash pod is created correctly:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods -n oudns The output should look similar to the following:\nNAME READY STATUS RESTARTS AGE oud-ds-rs-0 1/1 Running 0 150m oud-ds-rs-1 1/1 Running 0 143m oud-ds-rs-2 1/1 Running 0 137m oud-ds-rs-logstash-5dc8d94597-knk8g 1/1 Running 0 2m12s oud-pod-cron-job-27758370-wpfq7 0/1 Completed 0 66m oud-pod-cron-job-27758400-kd6pn 0/1 Completed 0 36m oud-pod-cron-job-27758430-ndmgj 0/1 Completed 0 6m33s Note: Wait a couple of minutes to make sure the pod has not had any failures or restarts. If the pod fails you can view the pod log using:\n$ kubectl logs -f oud-ds-rs-logstash-\u0026lt;pod\u0026gt; -n oudns See Troubleshooting for further details.\n  With Block Storage If you are using OUD with block devices, the logstash pod will run as a separate sidecar container in the OUD pods.\n  Run the following command to check the sidecar pod is created:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods -n oudns The output should look similar to the following:\nNAME READY STATUS RESTARTS AGE oud-ds-rs-0 2/2 Running 0 24m oud-ds-rs-1 2/2 Running 0 17m oud-ds-rs-2 2/2 Running 0 10m etc.. Notice the pods oud-ds-rs-0 - oud-ds-rs-2 have a READY status of 2/2.\nNote: The pods will terminate one at a time and restart to add the sidecar logstash container. For example oud-ds-rs-2 will terminate and restart. oud-ds-rs1 will not terminate until oud-ds-rs-2 is at 2/2. If any of the pods fail, you can view the pod logs using:\n$ kubectl logs -f oud-ds-rs-\u0026lt;pod\u0026gt; -c oud-ds-rs-logstash -n oudns ``\nSee Troubleshooting for further details.\n  Troubleshooting Most errors occur due to misconfiguration of the logging-override-values.yaml. This is usually because of an incorrect value set, or the certificate was not pasted with the correct indentation.\nIf the pod has errors, view the helm history to find the last working revision, for example:\n$ helm history oud-ds-rs -n oudns The output will look similar to the following:\nREVISION UPDATED STATUS CHART APP VERSION DESCRIPTION 1 \u0026lt;DATE\u0026gt; superseded oud-ds-rs-0.2 12.2.1.4.0 Install complete 2 \u0026lt;DATE\u0026gt; deployed oud-ds-rs-0.2 12.2.1.4.0 Upgrade complete Rollback to the previous working revision by running:\n$ helm rollback \u0026lt;release\u0026gt; \u0026lt;revision\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\nhelm rollback oud-ds-rs 1 -n oudns Once you have resolved the issue in the yaml files, run the helm upgrade command outlined earlier to recreate the logstash pod.\nVerify and access the Kibana console To access the Kibana console you will need the Kibana URL as per Installing Elasticsearch (ELK) Stack and Kibana.\nFor Kibana 7.7.x and below:\n  Access the Kibana console with http://\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;/app/kibana and login with your username and password.\n  From the Navigation menu, navigate to Management \u0026gt; Kibana \u0026gt; Index Patterns.\n  In the Create Index Pattern page enter oudlogs* for the Index pattern and click Next Step.\n  In the Configure settings page, from the Time Filter field name drop down menu select @timestamp and click Create index pattern.\n  Once the index pattern is created click on Discover in the navigation menu to view the OUD logs.\n  For Kibana version 7.8.X and above:\n  Access the Kibana console with http://\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;/app/kibana and login with your username and password.\n  From the Navigation menu, navigate to Management \u0026gt; Stack Management.\n  Click Data Views in the Kibana section.\n  Click Create Data View and enter the following information:\n Name: oudlogs* Timestamp: @timestamp    Click Create Data View.\n  From the Navigation menu, click Discover to view the log file entries.\n  From the drop down menu, select oudlogs* to view the log file entries.\n  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oudsm/manage-oudsm-containers/logging-and-visualization/",
	"title": "b) Logging and Visualization for Helm Chart oudsm Deployment",
	"tags": [],
	"description": "Describes the steps for logging and visualization with Elasticsearch and Kibana.",
	"content": "Introduction This section describes how to install and configure logging and visualization for the oudsm Helm chart deployment.\nThe ELK stack consists of Elasticsearch, Logstash, and Kibana. Using ELK you can gain insights in real-time from the log data from your applications.\n Elasticsearch is a distributed, RESTful search and analytics engine capable of solving a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data so you can discover the expected and uncover the unexpected. Logstash is an open source, server-side data processing pipeline that ingests data from a multitude of sources simultaneously, transforms it, and then sends it to your favorite “stash.” Kibana lets you visualize your Elasticsearch data and navigate the Elastic Stack. It gives you the freedom to select the way you give shape to your data. And you don’t always have to know what you\u0026rsquo;re looking for.  Install Elasticsearch and Kibana If you do not already have a centralized Elasticsearch (ELK) stack then you must configure this first. For details on how to configure the ELK stack, follow Installing Elasticsearch (ELK) Stack and Kibana\nCreate the logstash pod Variables used in this chapter In order to create the logstash pod, you must create a yaml file. This file contains variables which you must substitute with variables applicable to your ELK environment.\nMost of the values for the variables will be based on your ELK deployment as per Installing Elasticsearch (ELK) Stack and Kibana.\nThe table below outlines the variables and values you must set:\n   Variable Sample Value Description     \u0026lt;ELK_VER\u0026gt; 8.3.1 The version of logstash you want to install.   \u0026lt;ELK_SSL\u0026gt; true If SSL is enabled for ELK set the value to true, or if NON-SSL set to false. This value must be lowercase.   \u0026lt;ELK_HOSTS\u0026gt; https://elasticsearch.example.com:9200 The URL for sending logs to Elasticsearch. HTTP if NON-SSL is used.   \u0026lt;ELK_USER\u0026gt; logstash_internal The name of the user for logstash to access Elasticsearch.   \u0026lt;ELK_PASSWORD\u0026gt; password The password for ELK_USER.   \u0026lt;ELK_APIKEY\u0026gt; apikey The API key details.    You will also need the BASE64 version of the Certificate Authority (CA) certificate(s) that signed the certificate of the Elasticsearch server. If using a self-signed certificate, this is the self signed certificate of the Elasticsearch server. See Copying the Elasticsearch Certificate for details on how to get the correct certificate. In the example below the certificate is called elk.crt.\nCreate Kubernetes secrets   Create a Kubernetes secret for Elasticsearch using the API Key or Password.\na) If ELK uses an API Key for authentication:\n$ kubectl create secret generic elasticsearch-pw-elastic -n \u0026lt;domain_namespace\u0026gt; --from-literal password=\u0026lt;ELK_APIKEY\u0026gt; For example:\n$ kubectl create secret generic elasticsearch-pw-elastic -n oudsmns --from-literal password=\u0026lt;ELK_APIKEY\u0026gt; The output will look similar to the following:\nsecret/elasticsearch-pw-elastic created b) If ELK uses a password for authentication:\n$ kubectl create secret generic elasticsearch-pw-elastic -n \u0026lt;domain_namespace\u0026gt; --from-literal password=\u0026lt;ELK_PASSWORD\u0026gt; For example:\n$ kubectl create secret generic elasticsearch-pw-elastic -n oudsmns --from-literal password=\u0026lt;ELK_PASSWORD\u0026gt; The output will look similar to the following:\nsecret/elasticsearch-pw-elastic created Note: It is recommended that the ELK Stack is created with authentication enabled. If no authentication is enabled you may create a secret using the values above.\n  Create a Kubernetes secret to access the required images on hub.docker.com:\nNote: You must first have a user account on hub.docker.com:\n$ kubectl create secret docker-registry \u0026#34;dockercred\u0026#34; --docker-server=\u0026#34;https://index.docker.io/v1/\u0026#34; --docker-username=\u0026#34;\u0026lt;docker_username\u0026gt;\u0026#34; --docker-password=\u0026lt;password\u0026gt; --docker-email=\u0026lt;docker_email_credentials\u0026gt; --namespace=\u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl create secret docker-registry \u0026quot;dockercred\u0026quot; --docker-server=\u0026quot;https://index.docker.io/v1/\u0026quot; --docker-username=\u0026quot;username\u0026quot; --docker-password=\u0026lt;password\u0026gt; --docker-email=user@example.com --namespace=oudsmns The output will look similar to the following:\nsecret/dockercred created   Enable logstash   Navigate to the $WORKDIR/kubernetes/helm directory and create a logging-override-values.yaml file as follows:\nelk: imagePullSecrets: - name: dockercred IntegrationEnabled: true logStashImage: logstash:\u0026lt;ELK_VER\u0026gt; logstashConfigMap: false esindex: oudsmlogs-00001 sslenabled: \u0026lt;ELK_SSL\u0026gt; eshosts: \u0026lt;ELK_HOSTS\u0026gt; # Note: We need to provide either esuser,espassword or esapikey esuser: \u0026lt;ELK_USER\u0026gt; espassword: elasticsearch-pw-elastic esapikey: elasticsearch-pw-elastic  Change the \u0026lt;ELK_VER\u0026gt;, \u0026lt;ELK_SSL\u0026gt;, \u0026lt;ELK_HOSTS\u0026gt;, and \u0026lt;ELK_USER\u0026gt;, to match the values for your environment. If using SSL, replace the elk.crt in $WORKDIR/kubernetes/helm/oudsm/certs/ with the elk.crt for your ElasticSearch server. If using API KEY for your ELK authentication, leave both esuser: and espassword: with no value. If using a password for ELK authentication, leave esapi_key: but delete elasticsearch-pw-elastic. If no authentication is used for ELK, leave esuser, espassword, and esapi_key with no value assigned. The rest of the lines in the yaml file should not be changed.  For example:\nelk: imagePullSecrets: - name: dockercred IntegrationEnabled: true logStashImage: logstash:8.3.1 logstashConfigMap: false esindex: oudsmlogs-00001 sslenabled: true eshosts: https://elasticsearch.example.com:9200 # Note: We need to provide either esuser,espassword or esapikey esuser: logstash_internal espassword: elasticsearch-pw-elastic esapikey:   Upgrade oudsm deployment with ELK configuration   Run the following command to upgrade the oudsm deployment with the ELK configuration:\n$ helm upgrade --namespace \u0026lt;namespace\u0026gt; --values \u0026lt;valuesfile.yaml\u0026gt; \u0026lt;releasename\u0026gt; oudsm --reuse-values For example:\n$ helm upgrade --namespace oudsmns --values logging-override-values.yaml oudsm oudsm --reuse-values The output should look similar to the following:\nRelease \u0026quot;oudsm\u0026quot; has been upgraded. Happy Helming! NAME: oudsm LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oudsmns STATUS: deployed REVISION: 2 TEST SUITE: None   Verify the pods   Run the following command to check the logstash pod is created correctly:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods -n oudsmns The output should look similar to the following:\nNAME READY STATUS RESTARTS AGE oudsm-1 1/1 Running 0 51m oudsm-logstash-56dbcc6d9f-mxsgj 1/1 Running 0 2m7s Note: Wait a couple of minutes to make sure the pod has not had any failures or restarts. If the pod fails you can view the pod log using:\n$ kubectl logs -f oudsm-logstash-\u0026lt;pod\u0026gt; -n oudsmns Most errors occur due to misconfiguration of the logging-override-values.yaml. This is usually because of an incorrect value set, or the certificate was not pasted with the correct indentation.\nIf the pod has errors, view the helm history to find the last working revision, for example:\n$ helm history oudsm -n oudsmns The output will look similar to the following:\nREVISION UPDATED STATUS CHART APP VERSION DESCRIPTION 1 \u0026lt;DATE\u0026gt; superseded oudsm-0.1 12.2.1.4.0 Install complete 2 \u0026lt;DATE\u0026gt; deployed oudsm-0.1 12.2.1.4.0 Upgrade complete Rollback to the previous working revision by running:\n$ helm rollback \u0026lt;release\u0026gt; \u0026lt;revision\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\nhelm rollback oudsm 1 -n oudsmns Once you have resolved the issue in the yaml files, run the helm upgrade command outlined earlier to recreate the logstash pod.\n  Verify and access the Kibana console To access the Kibana console you will need the Kibana URL as per Installing Elasticsearch (ELK) Stack and Kibana.\nFor Kibana 7.7.x and below:\n  Access the Kibana console with http://\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;/app/kibana and login with your username and password.\n  From the Navigation menu, navigate to Management \u0026gt; Kibana \u0026gt; Index Patterns.\n  In the Create Index Pattern page enter oudsmlogs* for the Index pattern and click Next Step.\n  In the Configure settings page, from the Time Filter field name drop down menu select @timestamp and click Create index pattern.\n  Once the index pattern is created click on Discover in the navigation menu to view the OUDSM logs.\n  For Kibana version 7.8.X and above:\n  Access the Kibana console with http://\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;/app/kibana and login with your username and password.\n  From the Navigation menu, navigate to Management \u0026gt; Stack Management.\n  Click Data Views in the Kibana section.\n  Click Create Data View and enter the following information:\n Name: oudsmlogs* Timestamp: @timestamp    Click Create Data View.\n  From the Navigation menu, click Discover to view the log file entries.\n  From the drop down menu, select oudsmlogs* to view the log file entries.\n  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/create-oam-domains/create-oam-domains-using-wdt-models/",
	"title": "b. Create OAM domains using WDT models",
	"tags": [],
	"description": "",
	"content": "  Introduction\n  Prerequisites\n  Create OAM domains using WDT models\na. Prepare the persistent storage\nb. Create Kubernetes secrets for the domain and RCU\nc. Generate WDT models and the domain resource yaml file\nd. Build the Domain Creation Image\ne. Deploy the OAM domain resource\n  Verify the results\na. Verify the domain, pods and services\nb. Verify the domain\nc. Verify the pods\n  Introduction This section demonstrates the creation of an OAM domain home using sample WebLogic Deploy Tooling (WDT) model files.\nFrom WebLogic Kubernetes Operator version 4.1.2 onwards, you can provide a section, domain.spec.configuration.initializeDomainOnPV, to initialize an OAM domain on a persistent volume when it is first deployed. This eliminates the need to pre-create your OAM domain using sample Weblogic Scripting Tool (WLST) offline scripts.\nWith WLST offline scripts it is required to deploy a separate Kubernetes job that creates the domain on a persistent volume, and then deploy the domain with a custom resource YAML. The RCU schema also had to be created manually. Now, using WDT models, all the required information is specified in the domain custom resource YAML file, eliminating the requirement for a separate Kubernetes job. With WDT models, the WebLogic Kubernetes Operator will create the RCU schemas, create the persistent volume and claim, then create the WebLogic domain on the persistent volume, prior to starting the servers.\nNote: This is a one time only initialization. After the domain is created, subsequent updates to this section in the domain resource YAML file will not recreate or update the WebLogic domain. Subsequent domain lifecycle updates must be controlled by the WebLogic Server Administration Console, Enterprise Manager Console, WebLogic Scripting Tool (WLST), or other mechanisms.\nWeblogic Deploy Tooling (WDT) models are a convenient and simple alternative to WebLogic Scripting Tool (WLST) configuration scripts. They compactly define a WebLogic domain using model files, variable properties files, and application archive files. For more information about the model format and its integration, see Usage and Working with WDT Model files. The WDT model format is fully described in the open source, WebLogic Deploy Tooling GitHub project.\nThe main benefits of WDT are:\n A set of single-purpose tools supporting Weblogic domain configuration lifecycle operations. All tools work off of a shared, declarative model, eliminating the need to maintain specialized WLST scripts. WDT knowledge base understands the MBeans, attributes, and WLST capabilities/bugs across WLS versions.  The initializeDomainOnPv section:\n Creates the PersistentVolume (PV) and/or PersistenVolumeClaim (PVC). Creates the RCU schema. Creates the OAM domain home on the persistent volume based on the provided WDT models  Prerequisites Before you begin, perform the following steps:\n Review the Domain On PV documentation. Ensure that the database is up and running.  Create OAM domains using WDT models In this section you will:\n Prepare the persistent storage. Create Kubernetes secrets for the domain and RCU. Generate the WDT models and the domain resource yaml file. Build the domain creation image hosting the WDT models and WDT installation. Deploy the OAM domain resource  Note: In this section a domain creation image is built using the supplied model files and that image is used for domain creation. You will need your own container registry to upload the domain image to. Having your own container repository is a prerequisite before creating an OAM domain with WDT models. If you don\u0026rsquo;t have your own container registry, you can load the image on each node in the cluster instead. This documentation does not explain how to create your own container registry, or how to load the image onto each node. Consult your vendor specific documentation for more information.\nNote: Building a domain creation image is a one time activity. The domain creation image can be used to create an OAM domain in multiple environments. You do not need to rebuild the domain creation image every time you create a domain.\nPrepare the persistent storage As referenced in Prerequisites the nodes in the Kubernetes cluster must have access to a persistent volume such as a Network File System (NFS) mount or a shared file system.\nDomain on persistent volume (Domain on PV) is an operator domain home source type, which requires that the domain home exists on a persistent volume.\nWhen a container is started, it needs to mount that volume. The physical volume should be on a shared disk accessible by all the Kubernetes worker nodes because it is not known on which worker node the container will be started. In the case of Oracle Identity and Access Management, the persistent volume does not get erased when a container stops. This enables persistent configurations.\nThe example below uses an NFS mounted volume (\u0026lt;persistent_volume\u0026gt;/accessdomainpv). Other volume types can also be used. See the official Kubernetes documentation for Volumes.\nNote: The persistent volume directory needs to be accessible to both the master and worker node(s). In this example /scratch/shared/accessdomainpv is accessible from all nodes via NFS.\nTo create the persistent volume run the following commands:\n  Create the required directories:\n$ mkdir -p \u0026lt;persistent_volume\u0026gt;/accessdomainpv $ sudo chown -R 1000:0 \u0026lt;persistent_volume\u0026gt;/accessdomainpv For example:\n$ mkdir -p /scratch/shared/accessdomainpv $ sudo chown -R 1000:0 /scratch/shared/accessdomainpv   On the master node run the following command to ensure it is possible to read and write to the persistent volume:\ncd \u0026lt;persistent_volume\u0026gt;/accessdomainpv touch file.txt ls filemaster.txt For example:\ncd /scratch/shared/accessdomainpv touch filemaster.txt ls filemaster.txt   On the first worker node run the following to ensure it is possible to read and write to the persistent volume:\ncd /scratch/shared/accessdomainpv ls filemaster.txt touch fileworker1.txt ls fileworker1.txt   Repeat the above for any other worker nodes e.g fileworker2.txt etc. Once proven that it’s possible to read and write from each node to the persistent volume, delete the files created.\nFor more information on PV and PVC requirements, see Domain on Persistent Volume (PV).\n  Create Kubernetes secrets for the domain and RCU In this section you create the Kubernetes secrets for the OAM doman and RCU.\n  Create a Kubernetes secret for the domain using the create-weblogic-credentials script in the same Kubernetes namespace as the domain:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils $ ./create-secret.sh -l \u0026#34;username=weblogic\u0026#34; -l \u0026#34;password=\u0026lt;password\u0026gt;\u0026#34; -n \u0026lt;domain_namespace\u0026gt; -d \u0026lt;domain_uid\u0026gt; -s \u0026lt;domain-uid\u0026gt;-weblogic-credentials where:\n-n \u0026lt;domain_namespace\u0026gt; is the domain namespace you created in Create a namespace for Oracle Access Management. For example oamns.\n-d \u0026lt;domain_uid\u0026gt; is the domain UID that you want to create. For example, accessdomain.\n-s \u0026lt;domain-uid\u0026gt;-weblogic-credentials is the name of the secret for this namespace. Note: the secret name must follow this format (\u0026lt;domain-uid\u0026gt;-weblogic-credentials) or domain creation will fail.\nFor example:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils $ ./create-secret.sh -l \u0026#34;username=weblogic\u0026#34; -l \u0026#34;password=\u0026lt;password\u0026gt;\u0026#34; -n oamns -d accessdomain -s accessdomain-weblogic-credentials The output will look similar to the following:\n@@ Info: Setting up secret \u0026#39;accessdomain-weblogic-credentials\u0026#39;. secret/accessdomain-weblogic-credentials created secret/accessdomain-weblogic-credentials labeled   Verify the secret is created using the following command:\n$ kubectl get secret \u0026lt;kubernetes_domain_secret\u0026gt; -o yaml -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get secret accessdomain-weblogic-credentials -o yaml -n oamns apiVersion: v1 data: password: \u0026lt;password\u0026gt; username: d2VibG9naWM= kind: Secret metadata: creationTimestamp: \u0026#34;\u0026lt;DATE\u0026gt;\u0026#34; labels: weblogic.domainUID: accessdomain name: accessdomain-weblogic-credentials namespace: oamns resourceVersion: \u0026#34;44175245\u0026#34; uid: a135780e-6f3b-4be1-8643-f81bfb9ba399 type: Opaque   Create a Kubernetes secret for RCU in the same Kubernetes namespace, using the create-secrets.sh script:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils $ ./create-secret.sh -l \u0026#34;rcu_prefix=\u0026lt;rcu_prefix\u0026gt;\u0026#34; -l \u0026#34;rcu_schema_password=\u0026lt;rcu_schema_pwd\u0026gt;\u0026#34; -l \u0026#34;db_host=\u0026lt;db_host.domain\u0026gt;\u0026#34; -l \u0026#34;db_port=1521\u0026#34; -l \u0026#34;db_service=\u0026lt;service_name\u0026gt;\u0026#34; -l \u0026#34;dba_user=\u0026lt;sys_db_user\u0026gt;\u0026#34; -l \u0026#34;dba_password=\u0026lt;sys_db_pwd\u0026gt;\u0026#34; -n \u0026lt;domain_namespace\u0026gt; -d \u0026lt;domain_uid\u0026gt; -s \u0026lt;domain_uid\u0026gt;-rcu-credentials where\n\u0026lt;rcu_prefix\u0026gt; is the name of the RCU schema to be created.\n\u0026lt;rcu_schema_pwd\u0026gt; is the password you want to create for the RCU schema prefix.\n\u0026lt;db_host.domain\u0026gt; is the hostname.domain of the database.\n\u0026lt;sys_db_user\u0026gt; is the database user with sys dba privilege.\n\u0026lt;sys_db_pwd\u0026gt; is the sys database password.\n\u0026lt;domain_uid\u0026gt; is the domain_uid that you want to create. This must be the same domain_uid used in the domain secret. For example, accessdomain.\n\u0026lt;domain_namespace\u0026gt; is the domain namespace. This the domain namespace you created in Create a namespace for Oracle Access Management. For example oamns.\n\u0026lt;domain_uid\u0026gt;-rcu-credentials is the name of the rcu secret to create. Note: The secret name must follow this format (\u0026lt;domain_uid\u0026gt;-rcu-credentials) or domain creation will fail.\nFor example:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils $ ./create-secret.sh -l \u0026#34;rcu_prefix=OAMK8S\u0026#34; -l \u0026#34;rcu_schema_password=\u0026lt;password\u0026gt;\u0026#34; -l \u0026#34;db_host=mydatabasehost.example.com\u0026#34; -l \u0026#34;db_port=1521\u0026#34; -l \u0026#34;db_service=orcl.example.com\u0026#34; -l \u0026#34;dba_user=sys\u0026#34; -l \u0026#34;dba_password=\u0026lt;password\u0026gt;\u0026#34; -n oamns -d accessdomain -s accessdomain-rcu-credentials The output will look similar to the following:\n@@ Info: Setting up secret \u0026#39;accessdomain-rcu-credentials\u0026#39;. secret/accessdomain-rcu-credentials created secret/accessdomain-rcu-credentials labeled   Verify the secret is created using the following command:\n$ kubectl get secret \u0026lt;kubernetes_rcu_secret\u0026gt; -o yaml -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get secrets -n oamns accessdomain-rcu-credentials -o yaml The output will look similar to the following:\napiVersion: v1 data: db_host: \u0026lt;DB_HOST\u0026gt; db_port: MTUyMQ== db_service: \u0026lt;SERVICE_NAME\u0026gt; dba_password: \u0026lt;PASSWORD\u0026gt; dba_user: c3lz rcu_prefix: \u0026lt;RCU_PREFIX\u0026gt; rcu_schema_password: \u0026lt;RCU_PWD\u0026gt; kind: Secret metadata: creationTimestamp: \u0026#34;\u0026lt;DATE\u0026gt;\u0026#34; labels: weblogic.domainUID: accessdomain name: accessdomain-rcu-credentials namespace: oamns resourceVersion: \u0026#34;866948\u0026#34; uid: b5e3b4e0-9458-4413-a6ff-874e9af7511b type: Opaque   Generate WDT models and the domain resource yaml file In this section you generate the required WDT models for the OAM domain, along with the domain resource yaml file.\n  Navigate to the $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/generate_models_utils directory:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/generate_models_utils   Make a copy of the create-domain-wdt.yaml file:\n$ cp create-domain-wdt.yaml create-domain-wdt.yaml.orig   Edit the create-domain-wdt.yaml and modify the following parameters. Save the file when complete:\ndomainUID: \u0026lt;domain_uid\u0026gt; domainHome: /u01/oracle/user_projects/domains/\u0026lt;domain_uid\u0026gt; image: \u0026lt;image_name\u0026gt;:\u0026lt;tag\u0026gt; imagePullSecretName: \u0026lt;container_registry_secret\u0026gt; logHome: /u01/oracle/user_projects/domains/logs/\u0026lt;domain_uid\u0026gt; namespace: \u0026lt;domain_namespace\u0026gt; weblogicDomainStorageType: NFS weblogicDomainStorageNFSServer: \u0026lt;nfs_server\u0026gt; weblogicDomainStoragePath: \u0026lt;physical_path_of_persistent_storage\u0026gt; weblogicDomainStorageSize: 10G For example:\ndomainUID: accessdomain domainHome: /u01/oracle/user_projects/domains/accessdomain image: container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January'25\u0026gt; imagePullSecretName: orclcred logHome: /u01/oracle/user_projects/domains/logs/accessdomain namespace: oamns weblogicDomainStorageType: NFS weblogicDomainStorageNFSServer: mynfsserver weblogicDomainStoragePath: /scratch/shared/accessdomainpv weblogicDomainStorageSize: 10G ``\nNote : If using a shared file system instead of NFS, set weblogicDomainStorageType: HOST_PATH and remove weblogicDomainStorageNFSServer.\nA full list of parameters in the create-domain-wdt.yaml file are shown below:\n     Parameter Definition Default     adminPort Port number for the Administration Server inside the Kubernetes cluster. 7001   adminNodePort Port number for the Administration Server outside the Kubernetes cluster. 30701   configuredManagedServerCount Number of Managed Server instances to generate for the domain. 5   datasourceType Type of JDBC datasource applicable for the OAM domain. Legal values are agl and generic. Choose agl for Active GridLink datasource and generic for Generic datasource. For enterprise deployments, Oracle recommends that you use GridLink data sources to connect to Oracle RAC databases. See the Enterprise Deployment Guide for further details. generic   domainHome Home directory of the OAM domain. If not specified, the value is derived from the domainUID as /shared/domains/\u0026lt;domainUID\u0026gt;. /u01/oracle/user_projects/domains/accessdomain   domainPVMountPath Mount path of the domain persistent volume. /u01/oracle/user_projects/domains   domainUID Unique ID that will be used to identify this particular domain. Used as the name of the generated WebLogic domain as well as the name of the Kubernetes domain resource. This ID must be unique across all domains in a Kubernetes cluster. This ID cannot contain any character that is not valid in a Kubernetes service name. accessdomain   edgInstall Used only if performing an install using the Enterprise Deployment Guide. See, Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster. false   exposeAdminNodePort Boolean indicating if the Administration Server is exposed outside of the Kubernetes cluster. false   exposeAdminT3Channel Boolean indicating if the T3 administrative channel is exposed outside the Kubernetes cluster. true   image OAM container image. The operator requires OAM 12.2.1.4. Refer to Obtain the OAM container image for details on how to obtain or create the image. For WDT domains you must use April 24 or later. oracle/oam:12.2.1.4.0   imagePullSecretName Name of the Kubernetes secret to access the container registry to pull the OAM container image. The presence of the secret will be validated when this parameter is specified.    initialManagedServerReplicas Number of Managed Servers to initially start for the domain. 2   javaOptions Java options for starting the Administration Server and Managed Servers. A Java option can have references to one or more of the following pre-defined variables to obtain WebLogic domain information: $(DOMAIN_NAME), $(DOMAIN_HOME), $(ADMIN_NAME), $(ADMIN_PORT), and $(SERVER_NAME). -Dweblogic.StdoutDebugEnabled=false   logHome The in-pod location for the domain log, server logs, server out, and Node Manager log files. If not specified, the value is derived from the domainUID as /shared/logs/\u0026lt;domainUID\u0026gt;. /u01/oracle/user_projects/domains/logs/accessdomain   namespace Kubernetes namespace in which to create the domain. oamns   oamCPU Initial CPU Units, 1000m = 1 CPU core. 1000m   oamMaxCPU Initial memory allocated to pod. 2   oamMemory Initial memory allocated to a pod. 4Gi   oamMaxMemory Max memory a pod is allowed to consume. 8Gi   oamServerJavaParams The memory parameters to use for the OAM managed servers. \u0026quot;-Xms8192m -Xmx8192m\u0026quot;   productionModeEnabled Boolean indicating if production mode is enabled for the domain. true   t3PublicAddress Public address for the T3 channel. This should be set to the public address of the Kubernetes cluster. This would typically be a load balancer address. For development environments only: In a single server (all-in-one) Kubernetes deployment, this may be set to the address of the master, or at the very least, it must be set to the address of one of the worker nodes. If not provided, the script will attempt to set it to the IP address of the Kubernetes cluster   weblogicDomainStorageType Persistent volume storage type. Options are NFS for NFS volumes or HOST_PATH for shared file system. NFS   weblogicDomainStorageNFSServer Hostname or IP address of the NFS Server. nfsServer   weblogicDomainStoragePath Physical path to the persistent volume. /scratch/accessdomainpv   weblogicDomainStorageSize Total storage allocated to the persistent storage. 10Gi    Note: The above CPU and memory values are for examples only. For Enterprise Deployments, please review the performance recommendations and sizing requirements in Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster.\n Run the generate_wdt_models.sh, specifying your input file and an output directory to store the generated artifacts:\n $ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/generate_models_utils $ ./generate_wdt_models.sh -i create-domain-wdt.yaml -o \u0026lt;path_to_output_directory\u0026gt; For example:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/generate_models_utils $ ./generate_wdt_models.sh -i create-domain-wdt.yaml -o output The output will look similar to the following:\ninput parameters being used export version=\u0026quot;create-weblogic-sample-domain-inputs-v1\u0026quot; export adminPort=\u0026quot;7001\u0026quot; export domainUID=\u0026quot;accessdomain\u0026quot; export configuredManagedServerCount=\u0026quot;5\u0026quot; export initialManagedServerReplicas=\u0026quot;1\u0026quot; export productionModeEnabled=\u0026quot;true\u0026quot; export t3ChannelPort=\u0026quot;30012\u0026quot; export datasourceType=\u0026quot;generic\u0026quot; export edgInstall=\u0026quot;false\u0026quot; export domainHome=\u0026quot;/u01/oracle/user_projects/domains/accessdomain\u0026quot; export image=\u0026quot;container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January'25\u0026gt;\u0026quot; export imagePullSecretName=\u0026quot;orclcred\u0026quot; export logHome=\u0026quot;/u01/oracle/user_projects/domains/logs/accessdomain\u0026quot; export exposeAdminT3Channel=\u0026quot;false\u0026quot; export adminNodePort=\u0026quot;30701\u0026quot; export exposeAdminNodePort=\u0026quot;false\u0026quot; export namespace=\u0026quot;oamns\u0026quot; javaOptions=-Dweblogic.StdoutDebugEnabled=false export domainPVMountPath=\u0026quot;/u01/oracle/user_projects\u0026quot; export weblogicDomainStorageType=\u0026quot;NFS\u0026quot; export weblogicDomainStorageNFSServer=\u0026quot;mynfsServer\u0026quot; export weblogicDomainStoragePath=\u0026quot;/scratch/shared/accessdomainpv\u0026quot; export weblogicDomainStorageReclaimPolicy=\u0026quot;Retain\u0026quot; export weblogicDomainStorageSize=\u0026quot;10Gi\u0026quot; export oamServerJavaParams=\u0026quot;-Xms8192m -Xmx8192m\u0026quot; export oamMaxCPU=\u0026quot;2\u0026quot; export oamCPU=\u0026quot;1000m\u0026quot; export oamMaxMemory=\u0026quot;8Gi\u0026quot; export oamMemory=\u0026quot;4Gi\u0026quot; validateWlsDomainName called with accessdomain WDT model file, property file and sample domain.yaml are genereted successfully at output/weblogic-domains/accessdomain ``\nThis will generate domain.yaml, oam.yaml and oam.properties in output/weblogic-domains/accessdomain.\n  Copy the generated files to a $WORKDIR/yaml directory:\n $ mkdir $WORKDIR/yaml $ cp output/weblogic-domains/accessdomain/*.* $WORKDIR/yaml ``\n  Build the Domain Creation Image In this section you build a domain creation image to host the WDT model files and WebLogic Deploy Tooling (WDT) installer.\nDomain creation images are used for supplying WDT model files, WDT variables files, WDT application archive files (collectively known as WDT model files), and the directory where the WebLogic Deploy Tooling software is installed (known as the WDT Home), when deploying a domain using a Domain on PV model. You distribute WDT model files and the WDT executable using these images, and the WebLogic Kubernetes Operator uses them to manage the domain.\nNote: These images are only used for creating the domain and will not be used to update the domain. The domain creation image is used for domain creation only, it is not the product container image used for OAM.\nFor more details on creating the domain image, see Domain creation images.\nThe steps to build the domain creation image are shown in the sections below.\nPrerequisites Verify that your environment meets the following prerequisites:\n You have created the yaml files are per Generate WDT models and the domain resource yaml file. You have a container registry available to push the domain creation image to. A container image client on the build machine, such as Docker or Podman.  For Docker, a minimum version of 18.03.1.ce is required. For Podman, a minimum version of 3.0.1 is required.   An installed version of JDK to run Image Tool, version 8+. Proxies are set accordingly at the OS level if required.  Prepare the build domain image script The sample scripts for the Oracle Access Management domain image creation are available at $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image.\n  Navigate to the $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/properties directory:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/properties   Make a copy of the build-domain-creation-image.properties:\n$ cp build-domain-creation-image.properties build-domain-creation-image.properties.orig   Edit the build-domain-creation-image.properties and modify the following parameters. Save the file when complete:\nJAVA_HOME=\u0026lt;Java home location\u0026gt; IMAGE_TAG=\u0026lt;Image tag name\u0026gt; REPOSITORY= \u0026lt;Container image repository to push the image\u0026gt; REG_USER= \u0026lt;Container registry username\u0026gt; IMAGE_PUSH_REQUIRES_AUTH=\u0026lt;Whether image push requires authentication to the registry\u0026gt; WDT_MODEL_FILE=\u0026lt;Full Path to WDT Model file oam.yaml\u0026gt; WDT_VARIABLE_FILE=\u0026lt;Full path to WDT variable file oam.properties\u0026gt; WDT_ARCHIVE_FILE=\u0026lt;Full Path to WDT Archive file\u0026gt; WDT_VERSION=\u0026quot;Version of WebLogic Deploy Tool version to use\u0026quot; WIT_VERSION=\u0026quot;Version of WebLogic Image Tool to use\u0026quot; For example:\nJAVA_HOME=/scratch/jdk IMAGE_TAG=oam-aux-generic-v1 BASE_IMAGE=ghcr.io/oracle/oraclelinux:8-slim REPOSITORY=container-registry.example.com/mytenancy/idm REG_USER=mytenancy/myemail@example.com IMAGE_PUSH_REQUIRES_AUTH=true WDT_MODEL_FILE=\u0026quot;/scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/yaml/oam.yaml\u0026quot; WDT_VARIABLE_FILE=\u0026quot;/scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/oam.properties\u0026quot; WDT_ARCHIVE_FILE=\u0026quot;\u0026quot; WDT_VERSION=\u0026quot;3.5.3\u0026quot; WIT_VERSION=\u0026quot;1.12.1\u0026quot; A full list of parameters and descriptions in the build-domain-creation-image.properties file are shown below:\n     Parameter Definition Default     JAVA_HOME Path to the JAVA_HOME for the JDK8+.    IMAGE_TAG Image tag for the final domain creation image. oam-aux-generic-v1   BASE_IMAGE The Oracle Linux product container image to use as a base image. ghcr.io/oracle/oraclelinux:8-slim   REPOSITORY Container image repository that will host the domain creation image. iad.ocir.io/mytenancy/idm   REG_USER Username to authenticate to the \u0026lt;REGISTRY\u0026gt; and push the domain creation image. mytenancy/oracleidentitycloudservice/myemail@example.com   IMAGE_PUSH_REQUIRES_AUTH If authentication to \u0026lt;REGISTRY\u0026gt; is required then set to true, else set to false. If set to false, \u0026lt;REG_USER\u0026gt; is not required. true   WDT_MODEL_FILE Absolute path to WDT model file oam.yaml. For example $WORKDIR/yaml/oam.yaml.    WDT_MODEL_FILE Absolute path to WDT variable file oam.properties. For example $WORKDIR/yaml/oam.properties.    WDT_ARCHIVE_FILE Absolute path to WDT archive file.    WDT_VERSION WebLogic Deploy Tool version. If not specified the latest available version will be downloaded. It is recommended to use the default value. 3.5.3   WIT_VERSION WebLogic Image Tool Version. If not specified the latest available version will be downloaded. It is recommended to use the default value. 1.12.1   TARGET Select the target environment in which the created image will be used. Supported values: Default or OpenShift. See Additional Information. Default   CHOWN userid:groupid to be used for creating files within the image, such as the WDT installer, WDT model, and WDT archive. If the user or group does not exist in the image, they will be added with useradd/groupadd. oracle:oracle    Note: If IMAGE_PUSH_REQUIRES_AUTH=true, you must edit the $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/properties/.regpassword and change \u0026lt;REGISTRY_PASSWORD\u0026gt; to your registry password:\nREG_PASSWORD=\u0026quot;\u0026lt;REGISTRY_PASSWORD\u0026gt;\u0026quot; Run the build-domain-creation-image script   Execute the build-domain-creation-image.sh by specifying the input properties parameter files:\n $ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image $ ./build-domain-creation-image.sh -i properties/build-domain-creation-image.properties ``\nNote: If using a password file, you must add -p properties/.regpassword to the end of the command.\nExecuting this command will build the image and push it to the container registry.\nNote: You can use the same same domain creation image to create a domain in multiple environments, based on your need. You do not need to rebuild it every time during domain creation. This is a one time activity.\nThe output will look similar to the following:\n  Click here to see example output:   using WDT_DIR: /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir Using WDT_VERSION 3.5.3 Using WIT_DIR /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir Using WIT_VERSION 1.12.1 Using Image tag: oam-aux-generic-v1 using Base Image: ghcr.io/oracle/oraclelinux:8-slim using IMAGE_BUILDER_EXE /usr/bin/podman JAVA_HOME is set to /scratch/jdk @@ Info: WIT_INSTALL_ZIP_URL is '' @@ WIT_INSTALL_ZIP_URL is not set @@ imagetool.sh not found in /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/imagetool/bin. Installing imagetool... @@ Info: Downloading https://github.com/oracle/weblogic-image-tool/releases/download/release-1.12.1/imagetool.zip @@ Info: Downloading https://github.com/oracle/weblogic-image-tool/releases/download/release-1.12.1/imagetool.zip with https_proxy=\u0026quot;http://proxy.example.com:80\u0026quot; @@ Info: Archive downloaded to /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/imagetool.zip, about to unzip via '/home/opc/jdk/bin/jar xf'. @@ Info: imageTool cache does not contain a valid entry for wdt_3.5.3. Installing WDT @@ Info: WDT_INSTALL_ZIP_URL is '' @@ WDT_INSTALL_ZIP_URL is not set @@ Info: Downloading https://github.com/oracle/weblogic-deploy-tooling/releases/download/release-3.5.3/weblogic-deploy.zip @@ Info: Downloading https://github.com/oracle/weblogic-deploy-tooling/releases/download/release-3.5.3/weblogic-deploy.zip with https_proxy=\u0026quot;http://proxy.example.com:80\u0026quot; @@ Info: Archive downloaded to /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/weblogic-deploy.zip [INFO ] Successfully added to cache. wdt_3.5.3=/scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/weblogic-deploy.zip @@ Info: Install succeeded, imagetool install is in the /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/imagetool directory. Starting Building Image registry.example.com/mytenancy/idm:oam-aux-generic-v1 Login Succeeded! WDT_MODEL_FILE is set to /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/yaml/oam.yaml WDT_VARIABLE_FILE is set to /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/yaml/oam.properties Additional Build Commands file is set to /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/additonal-build-files/build-files.txt Additonal Build file is set to /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/additonal-build-files/OAM.json [INFO ] WebLogic Image Tool version 1.12.1 [INFO ] Image Tool build ID: 0c9aa58f-808b-4707-a11a-7766fb301cbb [INFO ] Temporary directory used for image build context: /home/oracle/wlsimgbuilder_temp1198331326550546381 [INFO ] Copying /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/additonal-build-files/OAM.json to build context folder. [INFO ] User specified fromImage ghcr.io/oracle/oraclelinux:8-slim [INFO ] Inspecting ghcr.io/oracle/oraclelinux:8-slim, this may take a few minutes if the image is not available locally. [INFO ] Copying /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/yaml/oam.yaml to build context folder. [INFO ] Copying /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/yaml/oam.properties to build context folder. [INFO ] Copying /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/weblogic-deploy.zip to build context folder. [INFO ] Starting build: /usr/bin/podman build --no-cache --force-rm --tag registry.example.com/mytenancy/idm:oam-aux-generic-v1 --pull --build-arg http_proxy=http://proxy.example.com:80 --build-arg https_proxy=http://proxy.example.com:80 --build-arg no_proxy=localhost,127.0.0.0/8,.example.com,,/var/run/crio/crio.sock,X.X.X.X /home/oracle/wlsimgbuilder_temp1198331326550546381 [1/3] STEP 1/5: FROM ghcr.io/oracle/oraclelinux:8-slim AS os_update [1/3] STEP 2/5: LABEL com.oracle.weblogic.imagetool.buildid=\u0026quot;0c9aa58f-808b-4707-a11a-7766fb301cbb\u0026quot; --\u0026gt; ba91c351bf94 [1/3] STEP 3/5: USER root --\u0026gt; d8f89c65892a [1/3] STEP 4/5: RUN microdnf update \u0026amp;\u0026amp; microdnf install gzip tar unzip libaio libnsl jq findutils diffutils shadow-utils \u0026amp;\u0026amp; microdnf clean all Downloading metadata... Downloading metadata... Package Repository Size Upgrading: libgcc-8.5.0-20.0.3.el8.x86_64 ol8_baseos_latest 93.4 kB replacing libgcc-8.5.0-20.0.2.el8.x86_64 libstdc++-8.5.0-20.0.3.el8.x86_64 ol8_baseos_latest 474.6 kB replacing libstdc++-8.5.0-20.0.2.el8.x86_64 systemd-libs-239-78.0.4.el8.x86_64 ol8_baseos_latest 1.2 MB replacing systemd-libs-239-78.0.3.el8.x86_64 Transaction Summary: Installing: 0 packages Reinstalling: 0 packages Upgrading: 3 packages Obsoleting: 0 packages Removing: 0 packages Downgrading: 0 packages Downloading packages... Running transaction test... Updating: libgcc;8.5.0-20.0.3.el8;x86_64;ol8_baseos_latest Updating: libstdc++;8.5.0-20.0.3.el8;x86_64;ol8_baseos_latest Updating: systemd-libs;239-78.0.4.el8;x86_64;ol8_baseos_latest Cleanup: libstdc++;8.5.0-20.0.2.el8;x86_64;installed Cleanup: systemd-libs;239-78.0.3.el8;x86_64;installed Cleanup: libgcc;8.5.0-20.0.2.el8;x86_64;installed Complete. Package Repository Size Installing: diffutils-3.6-6.el8.x86_64 ol8_baseos_latest 369.3 kB findutils-1:4.6.0-21.el8.x86_64 ol8_baseos_latest 539.8 kB gzip-1.9-13.el8_5.x86_64 ol8_baseos_latest 170.7 kB jq-1.6-7.0.3.el8.x86_64 ol8_appstream 206.5 kB libaio-0.3.112-1.el8.x86_64 ol8_baseos_latest 33.4 kB libnsl-2.28-236.0.1.el8.7.x86_64 ol8_baseos_latest 111.4 kB oniguruma-6.8.2-2.1.el8_9.x86_64 ol8_appstream 191.5 kB unzip-6.0-46.0.1.el8.x86_64 ol8_baseos_latest 201.0 kB Transaction Summary: Installing: 8 packages Reinstalling: 0 packages Upgrading: 0 packages Obsoleting: 0 packages Removing: 0 packages Downgrading: 0 packages Downloading packages... Running transaction test... Installing: oniguruma;6.8.2-2.1.el8_9;x86_64;ol8_appstream Installing: jq;1.6-7.0.3.el8;x86_64;ol8_appstream Installing: unzip;6.0-46.0.1.el8;x86_64;ol8_baseos_latest Installing: libnsl;2.28-236.0.1.el8.7;x86_64;ol8_baseos_latest Installing: libaio;0.3.112-1.el8;x86_64;ol8_baseos_latest Installing: gzip;1.9-13.el8_5;x86_64;ol8_baseos_latest Installing: findutils;1:4.6.0-21.el8;x86_64;ol8_baseos_latest Installing: diffutils;3.6-6.el8;x86_64;ol8_baseos_latest Complete. Complete. --\u0026gt; 73fb79fa40b2 [1/3] STEP 5/5: RUN if [ -z \u0026quot;$(getent group oracle)\u0026quot; ]; then groupadd oracle || exit 1 ; fi \u0026amp;\u0026amp; if [ -z \u0026quot;$(getent group oracle)\u0026quot; ]; then groupadd oracle || exit 1 ; fi \u0026amp;\u0026amp; if [ -z \u0026quot;$(getent passwd oracle)\u0026quot; ]; then useradd -g oracle oracle || exit 1; fi \u0026amp;\u0026amp; mkdir -p /u01 \u0026amp;\u0026amp; chown oracle:oracle /u01 \u0026amp;\u0026amp; chmod 775 /u01 --\u0026gt; ff6cf74351d1 [2/3] STEP 1/4: FROM ff6cf74351d1e0124121321174eaa64ebefa0bc3eef80ec88caec12feb9e8fb3 AS wdt_build [2/3] STEP 2/4: RUN mkdir -p /auxiliary \u0026amp;\u0026amp; mkdir -p /auxiliary/models \u0026amp;\u0026amp; chown oracle:oracle /auxiliary --\u0026gt; a061b678fa0a [2/3] STEP 3/4: COPY --chown=oracle:oracle [\u0026quot;weblogic-deploy.zip\u0026quot;, \u0026quot;/tmp/imagetool/\u0026quot;] --\u0026gt; 3daccfef2f06 [2/3] STEP 4/4: RUN test -d /auxiliary/weblogic-deploy \u0026amp;\u0026amp; rm -rf /auxiliary/weblogic-deploy || echo Initial WDT install \u0026amp;\u0026amp; unzip -q \u0026quot;/tmp/imagetool/weblogic-deploy.zip\u0026quot; -d /auxiliary Initial WDT install --\u0026gt; b77b02f66a83 [3/3] STEP 1/12: FROM ff6cf74351d1e0124121321174eaa64ebefa0bc3eef80ec88caec12feb9e8fb3 AS final [3/3] STEP 2/12: ENV AUXILIARY_IMAGE_PATH=/auxiliary WDT_HOME=/auxiliary WDT_MODEL_HOME=/auxiliary/models --\u0026gt; 10dc1832266f [3/3] STEP 3/12: RUN mkdir -p /auxiliary \u0026amp;\u0026amp; chown oracle:oracle /auxiliary --\u0026gt; 0b85f8e7399a [3/3] STEP 4/12: COPY --from=wdt_build --chown=oracle:oracle /auxiliary /auxiliary/ --\u0026gt; c64bf2bef430 [3/3] STEP 5/12: RUN mkdir -p /auxiliary/models \u0026amp;\u0026amp; chown oracle:oracle /auxiliary/models --\u0026gt; d8817f84ab58 [3/3] STEP 6/12: COPY --chown=oracle:oracle [\u0026quot;oam.yaml\u0026quot;, \u0026quot;/auxiliary/models/\u0026quot;] --\u0026gt; 45b1d25264b9 [3/3] STEP 7/12: COPY --chown=oracle:oracle [\u0026quot;oam.properties\u0026quot;, \u0026quot;/auxiliary/models/\u0026quot;] --\u0026gt; 2ceba77ee226 [3/3] STEP 8/12: RUN chmod -R 640 /auxiliary/models/* --\u0026gt; 34385bac7974 [3/3] STEP 9/12: USER oracle --\u0026gt; 409f6e3ccce4 [3/3] STEP 10/12: WORKDIR /auxiliary --\u0026gt; aaa2f154f512 [3/3] STEP 11/12: COPY --chown=oracle:oracle files/OAM.json /auxiliary/weblogic-deploy/lib/typedefs --\u0026gt; c8a9d29106d3 [3/3] STEP 12/12: RUN chmod -R 755 /auxiliary [3/3] COMMIT registry.example.com/mytenancy/idm:oam-aux-generic-v1 --\u0026gt; 0797418499a1 Successfully tagged registry.example.com/mytenancy/idm:oam-aux-generic-v1 0797418499a1dfd6d2a28672948c17ed747291ad069cebca5fac1b0410978d75 [INFO ] Build successful. Build time=72s. Image tag=registry.example.com/mytenancy/idm:oam-aux-generic-v1 Getting image source signatures Copying blob 462ffb36555c done Copying blob 3db4d3748983 done Copying blob 7e9f3f6c7a0a done Copying blob 32aa5f13e19b done Copying blob d979da323f64 done Copying blob f18b9e5f415f done Copying blob aaaea7c1392f done Copying blob 5504fa641a87 done Copying blob 5aa81493c602 done Copying blob f56f992ba90d done Copying blob 2b1e0644fbd3 done Copying config a39dc6ae7f done Writing manifest to image destination Pushed image registry.example.com/mytenancy/idm/oam-aux-generic-v1 to image registry Docker Hub\t     Deploy the OAM domain resource In this section you modify the OAM domain.yaml and deploy the OAM domain using the build image created.\nModify the OAM domain.yaml In this section you modify the domain.yaml file in preparation for creating the OAM domain.\n  Edit the $WORKDIR/yaml/domain.yaml and update the %DOMAIN_CREATION_IMAGE% with the previously generated image name.\nNote: %DOMAIN_CREATION_IMAGE% takes the format of \u0026lt;REPOSITORY\u0026gt;:\u0026lt;TAG\u0026gt;:\ndomain: # Domain | DomainAndRCU createIfNotExists: DomainAndRCU # Image containing WDT installer and Model files. domainCreationImages: - image: '%DOMAIN_CREATION_IMAGE%' domainType: OAM For example:\ndomain: # Domain | DomainAndRCU createIfNotExists: DomainAndRCU # Image containing WDT installer and Model files. domainCreationImages: - image: 'container-registry.example.com/mytenancy/idm:oam-aux-generic-v1' domainType: OAM   In circumstances where you may be pulling the OAM product container image from Oracle Container Registry, and then the domain image from a private registry, you must first create a secret (privatecred) for the private registry. For example:\n$ kubectl create secret docker-registry \u0026quot;privatecred\u0026quot; --docker-server=container-registry.example.com \\ --docker-username=\u0026quot;user@example.com\u0026quot; \\ --docker-password=password --docker-email=user@example.com \\ --namespace=oamns Then specify both secrets for imagePullSecrets in the domain.yaml. For example:\n ... spec: # The WebLogic Domain Home domainHome: /u01/oracle/user_projects/domains/accessdomain # The domain home source type # Set to PersistentVolume for domain-in-pv, Image for domain-in-image, or FromModel for model-in-image domainHomeSourceType: PersistentVolume # The WebLogic Server image that the Operator uses to start the domain image: \u0026quot;container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January'25\u0026gt;\u0026quot; # imagePullPolicy defaults to \u0026quot;Always\u0026quot; if image version is :latest imagePullPolicy: IfNotPresent imagePullSecrets: - name: orclcred - name: privatecred # Identify which Secret contains the WebLogic Admin credentials ... For more information about the configuration parameters in domain.yaml, see Domain Resources.\n  Click here to see an example domain.yaml:   # Copyright (c) 2024, Oracle and/or its affiliates. # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. # # This is an example of how to define an OAM Domain. For details about the fields in domain specification, refer https://oracle.github.io/weblogic-kubernetes-operator/managing-domains/domain-resource/ # apiVersion: \u0026quot;weblogic.oracle/v9\u0026quot; kind: Domain metadata: name: accessdomain namespace: oamns labels: weblogic.domainUID: accessdomain spec: # The WebLogic Domain Home domainHome: /u01/oracle/user_projects/domains/accessdomain # The domain home source type # Set to PersistentVolume for domain-in-pv, Image for domain-in-image, or FromModel for model-in-image domainHomeSourceType: PersistentVolume # The WebLogic Server image that the Operator uses to start the domain image: \u0026quot;container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January'25\u0026gt;\u0026quot; # imagePullPolicy defaults to \u0026quot;Always\u0026quot; if image version is :latest imagePullPolicy: IfNotPresent # Add additional secret name if you are using a different registry for domain creation image. # Identify which Secret contains the credentials for pulling an image imagePullSecrets: - name: orclcred - name: privatecred # Identify which Secret contains the WebLogic Admin credentials webLogicCredentialsSecret: name: accessdomain-weblogic-credentials # Whether to include the server out file into the pod's stdout, default is true includeServerOutInPodLog: true # Whether to enable log home logHomeEnabled: true # Whether to write HTTP access log file to log home httpAccessLogInLogHome: true # The in-pod location for domain log, server logs, server out, introspector out, and Node Manager log files logHome: /u01/oracle/user_projects/domains/logs/accessdomain # An (optional) in-pod location for data storage of default and custom file stores. # If not specified or the value is either not set or empty (e.g. dataHome: \u0026quot;\u0026quot;) then the # data storage directories are determined from the WebLogic domain home configuration. dataHome: \u0026quot;\u0026quot; # serverStartPolicy legal values are \u0026quot;Never, \u0026quot;IfNeeded\u0026quot;, or \u0026quot;AdminOnly\u0026quot; # This determines which WebLogic Servers the Operator will start up when it discovers this Domain # - \u0026quot;Never\u0026quot; will not start any server in the domain # - \u0026quot;AdminOnly\u0026quot; will start up only the administration server (no managed servers will be started) # - \u0026quot;IfNeeded\u0026quot; will start all non-clustered servers, including the administration server and clustered servers up to the replica count serverStartPolicy: IfNeeded serverPod: initContainers: #DO NOT CHANGE THE NAME OF THIS INIT CONTAINER - name: compat-connector-init # OAM Product image, same as spec.image mentioned above image: \u0026quot;container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January'25\u0026gt;\u0026quot; imagePullPolicy: IfNotPresent command: [ \u0026quot;/bin/bash\u0026quot;, \u0026quot;-c\u0026quot;, \u0026quot;mkdir -p /u01/oracle/user_projects/domains/wdt-logs\u0026quot;] volumeMounts: - mountPath: /u01/oracle/user_projects name: weblogic-domain-storage-volume # a mandatory list of environment variable to be set on the servers env: - name: JAVA_OPTIONS value: -Dweblogic.StdoutDebugEnabled=false - name: USER_MEM_ARGS value: \u0026quot;-Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx1024m \u0026quot; - name: WLSDEPLOY_LOG_DIRECTORY value: \u0026quot;/u01/oracle/user_projects/domains/wdt-logs\u0026quot; - name: WLSDEPLOY_PROPERTIES value: \u0026quot;-Dwdt.config.disable.rcu.drop.schema=true\u0026quot; volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: accessdomain-domain-pvc volumeMounts: - mountPath: /u01/oracle/user_projects name: weblogic-domain-storage-volume # adminServer is used to configure the desired behavior for starting the administration server. adminServer: # adminService: # channels: # The Admin Server's NodePort # - channelName: default # nodePort: 30701 # Uncomment to export the T3Channel as a service # - channelName: T3Channel serverPod: # an (optional) list of environment variable to be set on the admin servers env: - name: USER_MEM_ARGS value: \u0026quot;-Djava.security.egd=file:/dev/./urandom -Xms512m -Xmx1024m \u0026quot; - name: CLASSPATH value: \u0026quot;/u01/oracle/wlserver/server/lib/weblogic.jar\u0026quot; configuration: secrets: [ accessdomain-rcu-credentials ] initializeDomainOnPV: persistentVolume: metadata: name: accessdomain-domain-pv spec: storageClassName: accessdomain-domain-storage-class capacity: # Total storage allocated to the persistent storage. storage: 10Gi # Reclaim policy of the persistent storage # # The valid values are: 'Retain', 'Delete', and 'Recycle' persistentVolumeReclaimPolicy: Retain # Persistent volume type for the persistent storage. # # The value must be 'hostPath' or 'nfs'. # # If using 'nfs', server must be specified. nfs: server: mynfserver # hostPath: path: \u0026quot;/scratch/shared/accessdomainpv\u0026quot; persistentVolumeClaim: metadata: name: accessdomain-domain-pvc spec: storageClassName: accessdomain-domain-storage-class resources: requests: storage: 10Gi volumeName: accessdomain-domain-pv domain: # Domain | DomainAndRCU createIfNotExists: DomainAndRCU # Image containing WDT installer and Model files. domainCreationImages: - image: 'container-registry.example.com/mytenancy/idm:oam-aux-generic-v1' domainType: OAM # References to Cluster resources that describe the lifecycle options for all # the Managed Server members of a WebLogic cluster, including Java # options, environment variables, additional Pod content, and the ability to # explicitly start, stop, or restart cluster members. The Cluster resource # must describe a cluster that already exists in the WebLogic domain # configuration. clusters: - name: accessdomain-oam-cluster - name: accessdomain-policy-cluster # The number of managed servers to start for unlisted clusters # replicas: 1 --- # This is an example of how to define a Cluster resource. apiVersion: weblogic.oracle/v1 kind: Cluster metadata: name: accessdomain-oam-cluster namespace: oamns spec: clusterName: oam_cluster serverService: precreateService: true replicas: 1 serverPod: serverPod: env: - name: USER_MEM_ARGS value: \u0026quot;-XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m \u0026quot; resources: limits: cpu: \u0026quot;2\u0026quot; memory: \u0026quot;8Gi\u0026quot; requests: cpu: \u0026quot;1000m\u0026quot; memory: \u0026quot;4Gi\u0026quot; --- # This is an example of how to define a Cluster resource. apiVersion: weblogic.oracle/v1 kind: Cluster metadata: name: accessdomain-policy-cluster namespace: oamns spec: clusterName: policy_cluster serverService: precreateService: true replicas: 1 ```    Note: By default, WebLogic operator will create the RCU schema using WDT tooling during every domain deployment. If the RCU Schema with the given prefix already exists, and error will be thrown and the domain creation will fail. If you want to delete the schema every time during domain deployment, then can use change the value \u0026quot;-Dwdt.config.disable.rcu.drop.schema=true\u0026quot; to \u0026quot;-Dwdt.config.disable.rcu.drop.schema=false\u0026quot;.\n  Optional WDT Models ConfigMap If required, you can provide a Kubernetes ConfigMap with additional WDT models and WDT variables files as supplements, or overrides, to those in domainCreationImages. For example in the output/weblogic-domains/accessdomain/domain.yaml:\n domain: ... domainCreationImages: ... domainCreationConfigMap: mymodel-domain-configmap The files inside domainCreationConfigMap must have file extensions, .yaml, .properties, or .zip.\n  To create a configmap run the following command:\n $ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils $ ./create-configmap.sh -n oamns -d accessdomain -c mymodel-domain-configmap -f wdt_models/mymodel.yaml   For more information on the usage of additional configuration, see Optional WDT models ConfigMap.\nDeploy the OAM domain In this section you deploy the OAM domain using the domain.yaml.\n  Run the following command to create OAM domain resources:\n$ kubectl create -f $WORKDIR/yaml/domain.yaml The following steps will be performed by WebLogic Kubernetes Operator:\n Run the introspector job. The introspection job will create the RCU Schemas. The introspector job pod will create the domain on PV using the model provided in the domain creation image. The introspector job pod will execute OAM offline configuration actions post successful creation of domain via WDT. Brings up the Administration Server, OAM server (oam_server1), and the OAM Policy Managed Server (oam_policy_mgr1).  The output will look similar to the following:\ndomain.weblogic.oracle/accessdomain created cluster.weblogic.oracle/accessdomain-oam-cluster created cluster.weblogic.oracle/accessdomain-policy-cluster created Whilst the domain creation is running, you can run the following command to monitor the progress:\n$ kubectl get pods -n oamns -w You can also tail the logs for the pods by running:\n$ kubectl logs -f \u0026lt;pod\u0026gt; -n oamns WDT specific logs can be found in \u0026lt;persistent_volume\u0026gt;/domains/wdt-logs.\nOnce everything is started you should see the Administration Server and OAM servers are running:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 11m accessdomain-oam-policy-mgr1 1/1 Running 0 3m53s accessdomain-oam-server1 1/1 Running 0 3m53s   If there are any failures, follow Domain creation failure with WDT models in the Troubleshooting section.\nVerify the results Verify the domain, pods and services   Verify the domain, servers pods and services are created and in the READY state with a STATUS of 1/1, by running the following command:\n$ kubectl get all,domains -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get all,domains -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE pod/accessdomain-adminserver 1/1 Running 0 12m pod/accessdomain-oam-policy-mgr1 1/1 Running 0 4m19s pod/accessdomain-oam-server1 1/1 Running 0 4m19s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/accessdomain-adminserver ClusterIP None \u0026lt;none\u0026gt; 7001/TCP 12m service/accessdomain-cluster-oam-cluster ClusterIP 10.104.17.83 \u0026lt;none\u0026gt; 14100/TCP 4m19s service/accessdomain-cluster-policy-cluster ClusterIP 10.98.157.157 \u0026lt;none\u0026gt; 15100/TCP 4m19s service/accessdomain-oam-policy-mgr1 ClusterIP None \u0026lt;none\u0026gt; 15100/TCP 4m19s service/accessdomain-oam-policy-mgr2 ClusterIP 10.101.141.238 \u0026lt;none\u0026gt; 15100/TCP 4m19s service/accessdomain-oam-policy-mgr3 ClusterIP 10.107.167.143 \u0026lt;none\u0026gt; 15100/TCP 4m19s service/accessdomain-oam-policy-mgr4 ClusterIP 10.106.100.191 \u0026lt;none\u0026gt; 15100/TCP 4m19s service/accessdomain-oam-policy-mgr5 ClusterIP 10.105.5.126 \u0026lt;none\u0026gt; 15100/TCP 4m19s service/accessdomain-oam-server1 ClusterIP None \u0026lt;none\u0026gt; 14100/TCP 4m19s service/accessdomain-oam-server2 ClusterIP 10.98.248.74 \u0026lt;none\u0026gt; 14100/TCP 4m19s service/accessdomain-oam-server3 ClusterIP 10.106.224.54 \u0026lt;none\u0026gt; 14100/TCP 4m19s service/accessdomain-oam-server4 ClusterIP 10.104.241.109 \u0026lt;none\u0026gt; 14100/TCP 4m19s service/accessdomain-oam-server5 ClusterIP 10.96.189.205 \u0026lt;none\u0026gt; 14100/TCP 4m19s NAME AGE domain.weblogic.oracle/accessdomain 18m NAME AGE cluster.weblogic.oracle/accessdomain-oam-cluster 18m cluster.weblogic.oracle/accessdomain-policy-cluster 18m The default domain created by the script has the following characteristics:\n An Administration Server named AdminServer listening on port 7001. A configured OAM cluster named oam_cluster of size 5. A configured Policy cluster named policy_cluster of size 5. One started OAM managed Server, named oam_server1, listening on port 14100. One started Policy managed Server, named oam-policy-mgr1, listening on port 15100. Log files that are located in \u0026lt;persistent_volume\u0026gt;/logs/\u0026lt;domainUID\u0026gt;.    Verify the domain   Run the following command to describe the domain:\n$ kubectl describe domain \u0026lt;domain_uid\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe domain accessdomain -n oamns    Click here to see example output:   Name: accessdomain Namespace: oamns Labels: weblogic.domainUID=accessdomain Annotations: \u0026lt;none\u0026gt; API Version: weblogic.oracle/v9 Kind: Domain Metadata: Creation Timestamp: \u0026lt;DATE\u0026gt; Generation: 1 Managed Fields: API Version: weblogic.oracle/v9 Fields Type: FieldsV1 fieldsV1: f:metadata: f:labels: .: f:weblogic.domainUID: f:spec: .: f:adminServer: .: f:adminChannelPortForwardingEnabled: f:serverPod: .: f:env: f:serverStartPolicy: f:clusters: f:configuration: .: f:initializeDomainOnPV: .: f:domain: .: f:createIfNotExists: f:domainCreationImages: f:domainType: f:persistentVolume: .: f:metadata: .: f:name: f:spec: .: f:capacity: .: f:storage: f:nfs: .: f:path: f:server: f:persistentVolumeReclaimPolicy: f:storageClassName: f:persistentVolumeClaim: .: f:metadata: .: f:name: f:namespace: f:spec: .: f:resources: .: f:requests: .: f:storage: f:storageClassName: f:volumeName: f:overrideDistributionStrategy: f:secrets: f:dataHome: f:domainHome: f:domainHomeSourceType: f:failureRetryIntervalSeconds: f:failureRetryLimitMinutes: f:httpAccessLogInLogHome: f:image: f:imagePullPolicy: f:imagePullSecrets: f:includeServerOutInPodLog: f:logHome: f:logHomeEnabled: f:maxClusterConcurrentShutdown: f:maxClusterConcurrentStartup: f:maxClusterUnavailable: f:replaceVariablesInJavaOptions: f:replicas: f:serverPod: .: f:env: f:initContainers: f:volumeMounts: f:volumes: f:serverStartPolicy: f:webLogicCredentialsSecret: .: f:name: Manager: kubectl-create Operation: Update Time: \u0026lt;DATE\u0026gt; API Version: weblogic.oracle/v9 Fields Type: FieldsV1 fieldsV1: f:status: .: f:clusters: f:conditions: f:observedGeneration: f:servers: f:startTime: Manager: Kubernetes Java Client Operation: Update Subresource: status Time: \u0026lt;DATE\u0026gt; Resource Version: 981416 UID: e42ea8c3-9e23-44b9-bb27-e61040f972f5 Spec: Admin Server: Admin Channel Port Forwarding Enabled: true Server Pod: Env: Name: USER_MEM_ARGS Value: -Djava.security.egd=file:/dev/./urandom -Xms512m -Xmx1024m Name: CLASSPATH Value: /u01/oracle/wlserver/server/lib/weblogic.jar Server Start Policy: IfNeeded Clusters: Name: accessdomain-oam-cluster Name: accessdomain-policy-cluster Configuration: Initialize Domain On PV: Domain: Create If Not Exists: Domain Domain Creation Images: Image: container-registry.example.com/mytenancy/idm:oam-aux-generic-v1 Domain Type: OAM Persistent Volume: Metadata: Name: accessdomain-domain-pv Spec: Capacity: Storage: 10Gi Nfs: Path: /\u0026lt;NFS_PATH\u0026gt;/accessdomainpv Server: \u0026lt;IPADDRESS\u0026gt; Persistent Volume Reclaim Policy: Retain Storage Class Name: accessdomain-domain-storage-class Persistent Volume Claim: Metadata: Name: accessdomain-domain-pvc Namespace: oamns Spec: Resources: Requests: Storage: 10Gi Storage Class Name: accessdomain-domain-storage-class Volume Name: accessdomain-domain-pv Override Distribution Strategy: Dynamic Secrets: accessdomain-rcu-credentials Data Home: Domain Home: /u01/oracle/user_projects/domains/accessdomain Domain Home Source Type: PersistentVolume Failure Retry Interval Seconds: 120 Failure Retry Limit Minutes: 1440 Http Access Log In Log Home: true Image: container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January\u0026#39;25\u0026gt; Image Pull Policy: IfNotPresent Image Pull Secrets: Name: orclcred Include Server Out In Pod Log: true Log Home: /u01/oracle/user_projects/domains/logs/accessdomain Log Home Enabled: true Max Cluster Concurrent Shutdown: 1 Max Cluster Concurrent Startup: 0 Max Cluster Unavailable: 1 Replace Variables In Java Options: false Replicas: 1 Server Pod: Env: Name: JAVA_OPTIONS Value: -Dweblogic.StdoutDebugEnabled=false Name: WLSDEPLOY_LOG_DIRECTORY Value: /u01/oracle/user_projects/domains/wdt-logs Name: USER_MEM_ARGS Value: -Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx1024m Init Containers: Command: /bin/bash -c mkdir -p /u01/oracle/user_projects/domains/wdt-logs Image: container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January\u0026#39;25\u0026gt; Image Pull Policy: IfNotPresent Name: compat-connector-init Volume Mounts: Mount Path: /u01/oracle/user_projects/ Name: weblogic-domain-storage-volume Volume Mounts: Mount Path: /u01/oracle/user_projects Name: weblogic-domain-storage-volume Volumes: Name: weblogic-domain-storage-volume Persistent Volume Claim: Claim Name: accessdomain-domain-pvc Server Start Policy: IfNeeded Web Logic Credentials Secret: Name: accessdomain-weblogic-credentials Status: Clusters: Cluster Name: oam_cluster Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Label Selector: weblogic.domainUID=accessdomain,weblogic.clusterName=oam_cluster Maximum Replicas: 5 Minimum Replicas: 0 Observed Generation: 1 Ready Replicas: 1 Replicas: 1 Replicas Goal: 1 Cluster Name: policy_cluster Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Label Selector: weblogic.domainUID=accessdomain,weblogic.clusterName=policy_cluster Maximum Replicas: 5 Minimum Replicas: 0 Observed Generation: 1 Ready Replicas: 1 Replicas: 1 Replicas Goal: 1 Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Observed Generation: 1 Servers: Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: worker-node2 Pod Phase: Running Pod Ready: True Server Name: AdminServer State: RUNNING State Goal: RUNNING Cluster Name: oam_cluster Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: worker-node1 Pod Phase: Running Pod Ready: True Server Name: oam_server1 State: RUNNING State Goal: RUNNING Cluster Name: oam_cluster Server Name: oam_server2 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oam_cluster Server Name: oam_server3 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oam_cluster Server Name: oam_server4 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oam_cluster Server Name: oam_server5 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: policy_cluster Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: worker-node1 Pod Phase: Running Pod Ready: True Server Name: oam_policy_mgr1 State: RUNNING State Goal: RUNNING Cluster Name: policy_cluster Server Name: oam_policy_mgr2 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: policy_cluster Server Name: oam_policy_mgr3 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: policy_cluster Server Name: oam_policy_mgr4 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: policy_cluster Server Name: oam_policy_mgr5 State: SHUTDOWN State Goal: SHUTDOWN Start Time: \u0026lt;DATE\u0026gt; Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Created 19m weblogic.operator Domain accessdomain was created. Warning Failed 19m weblogic.operator Domain accessdomain failed due to \u0026#39;Persistent volume claim unbound\u0026#39;: PersistentVolumeClaim \u0026#39;accessdomain-domain-pvc\u0026#39; is not bound; the status phase is \u0026#39;Pending\u0026#39;.. Operator is waiting for the persistent volume claim to be bound, it may be a temporary condition. If this condition persists, then ensure that the PVC has a correct volume name or storage class name and is in bound status.. Normal PersistentVolumeClaimBound 19m weblogic.operator The persistent volume claim is bound and ready. Normal Available 3m19s weblogic.operator Domain accessdomain is available: a sufficient number of its servers have reached the ready state. Normal Completed 3m19s weblogic.operator Domain accessdomain is complete because all of the following are true: there is no failure detected, there are no pending server shutdowns, and all servers expected to be running are ready and at their target image, auxiliary images, restart version, and introspect version.      Verify the pods   Run the following command to see the pods running the servers and which nodes they are running on:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; -o wide For example:\n$ kubectl get pods -n oamns -o wide The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES accessdomain-adminserver 1/1 Running 0 24m 10.244.2.14 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; accessdomain-oam-policy-mgr1 1/1 Running 0 16m 10.244.1.23 worker-node1 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; accessdomain-oam-server1 1/1 Running 0 16m 10.244.1.24 worker-node1 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt;   You are now ready to configure an Ingress to direct traffic for your OAM domain as per Configure an ingress For an OAM Domain.\n"
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/create-oig-domains/create-oig-domains-wdt/",
	"title": "b. Create OIG domains using WDT Models",
	"tags": [],
	"description": "",
	"content": "  Introduction\n  Prerequisites\n  Create OIG domains using WDT models\na. Prepare the persistent storage\nb. Create Kubernetes secrets for the domain and RCU\nc. Generate WDT models and the domain resource yaml file\nd. Build the Domain Creation Image\ne. Deploy the OIG domain resource\n  Verify the results\na. Verify the domain, pods and services\nb. Verify the domain\nc. Verify the pods\n  Introduction This section demonstrates the creation of an OIG 12.2.1.4 domain home using sample WebLogic Deploy Tooling (WDT) model files.\nFrom WebLogic Kubernetes Operator version 4.1.2 onwards, you can provide a section, domain.spec.configuration.initializeDomainOnPV, to automatically initialize an OIG domain on a persistent volume when it is first deployed. This eliminates the need to pre-create your OIG domain using sample WebLogic Scripting Tool (WLST) offline scripts.\nWith WLST offline scripts it is required to deploy a separate Kubernetes job that creates the domain on a persistent volume, and then deploy the domain with a custom resource YAML. The RCU schema also had to be created and patched manually beforehand. Now, starting from Apr'24 release onwards, using WDT models, all the required information is specified in the domain custom resource YAML file, eliminating the requirement for running a separate Kubernetes job. With WDT models, the WebLogic Kubernetes Operator will create the PersistentVolume (PV) and PersistenVolumeClaim (PVC), create the RCU schemas and patch them, then create the OIG domain on the persistent volume, prior to starting the servers.\nNote: This is a one time only initialization. After the domain is created, subsequent updates to this section in the domain resource YAML file will not recreate or update the WebLogic domain. Subsequent domain lifecycle updates must be controlled by the WebLogic Server Administration Console, Enterprise Manager Console, WebLogic Scripting Tool (WLST), or other mechanisms.\nWebLogic Deploy Tooling (WDT) models are a convenient and simple alternative to WebLogic Scripting Tool (WLST) configuration scripts. They compactly define a WebLogic domain using model files, variable properties files, and application archive files. For more information about the model format and its integration, see Usage and Working with WDT Model files. The WDT model format is fully described in the open source, WebLogic Deploy Tooling GitHub project.\nThe main benefits of WDT are:\n A set of single-purpose tools supporting WebLogic domain configuration lifecycle operations. All tools work off of a shared, declarative model, eliminating the need to maintain specialized WLST scripts. WDT knowledge base understands the MBeans, attributes, and WLST capabilities/bugs across WLS versions.  The initializeDomainOnPv section:\n Creates the PersistentVolume (PV) and/or PersistenVolumeClaim (PVC). Creates and patches the RCU schema. Creates the OIG domain home on the persistent volume based on the provided WDT models  Prerequisites Before you begin, perform the following steps:\n Review the Domain On PV documentation. Ensure that the database is up and running.  Create OIG domains using WDT models In this section you will:\n Prepare the persistent storage. Create Kubernetes secrets for the domain and RCU. Generate WDT models and the domain resource yaml file. Build the domain creation image hosting the WDT models and WDT installation. Deploy the OIG domain resource.  Note: In this section a domain creation image is built using the supplied model files and that image is used for domain creation. You will need your own container registry to upload the domain image to. Having your own container repository is a prerequisite before creating an OIG domain with WDT models. If you don\u0026rsquo;t have your own container registry, you can load the image on each node in the cluster instead. This documentation does not explain how to create your own container registry, or how to load the image onto each node. Consult your vendor specific documentation for more information.\nNote: Building a domain creation image is a one time activity. The domain creation image can be used to create an OIG domain in multiple environments. You do not need to rebuild the domain creation image every time you create a domain.\nPrepare the persistent storage As referenced in Prerequisites the nodes in the Kubernetes cluster must have access to a persistent volume such as a Network File System (NFS) mount or a shared file system.\nDomain on persistent volume (Domain on PV) is an operator domain home source type, which requires that the domain home exists on a persistent volume.\nWhen a container is started, it needs to mount that volume. The physical volume should be on a shared disk accessible by all the Kubernetes worker nodes because it is not known on which worker node the container will be started. In the case of Oracle Identity and Access Management, the persistent volume does not get erased when a container stops. This enables persistent configurations.\nThe example below uses an NFS mounted volume (\u0026lt;persistent_volume\u0026gt;/governancedomainpv). Other volume types can also be used. See the official Kubernetes documentation for Volumes.\nNote: The persistent volume directory needs to be accessible to both the master and worker node(s). In this example /scratch/shared/governancedomainpv is accessible from all nodes via NFS.\nTo create the persistent volume run the following commands:\n  Create the required directories:\n$ mkdir -p \u0026lt;persistent_volume\u0026gt;/governancedomainpv $ sudo chown -R 1000:0 \u0026lt;persistent_volume\u0026gt;/governancedomainpv For example,\n$ mkdir -p /scratch/shared/governancedomainpv $ sudo chown -R 1000:0 /scratch/shared/governancedomainpv   On the master node run the following command to ensure it is possible to read and write to the persistent volume:\ncd \u0026lt;persistent_volume\u0026gt;/governancedomainpv touch file.txt ls filemaster.txt For example:\ncd /scratch/shared/governancedomainpv touch filemaster.txt ls filemaster.txt   On the first worker node run the following to ensure it is possible to read and write to the persistent volume:\ncd /scratch/shared/governancedomainpv ls filemaster.txt touch fileworker1.txt ls fileworker1.txt   Repeat the above for any other worker nodes e.g fileworker2.txt etc. Once proven that it’s possible to read and write from each node to the persistent volume, delete the files created.\nFor more information on PV and PVC requirements, see Domain on Persistent Volume (PV).\n  Create Kubernetes secrets for the domain and RCU   Create a Kubernetes secret for the domain using the create-secret.sh script in the same Kubernetes namespace as the domain:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils $ ./create-secret.sh -l \u0026#34;username=weblogic\u0026#34; -l \u0026#34;password=****\u0026#34; -n \u0026lt;domain_namespace\u0026gt; -d \u0026lt;domain_uid\u0026gt; -s \u0026lt;domain_uid\u0026gt;-weblogic-credentials where:\n-n \u0026lt;domain_namespace\u0026gt; is the domain namespace you created in Create a namespace for Oracle Identity Governance. For example oigns.\n-d \u0026lt;domain_uid\u0026gt; is the domain UID that you want to create. For example, governancedomain.\n-s \u0026lt;domain_uid\u0026gt;-weblogic-credentials is the name of the secret for this namespace. Note: The secret name must follow this format (\u0026lt;domain_uid\u0026gt;-weblogic-credentials) or domain creation will fail.\nFor example:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils $ ./create-secret.sh -l \u0026#34;username=weblogic\u0026#34; -l \u0026#34;password=\u0026lt;password\u0026gt;\u0026#34; -n oigns -d governancedomain -s governancedomain-weblogic-credentials The output will look similar to the following:\n@@ Info: Setting up secret \u0026#39;governancedomain-weblogic-credentials\u0026#39;. secret/governancedomain-weblogic-credentials created secret/governancedomain-weblogic-credentials labeled   Verify the secret is created using the following command:\n$ kubectl get secret \u0026lt;kubernetes_domain_secret\u0026gt; -o yaml -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get secret governancedomain-weblogic-credentials -o yaml -n oigns The output will look similar to the following:\napiVersion: v1 data: password: \u0026lt;password\u0026gt; username: d2VibG9naWM= kind: Secret metadata: creationTimestamp: \u0026quot;\u0026lt;DATE\u0026gt;\u0026quot; labels: weblogic.domainName: governancedomain weblogic.domainUID: governancedomain name: governancedomain-weblogic-credentials namespace: oigns resourceVersion: \u0026quot;3216738\u0026quot; uid: c2ec07e0-0135-458d-bceb-c648d2a9ac54 type: Opaque   Create a Kubernetes secret for RCU in the same Kubernetes namespace as the domain, using the create-secrets.sh script:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils $ ./create-secret.sh -l \u0026#34;rcu_prefix=\u0026lt;rcu_prefix\u0026gt;\u0026#34; -l \u0026#34;rcu_schema_password=\u0026lt;rcu_schema_pwd\u0026gt;\u0026#34; -l \u0026#34;db_host=\u0026lt;db_host.domain\u0026gt;\u0026#34; -l \u0026#34;db_port=\u0026lt;db_port\u0026gt;\u0026#34; -l \u0026#34;db_service=\u0026lt;service_name\u0026gt;\u0026#34; -l \u0026#34;dba_user=\u0026lt;sys_db_user\u0026gt;\u0026#34; -l \u0026#34;dba_password=\u0026lt;sys_db_pwd\u0026gt;\u0026#34; -n \u0026lt;domain_namespace\u0026gt; -d \u0026lt;domain_uid\u0026gt; -s \u0026lt;domain_uid\u0026gt;-rcu-credentials where\n\u0026lt;rcu_prefix\u0026gt; is the name of the RCU schema to be created.\n\u0026lt;rcu_schema_pwd\u0026gt; is the password you want to create for the RCU schema prefix.\n\u0026lt;db_host.domain\u0026gt; is the database server hostname.\n\u0026lt;db_port\u0026gt; is the database listener port.\n\u0026lt;service_name\u0026gt; is the database service name.\n\u0026lt;sys_db_user\u0026gt; is the database user with sys dba privilege.\n\u0026lt;sys_db_pwd\u0026gt; is the sys database password.\n\u0026lt;domain_uid\u0026gt; is the domain_uid that you want to create. This must be the same domain_uid used in the domain secret. For example, governancedomain.\n\u0026lt;domain_namespace\u0026gt; is the domain namespace you created in Create a namespace for Oracle Identity Governance. For example oigns.\n\u0026lt;domain_uid\u0026gt;-rcu-credentials is the name of the rcu secret to create. Note: The secret name must follow this format (\u0026lt;domain_uid\u0026gt;-rcu-credentials) or domain creation will fail.\nFor example:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils $ ./create-secret.sh -l \u0026#34;rcu_prefix=OIGK8S\u0026#34; -l \u0026#34;rcu_schema_password=\u0026lt;rcu_schema_password\u0026gt;\u0026#34; -l \u0026#34;db_host=mydatabasehost.example.com\u0026#34; -l \u0026#34;db_port=1521\u0026#34; -l \u0026#34;db_service=orcl.example.com\u0026#34; -l \u0026#34;dba_user=sys\u0026#34; -l \u0026#34;dba_password=\u0026lt;dba_password\u0026gt;\u0026#34; -n oigns -d governancedomain -s governancedomain-rcu-credentials The output will look similar to the following:\n@@ Info: Setting up secret \u0026#39;governancedomain-rcu-credentials\u0026#39;. secret/governancedomain-rcu-credentials created secret/governancedomain-rcu-credentials labeled   Verify the secret is created using the following command:\n$ kubectl get secret \u0026lt;kubernetes_rcu_secret\u0026gt; -o yaml -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get secret governancedomain-rcu-credentials -o yaml -n oigns The output will look similar to the following:\napiVersion: v1 data: db_host: \u0026lt;DB_HOST\u0026gt; db_port: MTUyMQ== db_service: \u0026lt;SERVICE_NAME\u0026gt; dba_password: \u0026lt;PASSWORD\u0026gt; dba_user: c3lz rcu_prefix: \u0026lt;RCU_PREFIX\u0026gt; rcu_schema_password: \u0026lt;RCU_PWD\u0026gt; kind: Secret metadata: creationTimestamp: \u0026#34;\u0026lt;DATE\u0026gt;\u0026#34; labels: weblogic.domainUID: governancedomain name: governancedomain-rcu-credentials namespace: oigns resourceVersion: \u0026#34;31695660\u0026#34; uid: 71cfcc73-4c96-42bd-b9a5-988ea9ed27ff type: Opaque   Generate WDT models and the domain resource yaml file In this section you generate the required WDT models for the OIG domain, along with the domain resource yaml file.\n  Navigate to the $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/generate_models_utils directory:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/generate_models_utils   Make a copy of the create-domain-wdt.yaml file:\n$ cp create-domain-wdt.yaml create-domain-wdt.yaml.orig   Edit the create-domain-wdt.yaml and modify the following parameters. Save the file when complete:\ndomainUID: \u0026lt;domain_uid\u0026gt; domainHome: /u01/oracle/user_projects/domains/\u0026lt;domain_uid\u0026gt; image: \u0026lt;image_name\u0026gt;:\u0026lt;tag\u0026gt; imagePullSecretName: \u0026lt;container_registry_secret\u0026gt; logHome: /u01/oracle/user_projects/domains/logs/\u0026lt;domain_uid\u0026gt; namespace: \u0026lt;domain_namespace\u0026gt; weblogicDomainStorageType: NFS weblogicDomainStorageNFSServer: \u0026lt;nfs_server\u0026gt; weblogicDomainStoragePath: \u0026lt;physical_path_of_persistent_storage\u0026gt; weblogicDomainStorageSize: 10G Note: The \u0026lt;domain_namespace\u0026gt; and \u0026lt;domain_uid\u0026gt; must be the same as those used in Creating Kubernetes secrets for the domain and RCU\nFor example:\ndomainUID: governancedomain domainHome: /u01/oracle/user_projects/domains/governancedomain image: container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January'25\u0026gt; imagePullSecretName: orclcred logHome: /u01/oracle/user_projects/domains/logs/governancedomain namespace: oigns weblogicDomainStorageType: NFS weblogicDomainStorageNFSServer: mynfsserver weblogicDomainStoragePath: /scratch/shared/governancedomain weblogicDomainStorageSize: 10G ``\nNote : If using a shared file system instead of NFS, set weblogicDomainStorageType: HOST_PATH and remove weblogicDomainStorageNFSServer.\nA full list of parameters in the create-domain-wdt.yaml file are shown below:\n     Parameter Definition Default     adminPort Port number for the Administration Server inside the Kubernetes cluster. 7001   adminNodePort Port number for the Administration Server outside the Kubernetes cluster. 30701   configuredManagedServerCount Number of Managed Server instances to generate for the domain. 5   datasourceType Type of JDBC datasource applicable for the OIG domain. Legal values are agl and generic. Choose agl for Active GridLink datasource and generic for Generic datasource. For enterprise deployments, Oracle recommends that you use GridLink data sources to connect to Oracle RAC databases. See the Enterprise Deployment Guide for further details. generic   domainHome Home directory of the OIG domain. If not specified, the value is derived from the domainUID as /shared/domains/\u0026lt;domainUID\u0026gt;. /u01/oracle/user_projects/domains/governancedomain   domainPVMountPath Mount path of the domain persistent volume. /u01/oracle/user_projects/domains   domainUID Unique ID that will be used to identify this particular domain. Used as the name of the generated WebLogic domain as well as the name of the Kubernetes domain resource. This ID must be unique across all domains in a Kubernetes cluster. This ID cannot contain any character that is not valid in a Kubernetes service name. governancedomain   edgInstall Used only if performing an install using the Enterprise Deployment Guide. See, Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster. false   exposeAdminNodePort Boolean indicating if the Administration Server is exposed outside of the Kubernetes cluster. false   exposeAdminT3Channel Boolean indicating if the T3 administrative channel is exposed outside the Kubernetes cluster. true   frontEndHost The entry point URL for the OIM. example.com   frontEndHost The entry point port for the OIM. 14000   image OIG container image. The operator requires OIG 12.2.1.4. Refer to Obtain the OIG container image for details on how to obtain or create the image. For WDT domains you must use April 24 or later. oracle/oig:12.2.1.4.0   imagePullSecretName Name of the Kubernetes secret to access the container registry to pull the OIG container image. The presence of the secret will be validated when this parameter is specified.    initialManagedServerReplicas Number of Managed Servers to initially start for the domain. 2   javaOptions Java options for starting the Administration Server and Managed Servers. A Java option can have references to one or more of the following pre-defined variables to obtain WebLogic domain information: $(DOMAIN_NAME), $(DOMAIN_HOME), $(ADMIN_NAME), $(ADMIN_PORT), and $(SERVER_NAME). -Dweblogic.StdoutDebugEnabled=false   logHome The in-pod location for the domain log, server logs, server out, and Node Manager log files. If not specified, the value is derived from the domainUID as /shared/logs/\u0026lt;domainUID\u0026gt;. /u01/oracle/user_projects/domains/logs/governancedomain   namespace Kubernetes namespace in which to create the domain. oigns   oimCPU Initial CPU Units, 1000m = 1 CPU core. 1000m   oimMaxCPU Max CPU Cores pod is allowed to consume. 2   oimMemory Initial memory allocated to a pod. 4Gi   oimMaxMemory Max memory a pod is allowed to consume. 8Gi   oimServerJavaParams The memory parameters to use for the OIG managed servers. \u0026quot;-Xms8192m -Xmx8192m\u0026quot;   productionModeEnabled Boolean indicating if production mode is enabled for the domain. true   soaCPU Initial CPU Units, 1000m = 1 CPU core. 1000m   soaMaxCPU Max CPU Cores pod is allowed to consume. 1   soaMemory Initial Memory pod allocated to a pod. 4Gi   soaMaxMemory Max Memory pod is allowed to consume. 10Gi   soaServerJavaParams The memory parameters to use for the SOA managed servers. \u0026quot;-Xms8192m -Xmx8192m\u0026quot;   t3PublicAddress Public address for the T3 channel. This should be set to the public address of the Kubernetes cluster. This would typically be a load balancer address. For development environments only: In a single server (all-in-one) Kubernetes deployment, this may be set to the address of the master, or at the very least, it must be set to the address of one of the worker nodes. If not provided, the script will attempt to set it to the IP address of the Kubernetes cluster   weblogicDomainStorageType Persistent volume storage type. Options are NFS for NFS volumes or HOST_PATH for shared file system. NFS   weblogicDomainStorageNFSServer Hostname or IP address of the NFS Server. nfsServer   weblogicDomainStoragePath Physical path to the persistent volume. /scratch/governancedomainpv   weblogicDomainStorageSize Total storage allocated to the persistent storage. 10Gi    Note: The above CPU and memory values are for examples only. For Enterprise Deployments, please review the performance recommendations and sizing requirements in Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster.\n Run the generate_wdt_models.sh, specifying your input file and an output directory to store the generated artifacts:\n $ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/generate_models_utils $ ./generate_wdt_models.sh -i create-domain-wdt.yaml -o \u0026lt;path_to_output_directory\u0026gt; For example:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/generate_models_utils $ ./generate_wdt_models.sh -i create-domain-wdt.yaml -o output The output will look similar to the following:\ninput parameters being used export version=\u0026quot;create-weblogic-sample-domain-inputs-v1\u0026quot; export adminPort=\u0026quot;7001\u0026quot; export domainUID=\u0026quot;governancedomain\u0026quot; export configuredManagedServerCount=\u0026quot;5\u0026quot; export initialManagedServerReplicas=\u0026quot;1\u0026quot; export productionModeEnabled=\u0026quot;true\u0026quot; export t3ChannelPort=\u0026quot;30012\u0026quot; export datasourceType=\u0026quot;generic\u0026quot; export edgInstall=\u0026quot;false\u0026quot; export domainHome=\u0026quot;/u01/oracle/user_projects/domains/governancedomain\u0026quot; export image=\u0026quot;container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January'25\u0026gt;\u0026quot; export imagePullSecretName=\u0026quot;orclcred\u0026quot; export logHome=\u0026quot;/u01/oracle/user_projects/domains/logs/governancedomain\u0026quot; export exposeAdminT3Channel=\u0026quot;false\u0026quot; export adminNodePort=\u0026quot;30701\u0026quot; export exposeAdminNodePort=\u0026quot;false\u0026quot; export namespace=\u0026quot;oigns\u0026quot; javaOptions=-Dweblogic.StdoutDebugEnabled=false export domainPVMountPath=\u0026quot;/u01/oracle/user_projects\u0026quot; export weblogicDomainStorageType=\u0026quot;NFS\u0026quot; export weblogicDomainStorageNFSServer=\u0026quot;mynfsServer\u0026quot; export weblogicDomainStoragePath=\u0026quot;/scratch/shared/governancedomainpv\u0026quot; export weblogicDomainStorageReclaimPolicy=\u0026quot;Retain\u0026quot; export weblogicDomainStorageSize=\u0026quot;10Gi\u0026quot; export frontEndHost=\u0026quot;example.com\u0026quot; export frontEndPort=\u0026quot;14000\u0026quot; export oimServerJavaParams=\u0026quot;-Xms8192m -Xmx8192m \u0026quot; export soaServerJavaParams=\u0026quot;-Xms8192m -Xmx8192m \u0026quot; export oimMaxCPU=\u0026quot;2\u0026quot; export oimCPU=\u0026quot;1000m\u0026quot; export oimMaxMemory=\u0026quot;8Gi\u0026quot; export oimMemory=\u0026quot;4Gi\u0026quot; export soaMaxCPU=\u0026quot;1\u0026quot; export soaCPU=\u0026quot;1000m\u0026quot; export soaMaxMemory=\u0026quot;10Gi\u0026quot; export soaMemory=\u0026quot;4Gi\u0026quot; validateWlsDomainName called with governancedomain WDT model file, property file and sample domain.yaml are genereted successfully at output/weblogic-domains/governancedomain ``\nThis will generate domain.yaml, oig.yaml and oig.properties in output/weblogic-domains/governancedomain.\n  Copy the generated files to a $WORKDIR/yaml directory:\n $ mkdir $WORKDIR/yaml $ cp output/weblogic-domains/governancedomain/*.* $WORKDIR/yaml ``\n  Build the Domain Creation Image In this section you build a domain creation image to host the WDT model files and WebLogic Deploy Tooling (WDT) installer.\nDomain creation images are used for supplying WDT model files, WDT variables files, WDT application archive files (collectively known as WDT model files), and the directory where the WebLogic Deploy Tooling software is installed (known as the WDT Home), when deploying a domain using a Domain on PV model. You distribute WDT model files and the WDT executable using these images, and the WebLogic Kubernetes Operator uses them to manage the domain.\nNote: These images are only used for creating the domain and will not be used to update the domain. The domain creation image is used for domain creation only, it is not the product container image used for OIG.\nFor more details on creating the domain image, see Domain creation images.\nThe steps to build the domain creation image are shown in the sections below.\nPrerequisites Verify that your environment meets the following prerequisites:\n You have created the yaml files are per Generate WDT models and the domain resource yaml file. You have a container registry available to push the domain creation image to. A container image client on the build machine, such as Docker or Podman.  For Docker, a minimum version of 18.03.1.ce is required. For Podman, a minimum version of 3.0.1 is required.   An installed version of JDK to run Image Tool, version 8+. Proxies are set accordingly at the OS level if required.  Prepare the build domain image script The sample scripts for the Oracle Identity Governance domain image creation are available at $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image.\n  Navigate to the $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/properties directory:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/properties   Make a copy of the build-domain-creation-image.properties:\n$ cp build-domain-creation-image.properties build-domain-creation-image.properties.orig   Edit the build-domain-creation-image.properties and modify the following parameters. Save the file when complete:\nJAVA_HOME=\u0026lt;Java home location\u0026gt; IMAGE_TAG=\u0026lt;Image tag name\u0026gt; REPOSITORY=\u0026lt;Container image repository to push the image\u0026gt; REG_USER= \u0026lt;Container registry username\u0026gt; IMAGE_PUSH_REQUIRES_AUTH=\u0026lt;Whether image push requires authentication to the registry\u0026gt; WDT_MODEL_FILE=\u0026lt;Full Path to WDT Model file oig.yaml\u0026gt; WDT_VARIABLE_FILE=\u0026lt;Full path to WDT variable file oig.properties\u0026gt; WDT_ARCHIVE_FILE=\u0026lt;Full Path to WDT Archive file\u0026gt; WDT_VERSION=\u0026quot;Version of WebLogic Deploy Tool version to use\u0026quot; WIT_VERSION=\u0026quot;Version of WebLogic Image Tool to use\u0026quot; For example:\nJAVA_HOME=/scratch/jdk IMAGE_TAG=oig-aux-generic-v1 BASE_IMAGE=ghcr.io/oracle/oraclelinux:8-slim REPOSITORY=container-registry.example.com/mytenancy/idm REG_USER=mytenancy/myemail@example.com IMAGE_PUSH_REQUIRES_AUTH=true WDT_MODEL_FILE=\u0026quot;/scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/yaml/oig.yaml\u0026quot; WDT_VARIABLE_FILE=\u0026quot;/scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/oig.properties\u0026quot; WDT_ARCHIVE_FILE=\u0026quot;\u0026quot; WDT_VERSION=\u0026quot;3.5.3\u0026quot; WIT_VERSION=\u0026quot;1.12.1\u0026quot; A full list of parameters and descriptions in the build-domain-creation-image.properties file are shown below:\n     Parameter Definition Default     JAVA_HOME Path to the JAVA_HOME for the JDK8+.    IMAGE_TAG Image tag for the final domain creation image. oig-aux-generic-v1   BASE_IMAGE The Oracle Linux product container image to use as a base image. ghcr.io/oracle/oraclelinux:8-slim   REPOSITORY Container image repository that will host the domain creation image. iad.ocir.io/mytenancy/idm   REG_USER Username to authenticate to the \u0026lt;REPOSITORY\u0026gt; and push the domain creation image. mytenancy/oracleidentitycloudservice/myemail@example.com   IMAGE_PUSH_REQUIRES_AUTH If authentication to \u0026lt;REPOSITORY\u0026gt; is required then set to true, else set to false. If set to false, \u0026lt;REG_USER\u0026gt; is not required. true   WDT_MODEL_FILE Absolute path to WDT model file oig.yaml. For example $WORKDIR/yaml/oig.yaml.    WDT_MODEL_FILE Absolute path to WDT variable file oig.properties. For example $WORKDIR/yaml/oig.properties.    WDT_ARCHIVE_FILE Absolute path to WDT archive file.    WDT_VERSION WebLogic Deploy Tool version. If not specified the latest available version will be downloaded. It is recommended to use the default value. 3.5.3   WIT_VERSION WebLogic Image Tool Version. If not specified the latest available version will be downloaded. It is recommended to use the default value. 1.12.1   TARGET Select the target environment in which the created image will be used. Supported values: Default or OpenShift. See Additional Information. Default   CHOWN userid:groupid to be used for creating files within the image, such as the WDT installer, WDT model, and WDT archive. If the user or group does not exist in the image, they will be added with useradd/groupadd. oracle:oracle    Note: If IMAGE_PUSH_REQUIRES_AUTH=true, you must edit the $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/properties/.regpassword and change \u0026lt;REGISTRY_PASSWORD\u0026gt; to your registry password.\nREG_PASSWORD=\u0026quot;\u0026lt;REPOSITORY_PASSWORD\u0026gt;\u0026quot; Run the build-domain-creation-image script   Execute the build-domain-creation-image.sh by specifying the input properties parameter files:\n $ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image $ ./build-domain-creation-image.sh -i properties/build-domain-creation-image.properties ``\nNote: If using a password file, you must add -p properties/.regpassword to the end of the command.\nExecuting this command will build the image and push it to the container image repository.\nThe output will look similar to the following:\n  Click here to see example output:   using WDT_DIR: /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir Using WDT_VERSION 3.5.3 Using WIT_DIR /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir Using WIT_VERSION 1.12.1 Using Image tag: oig-aux-generic-v1 using Base Image: ghcr.io/oracle/oraclelinux:8-slim using IMAGE_BUILDER_EXE /usr/bin/podman JAVA_HOME is set to /home/opc/jdk @@ Info: WIT_INSTALL_ZIP_URL is '' @@ WIT_INSTALL_ZIP_URL is not set @@ imagetool.sh not found in /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/imagetool/bin. Installing imagetool... @@ Info: Downloading https://github.com/oracle/weblogic-image-tool/releases/download/release-1.12.1/imagetool.zip @@ Info: Downloading https://github.com/oracle/weblogic-image-tool/releases/download/release-1.12.1/imagetool.zip with https_proxy=\u0026quot;http://proxy.example.com:80\u0026quot; @@ Info: Archive downloaded to /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/imagetool.zip, about to unzip via '/home/opc/jdk/bin/jar xf'. @@ Info: imageTool cache does not contain a valid entry for wdt_3.5.3. Installing WDT @@ Info: WDT_INSTALL_ZIP_URL is '' @@ WDT_INSTALL_ZIP_URL is not set @@ Info: Downloading https://github.com/oracle/weblogic-deploy-tooling/releases/download/release-3.5.3/weblogic-deploy.zip @@ Info: Downloading https://github.com/oracle/weblogic-deploy-tooling/releases/download/release-3.5.3/weblogic-deploy.zip with https_proxy=\u0026quot;http://proxy.example.com:80\u0026quot; @@ Info: Archive downloaded to /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/weblogic-deploy.zip [INFO ] Successfully added to cache. wdt_3.5.3=/scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/weblogic-deploy.zip @@ Info: Install succeeded, imagetool install is in the /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/imagetool directory. Starting Building Image container-registry.example.com/mytenancy/idm:oig-aux-generic-v1 Login Succeeded! WDT_MODEL_FILE is set to /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/yaml/oig.yaml WDT_VARIABLE_FILE is set to /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/yaml/oig.properties Additional Build Commands file is set to /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/additonal-build-files/build-files.txt Additonal Build file is set to /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/additonal-build-files/OIG.json [INFO ] WebLogic Image Tool version 1.12.1 [INFO ] Image Tool build ID: 88fdf00a-d97a-4ff7-b2d1-ad213bffeae1 [INFO ] Temporary directory used for image build context: /home/opc/wlsimgbuilder_temp8473580374961408286 [INFO ] Copying /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/additonal-build-files/OIG.json to build context folder. [INFO ] User specified fromImage ghcr.io/oracle/oraclelinux:8-slim [INFO ] Inspecting ghcr.io/oracle/oraclelinux:8-slim, this may take a few minutes if the image is not available locally. [INFO ] Copying /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/yaml/oig.yaml to build context folder. [INFO ] Copying /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/yaml/oig.properties to build context folder. [INFO ] Copying /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/weblogic-deploy.zip to build context folder. [INFO ] Starting build: /usr/bin/podman build --no-cache --force-rm --tag container-registry.example.com/mytenancy/idm:oig-aux-generic-v1 --pull --build-arg http_proxy=http://proxy.example.com:80 --build-arg https_proxy=http://proxy.example.com:80 --build-arg no_proxy=localhost,127.0.0.0/8,.example.com,,/var/run/crio/crio.sock,X.X.X.X,/var/run/crio/crio.sock,100.105.18.32 /home/opc/wlsimgbuilder_temp8473580374961408286 [1/3] STEP 1/5: FROM ghcr.io/oracle/oraclelinux:8-slim AS os_update [1/3] STEP 2/5: LABEL com.oracle.weblogic.imagetool.buildid=\u0026quot;88fdf00a-d97a-4ff7-b2d1-ad213bffeae1\u0026quot; --\u0026gt; 58df386c56c0 [1/3] STEP 3/5: USER root --\u0026gt; 14e154f7b87b [1/3] STEP 4/5: RUN microdnf update \u0026amp;\u0026amp; microdnf install gzip tar unzip libaio libnsl jq findutils diffutils shadow-utils \u0026amp;\u0026amp; microdnf clean all Downloading metadata... Downloading metadata... Package Repository Size Installing: glibc-gconv-extra-2.28-236.0.1.el8_9.12.x86_64 ol8_baseos_latest 1.6 MB Upgrading: glibc-2.28-236.0.1.el8_9.12.x86_64 ol8_baseos_latest 2.3 MB replacing glibc-2.28-236.0.1.el8.7.x86_64 glibc-common-2.28-236.0.1.el8_9.12.x86_64 ol8_baseos_latest 1.1 MB replacing glibc-common-2.28-236.0.1.el8.7.x86_64 glibc-minimal-langpack-2.28-236.0.1.el8_9.12.x86_64 ol8_baseos_latest 71.1 kB replacing glibc-minimal-langpack-2.28-236.0.1.el8.7.x86_64 systemd-libs-239-78.0.4.el8.x86_64 ol8_baseos_latest 1.2 MB replacing systemd-libs-239-78.0.3.el8.x86_64 Transaction Summary: Installing: 1 packages Reinstalling: 0 packages Upgrading: 4 packages Obsoleting: 0 packages Removing: 0 packages Downgrading: 0 packages Downloading packages... Running transaction test... Updating: glibc-common;2.28-236.0.1.el8_9.12;x86_64;ol8_baseos_latest Updating: glibc-minimal-langpack;2.28-236.0.1.el8_9.12;x86_64;ol8_baseos_latest Updating: glibc;2.28-236.0.1.el8_9.12;x86_64;ol8_baseos_latest Installing: glibc-gconv-extra;2.28-236.0.1.el8_9.12;x86_64;ol8_baseos_latest Updating: systemd-libs;239-78.0.4.el8;x86_64;ol8_baseos_latest Cleanup: systemd-libs;239-78.0.3.el8;x86_64;installed Cleanup: glibc;2.28-236.0.1.el8.7;x86_64;installed Cleanup: glibc-minimal-langpack;2.28-236.0.1.el8.7;x86_64;installed Cleanup: glibc-common;2.28-236.0.1.el8.7;x86_64;installed Complete. Package Repository Size Installing: diffutils-3.6-6.el8.x86_64 ol8_baseos_latest 369.3 kB findutils-1:4.6.0-21.el8.x86_64 ol8_baseos_latest 539.8 kB gzip-1.9-13.el8_5.x86_64 ol8_baseos_latest 170.7 kB jq-1.6-7.0.3.el8.x86_64 ol8_appstream 206.5 kB libaio-0.3.112-1.el8.x86_64 ol8_baseos_latest 33.4 kB libnsl-2.28-236.0.1.el8_9.12.x86_64 ol8_baseos_latest 112.3 kB oniguruma-6.8.2-2.1.el8_9.x86_64 ol8_appstream 191.5 kB unzip-6.0-46.0.1.el8.x86_64 ol8_baseos_latest 201.0 kB Transaction Summary: Installing: 8 packages Reinstalling: 0 packages Upgrading: 0 packages Obsoleting: 0 packages Removing: 0 packages Downgrading: 0 packages Downloading packages... Running transaction test... Installing: oniguruma;6.8.2-2.1.el8_9;x86_64;ol8_appstream Installing: jq;1.6-7.0.3.el8;x86_64;ol8_appstream Installing: unzip;6.0-46.0.1.el8;x86_64;ol8_baseos_latest Installing: libnsl;2.28-236.0.1.el8_9.12;x86_64;ol8_baseos_latest Installing: libaio;0.3.112-1.el8;x86_64;ol8_baseos_latest Installing: gzip;1.9-13.el8_5;x86_64;ol8_baseos_latest Installing: findutils;1:4.6.0-21.el8;x86_64;ol8_baseos_latest Installing: diffutils;3.6-6.el8;x86_64;ol8_baseos_latest Complete. Complete. --\u0026gt; 62016b4b1988 [1/3] STEP 5/5: RUN if [ -z \u0026quot;$(getent group oracle)\u0026quot; ]; then groupadd oracle || exit 1 ; fi \u0026amp;\u0026amp; if [ -z \u0026quot;$(getent group oracle)\u0026quot; ]; then groupadd oracle || exit 1 ; fi \u0026amp;\u0026amp; if [ -z \u0026quot;$(getent passwd oracle)\u0026quot; ]; then useradd -g oracle oracle || exit 1; fi \u0026amp;\u0026amp; mkdir -p /u01 \u0026amp;\u0026amp; chown oracle:oracle /u01 \u0026amp;\u0026amp; chmod 775 /u01 --\u0026gt; 77099c4f3707 [2/3] STEP 1/4: FROM 77099c4f37077d45015cebb456b1ce40ba075d7c2d24f5cb9f41c60efa679200 AS wdt_build [2/3] STEP 2/4: RUN mkdir -p /auxiliary \u0026amp;\u0026amp; mkdir -p /auxiliary/models \u0026amp;\u0026amp; chown oracle:oracle /auxiliary --\u0026gt; 82f0cd380d89 [2/3] STEP 3/4: COPY --chown=oracle:oracle [\u0026quot;weblogic-deploy.zip\u0026quot;, \u0026quot;/tmp/imagetool/\u0026quot;] --\u0026gt; a108b42804ca [2/3] STEP 4/4: RUN test -d /auxiliary/weblogic-deploy \u0026amp;\u0026amp; rm -rf /auxiliary/weblogic-deploy || echo Initial WDT install \u0026amp;\u0026amp; unzip -q \u0026quot;/tmp/imagetool/weblogic-deploy.zip\u0026quot; -d /auxiliary Initial WDT install --\u0026gt; 1432012f293d [3/3] STEP 1/12: FROM 77099c4f37077d45015cebb456b1ce40ba075d7c2d24f5cb9f41c60efa679200 AS final [3/3] STEP 2/12: ENV AUXILIARY_IMAGE_PATH=/auxiliary WDT_HOME=/auxiliary WDT_MODEL_HOME=/auxiliary/models --\u0026gt; fec3c77539d6 [3/3] STEP 3/12: RUN mkdir -p /auxiliary \u0026amp;\u0026amp; chown oracle:oracle /auxiliary --\u0026gt; ad9ca2b55f11 [3/3] STEP 4/12: COPY --from=wdt_build --chown=oracle:oracle /auxiliary /auxiliary/ --\u0026gt; 9fdf1ed52888 [3/3] STEP 5/12: RUN mkdir -p /auxiliary/models \u0026amp;\u0026amp; chown oracle:oracle /auxiliary/models --\u0026gt; 208de9fbed4a [3/3] STEP 6/12: COPY --chown=oracle:oracle [\u0026quot;oig.yaml\u0026quot;, \u0026quot;/auxiliary/models/\u0026quot;] --\u0026gt; c45884e3ad93 [3/3] STEP 7/12: COPY --chown=oracle:oracle [\u0026quot;oig.properties\u0026quot;, \u0026quot;/auxiliary/models/\u0026quot;] --\u0026gt; d0ae571589ed [3/3] STEP 8/12: RUN chmod -R 640 /auxiliary/models/* --\u0026gt; 08fe4c892394 [3/3] STEP 9/12: USER oracle --\u0026gt; 0a0bb84fd90c [3/3] STEP 10/12: WORKDIR /auxiliary --\u0026gt; aa4d6fe84415 [3/3] STEP 11/12: COPY --chown=oracle:oracle files/OIG.json /auxiliary/weblogic-deploy/lib/typedefs --\u0026gt; 40fabe477af7 [3/3] STEP 12/12: RUN chmod -R 755 /auxiliary [3/3] COMMIT container-registry.example.com/mytenancy/idm:oig-aux-generic-v1 --\u0026gt; ca9120fdeb0b Successfully tagged container-registry.example.com/mytenancy/idm:oig-aux-generic-v1 ca9120fdeb0b29ef447b959ccba9dae0b7f062a2b6b4c41680e2e72c7f591741 [INFO ] Build successful. Build time=63s. Image tag=container-registry.example.com/mytenancy/idm:oig-aux-generic-v1 Getting image source signatures Copying blob fa48179450c3 done Copying blob 43cd89792b11 done Copying blob db97724803c6 done Copying blob 8b4d3bacf0d7 done Copying blob 97961b141e48 done Copying blob affb88964094 done Copying blob cd6baebadbfd done Copying blob d1167c2b24bf done Copying blob 31b60d1b87d2 done Copying blob 2cc6de086f3c done Copying blob 4529e99c5305 done Copying config ca9120fdeb done Writing manifest to image destination Pushed image container-registry.example.com/mytenancy/idm:oig-aux-generic-v1 to image repository      Deploy the OIG domain resource In this section you modify the OIG domain.yaml and deploy the OIG domain using the build image created.\nModify the OIG domain.yaml In this section you modify the domain.yaml file in preparation for creating the OIG domain.\n  Edit the $WORKDIR/yaml/domain.yaml and update the %DOMAIN_CREATION_IMAGE% with the previously generated image name.\nNote: %DOMAIN_CREATION_IMAGE% takes the format of \u0026lt;REPOSITORY\u0026gt;:\u0026lt;TAG\u0026gt;:\ndomain: # Domain | DomainAndRCU createIfNotExists: DomainAndRCU # Image containing WDT installer and Model files. domainCreationImages: - image: '%DOMAIN_CREATION_IMAGE%' domainType: OIG For example:\ndomain: # Domain | DomainAndRCU createIfNotExists: DomainAndRCU # Image containing WDT installer and Model files. domainCreationImages: - image: 'container-registry.example.com/mytenancy/idm:oig-aux-generic-v1' domainType: OIG   In circumstances where you may be pulling the OIG product container image from Oracle Container Registry, and then the domain image from a private registry, you must first create a secret (privatecred) for the private registry. For example:\n$ kubectl create secret docker-registry \u0026quot;privatecred\u0026quot; --docker-server=container-registry.example.com \\ --docker-username=\u0026quot;user@example.com\u0026quot; \\ --docker-password=password --docker-email=user@example.com \\ --namespace=oigns Then specify both secrets for imagePullSecrets in the domain.yaml. For example:\n ... spec: # The WebLogic Domain Home domainHome: /u01/oracle/user_projects/domains/governancedomain # The domain home source type # Set to PersistentVolume for domain-in-pv, Image for domain-in-image, or FromModel for model-in-image domainHomeSourceType: PersistentVolume # The WebLogic Server image that the Operator uses to start the domain image: \u0026quot;container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January'25\u0026gt;\u0026quot; # imagePullPolicy defaults to \u0026quot;Always\u0026quot; if image version is :latest imagePullPolicy: IfNotPresent imagePullSecrets: - name: orclcred - name: privatecred # Identify which Secret contains the WebLogic Admin credentials ... ``\nFor more information about the configuration parameters in domain.yaml, see Domain Resources.\n  Click here to see an example domain.yaml:    # Copyright (c) 2024, Oracle and/or its affiliates. # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. # # This is an example of how to define an OIG Domain. For details about the fields in domain specification, refer https://oracle.github.io/weblogic-kubernetes-operator/managing-domains/domain-resource/ # apiVersion: \u0026quot;weblogic.oracle/v9\u0026quot; kind: Domain metadata: name: governancedomain namespace: oigns labels: weblogic.domainUID: governancedomain spec: # The WebLogic Domain Home domainHome: /u01/oracle/user_projects/domains/governancedomain # The domain home source type # Set to PersistentVolume for domain-in-pv, Image for domain-in-image, or FromModel for model-in-image domainHomeSourceType: PersistentVolume # The WebLogic Server image that the Operator uses to start the domain image: \u0026quot;container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January'25\u0026gt;\u0026quot; # imagePullPolicy defaults to \u0026quot;Always\u0026quot; if image version is :latest imagePullPolicy: IfNotPresent # Add additional secret name if you are using a different registry for domain creation image. # Identify which Secret contains the credentials for pulling an image imagePullSecrets: - name: orclcred - name: privatecred # Identify which Secret contains the WebLogic Admin credentials webLogicCredentialsSecret: name: governancedomain-weblogic-credentials # Whether to include the server out file into the pod's stdout, default is true includeServerOutInPodLog: true # Whether to enable log home logHomeEnabled: true # Whether to write HTTP access log file to log home httpAccessLogInLogHome: true # The in-pod location for domain log, server logs, server out, introspector out, and Node Manager log files logHome: /u01/oracle/user_projects/domains/logs/governancedomain # An (optional) in-pod location for data storage of default and custom file stores. # If not specified or the value is either not set or empty (e.g. dataHome: \u0026quot;\u0026quot;) then the # data storage directories are determined from the WebLogic domain home configuration. dataHome: \u0026quot;\u0026quot; # serverStartPolicy legal values are \u0026quot;Never, \u0026quot;IfNeeded\u0026quot;, or \u0026quot;AdminOnly\u0026quot; # This determines which WebLogic Servers the Operator will start up when it discovers this Domain # - \u0026quot;Never\u0026quot; will not start any server in the domain # - \u0026quot;AdminOnly\u0026quot; will start up only the administration server (no managed servers will be started) # - \u0026quot;IfNeeded\u0026quot; will start all non-clustered servers, including the administration server and clustered servers up to the replica count serverStartPolicy: IfNeeded serverPod: initContainers: #DO NOT CHANGE THE NAME OF THIS INIT CONTAINER - name: compat-connector-init # OIG Product image, same as spec.image mentioned above image: \u0026quot;container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January'25\u0026gt;\u0026quot; imagePullPolicy: IfNotPresent command: [ \u0026quot;/bin/bash\u0026quot;, \u0026quot;-c\u0026quot;, \u0026quot;mkdir -p /u01/oracle/user_projects/domains/ConnectorDefaultDirectory\u0026quot;, \u0026quot;mkdir -p /u01/oracle/user_projects/domains/wdt-logs\u0026quot;] volumeMounts: - mountPath: /u01/oracle/user_projects name: weblogic-domain-storage-volume # a mandatory list of environment variable to be set on the servers env: - name: JAVA_OPTIONS value: -Dweblogic.StdoutDebugEnabled=false - name: USER_MEM_ARGS value: \u0026quot;-Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx1024m \u0026quot; - name: WLSDEPLOY_LOG_DIRECTORY value: \u0026quot;/u01/oracle/user_projects/domains/wdt-logs\u0026quot; - name: FRONTENDHOST value: example.com - name: FRONTENDPORT value: \u0026quot;14000\u0026quot; - name: WLSDEPLOY_PROPERTIES value: \u0026quot;-Dwdt.config.disable.rcu.drop.schema=true\u0026quot; envFrom: - secretRef: name: governancedomain-rcu-credentials volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: governancedomain-domain-pvc volumeMounts: - mountPath: /u01/oracle/user_projects name: weblogic-domain-storage-volume # adminServer is used to configure the desired behavior for starting the administration server. adminServer: # adminService: # channels: # The Admin Server's NodePort # - channelName: default # nodePort: 30701 # Uncomment to export the T3Channel as a service # - channelName: T3Channel serverPod: # an (optional) list of environment variable to be set on the admin servers env: - name: USER_MEM_ARGS value: \u0026quot;-Djava.security.egd=file:/dev/./urandom -Xms512m -Xmx1024m \u0026quot; configuration: secrets: [ governancedomain-rcu-credentials ] initializeDomainOnPV: persistentVolume: metadata: name: governancedomain-domain-pv spec: storageClassName: governancedomain-domain-storage-class capacity: # Total storage allocated to the persistent storage. storage: 10Gi # Reclaim policy of the persistent storage # # The valid values are: 'Retain', 'Delete', and 'Recycle' persistentVolumeReclaimPolicy: Retain # Persistent volume type for the persistent storage. # # The value must be 'hostPath' or 'nfs'. # # If using 'nfs', server must be specified. nfs: server: mynfsserver # hostPath: path: \u0026quot;/scratch/shared/governancedomain\u0026quot; persistentVolumeClaim: metadata: name: governancedomain-domain-pvc spec: storageClassName: governancedomain-domain-storage-class resources: requests: storage: 10Gi volumeName: governancedomain-domain-pv domain: # Domain | DomainAndRCU createIfNotExists: DomainAndRCU # Image containing WDT installer and Model files. domainCreationImages: - image: 'container-registry.example.com/mytenancy/idm:oig-aux-generic-v1' domainType: OIG # References to Cluster resources that describe the lifecycle options for all # the Managed Server members of a WebLogic cluster, including Java # options, environment variables, additional Pod content, and the ability to # explicitly start, stop, or restart cluster members. The Cluster resource # must describe a cluster that already exists in the WebLogic domain # configuration. clusters: - name: governancedomain-oim-cluster - name: governancedomain-soa-cluster # The number of managed servers to start for unlisted clusters # replicas: 1 --- # This is an example of how to define a Cluster resource. apiVersion: weblogic.oracle/v1 kind: Cluster metadata: name: governancedomain-oim-cluster namespace: oigns spec: clusterName: oim_cluster serverService: precreateService: true replicas: 0 serverPod: env: - name: USER_MEM_ARGS value: \u0026quot;-Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m \u0026quot; resources: limits: cpu: \u0026quot;2\u0026quot; memory: \u0026quot;8Gi\u0026quot; requests: cpu: \u0026quot;1000m\u0026quot; memory: \u0026quot;4Gi\u0026quot; --- # This is an example of how to define a Cluster resource. apiVersion: weblogic.oracle/v1 kind: Cluster metadata: name: governancedomain-soa-cluster namespace: oigns spec: clusterName: soa_cluster serverService: precreateService: true replicas: 1 serverPod: env: - name: USER_MEM_ARGS value: \u0026quot;-Xms8192m -Xmx8192m \u0026quot; resources: limits: cpu: \u0026quot;1\u0026quot; memory: \u0026quot;10Gi\u0026quot; requests: cpu: \u0026quot;1000m\u0026quot; memory: \u0026quot;4Gi\u0026quot; ```    Note: By default, WebLogic operator will create the RCU schema using WDT tooling and patch them during every domain deployment. If the RCU Schema with the given prefix already exists, and error will be thrown and the domain creation will fail. If you want to delete the schema every time during domain deployment, then can change the value \u0026quot;-Dwdt.config.disable.rcu.drop.schema=true\u0026quot; to \u0026quot;-Dwdt.config.disable.rcu.drop.schema=false\u0026quot;.\n  Optional WDT Models ConfigMap If required, you can provide a Kubernetes ConfigMap with additional WDT models and WDT variables files as supplements, or overrides, to those in domainCreationImages. For example in the output/weblogic-domains/governancedomain/domain.yaml:\n domain: ... domainCreationImages: ... domainCreationConfigMap: mymodel-domain-configmap The files inside domainCreationConfigMap must have file extensions, .yaml, .properties, or .zip.\n  To create a configmap run the following command:\n $ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils $ ./create-configmap.sh -n oigns -d governancedomain -c mymodel-domain-configmap -f wdt_models/mymodel.yaml   For more information on the usage of additional configuration, see Optional WDT models ConfigMap.\nDeploy the OIG domain In this section you deploy the OIG domain using the domain.yaml.\n  Run the following command to create OIG domain resources:\n$ kubectl create -f $WORKDIR/yaml/domain.yaml The following steps will be performed by WebLogic Kubernetes Operator:\n Run the introspector job. The introspection job will create the RCU Schemas and then patch them. The introspector job pod will create the domain on PV using the model provided in the domain creation image. The introspector job pod will execute OIG offline configuration actions post successful creation of domain via WDT. Brings up the Administration Server, and the SOA Managed Server (soa_server1).  The output will look similar to the following:\ndomain.weblogic.oracle/governancedomain created cluster.weblogic.oracle/governancedomain-oim-cluster created cluster.weblogic.oracle/governancedomain-soa-cluster created Whilst the domain creation is running, you can run the following command to monitor the progress:\n$ kubectl get pods -n oigns -w You can also tail the logs for the pods by running:\n$ kubectl logs -f \u0026lt;pod\u0026gt; -n oigns WDT specific logs can be found in \u0026lt;persistent_volume\u0026gt;/domains/wdt-logs.\nOnce everything is started you should see the Administration Server and SOA server are running:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 13m governancedomain-soa-server1 1/1 Running 0 10m If there are any failures, follow Domain creation failure with WDT models in the Troubleshooting section.\nNote: Depending on the speed of your cluster, it can take around 25 minutes for all the pods to be in READY 1/1 state.\n  Start the OIM server by running the following command:\n $ kubectl patch cluster -n oigns governancedomain-oim-cluster --type=merge -p '{\u0026quot;spec\u0026quot;:{\u0026quot;replicas\u0026quot;:1}}' ``\nThe output will look similar to the following:\n cluster.weblogic.oracle/governancedomain-oim-cluster patched ``\nYou can view the status of the OIM server by running:\n $ kubectl get pods -n oigns -w ``\nOnce the OIM server is running, the output will look similar to the following:\n NAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 16m governancedomain-soa-server1 1/1 Running 0 13m governancedomain-oim-server1 1/1 Running 0 5m22s ``\n  Verify the results Verify the domain, pods and services   Verify the domain, servers pods and services are created and in the READY state with a STATUS of 1/1, by running the following command:\n$ kubectl get all,domains -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get all,domains -n oigns The output will look similar to the following:\n NAME READY STATUS RESTARTS AGE pod/governancedomain-adminserver 1/1 Running 0 25m pod/governancedomain-oim-server1 1/1 Running 0 7m18s pod/governancedomain-soa-server1 1/1 Running 0 20m NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/governancedomain-adminserver ClusterIP None \u0026lt;none\u0026gt; 7001/TCP 25m service/governancedomain-cluster-oim-cluster ClusterIP 10.102.36.107 \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 20m service/governancedomain-cluster-soa-cluster ClusterIP 10.102.230.187 \u0026lt;none\u0026gt; 8001/TCP 20m service/governancedomain-oim-server1 ClusterIP None \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 7m18s service/governancedomain-oim-server2 ClusterIP 10.111.183.16 \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 20m service/governancedomain-oim-server3 ClusterIP 10.107.144.169 \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 20m service/governancedomain-oim-server4 ClusterIP 10.110.18.114 \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 20m service/governancedomain-oim-server5 ClusterIP 10.106.220.13 \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 20m service/governancedomain-soa-server1 ClusterIP None \u0026lt;none\u0026gt; 8001/TCP 20m service/governancedomain-soa-server2 ClusterIP 10.104.204.68 \u0026lt;none\u0026gt; 8001/TCP 20m service/governancedomain-soa-server3 ClusterIP 10.110.104.108 \u0026lt;none\u0026gt; 8001/TCP 20m service/governancedomain-soa-server4 ClusterIP 10.103.117.118 \u0026lt;none\u0026gt; 8001/TCP 20m service/governancedomain-soa-server5 ClusterIP 10.101.65.38 \u0026lt;none\u0026gt; 8001/TCP 20m NAME AGE domain.weblogic.oracle/governancedomain 32m NAME AGE cluster.weblogic.oracle/governancedomain-oim-cluster 32m cluster.weblogic.oracle/governancedomain-soa-cluster 32m The default domain created by the sample WDT models has the following characteristics:\n An Administration Server named AdminServer listening on port 7001. A configured OIG cluster named oig_cluster of size 5. A configured SOA cluster named soa_cluster of size 5. One started OIG managed Server, named oim_server1, listening on port 14000. One started SOA managed Server, named soa_server1, listening on port 8001. Log files that are located in \u0026lt;persistent_volume\u0026gt;/logs/\u0026lt;domainUID\u0026gt;    Verify the domain   Run the following command to describe the domain:\n$ kubectl describe domain \u0026lt;domain_uid\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe domain governancedomain -n oigns    Click here to see example output:   Name: governancedomain Namespace: oigns Labels: weblogic.domainUID=governancedomain Annotations: \u0026lt;none\u0026gt; API Version: weblogic.oracle/v9 Kind: Domain Metadata: Creation Timestamp: \u0026lt;DATE\u0026gt; Generation: 1 Resource Version: 1013312 UID: b5b4446b-b056-431f-8ae4-db470ac7731e Spec: Admin Server: Admin Channel Port Forwarding Enabled: true Server Pod: Env: Name: USER_MEM_ARGS Value: -Djava.security.egd=file:/dev/./urandom -Xms512m -Xmx1024m Server Start Policy: IfNeeded Clusters: Name: governancedomain-oim-cluster Name: governancedomain-soa-cluster Configuration: Initialize Domain On PV: Domain: Create If Not Exists: DomainAndRCU Domain Creation Images: Image: container-registry.example.com/mytenancy/idm:oig-aux-generic-v1 Domain Type: OIG Persistent Volume: Metadata: Name: governancedomain-domain-pv Spec: Capacity: Storage: 10Gi Nfs: Path: /scratch/shared/governancedomainpv Server: mynfsserver Persistent Volume Reclaim Policy: Retain Storage Class Name: governancedomain-domain-storage-class Persistent Volume Claim: Metadata: Name: governancedomain-domain-pvc Spec: Resources: Requests: Storage: 10Gi Storage Class Name: governancedomain-domain-storage-class Volume Name: governancedomain-domain-pv Override Distribution Strategy: Dynamic Secrets: governancedomain-rcu-credentials Data Home: Domain Home: /u01/oracle/user_projects/domains/governancedomain Domain Home Source Type: PersistentVolume Failure Retry Interval Seconds: 120 Failure Retry Limit Minutes: 1440 Http Access Log In Log Home: true Image: container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January\u0026#39;25\u0026gt; Image Pull Policy: IfNotPresent Image Pull Secrets: Name: orclcred Name: privatecred Include Server Out In Pod Log: true Log Home: /u01/oracle/user_projects/domains/logs/governancedomain Log Home Enabled: true Max Cluster Concurrent Shutdown: 1 Max Cluster Concurrent Startup: 0 Max Cluster Unavailable: 1 Replace Variables In Java Options: false Replicas: 1 Server Pod: Env: Name: JAVA_OPTIONS Value: -Dweblogic.StdoutDebugEnabled=false Name: USER_MEM_ARGS Value: -Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx1024m Name: WLSDEPLOY_LOG_DIRECTORY Value: /u01/oracle/user_projects/domains/wdt-logs Name: FRONTENDHOST Value: example.com Name: FRONTENDPORT Value: 14000 Name: WLSDEPLOY_PROPERTIES Value: -Dwdt.config.disable.rcu.drop.schema=true Env From: Secret Ref: Name: governancedomain-rcu-credentials Init Containers: Command: /bin/bash -c mkdir -p /u01/oracle/user_projects/domains/ConnectorDefaultDirectory mkdir -p /u01/oracle/user_projects/domains/wdt-logs Image: container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January\u0026#39;25\u0026gt; Image Pull Policy: IfNotPresent Name: compat-connector-init Volume Mounts: Mount Path: /u01/oracle/user_projects Name: weblogic-domain-storage-volume Volume Mounts: Mount Path: /u01/oracle/user_projects Name: weblogic-domain-storage-volume Volumes: Name: weblogic-domain-storage-volume Persistent Volume Claim: Claim Name: governancedomain-domain-pvc Server Start Policy: IfNeeded Web Logic Credentials Secret: Name: governancedomain-weblogic-credentials Status: Clusters: Cluster Name: oim_cluster Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Label Selector: weblogic.domainUID=governancedomain,weblogic.clusterName=oim_cluster Maximum Replicas: 5 Minimum Replicas: 0 Observed Generation: 2 Ready Replicas: 1 Replicas: 1 Replicas Goal: 1 Cluster Name: soa_cluster Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Label Selector: weblogic.domainUID=governancedomain,weblogic.clusterName=soa_cluster Maximum Replicas: 5 Minimum Replicas: 0 Observed Generation: 1 Ready Replicas: 1 Replicas: 1 Replicas Goal: 1 Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Observed Generation: 1 Servers: Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: doc-worker2 Pod Phase: Running Pod Ready: True Server Name: AdminServer State: RUNNING State Goal: RUNNING Cluster Name: oim_cluster Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: doc-worker1 Pod Phase: Running Pod Ready: True Server Name: oim_server1 State: RUNNING State Goal: RUNNING Cluster Name: oim_cluster Server Name: oim_server2 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oim_cluster Server Name: oim_server3 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oim_cluster Server Name: oim_server4 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oim_cluster Server Name: oim_server5 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: soa_cluster Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: doc-worker1 Pod Phase: Running Pod Ready: True Server Name: soa_server1 State: RUNNING State Goal: RUNNING Cluster Name: soa_cluster Server Name: soa_server2 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: soa_cluster Server Name: soa_server3 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: soa_cluster Server Name: soa_server4 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: soa_cluster Server Name: soa_server5 State: SHUTDOWN State Goal: SHUTDOWN Start Time: \u0026lt;DATE\u0026gt; Events: \u0026lt;none\u0026gt;      Verify the pods   Run the following command to see the pods running the servers and which nodes they are running on:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; -o wide For example:\n$ kubectl get pods -n oigns -o wide The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES governancedomain-adminserver 1/1 Running 0 26m 10.244.1.42 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none governancedomain-oim-server1 1/1 Running 0 7m56s 10.244.1.44 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; governancedomain-soa-server1 1/1 Running 0 21m 10.244.1.43 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; You are now ready to configure an Ingress to direct traffic for your OIG domain as per Configure an ingress for an OIG domain.\n  "
},
{
	"uri": "/fmw-kubernetes/idm-products/enterprise-deployments/enterprise-deployment-automation/",
	"title": "b. Enterprise Deployment Guide Automation Scripts",
	"tags": [],
	"description": "The Enterprise Deployment Automation scripts deploy the entire Oracle Identity and Access Management suite in a production environment automatically",
	"content": "Enterprise Deployment Automation The Enterprise Deployment Automation scripts allow you to deploy the entire Oracle Identity and Access Management 12.2.1.4 Suite in a production environment. You can use the scripts to:\n Automate the creation of a Kubernetes cluster on Oracle Cloud Infrastructure (OCI), ready for the deployment of Oracle Identity and Access Management products. See Automating the OCI Infrastructure Creation for the Identity and Access Management Kubernetes Cluster. Automate the deployment of Oracle Identity and Access Management products on any compliant Kubernetes cluster. See Automating the Identity and Access Management Enterprise Deployment.  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/post-install-config/install_and_configure_connectors/",
	"title": "b. Install and configure connectors",
	"tags": [],
	"description": "Install and Configure Connectors.",
	"content": "Download the connector   Download the Connector you are interested in from Oracle Identity Manager Connector Downloads.\n  Copy the connector zip file to a staging directory on the master node e.g. \u0026lt;workdir\u0026gt;/stage and unzip it:\n$ cp $HOME/Downloads/\u0026lt;connector\u0026gt;.zip \u0026lt;workdir\u0026gt;/\u0026lt;stage\u0026gt;/ $ cd \u0026lt;workdir\u0026gt;/\u0026lt;stage\u0026gt; $ unzip \u0026lt;connector\u0026gt;.zip $ chmod -R 755 * For example:\n$ cp $HOME/Downloads/Exchange-12.2.1.3.0.zip /scratch/OIGK8S/stage/ $ cd /scratch/OIGK8S/stage/ $ unzip exchange-12.2.1.3.0.zip $ chmod -R 755 *   Copy OIG connectors There are two options to copy OIG Connectors to your Kubernetes cluster:\n a) Copy the connector directly to the Persistent Volume b) Use the kubectl cp command to copy the connector to the Persistent Volume  It is recommended to use option a), however there may be cases, for example when using a Managed Service such as Oracle Kubernetes Engine on Oracle Cloud Infrastructure, where it may not be feasible to directly mount the domain directory. In such cases option b) should be used.\na) Copy the connector directly to the persistent volume   Copy the connector zip file to the persistent volume. For example:\n$ cp -R \u0026lt;path_to\u0026gt;/\u0026lt;connector\u0026gt; \u0026lt;persistent_volume\u0026gt;/governancedomainpv/ConnectorDefaultDirectory/ For example:\n$ cp -R /scratch/OIGK8S/stage/Exchange-12.2.1.3.0 /scratch/shared/governancedomainpv/ConnectorDefaultDirectory/   b) Use the kubectl cp command to copy the connector to the persistent volume   Run the following command to copy over the connector:\n$ kubectl -n \u0026lt;domain_namespace\u0026gt; cp \u0026lt;path_to\u0026gt;/\u0026lt;connector\u0026gt; \u0026lt;cluster_name\u0026gt;:/u01/oracle/idm/server/ConnectorDefaultDirectory/ For example:\n$ kubectl -n oigns cp /scratch/OIGK8S/stage/Exchange-12.2.1.3.0 governancedomain-oim-server1:/u01/oracle/idm/server/ConnectorDefaultDirectory/   Install the connector The connectors are installed as they are on a standard on-premises setup, via Application On Boarding or via Connector Installer.\nRefer to your Connector specific documentation for instructions.\n"
},
{
	"uri": "/fmw-kubernetes/ohs/manage-ohs-containers/modfy-ohs-config/",
	"title": "b. Modifying the OHS container",
	"tags": [],
	"description": "Learn about modifying the OHS configuration.",
	"content": "This document shows how to modify the OHS configuration after the OHS container is deployed.\nModifying the deployed OHS container configuration can be achieved in the following ways:\na. Editing the configuration files in $MYOHSFILES/ohsConfig.\nb. Running kubectl edit configmap.\nEditing the configuration files in the $MYOHSFILES/ohsConfig To edit the configuration files:\n  Edit the required files in the $MYOHSFILES/ohsConfig directories.\n  Delete the configmaps for any files you have changed. For example if you have changed httpd.conf and files in moduleconf, run:\n$ kubectl delete cm ohs-httpd -n ohsns $ kubectl delete cm ohs-config -n ohsns   Recreate the required configmaps:\n$ cd $MYOHSFILES $ kubectl create cm -n ohsns ohs-httpd --from-file=ohsConfig/httpconf $ kubectl create cm -n ohsns ohs-config --from-file=ohsConfig/moduleconf   Find the name of the existing OHS pod:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods -n ohsns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-vkp4s 1/1 Running 0 55s   Delete the pod using the following command:\n$ kubectl delete pod \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl delete pod ohs-domain-d5b648bc5-vkp4s -n ohsns The output will look similar to the following:\npod \u0026quot;ohs-domain-d5b648bc5-vkp4s\u0026quot; deleted   Run the following command to make sure the pod has restarted:\n$ kubectl get pods -n ohsns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-gdvnp 1/1 Running 0 39s   Running kubectl edit configmap   Run the following command to edit the OHS configuration:\n$ kubectl edit configmap \u0026lt;configmap\u0026gt; -n \u0026lt;namespace\u0026gt; Where \u0026lt;configmap\u0026gt; is either ohs-httpd or ohs-config to modify the httpd.conf and moduleconf files respectively.\nFor example:\n$ kubectl edit configmap ohs-httpd -n ohsns Note: This opens an edit session for the configmap where parameters can be changed using standard vi commands.\n  In the edit session, edit the required parameters accordingly. Save the file and exit (:wq!).\n  Find the name of the existing OHS pod:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods -n ohsns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-vkp4s 1/1 Running 0 2h33s   Delete the pod using the following command:\n$ kubectl delete pod \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl delete pod ohs-domain-d5b648bc5-vkp4s -n ohsns The output will look similar to the following:\npod \u0026quot;ohs-domain-d5b648bc5-vkp4s\u0026quot; deleted   Run the following command to make sure the pod has restarted:\n$ kubectl get pods -n ohsns -w The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-gdvnp 1/1 Running 0 39s   "
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/patch-and-upgrade/patch-an-image/",
	"title": "b. Patch an image",
	"tags": [],
	"description": "Instructions on how to update your OAM Kubernetes cluster with a new OAM container image.",
	"content": "Choose one of the following options to update your OAM kubernetes cluster to use the new image:\n Run the kubectl edit domain command Run the kubectl patch domain command  In all of the above cases, the WebLogic Kubernetes Operator will restart the Administration Server pod first and then perform a rolling restart on the OAM Managed Servers.\nNote: If you are not using Oracle Container Registry or your own container registry, then you must first load the new container image on all nodes in your Kubernetes cluster.\nRun the kubectl edit domain command   To update the domain with the kubectl edit domain command, run the following:\n$ kubectl edit domain \u0026lt;domainname\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl edit domain accessdomain -n oamns If using Oracle Container Registry or your own container registry for your OAM container image, update the image to point at the new image, for example:\ndomainHomeInImage: false image: container-registry.oracle.com/middleware/oam_cpu:\u0026lt;tag\u0026gt; imagePullPolicy: IfNotPresent If you are not using a container registry and have loaded the image on each of the master and worker nodes, update the image to point at the new image:\ndomainHomeInImage: false image: oracle/oam:\u0026lt;tag\u0026gt; imagePullPolicy: IfNotPresent   Save the file and exit (:wq!)\n  Run the kubectl patch command   To update the domain with the kubectl patch domain command, run the following:\n$ kubectl patch domain \u0026lt;domain\u0026gt; -n \u0026lt;namespace\u0026gt; --type merge -p \u0026#39;{\u0026#34;spec\u0026#34;:{\u0026#34;image\u0026#34;:\u0026#34;newimage:tag\u0026#34;}}\u0026#39; For example, if using Oracle Container Registry or your own container registry for your OAM container image:\n$ kubectl patch domain accessdomain -n oamns --type merge -p \u0026#39;{\u0026#34;spec\u0026#34;:{\u0026#34;image\u0026#34;:\u0026#34;container-registry.oracle.com/middleware/oam_cpu:\u0026lt;tag\u0026gt;\u0026#34;}}\u0026#39; For example, if you are not using a container registry and have loaded the image on each of the master and worker nodes:\n$ kubectl patch domain accessdomain -n oamns --type merge -p \u0026#39;{\u0026#34;spec\u0026#34;:{\u0026#34;image\u0026#34;:\u0026#34;oracle/oam:\u0026lt;tag\u0026gt;\u0026#34;}}\u0026#39; The output will look similar to the following:\ndomain.weblogic.oracle/accessdomain patched   "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/patch-and-upgrade/patch-an-image/",
	"title": "b. Patch an image",
	"tags": [],
	"description": "Instructions on how to update your OIG Kubernetes cluster with a new OIG container image.",
	"content": "Introduction The OIG domain patching script automatically performs the update of your OIG Kubernetes cluster with a new OIG container image.\nNote: Before following the steps below, you must have upgraded to WebLogic Kubernetes Operator 4.X.X.\nThe script executes the following steps sequentially:\n Checks if the helper pod exists in the given namespace. If yes, then it deletes the helper pod. Brings up a new helper pod with the new image. Stops the Administration Server, SOA and OIM managed servers using serverStartPolicy set as Never in the domain definition yaml. Waits for all servers to be stopped (default timeout 2000s) Introspects database properties including credentials from the job configmap or RCU Secrets. Performs database schema changes from the helper pod Starts the Administration Server, SOA and OIM managed servers by setting serverStartPolicy to IfNeeded and image to new image tag. Waits for all the servers to be ready (default timeout 2000s)  The script exits with a failure if a configurable timeout is reached before the target pod count is reached, depending upon the domain configuration. It also exits if there is any failure while patching the database schema and domain.\nNote: The script execution will cause downtime while patching the OIG deployment and database schemas.\nPrerequisites Before you begin, perform the following steps:\n  Review the Domain resource documentation.\n  Ensure that you have a running OIG deployment in your cluster.\n  Ensure that the database is up and running.\n  Download the latest code repository Download the latest code repository as follows:\n  Create a working directory to setup the source code.\n$ mkdir \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/OIGK8Slatest   Download the latest OIG deployment scripts from the OIG repository.\n$ cd \u0026lt;workdir\u0026gt; $ git clone https://github.com/oracle/fmw-kubernetes.git For example:\n$ cd /scratch/OIGK8Slatest $ git clone https://github.com/oracle/fmw-kubernetes.git   Set the $WORKDIR environment variable as follows:\n$ export WORKDIR=\u0026lt;workdir\u0026gt;/fmw-kubernetes/OracleIdentityGovernance For example:\n$ export WORKDIR=/scratch/OIGK8Slatest/fmw-kubernetes/OracleIdentityGovernance   Run the patch domain script   Run the patch domain script as follows. Specify the inputs required by the script. If you need help understanding the inputs run the command help -h.\n$ cd $WORKDIR/kubernetes/domain-lifecycle $ ./patch_oig_domain.sh -h $ ./patch_oig_domain.sh -i \u0026lt;target_image_tag\u0026gt; -n \u0026lt;oig_namespace\u0026gt; For example:\n$ cd $WORKDIR/kubernetes/domain-lifecycle $ ./patch_oig_domain.sh -h $ ./patch_oig_domain.sh -i 12.2.1.4-jdk8-ol8-\u0026lt;January`25\u0026gt; -n oigns The output will look similar to the following\n[INFO] Found domain name: governancedomain [INFO] Image Registry: container-registry.oracle.com/middleware/oig_cpu [INFO] Domain governancedomain is currently running with image: container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol7-\u0026lt;October`24\u0026gt; current no of pods under governancedomain are 3 [INFO] The pod helper already exists in namespace oigns. [INFO] Deleting pod helper pod \u0026quot;helper\u0026quot; deleted [INFO] Fetched Image Pull Secret: orclcred [INFO] Creating new helper pod with image: container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January'25\u0026gt; pod/helper created Checking helper Running [INFO] Stopping Admin, SOA and OIM servers in domain governancedomain. This may take some time, monitor log /scratch/OIGK8Slatest/fmw-kubernetes/OracleIdentityGovernance/kubernetes/domain-lifecycle/log/oim_patch_log-\u0026lt;DATE\u0026gt;/stop_servers.log for details [INFO] All servers are now stopped successfully. Proceeding with DB Schema changes [INFO] Patching OIM schemas... [INFO] DB schema update successful. Check log /scratch/OIGK8Slatest/fmw-kubernetes/OracleIdentityGovernance/kubernetes/domain-lifecycle/log/oim_patch_log-\u0026lt;DATE\u0026gt;/patch_oim_wls.log for details [INFO] Starting Admin, SOA and OIM servers with new image container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January'25\u0026gt; [INFO] Waiting for 3 weblogic pods to be ready..This may take several minutes, do not close the window. Check log /scratch/OIGK8Slatest/fmw-kubernetes/OracleIdentityGovernance/kubernetes/domain-lifecycle/log/oim_patch_log-\u0026lt;DATE\u0026gt;/monitor_weblogic_pods.log for progress [SUCCESS] All servers under governancedomain are now in ready state with new image: container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;January'25\u0026gt; The logs are available at $WORKDIR/kubernetes/domain-lifecycle by default. A custom log location can also be provided to the script.\nNote: If the patch domain script creation fails, refer to the Troubleshooting section.\n  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oudsm/patch-and-upgrade/upgrade-elk/",
	"title": "b. Upgrade Elasticsearch and Kibana",
	"tags": [],
	"description": "Instructions on how to upgrade Elastic Search and Kibana.",
	"content": "This section shows how to upgrade Elasticsearch and Kibana.\nTo determine if this step is required for the version you are upgrading from, refer to the Release Notes.\nDownload the latest code repository Download the latest code repository as follows:\n  Create a working directory to setup the source code.\n$ mkdir \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/OUDSMK8SJan25   Download the latest OUDSM deployment scripts from the OUDSM repository.\n$ cd \u0026lt;workdir\u0026gt; $ git clone https://github.com/oracle/fmw-kubernetes.git For example:\n$ cd /scratch/OUDSMK8SJan25 $ git clone https://github.com/oracle/fmw-kubernetes.git   Set the $WORKDIR environment variable as follows:\n$ export WORKDIR=\u0026lt;workdir\u0026gt;/fmw-kubernetes/OracleUnifiedDirectorySM For example:\n$ export WORKDIR=/scratch/OUDSMK8SJan25/fmw-kubernetes/OracleUnifiedDirectorySM   Undeploy Elasticsearch and Kibana From October 22 (22.4.1) onwards, OUDSM logs should be stored on a centralized Elasticsearch and Kibana (ELK) stack.\nDeployments prior to October 22 (22.4.1) used local deployments of Elasticsearch and Kibana.\nIf you are upgrading from July 22 (22.3.1) or earlier, to January 25 (25.1.1), you must first undeploy Elasticsearch and Kibana using the steps below:\n  Navigate to the $WORKDIR/kubernetes/helm directory and create a logging-override-values-uninstall.yaml with the following:\nelk: enabled: false   Run the following command to remove the existing ELK deployment:\n$ helm upgrade --namespace \u0026lt;domain_namespace\u0026gt; --values \u0026lt;valuesfile.yaml\u0026gt; \u0026lt;releasename\u0026gt; oudsm --reuse-values For example:\n$ helm upgrade --namespace oudsmns --values logging-override-values-uninstall.yaml oudsm oudsm --reuse-values   Deploy Elasticsearch and Kibana in centralized stack  Follow Install Elasticsearch stack and Kibana to deploy Elasticsearch and Kibana in a centralized stack.  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/configure-ingress/ingress-nginx-setup-for-oig-domain-setup-on-k8s-ssl/",
	"title": "b. Using an Ingress with NGINX (SSL)",
	"tags": [],
	"description": "Steps to set up an Ingress for NGINX to direct traffic to the OIG domain using SSL.",
	"content": "Setting up an ingress for NGINX for the OIG domain on Kubernetes The instructions below explain how to set up NGINX as an ingress for the OIG domain with SSL termination.\nNote: All the steps below should be performed on the master node.\n  Create a SSL certificate\na. Generate SSL certificate\nb. Create a Kubernetes secret for SSL\n  Install NGINX\na. Configure the repository\nb. Create a namespace\nc. Install NGINX using helm\n  Create an ingress for the domain\n  Verify that you can access the domain URL\n  Create a SSL certificate Generate SSL certificate   Generate a private key and certificate signing request (CSR) using a tool of your choice. Send the CSR to your certificate authority (CA) to generate the certificate.\nIf you want to use a certificate for testing purposes you can generate a self signed certificate using openssl:\n$ mkdir \u0026lt;workdir\u0026gt;/ssl $ cd \u0026lt;workdir\u0026gt;/ssl $ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj \u0026#34;/CN=\u0026lt;nginx-hostname\u0026gt;\u0026#34; For example:\n$ mkdir /scratch/OIGK8S/ssl $ cd /scratch/OIGK8S/ssl $ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj \u0026#34;/CN=masternode.example.com\u0026#34; Note: The CN should match the host.domain of the master node in order to prevent hostname problems during certificate verification.\nThe output will look similar to the following:\nGenerating a 2048 bit RSA private key ..........................................+++ .......................................................................................................+++ writing new private key to 'tls.key' -----   Create a Kubernetes secret for SSL   Create a secret for SSL containing the SSL certificate by running the following command:\n$ kubectl -n oigns create secret tls \u0026lt;domain_uid\u0026gt;-tls-cert --key \u0026lt;workdir\u0026gt;/tls.key --cert \u0026lt;workdir\u0026gt;/tls.crt For example:\n$ kubectl -n oigns create secret tls governancedomain-tls-cert --key /scratch/OIGK8S/ssl/tls.key --cert /scratch/OIGK8S/ssl/tls.crt The output will look similar to the following:\nsecret/governancedomain-tls-cert created   Confirm that the secret is created by running the following command:\n$ kubectl get secret \u0026lt;domain_uid\u0026gt;-tls-cert -o yaml -n oigns For example:\n$ kubectl get secret governancedomain-tls-cert -o yaml -n oigns The output will look similar to the following:\napiVersion: v1 data: tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lKQUl3ZjVRMWVxZnljTUEwR0NTcUdTSWIzRFFFQkN3VUFNQ0V4SHpBZEJnTlYKQkFNTUZtUmxiakF4WlhadkxuVnpMbTl5WVdOc1pTNWpiMjB3SGhjTk1qQXdPREV3TVRReE9UUXpXaGNOTWpFdwpPREV3TVRReE9UUXpXakFoTVI4d0hRWURWUVFEREJaa1pXNHdNV1YyYnk1MWN5NXZjbUZqYkdVdVkyOXRNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEyY0lpVUhwcTRVZzBhaGR6aXkycHY2cHQKSVIza2s5REd2eVRNY0syaWZQQ2dtUU5CdHV6VXNFN0l4c294eldITmU5RFpXRXJTSjVON3Ym1lTzJkMVd2NQp1aFhzbkFTbnkwY1N9xVDNQSlpDVk1MK0llZVFKdnhaVjZaWWU4V2FFL1NQSGJzczRjYy9wcG1mc3pxCnErUi83cXEyMm9ueHNHaE9vQ1h1TlQvMFF2WXVzMnNucGtueWRKRHUxelhGbDREYkFIZGMvamNVK0NPWWROeS8KT3Iza2JIV0FaTkR4OWxaZUREOTRmNXZLcUF2V0FkSVJZa2UrSmpNTHg0VHo2ZlM0VXoxbzdBSTVuSApPQ1ZMblV5U0JkaGVuWTNGNEdFU0wwbnorVlhFWjRWVjRucWNjRmo5cnJ0Q29pT1BBNlgvNGdxMEZJbi9Qd0lECkFRQUJvMUF3VGpBZEJnTlZIUTRFRmdRVWw1VnVpVDBDT0xGTzcxMFBlcHRxSC9DRWZyY3dId1lEVlIwakJCZ3cKRm9BVWw1VnVpVDBDT0xGTzcxMFBlcHRxSC9DRWZyY3dEQVlEVlIwVEJBVXdBd0VCL3pBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFXdEN4b2ZmNGgrWXZEcVVpTFFtUnpqQkVBMHJCOUMwL1FWOG9JQzJ3d1hzYi9KaVNuMHdOCjNMdHppejc0aStEbk1yQytoNFQ3enRaSkc3NVluSGRKcmxQajgzVWdDLzhYTlFCSUNDbTFUa3RlVU1jWG0reG4KTEZEMHpReFhpVzV0N1FHcWtvK2FjeTlhUnUvN3JRMXlNSE9HdVVkTTZETzErNXF4cTdFNXFMamhyNEdKejV5OAoraW8zK25UcUVKMHFQOVRocG96RXhBMW80OEY0ZHJybWdqd3ROUldEQVpBYmYyV1JNMXFKWXhxTTJqdU1FQWNsCnFMek1TdEZUQ2o1UGFTQ0NUV1VEK3ZlSWtsRWRpaFdpRm02dzk3Y1diZ0lGMlhlNGk4L2szMmF1N2xUTDEvd28KU3Q2dHpsa20yV25uUFlVMzBnRURnVTQ4OU02Z1dybklpZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV1d0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktVd2dnU2hBZ0VBQW9JQkFRRFp3aUpRZW1yaFNEUnEKRjNPTExhbS9xbTBoSGVTVDBNYS9KTXh3cmFKODhLQ1pBMEcyN05Td1Rzakd5akhOWWMxNzBObFlTdEluazN1cApkdVo0N1ozVmEvbTZGZXljQktmTFJ4SW84NnIwSmhQYzhsa0pVd3Y0aDU1QW0vRmxYcGxoN3hab1Q5SThkdXl6Cmh4eittbVorek9xcjVIL3VxcmJhaWZHd2FFNmdKZTQxUC9SQzlpNnpheWVtU2ZKMGtPN1hOY1dYZ05zQWQxeisKTnhUNEk1aDAzTDg2dmVSc2RZQmswUEgyVmw0TVAzaC9tOHFWdW5mK1NvQzlZQjBoRmlSNzRtTXd2SGhQUHA5TApoVFBXanNBam1jYzRKVXVkVEpJRjJGNmRqY1hnWVJJdlNmUDVWY1JuaFZYaWVweHdXUDJ1dTBLaUk0OERwZi9pCkNyUVVpZjgvQWdNQkFBRUNnZjl6cnE2TUVueTFNYWFtdGM2c0laWU1QSDI5R2lSVVlwVXk5bG1sZ3BqUHh3V0sKUkRDay9Td0FmZG9yd1Q2ejNVRk1oYWJ4UU01a04vVjZFYkJlamQxT15bjdvWTVEQWJRRTR3RG9SZWlrVApONndWU0FrVC92Z1RXc1RqRlY1bXFKMCt6U2ppOWtySkZQNVNRN1F2cUswQ3BHRlNhVjY2dW8ycktiNmJWSkJYCkxPZmZPMytlS0tVazBaTnE1Q1NVQk9mbnFoNVFJSGdpaDNiMTRlNjB6bndrNWhaMHBHZE9BQm9aTkoKZ21lanUyTEdzVWxXTjBLOVdsUy9lcUllQzVzQm9jaWlocmxMVUpGWnpPRUV6LzErT2cyemhmT29yTE9rMTIrTgpjQnV0cTJWQ2I4ZFJDaFg1ZzJ0WnBrdzgzcXN5RSt3M09zYlQxa0VDZ1lFQTdxUnRLWGFONUx1SENvWlM1VWhNCm1WcnYxTEg0eGNhaDJIZnMksrMHJqQkJONGpkZkFDMmF3R3ZzU1EyR0lYRzVGYmYyK0pwL1kxbktKOEgKZU80MzNLWVgwTDE4NlNNLzFVay9HSEdTek1CWS9KdGR6WkRrbTA4UnBwaTl4bExTeDBWUWtFNVJVcnJJcTRJVwplZzBOM2RVTHZhTVl1UTBrR2dncUFETUNnWUVBNlpqWCtjU2VMZ1BVajJENWRpUGJ1TmVFd2RMeFNPZDFZMUFjCkUzQ01YTWozK2JxQ3BGUVIrTldYWWVuVmM1QiszajlSdHVnQ0YyTkNSdVdkZWowalBpL243UExIRHdCZVY0bVIKM3VQVHJmamRJbFovSFgzQ2NjVE94TmlaajU4VitFdkRHNHNHOGxtRTRieStYRExIYTJyMWxmUk9sUVRMSyswVgpyTU93eU1VQ2dZRUF1dm14WGM4NWxZRW9hU0tkU0cvQk9kMWlYSUtmc2VDZHRNT2M1elJ0UXRsSDQwS0RscE54CmxYcXBjbVc3MWpyYzk1RzVKNmE1ZG5xTE9OSFZoWW8wUEpmSXhPU052RXI2MTE5NjRBMm5sZXRHYlk0M0twUkEKaHBPRHlmdkZoSllmK29kaUJpZFUyL3ZBMCtUczNSUHJzRzBSOUVDOEZqVDNaZVhaNTF1R0xPa0NnWUFpTmU0NwplQjRxWXdrNFRsMTZmZG5xQWpaQkpLR05xY2c1V1R3alpMSkp6R3owdCtuMkl4SFd2WUZFSjdqSkNmcHFsaDlqCmlDcjJQZVV3K09QTlNUTG1JcUgydzc5L1pQQnNKWXVsZHZ4RFdGVWFlRXg1aHpkNDdmZlNRRjZNK0NHQmthYnIKVzdzU3R5V000ZFdITHpDaGZMS20yWGJBd0VqNUQrbkN1WTRrZVFLQmdFSkRHb0puM1NCRXcra2xXTE85N09aOApnc3lYQm9mUW1lRktIS2NHNzFZUFhJbTRlV1kyUi9KOCt5anc5b1FJQ3o5NlRidkdSZEN5QlJhbWhoTmFGUzVyCk9MZUc0ejVENE4zdThUc0dNem9QcU13KzBGSXJiQ3FzTnpGWTg3ekZweEdVaXZvRWZLNE82YkdERTZjNHFqNGEKNmlmK0RSRSt1TWRMWTQyYTA3ekoKLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo= kind: Secret metadata: creationTimestamp: \u0026quot;\u0026lt;DATE\u0026gt;\u0026quot; name: governancedomain-tls-cert namespace: oigns resourceVersion: \u0026quot;3319899\u0026quot; uid: 274cc960-281a-494c-a3e3-d93c3abd051f type: kubernetes.io/tls   Install NGINX Use helm to install NGINX.\nConfigure the repository   Add the Helm chart repository for installing NGINX using the following command:\n$ helm repo add stable https://kubernetes.github.io/ingress-nginx The output will look similar to the following:\n\u0026quot;stable\u0026quot; has been added to your repositories   Update the repository using the following command:\n$ helm repo update The output will look similar to the following:\nHang tight while we grab the latest from your chart repositories... ...Successfully got an update from the \u0026quot;stable\u0026quot; chart repository Update Complete. Happy Helming!   Create a namespace   Create a Kubernetes namespace for NGINX:\n$ kubectl create namespace nginxssl The output will look similar to the following:\nnamespace/nginxssl created   Install NGINX using helm If you can connect directly to the master node IP address from a browser, then install NGINX with the --set controller.service.type=NodePort parameter.\nIf you are using a Managed Service for your Kubernetes cluster, for example Oracle Kubernetes Engine (OKE) on Oracle Cloud Infrastructure (OCI), and connect from a browser to the Load Balancer IP address, then use the --set controller.service.type=LoadBalancer parameter. This instructs the Managed Service to setup a Load Balancer to direct traffic to the NGINX ingress.\n  To install NGINX use the following helm command depending on if you are using NodePort or LoadBalancer:\na) Using NodePort\n$ helm install nginx-ingress -n nginxssl --set controller.extraArgs.default-ssl-certificate=oigns/governancedomain-tls-cert --set controller.service.type=NodePort --set controller.admissionWebhooks.enabled=false stable/ingress-nginx --version 4.7.2 The output will look similar to the following:\nNAME: nginx-ingress LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: nginxssl STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The nginx-ingress controller has been installed. Get the application URL by running these commands: export HTTP_NODE_PORT=$(kubectl --namespace nginxssl get services -o jsonpath=\u0026quot;{.spec.ports[0].nodePort}\u0026quot; nginx-ingress-controller) export HTTPS_NODE_PORT=$(kubectl --namespace nginxssl get services -o jsonpath=\u0026quot;{.spec.ports[1].nodePort}\u0026quot; nginx-ingress-controller) export NODE_IP=$(kubectl --namespace nginxssl get nodes -o jsonpath=\u0026quot;{.items[0].status.addresses[1].address}\u0026quot;) echo \u0026quot;Visit http://$NODE_IP:$HTTP_NODE_PORT to access your application via HTTP.\u0026quot; echo \u0026quot;Visit https://$NODE_IP:$HTTPS_NODE_PORT to access your application via HTTPS.\u0026quot; An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1 kind: Ingress metadata: annotations: kubernetes.io/ingress.class: nginx name: example namespace: foo spec: ingressClassName: example-class rules: - host: www.example.com http: paths: - path: / pathType: Prefix backend: serviceName: exampleService servicePort: 80 path: / # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls b) Using LoadBalancer\n$ helm install nginx-ingress -n nginxssl --set controller.extraArgs.default-ssl-certificate=oigns/governancedomain-tls-cert --set controller.service.type=LoadBalancer --set controller.admissionWebhooks.enabled=false stable/ingress-nginx --version 4.7.2 The output will look similar to the following:\nNAME: nginx-ingress LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: nginxssl STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The ingress-nginx controller has been installed. It may take a few minutes for the LoadBalancer IP to be available. You can watch the status by running 'kubectl --namespace nginxssl get services -o wide -w nginx-ingress-ingress-nginx-controller' An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1 kind: Ingress metadata: annotations: kubernetes.io/ingress.class: nginx name: example namespace: foo spec: rules: - host: www.example.com http: paths: - path: / pathType: Prefix backend: service: name: exampleService port: 80 # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls   Setup routing rules for the domain   Setup routing rules by running the following commands:\n$ cd $WORKDIR/kubernetes/charts/ingress-per-domain Edit values.yaml and change the domainUID parameter to match your domainUID, for example domainUID: governancedomain. Change sslType to SSL. The file should look as follows:\n# Load balancer type. Supported values are: NGINX type: NGINX # SSL configuration Type. Supported Values are : NONSSL,SSL sslType: SSL # domainType. Supported values are: oim domainType: oim #WLS domain as backend to the load balancer wlsDomain: domainUID: governancedomain adminServerName: AdminServer adminServerPort: 7001 adminServerSSLPort: soaClusterName: soa_cluster soaManagedServerPort: 8001 soaManagedServerSSLPort: oimClusterName: oim_cluster oimManagedServerPort: 14000 oimManagedServerSSLPort: # Host specific values hostName: enabled: false admin: runtime: internal: # Ngnix specific values nginx: nginxTimeOut: 180   Create an ingress for the domain   Create an Ingress for the domain (governancedomain-nginx), in the domain namespace by using the sample Helm chart:\n$ cd $WORKDIR $ helm install governancedomain-nginx kubernetes/charts/ingress-per-domain --namespace oigns --values kubernetes/charts/ingress-per-domain/values.yaml Note: The $WORKDIR/kubernetes/charts/ingress-per-domain/templates/nginx-ingress-ssl.yaml has nginx.ingress.kubernetes.io/enable-access-log set to false. If you want to enable access logs then set this value to true before executing the command. Enabling access-logs can cause issues with disk space if not regularly maintained.\nFor example:\n$ cd $WORKDIR $ helm install governancedomain-nginx kubernetes/charts/ingress-per-domain --namespace oigns --values kubernetes/charts/ingress-per-domain/values.yaml The output will look similar to the following:\nNAME: governancedomain-nginx LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oigns STATUS: deployed REVISION: 1 TEST SUITE: None   Run the following command to show the ingress is created successfully:\n$ kubectl get ing -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get ing -n oigns The output will look similar to the following:\nNAME CLASS HOSTS ADDRESS PORTS AGE governancedomain-nginx \u0026lt;none\u0026gt; * x.x.x.x 80 49s   Find the node port of NGINX using the following command:\n$ kubectl get services -n nginxssl -o jsonpath=\u0026#34;{.spec.ports[1].nodePort}\u0026#34; nginx-ingress-ingress-nginx-controller The output will look similar to the following:\n32033   Run the following command to check the ingress:\n$ kubectl describe ing governancedomain-nginx -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe ing governancedomain-nginx -n oigns The output will look similar to the following:\nName: governancedomain-nginx Namespace: oigns Address: 10.111.175.104 Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) Rules: Host Path Backends ---- ---- -------- * /console governancedomain-adminserver:7001 (10.244.2.50:7001) /consolehelp governancedomain-adminserver:7001 (10.244.2.50:7001) /em governancedomain-adminserver:7001 (10.244.2.50:7001) /ws_utc governancedomain-cluster-soa-cluster:8001 (10.244.2.51:8001) /soa governancedomain-cluster-soa-cluster:8001 (10.244.2.51:8001) /integration governancedomain-cluster-soa-cluster:8001 (10.244.2.51:8001) /soa-infra governancedomain-cluster-soa-cluster:8001 (10.244.2.51:8001) /identity governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /admin governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /oim governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /sysadmin governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /workflowservice governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /callbackResponseService governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /spml-xsd governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /HTTPClnt governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /reqsvc governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /iam governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /provisioning-callback governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /CertificationCallbackService governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /ucs governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /FacadeWebApp governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /OIGUI governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /weblogic governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) Annotations: meta.helm.sh/release-name: governancedomain-nginx meta.helm.sh/release-namespace: oigns nginx.ingress.kubernetes.io/affinity: cookie nginx.ingress.kubernetes.io/affinity-mode: persistent nginx.ingress.kubernetes.io/configuration-snippet: more_clear_input_headers \u0026quot;WL-Proxy-Client-IP\u0026quot; \u0026quot;WL-Proxy-SSL\u0026quot;; more_set_input_headers \u0026quot;X-Forwarded-Proto: https\u0026quot;; more_set_input_headers \u0026quot;WL-Proxy-SSL: true\u0026quot;; nginx.ingress.kubernetes.io/enable-access-log: false nginx.ingress.kubernetes.io/ingress.allow-http: false nginx.ingress.kubernetes.io/proxy-buffer-size: 2000k nginx.ingress.kubernetes.io/proxy-read-timeout: 180 nginx.ingress.kubernetes.io/proxy-send-timeout: 180 nginx.ingress.kubernetes.io/session-cookie-name: sticky Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 18s (x2 over 38s) nginx-ingress-controller Scheduled for sync   To confirm that the new Ingress is successfully routing to the domain\u0026rsquo;s server pods, run the following command to send a request to the URL for the WebLogic ReadyApp framework:\nNote: If using a load balancer for your ingress replace ${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT} with ${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT}.\n$ curl -v -k https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/weblogic/ready For example:\n$ curl -v -k https://masternode.example.com:32033/weblogic/ready The output will look similar to the following:\n$ curl -v -k https://masternode.example.com:32033/weblogic/ready * About to connect() to X.X.X.X port 32033 (#0) * Trying X.X.X.X... * Connected to masternode.example.com (X.X.X.X) port 32033 (#0) * Initializing NSS with certpath: sql:/etc/pki/nssdb * skipping SSL peer certificate verification * SSL connection using TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 * Server certificate: * subject: CN=masternode.example.com * start date: \u0026lt;DATE\u0026gt; * expire date: \u0026lt;DATE\u0026gt; * common name: masternode.example.com * issuer: CN=masternode.example.com \u0026gt; GET /weblogic/ready HTTP/1.1 \u0026gt; User-Agent: curl/7.29.0 \u0026gt; Host: X.X.X.X:32033 \u0026gt; Accept: */* \u0026gt; \u0026lt; HTTP/1.1 200 OK \u0026lt; Server: nginx/1.19.1 \u0026lt; Date: \u0026lt;DATE\u0026gt; \u0026lt; Content-Length: 0 \u0026lt; Connection: keep-alive \u0026lt; Strict-Transport-Security: max-age=15724800; includeSubDomains \u0026lt; * Connection #0 to host X.X.X.X left intact   Verify that you can access the domain URL After setting up the NGINX ingress, verify that the domain applications are accessible through the NGINX ingress port (for example 32033) as per Validate Domain URLs \n"
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/manage-oam-domains/wlst-admin-operations/",
	"title": "b. WLST Administration Operations",
	"tags": [],
	"description": "Describes the steps for WLST administration using helper pod running in the same Kubernetes Cluster as OAM Domain.",
	"content": "To use WLST to administer the OAM domain, use a helper pod in the same Kubernetes cluster as the OAM Domain.\n  Check to see if the helper pod exists by running:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; | grep helper For example:\n$ kubectl get pods -n oamns | grep helper The output should look similar to the following:\nhelper 1/1 Running 0 26h If the helper pod doesn\u0026rsquo;t exist then see Step 1 in Prepare your environment  to create it.\n  Run the following command to start a bash shell in the helper pod:\n$ kubectl exec -it helper -n \u0026lt;domain_namespace\u0026gt; -- /bin/bash For example:\n$ kubectl exec -it helper -n oamns -- /bin/bash This will take you into a bash shell in the running helper pod:\n[oracle@helper ~]$   Connect to WLST using the following command:\n$ cd $ORACLE_HOME/oracle_common/common/bin $ ./wlst.sh The output will look similar to the following:\nInitializing WebLogic Scripting Tool (WLST) ... Jython scans all the jar files it can find at first startup. Depending on the system, this process may take a few minutes to complete, and WLST may not return a prompt right away. Welcome to WebLogic Server Administration Scripting Shell Type help() for help on available commands wls:/offline\u0026gt;   To access t3 for the Administration Server connect as follows:\nwls:/offline\u0026gt; connect(\u0026#39;weblogic\u0026#39;,\u0026#39;\u0026lt;password\u0026gt;\u0026#39;,\u0026#39;t3://accessdomain-adminserver:7001\u0026#39;) The output will look similar to the following:\nConnecting to t3://accessdomain-adminserver:7001 with userid weblogic ... Successfully connected to Admin Server \u0026quot;AdminServer\u0026quot; that belongs to domain \u0026quot;accessdomain\u0026quot;. Warning: An insecure protocol was used to connect to the server. To ensure on-the-wire security, the SSL port or Admin port should be used instead. wls:/accessdomain/serverConfig/\u0026gt; Or to access t3 for the OAM Cluster service, connect as follows:\nconnect(\u0026#39;weblogic\u0026#39;,\u0026#39;\u0026lt;password\u0026gt;\u0026#39;,\u0026#39;t3://accessdomain-cluster-oam-cluster:14100\u0026#39;) The output will look similar to the following:\nConnecting to t3://accessdomain-cluster-oam-cluster:14100 with userid weblogic ... Successfully connected to managed Server \u0026quot;oam_server1\u0026quot; that belongs to domain \u0026quot;accessdomain\u0026quot;. Warning: An insecure protocol was used to connect to the server. To ensure on-the-wire security, the SSL port or Admin port should be used instead. wls:/accessdomain/serverConfig/\u0026gt;   Sample operations For a full list of WLST operations refer to WebLogic Server WLST Online and Offline Command Reference.\nDisplay servers wls:/accessdomain/serverConfig/\u0026gt; cd(\u0026#39;/Servers\u0026#39;) wls:/accessdomain/serverConfig/Servers\u0026gt; ls() dr-- AdminServer dr-- oam_policy_mgr1 dr-- oam_policy_mgr2 dr-- oam_policy_mgr3 dr-- oam_policy_mgr4 dr-- oam_policy_mgr5 dr-- oam_server1 dr-- oam_server2 dr-- oam_server3 dr-- oam_server4 dr-- oam_server5 wls:/accessdomain/serverConfig/Servers\u0026gt; Configure logging for managed servers Connect to the Administration Server and run the following:\nwls:/accessdomain/serverConfig/\u0026gt; domainRuntime() Location changed to domainRuntime tree. This is a read-only tree with DomainMBean as the root MBean. For more help, use help(\u0026#39;domainRuntime\u0026#39;) wls:/accessdomain/domainRuntime/\u0026gt; wls:/accessdomain/domainRuntime/\u0026gt; listLoggers(pattern=\u0026#34;oracle.oam.*\u0026#34;,target=\u0026#34;oam_server1\u0026#34;) ------------------------------------------+----------------- Logger | Level ------------------------------------------+----------------- oracle.oam | \u0026lt;Inherited\u0026gt; oracle.oam.admin.foundation.configuration | \u0026lt;Inherited\u0026gt; oracle.oam.admin.service.config | \u0026lt;Inherited\u0026gt; oracle.oam.agent | \u0026lt;Inherited\u0026gt; oracle.oam.agent-default | \u0026lt;Inherited\u0026gt; oracle.oam.audit | \u0026lt;Inherited\u0026gt; oracle.oam.binding | \u0026lt;Inherited\u0026gt; oracle.oam.certvalidation | \u0026lt;Inherited\u0026gt; oracle.oam.certvalidation.mbeans | \u0026lt;Inherited\u0026gt; oracle.oam.common.healthcheck | \u0026lt;Inherited\u0026gt; oracle.oam.common.runtimeent | \u0026lt;Inherited\u0026gt; oracle.oam.commonutil | \u0026lt;Inherited\u0026gt; oracle.oam.config | \u0026lt;Inherited\u0026gt; oracle.oam.controller | \u0026lt;Inherited\u0026gt; oracle.oam.default | \u0026lt;Inherited\u0026gt; oracle.oam.diagnostic | \u0026lt;Inherited\u0026gt; oracle.oam.engine.authn | \u0026lt;Inherited\u0026gt; oracle.oam.engine.authz | \u0026lt;Inherited\u0026gt; oracle.oam.engine.policy | \u0026lt;Inherited\u0026gt; oracle.oam.engine.ptmetadata | \u0026lt;Inherited\u0026gt; oracle.oam.engine.session | \u0026lt;Inherited\u0026gt; oracle.oam.engine.sso | \u0026lt;Inherited\u0026gt; oracle.oam.esso | \u0026lt;Inherited\u0026gt; oracle.oam.extensibility.lifecycle | \u0026lt;Inherited\u0026gt; oracle.oam.foundation.access | \u0026lt;Inherited\u0026gt; oracle.oam.idm | \u0026lt;Inherited\u0026gt; oracle.oam.install | \u0026lt;Inherited\u0026gt; oracle.oam.install.bootstrap | \u0026lt;Inherited\u0026gt; oracle.oam.install.mbeans | \u0026lt;Inherited\u0026gt; oracle.oam.ipf.rest.api | \u0026lt;Inherited\u0026gt; oracle.oam.oauth | \u0026lt;Inherited\u0026gt; oracle.oam.plugin | \u0026lt;Inherited\u0026gt; oracle.oam.proxy.oam | \u0026lt;Inherited\u0026gt; oracle.oam.proxy.oam.workmanager | \u0026lt;Inherited\u0026gt; oracle.oam.proxy.opensso | \u0026lt;Inherited\u0026gt; oracle.oam.pswd.service.provider | \u0026lt;Inherited\u0026gt; oracle.oam.replication | \u0026lt;Inherited\u0026gt; oracle.oam.user.identity.provider | \u0026lt;Inherited\u0026gt; wls:/accessdomain/domainRuntime/\u0026gt; Set the log level to TRACE:32:\nwls:/accessdomain/domainRuntime/\u0026gt; setLogLevel(target=\u0026#39;oam_server1\u0026#39;,logger=\u0026#39;oracle.oam\u0026#39;,level=\u0026#39;TRACE:32\u0026#39;,persist=\u0026#34;1\u0026#34;,addLogger=1) wls:/accessdomain/domainRuntime/\u0026gt; wls:/accessdomain/domainRuntime/\u0026gt; listLoggers(pattern=\u0026#34;oracle.oam.*\u0026#34;,target=\u0026#34;oam_server1\u0026#34;) ------------------------------------------+----------------- Logger | Level ------------------------------------------+----------------- oracle.oam | TRACE:32 oracle.oam.admin.foundation.configuration | \u0026lt;Inherited\u0026gt; oracle.oam.admin.service.config | \u0026lt;Inherited\u0026gt; oracle.oam.agent | \u0026lt;Inherited\u0026gt; oracle.oam.agent-default | \u0026lt;Inherited\u0026gt; oracle.oam.audit | \u0026lt;Inherited\u0026gt; oracle.oam.binding | \u0026lt;Inherited\u0026gt; oracle.oam.certvalidation | \u0026lt;Inherited\u0026gt; oracle.oam.certvalidation.mbeans | \u0026lt;Inherited\u0026gt; oracle.oam.common.healthcheck | \u0026lt;Inherited\u0026gt; oracle.oam.common.runtimeent | \u0026lt;Inherited\u0026gt; oracle.oam.commonutil | \u0026lt;Inherited\u0026gt; oracle.oam.config | \u0026lt;Inherited\u0026gt; oracle.oam.controller | \u0026lt;Inherited\u0026gt; oracle.oam.default | \u0026lt;Inherited\u0026gt; oracle.oam.diagnostic | \u0026lt;Inherited\u0026gt; oracle.oam.engine.authn | \u0026lt;Inherited\u0026gt; oracle.oam.engine.authz | \u0026lt;Inherited\u0026gt; oracle.oam.engine.policy | \u0026lt;Inherited\u0026gt; oracle.oam.engine.ptmetadata | \u0026lt;Inherited\u0026gt; oracle.oam.engine.session | \u0026lt;Inherited\u0026gt; oracle.oam.engine.sso | \u0026lt;Inherited\u0026gt; oracle.oam.esso | \u0026lt;Inherited\u0026gt; oracle.oam.extensibility.lifecycle | \u0026lt;Inherited\u0026gt; oracle.oam.foundation.access | \u0026lt;Inherited\u0026gt; oracle.oam.idm | \u0026lt;Inherited\u0026gt; oracle.oam.install | \u0026lt;Inherited\u0026gt; oracle.oam.install.bootstrap | \u0026lt;Inherited\u0026gt; oracle.oam.install.mbeans | \u0026lt;Inherited\u0026gt; oracle.oam.ipf.rest.api | \u0026lt;Inherited\u0026gt; oracle.oam.oauth | \u0026lt;Inherited\u0026gt; oracle.oam.plugin | \u0026lt;Inherited\u0026gt; oracle.oam.proxy.oam | \u0026lt;Inherited\u0026gt; oracle.oam.proxy.oam.workmanager | \u0026lt;Inherited\u0026gt; oracle.oam.proxy.opensso | \u0026lt;Inherited\u0026gt; oracle.oam.pswd.service.provider | \u0026lt;Inherited\u0026gt; oracle.oam.replication | \u0026lt;Inherited\u0026gt; oracle.oam.user.identity.provider | \u0026lt;Inherited\u0026gt; wls:/accessdomain/domainRuntime/\u0026gt; Verify that TRACE:32 log level is set by connecting to the Administration Server and viewing the logs:\n$ kubectl exec -it accessdomain-adminserver -n oamns -- /bin/bash [oracle@accessdomain-adminserver oracle]$ [oracle@accessdomain-adminserver oracle]$ cd /u01/oracle/user_projects/domains/accessdomain/servers/oam_server1/logs [oracle@accessdomain-adminserver logs]$ tail oam_server1-diagnostic.log [\u0026lt;DATE\u0026gt;] [oam_server1] [TRACE:32] [] [oracle.oam.config] [tid: Configuration Store Observer] [userId: \u0026lt;anonymous\u0026gt;] [ecid: 8b3ac37b-c7cf-46dd-aeee-5ed67886be21-0000000b,0:1795] [APP: oam_server] [partition-name: DOMAIN] [tenant-name: GLOBAL] [SRC_CLASS: oracle.security.am.admin.config.util.observable.ObservableConfigStore$StoreWatcher] [SRC_METHOD: run] Start of run before start of detection at 1,635,848,774,793. Detector: oracle.security.am.admin.config.util.observable.DbStoreChangeDetector:Database configuration store:DSN:jdbc/oamds. Monitor: { StoreMonitor: { disabled: \u0026#39;false\u0026#39; } } [\u0026lt;DATE\u0026gt;] [oam_server1] [TRACE] [] [oracle.oam.config] [tid: Configuration Store Observer] [userId: \u0026lt;anonymous\u0026gt;] [ecid: 8b3ac37b-c7cf-46dd-aeee-5ed67886be21-0000000b,0:1795] [APP: oam_server] [partition-name: DOMAIN] [tenant-name: GLOBAL] [SRC_CLASS: oracle.security.am.admin.config.util.store.StoreUtil] [SRC_METHOD: getContainerProperty] Configuration property CONFIG_HISTORY not specified [\u0026lt;DATE\u0026gt;] [oam_server1] [TRACE] [] [oracle.oam.config] [tid: Configuration Store Observer] [userId: \u0026lt;anonymous\u0026gt;] [ecid: 8b3ac37b-c7cf-46dd-aeee-5ed67886be21-0000000b,0:1795] [APP: oam_server] [partition-name: DOMAIN] [tenant-name: GLOBAL] [SRC_CLASS: oracle.security.am.admin.config.util.store.StoreUtil] [SRC_METHOD: getContainerProperty] Configuration property CONFIG not specified [\u0026lt;DATE\u0026gt;] [oam_server1] [TRACE:32] [] [oracle.oam.config] [tid: Configuration Store Observer] [userId: \u0026lt;anonymous\u0026gt;] [ecid: 8b3ac37b-c7cf-46dd-aeee-5ed67886be21-0000000b,0:1795] [APP: oam_server] [partition-name: DOMAIN] [tenant-name: GLOBAL] [SRC_CLASS: oracle.security.am.admin.config.util.store.DbStore] [SRC_METHOD: getSelectSQL] SELECT SQL:SELECT version from IDM_OBJECT_STORE where id = ? and version = (select max(version) from IDM_OBJECT_STORE where id = ?) [\u0026lt;DATE\u0026gt;] [oam_server1] [TRACE] [] [oracle.oam.config] [tid: Configuration Store Observer] [userId: \u0026lt;anonymous\u0026gt;] [ecid: 8b3ac37b-c7cf-46dd-aeee-5ed67886be21-0000000b,0:1795] [APP: oam_server] [partition-name: DOMAIN] [tenant-name: GLOBAL] [SRC_CLASS: oracle.security.am.admin.config.util.store.DbStore] [SRC_METHOD: load] Time (ms) to load key CONFIG:-1{FIELD_TYPES=INT, SELECT_FIELDS=SELECT version from IDM_OBJECT_STORE }:4 Performing WLST Administration via SSL   By default the SSL port is not enabled for the Administration Server or OAM Managed Servers. To configure the SSL port for the Administration Server and Managed Servers login to WebLogic Administration console https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/console and navigate to Lock \u0026amp; Edit -\u0026gt; Environment -\u0026gt;Servers -\u0026gt; server_name -\u0026gt;Configuration -\u0026gt; General -\u0026gt; SSL Listen Port Enabled -\u0026gt; Provide SSL Port ( For Administration Server: 7002 and for OAM Managed Server (oam_server1): 14101) - \u0026gt; Save -\u0026gt; Activate Changes.\nNote: If configuring the OAM Managed Servers for SSL you must enable SSL on the same port for all servers (oam_server1 through oam_server5)\n  Create a myscripts directory as follows:\n$ cd $WORKDIR/kubernetes/ $ mkdir myscripts $ cd myscripts For example:\n$ cd $WORKDIR/kubernetes/ $ mkdir myscripts $ cd myscripts   Create a sample yaml template file in the myscripts directory called \u0026lt;domain_uid\u0026gt;-adminserver-ssl.yaml to create a Kubernetes service for the Administration Server:\nNote: Update the domainName, domainUID and namespace based on your environment. For example:\napiVersion: v1 kind: Service metadata: labels: serviceType: SERVER weblogic.domainName: accessdomain weblogic.domainUID: accessdomain weblogic.resourceVersion: domain-v2 weblogic.serverName: AdminServer name: accessdomain-adminserverssl namespace: oamns spec: clusterIP: None ports: - name: default port: 7002 protocol: TCP targetPort: 7002 selector: weblogic.createdByOperator: \u0026quot;true\u0026quot; weblogic.domainUID: accessdomain weblogic.serverName: AdminServer type: ClusterIP and the following sample yaml template file \u0026lt;domain_uid\u0026gt;-oamcluster-ssl.yaml for the OAM Managed Server:\napiVersion: v1 kind: Service metadata: labels: serviceType: SERVER weblogic.domainName: accessdomain weblogic.domainUID: accessdomain weblogic.resourceVersion: domain-v2 name: accessdomain-oamcluster-ssl namespace: oamns spec: clusterIP: None ports: - name: default port: 14101 protocol: TCP targetPort: 14101 selector: weblogic.clusterName: oam_cluster weblogic.createdByOperator: \u0026quot;true\u0026quot; weblogic.domainUID: accessdomain type: ClusterIP   Apply the template using the following command for the AdminServer:\n$ kubectl apply -f \u0026lt;domain_uid\u0026gt;-adminserver-ssl.yaml For example:\n$ kubectl apply -f accessdomain-adminserver-ssl.yaml service/accessdomain-adminserverssl created and using the following command for the OAM Managed Server:\n$ kubectl apply -f \u0026lt;domain_uid\u0026gt;-oamcluster-ssl.yaml For example:\n$ kubectl apply -f accessdomain-oamcluster-ssl.yaml service/accessdomain-oamcluster-ssl created   Validate that the Kubernetes Services to access SSL ports are created successfully:\n$ kubectl get svc -n \u0026lt;domain_namespace\u0026gt; |grep ssl For example:\n$ kubectl get svc -n oamns |grep ssl The output will look similar to the following:\naccessdomain-adminserverssl ClusterIP None \u0026lt;none\u0026gt; 7002/TCP 102s accessdomain-oamcluster-ssl ClusterIP None \u0026lt;none\u0026gt; 14101/TCP 35s   Inside the bash shell of the running helper pod, run the following:\n[oracle@helper bin]$ export WLST_PROPERTIES=\u0026#34;-Dweblogic.security.SSL.ignoreHostnameVerification=true -Dweblogic.security.TrustKeyStore=DemoTrust\u0026#34; [oracle@helper bin]$ cd /u01/oracle/oracle_common/common/bin [oracle@helper bin]$ ./wlst.sh Initializing WebLogic Scripting Tool (WLST) ... Welcome to WebLogic Server Administration Scripting Shell Type help() for help on available commands wls:/offline\u0026gt; To connect to the Administration Server t3s service:\nwls:/offline\u0026gt; connect(\u0026#39;weblogic\u0026#39;,\u0026#39;\u0026lt;password\u0026gt;\u0026#39;,\u0026#39;t3s://accessdomain-adminserverssl:7002\u0026#39;) Connecting to t3s://accessdomain-adminserverssl:7002 with userid weblogic ... \u0026lt;\u0026lt;DATE\u0026gt;\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090905\u0026gt; \u0026lt;Disabling the CryptoJ JCE Provider self-integrity check for better startup performance. To enable this check, specify -Dweblogic.security.allowCryptoJDefaultJCEVerification=true.\u0026gt; \u0026lt;\u0026lt;DATE\u0026gt;\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090906\u0026gt; \u0026lt;Changing the default Random Number Generator in RSA CryptoJ from ECDRBG128 to HMACDRBG. To disable this change, specify -Dweblogic.security.allowCryptoJDefaultPRNG=true.\u0026gt; \u0026lt;\u0026lt;DATE\u0026gt;\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090909\u0026gt; \u0026lt;Using the configured custom SSL Hostname Verifier implementation: weblogic.security.utils.SSLWLSHostnameVerifier$NullHostnameVerifier.\u0026gt; Successfully connected to Admin Server \u0026#34;AdminServer\u0026#34; that belongs to domain \u0026#34;accessdomain\u0026#34;. wls:/accessdomain/serverConfig/\u0026gt; To connect to the OAM Managed Server t3s service:\nwls:/offline\u0026gt; connect(\u0026#39;weblogic\u0026#39;,\u0026#39;\u0026lt;password\u0026gt;\u0026#39;,\u0026#39;t3s://accessdomain-oamcluster-ssl:14101\u0026#39;) Connecting to t3s://accessdomain-oamcluster-ssl:14101 with userid weblogic ... \u0026lt;\u0026lt;DATE\u0026gt;\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090905\u0026gt; \u0026lt;Disabling the CryptoJ JCE Provider self-integrity check for better startup performance. To enable this check, specify -Dweblogic.security.allowCryptoJDefaultJCEVerification=true.\u0026gt; \u0026lt;\u0026lt;DATE\u0026gt;\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090906\u0026gt; \u0026lt;Changing the default Random Number Generator in RSA CryptoJ from ECDRBG128 to HMACDRBG. To disable this change, specify -Dweblogic.security.allowCryptoJDefaultPRNG=true.\u0026gt; \u0026lt;\u0026lt;DATE\u0026gt;\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090909\u0026gt; \u0026lt;Using the configured custom SSL Hostname Verifier implementation: weblogic.security.utils.SSLWLSHostnameVerifier$NullHostnameVerifier.\u0026gt; Successfully connected to managed Server \u0026#34;oam_server1\u0026#34; that belongs to domain \u0026#34;accessdomain\u0026#34;.   "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/manage-oig-domains/wlst-admin-operations/",
	"title": "b. WLST administration operations",
	"tags": [],
	"description": "Describes the steps for WLST administration using helper pod running in the same Kubernetes Cluster as OIG Domain.",
	"content": "Invoke WLST and access Administration Server To use WLST to administer the OIG domain, use a helper pod in the same Kubernetes cluster as the OIG Domain.\n  Check to see if the helper pod exists by running:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; | grep helper For example:\n$ kubectl get pods -n oigns | grep helper The output should look similar to the following:\nhelper 1/1 Running 0 26h If the helper pod doesn\u0026rsquo;t exist then see Step 1 in Prepare your environment  to create it.\n  Run the following command to start a bash shell in the helper pod:\n$ kubectl exec -it helper -n \u0026lt;domain_namespace\u0026gt; -- /bin/bash For example:\n$ kubectl exec -it helper -n oigns -- /bin/bash This will take you into a bash shell in the running helper pod:\n[oracle@helper ~]$   Connect to WLST using the following commands:\n[oracle@helper ~]$ cd $ORACLE_HOME/oracle_common/common/bin [oracle@helper ~]$ ./wlst.sh The output will look similar to the following:\nInitializing WebLogic Scripting Tool (WLST) ... Jython scans all the jar files it can find at first startup. Depending on the system, this process may take a few minutes to complete, and WLST may not return a prompt right away. Welcome to WebLogic Server Administration Scripting Shell Type help() for help on available commands wls:/offline\u0026gt;   To access t3 for the Administration Server connect as follows:\nwls:/offline\u0026gt; connect(\u0026#39;weblogic\u0026#39;,\u0026#39;\u0026lt;password\u0026gt;\u0026#39;,\u0026#39;t3://governancedomain-adminserver:7001\u0026#39;) The output will look similar to the following:\nConnecting to t3://governancedomain-adminserver:7001 with userid weblogic ... Successfully connected to Admin Server \u0026quot;AdminServer\u0026quot; that belongs to domain \u0026quot;governancedomain\u0026quot;. Warning: An insecure protocol was used to connect to the server. To ensure on-the-wire security, the SSL port or Admin port should be used instead. wls:/governancedomain/serverConfig/\u0026gt; Or to access t3 for the OIG Cluster service, connect as follows:\nwls:/offline\u0026gt; connect(\u0026#39;weblogic\u0026#39;,\u0026#39;\u0026lt;password\u0026gt;\u0026#39;,\u0026#39;t3://governancedomain-cluster-oim-cluster:14000\u0026#39;) The output will look similar to the following:\nConnecting to t3://governancedomain-cluster-oim-cluster:14000 with userid weblogic ... Successfully connected to managed Server \u0026quot;oim_server1\u0026quot; that belongs to domain \u0026quot;governancedomain\u0026quot;. Warning: An insecure protocol was used to connect to the server. To ensure on-the-wire security, the SSL port or Admin port should be used instead. wls:/governancedomain/serverConfig/\u0026gt;   Sample operations For a full list of WLST operations refer to WebLogic Server WLST Online and Offline Command Reference.\nDisplay servers wls:/governancedomain/serverConfig/\u0026gt; cd('/Servers') wls:/governancedomain/serverConfig/Servers\u0026gt; ls () dr-- AdminServer dr-- oim_server1 dr-- oim_server2 dr-- oim_server3 dr-- oim_server4 dr-- oim_server5 dr-- soa_server1 dr-- soa_server2 dr-- soa_server3 dr-- soa_server4 dr-- soa_server5 wls:/governancedomain/serverConfig/Servers\u0026gt; Performing WLST administration via SSL   By default the SSL port is not enabled for the Administration Server or OIG Managed Servers. To configure the SSL port for the Administration Server and Managed Servers login to WebLogic Administration console https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/console and navigate to Lock \u0026amp; Edit -\u0026gt; Environment -\u0026gt;Servers -\u0026gt; server_name -\u0026gt;Configuration -\u0026gt; General -\u0026gt; SSL Listen Port Enabled -\u0026gt; Provide SSL Port ( For Administration Server: 7002 and for OIG Managed Server (oim_server1): 14101) - \u0026gt; Save -\u0026gt; Activate Changes.\nNote: If configuring the OIG Managed Servers for SSL you must enable SSL on the same port for all servers (oim_server1 through oim_server4)\n  Create a myscripts directory as follows:\n$ cd $WORKDIR/kubernetes $ mkdir myscripts $ cd myscripts   Create a sample yaml template file in the myscripts directory called \u0026lt;domain_uid\u0026gt;-adminserver-ssl.yaml to create a Kubernetes service for the Administration Server:\nNote: Update the domainName, domainUID and namespace based on your environment.\napiVersion: v1 kind: Service metadata: labels: serviceType: SERVER weblogic.domainName: governancedomain weblogic.domainUID: governancedomain weblogic.resourceVersion: domain-v2 weblogic.serverName: AdminServer name: governancedomain-adminserver-ssl namespace: oigns spec: clusterIP: None ports: - name: default port: 7002 protocol: TCP targetPort: 7002 selector: weblogic.createdByOperator: \u0026quot;true\u0026quot; weblogic.domainUID: governancedomain weblogic.serverName: AdminServer type: ClusterIP and create the following sample yaml template file \u0026lt;domain_uid\u0026gt;-oim-cluster-ssl.yaml for the OIG Managed Server:\napiVersion: v1 kind: Service metadata: labels: serviceType: SERVER weblogic.domainName: governancedomain weblogic.domainUID: governancedomain weblogic.resourceVersion: domain-v2 name: governancedomain-cluster-oim-cluster-ssl namespace: oigns spec: clusterIP: None ports: - name: default port: 14101 protocol: TCP targetPort: 14101 selector: weblogic.clusterName: oim_cluster weblogic.createdByOperator: \u0026quot;true\u0026quot; weblogic.domainUID: governancedomain type: ClusterIP   Apply the template using the following command for the Administration Server:\n$ kubectl apply -f governancedomain-adminserver-ssl.yaml service/governancedomain-adminserver-ssl created or using the following command for the OIG Managed Server:\n$ kubectl apply -f governancedomain-oim-cluster-ssl.yaml service/governancedomain-cluster-oim-cluster-ssl created   Validate that the Kubernetes Services to access SSL ports are created successfully:\n$ kubectl get svc -n \u0026lt;domain_namespace\u0026gt; |grep ssl For example:\n$ kubectl get svc -n oigns |grep ssl The output will look similar to the following:\ngovernancedomain-adminserver-ssl ClusterIP None \u0026lt;none\u0026gt; 7002/TCP 74s governancedomain-cluster-oim-cluster-ssl ClusterIP None \u0026lt;none\u0026gt; 14101/TCP 21s   Connect to a bash shell of the helper pod:\n$ kubectl exec -it helper -n oigns -- /bin/bash   In the bash shell run the following:\n[oracle@helper bin]$ export WLST_PROPERTIES=\u0026#34;-Dweblogic.security.SSL.ignoreHostnameVerification=true -Dweblogic.security.TrustKeyStore=DemoTrust\u0026#34; [oracle@helper bin]$ cd /u01/oracle/oracle_common/common/bin [oracle@helper bin]$ ./wlst.sh Initializing WebLogic Scripting Tool (WLST) ... Welcome to WebLogic Server Administration Scripting Shell Type help() for help on available commands wls:/offline\u0026gt; Connect to the Administration Server t3s service:\nwls:/offline\u0026gt; connect(\u0026#39;weblogic\u0026#39;,\u0026#39;\u0026lt;password\u0026gt;\u0026#39;,\u0026#39;t3s://governancedomain-adminserver-ssl:7002\u0026#39;) Connecting to t3s://governancedomain-adminserver-ssl:7002 with userid weblogic ... \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090905\u0026gt; \u0026lt;Disabling the CryptoJ JCE Provider self-integrity check for better startup performance. To enable this check, specify -Dweblogic.security.allowCryptoJDefaultJCEVerification=true.\u0026gt; \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090906\u0026gt; \u0026lt;Changing the default Random Number Generator in RSA CryptoJ from ECDRBG128 to HMACDRBG. To disable this change, specify -Dweblogic.security.allowCryptoJDefaultPRNG=true.\u0026gt; \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090909\u0026gt; \u0026lt;Using the configured custom SSL Hostname Verifier implementation: weblogic.security.utils.SSLWLSHostnameVerifier$NullHostnameVerifier.\u0026gt; Successfully connected to Admin Server \u0026#34;AdminServer\u0026#34; that belongs to domain \u0026#34;governancedomain\u0026#34;. wls:/governancedomain/serverConfig/\u0026gt; To connect to the OIG Managed Server t3s service:\nwls:/offline\u0026gt; connect(\u0026#39;weblogic\u0026#39;,\u0026#39;\u0026lt;password\u0026gt;\u0026#39;,\u0026#39;t3s://governancedomain-cluster-oim-cluster-ssl:14101\u0026#39;) Connecting to t3s://governancedomain-cluster-oim-cluster-ssl:14101 with userid weblogic ... \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090905\u0026gt; \u0026lt;Disabling the CryptoJ JCE Provider self-integrity check for better startup performance. To enable this check, specify -Dweblogic.security.allowCryptoJDefaultJCEVerification=true.\u0026gt; \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090906\u0026gt; \u0026lt;Changing the default Random Number Generator in RSA CryptoJ from ECDRBG128 to HMACDRBG. To disable this change, specify -Dweblogic.security.allowCryptoJDefaultPRNG=true.\u0026gt; \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090909\u0026gt; \u0026lt;Using the configured custom SSL Hostname Verifier implementation: weblogic.security.utils.SSLWLSHostnameVerifier$NullHostnameVerifier.\u0026gt; Successfully connected to managed Server \u0026#34;oim_server1\u0026#34; that belongs to domain \u0026#34;governancedomain\u0026#34;. wls:/governancedomain/serverConfig/\u0026gt;   "
},
{
	"uri": "/fmw-kubernetes/idm-products/oud/manage-oud-containers/monitoring-oud-instance/",
	"title": "c) Monitoring an Oracle Unified Directory Instance",
	"tags": [],
	"description": "Describes the steps for Monitoring the Oracle Unified Directory environment.",
	"content": " Introduction Install Prometheus and Grafana  Create a Kubernetes namespace Add Prometheus and Grafana Helm repositories Install the Prometheus operator View Prometheus and Grafana objects created Add the NodePort   Verify using Grafana GUI  Introduction After the Oracle Unified Directory instance (OUD) is set up you can monitor it using Prometheus and Grafana.\nInstall Prometheus and Grafana Create a Kubernetes namespace   Create a Kubernetes namespace to provide a scope for Prometheus and Grafana objects such as pods and services that you create in the environment. To create your namespace issue the following command:\n$ kubectl create namespace \u0026lt;namespace\u0026gt; For example:\n$ kubectl create namespace monitoring The output will look similar to the following:\nnamespace/monitoring created   Add Prometheus and Grafana Helm repositories   Add the Prometheus and Grafana Helm repositories by issuing the following command:\n$ helm repo add prometheus https://prometheus-community.github.io/helm-charts The output will look similar to the following:\n\u0026#34;prometheus\u0026#34; has been added to your repositories   Run the following command to update the repositories:\n$ helm repo update The output will look similar to the following:\nHang tight while we grab the latest from your chart repositories... ...Successfully got an update from the \u0026#34;stable\u0026#34; chart repository ...Successfully got an update from the \u0026#34;prometheus\u0026#34; chart repository ...Successfully got an update from the \u0026#34;prometheus-community\u0026#34; chart repository Update Complete. Happy Helming!   Install the Prometheus operator   Install the Prometheus operator using the helm command:\n$ helm install \u0026lt;release_name\u0026gt; prometheus/kube-prometheus-stack -n \u0026lt;namespace\u0026gt; For example:\n$ helm install monitoring prometheus/kube-prometheus-stack -n monitoring The output should look similar to the following:\nNAME: monitoring LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: monitoring STATUS: deployed REVISION: 1 NOTES: kube-prometheus-stack has been installed. Check its status by running: kubectl --namespace monitoring get pods -l \u0026#34;release=monitoring\u0026#34; Visit https://github.com/prometheus-operator/kube-prometheus for instructions on how to create \u0026amp; configure Alertmanager and Prometheus instances using the Operator. Note: If your cluster does not have access to the internet to pull external images, such as prometheus or grafana, you must load the images in a local container registry. You must then install as follows:\nhelm install --set grafana.image.registry=\u0026quot;container-registry.example.com\u0026quot; --set grafana.image.repository=\u0026quot;grafana/grafana\u0026quot; --set grafana.image.tag=8.4.2 monitoring prometheus/kube-prometheus-stack -n monitoring   View Prometheus and Grafana Objects created View the objects created for Prometheus and Grafana by issuing the following command:\n$ kubectl get all,service,pod -o wide -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get all,service,pod -o wide -n monitoring The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/alertmanager-monitoring-kube-prometheus-alertmanager-0 2/2 Running 0 36s 10.244.1.78 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-grafana-578f79599c-qc9gd 3/3 Running 0 47s 10.244.2.200 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-kube-prometheus-operator-65cdf7995-kndgg 1/1 Running 0 47s 10.244.2.199 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-kube-state-metrics-56bfd4f44f-85l4p 1/1 Running 0 47s 10.244.1.76 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-prometheus-node-exporter-g2x9g 1/1 Running 0 47s 100.102.48.121 \u0026lt;master-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-prometheus-node-exporter-p9kkq 1/1 Running 0 47s 100.102.48.84 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-prometheus-node-exporter-rzhrd 1/1 Running 0 47s 100.102.48.28 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/prometheus-monitoring-kube-prometheus-prometheus-0 2/2 Running 0 35s 10.244.1.79 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service/alertmanager-operated ClusterIP None \u0026lt;none\u0026gt; 9093/TCP,9094/TCP,9094/UDP 36s app.kubernetes.io/name=alertmanager service/monitoring-grafana ClusterIP 10.110.193.30 \u0026lt;none\u0026gt; 80/TCP 47s app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=grafana service/monitoring-kube-prometheus-alertmanager ClusterIP 10.104.2.37 \u0026lt;none\u0026gt; 9093/TCP 47s alertmanager=monitoring-kube-prometheus-alertmanager,app.kubernetes.io/name=alertmanager service/monitoring-kube-prometheus-operator ClusterIP 10.99.162.229 \u0026lt;none\u0026gt; 443/TCP 47s app=kube-prometheus-stack-operator,release=monitoring service/monitoring-kube-prometheus-prometheus ClusterIP 10.108.161.46 \u0026lt;none\u0026gt; 9090/TCP 47s app.kubernetes.io/name=prometheus,prometheus=monitoring-kube-prometheus-prometheus service/monitoring-kube-state-metrics ClusterIP 10.111.162.185 \u0026lt;none\u0026gt; 8080/TCP 47s app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=kube-state-metrics service/monitoring-prometheus-node-exporter ClusterIP 10.109.21.136 \u0026lt;none\u0026gt; 9100/TCP 47s app=prometheus-node-exporter,release=monitoring service/prometheus-operated ClusterIP None \u0026lt;none\u0026gt; 9090/TCP 35s app.kubernetes.io/name=prometheus NAME DESIRED CURRENT READY UP-TO-DATE AVAILABLE NODE SELECTOR AGE CONTAINERS IMAGES SELECTOR daemonset.apps/monitoring-prometheus-node-exporter 3 3 3 3 3 \u0026lt;none\u0026gt; 47s node-exporter quay.io/prometheus/node-exporter:v1.3.1 app=prometheus-node-exporter,release=monitoring NAME READY UP-TO-DATE AVAILABLE AGE CONTAINERS IMAGES SELECTOR deployment.apps/monitoring-grafana 1/1 1 1 47s grafana-sc-dashboard,grafana-sc-datasources,grafana quay.io/kiwigrid/k8s-sidecar:1.15.6,quay.io/kiwigrid/k8s-sidecar:1.15.6,grafana/grafana:8.4.2 app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=grafana deployment.apps/monitoring-kube-prometheus-operator 1/1 1 1 47s kube-prometheus-stack quay.io/prometheus-operator/prometheus-operator:v0.55.0 app=kube-prometheus-stack-operator,release=monitoring deployment.apps/monitoring-kube-state-metrics 1/1 1 1 47s kube-state-metrics k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.4.1 app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=kube-state-metrics NAME DESIRED CURRENT READY AGE CONTAINERS IMAGES SELECTOR replicaset.apps/monitoring-grafana-578f79599c 1 1 1 47s grafana-sc-dashboard,grafana-sc-datasources,grafana quay.io/kiwigrid/k8s-sidecar:1.15.6,quay.io/kiwigrid/k8s-sidecar:1.15.6,grafana/grafana:8.4.2 app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=grafana,pod-template-hash=578f79599c replicaset.apps/monitoring-kube-prometheus-operator-65cdf7995 1 1 1 47s kube-prometheus-stack quay.io/prometheus-operator/prometheus-operator:v0.55.0 app=kube-prometheus-stack-operator,pod-template-hash=65cdf7995,release=monitoring replicaset.apps/monitoring-kube-state-metrics-56bfd4f44f 1 1 1 47s kube-state-metrics k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.4.1 app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=kube-state-metrics,pod-template-hash=56bfd4f44f NAME READY AGE CONTAINERS IMAGES statefulset.apps/alertmanager-monitoring-kube-prometheus-alertmanager 1/1 36s alertmanager,config-reloader quay.io/prometheus/alertmanager:v0.23.0,quay.io/prometheus-operator/prometheus-config-reloader:v0.55.0 statefulset.apps/prometheus-monitoring-kube-prometheus-prometheus 1/1 35s prometheus,config-reloader quay.io/prometheus/prometheus:v2.33.5,quay.io/prometheus-operator/prometheus-config-reloader:v0.55.0 Add the NodePort   Edit the grafana service to add the NodePort:\n$ kubectl edit service/\u0026lt;deployment_name\u0026gt;-grafana -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl edit service/monitoring-grafana -n monitoring Note: This opens an edit session for the domain where parameters can be changed using standard vi commands.\nChange the ports entry and add nodePort: 30091 and type: NodePort:\n ports: - name: http-web nodePort: 30091 port: 80 protocol: TCP targetPort: 3000 selector: app.kubernetes.io/instance: monitoring app.kubernetes.io/name: grafana sessionAffinity: None type: NodePort   Save the file and exit (:wq).\n  Verify Using Grafana GUI   Access the Grafana GUI using http://\u0026lt;HostIP\u0026gt;:\u0026lt;nodeport\u0026gt; and login with admin/prom-operator. Change the password when prompted.\n  Download the K8 Cluster Detail Dashboard json file from: https://grafana.com/grafana/dashboards/10856.\n  Import the Grafana dashboard by navigating on the left hand menu to Dashboards \u0026gt; Import. Click Upload JSON file and select the json downloaded file. In the Prometheus drop down box select Prometheus. Click Import. The dashboard should be displayed.\n  Verify your installation by viewing some of the customized dashboard views.\n  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oudsm/manage-oudsm-containers/monitoring-oudsm-instance/",
	"title": "c) Monitoring an Oracle Unified Directory Services Manager Instance",
	"tags": [],
	"description": "Describes the steps for Monitoring the Oracle Unified Directory Services Manager environment.",
	"content": " Introduction Install Prometheus and Grafana  Create a Kubernetes namespace Add Prometheus and Grafana Helm repositories Install the Prometheus operator View Prometheus and Grafana Objects Created Add the NodePort   Verify Using Grafana GUI  Introduction After the Oracle Unified Directory Services Manager instance is set up you can monitor it using Prometheus and Grafana.\nInstall Prometheus and Grafana Create a Kubernetes namespace   Create a Kubernetes namespace to provide a scope for Prometheus and Grafana objects such as pods and services that you create in the environment. To create your namespace issue the following command:\n$ kubectl create namespace \u0026lt;namespace\u0026gt; For example:\n$ kubectl create namespace monitoring The output will look similar to the following:\nnamespace/monitoring created   Add Prometheus and Grafana Helm repositories   Add the Prometheus and Grafana Helm repositories by issuing the following command:\n$ helm repo add prometheus https://prometheus-community.github.io/helm-charts The output will look similar to the following:\n\u0026#34;prometheus\u0026#34; has been added to your repositories   Run the following command to update the repositories:\n$ helm repo update The output will look similar to the following:\nHang tight while we grab the latest from your chart repositories... ...Successfully got an update from the \u0026#34;stable\u0026#34; chart repository ...Successfully got an update from the \u0026#34;prometheus\u0026#34; chart repository ...Successfully got an update from the \u0026#34;prometheus-community\u0026#34; chart repository Update Complete. Happy Helming!   Install the Prometheus operator   Install the Prometheus operator using the helm command:\n$ helm install \u0026lt;release_name\u0026gt; prometheus/kube-prometheus-stack -n \u0026lt;namespace\u0026gt; For example:\n$ helm install monitoring prometheus/kube-prometheus-stack -n monitoring The output should look similar to the following:\nNAME: monitoring LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: monitoring STATUS: deployed REVISION: 1 NOTES: kube-prometheus-stack has been installed. Check its status by running: kubectl --namespace monitoring get pods -l \u0026#34;release=monitoring\u0026#34; Visit https://github.com/prometheus-operator/kube-prometheus for instructions on how to create \u0026amp; configure Alertmanager and Prometheus instances using the Operator. Note: If your cluster does not have access to the internet to pull external images, such as prometheus or grafana, you must load the images in a local container registry. You must then set install as follows:\nhelm install --set grafana.image.registry=\u0026quot;container-registry.example.com\u0026quot; --set grafana.image.repository=\u0026quot;grafana/grafana\u0026quot; --set grafana.image.tag=8.3.4 monitoring prometheus/kube-prometheus-stack -n monitoring   View Prometheus and Grafana Objects created View the objects created for Prometheus and Grafana by issuing the following command:\n$ kubectl get all,service,pod -o wide -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get all,service,pod -o wide -n monitoring The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/alertmanager-monitoring-kube-prometheus-alertmanager-0 2/2 Running 0 27s 10.244.2.141 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-grafana-578f79599c-qqdfb 3/3 Running 0 34s 10.244.1.127 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-kube-prometheus-operator-65cdf7995-w6btr 1/1 Running 0 34s 10.244.1.126 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-kube-state-metrics-56bfd4f44f-5ls8t 1/1 Running 0 34s 10.244.2.139 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-prometheus-node-exporter-5b2f6 1/1 Running 0 34s 100.102.48.84 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-prometheus-node-exporter-fw9xh 1/1 Running 0 34s 100.102.48.28 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-prometheus-node-exporter-s5n9g 1/1 Running 0 34s 100.102.48.121 \u0026lt;master-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/prometheus-monitoring-kube-prometheus-prometheus-0 2/2 Running 0 26s 10.244.1.128 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service/alertmanager-operated ClusterIP None \u0026lt;none\u0026gt; 9093/TCP,9094/TCP,9094/UDP 27s app.kubernetes.io/name=alertmanager service/monitoring-grafana ClusterIP 10.110.97.252 \u0026lt;none\u0026gt; 80/TCP 34s app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=grafana service/monitoring-kube-prometheus-alertmanager ClusterIP 10.110.82.176 \u0026lt;none\u0026gt; 9093/TCP 34s alertmanager=monitoring-kube-prometheus-alertmanager,app.kubernetes.io/name=alertmanager service/monitoring-kube-prometheus-operator ClusterIP 10.104.147.173 \u0026lt;none\u0026gt; 443/TCP 34s app=kube-prometheus-stack-operator,release=monitoring service/monitoring-kube-prometheus-prometheus ClusterIP 10.110.109.245 \u0026lt;none\u0026gt; 9090/TCP 34s app.kubernetes.io/name=prometheus,prometheus=monitoring-kube-prometheus-prometheus service/monitoring-kube-state-metrics ClusterIP 10.107.111.214 \u0026lt;none\u0026gt; 8080/TCP 34s app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=kube-state-metrics service/monitoring-prometheus-node-exporter ClusterIP 10.108.97.196 \u0026lt;none\u0026gt; 9100/TCP 34s app=prometheus-node-exporter,release=monitoring service/prometheus-operated ClusterIP None \u0026lt;none\u0026gt; 9090/TCP 26s app.kubernetes.io/name=prometheus NAME DESIRED CURRENT READY UP-TO-DATE AVAILABLE NODE SELECTOR AGE CONTAINERS IMAGES SELECTOR daemonset.apps/monitoring-prometheus-node-exporter 3 3 3 3 3 \u0026lt;none\u0026gt; 34s node-exporter quay.io/prometheus/node-exporter:v1.3.1 app=prometheus-node-exporter,release=monitoring NAME READY UP-TO-DATE AVAILABLE AGE CONTAINERS IMAGES SELECTOR deployment.apps/monitoring-grafana 0/1 1 0 34s grafana-sc-dashboard,grafana-sc-datasources,grafana quay.io/kiwigrid/k8s-sidecar:1.15.6,quay.io/kiwigrid/k8s-sidecar:1.15.6,grafana/grafana:8.4.2 app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=grafana deployment.apps/monitoring-kube-prometheus-operator 1/1 1 1 34s kube-prometheus-stack quay.io/prometheus-operator/prometheus-operator:v0.55.0 app=kube-prometheus-stack-operator,release=monitoring deployment.apps/monitoring-kube-state-metrics 1/1 1 1 34s kube-state-metrics k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.4.1 app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=kube-state-metrics NAME DESIRED CURRENT READY AGE CONTAINERS IMAGES SELECTOR replicaset.apps/monitoring-grafana-578f79599c 1 1 0 34s grafana-sc-dashboard,grafana-sc-datasources,grafana quay.io/kiwigrid/k8s-sidecar:1.15.6,quay.io/kiwigrid/k8s-sidecar:1.15.6,grafana/grafana:8.4.2 app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=grafana,pod-template-hash=578f79599c replicaset.apps/monitoring-kube-prometheus-operator-65cdf7995 1 1 1 34s kube-prometheus-stack quay.io/prometheus-operator/prometheus-operator:v0.55.0 app=kube-prometheus-stack-operator,pod-template-hash=65cdf7995,release=monitoring replicaset.apps/monitoring-kube-state-metrics-56bfd4f44f 1 1 1 34s kube-state-metrics k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.4.1 app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=kube-state-metrics,pod-template-hash=56bfd4f44f NAME READY AGE CONTAINERS IMAGES statefulset.apps/alertmanager-monitoring-kube-prometheus-alertmanager 1/1 27s alertmanager,config-reloader quay.io/prometheus/alertmanager:v0.23.0,quay.io/prometheus-operator/prometheus-config-reloader:v0.55.0 statefulset.apps/prometheus-monitoring-kube-prometheus-prometheus 1/1 26s prometheus,config-reloader quay.io/prometheus/prometheus:v2.33.5,quay.io/prometheus-operator/prometheus-config-reloader:v0.55.0 Add the NodePort   Edit the grafana service to add the NodePort:\n$ kubectl edit service/\u0026lt;deployment_name\u0026gt;-grafana -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl edit service/monitoring-grafana -n monitoring Note: This opens an edit session for the domain where parameters can be changed using standard vi commands.\nChange the ports entry and add nodePort: 30091 and type: NodePort:\n ports: - name: http-web nodePort: 30091 port: 80 protocol: TCP targetPort: 3000 selector: app.kubernetes.io/instance: monitoring app.kubernetes.io/name: grafana sessionAffinity: None type: NodePort   Save the file and exit (:wq).\n  Verify Using Grafana GUI   Access the Grafana GUI using http://\u0026lt;HostIP\u0026gt;:\u0026lt;nodeport\u0026gt; and login with admin/prom-operator. Change the password when prompted.\n  Download the K8 Cluster Detail Dashboard json file from: https://grafana.com/grafana/dashboards/10856.\n  Import the Grafana dashboard by navigating on the left hand menu to Dashboards \u0026gt; Import. Click Upload JSON file and select the json downloaded file. In the Prometheus drop down box select Prometheus. Click Import. The dashboard should be displayed.\n  Verify your installation by viewing some of the customized dashboard views.\n  "
},
{
	"uri": "/fmw-kubernetes/ohs/manage-ohs-containers/delete-ohs-container/",
	"title": "c. Delete the OHS container",
	"tags": [],
	"description": "Learn about the steps to delete the OHS container.",
	"content": "The following commands show how to remove the OHS container, OHS nodeport service, configmaps, secrets, and namespace:\n  Run the following command to delete the OHS nodeport service:\n$ kubectl delete -f $MYOHSFILES/ohs_service.yaml   Run the following command to delete the OHS container:\n$ kubectl delete -f $MYOHSFILES/ohs.yaml   Run the following commands to delete any configmaps you have created, for example:\n$ kubectl delete cm -n ohsns ohs-config $ kubectl delete cm -n ohsns ohs-httpd $ kubectl delete cm -n ohsns ohs-htdocs $ kubectl delete cm -n ohsns ohs-myapp $ kubectl delete cm -n ohsns webgate-config $ kubectl delete cm -n ohsns webgate-wallet $ kubectl delete cm -n ohsns ohs-wallet   Run the following command to delete the secrets:\n$ kubectl delete secret regcred -n ohsns $ kubectl delete secret ohs-secret -n ohsns   Run the following command to delete the namespace:\n$ kubectl delete namespace ohsns   "
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/manage-oam-domains/logging-and-visualization/",
	"title": "c. Logging and Visualization",
	"tags": [],
	"description": "Describes the steps for logging and visualization with Elasticsearch and Kibana.",
	"content": "After the OAM domain is set up you can publish operator and WebLogic Server logs into Elasticsearch and interact with them in Kibana.\nInstall Elasticsearch stack and Kibana If you do not already have a centralized Elasticsearch (ELK) stack then you must configure this first. For details on how to configure the ELK stack, follow Installing Elasticsearch (ELK) Stack and Kibana\nCreate the logstash pod Variables used in this chapter In order to create the logstash pod, you must create several files. These files contain variables which you must substitute with variables applicable to your environment.\nMost of the values for the variables will be based on your ELK deployment as per Installing Elasticsearch (ELK) Stack and Kibana.\nThe table below outlines the variables and values you must set:\n   Variable Sample Value Description     \u0026lt;ELK_VER\u0026gt; 8.3.1 The version of logstash you want to install.   \u0026lt;ELK_SSL\u0026gt; true If SSL is enabled for ELK set the value to true, or if NON-SSL set to false. This value must be lowercase.   \u0026lt;ELK_HOSTS\u0026gt; https://elasticsearch.example.com:9200 The URL for sending logs to Elasticsearch. HTTP if NON-SSL is used.   \u0026lt;ELKNS\u0026gt; oamns The domain namespace.   \u0026lt;ELK_USER\u0026gt; logstash_internal The name of the user for logstash to access Elasticsearch.   \u0026lt;ELK_PASSWORD\u0026gt; password The password for ELK_USER.   \u0026lt;ELK_APIKEY\u0026gt; apikey The API key details.    You will also need the BASE64 version of the Certificate Authority (CA) certificate(s) that signed the certificate of the Elasticsearch server. If using a self-signed certificate, this is the self signed certificate of the Elasticsearch server. See Copying the Elasticsearch Certificate for details on how to get the correct certificate. In the example below the certificate is called elk.crt.\nCreate Kubernetes secrets   Create a Kubernetes secret for Elasticsearch using the API Key or Password.\na) If ELK uses an API Key for authentication:\n$ kubectl create secret generic elasticsearch-pw-elastic -n \u0026lt;domain_namespace\u0026gt; --from-literal password=\u0026lt;ELK_APIKEY\u0026gt; For example:\n$ kubectl create secret generic elasticsearch-pw-elastic -n oamns --from-literal password=\u0026lt;ELK_APIKEY\u0026gt; The output will look similar to the following:\nsecret/elasticsearch-pw-elastic created b) If ELK uses a password for authentication:\n$ kubectl create secret generic elasticsearch-pw-elastic -n \u0026lt;domain_namespace\u0026gt; --from-literal password=\u0026lt;ELK_PASSWORD\u0026gt; For example:\n$ kubectl create secret generic elasticsearch-pw-elastic -n oamns --from-literal password=\u0026lt;ELK_PASSWORD\u0026gt; The output will look similar to the following:\nsecret/elasticsearch-pw-elastic created Note: It is recommended that the ELK Stack is created with authentication enabled. If no authentication is enabled you may create a secret using the values above.\n  Create a Kubernetes secret to access the required images on hub.docker.com:\nNote: Before executing the command below, you must first have a user account on hub.docker.com.\nkubectl create secret docker-registry \u0026#34;dockercred\u0026#34; --docker-server=\u0026#34;https://index.docker.io/v1/\u0026#34; \\ --docker-username=\u0026#34;\u0026lt;DOCKER_USER_NAME\u0026gt;\u0026#34; \\ --docker-password=\u0026lt;DOCKER_PASSWORD\u0026gt; --docker-email=\u0026lt;DOCKER_EMAIL_ID\u0026gt; \\ --namespace=\u0026lt;domain_namespace\u0026gt; For example,\nkubectl create secret docker-registry \u0026#34;dockercred\u0026#34; --docker-server=\u0026#34;https://index.docker.io/v1/\u0026#34; \\ --docker-username=\u0026#34;user@example.com\u0026#34; \\ --docker-password=password --docker-email=user@example.com \\ --namespace=oamns The output will look similar to the following:\nsecret/dockercred created   Find the mountPath details   Run the following command to get the mountPath of your domain:\n$ kubectl describe domains \u0026lt;domain_uid\u0026gt; -n \u0026lt;domain_namespace\u0026gt; | grep \u0026#34;Mount Path\u0026#34; For example:\n$ kubectl describe domains accessdomain -n oamns | grep \u0026#34;Mount Path\u0026#34; If you deployed OAM using WLST, the output will look similar to the following:\nMount Path: /u01/oracle/user_projects/domains If you deployed OAM using WDT, the output will look similar to the following:\nMount Path: /u01/oracle/user_projects   Find the Domain Home and Log Home details   Run the following command to get the Domain Home and Log Home of your domain:\n$ kubectl describe domains \u0026lt;domain_uid\u0026gt; -n \u0026lt;domain_namespace\u0026gt; | egrep \u0026#34;Domain Home: | Log Home:\u0026#34; ``\nFor example:\n$ kubectl describe domains accessdomain -n oamns | egrep \u0026#34;Domain Home: | Log Home:\u0026#34; ``\nThe output will look similar to the following:\nDomain Home: /u01/oracle/user_projects/domains/accessdomain Http Access Log In Log Home: true Log Home: /u01/oracle/user_projects/domains/logs/accessdomain   Find the persistentVolumeClaim details   Run the following command to get the OAM domain persistence volume details:\n$ kubectl get pv -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pv -n oamns The output will look similar to the following:\nNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE accessdomain-domain-pv 10Gi RWX Retain Bound oamns/accessdomain-domain-pvc accessdomain-domain-storage-class 23h Make note of the CLAIM value, for example in this case accessdomain-domain-pvc.\n  Create the Configmap   Copy the elk.crt file to the $WORKDIR/kubernetes/elasticsearch-and-kibana directory.\n  Navigate to the $WORKDIR/kubernetes/elasticsearch-and-kibana directory and run the following:\nkubectl create configmap elk-cert --from-file=elk.crt -n \u0026lt;namespace\u0026gt; For example:\nkubectl create configmap elk-cert --from-file=elk.crt -n oamns The output will look similar to the following:\nconfigmap/elk-cert created   Create a logstash_cm.yaml file in the $WORKDIR/kubernetes/elasticsearch-and-kibana directory as follows:\napiVersion: v1 kind: ConfigMap metadata: name: oam-logstash-configmap namespace: \u0026lt;ELKNS\u0026gt; data: logstash.yml: | #http.host: \u0026quot;0.0.0.0\u0026quot; logstash-config.conf: | input { file { path =\u0026gt; \u0026quot;\u0026lt;Log Home\u0026gt;/**/logs/AdminServer*.log\u0026quot; tags =\u0026gt; \u0026quot;Adminserver_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;\u0026lt;Log Home\u0026gt;/**/logs/oam_policy_mgr*.log\u0026quot; tags =\u0026gt; \u0026quot;Policymanager_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;\u0026lt;Log Home\u0026gt;/**/logs/oam_server*.log\u0026quot; tags =\u0026gt; \u0026quot;Oamserver_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;\u0026lt;Domain Home\u0026gt;/servers/AdminServer/logs/AdminServer-diagnostic.log\u0026quot; tags =\u0026gt; \u0026quot;Adminserver_diagnostic\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;\u0026lt;Domain Home\u0026gt;/servers/**/logs/oam_policy_mgr*-diagnostic.log\u0026quot; tags =\u0026gt; \u0026quot;Policy_diagnostic\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;\u0026lt;Domain Home\u0026gt;/servers/AdminServer/logs/auditlogs/OAM/audit.log\u0026quot; tags =\u0026gt; \u0026quot;Audit_logs\u0026quot; start_position =\u0026gt; beginning } } filter { grok { match =\u0026gt; [ \u0026quot;message\u0026quot;, \u0026quot;\u0026lt;%{DATA:log_timestamp}\u0026gt; \u0026lt;%{WORD:log_level}\u0026gt; \u0026lt;%{WORD:thread}\u0026gt; \u0026lt;%{HOSTNAME:hostname}\u0026gt; \u0026lt;%{HOSTNAME:servername}\u0026gt; \u0026lt;%{DATA:timer}\u0026gt; \u0026lt;\u0026lt;%{DATA:kernel}\u0026gt;\u0026gt; \u0026lt;\u0026gt; \u0026lt;%{DATA:uuid}\u0026gt; \u0026lt;%{NUMBER:timestamp}\u0026gt; \u0026lt;%{DATA:misc}\u0026gt; \u0026lt;%{DATA:log_number}\u0026gt; \u0026lt;%{DATA:log_message}\u0026gt;\u0026quot; ] } if \u0026quot;_grokparsefailure\u0026quot; in [tags] { mutate { remove_tag =\u0026gt; [ \u0026quot;_grokparsefailure\u0026quot; ] } } } output { elasticsearch { hosts =\u0026gt; [\u0026quot;\u0026lt;ELK_HOSTS\u0026gt;\u0026quot;] cacert =\u0026gt; '/usr/share/logstash/config/certs/elk.crt' index =\u0026gt; \u0026quot;oamlogs-000001\u0026quot; ssl =\u0026gt; true ssl_certificate_verification =\u0026gt; false user =\u0026gt; \u0026quot;\u0026lt;ELK_USER\u0026gt;\u0026quot; password =\u0026gt; \u0026quot;${ELASTICSEARCH_PASSWORD}\u0026quot; api_key =\u0026gt; \u0026quot;${ELASTICSEARCH_PASSWORD}\u0026quot; } } Change the values in the above file as follows:\n Change the \u0026lt;ELKNS\u0026gt;, \u0026lt;ELK_HOSTS\u0026gt;, \u0026lt;ELK_SSL\u0026gt;, and \u0026lt;ELK_USER\u0026gt; to match the values for your environment. Change \u0026lt;Log Home\u0026gt; and \u0026lt;Domain Home\u0026gt; to match the Log Home and Domain Home returned earlier. If your domainUID is anything other than accessdomain, change each instance of accessdomain to your domainUID. If using API KEY for your ELK authentication, delete the user and password lines. If using a password for ELK authentication, delete the api_key line. If no authentication is used for ELK, delete the user, password, and api_key lines.  For example:\napiVersion: v1 kind: ConfigMap metadata: name: oam-logstash-configmap namespace: oamns data: logstash.yml: | #http.host: \u0026quot;0.0.0.0\u0026quot; logstash-config.conf: | input { file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/logs/accessdomain/**/logs/AdminServer*.log\u0026quot; tags =\u0026gt; \u0026quot;Adminserver_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/logs/accessdomain/**/logs/oam_policy_mgr*.log\u0026quot; tags =\u0026gt; \u0026quot;Policymanager_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/logs/accessdomain/**/logs/oam_server*.log\u0026quot; tags =\u0026gt; \u0026quot;Oamserver_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/accessdomain/servers/AdminServer/logs/AdminServer-diagnostic.log\u0026quot; tags =\u0026gt; \u0026quot;Adminserver_diagnostic\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/accessdomain/servers/**/logs/oam_policy_mgr*-diagnostic.log\u0026quot; tags =\u0026gt; \u0026quot;Policy_diagnostic\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/accessdomain/servers/AdminServer/logs/auditlogs/OAM/audit.log\u0026quot; tags =\u0026gt; \u0026quot;Audit_logs\u0026quot; start_position =\u0026gt; beginning } } filter { grok { match =\u0026gt; [ \u0026quot;message\u0026quot;, \u0026quot;\u0026lt;%{DATA:log_timestamp}\u0026gt; \u0026lt;%{WORD:log_level}\u0026gt; \u0026lt;%{WORD:thread}\u0026gt; \u0026lt;%{HOSTNAME:hostname}\u0026gt; \u0026lt;%{HOSTNAME:servername}\u0026gt; \u0026lt;%{DATA:timer}\u0026gt; \u0026lt;\u0026lt;%{DATA:kernel}\u0026gt;\u0026gt; \u0026lt;\u0026gt; \u0026lt;%{DATA:uuid}\u0026gt; \u0026lt;%{NUMBER:timestamp}\u0026gt; \u0026lt;%{DATA:misc}\u0026gt; \u0026lt;%{DATA:log_number}\u0026gt; \u0026lt;%{DATA:log_message}\u0026gt;\u0026quot; ] } if \u0026quot;_grokparsefailure\u0026quot; in [tags] { mutate { remove_tag =\u0026gt; [ \u0026quot;_grokparsefailure\u0026quot; ] } } } output { elasticsearch { hosts =\u0026gt; [\u0026quot;https://elasticsearch.example.com:9200\u0026quot;] cacert =\u0026gt; '/usr/share/logstash/config/certs/elk.crt' index =\u0026gt; \u0026quot;oamlogs-000001\u0026quot; ssl =\u0026gt; true ssl_certificate_verification =\u0026gt; false user =\u0026gt; \u0026quot;logstash_internal\u0026quot; password =\u0026gt; \u0026quot;${ELASTICSEARCH_PASSWORD}\u0026quot; } }   Run the following command to create the configmap:\n$ kubectl apply -f logstash_cm.yaml The output will look similar to the following:\nconfigmap/oam-logstash-configmap created   Deploy the logstash pod   Navigate to the $WORKDIR/kubernetes/elasticsearch-and-kibana directory and create a logstash.yaml file as follows:\napiVersion: apps/v1 kind: Deployment metadata: name: oam-logstash namespace: \u0026lt;ELKNS\u0026gt; spec: selector: matchLabels: k8s-app: logstash template: # create pods using pod definition in this template metadata: labels: k8s-app: logstash spec: imagePullSecrets: - name: dockercred containers: - command: - logstash image: logstash:\u0026lt;ELK_VER\u0026gt; imagePullPolicy: IfNotPresent name: oam-logstash env: - name: ELASTICSEARCH_PASSWORD valueFrom: secretKeyRef: name: elasticsearch-pw-elastic key: password resources: ports: - containerPort: 5044 name: logstash volumeMounts: - mountPath: \u0026lt;mountPath\u0026gt; name: weblogic-domain-storage-volume - name: shared-logs mountPath: /shared-logs - mountPath: /usr/share/logstash/pipeline/ name: oam-logstash-pipeline - mountPath: /usr/share/logstash/config/logstash.yml subPath: logstash.yml name: config-volume - mountPath: /usr/share/logstash/config/certs name: elk-cert volumes: - configMap: defaultMode: 420 items: - key: elk.crt path: elk.crt name: elk-cert name: elk-cert - configMap: defaultMode: 420 items: - key: logstash-config.conf path: logstash-config.conf name: oam-logstash-configmap name: oam-logstash-pipeline - configMap: defaultMode: 420 items: - key: logstash.yml path: logstash.yml name: oam-logstash-configmap name: config-volume - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: accessdomain-domain-pvc - name: shared-logs emptyDir: {}  Change the \u0026lt;ELKNS\u0026gt;, \u0026lt;ELK_VER\u0026gt; to match the values for your environment Change \u0026lt;mountPath\u0026gt; to match the mountPath returned earlier Change the claimName value to match the claimName returned earlier If your Kubernetes environment does not allow access to the internet to pull the logstash image, you must load the logstash image in your own container registry and change image: logstash:\u0026lt;ELK_VER\u0026gt; to the location of the image in your container registry e.g: container-registry.example.com/logstash:8.3.1  For example:\napiVersion: apps/v1 kind: Deployment metadata: name: oam-logstash namespace: oamns spec: selector: matchLabels: k8s-app: logstash template: # create pods using pod definition in this template metadata: labels: k8s-app: logstash spec: imagePullSecrets: - name: dockercred containers: - command: - logstash image: logstash:8.3.1 imagePullPolicy: IfNotPresent name: oam-logstash env: - name: ELASTICSEARCH_PASSWORD valueFrom: secretKeyRef: name: elasticsearch-pw-elastic key: password resources: ports: - containerPort: 5044 name: logstash volumeMounts: - mountPath: /u01/oracle/user_projects name: weblogic-domain-storage-volume - name: shared-logs mountPath: /shared-logs - mountPath: /usr/share/logstash/pipeline/ name: oam-logstash-pipeline - mountPath: /usr/share/logstash/config/logstash.yml subPath: logstash.yml name: config-volume - mountPath: /usr/share/logstash/config/certs name: elk-cert volumes: - configMap: defaultMode: 420 items: - key: elk.crt path: elk.crt name: elk-cert name: elk-cert - configMap: defaultMode: 420 items: - key: logstash-config.conf path: logstash-config.conf name: oam-logstash-configmap name: oam-logstash-pipeline - configMap: defaultMode: 420 items: - key: logstash.yml path: logstash.yml name: oam-logstash-configmap name: config-volume - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: accessdomain-domain-pvc - name: shared-logs emptyDir: {}   Deploy the logstash pod by executing the following command:\n$ kubectl create -f $WORKDIR/kubernetes/elasticsearch-and-kibana/logstash.yaml The output will look similar to the following:\ndeployment.apps/oam-logstash created   Run the following command to check the logstash pod is created correctly:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods -n oamns The output should look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 18h accessdomain-oam-policy-mgr1 1/1 Running 0 18h accessdomain-oam-server1 1/1 Running 1 18h nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 20h oam-logstash-bbbdf5876-85nkd 1/1 Running 0 4m23s Note: Wait a couple of minutes to make sure the pod has not had any failures or restarts. If the pod fails you can view the pod log using:\n$ kubectl logs -f oam-logstash-\u0026lt;pod\u0026gt; -n oamns Most errors occur due to misconfiguration of the logstash_cm.yaml or logstash.yaml. This is usually because of an incorrect value set, or the certificate was not pasted with the correct indentation.\nIf the pod has errors, delete the pod and configmap as follows:\n$ kubectl delete -f $WORKDIR/kubernetes/elasticsearch-and-kibana/logstash.yaml $ kubectl delete -f $WORKDIR/kubernetes/elasticsearch-and-kibana/logstash_cm.yaml Once you have resolved the issue in the yaml files, run the commands outlined earlier to recreate the configmap and logstash pod.\n  Verify and access the Kibana console To access the Kibana console you will need the Kibana URL as per Installing Elasticsearch (ELK) Stack and Kibana.\nFor Kibana 7.7.x and below:\n  Access the Kibana console with http://\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;/app/kibana and login with your username and password.\n  From the Navigation menu, navigate to Management \u0026gt; Kibana \u0026gt; Index Patterns.\n  In the Create Index Pattern page enter oamlogs* for the Index pattern and click Next Step.\n  In the Configure settings page, from the Time Filter field name drop down menu select @timestamp and click Create index pattern.\n  Once the index pattern is created click on Discover in the navigation menu to view the OAM logs.\n  For Kibana version 7.8.X and above:\n  Access the Kibana console with http://\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;/app/kibana and login with your username and password.\n  From the Navigation menu, navigate to Management \u0026gt; Stack Management.\n  Click Data Views in the Kibana section.\n  Click Create Data View and enter the following information:\n Name: oamlogs* Timestamp: @timestamp    Click Create Data View.\n  From the Navigation menu, click Discover to view the log file entries.\n  From the drop down menu, select oamlogs* to view the log file entries.\n  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/manage-oig-domains/running-oig-utilities/",
	"title": "c. Runnning OIG utilities",
	"tags": [],
	"description": "Describes the steps for running OIG utilities in Kubernetes.",
	"content": "Run OIG utlities inside the OIG Kubernetes cluster.\nRun utilities in an interactive bash shell   Access a bash shell inside the \u0026lt;domain_uid\u0026gt;-oim-server1 pod:\n$ kubectl -n oigns exec -it \u0026lt;domain_uid\u0026gt;-oim-server1 -- bash For example:\n$ kubectl -n oigns exec -it governancedomain-oim-server1 -- bash This will take you into a bash shell in the running \u0026lt;domain_uid\u0026gt;-oim-server1 pod:\n[oracle@governancedomain-oim-server1 oracle]$   Navigate to the /u01/oracle/idm/server/bin directory and execute the utility as required. For example:\n[oracle@governancedomain-oim-server1 oracle] cd /u01/oracle/idm/server/bin [oracle@governancedomain-oim-server1 bin]$ ./\u0026lt;filename\u0026gt;.sh Note: Some utilties such as PurgeCache.sh, GenerateSnapshot.sh etc, may prompt to enter the t3 URL, for example:\n[oracle@governancedomain-oim-server1 bin]$ sh GenerateSnapshot.sh For running the Utilities the following environment variables need to be set APP_SERVER is weblogic OIM_ORACLE_HOME is /u01/oracle/idm/ JAVA_HOME is /u01/jdk MW_HOME is /u01/oracle WL_HOME is /u01/oracle/wlserver DOMAIN_HOME is /u01/oracle/user_projects/domains/governancedomain Executing -Dweblogic.security.SSL.trustedCAKeyStore= in IPv4 mode [Enter Xellerate admin username :]xelsysadm [Enter password for xelsysadm :] [Threads to use [ 8 ]] [Enter serverURL :[t3://oimhostname:oimportno ]] To find the t3 URL run:\n$ kubectl get services -n oigns | grep oim-cluster The output will look similar to the following:\ngovernancedomain-cluster-oim-cluster ClusterIP 10.110.161.82 \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 4d In this case the t3 URL is: t3://governancedomain-cluster-oim-cluster:14000.\n  Passing inputs as a jar/xml file   Copy the input file to pass to a directory of your choice.\n  Run the following command to copy the input file to the running governancedomain-oim-server1 pod.\n$ kubectl -n oigns cp /\u0026lt;path\u0026gt;/\u0026lt;inputFile\u0026gt; governancedomain-oim-server1:/u01/oracle/idm/server/bin/   Access a bash shell inside the governancedomain-oim-server1 pod:\n$ kubectl -n oigns exec -it governancedomain-oim-server1 -- bash This will take you into a bash shell in the running governancedomain-oim-server1 pod:\n[oracle@governancedomain-oim-server1 oracle]$   Navigate to the /u01/oracle/idm/server/bin directory and execute the utility as required, passing the input file. For example:\n[oracle@governancedomain-oim-server1 oracle] cd /u01/oracle/idm/server/bin [oracle@governancedomain-oim-server1 bin]$ ./\u0026lt;filename\u0026gt;.sh -inputFile \u0026lt;inputFile\u0026gt; Note As pods are stateless the copied input file will remain until the pod restarts.\n  Editing property/profile files To edit a property/profile file in the Kubernetes cluster:\n  Copy the input file from the pod to a on the local system, for example:\n$ kubectl -n oigns cp governancedomain-oim-server1:/u01/oracle/idm/server/bin/\u0026lt;file.properties_profile\u0026gt; /\u0026lt;path\u0026gt;/\u0026lt;file.properties_profile\u0026gt; Note: If you see the message tar: Removing leading '/' from member names this can be ignored.\n  Edit the \u0026lt;/path\u0026gt;/\u0026lt;file.properties_profile\u0026gt; in an editor of your choice.\n  Copy the file back to the pod:\n$ kubectl -n oigns cp /\u0026lt;path\u0026gt;/\u0026lt;file.properties_profile\u0026gt; governancedomain-oim-server1:/u01/oracle/idm/server/bin/ Note: As pods are stateless the copied input file will remain until the pod restarts. Preserve a local copy in case you need to copy files back after pod restart.\n  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/patch-and-upgrade/upgrade-an-ingress/",
	"title": "c. Upgrade Ingress",
	"tags": [],
	"description": "Instructions on how to upgrade the ingress.",
	"content": "This section shows how to upgrade the ingress.\nTo determine if this step is required for the version you are upgrading to, refer to the Release Notes.\nDownload the latest code repository Download the latest code repository as follows:\n  Create a working directory to setup the source code.\n$ mkdir \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/OAMK8Slatest   Download the latest OAM deployment scripts from the OAM repository.\n$ cd \u0026lt;workdir\u0026gt; $ git clone https://github.com/oracle/fmw-kubernetes.git For example:\n$ cd /scratch/OAMK8Slatest $ git clone https://github.com/oracle/fmw-kubernetes.git   Set the $WORKDIR environment variable as follows:\n$ export WORKDIR=\u0026lt;workdir\u0026gt;/fmw-kubernetes/OracleAccessManagement For example:\n$ export WORKDIR=/scratch/OAMK8Slatest/fmw-kubernetes/OracleAccessManagement   Upgrading the ingress To upgrade the existing ingress rules, follow the steps below:\n  List the existing ingress:\n$ helm list -n oamns The output will look similar to the following:\nNAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION nginx-ingress oamns 1 \u0026lt;DATE\u0026gt; deployed ingress-nginx-4.3.0 1.4.0 oam-nginx oamns 1 \u0026lt;DATE\u0026gt; deployed ingress-per-domain-0.1.0 1.0   Edit the $WORKDIR/kubernetes/charts/ingress-per-domain/values.yaml and change the parameters to the same as you had when you initially configured the ingress. See Prepare the values.yaml for the ingress. For example:\n# Load balancer type. Supported values are: NGINX type: NGINX # SSL configuration Type. Supported Values are : NONSSL,SSL sslType: NONSSL # domainType. Supported values are: oam domainType: oam #WLS domain as backend to the load balancer wlsDomain: domainUID: accessdomain adminServerName: AdminServer adminServerPort: 7001 adminServerSSLPort: oamClusterName: oam_cluster oamManagedServerPort: 14100 oamManagedServerSSLPort: policyClusterName: policy_cluster policyManagedServerPort: 15100 policyManagedServerSSLPort: # Host specific values hostName: enabled: false admin: runtime:   Upgrade the oam-nginx with the following command:\n$ helm upgrade oam-nginx kubernetes/charts/ingress-per-domain/ --namespace oamns --values kubernetes/charts/ingress-per-domain/values.yaml --reuse-values The output will look similar to the following:\nRelease \u0026quot;oam-nginx\u0026quot; has been upgraded. Happy Helming! NAME: oam-nginx LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oamns STATUS: deployed REVISION: 2 TEST SUITE: None   List the ingress:\n$ kubectl get ing -n oamns The output will look similar to the following:\nNAME CLASS HOSTS ADDRESS PORTS AGE accessdomain-nginx \u0026lt;none\u0026gt; * 10.99.189.61 80 18s   Describe the ingress and make sure all the listed paths are accessible:\n$ kubectl describe ing accessdomain-nginx -n oamns The output will look similar to the following:\nName: accessdomain-nginx Labels: app.kubernetes.io/managed-by=Helm Namespace: oamns Address: 10.99.189.61 Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) Rules: Host Path Backends ---- ---- -------- * /console accessdomain-adminserver:7001 (10.244.1.224:7001) /consolehelp accessdomain-adminserver:7001 (10.244.1.224:7001) /rreg/rreg accessdomain-adminserver:7001 (10.244.1.224:7001) /em accessdomain-adminserver:7001 (10.244.1.224:7001) /oamconsole accessdomain-adminserver:7001 (10.244.1.224:7001) /dms accessdomain-adminserver:7001 (10.244.1.224:7001) /oam/services/rest accessdomain-adminserver:7001 (10.244.1.224:7001) /iam/admin/config accessdomain-adminserver:7001 (10.244.1.224:7001) /iam/admin/diag accessdomain-adminserver:7001 (10.244.1.224:7001) /iam/access accessdomain-cluster-oam-cluster:14100 (10.244.1.225:14100) /oam/admin/api accessdomain-adminserver:7001 (10.244.1.224:7001) /oam/services/rest/access/api accessdomain-cluster-oam-cluster:14100 (10.244.1.225:14100) /access accessdomain-cluster-policy-cluster:15100 (10.244.1.226:15100) / accessdomain-cluster-oam-cluster:14100 (10.244.1.225:14100) Annotations: meta.helm.sh/release-name: oam-nginx meta.helm.sh/release-namespace: oamns nginx.ingress.kubernetes.io/configuration-snippet: more_clear_input_headers \u0026quot;WL-Proxy-Client-IP\u0026quot; \u0026quot;WL-Proxy-SSL\u0026quot;; more_set_input_headers \u0026quot;X-Forwarded-Proto: https\u0026quot;; more_set_input_headers \u0026quot;WL-Proxy-SSL: true\u0026quot;; nginx.ingress.kubernetes.io/enable-access-log: false nginx.ingress.kubernetes.io/ingress.allow-http: false nginx.ingress.kubernetes.io/proxy-buffer-size: 2000k Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 55s (x2 over 63s) nginx-ingress-controller Scheduled for sync   "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/patch-and-upgrade/upgrade-an-ingress/",
	"title": "c. Upgrade Ingress",
	"tags": [],
	"description": "Instructions on how to upgrade the ingress.",
	"content": "This section shows how to upgrade the ingress.\nTo determine if this step is required for the version you are upgrading to, refer to the Release Notes.\nUpgrading the ingress To upgrade the existing ingress rules, follow the steps below:\n  List the existing ingress:\n$ helm list -n \u0026lt;domain_namespace\u0026gt; For example:\n$ helm list -n oigns The output will look similar to the following:\nNAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION governancedomain-nginx oigns 1 \u0026lt;DATE\u0026gt; deployed ingress-per-domain-0.1.0 1.0   Make sure you have downloaded the latest code as per Download the latest code repository.\n  Edit the $WORKDIR/kubernetes/charts/ingress-per-domain/values.yaml and change the domainUID parameter to match your domainUID, for example domainUID: governancedomain. Change sslType to NONSSL or SSL depending on your existing configuration. For example:\n# Load balancer type. Supported values are: NGINX type: NGINX # SSL configuration Type. Supported Values are : NONSSL,SSL sslType: SSL # domainType. Supported values are: oim domainType: oim #WLS domain as backend to the load balancer wlsDomain: domainUID: governancedomain adminServerName: AdminServer adminServerPort: 7001 adminServerSSLPort: soaClusterName: soa_cluster soaManagedServerPort: 8001 soaManagedServerSSLPort: oimClusterName: oim_cluster oimManagedServerPort: 14000 oimManagedServerSSLPort: # Host specific values hostName: enabled: false admin: runtime: internal: # Ngnix specific values nginx: nginxTimeOut: 180   Upgrade the governancedomain-nginx with the following command:\n$ cd $WORKDIR $ helm upgrade \u0026lt;ingress\u0026gt; kubernetes/charts/ingress-per-domain/ --namespace \u0026lt;domain_namespace\u0026gt; --values kubernetes/charts/ingress-per-domain/values.yaml --reuse-values For example:\n$ cd $WORKDIR $ helm upgrade governancedomain-nginx kubernetes/charts/ingress-per-domain/ --namespace oigns --values kubernetes/charts/ingress-per-domain/values.yaml --reuse-values The output will look similar to the following:\nRelease \u0026quot;governancedomain-nginx\u0026quot; has been upgraded. Happy Helming! NAME: governancedomain-nginx LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oigns STATUS: deployed REVISION: 2 TEST SUITE: None   List the ingress:\n$ kubectl get ing -n oigns The output will look similar to the following:\nNAME CLASS HOSTS ADDRESS PORTS AGE governancedomain-nginx \u0026lt;none\u0026gt; * 10.107.182.40 80 18s   Describe the ingress and make sure all the listed paths are accessible:\n$ kubectl describe ing governancedomain-nginx -n oigns The output will look similar to the following:\nName: governancedomain-nginx Namespace: oigns Address: 10.107.182.40 Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) Rules: Host Path Backends ---- ---- -------- * /console governancedomain-adminserver:7001 (10.244.4.240:7001) /consolehelp governancedomain-adminserver:7001 (10.244.4.240:7001) /em governancedomain-adminserver:7001 (10.244.4.240:7001) /ws_utc governancedomain-cluster-soa-cluster:8001 (10.244.4.242:8001) /soa governancedomain-cluster-soa-cluster:8001 (10.244.4.242:8001) /integration governancedomain-cluster-soa-cluster:8001 (10.244.4.242:8001) /soa-infra governancedomain-cluster-soa-cluster:8001 (10.244.4.242:8001) /identity governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /admin governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /oim governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /sysadmin governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /workflowservice governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /callbackResponseService governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /spml-xsd governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /HTTPClnt governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /reqsvc governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /iam governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /provisioning-callback governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /CertificationCallbackService governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /ucs governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /FacadeWebApp governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /OIGUI governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /weblogic governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) Annotations: meta.helm.sh/release-name: governancedomain-nginx meta.helm.sh/release-namespace: oigns nginx.ingress.kubernetes.io/affinity: cookie nginx.ingress.kubernetes.io/affinity-mode: persistent nginx.ingress.kubernetes.io/configuration-snippet: more_clear_input_headers \u0026quot;WL-Proxy-Client-IP\u0026quot; \u0026quot;WL-Proxy-SSL\u0026quot;; more_set_input_headers \u0026quot;X-Forwarded-Proto: https\u0026quot;; more_set_input_headers \u0026quot;WL-Proxy-SSL: true\u0026quot;; nginx.ingress.kubernetes.io/enable-access-log: false nginx.ingress.kubernetes.io/ingress.allow-http: false nginx.ingress.kubernetes.io/proxy-buffer-size: 2000k nginx.ingress.kubernetes.io/proxy-read-timeout: 180 nginx.ingress.kubernetes.io/proxy-send-timeout: 180 nginx.ingress.kubernetes.io/session-cookie-name: sticky Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 51m (x3 over 54m) nginx-ingress-controller Scheduled for sync   "
},
{
	"uri": "/fmw-kubernetes/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/fmw-kubernetes/idm-products/oud/manage-oud-containers/hpa/",
	"title": "d. Kubernetes Horizontal Pod Autoscaler",
	"tags": [],
	"description": "Describes the steps for implementing the Horizontal Pod Autoscaler.",
	"content": " Prerequisite configuration Deploy the Kubernetes Metrics Server  Troubleshooting   Deploy HPA Testing HPA Delete the HPA Other considerations  Kubernetes Horizontal Pod Autoscaler (HPA) allows automatic scaling (up and down) of the OUD servers. If load increases then extra OUD servers will be started as required. Similarly, if load decreases, OUD servers will be automatically shutdown.\nFor more information on HPA, see Horizontal Pod Autoscaling.\nThe instructions below show you how to configure and run an HPA to scale OUD servers, based on CPU utilization or memory resource metrics.\nNote: If you enable HPA and then decide you want to start/stop/scale OUD servers manually as per Scaling Up/Down OUD Pods, it is recommended to delete HPA beforehand as per Delete the HPA.\nPrerequisite configuration In order to use HPA, OUD must have been created with the required resources parameter as per Create OUD instances. For example:\noudConfig: # memory, cpu parameters for both requests and limits for oud instances resources: limits: cpu: \u0026quot;1\u0026quot; memory: \u0026quot;8Gi\u0026quot; requests: cpu: \u0026quot;500m\u0026quot; memory: \u0026quot;4Gi\u0026quot; If you created the OUD servers at any point since July 22 (22.3.1) then these values are the defaults. You can check using the following command:\n$ helm show values oud-ds-rs -n oudns The output will look similar to the following:\n... # memory, cpu parameters for both requests and limits for oud instances resources: requests: memory: \u0026quot;4Gi\u0026quot; cpu: \u0026quot;500m\u0026quot; limits: memory: \u0026quot;8Gi\u0026quot; cpu: \u0026quot;2\u0026quot; ... Deploy the Kubernetes Metrics Server Before deploying HPA you must deploy the Kubernetes Metrics Server.\n  Check to see if the Kubernetes Metrics Server is already deployed:\n$ kubectl get pods -n kube-system | grep metric If a row is returned as follows, then Kubernetes Metric Server is deployed and you can move to Deploy HPA.\nmetrics-server-d9694457-mf69d 1/1 Running 0 5m13s   If no rows are returned by the previous command, then the Kubernetes Metric Server needs to be deployed. Run the following commands to get the components.yaml:\n$ mkdir $WORKDIR/kubernetes/hpa $ cd $WORKDIR/kubernetes/hpa $ wget https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml   Deploy the Kubernetes Metrics Server by running the following command:\n$ kubectl apply -f components.yaml The output will look similar to the following:\nserviceaccount/metrics-server created clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created clusterrole.rbac.authorization.k8s.io/system:metrics-server created rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created service/metrics-server created deployment.apps/metrics-server created apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created   Run the following command to check Kubernetes Metric Server is running:\n$ kubectl get pods -n kube-system | grep metric Make sure the pod has a READY status of 1/1:\nmetrics-server-d9694457-mf69d 1/1 Running 0 39s   Troubleshooting If the Kubernetes Metric Server does not reach the READY 1/1 state, run the following commands:\n$ kubectl describe pod \u0026lt;metrics-server-pod\u0026gt; -n kube-system $ kubectl logs \u0026lt;metrics-server-pod\u0026gt; -n kube-system If you see errors such as:\nReadiness probe failed: HTTP probe failed with statuscode: 500 and:\nE0907 13:07:50.937308 1 scraper.go:140] \u0026quot;Failed to scrape node\u0026quot; err=\u0026quot;Get \\\u0026quot;https://X.X.X.X:10250/metrics/resource\\\u0026quot;: x509: cannot validate certificate for 100.105.18.113 because it doesn't contain any IP SANs\u0026quot; node=\u0026quot;worker-node1\u0026quot; then you may need to install a valid cluster certificate for your Kubernetes cluster.\nFor testing purposes, you can resolve this issue by:\n  Delete the Kubernetes Metrics Server by running the following command:\n$ kubectl delete -f $WORKDIR/kubernetes/hpa/components.yaml   Edit the $WORKDIR/hpa/components.yaml and locate the args: section. Add kubelet-insecure-tls to the arguments. For example:\nspec: containers: - args: - --cert-dir=/tmp - --secure-port=4443 - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname - --kubelet-use-node-status-port - --kubelet-insecure-tls - --metric-resolution=15s image: registry.k8s.io/metrics-server/metrics-server:v0.6.4 ...   Deploy the Kubenetes Metrics Server using the command:\n$ kubectl apply -f components.yaml Run the following and make sure the READY status shows 1/1:\n$ kubectl get pods -n kube-system | grep metric The output should look similar to the following:\nmetrics-server-d9694457-mf69d 1/1 Running 0 40s   Deploy HPA The steps below show how to configure and run an HPA to scale OUD, based on the CPU or memory utilization resource metrics.\nAssuming the example OUD configuration in Create OUD instances, three OUD servers are started by default (oud-ds-rs-0, oud-ds-rs-1, oud-ds-rs-2).\nIn the following example an HPA resource is created, targeted at the statefulset oud-ds-rs. This resource will autoscale OUD servers from a minimum of 3 OUD servers up to 5 OUD servers. Scaling up will occur when the average CPU is consistently over 70%. Scaling down will occur when the average CPU is consistently below 70%.\n  Navigate to the $WORKDIR/kubernetes/hpa and create an autoscalehpa.yaml file that contains the following.\n# apiVersion: autoscaling/v2 kind: HorizontalPodAutoscaler metadata: name: oud-sts-hpa namespace: oudns spec: scaleTargetRef: apiVersion: apps/v1 kind: StatefulSet name: oud-ds-rs #statefulset name of oud behavior: scaleDown: stabilizationWindowSeconds: 60 scaleUp: stabilizationWindowSeconds: 60 minReplicas: 3 maxReplicas: 5 metrics: - type: Resource resource: name: cpu target: type: Utilization averageUtilization: 70 Note : minReplicas should match the number of OUD servers started by default. Set maxReplicas to the maximum amount of OUD servers that can be started.\nNote: To find the statefulset name, in this example oud-ds-rs, run \u0026ldquo;kubectl get statefulset -n oudns\u0026rdquo;.\nNote: For setting HPA based on Memory Metrics, update the metrics block with the following content. Please note we recommend using only CPU or Memory, not both.\nmetrics: - type: Resource resource: name: memory target: type: Utilization averageUtilization: 70   Run the following command to create the autoscaler:\n$ kubectl apply -f autoscalehpa.yaml The output will look similar to the following:\nhorizontalpodautoscaler.autoscaling/oud-sts-hpa created   Verify the status of the autoscaler by running the following:\n$ kubectl get hpa -n oudns The output will look similar to the following:\nNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE oud-sts-hpa StatefulSet/oud-ds-rs 5%/70% 3 5 3 33s In the example above, this shows that CPU is currently running at 5% for the oud-sts-hpa.\n  Testing HPA   Check the current status of the OUD servers:\n$ kubectl get pods -n oudns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE oud-ds-rs-0 1/1 Running 0 5h15m oud-ds-rs-1 1/1 Running 0 5h9m oud-ds-rs-2 1/1 Running 0 5h2m oud-pod-cron-job-28242120-bwtcz 0/1 Completed 0 61m oud-pod-cron-job-28242150-qf8fg 0/1 Completed 0 31m oud-pod-cron-job-28242180-q69lm 0/1 Completed 0 92s In the above oud-ds-rs-0, oud-ds-rs-0, oud-ds-rs-2 are running.\n  To test HPA can scale up the OUD servers, run the following commands:\n$ kubectl exec --stdin --tty oud-ds-rs-0 -n oudns -- /bin/bash This will take you inside a bash shell inside the oud-ds-rs-0 pod:\n[oracle@oud-ds-rs-0 oracle]$ Inside the bash shell, run the following command to increase the load on the CPU:\n[oracle@oud-ds-rs-0 oracle]$ dd if=/dev/zero of=/dev/null This command will continue to run in the foreground.\n  Repeat the step above for the oud-ds-rs-1 pod:\n$ kubectl exec --stdin --tty oud-ds-rs-1 -n oudns -- /bin/bash [oracle@oud-ds-rs-1 oracle]$ [oracle@oud-ds-rs-1 oracle]$ dd if=/dev/zero of=/dev/null   In a command window outside the bash shells, run the following command to view the current CPU usage:\n$ kubectl get hpa -n oudns The output will look similar to the following:\nNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE oud-sts-hpa StatefulSet/oud-ds-rs 125%/70% 3 5 3 5m15s In the above example the CPU has increased to 125%. As this is above the 70% limit, the autoscaler increases the replicas by starting additional OUD servers.\n  Run the following to see if any more OUD servers are started:\n$ kubectl get pods -n oudns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE oud-ds-rs-0 1/1 Running 0 5h50m oud-ds-rs-1 1/1 Running 0 5h44m oud-ds-rs-2 1/1 Running 0 5h37m oud-ds-rs-3 1/1 Running 0 9m29s oud-ds-rs-4 1/1 Running 0 5m17s oud-pod-cron-job-28242150-qf8fg 0/1 Completed 0 66m oud-pod-cron-job-28242180-q69lm 0/1 Completed 0 36m oud-pod-cron-job-28242210-kn7sv 0/1 Completed 0 6m28s In the example above one more OUD server has started (oud-ds-rs-4).\nNote: It may take some time for the server to appear and start. Once the server is at READY status of 1/1, the server is started.\n  To stop the load on the CPU, in both bash shells, issue a Control C, and then exit the bash shell:\n[oracle@oud-ds-rs-0 oracle]$ dd if=/dev/zero of=/dev/null ^C [oracle@oud-ds-rs-0 oracle]$ exit   Run the following command to view the current CPU usage:\n$ kubectl get hpa -n oudns The output will look similar to the following:\nNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE oud-sts-hpa StatefulSet/oud-ds-rs 4%/70% 3 5 5 40m In the above example CPU has dropped to 4%. As this is below the 70% threshold, you should see the autoscaler scale down the servers:\n$ kubectl get pods -n oudns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE oud-ds-rs-0 1/1 Running 0 5h54m oud-ds-rs-1 1/1 Running 0 5h48m oud-ds-rs-2 1/1 Running 0 5h41m oud-ds-rs-3 1/1 Running 0 13m oud-ds-rs-4 1/1 Terminating 0 8m27s oud-pod-cron-job-28242150-qf8fg 0/1 Completed 0 70m oud-pod-cron-job-28242180-q69lm 0/1 Completed 0 40m oud-pod-cron-job-28242210-kn7sv 0/1 Completed 0 10m Eventually, the extra server will disappear:\nNAME READY STATUS RESTARTS AGE oud-ds-rs-0 1/1 Running 0 5h57m oud-ds-rs-1 1/1 Running 0 5h51m oud-ds-rs-2 1/1 Running 0 5h44m oud-ds-rs-3 1/1 Running 0 16m oud-pod-cron-job-28242150-qf8fg 0/1 Completed 0 73m oud-pod-cron-job-28242180-q69lm 0/1 Completed 0 43m oud-pod-cron-job-28242210-kn7sv 0/1 Completed 0 13m   Delete the HPA   If you need to delete the HPA, you can do so by running the following command:\n$ cd $WORKDIR/kubernetes/hpa $ kubectl delete -f autoscalehpa.yaml   Other considerations  If HPA is deployed and you need to upgrade the OUD image, then you must delete the HPA before upgrading. Once the upgrade is successful you can deploy HPA again. If you choose to scale up or scale down an OUD server manually as per Scaling Up/Down OUD Pods, then it is recommended to delete the HPA before doing so.  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/manage-oig-domains/logging-and-visualization/",
	"title": "d. Logging and visualization",
	"tags": [],
	"description": "Describes the steps for logging and visualization with Elasticsearch and Kibana.",
	"content": "After the OIG domain is set up you can publish operator and WebLogic Server logs into Elasticsearch and interact with them in Kibana.\nInstall Elasticsearch and Kibana If you do not already have a centralized Elasticsearch (ELK) stack then you must configure this first. For details on how to configure the ELK stack, follow Installing Elasticsearch (ELK) Stack and Kibana\nCreate the logstash pod Variables used in this chapter In order to create the logstash pod, you must create several files. These files contain variables which you must substitute with variables applicable to your environment.\nMost of the values for the variables will be based on your ELK deployment as per Installing Elasticsearch (ELK) Stack and Kibana.\nThe table below outlines the variables and values you must set:\n   Variable Sample Value Description     \u0026lt;ELK_VER\u0026gt; 8.3.1 The version of logstash you want to install.   \u0026lt;ELK_SSL\u0026gt; true If SSL is enabled for ELK set the value to true, or if NON-SSL set to false. This value must be lowercase.   \u0026lt;ELK_HOSTS\u0026gt; https://elasticsearch.example.com:9200 The URL for sending logs to Elasticsearch. HTTP if NON-SSL is used.   \u0026lt;ELKNS\u0026gt; oigns The domain namespace.   \u0026lt;ELK_USER\u0026gt; logstash_internal The name of the user for logstash to access Elasticsearch.   \u0026lt;ELK_PASSWORD\u0026gt; password The password for ELK_USER.   \u0026lt;ELK_APIKEY\u0026gt; apikey The API key details.    You will also need the BASE64 version of the Certificate Authority (CA) certificate(s) that signed the certificate of the Elasticsearch server. If using a self-signed certificate, this is the self signed certificate of the Elasticsearch server. See Copying the Elasticsearch Certificate for details on how to get the correct certificate. In the example below the certificate is called elk.crt.\nCreate kubernetes secrets   Create a Kubernetes secret for Elasticsearch using the API Key or Password.\na) If ELK uses an API Key for authentication:\n$ kubectl create secret generic elasticsearch-pw-elastic -n \u0026lt;domain_namespace\u0026gt; --from-literal password=\u0026lt;ELK_APIKEY\u0026gt; For example:\n$ kubectl create secret generic elasticsearch-pw-elastic -n oigns --from-literal password=\u0026lt;ELK_APIKEY\u0026gt; The output will look similar to the following:\nsecret/elasticsearch-pw-elastic created b) If ELK uses a password for authentication:\n$ kubectl create secret generic elasticsearch-pw-elastic -n \u0026lt;domain_namespace\u0026gt; --from-literal password=\u0026lt;ELK_PASSWORD\u0026gt; For example:\n$ kubectl create secret generic elasticsearch-pw-elastic -n oigns --from-literal password=\u0026lt;ELK_PASSWORD\u0026gt; The output will look similar to the following:\nsecret/elasticsearch-pw-elastic created Note: It is recommended that the ELK Stack is created with authentication enabled. If no authentication is enabled you may create a secret using the values above.\n  Create a Kubernetes secret to access the required images on hub.docker.com:\nNote: Before executing the command below, you must first have a user account on hub.docker.com.\nkubectl create secret docker-registry \u0026#34;dockercred\u0026#34; --docker-server=\u0026#34;https://index.docker.io/v1/\u0026#34; \\ --docker-username=\u0026#34;\u0026lt;DOCKER_USER_NAME\u0026gt;\u0026#34; \\ --docker-password=\u0026lt;DOCKER_PASSWORD\u0026gt; --docker-email=\u0026lt;DOCKER_EMAIL_ID\u0026gt; \\ --namespace=\u0026lt;domain_namespace\u0026gt; For example,\nkubectl create secret docker-registry \u0026#34;dockercred\u0026#34; --docker-server=\u0026#34;https://index.docker.io/v1/\u0026#34; \\ --docker-username=\u0026#34;user@example.com\u0026#34; \\ --docker-password=password --docker-email=user@example.com \\ --namespace=oigns The output will look similar to the following:\nsecret/dockercred created   Find the mountPath details   Run the following command to get the mountPath of your domain:\n$ kubectl describe domains \u0026lt;domain_uid\u0026gt; -n \u0026lt;domain_namespace\u0026gt; | grep \u0026#34;Mount Path\u0026#34; For example:\n$ kubectl describe domains governancedomain -n oigns | grep \u0026#34;Mount Path\u0026#34; If you deployed OIG using WLST, the output will look similar to the following:\nMount Path: /u01/oracle/user_projects/domains If you deployed OIG using WDT, the output will look similar to the following:\nMount Path: /u01/oracle/user_projects   Find the Domain Home and Log Home details   Run the following command to get the Domain Home and Log Home of your domain:\n$ kubectl describe domains \u0026lt;domain_uid\u0026gt; -n \u0026lt;domain_namespace\u0026gt; | egrep \u0026#34;Domain Home: | Log Home:\u0026#34; ``\nFor example:\n$ kubectl describe domains governancedomain -n oigns | egrep \u0026#34;Domain Home: | Log Home:\u0026#34; ``\nThe output will look similar to the following:\nDomain Home: /u01/oracle/user_projects/domains/governancedomain Http Access Log In Log Home: true Log Home: /u01/oracle/user_projects/domains/logs/governancedomain   Find the persistentVolumeClaim details   Run the following command to get the OIG domain persistence volume details:\n$ kubectl get pv -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pv -n oigns The output will look similar to the following:\nNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE governancedomain-domain-pv 10Gi RWX Retain Bound oigns/governancedomain-domain-pvc governancedomain-oim-storage-class 28h Make note of the CLAIM value, for example in this case governancedomain-domain-pvc.\n  Create the Configmap   Copy the elk.crt file to the $WORKDIR/kubernetes/elasticsearch-and-kibana directory.\n  Navigate to the $WORKDIR/kubernetes/elasticsearch-and-kibana directory and run the following:\nkubectl create configmap elk-cert --from-file=elk.crt -n \u0026lt;namespace\u0026gt; For example:\nkubectl create configmap elk-cert --from-file=elk.crt -n oigns The output will look similar to the following:\nconfigmap/elk-cert created   Create a logstash_cm.yaml file in the $WORKDIR/kubernetes/elasticsearch-and-kibana directory as follows:\napiVersion: v1 kind: ConfigMap metadata: name: oig-logstash-configmap namespace: \u0026lt;ELKNS\u0026gt; data: logstash.yml: | #http.host: \u0026quot;0.0.0.0\u0026quot; logstash-config.conf: | input { file { path =\u0026gt; \u0026quot;\u0026lt;Log Home\u0026gt;/servers/AdminServer/logs/AdminServer*.log*\u0026quot; tags =\u0026gt; \u0026quot;Adminserver_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;\u0026lt;Log Home\u0026gt;/**/logs/soa_server*.log*\u0026quot; tags =\u0026gt; \u0026quot;soaserver_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;\u0026lt;Log Home\u0026gt;/**/logs/oim_server*.log*\u0026quot; tags =\u0026gt; \u0026quot;Oimserver_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;\u0026lt;Domain Home\u0026gt;/servers/AdminServer/logs/AdminServer-diagnostic.log*\u0026quot; tags =\u0026gt; \u0026quot;Adminserver_diagnostic\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;\u0026lt;Domain Home\u0026gt;/servers/**/logs/soa_server*-diagnostic.log*\u0026quot; tags =\u0026gt; \u0026quot;Soa_diagnostic\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;\u0026lt;Domain Home\u0026gt;/servers/**/logs/oim_server*-diagnostic.log*\u0026quot; tags =\u0026gt; \u0026quot;Oimserver_diagnostic\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;\u0026lt;Domain Home\u0026gt;/servers/**/logs/access*.log*\u0026quot; tags =\u0026gt; \u0026quot;Access_logs\u0026quot; start_position =\u0026gt; beginning } } filter { grok { match =\u0026gt; [ \u0026quot;message\u0026quot;, \u0026quot;\u0026lt;%{DATA:log_timestamp}\u0026gt; \u0026lt;%{WORD:log_level}\u0026gt; \u0026lt;%{WORD:thread}\u0026gt; \u0026lt;%{HOSTNAME:hostname}\u0026gt; \u0026lt;%{HOSTNAME:servername}\u0026gt; \u0026lt;%{DATA:timer}\u0026gt; \u0026lt;\u0026lt;%{DATA:kernel}\u0026gt;\u0026gt; \u0026lt;\u0026gt; \u0026lt;%{DATA:uuid}\u0026gt; \u0026lt;%{NUMBER:timestamp}\u0026gt; \u0026lt;%{DATA:misc} \u0026gt; \u0026lt;%{DATA:log_number}\u0026gt; \u0026lt;%{DATA:log_message}\u0026gt;\u0026quot; ] } if \u0026quot;_grokparsefailure\u0026quot; in [tags] { mutate { remove_tag =\u0026gt; [ \u0026quot;_grokparsefailure\u0026quot; ] } } } output { elasticsearch { hosts =\u0026gt; [\u0026quot;\u0026lt;ELK_HOSTS\u0026gt;\u0026quot;] cacert =\u0026gt; '/usr/share/logstash/config/certs/elk.crt' index =\u0026gt; \u0026quot;oiglogs-000001\u0026quot; ssl =\u0026gt; \u0026lt;ELK_SSL\u0026gt; ssl_certificate_verification =\u0026gt; false user =\u0026gt; \u0026quot;\u0026lt;ELK_USER\u0026gt;\u0026quot; password =\u0026gt; \u0026quot;${ELASTICSEARCH_PASSWORD}\u0026quot; api_key =\u0026gt; \u0026quot;${ELASTICSEARCH_PASSWORD}\u0026quot; } } Change the values in the above file as follows:\n Change the \u0026lt;ELKNS\u0026gt;, \u0026lt;ELK_HOSTS\u0026gt;, \u0026lt;ELK_SSL\u0026gt;, and \u0026lt;ELK_USER\u0026gt; to match the values for your environment. Change \u0026lt;Log Home\u0026gt; and \u0026lt;Domain Home\u0026gt; to match the Log Home and Domain Home returned earlier. If your domainUID is anything other than governancedomain, change each instance of governancedomain to your domainUID. If using API KEY for your ELK authentication, delete the user and password lines. If using a password for ELK authentication, delete the api_key line. If no authentication is used for ELK, delete the user, password, and api_key lines.  For example:\napiVersion: v1 kind: ConfigMap metadata: name: oig-logstash-configmap namespace: oigns data: logstash.yml: | #http.host: \u0026quot;0.0.0.0\u0026quot; logstash-config.conf: | input { file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/logs/governancedomain/servers/AdminServer/logs/AdminServer*.log*\u0026quot; tags =\u0026gt; \u0026quot;Adminserver_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/logs/governancedomain/**/logs/soa_server*.log*\u0026quot; tags =\u0026gt; \u0026quot;soaserver_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/logs/governancedomain/**/logs/oim_server*.log*\u0026quot; tags =\u0026gt; \u0026quot;Oimserver_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/governancedomain/servers/AdminServer/logs/AdminServer-diagnostic.log*\u0026quot; tags =\u0026gt; \u0026quot;Adminserver_diagnostic\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/governancedomain/servers/**/logs/soa_server*-diagnostic.log*\u0026quot; tags =\u0026gt; \u0026quot;Soa_diagnostic\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/governancedomain/servers/**/logs/oim_server*-diagnostic.log*\u0026quot; tags =\u0026gt; \u0026quot;Oimserver_diagnostic\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/governancedomain/servers/**/logs/access*.log*\u0026quot; tags =\u0026gt; \u0026quot;Access_logs\u0026quot; start_position =\u0026gt; beginning } } filter { grok { match =\u0026gt; [ \u0026quot;message\u0026quot;, \u0026quot;\u0026lt;%{DATA:log_timestamp}\u0026gt; \u0026lt;%{WORD:log_level}\u0026gt; \u0026lt;%{WORD:thread}\u0026gt; \u0026lt;%{HOSTNAME:hostname}\u0026gt; \u0026lt;%{HOSTNAME:servername}\u0026gt; \u0026lt;%{DATA:timer}\u0026gt; \u0026lt;\u0026lt;%{DATA:kernel}\u0026gt;\u0026gt; \u0026lt;\u0026gt; \u0026lt;%{DATA:uuid}\u0026gt; \u0026lt;%{NUMBER:timestamp}\u0026gt; \u0026lt;%{DATA:misc} \u0026gt; \u0026lt;%{DATA:log_number}\u0026gt; \u0026lt;%{DATA:log_message}\u0026gt;\u0026quot; ] } if \u0026quot;_grokparsefailure\u0026quot; in [tags] { mutate { remove_tag =\u0026gt; [ \u0026quot;_grokparsefailure\u0026quot; ] } } } output { elasticsearch { hosts =\u0026gt; [\u0026quot;https://elasticsearch.example.com:9200\u0026quot;] cacert =\u0026gt; '/usr/share/logstash/config/certs/elk.crt' index =\u0026gt; \u0026quot;oiglogs-000001\u0026quot; ssl =\u0026gt; true ssl_certificate_verification =\u0026gt; false user =\u0026gt; \u0026quot;logstash_internal\u0026quot; password =\u0026gt; \u0026quot;${ELASTICSEARCH_PASSWORD}\u0026quot; } }   Run the following command to create the configmap:\n$ kubectl apply -f logstash_cm.yaml The output will look similar to the following:\nconfigmap/oig-logstash-configmap created   Deploy the logstash pod   Navigate to the $WORKDIR/kubernetes/elasticsearch-and-kibana directory and create a logstash.yaml file as follows:\napiVersion: apps/v1 kind: Deployment metadata: name: oig-logstash namespace: \u0026lt;ELKNS\u0026gt; spec: selector: matchLabels: k8s-app: logstash template: # create pods using pod definition in this template metadata: labels: k8s-app: logstash spec: imagePullSecrets: - name: dockercred containers: - command: - logstash image: logstash:\u0026lt;ELK_VER\u0026gt; imagePullPolicy: IfNotPresent name: oig-logstash env: - name: ELASTICSEARCH_PASSWORD valueFrom: secretKeyRef: name: elasticsearch-pw-elastic key: password resources: ports: - containerPort: 5044 name: logstash volumeMounts: - mountPath: \u0026lt;mountPath\u0026gt; name: weblogic-domain-storage-volume - name: shared-logs mountPath: /shared-logs - mountPath: /usr/share/logstash/pipeline/ name: oig-logstash-pipeline - mountPath: /usr/share/logstash/config/logstash.yml subPath: logstash.yml name: config-volume - mountPath: /usr/share/logstash/config/certs name: elk-cert volumes: - configMap: defaultMode: 420 items: - key: elk.crt path: elk.crt name: elk-cert name: elk-cert - configMap: defaultMode: 420 items: - key: logstash-config.conf path: logstash-config.conf name: oig-logstash-configmap name: oig-logstash-pipeline - configMap: defaultMode: 420 items: - key: logstash.yml path: logstash.yml name: oig-logstash-configmap name: config-volume - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: governancedomain-domain-pvc - name: shared-logs emptyDir: {}  Change the \u0026lt;ELKNS\u0026gt;, and \u0026lt;ELK_VER\u0026gt; to match the values for your environment Change \u0026lt;mountPath\u0026gt; to match the mountPath returned earlier Change the claimName value to match the claimName returned earlier If your Kubernetes environment does not allow access to the internet to pull the logstash image, you must load the logstash image in your own container registry and change image: logstash:\u0026lt;ELK_VER\u0026gt; to the location of the image in your container registry e.g: container-registry.example.com/logstash:8.3.1  For example:\napiVersion: apps/v1 kind: Deployment metadata: name: oig-logstash namespace: oigns spec: selector: matchLabels: k8s-app: logstash template: # create pods using pod definition in this template metadata: labels: k8s-app: logstash spec: imagePullSecrets: - name: dockercred containers: - command: - logstash image: logstash:8.3.1 imagePullPolicy: IfNotPresent name: oig-logstash env: - name: ELASTICSEARCH_PASSWORD valueFrom: secretKeyRef: name: elasticsearch-pw-elastic key: password resources: ports: - containerPort: 5044 name: logstash volumeMounts: - mountPath: /u01/oracle/user_projects name: weblogic-domain-storage-volume - name: shared-logs mountPath: /shared-logs - mountPath: /usr/share/logstash/pipeline/ name: oig-logstash-pipeline - mountPath: /usr/share/logstash/config/logstash.yml subPath: logstash.yml name: config-volume - mountPath: /usr/share/logstash/config/certs name: elk-cert volumes: - configMap: defaultMode: 420 items: - key: elk.crt path: elk.crt name: elk-cert name: elk-cert - configMap: defaultMode: 420 items: - key: logstash-config.conf path: logstash-config.conf name: oig-logstash-configmap name: oig-logstash-pipeline - configMap: defaultMode: 420 items: - key: logstash.yml path: logstash.yml name: oig-logstash-configmap name: config-volume - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: governancedomain-domain-pvc - name: shared-logs emptyDir: {}   Deploy the logstash pod by executing the following command:\n$ kubectl create -f $WORKDIR/kubernetes/elasticsearch-and-kibana/logstash.yaml The output will look similar to the following:\ndeployment.apps/oig-logstash created   Run the following command to check the logstash pod is created correctly:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods -n oigns The output should look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 90m governancedomain-oim-server1 1/1 Running 0 88m governancedomain-soa-server1 1/1 Running 0 88m oig-logstash-77fbbc66f8-lsvcw 1/1 Running 0 3m25s Note: Wait a couple of minutes to make sure the pod has not had any failures or restarts. If the pod fails you can view the pod log using:\n$ kubectl logs -f oig-logstash-\u0026lt;pod\u0026gt; -n oigns Most errors occur due to misconfiguration of the logstash_cm.yaml or logstash.yaml. This is usually because of an incorrect value set, or the certificate was not pasted with the correct indentation.\nIf the pod has errors, delete the pod and configmap as follows:\n$ kubectl delete -f $WORKDIR/kubernetes/elasticsearch-and-kibana/logstash.yaml $ kubectl delete -f $WORKDIR/kubernetes/elasticsearch-and-kibana/logstash_cm.yaml Once you have resolved the issue in the yaml files, run the commands outlined earlier to recreate the configmap and logstash pod.\n  Verify and access the Kibana console To access the Kibana console you will need the Kibana URL as per Installing Elasticsearch (ELK) Stack and Kibana.\nFor Kibana 7.7.x and below:\n  Access the Kibana console with http://\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;/app/kibana and login with your username and password.\n  From the Navigation menu, navigate to Management \u0026gt; Kibana \u0026gt; Index Patterns.\n  In the Create Index Pattern page enter oiglogs* for the Index pattern and click Next Step.\n  In the Configure settings page, from the Time Filter field name drop down menu select @timestamp and click Create index pattern.\n  Once the index pattern is created click on Discover in the navigation menu to view the OIG logs.\n  For Kibana version 7.8.X and above:\n  Access the Kibana console with http://\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;/app/kibana and login with your username and password.\n  From the Navigation menu, navigate to Management \u0026gt; Stack Management.\n  Click Data Views in the Kibana section.\n  Click Create Data View and enter the following information:\n Name: oiglogs* Timestamp: @timestamp    Click Create Data View.\n  From the Navigation menu, click Discover to view the log file entries.\n  From the drop down menu, select oiglogs* to view the log file entries.\n  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/manage-oam-domains/monitoring-oam-domains/",
	"title": "d. Monitoring an OAM domain",
	"tags": [],
	"description": "Describes the steps for Monitoring the OAM domain.",
	"content": "After the OAM domain is set up you can monitor the OAM instance using Prometheus and Grafana.\nMonitor the Oracle Access Management instance using Prometheus and Grafana Using the WebLogic Monitoring Exporter you can scrape runtime information from a running Oracle Access Management instance and monitor them using Prometheus and Grafana.\nSet up monitoring Follow these steps to set up monitoring for an Oracle Access Management instance. For more details on WebLogic Monitoring Exporter, see here.\n"
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/patch-and-upgrade/upgrade-elk/",
	"title": "d. Upgrade Elasticsearch and Kibana",
	"tags": [],
	"description": "Instructions on how to upgrade Elastic Search and Kibana.",
	"content": "This section shows how to upgrade Elasticsearch and Kibana.\nTo determine if this step is required for the version you are upgrading to, refer to the Release Notes.\nUndeploy Elasticsearch and Kibana From October 22 (22.4.1) onwards, OAM logs should be stored on a centralized Elasticsearch and Kibana stack.\nDeployments prior to October 22 (22.4.1) used local deployments of Elasticsearch and Kibana.\nIf you are upgrading from July 22 (22.3.1) or earlier, to October 22 (22.4.1) or later, you must first undeploy Elasticsearch and Kibana using the steps below:\n  Make sure you have downloaded the latest code repository as per Download the latest code repository\n  Edit the $WORKDIR/kubernetes/elasticsearch-and-kibana/elasticsearch_and_kibana.yaml and change all instances of namespace to correspond to your deployment.\n  Delete the Elasticsearch and Kibana resources using the following command:\n$ kubectl delete -f $WORKDIR/kubernetes/elasticsearch-and-kibana/elasticsearch_and_kibana.yaml   Deploy Elasticsearch and Kibana in centralized stack  Follow Install Elasticsearch stack and Kibana to deploy Elasticsearch and Kibana in a centralized stack.  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/patch-and-upgrade/upgrade-elk/",
	"title": "d. Upgrade Elasticsearch and Kibana",
	"tags": [],
	"description": "Instructions on how to upgrade Elastic Search and Kibana.",
	"content": "This section shows how to upgrade Elasticsearch and Kibana.\nTo determine if this step is required for the version you are upgrading to, refer to the Release Notes.\nDownload the latest code repository  Make sure you have downloaded the latest code as per Download the latest code repository.  Undeploy Elasticsearch and Kibana From October 22 (22.4.1) onwards, OIG logs should be stored on a centralized Elasticsearch and Kibana stack.\nDeployments prior to October 22 (22.4.1) used local deployments of Elasticsearch and Kibana.\nIf you are upgrading from July 22 (22.3.1) or earlier, to October 22 (22.4.1) or later, you must first undeploy Elasticsearch and Kibana using the steps below:\n  Edit the $WORKDIR/kubernetes/elasticsearch-and-kibana/elasticsearch_and_kibana.yaml and change all instances of namespace to correspond to your deployment.\n  Delete the Elasticsearch and Kibana resources using the following command:\n$ kubectl delete -f $WORKDIR/kubernetes/elasticsearch-and-kibana/elasticsearch_and_kibana.yaml   Deploy Elasticsearch and Kibana in centralized stack  Follow Install Elasticsearch stack and Kibana to deploy Elasticsearch and Kibana in a centralized stack.  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/manage-oam-domains/hpa/",
	"title": "e. Kubernetes Horizontal Pod Autoscaler",
	"tags": [],
	"description": "Describes the steps for implementing the Horizontal Pod Autoscaler.",
	"content": " Prerequisite configuration Deploy the Kubernetes Metrics Server  Troubleshooting   Deploy HPA Testing HPA Delete the HPA Other considerations  Kubernetes Horizontal Pod Autoscaler (HPA) is supported from Weblogic Kubernetes Operator 4.0.X and later.\nHPA allows automatic scaling (up and down) of the OAM Managed Servers. If load increases then extra OAM Managed Servers will be started as required, up to the value configuredManagedServerCount defined when the domain was created (see Prepare the create domain script). Similarly, if load decreases, OAM Managed Servers will be automatically shutdown.\nFor more information on HPA, see Horizontal Pod Autoscaling.\nThe instructions below show you how to configure and run an HPA to scale an OAM cluster (accessdomain-oam-cluster) resource, based on CPU utilization or memory resource metrics. If required, you can also perform the following for the accessdomain-policy-cluster.\nNote: If you enable HPA and then decide you want to start/stop/scale OAM Managed servers manually as per Domain Life Cycle, it is recommended to delete HPA beforehand as per Delete the HPA.\nPrerequisite configuration In order to use HPA, the OAM domain must have been created with the required resources parameter. For OAM domains created with WLST scripts, this is as per Set the OAM server memory parameters. For OAM domains created with WDT models, the values should be set by default. For example:\nserverPod: env: - name: USER_MEM_ARGS value: \u0026quot;-XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m\u0026quot; resources: limits: cpu: \u0026quot;2\u0026quot; memory: \u0026quot;8Gi\u0026quot; requests: cpu: \u0026quot;1000m\u0026quot; memory: \u0026quot;4Gi\u0026quot; If you created the OAM domain without setting these parameters, then you can update the domain using the following steps:\n  Run the following command to edit the cluster:\n$ kubectl edit cluster accessdomain-oam-cluster -n oamns Note: This opens an edit session for the oam-cluster where parameters can be changed using standard vi commands.\n  In the edit session, search for spec:, and then look for the replicas parameter under clusterName: oam_cluster. Change the entry so it looks as follows:\nspec: clusterName: oam_cluster replicas: 1 serverPod: env: - name: USER_MEM_ARGS value: -XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m resources: limits: cpu: \u0026quot;2\u0026quot; memory: 8Gi requests: cpu: 1000m memory: 4Gi serverService: precreateService: true ...   Save the file and exit (:wq!)\nThe output will look similar to the following:\ncluster.weblogic.oracle/accessdomain-oam-cluster edited The OAM Managed Server pods will then automatically be restarted.\n  Deploy the Kubernetes Metrics Server Before deploying HPA you must deploy the Kubernetes Metrics Server.\n  Check to see if the Kubernetes Metrics Server is already deployed:\n$ kubectl get pods -n kube-system | grep metric If a row is returned as follows, then Kubernetes Metric Server is deployed and you can move to Deploy HPA.\nmetrics-server-d9694457-mf69d 1/1 Running 0 5m13s   If no rows are returned by the previous command, then the Kubernetes Metric Server needs to be deployed. Run the following commands to get the components.yaml:\n$ mkdir $WORKDIR/kubernetes/hpa $ cd $WORKDIR/kubernetes/hpa $ wget https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml   Deploy the Kubernetes Metrics Server by running the following command:\n$ kubectl apply -f components.yaml The output will look similar to the following:\nserviceaccount/metrics-server created clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created clusterrole.rbac.authorization.k8s.io/system:metrics-server created rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created service/metrics-server created deployment.apps/metrics-server created apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created   Run the following command to check Kubernetes Metric Server is running:\n$ kubectl get pods -n kube-system | grep metric Make sure the pod has a READY status of 1/1:\nmetrics-server-d9694457-mf69d 1/1 Running 0 39s   Troubleshooting If the Kubernetes Metric Server does not reach the READY 1/1 state, run the following commands:\n$ kubectl describe pod \u0026lt;metrics-server-pod\u0026gt; -n kube-system $ kubectl logs \u0026lt;metrics-server-pod\u0026gt; -n kube-system If you see errors such as:\nReadiness probe failed: HTTP probe failed with statuscode: 500 and:\nE0907 13:07:50.937308 1 scraper.go:140] \u0026quot;Failed to scrape node\u0026quot; err=\u0026quot;Get \\\u0026quot;https://100.105.18.113:10250/metrics/resource\\\u0026quot;: x509: cannot validate certificate for 100.105.18.113 because it doesn't contain any IP SANs\u0026quot; node=\u0026quot;worker-node1\u0026quot; then you may need to install a valid cluster certificate for your Kubernetes cluster.\nFor testing purposes, you can resolve this issue by:\n  Delete the Kubernetes Metrics Server by running the following command:\n$ kubectl delete -f $WORKDIR/kubernetes/hpa/components.yaml   Edit the $WORKDIR/hpa/components.yaml and locate the args: section. Add kubelet-insecure-tls to the arguments. For example:\nspec: containers: - args: - --cert-dir=/tmp - --secure-port=4443 - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname - --kubelet-use-node-status-port - --kubelet-insecure-tls - --metric-resolution=15s image: registry.k8s.io/metrics-server/metrics-server:v0.6.4 ...   Deploy the Kubenetes Metrics Server using the command:\n$ kubectl apply -f components.yaml Run the following and make sure the READY status shows 1/1:\n$ kubectl get pods -n kube-system | grep metric The output should look similar to the following:\nmetrics-server-d9694457-mf69d 1/1 Running 0 40s   Deploy HPA The steps below show how to configure and run an HPA to scale the accessdomain-oam-cluster, based on the CPU or memory utilization resource metrics.\nThe default OAM deployment creates the cluster accessdomain-oam-cluster which starts one OAM Managed Server (oam_server1). The deployment also creates, but doesn’t start, four extra OAM Managed Servers (oam-server2 to oam-server5).\nIn the following example an HPA resource is created, targeted at the cluster resource accessdomain-oam-cluster. This resource will autoscale OAM Managed Servers from a minimum of 1 cluster member up to 5 cluster members. Scaling up will occur when the average CPU is consistently over 70%. Scaling down will occur when the average CPU is consistently below 70%.\n  Navigate to the $WORKDIR/kubernetes/hpa and create an autoscalehpa.yaml file that contains the following.\n# apiVersion: autoscaling/v2 kind: HorizontalPodAutoscaler metadata: name: accessdomain-oam-cluster-hpa namespace: oamns spec: scaleTargetRef: apiVersion: weblogic.oracle/v1 kind: Cluster name: accessdomain-oam-cluster behavior: scaleDown: stabilizationWindowSeconds: 60 scaleUp: stabilizationWindowSeconds: 60 minReplicas: 1 maxReplicas: 5 metrics: - type: Resource resource: name: cpu target: type: Utilization averageUtilization: 70 Note : minReplicas and maxReplicas should match your current domain settings.\nNote: For setting HPA based on Memory Metrics, update the metrics block with the following content. Please note we recommend using only CPU or Memory, not both.\nmetrics: - type: Resource resource: name: memory target: type: Utilization averageUtilization: 70   Run the following command to create the autoscaler:\n$ kubectl apply -f autoscalehpa.yaml The output will look similar to the following:\nhorizontalpodautoscaler.autoscaling/accessdomain-oam-cluster-hpa created   Verify the status of the autoscaler by running the following:\n$ kubectl get hpa -n oamns The output will look similar to the following:\nNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE accessdomain-oam-cluster-hpa Cluster/accessdomain-oam-cluster 5%/70% 1 5 1 21s In the example above, this shows that CPU is currently running at 5% for the accessdomain-oam-cluster-hpa.\n  Testing HPA   Check the current status of the OAM Managed Servers:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 0/1 Running 0 141m accessdomain-oam-policy-mgr1 0/1 Running 0 138m accessdomain-oam-server1 1/1 Running 0 138m nginx-ingress-ingress-nginx-controller-5f9bdf4c9-f5trt 1/1 Running 0 4h33m In the above, only accessdomain-oam-server1 is running.\n  To test HPA can scale up the WebLogic cluster accessdomain-oam-cluster, run the following commands:\n$ kubectl exec --stdin --tty accessdomain-oam-server1 -n oamns -- /bin/bash This will take you inside a bash shell inside the oam_server1 pod:\n[oracle@accessdomain-oam-server1 oracle]$ Inside the bash shell, run the following command to increase the load on the CPU:\n[oracle@accessdomain-oam-server1 oracle]$ dd if=/dev/zero of=/dev/null This command will continue to run in the foreground.\n  In a command window outside the bash shell, run the following command to view the current CPU usage:\n$ kubectl get hpa -n oamns The output will look similar to the following:\nNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE accessdomain-oam-cluster-hpa Cluster/accessdomain-oam-cluster 470%/70% 1 5 1 21s In the above example the CPU has increased to 470%. As this is above the 70% limit, the autoscaler increases the replicas on the Cluster resource and the operator responds by starting additional cluster members.\n  Run the following to see if any more OAM Managed Servers are started:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 0/1 Running 143m accessdomain-oam-policy-mgr1 0/1 Running 0 140m accessdomain-oam-server1 1/1 Running 0 140m accessdomain-oam-server2 1/1 Running 0 3m20s accessdomain-oam-server3 1/1 Running 0 3m20s accessdomain-oam-server4 1/1 Running 0 3m19s accessdomain-oam-server5 1/1 Running 0 3m5s In the example above four more OAM Managed Servers have been started (oam-server2 - oam-server5).\nNote: It may take some time for the servers to appear and start. Once the servers are at READY status of 1/1, the servers are started.\n  To stop the load on the CPU, in the bash shell, issue a Control C, and then exit the bash shell:\n[oracle@accessdomain-oam-server1 oracle]$ dd if=/dev/zero of=/dev/null ^C [oracle@accessdomain-oam-server1 oracle]$ exit   Run the following command to view the current CPU usage:\n$ kubectl get hpa -n oamns The output will look similar to the following:\nNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE accessdomain-oam-cluster-hpa Cluster/accessdomain-oam-cluster 19%/70% 1 5 5 19m In the above example CPU has dropped to 19%. As this is below the 70% threshold, you should see the autoscaler scale down the servers:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 152m accessdomain-oam-policy-mgr1 1/1 Running 0 149m accessdomain-oam-server1 1/1 Running 0 149m accessdomain-oam-server2 1/1 Running 0 14m accessdomain-oam-server3 0/1 Terminating 0 14m nginx-ingress-ingress-nginx-controller-5f9bdf4c9-f5trt 1/1 Running 0 4h45m Eventually, all the servers except oam-server1 will disappear:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 154m accessdomain-oam-policy-mgr1 1/1 Running 0 151m accessdomain-oam-server1 1/1 Running 0 151m nginx-ingress-ingress-nginx-controller-5f9bdf4c9-f5trt 1/1 Running 0 4h47m   Delete the HPA   If you need to delete the HPA, you can do so by running the following command:\n$ cd $WORKDIR/kubernetes/hpa $ kubectl delete -f autoscalehpa.yaml   Other considerations  If HPA is deployed and you need to upgrade the OAM image, then you must delete the HPA before upgrading. Once the upgrade is successful you can deploy HPA again. If you choose to start/stop an OAM Managed Server manually as per Domain Life Cycle, then it is recommended to delete the HPA before doing so.  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/manage-oig-domains/monitoring-oim-domains/",
	"title": "e. Monitoring an OIG domain",
	"tags": [],
	"description": "Describes the steps for Monitoring the OIG domain and Publishing the logs to Elasticsearch.",
	"content": "After the OIG domain is set up you can monitor the OIG instance using Prometheus and Grafana.\nMonitor the Oracle Identity Management instance using Prometheus and Grafana Using the WebLogic Monitoring Exporter you can scrape runtime information from a running Oracle Identity Management instance and monitor them using Prometheus and Grafana.\nSet up monitoring Follow these steps to set up monitoring for an Oracle Identity Management instance. For more details on WebLogic Monitoring Exporter, see here.\n"
},
{
	"uri": "/fmw-kubernetes/idm-products/enterprise-deployments/",
	"title": "Enterprise Deployments",
	"tags": [],
	"description": "The complete Oracle Identity Management suite can be deployed in a production environment",
	"content": "Enterprise Deployments of Oracle Identity Management The entire Oracle Identity and Access Management 12.2.1.4 Suite can be deployed in a production environment. See the following sections:\n a. Enterprise Deployment Guide   b. Enterprise Deployment Guide Automation Scripts   "
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/manage-oam-domains/delete-domain-home/",
	"title": "f. Delete the OAM domain home",
	"tags": [],
	"description": "Learn about the steps to cleanup the OAM domain home.",
	"content": "Sometimes in production, but most likely in testing environments, you might want to remove the domain home that is generated using the create-domain.sh script.\n  Run the following command to delete the domain:\n$ cd $WORKDIR/kubernetes/delete-domain $ ./delete-weblogic-domain-resources.sh -d \u0026lt;domain_uid\u0026gt; For example:\n$ cd $WORKDIR/kubernetes/delete-domain $ ./delete-weblogic-domain-resources.sh -d accessdomain   Drop the RCU schemas as follows:\n$ kubectl exec -it helper -n \u0026lt;domain_namespace\u0026gt; -- /bin/bash [oracle@helper ~]$ [oracle@helper ~]$ export CONNECTION_STRING=\u0026lt;db_host.domain\u0026gt;:\u0026lt;db_port\u0026gt;/\u0026lt;service_name\u0026gt; [oracle@helper ~]$ export RCUPREFIX=\u0026lt;rcu_schema_prefix\u0026gt; /u01/oracle/oracle_common/bin/rcu -silent -dropRepository -databaseType ORACLE -connectString $CONNECTION_STRING \\ -dbUser sys -dbRole sysdba -selectDependentsForComponents true -schemaPrefix $RCUPREFIX \\ -component MDS -component IAU -component IAU_APPEND -component IAU_VIEWER -component OPSS \\ -component WLS -component STB -component OAM -f \u0026lt; /tmp/pwd.txt For example:\n$ kubectl exec -it helper -n oamns -- /bin/bash [oracle@helper ~]$ export CONNECTION_STRING=mydatabasehost.example.com:1521/orcl.example.com [oracle@helper ~]$ export RCUPREFIX=OAMK8S /u01/oracle/oracle_common/bin/rcu -silent -dropRepository -databaseType ORACLE -connectString $CONNECTION_STRING \\ -dbUser sys -dbRole sysdba -selectDependentsForComponents true -schemaPrefix $RCUPREFIX \\ -component MDS -component IAU -component IAU_APPEND -component IAU_VIEWER -component OPSS \\ -component WLS -component STB -component OAM -f \u0026lt; /tmp/pwd.txt   Delete the contents of the persistent volume, for example:\n$ rm -rf \u0026lt;persistent_volume\u0026gt;/accessdomainpv/* For example:\n$ rm -rf /scratch/shared/accessdomainpv/*   Delete the WebLogic Kubernetes Operator, by running the following command:\n$ helm delete weblogic-kubernetes-operator -n opns   Delete the label from the OAM namespace:\n$ kubectl label namespaces \u0026lt;domain_namespace\u0026gt; weblogic-operator- For example:\n$ kubectl label namespaces oamns weblogic-operator-   Delete the service account for the operator:\n$ kubectl delete serviceaccount \u0026lt;sample-kubernetes-operator-sa\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl delete serviceaccount op-sa -n opns   Delete the operator namespace:\n$ kubectl delete namespace \u0026lt;sample-kubernetes-operator-ns\u0026gt; For example:\n$ kubectl delete namespace opns   To delete NGINX:\n$ helm delete oam-nginx -n \u0026lt;domain_namespace\u0026gt; For example:\n$ helm delete oam-nginx -n oamns Then run:\n$ helm delete nginx-ingress -n \u0026lt;domain_namespace\u0026gt; For example:\n$ helm delete nginx-ingress -n oamns   Delete the OAM namespace:\n$ kubectl delete namespace \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl delete namespace oamns   "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/manage-oig-domains/hpa/",
	"title": "f. Kubernetes Horizontal Pod Autoscaler",
	"tags": [],
	"description": "Describes the steps for implementing the Horizontal Pod Autoscaler.",
	"content": " Prerequisite configuration Deploy the Kubernetes Metrics Server  Troubleshooting   Deploy HPA Testing HPA Delete the HPA Other considerations  Kubernetes Horizontal Pod Autoscaler (HPA) is supported from Weblogic Kubernetes Operator 4.0.X and later.\nHPA allows automatic scaling (up and down) of the OIG Managed Servers. If load increases then extra OIG Managed Servers will be started as required, up to the value configuredManagedServerCount defined when the domain was created (see Prepare the create domain script). Similarly, if load decreases, OIG Managed Servers will be automatically shutdown.\nFor more information on HPA, see Horizontal Pod Autoscaling.\nThe instructions below show you how to configure and run an HPA to scale an OIG cluster (governancedomain-oim-cluster) resource, based on CPU utilization or memory resource metrics. If required, you can also perform the following for the governancedomain-soa-cluster.\nNote: If you enable HPA and then decide you want to start/stop/scale OIG Managed servers manually as per Domain Life Cycle, it is recommended to delete HPA beforehand as per Delete the HPA.\nPrerequisite configuration In order to use HPA, the OIG domain must have been created with the required resources parameter as per Set the OIM server memory parameters. For example:\nserverPod: env: - name: USER_MEM_ARGS value: \u0026quot;-XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m\u0026quot; resources: limits: cpu: \u0026quot;2\u0026quot; memory: \u0026quot;8Gi\u0026quot; requests: cpu: \u0026quot;1000m\u0026quot; memory: \u0026quot;4Gi\u0026quot; If you created the OIG domain without setting these parameters, then you can update the domain using the following steps:\n  Run the following command to edit the cluster:\n$ kubectl edit cluster governancedomain-oim-cluster -n oigns Note: This opens an edit session for the governancedomain-oim-cluster where parameters can be changed using standard vi commands.\n  In the edit session, search for spec:, and then look for the replicas parameter under clusterName: oim_cluster. Change the entry so it looks as follows:\nspec: clusterName: oim_cluster replicas: 1 serverPod: env: - name: USER_MEM_ARGS value: -XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m resources: limits: cpu: \u0026quot;2\u0026quot; memory: 8Gi requests: cpu: 1000m memory: 4Gi serverService: precreateService: true ...   Save the file and exit (:wq!)\nThe output will look similar to the following:\ncluster.weblogic.oracle/governancedomain-oim-cluster edited The OIG Managed Server pods will then automatically be restarted.\n  Deploy the Kubernetes Metrics Server Before deploying HPA you must deploy the Kubernetes Metrics Server.\n  Check to see if the Kubernetes Metrics Server is already deployed:\n$ kubectl get pods -n kube-system | grep metric If a row is returned as follows, then Kubernetes Metric Server is deployed and you can move to Deploy HPA.\nmetrics-server-d9694457-mf69d 1/1 Running 0 5m13s   If no rows are returned by the previous command, then the Kubernetes Metric Server needs to be deployed. Run the following commands to get the components.yaml:\n$ mkdir $WORKDIR/kubernetes/hpa $ cd $WORKDIR/kubernetes/hpa $ wget https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml   Deploy the Kubernetes Metrics Server by running the following command:\n$ kubectl apply -f components.yaml The output will look similar to the following:\nserviceaccount/metrics-server created clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created clusterrole.rbac.authorization.k8s.io/system:metrics-server created rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created service/metrics-server created deployment.apps/metrics-server created apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created   Run the following command to check Kubernetes Metric Server is running:\n$ kubectl get pods -n kube-system | grep metric Make sure the pod has a READY status of 1/1:\nmetrics-server-d9694457-mf69d 1/1 Running 0 39s   Troubleshooting If the Kubernetes Metric Server does not reach the READY 1/1 state, run the following commands:\n$ kubectl describe pod \u0026lt;metrics-server-pod\u0026gt; -n kube-system $ kubectl logs \u0026lt;metrics-server-pod\u0026gt; -n kube-system If you see errors such as:\nReadiness probe failed: HTTP probe failed with statuscode: 500 and:\nE0907 13:07:50.937308 1 scraper.go:140] \u0026quot;Failed to scrape node\u0026quot; err=\u0026quot;Get \\\u0026quot;https://100.105.18.113:10250/metrics/resource\\\u0026quot;: x509: cannot validate certificate for 100.105.18.113 because it doesn't contain any IP SANs\u0026quot; node=\u0026quot;worker-node1\u0026quot; then you may need to install a valid cluster certificate for your Kubernetes cluster.\nFor testing purposes, you can resolve this issue by:\n  Delete the Kubernetes Metrics Server by running the following command:\n$ kubectl delete -f $WORKDIR/kubernetes/hpa/components.yaml   Edit the $WORKDIR/kubernetes/hpa/components.yaml and locate the args: section. Add kubelet-insecure-tls to the arguments. For example:\nspec: containers: - args: - --cert-dir=/tmp - --secure-port=4443 - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname - --kubelet-use-node-status-port - --kubelet-insecure-tls - --metric-resolution=15s image: registry.k8s.io/metrics-server/metrics-server:v0.6.4 ...   Deploy the Kubenetes Metrics Server using the command:\n$ kubectl apply -f components.yaml Run the following and make sure the READY status shows 1/1:\n$ kubectl get pods -n kube-system | grep metric The output should look similar to the following:\nmetrics-server-d9694457-mf69d 1/1 Running 0 40s   Deploy HPA The steps below show how to configure and run an HPA to scale the governancedomain-oim-cluster, based on the CPU or memory utilization resource metrics.\nThe default OIG deployment creates the cluster governancedomain-oim-cluster which starts one OIG Managed Server (oim_server1). The deployment also creates, but doesn’t start, four extra OIG Managed Servers (oim-server2 to oim-server5).\nIn the following example an HPA resource is created, targeted at the cluster resource governancedomain-oim-cluster. This resource will autoscale OIG Managed Servers from a minimum of 1 cluster member up to 5 cluster members. Scaling up will occur when the average CPU is consistently over 70%. Scaling down will occur when the average CPU is consistently below 70%.\n  Navigate to the $WORKDIR/kubernetes/hpa and create an autoscalehpa.yaml file that contains the following.\n# apiVersion: autoscaling/v2 kind: HorizontalPodAutoscaler metadata: name: governancedomain-oim-cluster-hpa namespace: oigns spec: scaleTargetRef: apiVersion: weblogic.oracle/v1 kind: Cluster name: governancedomain-oim-cluster behavior: scaleDown: stabilizationWindowSeconds: 60 scaleUp: stabilizationWindowSeconds: 60 minReplicas: 1 maxReplicas: 5 metrics: - type: Resource resource: name: cpu target: type: Utilization averageUtilization: 70 Note : minReplicas and maxReplicas should match your current domain settings.\nNote: For setting HPA based on Memory Metrics, update the metrics block with the following content. Please note we recommend using only CPU or Memory, not both.\nmetrics: - type: Resource resource: name: memory target: type: Utilization averageUtilization: 70   Run the following command to create the autoscaler:\n$ kubectl apply -f autoscalehpa.yaml The output will look similar to the following:\nhorizontalpodautoscaler.autoscaling/governancedomain-oim-cluster-hpa created   Verify the status of the autoscaler by running the following:\n$ kubectl get hpa -n oigns The output will look similar to the following:\nNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE governancedomain-oim-cluster-hpa Cluster/governancedomain-oim-cluster 16%/70% 1 5 1 20s In the example above, this shows that CPU is currently running at 16% for the governancedomain-oim-cluster-hpa.\n  Testing HPA   Check the current status of the OIG Managed Servers:\n$ kubectl get pods -n oigns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 20m governancedomain-oim-server1 1/1 Running 0 17m governancedomain-soa-server1 1/1 Running 0 17m In the above only governancedomain-oim-server1 is running.\n  To test HPA can scale up the WebLogic cluster governancedomain-oim-cluster, run the following commands:\n$ kubectl exec --stdin --tty governancedomain-oim-server1 -n oigns -- /bin/bash This will take you inside a bash shell inside the oim_server1 pod:\n[oracle@governancedomain-oim-server1 oracle]$ Inside the bash shell, run the following command to increase the load on the CPU:\n[oracle@governancedomain-oim-server1 oracle]$ dd if=/dev/zero of=/dev/null This command will continue to run in the foreground.\n  In a command window outside the bash shell, run the following command to view the current CPU usage:\n$ kubectl get hpa -n oigns The output will look similar to the following:\nNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE governancedomain-oim-cluster-hpa Cluster/governancedomain-oim-cluster 386%/70% 1 5 1 2m47s In the above example the CPU has increased to 386%. As this is above the 70% limit, the autoscaler increases the replicas on the Cluster resource and the operator responds by starting additional cluster members.\n  Run the following to see if any more OIG Managed Servers are started:\n$ kubectl get pods -n oigns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 30m governancedomain-oim-server1 1/1 Running 0 27m governancedomain-oim-server2 1/1 Running 0 10m governancedomain-oim-server3 1/1 Running 0 10m governancedomain-oim-server4 1/1 Running 0 10m governancedomain-oim-server5 1/1 Running 0 10m governancedomain-soa-server1 1/1 Running 0 27m In the example above four more OIG Managed Servers have been started (oim-server2 - oim-server5).\nNote: It may take some time for the servers to appear and start. Once the servers are at READY status of 1/1, the servers are started.\n  To stop the load on the CPU, in the bash shell, issue a Control C, and then exit the bash shell:\n[oracle@governancedomain-oim-server1 oracle]$ dd if=/dev/zero of=/dev/null ^C [oracle@governancedomain-oim-server1 oracle]$ exit   Run the following command to view the current CPU usage:\n$ kubectl get hpa -n oigns The output will look similar to the following:\nNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE governancedomain-oim-cluster-hpa Cluster/governancedomain-oim-cluster 33%/70% 1 5 5 37m In the above example CPU has dropped to 33%. As this is below the 70% threshold, you should see the autoscaler scale down the servers:\n$ kubectl get pods -n oigns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 43m governancedomain-oim-server1 1/1 Running 0 40m governancedomain-oim-server2 1/1 Running 0 13m governancedomain-oim-server3 1/1 Running 0 13m governancedomain-oim-server4 1/1 Running 0 13m governancedomain-oim-server5 0/1 Terminating 0 13m governancedomain-soa-server1 1/1 Running 0 40m Eventually, all the servers except oim-server1 will disappear:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 44m governancedomain-oim-server1 1/1 Running 0 41m governancedomain-soa-server1 1/1 Running 0 41m   Delete the HPA   If you need to delete the HPA, you can do so by running the following command:\n$ cd $WORKDIR/kubernetes/hpa $ kubectl delete -f autoscalehpa.yaml   Other considerations  If HPA is deployed and you need to upgrade the OIG image, then you must delete the HPA before upgrading. Once the upgrade is successful you can deploy HPA again. If you choose to start/stop an OIG Managed Server manually as per Domain Life Cycle, then it is recommended to delete the HPA before doing so.  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/manage-oig-domains/delete-domain-home/",
	"title": "g. Delete the OIG domain home",
	"tags": [],
	"description": "Learn about the steps to cleanup the OIG domain home.",
	"content": "Sometimes in production, but most likely in testing environments, you might want to remove the domain home that is generated using the create-domain.sh script.\n  Run the following command to delete the domain:\n$ cd $WORKDIR/kubernetes/delete-domain $ ./delete-weblogic-domain-resources.sh -d \u0026lt;domain_uid\u0026gt; For example:\n$ cd $WORKDIR/kubernetes/delete-domain $ ./delete-weblogic-domain-resources.sh -d governancedomain   Drop the RCU schemas as follows:\n$ kubectl exec -it helper -n \u0026lt;domain_namespace\u0026gt; -- /bin/bash [oracle@helper ~]$ [oracle@helper ~]$ export CONNECTION_STRING=\u0026lt;db_host.domain\u0026gt;:\u0026lt;db_port\u0026gt;/\u0026lt;service_name\u0026gt; [oracle@helper ~]$ export RCUPREFIX=\u0026lt;rcu_schema_prefix\u0026gt; /u01/oracle/oracle_common/bin/rcu -silent -dropRepository -databaseType ORACLE -connectString $CONNECTION_STRING \\ -dbUser sys -dbRole sysdba -selectDependentsForComponents true -schemaPrefix $RCUPREFIX \\ -component MDS -component IAU -component IAU_APPEND -component IAU_VIEWER -component OPSS \\ -component WLS -component STB -component OIM -component SOAINFRA -component UCSUMS -f \u0026lt; /tmp/pwd.txt For example:\n$ kubectl exec -it helper -n oigns -- /bin/bash [oracle@helper ~]$ export CONNECTION_STRING=mydatabasehost.example.com:1521/orcl.example.com [oracle@helper ~]$ export RCUPREFIX=OIGK8S /u01/oracle/oracle_common/bin/rcu -silent -dropRepository -databaseType ORACLE -connectString $CONNECTION_STRING \\ -dbUser sys -dbRole sysdba -selectDependentsForComponents true -schemaPrefix $RCUPREFIX \\ -component MDS -component IAU -component IAU_APPEND -component IAU_VIEWER -component OPSS \\ -component WLS -component STB -component OIM -component SOAINFRA -component UCSUMS -f \u0026lt; /tmp/pwd.txt   Delete the contents of the persistent volume:\n$ rm -rf \u0026lt;persistent_volume\u0026gt;/governancedomainpv/* For example:\n$ rm -rf /scratch/shared/governancedomainpv/*   Delete the WebLogic Kubernetes Operator, by running the following command:\n$ helm delete weblogic-kubernetes-operator -n opns   Delete the label from the OIG namespace:\n$ kubectl label namespaces \u0026lt;domain_namespace\u0026gt; weblogic-operator- For example:\n$ kubectl label namespaces oigns weblogic-operator-   Delete the service account for the operator:\n$ kubectl delete serviceaccount \u0026lt;sample-kubernetes-operator-sa\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl delete serviceaccount op-sa -n opns   Delete the operator namespace:\n$ kubectl delete namespace \u0026lt;sample-kubernetes-operator-ns\u0026gt; For example:\n$ kubectl delete namespace opns   To delete NGINX:\n$ helm delete governancedomain-nginx-designconsole -n \u0026lt;domain_namespace\u0026gt; For example:\n$ helm delete governancedomain-nginx-designconsole -n oigns Then run:\n$ helm delete governancedomain-nginx -n \u0026lt;domain_namespace\u0026gt; For example:\n$ helm delete governancedomain-nginx -n oigns Then run:\n$ helm delete nginx-ingress -n \u0026lt;domain_namespace\u0026gt; For example:\n$ helm delete nginx-ingress -n nginxssl Then delete the NGINX namespace:\n$ kubectl delete namespace \u0026lt;namespace\u0026gt; For example:\n$ kubectl delete namespace nginxssl   Delete the OIG namespace:\n$ kubectl delete namespace \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl delete namespace oigns   "
},
{
	"uri": "/fmw-kubernetes/idm-products/oam/",
	"title": "Oracle Access Management",
	"tags": [],
	"description": "The WebLogic Kubernetes Operator supports deployment of Oracle Access Management (OAM).",
	"content": "Oracle Access Management on Kubernetes Oracle supports the deployment of Oracle Access Management 12.2.1.4 on Kubernetes. See the following sections:\n Introduction   Release Notes   Prerequisites   Prepare your environment   Create OAM domains   Configure an Ingress for an OAM domain   Validate Domain URLs   Post Install Configuration   Validate a Basic SSO Flow using WebGate Registration    Manage OAM Domains   Create or update an image   Patch and Upgrade   Troubleshooting   "
},
{
	"uri": "/fmw-kubernetes/ohs/",
	"title": "Oracle HTTP Server",
	"tags": [],
	"description": "Oracle HTTP Server can be deployed on a Kubernetes cluster. Follow the instructions in this guide to set up Oracle HTTP Server on Kubernetes.",
	"content": "Oracle HTTP Server on Kubernetes Oracle supports the deployment of Oracle HTTP Server on Kubernetes. See the following sections:\n Introduction   Release Notes   Prerequisites   Prepare your environment   Create the OHS Container and Nodeport   Manage OHS Domains   Create or update an image   Patch and Upgrade   Troubleshooting   "
},
{
	"uri": "/fmw-kubernetes/idm-products/oig/",
	"title": "Oracle Identity Governance",
	"tags": [],
	"description": "The WebLogic Kubernetes Operator supports deployment of Oracle Identity Governance (OIG).",
	"content": "Oracle Identity Governance on Kubernetes Oracle supports the deployment of Oracle Identity Governance 12.2.1.4 on Kubernetes. See the following sections:\n Introduction   Release Notes   Prerequisites   Prepare your environment   Create OIG domains   Configure an ingress for an OIG domain   Validate domain URLs   Post install configuration   Configure Design Console   Manage OIG domains   Create or update an image   Patch and upgrade   Troubleshooting   "
},
{
	"uri": "/fmw-kubernetes/idm-products/oid/",
	"title": "Oracle Internet Directory",
	"tags": [],
	"description": "Oracle Internet Directory provides a comprehensive Directory Solution for robust Identity Management",
	"content": "As of July 2022, container support has been removed for Oracle Internet Directory. Refer to document ID 2723908.1 on My Oracle Support for more details.\nDocumentation for earlier releases To view documentation for previous releases, see:\n Version 22.2.1 Version 21.4.2  "
},
{
	"uri": "/fmw-kubernetes/idm-products/oud/",
	"title": "Oracle Unified Directory",
	"tags": [],
	"description": "Oracle Unified Directory provides a comprehensive Directory Solution for robust Identity Management",
	"content": "Oracle Unified Directory on Kubernetes Oracle supports the deployment of Oracle Unified Directory 12.2.1.4 on Kubernetes. See the following sections:\n Introduction   Release Notes   Prerequisites   Prepare Your Environment   Create Oracle Unified Directory Instances   Configure an Ingress for OUD   Manage Oracle Unified Directory Containers   Create or update an image   Patch and Upgrade   Troubleshooting   "
},
{
	"uri": "/fmw-kubernetes/idm-products/oudsm/",
	"title": "Oracle Unified Directory Services Manager",
	"tags": [],
	"description": "Oracle Unified Directory Services Manager provides an interface for managing instances of Oracle Unified Directory",
	"content": "Oracle Unified Directory Services Manager on Kubernetes Oracle supports the deployment of Oracle Unified Directory Services Manager 12.2.1.4 on Kubernetes. See the following sections:\n Introduction   Release Notes   Prerequisites   Prepare Your Environment   Create Oracle Unified Directory Services Manager Instances   Configure an Ingress for OUDSM   Manage Oracle Unified Directory Services Manager Containers   Create or update an image   Patch and upgrade   Troubleshooting   "
},
{
	"uri": "/fmw-kubernetes/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]