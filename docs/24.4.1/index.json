[
{
	"uri": "/fmw-kubernetes/24.4.1/",
	"title": "Oracle Fusion Middleware on Kubernetes",
	"tags": [],
	"description": "This document lists all the Oracle Fusion Middleware products deployment supported on Kubernetes.",
	"content": "Oracle Fusion Middleware on Kubernetes Oracle supports the deployment of the following Oracle Fusion Middleware products on Kubernetes. Click on the appropriate document link below to get started on setting up the product.\n Oracle Identity Management on Kubernetes  This document lists all the Oracle Identity Management products deployment supported on Kubernetes.\n Oracle HTTP Server  Oracle HTTP Server can be deployed on a Kubernetes cluster. Follow the instructions in this guide to set up Oracle HTTP Server on Kubernetes.\n "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/configure-design-console/using-the-design-console-with-nginx-non-ssl/",
	"title": "a. Using Design Console with NGINX(non-SSL)",
	"tags": [],
	"description": "Configure Design Console with NGINX(non-SSL).",
	"content": "Configure an NGINX ingress (non-SSL) to allow Design Console to connect to your Kubernetes cluster.\n  Prerequisites\n  Setup routing rules for the Design Console ingress\n  Create the ingress\n  Update the T3 channel\n  Restart the OIG Managed Server\n  Design Console client\na. Using an on-premises installed Design Console\nb. Using a container image for Design Console\n  Login to the Design Console\n  Prerequisites If you haven\u0026rsquo;t already configured an NGINX ingress controller (Non-SSL) for OIG, follow Using an Ingress with NGINX (non-SSL).\nMake sure you know the master hostname and ingress port for NGINX before proceeding e.g http://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}.\nNote: In all steps below if you are using a load balancer for your ingress instead of NodePort then replace ${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT} with `${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT}.\nSetup routing rules for the Design Console ingress   Setup routing rules by running the following commands:\n$ cd $WORKDIR/kubernetes/design-console-ingress Edit values.yaml and ensure that tls: NONSSL and domainUID: governancedomain are set, for example:\n# Load balancer type. Supported values are: NGINX type: NGINX # Type of Configuration Supported Values are : NONSSL,SSL # tls: NONSSL tls: NONSSL # TLS secret name if the mode is SSL secretName: dc-tls-cert # WLS domain as backend to the load balancer wlsDomain: domainUID: governancedomain oimClusterName: oim_cluster oimServerT3Port: 14002   Create the ingress   Run the following command to create the ingress:\n$ cd $WORKDIR $ helm install governancedomain-nginx-designconsole kubernetes/design-console-ingress --namespace oigns --values kubernetes/design-console-ingress/values.yaml For example:\nThe output will look similar to the following:\nNAME: governancedomain-nginx-designconsole LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oigns STATUS: deployed REVISION: 1 TEST SUITE: None   Run the following command to show the ingress is created successfully:\n$ kubectl describe ing governancedomain-nginx-designconsole -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe ing governancedomain-nginx-designconsole -n oigns The output will look similar to the following:\nName: governancedomain-nginx-designconsole Namespace: oigns Address: Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) Rules: Host Path Backends ---- ---- -------- * governancedomain-cluster-oim-cluster:14002 (10.244.1.25:14002) Annotations: kubernetes.io/ingress.class: nginx meta.helm.sh/release-name: governancedomain-nginx-designconsole meta.helm.sh/release-namespace: oigns nginx.ingress.kubernetes.io/affinity: cookie nginx.ingress.kubernetes.io/enable-access-log: false Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 13s nginx-ingress-controller Scheduled for sync   Update the T3 channel   Log in to the WebLogic Console using http://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/console.\n  Navigate to Environment, click Servers, and then select oim_server1.\n  Click Protocols, and then Channels.\n  Click the default T3 channel called T3Channel.\n  Click Lock and Edit.\n  Set the External Listen Address to the ingress controller hostname ${MASTERNODE-HOSTNAME}.\n  Set the External Listen Port to the ingress controller port ${MASTERNODE-PORT}.\n  Click Save.\n  Click Activate Changes.\n  Restart the OIG Managed Server Restart the OIG Managed Server for the above changes to take effect:\n$ cd $WORKDIR/kubernetes/domain-lifecycle $ ./restartServer.sh -s oim_server1 -d \u0026lt;domain_uid\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ cd $WORKDIR/kubernetes/domain-lifecycle ./restartServer.sh -s oim_server1 -d governancedomain -n oigns Make sure the \u0026lt;domain_uid\u0026gt;-oim-server1 has a READY status of 1/1 before continuing:\n$ kubectl get pods -n oigns | grep oim-server1 The output will look similar to the following:\ngovernancedomain-oim-server1 1/1 Running 0 8m Design Console client It is possible to use Design Console from an on-premises install, or from a container image.\nUsing an on-premises installed Design Console   Install Design Console on an on-premises machine\n  Follow Login to the Design Console.\n  Using a container image for Design Console Using Docker The Design Console can be run from a container using X windows emulation.\n  On the parent machine where the Design Console is to be displayed, run xhost +.\n  Find which worker node the \u0026lt;domain\u0026gt;-oim-server1 pod is running. For example:\n$ kubectl get pods -n oigns -o wide | grep governancedomain-oim-server1 The output will look similar to the following:\ngovernancedomain-oim-server1 1/1 Running 0 31m 10.244.2.98 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt;   On the worker node returned above e.g worker-node2, execute the following command to find the OIG container image name:\n$ docker images Then execute the following command to start a container to run Design Console:\n$ docker run -u root --name oigdcbase -it \u0026lt;image\u0026gt; bash For example:\n$ docker run -u root -it --name oigdcbase container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October\u0026#39;24\u0026gt; bash This will take you into a bash shell inside the container:\nbash-4.2#   Inside the container set the proxy, for example:\nbash-4.2# export https_proxy=http://proxy.example.com:80   Install the relevant X windows packages in the container:\nbash-4.2# yum install libXext libXrender libXtst   Execute the following outside the container to create a new Design Console image from the container:\n$ docker commit \u0026lt;container_name\u0026gt; \u0026lt;design_console_image_name\u0026gt; For example:\n$ docker commit oigdcbase oigdc   Exit the container bash session:\nbash-4.2# exit   Start a new container using the Design Console image:\n$ docker run --name oigdc -it oigdc /bin/bash This will take you into a bash shell for the container:\nbash-4.2#   In the container run the following to export the DISPLAY:\n$ export DISPLAY=\u0026lt;parent_machine_hostname:1\u0026gt;   Start the Design Console from the container:\nbash-4.2# cd idm/designconsole bash-4.2# sh xlclient.sh The Design Console login should be displayed. Now follow Login to the Design Console.\n  Using podman   On the parent machine where the Design Console is to be displayed, run xhost +.\n  Find which worker node the \u0026lt;domain\u0026gt;-oim-server1 pod is running. For example:\n$ kubectl get pods -n oigns -o wide | grep governancedomain-oim-server1 The output will look similar to the following:\ngovernancedomain-oim-server1 1/1 Running 0 31m 10.244.2.98 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt;   On the worker node returned above e.g worker-node2, execute the following command to find the OIG container image name:\n$ podman images Then execute the following command to start a container to run Design Console:\n$ podman run -u root --name oigdcbase -it \u0026lt;image\u0026gt; bash For example:\n$ podman run -u root -it --name oigdcbase container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October\u0026#39;24\u0026gt; bash This will take you into a bash shell inside the container:\nbash-4.2#   Inside the container set the proxy, for example:\nbash-4.2# export https_proxy=http://proxy.example.com:80   Install the relevant X windows packages in the container:\nbash-4.2# yum install libXext libXrender libXtst   Execute the following outside the container to create a new Design Console image from the container:\n$ podman commit \u0026lt;container_name\u0026gt; \u0026lt;design_console_image_name\u0026gt; For example:\n$ podman commit oigdcbase oigdc   Exit the container bash session:\nbash-4.2# exit   Start a new container using the Design Console image:\n$ podman run --name oigdc -it oigdc /bin/bash This will take you into a bash shell for the container:\nbash-4.2#   In the container run the following to export the DISPLAY:\n$ export DISPLAY=\u0026lt;parent_machine_hostname:1\u0026gt;   Start the Design Console from the container:\nbash-4.2# cd idm/designconsole bash-4.2# sh xlclient.sh The Design Console login should be displayed. Now follow Login to the Design Console.\n  Login to the Design Console   Launch the Design Console and in the Oracle Identity Manager Design Console login page enter the following details:\nEnter the following details and click Login:\n Server URL: \u0026lt;url\u0026gt; User ID: xelsysadm Password: \u0026lt;password\u0026gt;.  where \u0026lt;url\u0026gt; is http://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}\n  If successful the Design Console will be displayed.\n  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "The WebLogic Kubernetes Operator supports deployment of Oracle Access Management (OAM). Follow the instructions in this guide to set up these Oracle Access Management domains on Kubernetes.",
	"content": "The WebLogic Kubernetes Operator supports deployment of Oracle Access Management (OAM).\nIn this release, OAM domains are supported using the “domain on a persistent volume” model only, where the domain home is located in a persistent volume (PV).\nDomain on persistent volume (Domain on PV) is an operator domain home source type, which requires that the domain home exists on a persistent volume. The domain home can be created either manually using the Weblogic Scripting Tool (WLST) scripts or automatically by specifying the section, domain.spec.configuration.initializeDomainOnPV, in the domain resource YAML file. The initial domain topology and resources are described using WebLogic Deploy Tooling (WDT) models.\nNOTE: The initializeDomainOnPV section provides a one time only domain home initialization. The operator creates the domain when the domain resource is first deployed. After the domain is created, this section is ignored. Subsequent domain lifecycle updates must be controlled by the WebLogic Server Administration Console, WebLogic Scripting Tool (WLST), or other mechanisms.\nThe WebLogic Kubernetes Operator has several key features to assist you with deploying and managing Oracle Access Management domains in a Kubernetes environment. You can:\n Create OAM instances in a Kubernetes persistent volume. This persistent volume can reside in an NFS file system or other Kubernetes volume types. Start servers based on declarative startup parameters and desired states. Expose the OAM Services through external access. Scale OAM domains by starting and stopping Managed Servers on demand. Publish operator and WebLogic Server logs into Elasticsearch and interact with them in Kibana. Monitor the OAM instance using Prometheus and Grafana.  Weblogic Deploy Tooling Models Weblogic Deploy Tooling (WDT) models are a convenient and simple alternative to WLST configuration scripts. They compactly define a WebLogic domain using model files, variable properties files, and application archive files. For more information about the model format and its integration, see Usage and Working With WDT Model Files. The WDT model format is fully described in the open source, WebLogic Deploy Tooling GitHub project.\nThe main benefits of WDT are:\n A set of single-purpose tools supporting Weblogic domain configuration lifecycle operations. All tools work off of a shared, declarative model, eliminating the need to maintain specialized WLST scripts. WDT knowledge base understands the MBeans, attributes, and WLST capabilities/bugs across WLS versions.  Current production release The current production release for the Oracle Access Management domain deployment on Kubernetes is 24.4.1. This release uses the WebLogic Kubernetes Operator version 4.1.8.\nFor 4.0.X WebLogic Kubernetes Operator refer to Version 23.3.1\nFor 3.4.X WebLogic Kubernetes Operator refer to Version 23.1.1\nRecent changes and known issues See the Release Notes for recent changes and known issues for Oracle Access Management domain deployment on Kubernetes.\nLimitations See here for limitations in this release.\nGetting started This documentation explains how to configure OAM on a Kubernetes cluster where no other Oracle Identity Management products will be deployed. For detailed information about this type of deployment, start at Prerequisites and follow this documentation sequentially. Please note that this documentation does not explain how to configure a Kubernetes cluster given the product can be deployed on any compliant Kubernetes vendor.\nIf you are deploying multiple Oracle Identity Management products on the same Kubernetes cluster, then you must follow the Enterprise Deployment Guide outlined in Enterprise Deployments. Please note, you also have the option to follow the Enterprise Deployment Guide even if you are only installing OAM and no other Oracle Identity Management products.\nNote: If you need to understand how to configure a Kubernetes cluster ready for an Oracle Access Management deployment, you should follow the Enterprise Deployment Guide referenced in Enterprise Deployments. The Enterprise Deployment Automation section also contains details on automation scripts that can:\n Automate the creation of a Kubernetes cluster on Oracle Cloud Infrastructure (OCI), ready for the deployment of Oracle Identity Management products. Automate the deployment of Oracle Identity Management products on any compliant Kubernetes cluster.  Considerations for deploying OAM and OHS on Kubernetes If you intend to use Oracle HTTP Server (OHS) and Oracle WebGate, and want to deploy OHS on Kubernetes, you must read and understand the Supported Architectures in the Oracle HTTP Server on Kubernetes documentation before continuing.\nDocumentation for earlier releases To view documentation for an earlier release, see:\n Version 24.3.1 Version 24.2.1 Version 24.1.1 Version 23.4.2 Version 23.4.1 Version 23.3.1 Version 23.2.1 Version 23.1.1 Version 22.4.1 Version 22.3.1 Version 22.2.1 Version 21.4.2 Version 21.4.1  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "The WebLogic Kubernetes Operator supports deployment of Oracle Identity Governance. Follow the instructions in this guide to set up Oracle Identity Governance domains on Kubernetes.",
	"content": "The WebLogic Kubernetes Operator supports deployment of Oracle Identity Governance (OIG).\nIn this release, OIG domains are supported using the “domain on a persistent volume” model only, where the domain home is located in a persistent volume (PV).\nDomain on persistent volume (Domain on PV) is an operator domain home source type, which requires that the domain home exists on a persistent volume. The domain home can be created either manually using the Weblogic Scripting Tool (WLST) scripts or automatically using Weblogic Deploy Tooling (WDT). The initial domain topology and resources are described using WebLogic Deploy Tooling (WDT) models.\nNOTE: The initializeDomainOnPV section provides a one time only domain home initialization. The operator creates the domain when the domain resource is first deployed. After the domain is created, this section is ignored. Subsequent domain lifecycle updates must be controlled by the WebLogic Server Administration Console, WebLogic Scripting Tool (WLST), or other mechanisms.\nThe operator has several key features to assist you with deploying and managing OIG domains in a Kubernetes environment. You can:\n Create OIG instances in a Kubernetes persistent volume. This persistent volume can reside in an NFS file system or other Kubernetes volume types. Start servers based on declarative startup parameters and desired states. Expose the OIG Services for external access. Scale OIG domains by starting and stopping Managed Servers on demand. Publish operator and WebLogic Server logs into Elasticsearch and interact with them in Kibana. Monitor the OIG instance using Prometheus and Grafana.  Weblogic Deploy Tooling Models Weblogic Deploy Tooling (WDT) models are a convenient and simple alternative to WLST configuration scripts. They compactly define a WebLogic domain using model files, variable properties files, and application archive files. For more information about the model format and its integration, see Usage and Working With WDT Model Files. The WDT model format is fully described in the open source, WebLogic Deploy Tooling GitHub project.\nThe main benefits of WDT are:\n A set of single-purpose tools supporting Weblogic domain configuration lifecycle operations. All tools work off of a shared, declarative model, eliminating the need to maintain specialized WLST scripts. WDT knowledge base understands the MBeans, attributes, and WLST capabilities/bugs across WLS versions.  Current production release The current production release for the Oracle Identity Governance domain deployment on Kubernetes is 24.4.1. This release uses the WebLogic Kubernetes Operator version 4.1.8.\nFor 4.0.X WebLogic Kubernetes Operator refer to Version 23.3.1\nFor 3.4.X WebLogic Kubernetes Operator refer to Version 23.1.1\nRecent changes and known issues See the Release Notes for recent changes and known issues for Oracle Identity Governance domain deployment on Kubernetes.\nLimitations See here for limitations in this release.\nGetting started This documentation explains how to configure OIG on a Kubernetes cluster where no other Oracle Identity Management products will be deployed. For detailed information about this type of deployment, start at Prerequisites and follow this documentation sequentially. Please note that this documentation does not explain how to configure a Kubernetes cluster given the product can be deployed on any compliant Kubernetes vendor.\nIf you are deploying multiple Oracle Identity Management products on the same Kubernetes cluster, then you must follow the Enterprise Deployment Guide outlined in Enterprise Deployments. Please note, you also have the option to follow the Enterprise Deployment Guide even if you are only installing OIG and no other Oracle Identity Management products.\nNote: If you need to understand how to configure a Kubernetes cluster ready for an Oracle Identity Governance deployment, you should follow the Enterprise Deployment Guide referenced in Enterprise Deployments. The Enterprise Deployment Automation section also contains details on automation scripts that can:\n Automate the creation of a Kubernetes cluster on Oracle Cloud Infrastructure (OCI), ready for the deployment of Oracle Identity Management products. Automate the deployment of Oracle Identity Management products on any compliant Kubernetes cluster.  Documentation for earlier releases To view documentation for an earlier release, see:\n Version 24.3.1 Version 24.2.1 Version 24.1.1 Version 23.4.2 Version 23.4.1 Version 23.3.1 Version 23.2.1 Version 23.1.1 Version 22.4.1 Version 22.3.1 Version 22.2.1 Version 21.4.2 Version 21.4.1  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oud/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "Oracle Unified Directory provides a comprehensive Directory Solution for robust Identity Management",
	"content": "Oracle Unified Directory provides a comprehensive Directory Solution for robust Identity Management. Oracle Unified Directory is an all-in-one directory solution with storage, proxy, synchronization and virtualization capabilities. While unifying the approach, it provides all the services required for high-performance Enterprise and carrier-grade environments. Oracle Unified Directory ensures scalability to billions of entries, ease of installation, elastic deployments, enterprise manageability and effective monitoring.\nThis project supports deployment of Oracle Unified Directory (OUD) container images based on the 12cPS4 (12.2.1.4.0) release within a Kubernetes environment. The OUD container image refers to binaries for OUD Release 12.2.1.4.0 and it has the capability to create different types of OUD Instances (Directory Service, Proxy, Replication) in containers.\nThis project has several key features to assist you with deploying and managing Oracle Unified Directory in a Kubernetes environment. You can:\n Create Oracle Unified Directory instances in a Kubernetes persistent volume (PV). This PV can reside in an NFS file system, block storage device, or other Kubernetes volume types. Start servers based on declarative startup parameters and desired states. Expose the Oracle Unified Directory services for external access. Scale Oracle Unified Directory by starting and stopping servers on demand. Monitor the Oracle Unified Directory instance using Prometheus and Grafana.  Current production release The current production release for the Oracle Unified Directory 12c PS4 (12.2.1.4.0) deployment on Kubernetes is 24.4.1.\nRecent changes and known issues See the Release Notes for recent changes and known issues for Oracle Unified Directory deployment on Kubernetes.\nGetting started This documentation explains how to configure OUD on a Kubernetes cluster where no other Oracle Identity Management products will be deployed. For detailed information about this type of deployment, start at Prerequisites and follow this documentation sequentially. Please note that this documentation does not explain how to configure a Kubernetes cluster given the product can be deployed on any compliant Kubernetes vendor.\nIf you are deploying multiple Oracle Identity Management products on the same Kubernetes cluster, then you must follow the Enterprise Deployment Guide outlined in Enterprise Deployments. Please note, you also have the option to follow the Enterprise Deployment Guide even if you are only installing OUD and no other Oracle Identity Management products.\nNote: If you need to understand how to configure a Kubernetes cluster ready for an Oracle Unified Directory deployment, you should follow the Enterprise Deployment Guide referenced in Enterprise Deployments. The Enterprise Deployment Automation section also contains details on automation scripts that can:\n Automate the creation of a Kubernetes cluster on Oracle Cloud Infrastructure (OCI), ready for the deployment of Oracle Identity Management products. Automate the deployment of Oracle Identity Management products on any compliant Kubernetes cluster.  Documentation for earlier releases To view documentation for an earlier release, see:\n Version 24.3.1 Version 24.2.1 Version 24.1.1 Version 23.4.1 Version 23.3.1 Version 23.2.1 Version 23.1.1 Version 22.4.1 Version 22.3.1 Version 22.2.1 Version 21.4.2 Version 21.4.1  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oudsm/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "Oracle Unified Directory Services Manager provides an interface for managing instances of Oracle Unified Directory",
	"content": "Oracle Unified Directory Services Manager (OUDSM) is an interface for managing instances of Oracle Unified Directory. Oracle Unified Directory Services Manager enables you to configure the structure of the directory, define objects in the directory, add and configure users, groups, and other entries. Oracle Unified Directory Services Manager is also the interface you use to manage entries, schema, security, and other directory features.\nThis project supports deployment of Oracle Unified Directory Services Manager images based on the 12cPS4 (12.2.1.4.0) release within a Kubernetes environment. The Oracle Unified Directory Services Manager Image refers to binaries for Oracle Unified Directory Services Manager Release 12.2.1.4.0.\nFollow the instructions in this guide to set up Oracle Unified Directory Services Manager on Kubernetes.\nCurrent production release The current production release for the Oracle Unified Directory 12c PS4 (12.2.1.4.0) deployment on Kubernetes is 24.4.1.\nRecent changes and known issues See the Release Notes for recent changes and known issues for Oracle Unified Directory deployment on Kubernetes.\nGetting started This documentation explains how to configure OUDSM on a Kubernetes cluster where no other Oracle Identity Management products will be deployed. For detailed information about this type of deployment, start at Prerequisites and follow this documentation sequentially. Please note that this documentation does not explain how to configure a Kubernetes cluster given the product can be deployed on any compliant Kubernetes vendor.\nIf you are deploying multiple Oracle Identity Management products on the same Kubernetes cluster, then you must follow the Enterprise Deployment Guide outlined in Enterprise Deployments. Please note, you also have the option to follow the Enterprise Deployment Guide even if you are only installing OUDSM and no other Oracle Identity Management products.\nNote: If you need to understand how to configure a Kubernetes cluster ready for an Oracle Unified Directory Services Manager deployment, you should follow the Enterprise Deployment Guide referenced in Enterprise Deployments. The Enterprise Deployment Automation section also contains details on automation scripts that can:\n Automate the creation of a Kubernetes cluster on Oracle Cloud Infrastructure (OCI), ready for the deployment of Oracle Identity Management products. Automate the deployment of Oracle Identity Management products on any compliant Kubernetes cluster.  Documentation for earlier releases To view documentation for an earlier release, see:\n Version 24.3.1 Version 24.2.1 Version 24.1.1 Version 23.4.1 Version 23.3.1 Version 23.2.1 Version 23.1.1 Version 22.4.1 Version 22.3.1 Version 22.2.1 Version 21.4.2 Version 21.4.1  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/ohs/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "Oracle HTTP Server deployment is supported on Kubernetes. Follow the instructions in this guide to set up Oracle HTTP Server on Kubernetes.",
	"content": "Introduction Oracle HTTP Server (OHS) is supported for deployment on Kubernetes.\nCurrent production release The current production release for the Oracle HTTP Server 12.2.1.4 deployment on Kubernetes is 24.4.1.\nRecent changes and known issues See the Release Notes for recent changes for Oracle HTTP Server deployment on Kubernetes.\nGetting started This documentation explains how to configure Oracle HTTP Server (OHS) on a shared Kubernetes cluster where other applications are deployed, or on it\u0026rsquo;s own independent Kubernetes cluster.\nPlease note that this documentation does not explain how to configure a Kubernetes cluster given the product can be deployed on any compliant Kubernetes vendor.\nThis documentation assumes you are familiar with OHS and it\u0026rsquo;s configuration files. It also assumes that if you are using this OHS with Oracle WebGate and Oracle Access Management, that you are familiar with these products.\nSupported architectures Oracle HTTP Server can be deployed in the following scenarios:\n Oracle HTTP Server deployed on a shared Kubernetes cluster with other applications. Oracle HTTP Server deployed on an independent Kubernetes cluster.  Before deploying OHS you must consider what architecture to deploy and then plan accordingly.\nOracle HTTP Server on a shared Kubernetes Cluster This deployment is recommended for sandbox and intranet environments only.\nIn this deployment OHS is installed on the same Kubernetes cluster as other Kubernetes deployed applications. For example, you may want to deploy OHS on the same Kubernetes cluster as other Oracle products such as Oracle WebLogic Server, or Oracle Access Management (OAM).\nIf OHS needs to communicate with other applications on the same Kubernetes cluster, for example using mod_wls_ohs to communicate with Oracle WebLogic Server, then the OHS communicates to the internal port of that Kubernetes service.\nAn example architecture is as follows:\nDescription of the illustration colocated.png\nIn this example:\n OHS is deployed in the same Kubernetes cluster as WebLogic Server. SSL is terminated at the load balancer. The load balancer communicates with OHS via the OHS nodeport using HTTP. OHS communicates with the WebLogic Administration and WebLogic Managed Servers via HTTP, using the internal port of the associated Kubernetes service: \u0026lt;service_name\u0026gt;.\u0026lt;namespace\u0026gt;.svc.cluster.local:\u0026lt;port\u0026gt;. The \u0026lt;service_name\u0026gt; and \u0026lt;port\u0026gt; can be found by running kubectl get svc -n \u0026lt;namespace\u0026gt; on your Kubernetes cluster.  Note: The load balancer is optional and you can connect direct to the OHS nodeport if required, either from workstations outside the firewall, or internally from other applications.\nOracle HTTP Server on an independent Kubernetes cluster This deployment is recommended for internet facing, production environments.\nIn this deployment OHS is installed on it\u0026rsquo;s own Kubernetes cluster inside a demilitarized zone.\nIf OHS needs to communicate with other applications deployed on a different Kubernetes cluster, for example using mod_wl_ohs to communicate with Oracle WebLogic Server, then the OHS communicates via HTTP to the Ingress controller port used by the application on that Kubernetes cluster, or to the appropriate NodePort Kubernetes service you wish to connect to.\nAn example architecture is as follows:\nDescription of the illustration independent.png\nIn this example:\n SSL is terminated at the load balancer. The load balancer communicates with OHS via the OHS nodeport using HTTP. OAM is deployed on it\u0026rsquo;s own Kubernetes cluster. OHS communicates with the WebLogic Administration and WebLogic Managed Servers using the HTTP port of the Ingress controller configured for WebLogic Server.  Note: The load balancer is optional and you can connect direct to the OHS nodeport if required, either from workstations outside the firewall, or internally from other applications.\nNext Steps For detailed information about the above deployments, start at Prerequisites and follow this documentation sequentially.\n"
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oid/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "Review the latest changes and known issues for Oracle Internet Directory on Kubernetes.\nRecent changes    Date Version Change     July, 2022 22.3.1 As of July 2022, Container support has been removed for Oracle Internet Directory. Refer to document ID 2723908.1 on My Oracle Support for more details.   April, 2022 22.2.1 Updated for CRI-O support.   October, 2021 21.4.1 Initial release of Oracle Identity Directory on Kubernetes.    "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/configure-design-console/using-the-design-console-with-nginx-ssl/",
	"title": "b. Using Design Console with NGINX(SSL)",
	"tags": [],
	"description": "Configure Design Console with NGINX(SSL).",
	"content": "Configure an NGINX ingress (SSL) to allow Design Console to connect to your Kubernetes cluster.\n  Prerequisites\n  Setup routing rules for the Design Console ingress\n  Create the ingress\n  Update the T3 channel\n  Restart the OIG Managed Server\n  Design Console client\na. Using an on-premises installed Design Console\nb. Using a container image for Design Console\n  Login to the Design Console\n  Prerequisites If you haven\u0026rsquo;t already configured an NGINX ingress controller (SSL) for OIG, follow Using an Ingress with NGINX (SSL).\nMake sure you know the master hostname and ingress port for NGINX before proceeding e.g https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}. Also make sure you know the Kubernetes secret for SSL that was generated e.g governancedomain-tls-cert.\nSetup routing rules for the Design Console ingress   Setup routing rules by running the following commands:\n$ cd $WORKDIR/kubernetes/design-console-ingress Edit values.yaml and ensure that tls: SSL is set. Change domainUID: and secretName: to match the values for your \u0026lt;domain_uid\u0026gt; and your SSL Kubernetes secret, for example:\n# Load balancer type. Supported values are: NGINX type: NGINX # Type of Configuration Supported Values are : NONSSL,SSL # tls: NONSSL tls: SSL # TLS secret name if the mode is SSL secretName: governancedomain-tls-cert # WLS domain as backend to the load balancer wlsDomain: domainUID: governancedomain oimClusterName: oim_cluster oimServerT3Port: 14002   Create the ingress   Run the following command to create the ingress:\n$ cd $WORKDIR $ helm install governancedomain-nginx-designconsole kubernetes/design-console-ingress --namespace oigns --values kubernetes/design-console-ingress/values.yaml The output will look similar to the following:\nNAME: governancedomain-nginx-designconsole \u0026lt;DATE\u0026gt; NAMESPACE: oigns STATUS: deployed REVISION: 1 TEST SUITE: None   Run the following command to show the ingress is created successfully:\n$ kubectl describe ing governancedomain-nginx-designconsole -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe ing governancedomain-nginx-designconsole -n oigns The output will look similar to the following:\nName: governancedomain-nginx-designconsole Namespace: oigns Address: Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) Rules: Host Path Backends ---- ---- -------- * governancedomain-cluster-oim-cluster:14002 (10.244.2.103:14002) Annotations: kubernetes.io/ingress.class: nginx meta.helm.sh/release-name: governancedomain-nginx-designconsole meta.helm.sh/release-namespace: oigns nginx.ingress.kubernetes.io/affinity: cookie nginx.ingress.kubernetes.io/configuration-snippet: more_set_input_headers \u0026quot;X-Forwarded-Proto: https\u0026quot;; more_set_input_headers \u0026quot;WL-Proxy-SSL: true\u0026quot;; nginx.ingress.kubernetes.io/enable-access-log: false nginx.ingress.kubernetes.io/ingress.allow-http: false nginx.ingress.kubernetes.io/proxy-buffer-size: 2000k Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 6s nginx-ingress-controller Scheduled for sync   Update the T3 channel   Log in to the WebLogic Console using https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/console.\n  Navigate to Environment, click Servers, and then select oim_server1.\n  Click Protocols, and then Channels.\n  Click the default T3 channel called T3Channel.\n  Click Lock and Edit.\n  Set the External Listen Address to the ingress controller hostname ${MASTERNODE-HOSTNAME}.\n  Set the External Listen Port to the ingress controller port ${MASTERNODE-PORT}.\n  Click Save.\n  Click Activate Changes.\n  Restart the OIG Managed Server Restart the OIG Managed Server for the above changes to take effect:\n$ cd $WORKDIR/kubernetes/domain-lifecycle $ ./restartServer.sh -s oim_server1 -d \u0026lt;domain_uid\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ cd $WORKDIR/kubernetes/domain-lifecycle ./restartServer.sh -s oim_server1 -d governancedomain -n oigns Make sure the \u0026lt;domain_uid\u0026gt;-oim-server1 has a READY status of 1/1 before continuing:\n$ kubectl get pods -n oigns | grep oim-server1 The output will look similar to the following:\ngovernancedomain-oim-server1 1/1 Running 0 8m Design Console Client It is possible to use Design Console from an on-premises install, or from a container image.\nUsing an on-premises installed Design Console The instructions below should be performed on the client where Design Console is installed.\n  Import the CA certificate into the java keystore\nIf in Generate SSL Certificate you requested a certificate from a Certificate Authority (CA), then you must import the CA certificate (e.g cacert.crt) that signed your certificate, into the java truststore used by Design Console.\nIf in Generate SSL Certificate you generated a self-signed certicate (e.g tls.crt), you must import the self-signed certificate into the java truststore used by Design Console.\nImport the certificate using the following command:\n$ keytool -import -trustcacerts -alias dc -file \u0026lt;certificate\u0026gt; -keystore $JAVA_HOME/jre/lib/security/cacerts where \u0026lt;certificate\u0026gt; is the CA certificate, or self-signed certicate.\n  Once complete follow Login to the Design Console.\n  Using a container image for Design Console Using Docker The Design Console can be run from a container using X windows emulation.\n  On the parent machine where the Design Console is to be displayed, run xhost +.\n  Find which worker node the \u0026lt;domain\u0026gt;-oim-server1 pod is running. For example:\n$ kubectl get pods -n oigns -o wide | grep governancedomain-oim-server1 The output will look similar to the following:\ngovernancedomain-oim-server1 1/1 Running 0 31m 10.244.2.98 worker-node2   On the worker node returned above e.g worker-node2, execute the following command to find the OIG container image name:\n$ docker images Then execute the following command to start a container to run Design Console:\n$ docker run -u root --name oigdcbase -it \u0026lt;image\u0026gt; bash For example:\n$ docker run -u root -it --name oigdcbase container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October\u0026#39;24\u0026gt; bash This will take you into a bash shell inside the container:\nbash-4.2#   Inside the container set the proxy, for example:\nbash-4.2# export https_proxy=http://proxy.example.com:80   Install the relevant X windows packages in the container:\nbash-4.2# yum install libXext libXrender libXtst   Execute the following outside the container to create a new Design Console image from the container:\n$ docker commit \u0026lt;container_name\u0026gt; \u0026lt;design_console_image_name\u0026gt; For example:\n$ docker commit oigdcbase oigdc   Exit the container bash session:\nbash-4.2# exit   Start a new container using the Design Console image:\n$ docker run --name oigdc -it oigdc /bin/bash This will take you into a bash shell for the container:\nbash-4.2#   Copy the Ingress CA certificate into the container\nIf in Generate SSL Certificate you requested a certificate from a Certificate Authority (CA), then you must copy the CA certificate (e.g cacert.crt) that signed your certificate, into the container\nIf in Generate SSL Certificate you generated a self-signed certicate (e.g tls.crt), you must copy the self-signed certificate into the container\nNote: You will have to copy the certificate over to the worker node where the oigdc image is created before running the following.\nRun the following command outside the container:\n$ cd \u0026lt;workdir\u0026gt;/ssl $ docker cp \u0026lt;certificate\u0026gt; \u0026lt;container_name\u0026gt;:/u01/jdk/jre/lib/security/\u0026lt;certificate\u0026gt; For example:\n$ cd /scratch/OIGK8S/ssl $ docker cp tls.crt oigdc:/u01/jdk/jre/lib/security/tls.crt   Import the certificate using the following command:\nbash-4.2# /u01/jdk/bin/keytool -import -trustcacerts -alias dc -file /u01/jdk/jre/lib/security/\u0026lt;certificate\u0026gt; -keystore /u01/jdk/jre/lib/security/cacerts For example:\nbash-4.2# /u01/jdk/bin/keytool -import -trustcacerts -alias dc -file /u01/jdk/jre/lib/security/tls.crt -keystore /u01/jdk/jre/lib/security/cacerts   In the container run the following to export the DISPLAY:\n$ export DISPLAY=\u0026lt;parent_machine_hostname:1\u0026gt;   Start the Design Console from the container:\nbash-4.2# cd idm/designconsole bash-4.2# sh xlclient.sh The Design Console login should be displayed. Now follow Login to the Design Console.\n  Using podman   On the parent machine where the Design Console is to be displayed, run xhost +.\n  Find which worker node the \u0026lt;domain\u0026gt;-oim-server1 pod is running. For example:\n$ kubectl get pods -n oigns -o wide | grep governancedomain-oim-server1 The output will look similar to the following:\ngovernancedomain-oim-server1 1/1 Running 0 19h 10.244.2.55 worker-node2 \u0026lt;none\u0026gt;   On the worker node returned above e.g worker-node2, execute the following command to find the OIG container image name:\n$ podman images Then execute the following command to start a container to run Design Console:\n$ podman run -u root --name oigdcbase -it \u0026lt;image\u0026gt; bash For example:\n$ podman run -u root -it --name oigdcbase container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October\u0026#39;24\u0026gt; bash This will take you into a bash shell inside the container:\nbash-4.2#   Inside the container set the proxy, for example:\nbash-4.2# export https_proxy=http://proxy.example.com:80   Install the relevant X windows packages in the container:\nbash-4.2# yum install libXext libXrender libXtst   Execute the following outside the container to create a new Design Console image from the container:\n$ podman commit \u0026lt;container_name\u0026gt; \u0026lt;design_console_image_name\u0026gt; For example:\n$ podman commit oigdcbase oigdc   Exit the container bash session:\nbash-4.2# exit   Start a new container using the Design Console image:\n$ podman run --name oigdc -it oigdc /bin/bash This will take you into a bash shell for the container:\nbash-4.2#   Copy the Ingress CA certificate into the container\nIf in Generate SSL Certificate you requested a certificate from a Certificate Authority (CA), then you must copy the CA certificate (e.g cacert.crt) that signed your certificate, into the container\nIf in Generate SSL Certificate you generated a self-signed certicate (e.g tls.crt), you must copy the self-signed certificate into the container\nNote: You will have to copy the certificate over to the worker node where the oigdc image is created before running the following.\nRun the following command outside the container:\n$ cd \u0026lt;workdir\u0026gt;/ssl $ podman cp \u0026lt;certificate\u0026gt; \u0026lt;container_name\u0026gt;:/u01/jdk/jre/lib/security/\u0026lt;certificate\u0026gt; For example:\n$ cd /scratch/OIGK8S/ssl $ podman cp tls.crt oigdc:/u01/jdk/jre/lib/security/tls.crt   Inside the container, import the certificate using the following command:\nbash-4.2# /u01/jdk/bin/keytool -import -trustcacerts -alias dc -file /u01/jdk/jre/lib/security/\u0026lt;certificate\u0026gt; -keystore /u01/jdk/jre/lib/security/cacerts For example:\nbash-4.2# /u01/jdk/bin/keytool -import -trustcacerts -alias dc -file /u01/jdk/jre/lib/security/tls.crt -keystore /u01/jdk/jre/lib/security/cacerts   In the container run the following to export the DISPLAY:\n$ export DISPLAY=\u0026lt;parent_machine_hostname:1\u0026gt;   Start the Design Console from the container:\nbash-4.2# cd idm/designconsole bash-4.2# sh xlclient.sh The Design Console login should be displayed. Now follow Login to the Design Console.\n  Login to the Design Console   Launch the Design Console and in the Oracle Identity Manager Design Console login page enter the following details:\nEnter the following details and click Login:\n Server URL: \u0026lt;url\u0026gt; User ID: xelsysadm Password: \u0026lt;password\u0026gt;.  where \u0026lt;url\u0026gt; is where \u0026lt;url\u0026gt; is https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}.\n  If successful the Design Console will be displayed.\n  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "Review the latest changes and known issues for Oracle Access Management on Kubernetes.\nRecent changes    Date Version Change     October, 2024 24.4.1 Supports Oracle Access Management 12.2.1.4 domain deployment using the October 2024 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains the following changes:     + Ingress now uses ingressClassName instead of the deprecated kubernetes.io/ingress.class. See, Ingress.     If upgrading to October 24 (24.4.1) from April 24 (24.2.1) or later, you must upgrade the following in order:     1. Patch the OAM container image to October 24     2. If you are upgrading to Kubernetes 1.29 or later, you must upgrade the ingress. See Upgrading the ingress.     If upgrading to October 24 (24.4.1) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OAM container image to October 24     3. If you are upgrading to Kubernetes 1.29 or later, you must upgrade the ingress. See Upgrading the ingress.     If upgrading to October 24 (24.4.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OAM container image to October 24     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   July, 2024 24.3.1 Supports Oracle Access Management 12.2.1.4 domain deployment using the July 2024 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains no changes other than support for the July Patch Set Update.     If upgrading to July 24 (24.3.1) from April 24 (24.2.1), you must upgrade the following in order:     1. Patch the OAM container image to January 24     If upgrading to July 24 (24.3.1) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OAM container image to July 24     If upgrading to July 24 (24.3.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OAM container image to July 24     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   April, 2024 24.2.1 Supports Oracle Access Management 12.2.1.4 domain deployment using the April 2024 container image which contains the April Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains the following changes:     + Support for WebLogic Kubernetes Operator 4.1.8.     + Changes to creating domains with WDT models:     a. RCU schema creation is now performed as part of the domain creation.     b. Automation scripts to generate WDT models and domain resource yaml file.     c. Automation scripts to build domain creation image and push it to container registry.     If upgrading to April 24 (24.2.1) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OAM container image to April 24     If upgrading to April 24 (24.2.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OAM container image to April 24     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   January, 2024 24.1.1 Supports Oracle Access Management 12.2.1.4 domain deployment using the January 2024 container image which contains the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains no changes other than support for the January Patch Set Update     If upgrading to January 24 (24.1.1) from October 23 (23.4.1) or later, you must upgrade the following in order:     1. Patch the OAM container image to January 24     If upgrading to January 24 (24.1.1) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OAM container image to January 24     If upgrading to January 24 (24.1.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OAM container image to January 24     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   November, 2023 23.4.2 Supports Oracle Access Management 12.2.1.4 domain deployment using the October 2023 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains the following changes:     Support for creation of OAM domains using Weblogic Deploy Tooling (WDT) Models. See Create OAM domains Using WDT Models.     If currently on October 23 (23.4.1) there is no need to upgrade as the November 23 (23.4.2) release only adds the ability to create new OAM domains using WDT.     If upgrading to November 23 (23.4.2) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OAM container image to October 23     If upgrading to November 23 (23.4.2) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OAM container image to October 23     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   October, 2023 23.4.1 Supports Oracle Access Management 12.2.1.4 domain deployment using the October 2023 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains the following changes:     + Support for WebLogic Kubernetes Operator 4.1.2.     + Ability to set resource requests and limits for CPU and memory on a cluster resource. See, Set the OAM server memory parameters.     + Support for the Kubernetes Horizontal Pod Autoscaler (HPA). See, Kubernetes Horizontal Pod Autoscaler.     + The default domain now only starts one OAM Managed Server (oam_server1) and one Policy Managed Server (policy_mgr1).     If upgrading to October 23 (23.4.1) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OAM container image to October 23     If upgrading to October 23 (23.4.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OAM container image to October 23     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   July, 2023 23.3.1 Supports Oracle Access Management 12.2.1.4 domain deployment using the July 2023 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to July 23 (23.3.1) from April 23 (23.2.1), upgrade as follows:     1. Patch the OAM container image to July 23     If upgrading to July 23 (23.3.1) from October 22 (22.4.1), or January 23 (23.1.1) release, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.0.4     2. Patch the OAM container image to July 23     If upgrading to July 23 (23.3.1) from a release prior to October 22 (22.4.1) release, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.0.4     2. Patch the OAM container image to July 23     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   April, 2023 23.2.1 Supports Oracle Access Management 12.2.1.4 domain deployment using the April 2023 container image which contains the April Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     Support for WebLogic Kubernetes Operator 4.0.4.     Changes to stopping/starting pods due to domain and cluster configuration being separated and parameter changes (IF_NEEDED, NEVER to IfNeeded, Never).     If upgrading to April 23 (23.2.1) from October 22 (22.4.1) or later, you must upgrade in the following order:     1. WebLogic Kubernetes Operator to 4.0.4     2. Patch the OAM container image to April 23     If upgrading to April 23 (23.2.1) from a release prior to October 22 (22.4.1) release, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.0.4     2. Patch the OAM container image to April 23     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana See Patch and Upgrade for these instructions.   January, 2023 23.1.1 Supports Oracle Access Management 12.2.1.4 domain deployment using the January 2023 container image which contains the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to January 23 (23.1.1) from October 22 (22.4.1) release, you only need to patch the OAM container image to January 23.     If upgrading to January 23 (23.1.1) from a release prior to October 22 (22.4.1) release, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 3.4.2     2. Patch the OAM container image to January 23     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana See Patch and Upgrade for these instructions.   October, 2022 22.4.1 Supports Oracle Access Management 12.2.1.4 domain deployment using the October 2022 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     Support for WebLogic Kubernetes Operator 3.4.2.     Additional Ingress mappings added.     Changes to deployment of Logging and Visualization with Elasticsearch and Kibana.     OAM container images are now only available from container-registry.oracle.com and are no longer available from My Oracle Support.     If upgrading to October 22 (22.4.1) from a previous release, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 3.4.2     2. Patch the OAM container image to October 22     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana See Patch and Upgrade for these instructions.   July, 2022 22.3.1 Supports Oracle Access Management 12.2.1.4 domain deployment using the July 2022 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.   April, 2022 22.2.1 Updated for CRI-O support.   November, 2021 21.4.2 Supports Oracle Access Management domain deployment using WebLogic Kubernetes Operator 3.3.0. Voyager ingress removed as no longer supported.   October 2021 21.4.1 A) References to supported Kubernetes, Helm and Docker versions removed and replaced with Support note reference. B) Namespace and domain names changed to be consistent with Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster. C) Additional post configuration tasks added. D) Upgrading a Kubernetes Cluster and Security Hardening removed as vendor specific.   November 2020 20.4.1 Initial release of Oracle Access Management on Kubernetes.    "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "Review the latest changes and known issues for Oracle Identity Governance on Kubernetes.\nRecent changes    Date Version Change     October, 2024 24.4.1 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the October 2024 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains the following changes:     + Ingress now uses ingressClassName instead of the deprecated kubernetes.io/ingress.class. See, Ingress.     If upgrading to October 24 (24.4.1) from April 24 (24.2.1) or later, you must upgrade the following in order:     1. Patch the OIG container image to October 24     2. If you are upgrading to Kubernetes 1.29 or later, you must upgrade the ingress. See Upgrading the ingress.     If upgrading to October 24 (24.4.1) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OIG container image to October 24     3. If you are upgrading to Kubernetes 1.29 or later, you must upgrade the ingress. See Upgrading the ingress.     If upgrading to October 24 (24.4.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OIG container image to October 24     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   July, 2024 24.3.1 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the July 2024 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains no changes other than support for the July Patch Set Update.     If upgrading to July 24 (24.3.1) from April 24 (24.2.1), you must upgrade the following in order:     1. Patch the OIG container image to July 24     If upgrading to July 24 (24.3.1) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OIG container image to July 24     If upgrading to July 24 (24.3.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OIG container image to July 24     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   April, 2024 24.2.1 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the April 2024 container image which contains the April Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains the following changes:     + Support for WebLogic Kubernetes Operator 4.1.8.     + Changes to creating domains with WDT models:     a. RCU schema creation and schema patching is now performed as part of the domain creation.     b. Automation scripts to generate WDT models and domain resource yaml file.     c. Automation scripts to build domain creation image and push it to container registry.     If upgrading to April 24 (24.2.1) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OIG container image to April 24     If upgrading to April 24 (24.2.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.8     2. Patch the OIG container image to April 24     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   January, 2024 24.1.1 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the January 2024 container image which contains the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains the following changes:     + Support for patching OIG domains created with Weblogic Deploy Tooling (WDT) Models.     If upgrading to January 24 (24.1.1) from October 23 (23.4.1) or later, you must upgrade the following in order:     1. Patch the OIG container image to January 24     If upgrading to January 24 (24.1.1) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OIG container image to January 24     If upgrading to January 24 (24.1.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OIG container image to January 24     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   November, 2023 23.4.2 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the October 2023 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains the following changes:     + Support for creation of OIG domains using Weblogic Deploy Tooling (WDT) Models. See Create OIG domains Using WDT Models.     If currently on October 23 (23.4.1) there is no need to upgrade as the November 23 (23.4.2) release only adds the ability to create new OIG domains using WDT.     If upgrading to November 23 (23.4.2) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OIG container image to October 23     If upgrading to November 23 (23.4.2) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OIG container image to October 23     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   October, 2023 23.4.1 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the October 2023 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains the following changes:     + Support for WebLogic Kubernetes Operator 4.1.2.     + Ability to set resource requests and limits for CPU and memory on a cluster resource. See, Setting the OIM server memory parameters.     + Support for the Kubernetes Horizontal Pod Autoscaler (HPA). See, Kubernetes Horizontal Pod Autoscaler.     If upgrading to October 23 (23.4.1) from October 22 (22.4.1) or later, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OIG container image to October 23     If upgrading to October 23 (23.4.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.1.2     2. Patch the OIG container image to October 23     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   July, 2023 23.3.1 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the July 2023 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to July 23 (23.3.1) from April 23 (23.2.1), upgrade as follows:     1. Patch the OIG container image to July 23     If upgrading to July 23 (23.3.1) from October 22 (22.4.1), or January 23 (23.1.1) release, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.0.4     2. Patch the OIG container image to July 23     If upgrading to July 23 (23.3.1) from a release prior to October 22 (22.4.1) release, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.0.4     2. Patch the OIG container image to July 23     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   April, 2023 23.2.1 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the April 2023 container image which contains the April Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     Support for WebLogic Kubernetes Operator 4.0.4.     Changes to stopping/starting pods due to domain and cluster configuration being separated and parameter changes (IF_NEEDED, NEVER to IfNeeded, Never).     If upgrading to April 23 (23.2.1) from October 22 (22.4.1) or later, you must upgrade in the following order:     1. WebLogic Kubernetes Operator to 4.0.4     2. Patch the OIG container image to April 23     If upgrading to April 23 (23.2.1) from a release prior to October 22 (22.4.1), you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 4.0.4     2. Patch the OIG container image to April 23     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana See Patch and Upgrade for these instructions.   January, 2023 23.1.1 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the January 2023 container image which contains the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to January 23 (23.1.1) from October 22 (22.4.1) release, you only need to patch the OIG container image to January 23.     If upgrading to January 23 (23.1.1) from a release prior to October 22 (22.4.1) release, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 3.4.2     2. Patch the OIG container image to January 23     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana See Patch and Upgrade for these instructions.   October, 2022 22.4.1 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the October 2022 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     Support for WebLogic Kubernetes Operator 3.4.2.     Additional Ingress mappings added.     Changes to deployment of Logging and Visualization with Elasticsearch and Kibana.     OIG container images are now only available from container-registry.oracle.com and are no longer available from My Oracle Support.     If upgrading to October 22 (22.4.1) from a previous release, you must upgrade the following in order:     1. WebLogic Kubernetes Operator to 3.4.2     2. Patch the OIG container image to October 22     3. Upgrade the Ingress     4. Upgrade Elasticsearch and Kibana     See Patch and Upgrade for these instructions.   July, 2022 22.3.1 Supports Oracle Identity Governance 12.2.1.4 domain deployment using the July 2022 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.   April, 2022 22.2.1 Updated for CRI-O support.   November, 2021 21.4.2 Supports Oracle Identity Governance domain deployment using WebLogic Kubernetes Operator 3.3.0. Voyager ingress removed as no longer supported.   October 2021 21.4.1 A) References to supported Kubernetes, Helm and Docker versions removed and replaced with Support note reference. B) Namespace and domain names changed to be consistent with Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster. C) Addtional post configuration tasks added. D) New section on how to start Design Console in a container. E) Upgrading a Kubernetes Cluster and Security Hardening removed as vendor specific.   November 2020 20.4.1 Initial release of Identity Governance on Kubernetes.    "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oud/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "Review the latest changes and known issues for Oracle Unified Directory on Kubernetes.\nRecent changes    Date Version Change     October, 2024 24.4.1 Supports Oracle Unified Directory 12.2.1.4 domain deployment using the October 2024 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     This release contains no changes other than support for the October Patch Set Update.     To upgrade to October 24 (24.4.1) you must follow the instructions in Patch and Upgrade.   July, 2024 24.3.1 Supports Oracle Unified Directory 12.2.1.4 domain deployment using the July 2024 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     + Ingress now uses ingressClassName instead of the deprecated kubernetes.io/ingress.class. See, Ingress. The helm upgrade in Patch and Upgrade will upgrade the ingress for you.     + Default pod deletion time for OUD reduced from 5 minutes to 2 minutes.     To upgrade to July 24 (24.3.1) you must follow the instructions in Patch and Upgrade.   April, 2024 24.2.1 Supports Oracle Unified Directory 12.2.1.4 domain deployment using the April 2024 container image which contains the April Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     + Support for Logstash to run as a separate sidecar container for OUD pods using Block Device Storage. See, Logging and Visualization.     To upgrade to April 24 (24.2.1) you must follow the instructions in Patch and Upgrade.   January, 2024 24.1.1 Supports Oracle Unified Directory 12.2.1.4 domain deployment using the January 2024 container image which contains the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     To upgrade to January 24(24.1.1) you must follow the instructions in Patch and Upgrade.   October, 2023 23.4.1 Supports Oracle Unified Directory 12.2.1.4 domain deployment using the October 2023 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     + Support for Block Device Storage. See, Create OUD Instances.     + Ability to set resource requests and limits for CPU and memory on an OUD instance. See, Create OUD Instances.     + Support for Assured Replication. See, Create OUD Instances.     + Support for the Kubernetes Horizontal Pod Autoscaler (HPA). See, Kubernetes Horizontal Pod Autoscaler.     + Supports integration options such as Enterprise User Security (EUS), EBusiness Suite (EBS), and Directory Integration Platform (DIP).     To upgrade to October 23 (23.4.1) you must follow the instructions in Patch and Upgrade.   July, 2023 23.3.1 Supports Oracle Unified Directory 12.2.1.4 domain deployment using the July 2023 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     To upgrade to July 23 (23.3.1) you must follow the instructions in Patch and Upgrade.   April, 2023 23.2.1 Supports Oracle Unified Directory 12.2.1.4 domain deployment using the April 2023 container image which contains the April Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     To upgrade to April 23 (23.2.1) you must follow the instructions in Patch and Upgrade.   January, 2023 23.1.1 Supports Oracle Unified Directory 12.2.1.4 domain deployment using the January 2023 container image which contains the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.   October, 2022 22.4.1 Supports Oracle Unified Directory 12.2.1.4 domain deployment using the October 2022 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     Changes to deployment of Logging and Visualization with Elasticsearch and Kibana.     OUD container images are now only available from container-registry.oracle.com and are no longer available from My Oracle Support.   July, 2022 22.3.1 Supports Oracle Unified Directory 12.2.1.4 domain deployment using the July 2022 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program. From July 2022 onwards OUD deployment is performed using StatefulSets.   April, 2022 22.2.1 Updated for CRI-O support.   November 2021 21.4.2 Voyager ingress removed as no longer supported.   October 2021 21.4.1 A) References to supported Kubernetes, Helm and Docker versions removed and replaced with Support note reference. B) Namespace and domain names changed to be consistent with Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster. C) Upgrading a Kubernetes Cluster and Security Hardening removed as vendor specific.   November 2020 20.4.1 Initial release of Oracle Unified Directory on Kubernetes.    "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oudsm/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "Review the latest changes and known issues for Oracle Unified Directory Services Manager on Kubernetes.\nRecent changes    Date Version Change     October, 2024 24.4.1 Supports Oracle Unified Directory Services Manager 12.2.1.4 domain deployment using the October 2024 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to October 24 (24.4.1) from October 22 (22.4.1) or later, upgrade as follows:     1. Patch the OUDSM container image to October 24     If upgrading to October 24 (24.4.1) from July 22 (22.3.1) or earlier, you must upgrade the following in order:     1. Patch the OUDSM container image to October 24     2. Upgrade Elasticsearch and Kibana.     To upgrade to October 24 (24.4.1) you must follow the instructions in Patch and Upgrade.   July, 2024 24.3.1 Supports Oracle Unified Directory Services Manager 12.2.1.4 domain deployment using the July 2024 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to July 24 (24.3.1) from October 22 (22.4.1) or later, upgrade as follows:     1. Patch the OUDSM container image to July 24     If upgrading to July 24 (24.3.1) from July 22 (22.3.1) or earlier, you must upgrade the following in order:     1. Patch the OUDSM container image to July 24     2. Upgrade Elasticsearch and Kibana.     To upgrade to July 24 (24.3.1) you must follow the instructions in Patch and Upgrade.   April, 2024 24.2.1 Supports Oracle Unified Directory Services Manager 12.2.1.4 domain deployment using the April 2024 container image which contains the April Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to April 24 (24.2.1) from October 22 (22.4.1) or later, upgrade as follows:     1. Patch the OUDSM container image to April 24     If upgrading to April 24 (24.2.1) from July 22 (22.3.1) or earlier, you must upgrade the following in order:     1. Patch the OUDSM container image to April 24     2. Upgrade Elasticsearch and Kibana.     To upgrade to April 24 (24.2.1) you must follow the instructions in Patch and Upgrade.   January, 2024 24.1.1 Supports Oracle Unified Directory Services Manager 12.2.1.4 domain deployment using the January 2024 container image which contains the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to January 24 (24.1.1) from October 22 (22.4.1) or later, upgrade as follows:     1. Patch the OUDSM container image to January 24     If upgrading to January 24 (24.1.1) from July 22 (22.3.1) or earlier, you must upgrade the following in order:     1. Patch the OUDSM container image to January 24     2. Upgrade Elasticsearch and Kibana.     To upgrade to January 24 (24.1.1) you must follow the instructions in Patch and Upgrade.   October, 2023 23.4.1 Supports Oracle Unified Directory Services Manager 12.2.1.4 domain deployment using the October 2023 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to October 23 (23.3.1) from October 22 (22.4.1) or later, upgrade as follows:     1. Patch the OUDSM container image to October 23     If upgrading to October 23 (23.3.1) from July 22 (22.3.1) or earlier, you must upgrade the following in order:     1. Patch the OUDSM container image to October 23     2. Upgrade Elasticsearch and Kibana.     To upgrade to October 23 (23.4.1) you must follow the instructions in Patch and Upgrade.   July, 2023 23.3.1 Supports Oracle Unified Directory Services Manager 12.2.1.4 domain deployment using the July 2023 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to July 23 (23.3.1) from October 22 (22.4.1) or later, upgrade as follows:     1. Patch the OUDSM container image to July 23     If upgrading to July 23 (23.3.1) from July 22 (22.3.1) or earlier, you must upgrade the following in order:     1. Patch the OUDSM container image to July 23     2. Upgrade Elasticsearch and Kibana.     See Patch and Upgrade for these instructions.   April, 2023 23.2.1 Supports Oracle Unified Directory Services Manager 12.2.1.4 domain deployment using the April 2023 container image which contains the April Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to April 23 (23.2.1) from October 22 (22.4.1), upgrade as follows:     1. Patch the OUDSM container image to April 23     If upgrading to April 23 (23.2.1) from July 22 (22.3.1) or earlier, you must upgrade the following in order:     1. Patch the OUDSM container image to April 23     2. Upgrade Elasticsearch and Kibana.     See Patch and Upgrade for these instructions.   January, 2023 23.1.1 Supports Oracle Unified Directory Services Manager 12.2.1.4 domain deployment using the January 2023 container image which contains the January Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     If upgrading to January 23 (23.1.1) from October 22 (22.4.1) upgrade as follows:     1. Patch the OUDSM container image to January 23     If upgrading to January 23 (23.1.1) from July 22 (22.3.1) or earlier, you must upgrade the following in order:     1. Patch the OUDSM container image to October 23     2. Upgrade Elasticsearch and Kibana.     See Patch and Upgrade for these instructions.   October, 2022 22.4.1 Supports Oracle Unified Directory Services Manager 12.2.1.4 domain deployment using the October 2022 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.     Changes to deployment of Logging and Visualization with Elasticsearch and Kibana.     OUDSM container images are now only available from container-registry.oracle.com and are no longer available from My Oracle Support.     If upgrading to October 22 (22.4.1) from a previous release, you must upgrade the following in order:     1. Patch the OUDSM container image to October 22     2. Upgrade Elasticsearch and Kibana.     See Patch and Upgrade for these instructions.   July, 2022 22.3.1 Supports Oracle Unified Directory Services Manager 12.2.1.4 domain deployment using the July 2022 container image which contains the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.   April, 2022 22.2.1 Updated for CRI-O support.   November 2021 21.4.2 Voyager ingress removed as no longer supported.   October 2021 21.4.1 A) References to supported Kubernetes, Helm and Docker versions removed and replaced with Support note reference. B) Namespace and domain names changed to be consistent with Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster. C) Upgrading a Kubernetes Cluster and Security Hardening removed as vendor specific.   November 2020 20.4.1 Initial release of Oracle Unified Directory Services Manager on Kubernetes.    "
},
{
	"uri": "/fmw-kubernetes/24.4.1/ohs/release-notes/",
	"title": "Release Notes",
	"tags": [],
	"description": "",
	"content": "Review the latest changes and known issues for Oracle HTTP Server on Kubernetes.\nRecent changes    Date Version Change     October 2024 24.4.1 Initial release of Oracle HTTP Server on Kubernetes. Supports Oracle HTTP Server 12.2.1.4 deployment using the October 2024 container image which contains the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.    "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/prerequisites/",
	"title": "Prerequisites",
	"tags": [],
	"description": "System requirements and limitations for deploying and running an OAM domain home",
	"content": "Introduction This document provides information about the system requirements and limitations for deploying and running OAM domains with the WebLogic Kubernetes Operator 4.1.8.\nSystem requirements for oam domains   A running Kubernetes cluster that meets the following requirements:\n The Kubernetes cluster must have sufficient nodes and resources. An installation of Helm is required on the Kubernetes cluster. Helm is used to create and deploy the necessary resources and run the WebLogic Kubernetes Operator in a Kubernetes cluster A supported container engine must be installed and running on the Kubernetes cluster. The Kubernetes cluster and container engine must meet the minimum version requirements outlined in document ID 2723908.1 on My Oracle Support. You must have the cluster-admin role to install the WebLogic Kubernetes Operator. The nodes in the Kubernetes cluster must have access to a persistent volume such as a Network File System (NFS) mount or a shared file system. The system clocks on node of the Kubernetes cluster must be synchronized. Run the date command simultaneously on all the nodes in each cluster and then syncrhonize accordingly.    A running Oracle Database 12.2.0.1 or later. The database must be a supported version for OAM as outlined in Oracle Fusion Middleware 12c certifications. It must meet the requirements as outlined in About Database Requirements for an Oracle Fusion Middleware Installation and in RCU Requirements for Oracle Databases. It is recommended that the database initialization parameters are set as per Minimum Initialization Parameters.\n  Note: This documentation does not tell you how to install a Kubernetes cluster, Helm, the container engine, or how to push container images to a container registry. Please refer to your vendor specific documentation for this information. Also see Getting Started.\nLimitations Compared to running a WebLogic Server domain in Kubernetes using the operator, the following limitations currently exist for OAM domains:\n In this release, OAM domains are supported using the “domain on a persistent volume” model only, where the domain home is located in a persistent volume (PV).The \u0026ldquo;domain in image\u0026rdquo; model is not supported. Only configured clusters are supported. Dynamic clusters are not supported for OAM domains. Note that you can still use all of the scaling features, but you need to define the maximum size of your cluster at domain creation time, using the parameter configuredManagedServerCount. For more details on this parameter, see Prepare the create domain script. It is recommended to pre-configure your cluster so it\u0026rsquo;s sized a little larger than the maximum size you plan to expand it to. You must rigorously test at this maximum size to make sure that your system can scale as expected. The WebLogic Monitoring Exporter currently supports the WebLogic MBean trees only. Support for JRF MBeans has not been added yet. We do not currently support running OAM in non-Linux containers.  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/prerequisites/",
	"title": "Prerequisites",
	"tags": [],
	"description": "System requirements and limitations for deploying and running an OIG domain",
	"content": "Introduction This document provides information about the system requirements and limitations for deploying and running OIG domains with the WebLogic Kubernetes Operator 4.1.8.\nSystem requirements for OIG domains   A running Kubernetes cluster that meets the following requirements:\n The Kubernetes cluster must have sufficient nodes and resources. An installation of Helm is required on the Kubernetes cluster. Helm is used to create and deploy the necessary resources and run the WebLogic Kubernetes Operator in a Kubernetes cluster A supported container engine must be installed and running on the Kubernetes cluster. The Kubernetes cluster and container engine must meet the minimum version requirements outlined in document ID 2723908.1 on My Oracle Support. You must have the cluster-admin role to install the WebLogic Kubernetes Operator. The nodes in the Kubernetes cluster must have access to a persistent volume such as a Network File System (NFS) mount or a shared file system. The system clocks on node of the Kubernetes cluster must be synchronized. Run the date command simultaneously on all the nodes in each cluster and then syncrhonize accordingly.    A running Oracle Database 12.2.0.1 or later. The database must be a supported version for OIG as outlined in Oracle Fusion Middleware 12c certifications. It must meet the requirements as outlined in About Database Requirements for an Oracle Fusion Middleware Installation and in RCU Requirements for Oracle Databases.\n  Note: This documentation does not tell you how to install a Kubernetes cluster, Helm, the container engine, or how to push container images to a container registry. Please refer to your vendor specific documentation for this information. Also see Getting Started.\nLimitations Compared to running a WebLogic Server domain in Kubernetes using the operator, the following limitations currently exist for OIG domains:\n In this release, OIG domains are supported using the “domain on a persistent volume” model only, where the domain home is located in a persistent volume (PV). The \u0026ldquo;domain in image\u0026rdquo; model is not supported. Only configured clusters are supported. Dynamic clusters are not supported for OIG domains. Note that you can still use all of the scaling features, you just need to define the maximum size of your cluster at domain creation time. The WebLogic Monitoring Exporter currently supports the WebLogic MBean trees only. Support for JRF MBeans has not been added yet. We do not currently support running OIG in non-Linux containers.  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oud/prerequisites/",
	"title": "Prerequisites",
	"tags": [],
	"description": "Oracle Unified Directory Prerequisites.",
	"content": "Introduction This document provides information about the system requirements for deploying and running Oracle Unified Directory 12c PS4 (12.2.1.4.0) in a Kubernetes environment.\nSystem Requirements for Oracle Unified Directory on Kubernetes  A running Kubernetes cluster that meets the following requirements:  The Kubernetes cluster must have sufficient nodes and resources. An installation of Helm is required on the Kubernetes cluster. Helm is used to create and deploy the necessary resources on the Kubernetes cluster. A supported container engine must be installed and running on the Kubernetes cluster. The Kubernetes cluster and container engine must meet the minimum version requirements outlined in document ID 2723908.1 on My Oracle Support. The nodes in the Kubernetes cluster must have access to a persistent volume such as a Network File System (NFS) mount, a shared file system, or block storage. If you intend to use assured replication in OUD, you must have a persistent volume available that uses a Network File System (NFS) mount, or a shared file system for the config volume. See Enabling Assured Replication.    Note: This documentation does not tell you how to install a Kubernetes cluster, Helm, the container engine, or how to push container images to a container registry. Please refer to your vendor specific documentation for this information. Also see Getting Started.\n"
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oudsm/prerequisites/",
	"title": "Prerequisites",
	"tags": [],
	"description": "Oracle Unified Directory Services Manager Prerequisites.",
	"content": "Introduction This document provides information about the system requirements for deploying and running Oracle Unified Directory Services Manager 12c PS4 (12.2.1.4.0) in a Kubernetes environment.\nSystem Requirements for Oracle Unified Directory Services Manager on Kubernetes  A running Kubernetes cluster that meets the following requirements:  The Kubernetes cluster must have sufficient nodes and resources. An installation of Helm is required on the Kubernetes cluster. Helm is used to create and deploy the necessary resources on the Kubernetes cluster. A supported container engine must be installed and running on the Kubernetes cluster. The Kubernetes cluster and container engine must meet the minimum version requirements outlined in document ID 2723908.1 on My Oracle Support. The nodes in the Kubernetes cluster must have access to a persistent volume such as a Network File System (NFS) mount or a shared file system.    Note: This documentation does not tell you how to install a Kubernetes cluster, Helm, the container engine, or how to push container images to a container registry. Please refer to your vendor specific documentation for this information. Also see Getting Started.\n"
},
{
	"uri": "/fmw-kubernetes/24.4.1/ohs/prerequisites/",
	"title": "Prerequisites",
	"tags": [],
	"description": "System requirements and limitations for deploying and running OHS on Kubernetes",
	"content": "Introduction This document provides information about the system requirements and limitations for deploying and running Oracle HTTP Server (OHS) on Kubernetes.\nSystem requirements for OHS on Kubernetes  A running Kubernetes cluster that meets the following requirements:  The Kubernetes cluster must have sufficient nodes and resources. A supported container engine must be installed and running on the Kubernetes cluster. The Kubernetes cluster and container engine must meet the minimum version requirements outlined in document ID 3058838.1 on My Oracle Support. The system clocks on node of the Kubernetes cluster must be synchronized. Run the date command simultaneously on all the nodes in each cluster and then syncrhonize accordingly.    Note: This documentation does not tell you how to install a Kubernetes cluster, the container engine, or how to push container images to a container registry.\nPlease refer to your vendor specific documentation for this information.\nOracle Access Management prerequisites If you intend to use OHS with Oracle WebGate and Oracle Access Management (OAM), then Oracle Access Management must have been deployed beforehand, either in an on-premises environment, or in a Kubernetes cluster. You must have an understanding of Oracle Access Management and Oracle WebGate before proceeding.\nInstructions for deploying OAM in a Kubernetes cluster can be found in Oracle Access Management. OAM in a Kubernetes cluster must be deployed as per one of the Supported Architectures defined.\nTo use Oracle WebGate with OHS you must perform the following before deploying OHS:\n  Update the Load Balancing and WebGate Traffic Load Balancer to the entry point for OAM. For example, if OAM is accessed via the load balancer (https://loadbalancer.example.com), then the OAM Server Host, OAM Server Port, and OAM Server Protocol should be updated to loadbalancer.example.com, 443, and HTTPS respectively. For more information, see Update the OAM Hostname and Port for the Loadbalancer.\n  Create an Agent in the Oracle Access Management console. After creating the agent, make sure the User Defined Parameters for OAMRestEndPointHostName, OAMRestEndPointPort, and OAMServerCommunicationMode are set to the same values as the load balancing settings above. See, Register a WebGate Agent.\n  In the Application Domain created for the WebGate, update the resources with any resources you wish to protect.\n  Create any Host Identifier(s) for any URL\u0026rsquo;s you require. For example if you access OAM via a load balancer, create a host identifier for both the load balancer hostname.domain and the OHS hostname.domain. If you access OAM directly via OHS, created a host identifier for the OHS hostname.domain. See Create Host Identifiers.\n  Download the zip file for the Agent from the OAM Console. This zip file will later be copied and extracted to the $WORKDIR/ohsConfig/webgate/config directory. See, Prepare your OHS configuration files.\n  Next Steps You are now ready to Prepare your environment.\n"
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oud/prepare-your-environment/",
	"title": "Prepare Your Environment",
	"tags": [],
	"description": "Prepare your environment",
	"content": " Check the Kubernetes cluster is ready Obtain the OUD container image Create a persistent volume directory Setup the code repository to deploy OUD  Check the Kubernetes cluster is ready As per the Prerequisites a Kubernetes cluster should have already been configured.\n  Run the following command on the master node to check the cluster and worker nodes are running:\n$ kubectl get nodes,pods -n kube-system The output will look similar to the following:\nNAME STATUS ROLES AGE VERSION node/worker-node1 Ready \u0026lt;none\u0026gt; 17h v1.28.3+3.el8 node/worker-node2 Ready \u0026lt;none\u0026gt; 17h v1.28.3+3.el8 node/master-node Ready control-plane,master 23h v1.28.3+3.el8 NAME READY STATUS RESTARTS AGE pod/coredns-66bff467f8-fnhbq 1/1 Running 0 23h pod/coredns-66bff467f8-xtc8k 1/1 Running 0 23h pod/etcd-master 1/1 Running 0 21h pod/kube-apiserver-master-node 1/1 Running 0 21h pod/kube-controller-manager-master-node 1/1 Running 0 21h pod/kube-flannel-ds-amd64-lxsfw 1/1 Running 0 17h pod/kube-flannel-ds-amd64-pqrqr 1/1 Running 0 17h pod/kube-flannel-ds-amd64-wj5nh 1/1 Running 0 17h pod/kube-proxy-2kxv2 1/1 Running 0 17h pod/kube-proxy-82vvj 1/1 Running 0 17h pod/kube-proxy-nrgw9 1/1 Running 0 23h pod/kube-scheduler-master 1/1 Running 0 21h   Obtain the OUD container image The OUD Kubernetes deployment requires access to an OUD container image. The image can be obtained in the following ways:\n Prebuilt OUD container image Build your own OUD container image using WebLogic Image Tool  Prebuilt OUD container image The prebuilt OUD October 2024 container image can be downloaded from Oracle Container Registry. This image is prebuilt by Oracle and includes Oracle Unified Directory 12.2.1.4.0, the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program..\nNote: Before using this image you must login to Oracle Container Registry, navigate to Middleware \u0026gt; oud_cpu and accept the license agreement.\nYou can use this image in the following ways:\n Pull the container image from the Oracle Container Registry automatically during the OUD Kubernetes deployment. Manually pull the container image from the Oracle Container Registry and then upload it to your own container registry. Manually pull the container image from the Oracle Container Registry and manually stage it on the master node and each worker node.  Build your own OUD container image using WebLogic Image Tool You can build your own OUD container image using the WebLogic Image Tool. This is recommended if you need to apply one off patches to a Prebuilt OUD container image. For more information about building your own container image with WebLogic Image Tool, see Create or update image.\nYou can use an image built with WebLogic Image Tool in the following ways:\n Manually upload them to your own container registry. Manually stage them on the master node and each worker node.  Note: This documentation does not tell you how to pull or push the above images into a private container registry, or stage them on the master and worker nodes. Details of this can be found in the Enterprise Deployment Guide.\nCreate a persistent volume directory Note: This section should not be followed if using block storage.\nAs referenced in Prerequisites the nodes in the Kubernetes cluster must have access to a persistent volume such as a Network File System (NFS) mount or a shared file system.\nIn this example /scratch/shared/ is a shared directory accessible from all nodes.\n  On the master node run the following command to create a user_projects directory:\n$ cd \u0026lt;persistent_volume\u0026gt; $ mkdir oud_user_projects $ sudo chown -R 1000:0 oud_user_projects For example:\n$ cd /scratch/shared $ mkdir oud_user_projects $ sudo chown -R 1000:0 oud_user_projects   On the master node run the following to ensure it is possible to read and write to the persistent volume:\n$ cd \u0026lt;persistent_volume\u0026gt;/oud_user_projects $ touch file.txt $ ls filemaster.txt For example:\n$ cd /scratch/shared/oud_user_projects $ touch filemaster.txt $ ls filemaster.txt On the first worker node run the following to ensure it is possible to read and write to the persistent volume:\n$ cd /scratch/shared/oud_user_projects $ ls filemaster.txt $ touch fileworker1.txt $ ls fileworker1.txt Repeat the above for any other worker nodes e.g fileworker2.txt etc. Once proven that it\u0026rsquo;s possible to read and write from each node to the persistent volume, delete the files created.\n  Setup the code repository to deploy OUD Oracle Unified Directory deployment on Kubernetes leverages deployment scripts provided by Oracle for creating Oracle Unified Directory containers using the Helm charts provided. To deploy Oracle Unified Directory on Kubernetes you should set up the deployment scripts as below:\n  Create a working directory to setup the source code.\n$ mkdir \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/shared/OUDContainer   Download the latest OUD deployment scripts from the OUD repository:\n$ cd \u0026lt;workdir\u0026gt; $ git clone https://github.com/oracle/fmw-kubernetes.git --branch release/24.4.1 For example:\n$ cd /scratch/shared/OUDContainer $ git clone https://github.com/oracle/fmw-kubernetes.git --branch release/24.4.1   Set the $WORKDIR environment variable as follows:\n$ export WORKDIR=\u0026lt;workdir\u0026gt;/fmw-kubernetes/OracleUnifiedDirectory For example:\n$ export WORKDIR=/scratch/shared/OUDContainer/fmw-kubernetes/OracleUnifiedDirectory You are now ready to create the OUD deployment as per Create OUD instances.\n  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oudsm/prepare-your-environment/",
	"title": "Prepare Your Environment",
	"tags": [],
	"description": "Prepare your environment",
	"content": " Check the Kubernetes cluster is ready Obtain the OUDSM container image Setup the code repository to deploy OUDSM  Check the Kubernetes cluster is ready As per the Prerequisites a Kubernetes cluster should have already been configured.\n  Run the following command on the master node to check the cluster and worker nodes are running:\n$ kubectl get nodes,pods -n kube-system The output will look similar to the following:\nNAME STATUS ROLES AGE VERSION node/worker-node1 Ready \u0026lt;none\u0026gt; 17h v1.28.3+3.el8 node/worker-node2 Ready \u0026lt;none\u0026gt; 17h v1.28.3+3.el8 node/master-node Ready master 23h v1.28.3+3.el8 NAME READY STATUS RESTARTS AGE pod/coredns-66bff467f8-fnhbq 1/1 Running 0 23h pod/coredns-66bff467f8-xtc8k 1/1 Running 0 23h pod/etcd-master 1/1 Running 0 21h pod/kube-apiserver-master-node 1/1 Running 0 21h pod/kube-controller-manager-master-node 1/1 Running 0 21h pod/kube-flannel-ds-amd64-lxsfw 1/1 Running 0 17h pod/kube-flannel-ds-amd64-pqrqr 1/1 Running 0 17h pod/kube-flannel-ds-amd64-wj5nh 1/1 Running 0 17h pod/kube-proxy-2kxv2 1/1 Running 0 17h pod/kube-proxy-82vvj 1/1 Running 0 17h pod/kube-proxy-nrgw9 1/1 Running 0 23h pod/kube-scheduler-master 1/1 Running 0 21$   Obtain the OUDSM container image The Oracle Unified Directory Services Manager (OUDSM) Kubernetes deployment requires access to an OUDSM container image. The image can be obtained in the following ways:\n Prebuilt OUDSM container image Build your own OUDSM container image using WebLogic Image Tool  Prebuilt OUDSM container image The prebuilt OUDSM October 2024 container image can be downloaded from Oracle Container Registry. This image is prebuilt by Oracle and includes Oracle Unified Directory Services Manager 12.2.1.4.0, the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.\nNote: Before using this image you must login to Oracle Container Registry, navigate to Middleware \u0026gt; oudsm_cpu and accept the license agreement.\nYou can use this image in the following ways:\n Pull the container image from the Oracle Container Registry automatically during the OUDSM Kubernetes deployment. Manually pull the container image from the Oracle Container Registry and then upload it to your own container registry. Manually pull the container image from the Oracle Container Registry and manually stage it on the master node and each worker node.  Build your own OUDSM container image using WebLogic Image Tool You can build your own OUDSM container image using the WebLogic Image Tool. This is recommended if you need to apply one off patches to a Prebuilt OUDSM container image. For more information about building your own container image with WebLogic Image Tool, see Create or update image\nYou can use an image built with WebLogic Image Tool in the following ways:\n Manually upload them to your own container registry. Manually stage them on the master node and each worker node.  Note: This documentation does not tell you how to pull or push the above images into a private container registry, or stage them on the master and worker nodes. Details of this can be found in the Enterprise Deployment Guide.\nSetup the code repository to deploy OUDSM Oracle Unified Directory Services Manager deployment on Kubernetes leverages deployment scripts provided by Oracle for creating Oracle Unified Directory Services Manager containers using the Helm charts provided. To deploy Oracle Unified Directory Services Manager on Kubernetes you should set up the deployment scripts on the master node as below:\n  Create a working directory to setup the source code.\n$ mkdir \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/OUDSMContainer   Download the latest OUDSM deployment scripts from the OUDSM repository:\n$ cd \u0026lt;workdir\u0026gt; $ git clone https://github.com/oracle/fmw-kubernetes.git --branch release/24.4.1 For example:\n$ cd /scratch/OUDSMContainer $ git clone https://github.com/oracle/fmw-kubernetes.git --branch release/24.4.1   Set the $WORKDIR environment variable as follows:\n$ export WORKDIR=\u0026lt;workdir\u0026gt;/fmw-kubernetes/OracleUnifiedDirectorySM For example:\n$ export WORKDIR=/scratch/OUDSMContainer/fmw-kubernetes/OracleUnifiedDirectorySM You are now ready to create the OUDSM deployment as per Create OUDSM instances.\n  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/prepare-your-environment/",
	"title": "Prepare your environment",
	"tags": [],
	"description": "Sample for creating an OAM domain home on an existing PV or PVC, and the domain resource YAML file for deploying the generated OAM domain.",
	"content": "To prepare for Oracle Access Management deployment in a Kubernetes environment, complete the following steps:\n  Check the Kubernetes cluster is ready\n  Obtain the OAM container image\n  Set up the code repository to deploy OAM domains\n  Install the WebLogic Kubernetes Operator\n  Create a namespace for Oracle Access Management\n  Create a Kubernetes secret for the container registry\n  Create OAM Domains Using WDT Models\n  Create OAM Domains Using WLST Scripts\na. RCU schema creation\nb. Creating Kubernetes secrets for the domain and RCU\nc. Create a Kubernetes persistent volume and persistent volume claim\n  Check the Kubernetes cluster is ready As per the Prerequisites a Kubernetes cluster should have already been configured.\nCheck that all the nodes in the Kubernetes cluster are running.\n  Run the following command on the master node to check the cluster and worker nodes are running:\n$ kubectl get nodes,pods -n kube-system The output will look similar to the following:\nNAME STATUS ROLES AGE VERSION node/worker-node1 Ready \u0026lt;none\u0026gt; 17h v1.28.3+3.el8 node/worker-node2 Ready \u0026lt;none\u0026gt; 17h v1.28.3+3.el8 node/master-node Ready control-plane,master 23h v1.28.3+3.el8 NAME READY STATUS RESTARTS AGE pod/coredns-66bff467f8-fnhbq 1/1 Running 0 23h pod/coredns-66bff467f8-xtc8k 1/1 Running 0 23h pod/etcd-master 1/1 Running 0 21h pod/kube-apiserver-master-node 1/1 Running 0 21h pod/kube-controller-manager-master-node 1/1 Running 0 21h pod/kube-flannel-ds-amd64-lxsfw 1/1 Running 0 17h pod/kube-flannel-ds-amd64-pqrqr 1/1 Running 0 17h pod/kube-flannel-ds-amd64-wj5nh 1/1 Running 0 17h pod/kube-proxy-2kxv2 1/1 Running 0 17h pod/kube-proxy-82vvj 1/1 Running 0 17h pod/kube-proxy-nrgw9 1/1 Running 0 23h pod/kube-scheduler-master 1/1 Running 0 21h   Obtain the OAM container image The OAM Kubernetes deployment requires access to an OAM container image. The image can be obtained in the following ways:\n Prebuilt OAM container image Build your own OAM container image using WebLogic Image Tool  Prebuilt OAM container image The prebuilt OAM October 2024 container image can be downloaded from Oracle Container Registry. This image is prebuilt by Oracle and includes Oracle Access Management 12.2.1.4.0, the October Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.\nNote: Before using this image you must login to Oracle Container Registry, navigate to Middleware \u0026gt; oam_cpu and accept the license agreement.\nYou can use this image in the following ways:\n Pull the container image from the Oracle Container Registry automatically during the OAM Kubernetes deployment. Manually pull the container image from the Oracle Container Registry and then upload it to your own container registry. Manually pull the container image from the Oracle Container Registry and manually stage it on the master node and each worker node.  Build your own OAM container image using WebLogic Image Tool You can build your own OAM container image using the WebLogic Image Tool. This is recommended if you need to apply one off patches to a Prebuilt OAM container image. For more information about building your own container image with WebLogic Image Tool, see Create or update image.\nYou can use an image built with WebLogic Image Tool in the following ways:\n Manually upload them to your own container registry. Manually stage them on the master node and each worker node.  Note: This documentation does not tell you how to pull or push the above images into a private container registry, or stage them on the master and worker nodes. Details of this can be found in the Enterprise Deployment Guide.\nSet up the code repository to deploy OAM domains OAM domain deployment on Kubernetes leverages the WebLogic Kubernetes Operator infrastructure. For deploying the OAM domains, you need to set up the deployment scripts on the master node as below:\n  Create a working directory to setup the source code.\n$ mkdir \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/OAMK8S   Download the latest OAM deployment scripts from the OAM repository.\n$ cd \u0026lt;workdir\u0026gt; $ git clone https://github.com/oracle/fmw-kubernetes.git --branch release/24.4.1 For example:\n$ cd /scratch/OAMK8S $ git clone https://github.com/oracle/fmw-kubernetes.git --branch release/24.4.1   Set the $WORKDIR environment variable as follows:\n$ export WORKDIR=\u0026lt;workdir\u0026gt;/fmw-kubernetes/OracleAccessManagement For example:\n$ export WORKDIR=/scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement   Run the following command and see if the WebLogic custom resource definition name already exists:\n$ kubectl get crd In the output you should see:\nNo resources found If you see any of the following:\nNAME AGE clusters.weblogic.oracle 5d domains.weblogic.oracle 5d then run the following command to delete the existing crd\u0026rsquo;s:\n$ kubectl delete crd clusters.weblogic.oracle $ kubectl delete crd domains.weblogic.oracle   Install the WebLogic Kubernetes Operator   On the master node run the following command to create a namespace for the operator:\n$ kubectl create namespace \u0026lt;sample-kubernetes-operator-ns\u0026gt; For example:\n$ kubectl create namespace opns The output will look similar to the following:\nnamespace/opns created   Create a service account for the operator in the operator\u0026rsquo;s namespace by running the following command:\n$ kubectl create serviceaccount -n \u0026lt;sample-kubernetes-operator-ns\u0026gt; \u0026lt;sample-kubernetes-operator-sa\u0026gt; For example:\n$ kubectl create serviceaccount -n opns op-sa The output will look similar to the following:\nserviceaccount/op-sa created   Run the following helm command to install and start the operator:\n$ cd $WORKDIR $ helm install weblogic-kubernetes-operator kubernetes/charts/weblogic-operator \\ --namespace \u0026lt;sample-kubernetes-operator-ns\u0026gt; \\ --set image=ghcr.io/oracle/weblogic-kubernetes-operator:4.1.8 \\ --set serviceAccount=\u0026lt;sample-kubernetes-operator-sa\u0026gt; \\ --set “enableClusterRoleBinding=true” \\ --set \u0026#34;domainNamespaceSelectionStrategy=LabelSelector\u0026#34; \\ --set \u0026#34;domainNamespaceLabelSelector=weblogic-operator\\=enabled\u0026#34; \\ --set \u0026#34;javaLoggingLevel=FINE\u0026#34; --wait For example:\n$ cd $WORKDIR $ helm install weblogic-kubernetes-operator kubernetes/charts/weblogic-operator \\ --namespace opns \\ --set image=ghcr.io/oracle/weblogic-kubernetes-operator:4.1.8 \\ --set serviceAccount=op-sa \\ --set \u0026#34;enableClusterRoleBinding=true\u0026#34; \\ --set \u0026#34;domainNamespaceSelectionStrategy=LabelSelector\u0026#34; \\ --set \u0026#34;domainNamespaceLabelSelector=weblogic-operator\\=enabled\u0026#34; \\ --set \u0026#34;javaLoggingLevel=FINE\u0026#34; --wait The output will look similar to the following:\nNAME: weblogic-kubernetes-operator LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: opns STATUS: deployed REVISION: 1 TEST SUITE: None   Verify that the operator\u0026rsquo;s pod and services are running by executing the following command:\n$ kubectl get all -n \u0026lt;sample-kubernetes-operator-ns\u0026gt; For example:\n$ kubectl get all -n opns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE pod/weblogic-operator-676d5cc6f4-wct7b 1/1 Running 0 40s pod/weblogic-operator-webhook-7996b8b58b-9sfhd 1/1 Running 0 40s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/weblogic-operator-webhook-svc ClusterIP 10.100.91.237 \u0026lt;none\u0026gt; 8083/TCP,8084/TCP 47s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/weblogic-operator 1/1 1 1 40s deployment.apps/weblogic-operator-webhook 1/1 1 1 40s NAME DESIRED CURRENT READY AGE replicaset.apps/weblogic-operator-676d5cc6f4 1 1 1 40s replicaset.apps/weblogic-operator-webhook-7996b8b58b 1 1 1 46s   Verify the operator pod\u0026rsquo;s log:\n$ kubectl logs -n \u0026lt;sample-kubernetes-operator-ns\u0026gt; -c weblogic-operator deployments/weblogic-operator For example:\n$ kubectl logs -n opns -c weblogic-operator deployments/weblogic-operator The output will look similar to the following:\n... {\u0026quot;timestamp\u0026quot;:\u0026quot;\u0026lt;DATE\u0026gt;\u0026quot;,\u0026quot;thread\u0026quot;:21,\u0026quot;fiber\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;namespace\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;domainUID\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;level\u0026quot;:\u0026quot;FINE\u0026quot;,\u0026quot;class\u0026quot;:\u0026quot;oracle.kubernetes.operator.DeploymentLiveness\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;run\u0026quot;,\u0026quot;timeInMillis\u0026quot;:1678183291191,\u0026quot;message\u0026quot;:\u0026quot;Liveness file last modified time set\u0026quot;,\u0026quot;exception\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;code\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;headers\u0026quot;:{},\u0026quot;body\u0026quot;:\u0026quot;\u0026quot;} {\u0026quot;timestamp\u0026quot;:\u0026quot;\u0026lt;DATE\u0026gt;\u0026quot;,\u0026quot;thread\u0026quot;:37,\u0026quot;fiber\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;namespace\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;domainUID\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;level\u0026quot;:\u0026quot;FINE\u0026quot;,\u0026quot;class\u0026quot;:\u0026quot;oracle.kubernetes.operator.DeploymentLiveness\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;run\u0026quot;,\u0026quot;timeInMillis\u0026quot;:1678183296193,\u0026quot;message\u0026quot;:\u0026quot;Liveness file last modified time set\u0026quot;,\u0026quot;exception\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;code\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;headers\u0026quot;:{},\u0026quot;body\u0026quot;:\u0026quot;\u0026quot;} {\u0026quot;timestamp\u0026quot;:\u0026quot;\u0026lt;DATE\u0026gt;\u0026quot;,\u0026quot;thread\u0026quot;:31,\u0026quot;fiber\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;namespace\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;domainUID\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;level\u0026quot;:\u0026quot;FINE\u0026quot;,\u0026quot;class\u0026quot;:\u0026quot;oracle.kubernetes.operator.DeploymentLiveness\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;run\u0026quot;,\u0026quot;timeInMillis\u0026quot;:1678183301194,\u0026quot;message\u0026quot;:\u0026quot;Liveness file last modified time set\u0026quot;,\u0026quot;exception\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;code\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;headers\u0026quot;:{},\u0026quot;body\u0026quot;:\u0026quot;\u0026quot;} {\u0026quot;timestamp\u0026quot;:\u0026quot;\u0026lt;DATE\u0026gt;\u0026quot;,\u0026quot;thread\u0026quot;:31,\u0026quot;fiber\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;namespace\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;domainUID\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;level\u0026quot;:\u0026quot;FINE\u0026quot;,\u0026quot;class\u0026quot;:\u0026quot;oracle.kubernetes.operator.DeploymentLiveness\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;run\u0026quot;,\u0026quot;timeInMillis\u0026quot;:1678183306195,\u0026quot;message\u0026quot;:\u0026quot;Liveness file last modified time set\u0026quot;,\u0026quot;exception\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;code\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;headers\u0026quot;:{},\u0026quot;body\u0026quot;:\u0026quot;\u0026quot;}   Create a namespace for Oracle Access Management   Run the following command to create a namespace for the domain:\n$ kubectl create namespace \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl create namespace oamns The output will look similar to the following:\nnamespace/oamns created   Run the following command to tag the namespace so the WebLogic Kubernetes Operator can manage it:\n$ kubectl label namespaces \u0026lt;domain_namespace\u0026gt; weblogic-operator=enabled For example:\n$ kubectl label namespaces oamns weblogic-operator=enabled The output will look similar to the following:\nnamespace/oamns labeled   Run the following command to check the label was created:\n$ kubectl describe namespace \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe namespace oamns The output will look similar to the following:\nName: oamns Labels: kubernetes.io/metadata.name=oamns weblogic-operator=enabled Annotations: \u0026lt;none\u0026gt; Status: Active No resource quota. No LimitRange resource.   Create a Kubernetes secret for the container registry In this section you create a secret that stores the credentials for the container registry where the OAM image is stored.\nIf you are not using a container registry and have loaded the images on each of the master and worker nodes, then there is no need to create the registry secret.\n  Run the following command to create the secret:\nkubectl create secret docker-registry \u0026#34;orclcred\u0026#34; --docker-server=\u0026lt;CONTAINER_REGISTRY\u0026gt; \\ --docker-username=\u0026#34;\u0026lt;USER_NAME\u0026gt;\u0026#34; \\ --docker-password=\u0026lt;PASSWORD\u0026gt; --docker-email=\u0026lt;EMAIL_ID\u0026gt; \\ --namespace=\u0026lt;domain_namespace\u0026gt; For example, if using Oracle Container Registry:\nkubectl create secret docker-registry \u0026#34;orclcred\u0026#34; --docker-server=container-registry.oracle.com \\ --docker-username=\u0026#34;user@example.com\u0026#34; \\ --docker-password=password --docker-email=user@example.com \\ --namespace=oamns Replace \u0026lt;USER_NAME\u0026gt; and \u0026lt;PASSWORD\u0026gt; with the credentials for the registry with the following caveats:\n  If using Oracle Container Registry to pull the OAM container image, this is the username and password used to login to Oracle Container Registry. Before you can use this image you must login to Oracle Container Registry, navigate to Middleware \u0026gt; oam_cpu and accept the license agreement.\n  If using your own container registry to store the OAM container image, this is the username and password (or token) for your container registry.\n  The output will look similar to the following:\nsecret/orclcred created   Create OAM Domains Using WDT Models If you want to create an OAM domain using WDT models, ignore everything else on this page and move directly to Create OAM Domains Using WDT Models.\nCreate OAM Domains Using WLST Scripts If you want to create an OAM domain using WLST scripts, follow the rest of the instructions below.\na. RCU schema creation\nb. Creating Kubernetes secrets for the domain and RCU\nc. Create a Kubernetes persistent volume and persistent volume claim\nRCU schema creation In this section you create the RCU schemas in the Oracle Database.\nBefore following the steps in this section, make sure that the database and listener are up and running and you can connect to the database via SQL*Plus or other client tool.\n  If using Oracle Container Registry or your own container registry for your OAM container image, run the following command to create a helper pod to run RCU:\n$ kubectl run --image=\u0026lt;image_name-from-registry\u0026gt;:\u0026lt;tag\u0026gt; --image-pull-policy=\u0026#34;IfNotPresent\u0026#34; --overrides=\u0026#39;{\u0026#34;apiVersion\u0026#34;: \u0026#34;v1\u0026#34;, \u0026#34;spec\u0026#34;:{\u0026#34;imagePullSecrets\u0026#34;: [{\u0026#34;name\u0026#34;: \u0026#34;orclcred\u0026#34;}]}}\u0026#39; helper -n \u0026lt;domain_namespace\u0026gt; -- sleep infinity For example:\n$ kubectl run --image=container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October\u0026#39;24\u0026gt; --image-pull-policy=\u0026#34;IfNotPresent\u0026#34; --overrides=\u0026#39;{\u0026#34;apiVersion\u0026#34;: \u0026#34;v1\u0026#34;,\u0026#34;spec\u0026#34;:{\u0026#34;imagePullSecrets\u0026#34;: [{\u0026#34;name\u0026#34;: \u0026#34;orclcred\u0026#34;}]}}\u0026#39; helper -n oamns -- sleep infinity If you are not using a container registry and have loaded the image on each of the master and worker nodes, run the following command:\n$ kubectl run helper --image \u0026lt;image\u0026gt;:\u0026lt;tag\u0026gt; -n oamns -- sleep infinity For example:\n$ kubectl run helper --image oracle/oam:12.2.1.4-jdk8-ol8-\u0026lt;October\u0026#39;24\u0026gt; -n oamns -- sleep infinity The output will look similar to the following:\npod/helper created   Run the following command to check the pod is running:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE helper 1/1 Running 0 3m Note: If you are pulling the image from a container registry it may take several minutes before the pod has a STATUS of 1\\1. While the pod is starting you can check the status of the pod, by running the following command:\n$ kubectl describe pod helper -n oamns   Run the following command to start a bash shell in the helper pod:\n$ kubectl exec -it helper -n \u0026lt;domain_namespace\u0026gt; -- /bin/bash For example:\n$ kubectl exec -it helper -n oamns -- /bin/bash This will take you into a bash shell in the running helper pod:\n[oracle@helper ~]$   In the helper bash shell run the following commands to set the environment:\n[oracle@helper ~]$ export CONNECTION_STRING=\u0026lt;db_host.domain\u0026gt;:\u0026lt;db_port\u0026gt;/\u0026lt;service_name\u0026gt; [oracle@helper ~]$ export RCUPREFIX=\u0026lt;rcu_schema_prefix\u0026gt; [oracle@helper ~]$ echo -e \u0026lt;db_pwd\u0026gt;\u0026#34;\\n\u0026#34;\u0026lt;rcu_schema_pwd\u0026gt; \u0026gt; /tmp/pwd.txt [oracle@helper ~]$ cat /tmp/pwd.txt where:\n\u0026lt;db_host.domain\u0026gt;:\u0026lt;db_port\u0026gt;/\u0026lt;service_name\u0026gt;\tis your database connect string\n\u0026lt;rcu_schema_prefix\u0026gt; is the RCU schema prefix you want to set\n\u0026lt;db_pwd\u0026gt; is the SYS password for the database\n\u0026lt;rcu_schema_pwd\u0026gt; is the password you want to set for the \u0026lt;rcu_schema_prefix\u0026gt;\nFor example:\n[oracle@helper ~]$ export CONNECTION_STRING=mydatabasehost.example.com:1521/orcl.example.com [oracle@helper ~]$ export RCUPREFIX=OAMK8S [oracle@helper ~]$ echo -e \u0026lt;password\u0026gt;\u0026#34;\\n\u0026#34;\u0026lt;password\u0026gt; \u0026gt; /tmp/pwd.txt [oracle@helper ~]$ cat /tmp/pwd.txt \u0026lt;password\u0026gt; \u0026lt;password\u0026gt;   In the helper bash shell run the following command to create the RCU schemas in the database:\n$ [oracle@helper ~]$ /u01/oracle/oracle_common/bin/rcu -silent -createRepository -databaseType ORACLE -connectString \\ $CONNECTION_STRING -dbUser sys -dbRole sysdba -useSamePasswordForAllSchemaUsers true \\ -selectDependentsForComponents true -schemaPrefix $RCUPREFIX -component MDS -component IAU \\ -component IAU_APPEND -component IAU_VIEWER -component OPSS -component WLS -component STB -component OAM -f \u0026lt; /tmp/pwd.txt The output will look similar to the following:\nRCU Logfile: /tmp/RCU\u0026lt;DATE\u0026gt;/logs/rcu.log Processing command line .... Repository Creation Utility - Checking Prerequisites Checking Global Prerequisites Repository Creation Utility - Checking Prerequisites Checking Component Prerequisites Repository Creation Utility - Creating Tablespaces Validating and Creating Tablespaces Create tablespaces in the repository database Repository Creation Utility - Create Repository Create in progress. Executing pre create operations Percent Complete: 18 Percent Complete: 18 Percent Complete: 19 Percent Complete: 20 Percent Complete: 21 Percent Complete: 21 Percent Complete: 22 Percent Complete: 22 Creating Common Infrastructure Services(STB) Percent Complete: 30 Percent Complete: 30 Percent Complete: 39 Percent Complete: 39 Percent Complete: 39 Creating Audit Services Append(IAU_APPEND) Percent Complete: 46 Percent Complete: 46 Percent Complete: 55 Percent Complete: 55 Percent Complete: 55 Creating Audit Services Viewer(IAU_VIEWER) Percent Complete: 62 Percent Complete: 62 Percent Complete: 63 Percent Complete: 63 Percent Complete: 64 Percent Complete: 64 Creating Metadata Services(MDS) Percent Complete: 73 Percent Complete: 73 Percent Complete: 73 Percent Complete: 74 Percent Complete: 74 Percent Complete: 75 Percent Complete: 75 Percent Complete: 75 Creating Weblogic Services(WLS) Percent Complete: 80 Percent Complete: 80 Percent Complete: 83 Percent Complete: 83 Percent Complete: 91 Percent Complete: 98 Percent Complete: 98 Creating Audit Services(IAU) Percent Complete: 100 Creating Oracle Platform Security Services(OPSS) Creating Oracle Access Manager(OAM) Executing post create operations Repository Creation Utility: Create - Completion Summary Database details: ----------------------------- Host Name : mydatabasehost.example.com Port : 1521 Service Name : ORCL.EXAMPLE.COM Connected As : sys Prefix for (prefixable) Schema Owners : OAMK8S RCU Logfile : /tmp/RCU\u0026lt;DATE\u0026gt;/logs/rcu.log Component schemas created: ----------------------------- Component Status Logfile Common Infrastructure Services Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/stb.log Oracle Platform Security Services Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/opss.log Oracle Access Manager Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/oam.log Audit Services Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/iau.log Audit Services Append Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/iau_append.log Audit Services Viewer Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/iau_viewer.log Metadata Services Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/mds.log WebLogic Services Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/wls.log Repository Creation Utility - Create : Operation Completed [oracle@helper ~]$   Exit the helper bash shell by issuing the command exit.\n  Creating Kubernetes secrets for the domain and RCU   Create a Kubernetes secret for the domain using the create-weblogic-credentials script in the same Kubernetes namespace as the domain:\n$ cd $WORKDIR/kubernetes/create-weblogic-domain-credentials $ ./create-weblogic-credentials.sh -u weblogic -p \u0026lt;pwd\u0026gt; -n \u0026lt;domain_namespace\u0026gt; -d \u0026lt;domain_uid\u0026gt; -s \u0026lt;kubernetes_domain_secret\u0026gt; where:\n-u weblogic is the WebLogic username\n-p \u0026lt;pwd\u0026gt; is the password for the weblogic user\n-n \u0026lt;domain_namespace\u0026gt; is the domain namespace\n-d \u0026lt;domain_uid\u0026gt; is the domain UID to be created. The default is domain1 if not specified\n-s \u0026lt;kubernetes_domain_secret\u0026gt; is the name you want to create for the secret for this namespace. The default is to use the domainUID if not specified\nFor example:\n$ cd $WORKDIR/kubernetes/create-weblogic-domain-credentials $ ./create-weblogic-credentials.sh -u weblogic -p \u0026lt;password\u0026gt; -n oamns -d accessdomain -s accessdomain-credentials The output will look similar to the following:\nsecret/accessdomain-credentials created secret/accessdomain-credentials labeled The secret accessdomain-credentials has been successfully created in the oamns namespace.   Verify the secret is created using the following command:\n$ kubectl get secret \u0026lt;kubernetes_domain_secret\u0026gt; -o yaml -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get secret accessdomain-credentials -o yaml -n oamns The output will look similar to the following:\napiVersion: v1 data: password: V2VsY29tZTE= username: d2VibG9naWM= kind: Secret metadata: creationTimestamp: \u0026quot;\u0026lt;DATE\u0026gt;\u0026quot; labels: weblogic.domainName: accessdomain weblogic.domainUID: accessdomain name: accessdomain-credentials namespace: oamns resourceVersion: \u0026quot;29428101\u0026quot; uid: 6dac0561-d157-4144-9ed7-c475a080eb3a type: Opaque   Create a Kubernetes secret for RCU using the create-weblogic-credentials script in the same Kubernetes namespace as the domain:\n$ cd $WORKDIR/kubernetes/create-rcu-credentials $ ./create-rcu-credentials.sh -u \u0026lt;rcu_prefix\u0026gt; -p \u0026lt;rcu_schema_pwd\u0026gt; -a sys -q \u0026lt;sys_db_pwd\u0026gt; -d \u0026lt;domain_uid\u0026gt; -n \u0026lt;domain_namespace\u0026gt; -s \u0026lt;kubernetes_rcu_secret\u0026gt; where:\n-u \u0026lt;rcu_prefix\u0026gt; is the name of the RCU schema prefix created previously\n-p \u0026lt;rcu_schema_pwd\u0026gt; is the password for the RCU schema prefix\n-q \u0026lt;sys_db_pwd\u0026gt; is the sys database password\n-d \u0026lt;domain_uid\u0026gt; is the domain_uid that you created earlier\n-n \u0026lt;domain_namespace\u0026gt; is the domain namespace\n-s \u0026lt;kubernetes_rcu_secret\u0026gt; is the name of the rcu secret to create\nFor example:\n$ cd $WORKDIR/kubernetes/create-rcu-credentials $ ./create-rcu-credentials.sh -u OAMK8S -p \u0026lt;password\u0026gt; -a sys -q \u0026lt;password\u0026gt; -d accessdomain -n oamns -s accessdomain-rcu-credentials The output will look similar to the following:\nsecret/accessdomain-rcu-credentials created secret/accessdomain-rcu-credentials labeled The secret accessdomain-rcu-credentials has been successfully created in the oamns namespace.   Verify the secret is created using the following command:\n$ kubectl get secret \u0026lt;kubernetes_rcu_secret\u0026gt; -o yaml -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get secret accessdomain-rcu-credentials -o yaml -n oamns The output will look similar to the following:\napiVersion: v1 data: password: T3JhY2xlXzEyMw== sys_password: T3JhY2xlXzEyMw== sys_username: c3lz username: T0FNSzhT kind: Secret metadata: creationTimestamp: \u0026quot;\u0026lt;DATE\u0026gt;\u0026quot; labels: weblogic.domainName: accessdomain weblogic.domainUID: accessdomain name: accessdomain-rcu-credentials namespace: oamns resourceVersion: \u0026quot;29428242\u0026quot; uid: 1b81b6e0-fd7d-40b8-a060-454c8d23f4dc type: Opaque   Create a Kubernetes persistent volume and persistent volume claim As referenced in Prerequisites the nodes in the Kubernetes cluster must have access to a persistent volume such as a Network File System (NFS) mount or a shared file system.\nA persistent volume is the same as a disk mount but is inside a container. A Kubernetes persistent volume is an arbitrary name (determined in this case, by Oracle) that is mapped to a physical volume on a disk.\nWhen a container is started, it needs to mount that volume. The physical volume should be on a shared disk accessible by all the Kubernetes worker nodes because it is not known on which worker node the container will be started. In the case of Identity and Access Management, the persistent volume does not get erased when a container stops. This enables persistent configurations.\nThe example below uses an NFS mounted volume (\u0026lt;persistent_volume\u0026gt;/accessdomainpv). Other volume types can also be used. See the official Kubernetes documentation for Volumes.\nNote: The persistent volume directory needs to be accessible to both the master and worker node(s). In this example /scratch/shared/accessdomainpv is accessible from all nodes via NFS.\nTo create a Kubernetes persistent volume, perform the following steps:\n  Make a backup copy of the create-pv-pvc-inputs.yaml file and create required directories:\n$ cd $WORKDIR/kubernetes/create-weblogic-domain-pv-pvc $ cp create-pv-pvc-inputs.yaml create-pv-pvc-inputs.yaml.orig $ mkdir output $ mkdir -p \u0026lt;persistent_volume\u0026gt;/accessdomainpv $ sudo chown -R 1000:0 \u0026lt;persistent_volume\u0026gt;/accessdomainpv For example:\n$ cd $WORKDIR/kubernetes/create-weblogic-domain-pv-pvc $ cp create-pv-pvc-inputs.yaml create-pv-pvc-inputs.yaml.orig $ mkdir output $ mkdir -p /scratch/shared/accessdomainpv $ sudo chown -R 1000:0 /scratch/shared/accessdomainpv   On the master node run the following command to ensure it is possible to read and write to the persistent volume:\ncd \u0026lt;persistent_volume\u0026gt;/accessdomainpv touch filemaster.txt ls filemaster.txt For example:\ncd /scratch/shared/accessdomainpv touch filemaster.txt ls filemaster.txt On the first worker node run the following to ensure it is possible to read and write to the persistent volume:\ncd /scratch/shared/accessdomainpv ls filemaster.txt touch fileworker1.txt ls fileworker1.txt Repeat the above for any other worker nodes e.g fileworker2.txt etc. Once proven that it\u0026rsquo;s possible to read and write from each node to the persistent volume, delete the files created.\n  Navigate to $WORKDIR/kubernetes/create-weblogic-domain-pv-pvc:\n$ cd $WORKDIR/kubernetes/create-weblogic-domain-pv-pvc and edit the create-pv-pvc-inputs.yaml file and update the following parameters to reflect your settings. Save the file when complete:\nbaseName: \u0026lt;domain\u0026gt; domainUID: \u0026lt;domain_uid\u0026gt; namespace: \u0026lt;domain_namespace\u0026gt; weblogicDomainStorageType: NFS weblogicDomainStorageNFSServer: \u0026lt;nfs_server\u0026gt; weblogicDomainStoragePath: \u0026lt;physical_path_of_persistent_storage\u0026gt; weblogicDomainStorageSize: 10Gi For example:\n\t# The base name of the pv and pvc baseName: domain # Unique ID identifying a domain. # If left empty, the generated pv can be shared by multiple domains # This ID must not contain an underscope (\u0026quot;_\u0026quot;), and must be lowercase and unique across all domains in a Kubernetes cluster. domainUID: accessdomain # Name of the namespace for the persistent volume claim namespace: oamns ... # Persistent volume type for the persistent storage. # The value must be 'HOST_PATH' or 'NFS'. # If using 'NFS', weblogicDomainStorageNFSServer must be specified. weblogicDomainStorageType: NFS # The server name or ip address of the NFS server to use for the persistent storage. # The following line must be uncomment and customized if weblogicDomainStorateType is NFS: weblogicDomainStorageNFSServer: mynfsserver # Physical path of the persistent storage. # When weblogicDomainStorageType is set to HOST_PATH, this value should be set the to path to the # domain storage on the Kubernetes host. # When weblogicDomainStorageType is set to NFS, then weblogicDomainStorageNFSServer should be set # to the IP address or name of the DNS server, and this value should be set to the exported path # on that server. # Note that the path where the domain is mounted in the WebLogic containers is not affected by this # setting, that is determined when you create your domain. # The following line must be uncomment and customized: weblogicDomainStoragePath: /scratch/shared/accessdomainpv # Reclaim policy of the persistent storage # The valid values are: 'Retain', 'Delete', and 'Recycle' weblogicDomainStorageReclaimPolicy: Retain # Total storage allocated to the persistent storage. weblogicDomainStorageSize: 10Gi   Execute the create-pv-pvc.sh script to create the PV and PVC configuration files:\n$ ./create-pv-pvc.sh -i create-pv-pvc-inputs.yaml -o output The output will be similar to the following:\nInput parameters being used export version=\u0026quot;create-weblogic-sample-domain-pv-pvc-inputs-v1\u0026quot; export baseName=\u0026quot;domain\u0026quot; export domainUID=\u0026quot;accessdomain\u0026quot; export namespace=\u0026quot;oamns\u0026quot; export weblogicDomainStorageType=\u0026quot;NFS\u0026quot; export weblogicDomainStorageNFSServer=\u0026quot;mynfsserver\u0026quot; export weblogicDomainStoragePath=\u0026quot;/scratch/shared/accessdomainpv\u0026quot; export weblogicDomainStorageReclaimPolicy=\u0026quot;Retain\u0026quot; export weblogicDomainStorageSize=\u0026quot;10Gi\u0026quot; Generating output/pv-pvcs/accessdomain-domain-pv.yaml Generating output/pv-pvcs/accessdomain-domain-pvc.yaml The following files were generated: output/pv-pvcs/accessdomain-domain-pv.yaml.yaml output/pv-pvcs/accessdomain-domain-pvc.yaml   Run the following to show the files are created:\n$ ls output/pv-pvcs accessdomain-domain-pv.yaml accessdomain-domain-pvc.yaml create-pv-pvc-inputs.yaml   Run the following kubectl command to create the PV and PVC in the domain namespace:\n$ kubectl create -f output/pv-pvcs/accessdomain-domain-pv.yaml -n \u0026lt;domain_namespace\u0026gt; $ kubectl create -f output/pv-pvcs/accessdomain-domain-pvc.yaml -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl create -f output/pv-pvcs/accessdomain-domain-pv.yaml -n oamns $ kubectl create -f output/pv-pvcs/accessdomain-domain-pvc.yaml -n oamns The output will look similar to the following:\npersistentvolume/accessdomain-domain-pv created persistentvolumeclaim/accessdomain-domain-pvc created   Run the following commands to verify the PV and PVC were created successfully:\n$ kubectl describe pv \u0026lt;pv_name\u0026gt; $ kubectl describe pvc \u0026lt;pvc_name\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe pv accessdomain-domain-pv $ kubectl describe pvc accessdomain-domain-pvc -n oamns The output will look similar to the following:\n$ kubectl describe pv accessdomain-domain-pv Name: accessdomain-domain-pv Labels: weblogic.domainUID=accessdomain Annotations: pv.kubernetes.io/bound-by-controller: yes Finalizers: [kubernetes.io/pv-protection] StorageClass: accessdomain-domain-storage-class Status: Bound Claim: oamns/accessdomain-domain-pvc Reclaim Policy: Retain Access Modes: RWX VolumeMode: Filesystem Capacity: 10Gi Node Affinity: \u0026lt;none\u0026gt; Message: Source: Type: NFS (an NFS mount that lasts the lifetime of a pod) Server: mynfsserver Path: /scratch/shared/accessdomainpv ReadOnly: false Events: \u0026lt;none\u0026gt; $ kubectl describe pvc accessdomain-domain-pvc -n oamns Name: accessdomain-domain-pvc Namespace: oamns StorageClass: accessdomain-domain-storage-class Status: Bound Volume: accessdomain-domain-pv Labels: weblogic.domainUID=accessdomain Annotations: pv.kubernetes.io/bind-completed: yes pv.kubernetes.io/bound-by-controller: yes Finalizers: [kubernetes.io/pvc-protection] Capacity: 10Gi Access Modes: RWX VolumeMode: Filesystem Events: \u0026lt;none\u0026gt; Mounted By: \u0026lt;none\u0026gt; You are now ready to create the OAM domain with WLST scripts as as per Create OAM Domains Using WLST scripts.\n  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/prepare-your-environment/",
	"title": "Prepare your environment",
	"tags": [],
	"description": "Preparation to deploy OIG on Kubernetes",
	"content": "To prepare for Oracle Identity Governance deployment in a Kubernetes environment, complete the following steps:\n  Check the Kubernetes cluster is ready\n  Obtain the OIG container image\n  Setup the code repository to deploy OIG domains\n  Install the WebLogic Kubernetes Operator\n  Create a namespace for Oracle Identity Governance\n  Create a Kubernetes secret for the container registry\n  Create OIG Domains Using WDT Models\n  Create OIG Domains Using WLST Scripts\na. RCU schema creation\nb. Creating Kubernetes secrets for the domain and RCU\nc. Create a Kubernetes persistent volume and persistent volume claim\n  Check the Kubernetes cluster is ready As per the Prerequisites a Kubernetes cluster should have already been configured.\n  Run the following command on the master node to check the cluster and worker nodes are running:\n$ kubectl get nodes,pods -n kube-system The output will look similar to the following:\nNAME STATUS ROLES AGE VERSION node/worker-node1 Ready \u0026lt;none\u0026gt; 17h v1.28.3+3.el8 node/worker-node2 Ready \u0026lt;none\u0026gt; 17h v1.28.3+3.el8 node/master-node Ready master 23h v1.28.3+3.el8 NAME READY STATUS RESTARTS AGE pod/coredns-66bff467f8-fnhbq 1/1 Running 0 23h pod/coredns-66bff467f8-xtc8k 1/1 Running 0 23h pod/etcd-master 1/1 Running 0 21h pod/kube-apiserver-master-node 1/1 Running 0 21h pod/kube-controller-manager-master-node 1/1 Running 0 21h pod/kube-flannel-ds-amd64-lxsfw 1/1 Running 0 17h pod/kube-flannel-ds-amd64-pqrqr 1/1 Running 0 17h pod/kube-flannel-ds-amd64-wj5nh 1/1 Running 0 17h pod/kube-proxy-2kxv2 1/1 Running 0 17h pod/kube-proxy-82vvj 1/1 Running 0 17h pod/kube-proxy-nrgw9 1/1 Running 0 23h pod/kube-scheduler-master 1/1 Running 0 21h   Obtain the OIG container image The OIG Kubernetes deployment requires access to an OIG container image. The image can be obtained in the following ways:\n Prebuilt OIG container image Build your own OIG container image using WebLogic Image Tool  Prebuilt OIG container image The latest prebuilt OIG July 2024 container image can be downloaded from Oracle Container Registry. This image is prebuilt by Oracle and includes Oracle Identity Governance 12.2.1.4.0, the July Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program..\nNote: Before using this image you must login to Oracle Container Registry, navigate to Middleware \u0026gt; oig_cpu and accept the license agreement.\nYou can use this image in the following ways:\n Pull the container image from the Oracle Container Registry automatically during the OIG Kubernetes deployment. Manually pull the container image from the Oracle Container Registry and then upload it to your own container registry. Manually pull the container image from the Oracle Container Registry and manually stage it on the master node and each worker node.  Build your own OIG container image using WebLogic Image Tool You can build your own OIG container image using the WebLogic Image Tool. This is recommended if you need to apply one off patches to a Prebuilt OIG container image. For more information about building your own container image with WebLogic Image Tool, see Create or update image.\nYou can use an image built with WebLogic Image Tool in the following ways:\n Manually upload them to your own container registry. Manually stage them on the master node and each worker node.  Note: This documentation does not tell you how to pull or push the above images into a private container registry, or stage them on the master and worker nodes. Details of this can be found in the Enterprise Deployment Guide.\nSetup the code repository to deploy OIG domains Oracle Identity Governance domain deployment on Kubernetes leverages the WebLogic Kubernetes Operator infrastructure. For deploying the OIG domains, you need to set up the deployment scripts on the master node as below:\n  Create a working directory to setup the source code.\n$ mkdir \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/OIGK8S   Download the latest OIG deployment scripts from the OIG repository.\n$ cd \u0026lt;workdir\u0026gt; $ git clone https://github.com/oracle/fmw-kubernetes.git --branch release/24.4.1 For example:\n$ cd /scratch/OIGK8S $ git clone https://github.com/oracle/fmw-kubernetes.git --branch release/24.4.1   Set the $WORKDIR environment variable as follows:\n$ export WORKDIR=\u0026lt;workdir\u0026gt;/fmw-kubernetes/OracleIdentityGovernance For example:\n$ export WORKDIR=/scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance   Run the following command and see if the WebLogic custom resource definition name already exists:\n$ kubectl get crd In the output you should see:\nNo resources found in default namespace. If you see any of the following:\nNAME AGE clusters.weblogic.oracle 5d domains.weblogic.oracle 5d then run the following command to delete the existing crd\u0026rsquo;s:\n$ kubectl delete crd clusters.weblogic.oracle $ kubectl delete crd domains.weblogic.oracle   Install the WebLogic Kubernetes Operator   On the master node run the following command to create a namespace for the operator:\n$ kubectl create namespace \u0026lt;sample-kubernetes-operator-ns\u0026gt; For example:\n$ kubectl create namespace opns The output will look similar to the following:\nnamespace/opns created   Create a service account for the operator in the operator\u0026rsquo;s namespace by running the following command:\n$ kubectl create serviceaccount -n \u0026lt;sample-kubernetes-operator-ns\u0026gt; \u0026lt;sample-kubernetes-operator-sa\u0026gt; For example:\n$ kubectl create serviceaccount -n opns op-sa The output will look similar to the following:\nserviceaccount/op-sa created   Run the following helm command to install and start the operator:\n$ cd $WORKDIR $ helm install weblogic-kubernetes-operator kubernetes/charts/weblogic-operator \\ --namespace \u0026lt;sample-kubernetes-operator-ns\u0026gt; \\ --set image=ghcr.io/oracle/weblogic-kubernetes-operator:4.1.8 \\ --set serviceAccount=\u0026lt;sample-kubernetes-operator-sa\u0026gt; \\ --set “enableClusterRoleBinding=true” \\ --set \u0026#34;domainNamespaceSelectionStrategy=LabelSelector\u0026#34; \\ --set \u0026#34;domainNamespaceLabelSelector=weblogic-operator\\=enabled\u0026#34; \\ --set \u0026#34;javaLoggingLevel=FINE\u0026#34; --wait For example:\n$ cd $WORKDIR $ helm install weblogic-kubernetes-operator kubernetes/charts/weblogic-operator \\ --namespace opns \\ --set image=ghcr.io/oracle/weblogic-kubernetes-operator:4.1.8 \\ --set serviceAccount=op-sa \\ --set \u0026#34;enableClusterRoleBinding=true\u0026#34; \\ --set \u0026#34;domainNamespaceSelectionStrategy=LabelSelector\u0026#34; \\ --set \u0026#34;domainNamespaceLabelSelector=weblogic-operator\\=enabled\u0026#34; \\ --set \u0026#34;javaLoggingLevel=FINE\u0026#34; --wait The output will look similar to the following:\nNAME: weblogic-kubernetes-operator LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: opns STATUS: deployed REVISION: 1 TEST SUITE: None   Verify that the operator\u0026rsquo;s pod and services are running by executing the following command:\n$ kubectl get all -n \u0026lt;sample-kubernetes-operator-ns\u0026gt; For example:\n$ kubectl get all -n opns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE pod/weblogic-operator-b7d6df78c-vxnpt 1/1 Running 0 33s pod/weblogic-operator-webhook-7996b8b58b-68l8s 1/1 Running 0 33s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/weblogic-operator-webhook-svc ClusterIP 10.109.163.130 \u0026lt;none\u0026gt; 8083/TCP,8084/TCP 34s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/weblogic-operator 1/1 1 1 33s deployment.apps/weblogic-operator-webhook 1/1 1 1 33s NAME DESIRED CURRENT READY AGE replicaset.apps/weblogic-operator-b7d6df78c 1 1 1 33s replicaset.apps/weblogic-operator-webhook-7996b8b58b 1 1 1 33s   Verify the operator pod\u0026rsquo;s log:\n$ kubectl logs -n \u0026lt;sample-kubernetes-operator-ns\u0026gt; -c weblogic-operator deployments/weblogic-operator For example:\n$ kubectl logs -n opns -c weblogic-operator deployments/weblogic-operator The output will look similar to the following:\n{\u0026quot;timestamp\u0026quot;:\u0026quot;\u0026lt;DATE\u0026gt;\u0026quot;,\u0026quot;thread\u0026quot;:37,\u0026quot;fiber\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;namespace\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;domainUID\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;level\u0026quot;:\u0026quot;FINE\u0026quot;,\u0026quot;class\u0026quot;:\u0026quot;oracle.kubernetes.operator.DeploymentLiveness\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;run\u0026quot;,\u0026quot;timeInMillis\u0026quot;:1678902295852,\u0026quot;message\u0026quot;:\u0026quot;Liveness file last modified time set\u0026quot;,\u0026quot;exception\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;code\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;headers\u0026quot;:{},\u0026quot;body\u0026quot;:\u0026quot;\u0026quot;} {\u0026quot;timestamp\u0026quot;:\u0026quot;\u0026lt;DATE\u0026gt;\u0026quot;,\u0026quot;thread\u0026quot;:42,\u0026quot;fiber\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;namespace\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;domainUID\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;level\u0026quot;:\u0026quot;FINE\u0026quot;,\u0026quot;class\u0026quot;:\u0026quot;oracle.kubernetes.operator.DeploymentLiveness\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;run\u0026quot;,\u0026quot;timeInMillis\u0026quot;:1678902300853,\u0026quot;message\u0026quot;:\u0026quot;Liveness file last modified time set\u0026quot;,\u0026quot;exception\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;code\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;headers\u0026quot;:{},\u0026quot;body\u0026quot;:\u0026quot;\u0026quot;} {\u0026quot;timestamp\u0026quot;:\u0026quot;\u0026lt;DATE\u0026gt;\u0026quot;,\u0026quot;thread\u0026quot;:21,\u0026quot;fiber\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;namespace\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;domainUID\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;level\u0026quot;:\u0026quot;FINE\u0026quot;,\u0026quot;class\u0026quot;:\u0026quot;oracle.kubernetes.operator.DeploymentLiveness\u0026quot;,\u0026quot;method\u0026quot;:\u0026quot;run\u0026quot;,\u0026quot;timeInMillis\u0026quot;:1678902305854,\u0026quot;message\u0026quot;:\u0026quot;Liveness file last modified time set\u0026quot;,\u0026quot;exception\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;code\u0026quot;:\u0026quot;\u0026quot;,\u0026quot;headers\u0026quot;:{},\u0026quot;body\u0026quot;:\u0026quot;\u0026quot;}   Create a namespace for Oracle Identity Governance   Run the following command to create a namespace for the domain:\n$ kubectl create namespace \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl create namespace oigns The output will look similar to the following:\nnamespace/oigns created   Run the following command to tag the namespace so the WebLogic Kubernetes Operator can manage it:\n$ kubectl label namespaces \u0026lt;domain_namespace\u0026gt; weblogic-operator=enabled For example:\n$ kubectl label namespaces oigns weblogic-operator=enabled The output will look similar to the following:\nnamespace/oigns labeled   Run the following command to check the label was created:\n$ kubectl describe namespace \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe namespace oigns The output will look similar to the following:\nName: oigns Labels: kubernetes.io/metadata.name=oigns weblogic-operator=enabled Annotations: \u0026lt;none\u0026gt; Status: Active No resource quota. No LimitRange resource.   Create a Kubernetes secret for the container registry In this section you create a secret that stores the credentials for the container registry where the OIG image is stored.\nIf you are not using a container registry and have loaded the images on each of the master and worker nodes, then there is no need to create the registry secret.\n  Run the following command to create the secret:\nkubectl create secret docker-registry \u0026#34;orclcred\u0026#34; --docker-server=\u0026lt;CONTAINER_REGISTRY\u0026gt; \\ --docker-username=\u0026#34;\u0026lt;USER_NAME\u0026gt;\u0026#34; \\ --docker-password=\u0026lt;PASSWORD\u0026gt; --docker-email=\u0026lt;EMAIL_ID\u0026gt; \\ --namespace=\u0026lt;domain_namespace\u0026gt; For example, if using Oracle Container Registry:\nkubectl create secret docker-registry \u0026#34;orclcred\u0026#34; --docker-server=container-registry.oracle.com \\ --docker-username=\u0026#34;user@example.com\u0026#34; \\ --docker-password=password --docker-email=user@example.com \\ --namespace=oigns Replace \u0026lt;USER_NAME\u0026gt; and \u0026lt;PASSWORD\u0026gt; with the credentials for the registry with the following caveats:\n  If using Oracle Container Registry to pull the OIG container image, this is the username and password used to login to Oracle Container Registry. Before you can use this image you must login to Oracle Container Registry, navigate to Middleware \u0026gt; oig_cpu and accept the license agreement.\n  If using your own container registry to store the OIG container image, this is the username and password (or token) for your container registry.\n  The output will look similar to the following:\nsecret/orclcred created   Create OIG Domains Using WDT Models If you want to create an OIG domain using WDT models, ignore everything else on this page and move directly to Create OIG Domains Using WDT Models.\nCreate OIG Domains Using WLST Scripts If you want to create an OIG domain using WLST scripts, follow the rest of the instructions below.\na. RCU schema creation\nb. Creating Kubernetes secrets for the domain and RCU\nc. Create a Kubernetes persistent volume and persistent volume claim\nRCU schema creation In this section you create the RCU schemas in the Oracle Database.\nBefore following the steps in this section, make sure that the database and listener are up and running and you can connect to the database via SQL*Plus or other client tool.\n  If using Oracle Container Registry or your own container registry for your OIG container image, run the following command to create a helper pod to run RCU:\n$ kubectl run --image=\u0026lt;image_name-from-registry\u0026gt; --image-pull-policy=\u0026#34;IfNotPresent\u0026#34; --overrides=\u0026#39;{\u0026#34;apiVersion\u0026#34;: \u0026#34;v1\u0026#34;, \u0026#34;spec\u0026#34;:{\u0026#34;imagePullSecrets\u0026#34;: [{\u0026#34;name\u0026#34;: \u0026#34;orclcred\u0026#34;}]}}\u0026#39; helper -n \u0026lt;domain_namespace\u0026gt; -- sleep infinity For example:\n$ kubectl run --image=container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;July`24\u0026gt; --image-pull-policy=\u0026#34;IfNotPresent\u0026#34; --overrides=\u0026#39;{\u0026#34;apiVersion\u0026#34;: \u0026#34;v1\u0026#34;,\u0026#34;spec\u0026#34;:{\u0026#34;imagePullSecrets\u0026#34;: [{\u0026#34;name\u0026#34;: \u0026#34;orclcred\u0026#34;}]}}\u0026#39; helper -n oigns -- sleep infinity If you are not using a container registry and have loaded the image on each of the master and worker nodes, run the following command:\n$ kubectl run helper --image \u0026lt;image\u0026gt; -n oigns -- sleep infinity For example:\n$ kubectl run helper --image oracle/oig:12.2.1.4-jdk8-ol8-\u0026lt;July`24\u0026gt; -n oigns -- sleep infinity The output will look similar to the following:\npod/helper created   Run the following command to check the pod is running:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oigns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE helper 1/1 Running 0 3m Note: If you are pulling the image from a container registry it may take several minutes before the pod has a STATUS of 1\\1. While the pod is starting you can check the status of the pod, by running the following command:\n$ kubectl describe pod helper -n oigns   Run the following command to start a bash shell in the helper pod:\n$ kubectl exec -it helper -n \u0026lt;domain_namespace\u0026gt; -- /bin/bash For example:\n$ kubectl exec -it helper -n oigns -- /bin/bash This will take you into a bash shell in the running helper pod:\n[oracle@helper oracle]$   In the helper bash shell run the following commands to set the environment:\n[oracle@helper oracle]$ export DB_HOST=\u0026lt;db_host.domain\u0026gt; [oracle@helper oracle]$ export DB_PORT=\u0026lt;db_port\u0026gt; [oracle@helper oracle]$ export DB_SERVICE=\u0026lt;service_name\u0026gt; [oracle@helper oracle]$ export RCUPREFIX=\u0026lt;rcu_schema_prefix\u0026gt; [oracle@helper oracle]$ export RCU_SCHEMA_PWD=\u0026lt;rcu_schema_pwd\u0026gt; [oracle@helper oracle]$ echo -e \u0026lt;db_pwd\u0026gt;\u0026#34;\\n\u0026#34;\u0026lt;rcu_schema_pwd\u0026gt; \u0026gt; /tmp/pwd.txt [oracle@helper oracle]$ cat /tmp/pwd.txt where:\n\u0026lt;db_host.domain\u0026gt; is the database server hostname\n\u0026lt;db_port\u0026gt; is the database listener port\n\u0026lt;service_name\u0026gt; is the database service name\n\u0026lt;rcu_schema_prefix\u0026gt; is the RCU schema prefix you want to set. Note: The RCU schema prefix can only contain alpha-numeric characters, and contain no spaces, or other special characters. It must begin with a letter and be no longer than 8 characters.\n\u0026lt;rcu_schema_pwd\u0026gt; is the password you want to set for the \u0026lt;rcu_schema_prefix\u0026gt;\n\u0026lt;db_pwd\u0026gt; is the SYS password for the database\nFor example:\n[oracle@helper oracle]$ export DB_HOST=mydatabasehost.example.com [oracle@helper oracle]$ export DB_PORT=1521 [oracle@helper oracle]$ export DB_SERVICE=orcl.example.com [oracle@helper oracle]$ export RCUPREFIX=OIGK8S [oracle@helper oracle]$ export RCU_SCHEMA_PWD=\u0026lt;password\u0026gt; [oracle@helper oracle]$ echo -e \u0026lt;password\u0026gt;\u0026#34;\\n\u0026#34;\u0026lt;password\u0026gt; \u0026gt; /tmp/pwd.txt [oracle@helper oracle]$ cat /tmp/pwd.txt \u0026lt;password\u0026gt; \u0026lt;password\u0026gt;   In the helper bash shell run the following commands to create the RCU schemas in the database:\n[oracle@helper oracle]$ /u01/oracle/oracle_common/bin/rcu -silent -createRepository -databaseType ORACLE -connectString \\ $DB_HOST:$DB_PORT/$DB_SERVICE -dbUser sys -dbRole sysdba -useSamePasswordForAllSchemaUsers true \\ -selectDependentsForComponents true -schemaPrefix $RCUPREFIX -component OIM -component MDS -component SOAINFRA -component OPSS \\ -f \u0026lt; /tmp/pwd.txt The output will look similar to the following:\nRCU Logfile: /tmp/RCU\u0026lt;DATE\u0026gt;/logs/rcu.log Processing command line .... Repository Creation Utility - Checking Prerequisites Checking Global Prerequisites Repository Creation Utility - Checking Prerequisites Checking Component Prerequisites Repository Creation Utility - Creating Tablespaces Validating and Creating Tablespaces Create tablespaces in the repository database Repository Creation Utility - Create Repository Create in progress. Percent Complete: 10 Executing pre create operations Percent Complete: 25 Percent Complete: 25 Percent Complete: 26 Percent Complete: 27 Percent Complete: 28 Percent Complete: 28 Percent Complete: 29 Percent Complete: 29 Creating Common Infrastructure Services(STB) Percent Complete: 36 Percent Complete: 36 Percent Complete: 44 Percent Complete: 44 Percent Complete: 44 Creating Audit Services Append(IAU_APPEND) Percent Complete: 51 Percent Complete: 51 Percent Complete: 59 Percent Complete: 59 Percent Complete: 59 Creating Audit Services Viewer(IAU_VIEWER) Percent Complete: 66 Percent Complete: 66 Percent Complete: 67 Percent Complete: 67 Percent Complete: 68 Percent Complete: 68 Creating Metadata Services(MDS) Percent Complete: 76 Percent Complete: 76 Percent Complete: 76 Percent Complete: 77 Percent Complete: 77 Percent Complete: 78 Percent Complete: 78 Percent Complete: 78 Creating Weblogic Services(WLS) Percent Complete: 82 Percent Complete: 82 Percent Complete: 83 Percent Complete: 84 Percent Complete: 86 Percent Complete: 88 Percent Complete: 88 Percent Complete: 88 Creating User Messaging Service(UCSUMS) Percent Complete: 92 Percent Complete: 92 Percent Complete: 95 Percent Complete: 95 Percent Complete: 100 Creating Audit Services(IAU) Creating Oracle Platform Security Services(OPSS) Creating SOA Infrastructure(SOAINFRA) Creating Oracle Identity Manager(OIM) Executing post create operations Repository Creation Utility: Create - Completion Summary Database details: ----------------------------- Host Name : mydatabasehost.example.com Port : 1521 Service Name : ORCL.EXAMPLE.COM Connected As : sys Prefix for (prefixable) Schema Owners : OIGK8S RCU Logfile : /tmp/RCU\u0026lt;DATE\u0026gt;/logs/rcu.log Component schemas created: ----------------------------- Component Status Logfile Common Infrastructure Services Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/stb.log Oracle Platform Security Services Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/opss.log SOA Infrastructure Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/soainfra.log Oracle Identity Manager Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/oim.log User Messaging Service Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/ucsums.log Audit Services Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/iau.log Audit Services Append Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/iau_append.log Audit Services Viewer Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/iau_viewer.log Metadata Services Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/mds.log WebLogic Services Success /tmp/RCU\u0026lt;DATE\u0026gt;/logs/wls.log Repository Creation Utility - Create : Operation Completed [oracle@helper oracle]$   Run the following command to patch schemas in the database:\nThis command should be run if you are using an OIG image that contains OIG bundle patches. If using an OIG image without OIG bundle patches, then you can skip this step.\n [oracle@helper oracle]$ /u01/oracle/oracle_common/modules/thirdparty/org.apache.ant/1.10.5.0.0/apache-ant-1.10.5/bin/ant \\ -f /u01/oracle/idm/server/setup/deploy-files/automation.xml \\ run-patched-sql-files \\ -logger org.apache.tools.ant.NoBannerLogger \\ -logfile /u01/oracle/idm/server/bin/patch_oim_wls.log \\ -DoperationsDB.host=$DB_HOST \\ -DoperationsDB.port=$DB_PORT \\ -DoperationsDB.serviceName=$DB_SERVICE \\ -DoperationsDB.user=${RCUPREFIX}_OIM \\ -DOIM.DBPassword=$RCU_SCHEMA_PWD \\ -Dojdbc=/u01/oracle/oracle_common/modules/oracle.jdbc/ojdbc8.jar The output will look similar to the following:\nBuildfile: /u01/oracle/idm/server/setup/deploy-files/automation.xml   Verify the database was patched successfully by viewing the patch_oim_wls.log:\n[oracle@helper oracle]$ cat /u01/oracle/idm/server/bin/patch_oim_wls.log The output should look similar to below:\n... [sql] Executing resource: /u01/oracle/idm/server/db/oim/oracle/Upgrade/oim12cps4/list/oim12cps4_upg_ent_trg_bkp.sql [sql] Executing resource: /u01/oracle/idm/server/db/oim/oracle/Upgrade/oim12cps4/list/oim12cps4_upg_ent_trg_fix.sql [sql] Executing resource: /u01/oracle/idm/server/db/oim/oracle/Upgrade/oim12cps4/list/oim12cps4_upg_ent_trg_restore_bkp.sql [sql] Executing resource: /u01/oracle/idm/server/db/oim/oracle/Upgrade/oim12cps4/list/oim12cps4_ddl_alter_pwr_add_column.sql [sql] 74 of 74 SQL statements executed successfully BUILD SUCCESSFUL Total time: 6 seconds   Exit the helper bash shell by issuing the command exit.\n  Creating Kubernetes secrets for the domain and RCU   Create a Kubernetes secret for the domain using the create-weblogic-credentials script in the same Kubernetes namespace as the domain:\n$ cd $WORKDIR/kubernetes/create-weblogic-domain-credentials $ ./create-weblogic-credentials.sh -u weblogic -p \u0026lt;pwd\u0026gt; -n \u0026lt;domain_namespace\u0026gt; -d \u0026lt;domain_uid\u0026gt; -s \u0026lt;kubernetes_domain_secret\u0026gt; where:\n-u weblogic is the WebLogic username\n-p \u0026lt;pwd\u0026gt; is the password for the WebLogic user\n-n \u0026lt;domain_namespace\u0026gt; is the domain namespace\n-d \u0026lt;domain_uid\u0026gt; is the domain UID to be created. The default is domain1 if not specified\n-s \u0026lt;kubernetes_domain_secret\u0026gt; is the name you want to create for the secret for this namespace. The default is to use the domainUID if not specified\nFor example:\n$ cd $WORKDIR/kubernetes/create-weblogic-domain-credentials $ ./create-weblogic-credentials.sh -u weblogic -p \u0026lt;password\u0026gt; -n oigns -d governancedomain -s oig-domain-credentials The output will look similar to the following:\nsecret/oig-domain-credentials created secret/oig-domain-credentials labeled The secret oig-domain-credentials has been successfully created in the oigns namespace.   Verify the secret is created using the following command:\n$ kubectl get secret \u0026lt;kubernetes_domain_secret\u0026gt; -o yaml -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get secret oig-domain-credentials -o yaml -n oigns The output will look similar to the following:\n$ kubectl get secret oig-domain-credentials -o yaml -n oigns apiVersion: v1 data: password: V2VsY29tZTE= username: d2VibG9naWM= kind: Secret metadata: creationTimestamp: \u0026quot;\u0026lt;DATE\u0026gt;\u0026quot; labels: weblogic.domainName: governancedomain weblogic.domainUID: governancedomain name: oig-domain-credentials namespace: oigns resourceVersion: \u0026quot;3216738\u0026quot; uid: c2ec07e0-0135-458d-bceb-c648d2a9ac54 type: Opaque   Create a Kubernetes secret for RCU in the same Kubernetes namespace as the domain, using the create-rcu-credentials.sh script:\n$ cd $WORKDIR/kubernetes/create-rcu-credentials $ ./create-rcu-credentials.sh -u \u0026lt;rcu_prefix\u0026gt; -p \u0026lt;rcu_schema_pwd\u0026gt; -a sys -q \u0026lt;sys_db_pwd\u0026gt; -d \u0026lt;domain_uid\u0026gt; -n \u0026lt;domain_namespace\u0026gt; -s \u0026lt;kubernetes_rcu_secret\u0026gt; where:\n-u \u0026lt;rcu_prefix\u0026gt; is the name of the RCU schema prefix created previously\n-p \u0026lt;rcu_schema_pwd\u0026gt; is the password for the RCU schema prefix\n-a \u0026lt;sys_db_user\u0026gt; is the database user with sys dba privilege\n-q \u0026lt;sys_db_pwd\u0026gt; is the sys database password\n-d \u0026lt;domain_uid\u0026gt; is the domain_uid that you created earlier\n-n \u0026lt;domain_namespace\u0026gt; is the domain namespace\n-s \u0026lt;kubernetes_rcu_secret\u0026gt; is the name of the rcu secret to create\nFor example:\n$ cd $WORKDIR/kubernetes/create-rcu-credentials $ ./create-rcu-credentials.sh -u OIGK8S -p \u0026lt;password\u0026gt; -a sys -q \u0026lt;password\u0026gt; -d governancedomain -n oigns -s oig-rcu-credentials The output will look similar to the following:\nsecret/oig-rcu-credentials created secret/oig-rcu-credentials labeled The secret oig-rcu-credentials has been successfully created in the oigns namespace.   Verify the secret is created using the following command:\n$ kubectl get secret \u0026lt;kubernetes_rcu_secret\u0026gt; -o yaml -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get secret oig-rcu-credentials -o yaml -n oigns The output will look similar to the following:\napiVersion: v1 data: password: V2VsY29tZTE= sys_password: V2VsY29tZTE= sys_username: c3lz username: T0lHSzhT kind: Secret metadata: creationTimestamp: \u0026quot;\u0026lt;DATE\u0026gt;\u0026quot; labels: weblogic.domainName: governancedomain weblogic.domainUID: governancedomain name: oig-rcu-credentials namespace: oigns resourceVersion: \u0026quot;3217023\u0026quot; uid: ce70b91a-fbbc-4839-9616-4cc2c1adeb4f type: Opaque   Create a Kubernetes persistent volume and persistent volume claim As referenced in Prerequisites the nodes in the Kubernetes cluster must have access to a persistent volume such as a Network File System (NFS) mount or a shared file system.\nA persistent volume is the same as a disk mount but is inside a container. A Kubernetes persistent volume is an arbitrary name (determined in this case, by Oracle) that is mapped to a physical volume on a disk.\nWhen a container is started, it needs to mount that volume. The physical volume should be on a shared disk accessible by all the Kubernetes worker nodes because it is not known on which worker node the container will be started. In the case of Identity and Access Management, the persistent volume does not get erased when a container stops. This enables persistent configurations.\nThe example below uses an NFS mounted volume (\u0026lt;persistent_volume\u0026gt;/governancedomainpv). Other volume types can also be used. See the official Kubernetes documentation for Volumes.\nNote: The persistent volume directory needs to be accessible to both the master and worker node(s). In this example /scratch/shared/governancedomainpv is accessible from all nodes via NFS.\n  Make a backup copy of the create-pv-pvc-inputs.yaml file and create required directories:\n$ cd $WORKDIR/kubernetes/create-weblogic-domain-pv-pvc $ cp create-pv-pvc-inputs.yaml create-pv-pvc-inputs.yaml.orig $ mkdir output $ mkdir -p \u0026lt;persistent_volume\u0026gt;/governancedomainpv $ sudo chown -R 1000:0 \u0026lt;persistent_volume\u0026gt;/governancedomainpv For example:\n$ cd $WORKDIR/kubernetes/create-weblogic-domain-pv-pvc $ cp create-pv-pvc-inputs.yaml create-pv-pvc-inputs.yaml.orig $ mkdir output $ mkdir -p /scratch/shared/governancedomainpv $ sudo chown -R 1000:0 /scratch/shared/governancedomainpv   On the master node run the following command to ensure it is possible to read and write to the persistent volume:\ncd \u0026lt;persistent_volume\u0026gt;/governancedomainpv touch file.txt ls filemaster.txt For example:\ncd /scratch/shared/governancedomainpv touch filemaster.txt ls filemaster.txt On the first worker node run the following to ensure it is possible to read and write to the persistent volume:\ncd /scratch/shared/governancedomainpv ls filemaster.txt touch fileworker1.txt ls fileworker1.txt Repeat the above for any other worker nodes e.g fileworker2.txt etc. Once proven that it\u0026rsquo;s possible to read and write from each node to the persistent volume, delete the files created.\n  Navigate to $WORKDIR/kubernetes/create-weblogic-domain-pv-pvc:\n$ cd $WORKDIR/kubernetes/create-weblogic-domain-pv-pvc and edit the create-pv-pvc-inputs.yaml file and update the following parameters to reflect your settings. Save the file when complete:\nbaseName: \u0026lt;domain\u0026gt; domainUID: \u0026lt;domain_uid\u0026gt; namespace: \u0026lt;domain_namespace\u0026gt; weblogicDomainStorageType: NFS weblogicDomainStorageNFSServer: \u0026lt;nfs_server\u0026gt; weblogicDomainStoragePath: \u0026lt;physical_path_of_persistent_storage\u0026gt; weblogicDomainStorageSize: 10Gi For example:\n# The base name of the pv and pvc baseName: domain # Unique ID identifying a domain. # If left empty, the generated pv can be shared by multiple domains # This ID must not contain an underscope (\u0026quot;_\u0026quot;), and must be lowercase and unique across all domains in a Kubernetes cluster. domainUID: governancedomain # Name of the namespace for the persistent volume claim namespace: oigns # Persistent volume type for the persistent storage. # The value must be 'HOST_PATH' or 'NFS'. # If using 'NFS', weblogicDomainStorageNFSServer must be specified. weblogicDomainStorageType: NFS # The server name or ip address of the NFS server to use for the persistent storage. # The following line must be uncomment and customized if weblogicDomainStorateType is NFS: weblogicDomainStorageNFSServer: mynfsserver # Physical path of the persistent storage. # When weblogicDomainStorageType is set to HOST_PATH, this value should be set the to path to the # domain storage on the Kubernetes host. # When weblogicDomainStorageType is set to NFS, then weblogicDomainStorageNFSServer should be set # to the IP address or name of the DNS server, and this value should be set to the exported path # on that server. # Note that the path where the domain is mounted in the WebLogic containers is not affected by this # setting, that is determined when you create your domain. # The following line must be uncomment and customized: weblogicDomainStoragePath: /scratch/shared/governancedomainpv # Reclaim policy of the persistent storage # The valid values are: 'Retain', 'Delete', and 'Recycle' weblogicDomainStorageReclaimPolicy: Retain # Total storage allocated to the persistent storage. weblogicDomainStorageSize: 10Gi   Execute the create-pv-pvc.sh script to create the PV and PVC configuration files:\n$ ./create-pv-pvc.sh -i create-pv-pvc-inputs.yaml -o output The output will be similar to the following:\nInput parameters being used export version=\u0026quot;create-weblogic-sample-domain-pv-pvc-inputs-v1\u0026quot; export baseName=\u0026quot;domain\u0026quot; export domainUID=\u0026quot;governancedomain\u0026quot; export namespace=\u0026quot;oigns\u0026quot; export weblogicDomainStorageType=\u0026quot;NFS\u0026quot; export weblogicDomainStorageNFSServer=\u0026quot;mynfsserver\u0026quot; export weblogicDomainStoragePath=\u0026quot;/scratch/shared/governancedomainpv\u0026quot; export weblogicDomainStorageReclaimPolicy=\u0026quot;Retain\u0026quot; export weblogicDomainStorageSize=\u0026quot;10Gi\u0026quot; Generating output/pv-pvcs/governancedomain-domain-pv.yaml Generating output/pv-pvcs/governancedomain-domain-pvc.yaml The following files were generated: output/pv-pvcs/governancedomain-domain-pv.yaml output/pv-pvcs/governancedomain-domain-pvc.yaml Completed   Run the following to show the files are created:\n$ ls output/pv-pvcs create-pv-pvc-inputs.yaml governancedomain-domain-pv.yaml governancedomain-domain-pvc.yaml   Run the following kubectl command to create the PV and PVC in the domain namespace:\n$ kubectl create -f output/pv-pvcs/governancedomain-domain-pv.yaml -n \u0026lt;domain_namespace\u0026gt; $ kubectl create -f output/pv-pvcs/governancedomain-domain-pvc.yaml -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl create -f output/pv-pvcs/governancedomain-domain-pv.yaml -n oigns $ kubectl create -f output/pv-pvcs/governancedomain-domain-pvc.yaml -n oigns The output will look similar to the following:\npersistentvolume/governancedomain-domain-pv created persistentvolumeclaim/governancedomain-domain-pvc created   Run the following commands to verify the PV and PVC were created successfully:\n$ kubectl describe pv \u0026lt;pv_name\u0026gt; $ kubectl describe pvc \u0026lt;pvc_name\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe pv governancedomain-domain-pv $ kubectl describe pvc governancedomain-domain-pvc -n oigns The output will look similar to the following:\n$ kubectl describe pv governancedomain-domain-pv Name: governancedomain-domain-pv Labels: weblogic.domainUID=governancedomain Annotations: pv.kubernetes.io/bound-by-controller: yes Finalizers: [kubernetes.io/pv-protection] StorageClass: governancedomain-domain-storage-class Status: Bound Claim: oigns/governancedomain-domain-pvc Reclaim Policy: Retain Access Modes: RWX VolumeMode: Filesystem Capacity: 10Gi Node Affinity: \u0026lt;none\u0026gt; Message: Source: Type: NFS (an NFS mount that lasts the lifetime of a pod) Server: mynfsserver Path: /scratch/shared/governancedomainpv ReadOnly: false Events: \u0026lt;none\u0026gt; $ kubectl describe pvc governancedomain-domain-pvc -n oigns Name: governancedomain-domain-pvc Namespace: oigns StorageClass: governancedomain-domain-storage-class Status: Bound Volume: governancedomain-domain-pv Labels: weblogic.domainUID=governancedomain Annotations: pv.kubernetes.io/bind-completed: yes pv.kubernetes.io/bound-by-controller: yes Finalizers: [kubernetes.io/pvc-protection] Capacity: 10Gi Access Modes: RWX VolumeMode: Filesystem Mounted By: \u0026lt;none\u0026gt; Events: \u0026lt;none\u0026gt; You are now ready to create the OIG domain as per Create OIG Domains\n  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/ohs/prepare-your-environment/",
	"title": "Prepare your environment",
	"tags": [],
	"description": "Prepare your environment for OHS on Kubernetes.",
	"content": "To prepare for Oracle HTTP Server (OHS) deployment in a Kubernetes environment, complete the following steps:\n Check the Kubernetes cluster is ready Obtain the OHS container image Set up the code repository to deploy OHS Prepare your OHS configuration files Create configmaps for the OHS configuration files Create a namespace for OHS Create a Kubernetes secret for the container registry Prepare the ohs.yaml file  Check the Kubernetes cluster is ready As per the Prerequisites a Kubernetes cluster should have already been configured.\nCheck that all the nodes in the Kubernetes cluster are running.\n  Run the following command on the master node to check the cluster and worker nodes are running:\n$ kubectl get nodes,pods -n kube-system The output will look similar to the following:\n NAME STATUS ROLES AGE VERSION node/worker-node1 Ready \u0026lt;none\u0026gt; 17h v1.28.3+3.el8 node/worker-node2 Ready \u0026lt;none\u0026gt; 17h v1.28.3+3.el8 node/master-node Ready control-plane,master 23h v1.28.3+3.el8 NAME READY STATUS RESTARTS AGE pod/coredns-66bff467f8-fnhbq 1/1 Running 0 23h pod/coredns-66bff467f8-xtc8k 1/1 Running 0 23h pod/etcd-master 1/1 Running 0 21h pod/kube-apiserver-master-node 1/1 Running 0 21h pod/kube-controller-manager-master-node 1/1 Running 0 21h pod/kube-flannel-ds-amd64-lxsfw 1/1 Running 0 17h pod/kube-flannel-ds-amd64-pqrqr 1/1 Running 0 17h pod/kube-flannel-ds-amd64-wj5nh 1/1 Running 0 17h pod/kube-proxy-2kxv2 1/1 Running 0 17h pod/kube-proxy-82vvj 1/1 Running 0 17h pod/kube-proxy-nrgw9 1/1 Running 0 23h pod/kube-scheduler-master 1/1 Running 0 21h   Obtain the OHS container image The OHS Kubernetes deployment requires access to an OHS container image. The image can be obtained in the following ways:\n Prebuilt OHS container image Build your own OHS container image using WebLogic Image Tool  Prebuilt OHS container image The prebuilt OHS October 2024 container image can be downloaded from Oracle Container Registry. This image is prebuilt by Oracle and includes Oracle HTTP Server 12.2.1.4.0, the October 2024 Patch Set Update (PSU) and other fixes released with the Critical Patch Update (CPU) program.\nNote: Before using this image you must login to Oracle Container Registry, navigate to Middleware \u0026gt; ohs_cpu and accept the license agreement.\nYou can use this image in the following ways:\n Pull the container image from the Oracle Container Registry automatically during the OHS Kubernetes deployment. Manually pull the container image from the Oracle Container Registry and then upload it to your own container registry. Manually pull the container image from the Oracle Container Registry and manually stage it on each worker node.  Build your own OHS container image using WebLogic Image Tool You can build your own OHS container image using the WebLogic Image Tool. This is recommended if you need to apply one off patches to a Prebuilt OHS container image. For more information about building your own container image with WebLogic Image Tool, see Create or update image.\nYou can use an image built with WebLogic Image Tool in the following ways:\n Manually upload them to your own container registry. Manually stage them on each worker node.  Note: This documentation does not tell you how to pull or push the above images into a private container registry, or stage them on worker nodes. Details of this can be found in the Enterprise Deployment Guide.\nIn all the sections below, the commands are run from a server that has access to the Kubernetes cluster.\nSet up the code repository to deploy OHS To deploy OHS you need to set up the code repository which provides sample deployment yaml files:\n  Create a directory to setup the source code.\n$ mkdir \u0026lt;ohsscripts\u0026gt; For example:\n$ mkdir -p /OHSK8S/OHSscripts   Download the latest OHS deployment scripts from the OHS repository.\n$ cd \u0026lt;ohsscripts\u0026gt; $ git clone https://github.com/oracle/fmw-kubernetes.git --branch release/24.4.1 For example:\n$ cd /OHSK8S/OHSscripts $ git clone https://github.com/oracle/fmw-kubernetes.git --branch release/24.4.1   Set the $SCRIPTDIR environment variable as follows:\n$ export SCRIPTDIR=\u0026lt;ohsscripts\u0026gt;/fmw-kubernetes/OracleHTTPServer/kubernetes For example:\n$ export SCRIPTDIR=/OHSK8S/OHSscripts/fmw-kubernetes/OracleHTTPServer/kubernetes   Prepare your OHS configuration files Before you deploy OHS, you must prepare your OHS configuration files.\nThe steps below assume familiarity with on premises Oracle HTTP Server in terms of general configuration and use of Oracle WebGate.\nNote: Administrators should be aware of the following:\n If you do not specify configuration files beforehand, then the OHS container is deployed with a default configuration of Oracle HTTP Server. The directories listed below are optional. For example, if you do not want to deploy WebGate then you do not need to create the webgateConf and webgateWallet directories. Similarly, if you do not want to copy files to htdocs then you do not need to create the htdocs directory.    Make a directory to store your OHS configuration files:\nmkdir -p \u0026lt;myohsfiles\u0026gt; For example:\nmkdir -p /OHSK8S/myOHSfiles   Set the $MYOHSFILES environment variable as follows:\n$ export MYOHSFILES=\u0026lt;myohsfiles\u0026gt; For example:\n$ export MYOHSFILES=/OHSK8S/myOHSfiles   Create the following directories for your OHS configuration:\nmkdir -p $MYOHSFILES/ohsConfig/httpconf mkdir -p $MYOHSFILES/ohsConfig/moduleconf mkdir -p $MYOHSFILES/ohsConfig/htdocs mkdir -p $MYOHSFILES/ohsConfig/htdocs/myapp mkdir -p $MYOHSFILES/ohsConfig/webgate/config/wallet mkdir -p $MYOHSFILES/ohsConfig/wallet/mywallet Where:\n httpconf - contains any configuration files you want to configure that are usually found in the $OHS_DOMAIN_HOME/config/fmwconfig/components/OHS/ohs1 directory. For example httpd.conf, ssl.conf and mod_wl_ohs.conf. The webgate.conf does not need to be copied as this will get generated automatically if deploying with WebGate. moduleconf - contains any additional config files, for example virtual host configuration files that you want to copy to the $OHS_DOMAIN_HOME/config/fmwconfig/components/OHS/ohs1/moduleconf folder in the container. htdocs - contains any html files, or similar, that you want to copy to the $OHS_DOMAIN_HOME/config/fmwconfig/components/OHS/ohs1/htdocs folder in the container. htdocs/myapp - myapp is an example directory name that exists under htdocs. If you need to copy any directories under htdocs above, then create the directories you require. webgate/config - contains the extracted WebGate configuration. For example, when you download the \u0026lt;agent\u0026gt;.zip file from Oracle Access Management Console, you extract the zip file into this directory. If you are accessing OAM URL\u0026rsquo;s via SSL, this directory must also contain the Certificate Authority cacert.pem file that signed the certificate of the OAM entry point. For example, if you will access OAM via a HTTPS Load Balancer URL, then cacert.pem is the CA certificate that signed the load balancer certificate. webgate/config/wallet - contains the contents of the wallet directory extracted from the \u0026lt;agent.zip\u0026gt; file. wallet/mywallet - If OHS is to be configured to use SSL, this directory contains the preconfigured OHS Wallet file cwallet.sso.  Note: Administrators should be aware of the following if configuring OHS for SSL:\n The wallet must contain a valid certificate. Only auto-login-only wallets (cwallet.sso only) are supported. For example, wallets created with orapki using the -auto-login-only option. Password protected wallets (ewallet.p12) are not supported. You must configure ssl.conf in $WORKDIR/ohsConfig/httpconf and set the directory for SSLWallet to: SSLWallet \u0026quot;${ORACLE_INSTANCE}/config/fmwconfig/components/${COMPONENT_TYPE}/instances/${COMPONENT_NAME}/keystores/wallet/mywallet\u0026quot;.  An example file system may contain the following:\nls -R $MYOHSFILES/ohsConfig /OHSK8S/myOHSfiles/ohsConfig: htdocs httpconf moduleconf wallet webgate /OHSK8S/myOHSfiles/ohsConfig/htdocs: myapp mypage.html /OHSK8S/myOHSfiles/ohsConfig/htdocs/myapp: index.html /OHSK8S/myOHSfiles/ohsConfig/httpconf: httpd.conf mod_wl_ohs.conf ssl.conf /OHSK8S/myOHSfiles/ohsConfig/moduleconf: vh.conf /OHSK8S/myOHSfiles/ohsConfig/wallet: mywallet /OHSK8S/myOHSfiles/ohsConfig/wallet/mywallet: cwallet.sso /OHSK8S/myOHSfiles/ohsConfig/webgate: config /OHSK8S/myOHSfiles/ohsConfig/webgate/config: cacert.pem cwallet.sso cwallet.sso.lck ObAccessClient.xml wallet /OHSK8S/myOHSfiles/ohsConfig/webgate/config/wallet: cwallet.sso cwallet.sso.lck   Set WLDNSRefreshInterval and WebLogicCluster directives If your OHS deployment is configured to communicate with Oracle WebLogic Server, then you must set the WLDNSRefreshInterval and WebLogicCluster directives in your OHS configuration files appropriately.\nIn the file where your WLS location directives reside, you must set the following:\n\u0026lt;IfModule weblogic_module\u0026gt; WLDNSRefreshInterval 10 \u0026lt;/IfModule\u0026gt; For WebLogicCluster, the values to set depend on whether the WLS is deployed on-premises, on the same Kubernetes cluster as OHS, or on a different Kubernetes cluster to OHS. The following sections explain how to set the values in each case.\nOn-premises configuration If OHS is connecting to a WebLogic Server deployed in an on-premises configuration (non-Kubernetes), then set:\nWebLogicCluster \u0026lt;APPHOST1\u0026gt;:\u0026lt;PORT\u0026gt;,\u0026lt;APPHOST2\u0026gt;:\u0026lt;PORT\u0026gt; For example, if you were connecting to the WebLogic Server Administration Server port:\n \u0026lt;Location /console\u0026gt; WLSRequest ON DynamicServerList OFF WLProxySSL ON WLProxySSLPassThrough ON WLCookieName OAMJSESSIONID WebLogicCluster APPHOST1.example.com:7001,APPHOST2.example.com:7001 \u0026lt;/Location\u0026gt; Oracle HTTP Server on a shared Kubernetes Cluster If OHS is connecting to a WebLogic Server deployed on the same Kubernetes cluster, then set the following depending on your environment:\nWebLogicHost \u0026lt;service_name\u0026gt;.\u0026lt;namespace\u0026gt;.svc.cluster.local WebLogicPort \u0026lt;port\u0026gt; or:\nWebLogicCluster \u0026lt;service_name\u0026gt;.\u0026lt;namespace\u0026gt;.svc.cluster.local:\u0026lt;port\u0026gt; Note: You can get the \u0026lt;service_name\u0026gt; and \u0026lt;port\u0026gt; by running kubectl get svc -n \u0026lt;namespace\u0026gt; on your Kubernetes cluster.\nThe following shows an example when connecting to an Oracle Access Management (OAM) Administration Server cluster service and port:\n\u0026lt;Location /console\u0026gt; WLSRequest ON DynamicServerList OFF WLProxySSL ON WLProxySSLPassThrough ON WLCookieName OAMJSESSIONID WebLogicHost accessdomain-adminserver.oamns.svc.cluster.local WebLogicPort 7001 \u0026lt;/Location\u0026gt; The following shows an example when connecting to an Oracle Access Management (OAM) Managed Server cluster service and port:\n\u0026lt;Location /oam\u0026gt; WLSRequest ON DynamicServerList OFF WLProxySSL ON WLProxySSLPassThrough ON WLCookieName OAMJSESSIONID WebLogicCluster accessdomain-cluster-oam-cluster.oamns.svc.cluster.local:14100 Oracle HTTP Server on an independent Kubernetes Cluster If OHS is connecting to a WebLogic Server deployed on a separate Kubernetes cluster, then set:\nWebLogicCluster \u0026lt;K8S_WORKER_HOST1\u0026gt;:30777,\u0026lt;K8S_WORKER_HOST2\u0026gt;:30777,\u0026lt;K8S_WORKER_HOST3\u0026gt;:30777 Where \u0026lt;K8S_WORKER_HOSTX\u0026gt; is your Kubernetes worker node hostname.domain, and 30777 is the HTTP port of the ingress controller.\nFor example:\n \u0026lt;Location /console\u0026gt; WLSRequest ON DynamicServerList OFF WLProxySSL ON WLProxySSLPassThrough ON WLCookieName OAMJSESSIONID WebLogicCluster K8_WORKER_HOST1.example.com:30777,K8_WORKER_HOST2.example.com:30777,K8_WORKER_HOST3.example.com:30777 \u0026lt;/Location\u0026gt; Create a namespace for OHS Run the following command to create a namespace for the OHS:\n$ kubectl create namespace \u0026lt;namespace\u0026gt; For example:\n$ kubectl create namespace ohsns The output will look similar to the following:\nnamespace/ohsns created Create configmaps for the OHS configuration files Note: Before following this section, make sure you have created the directories and files as per Prepare your OHS configuration files.\n  Run the following commands to create the required configmaps for the OHS directories and files created in Prepare your OHS configuration files.\ncd $MYOHSFILES kubectl create cm -n ohsns ohs-config --from-file=ohsConfig/moduleconf kubectl create cm -n ohsns ohs-httpd --from-file=ohsConfig/httpconf kubectl create cm -n ohsns ohs-htdocs --from-file=ohsConfig/htdocs kubectl create cm -n ohsns ohs-myapp --from-file=ohsConfig/htdocs/myapp kubectl create cm -n ohsns webgate-config --from-file=ohsConfig/webgate/config kubectl create cm -n ohsns webgate-wallet --from-file=ohsConfig/webgate/config/wallet kubectl create cm -n ohsns ohs-wallet --from-file=ohsConfig/wallet/mywallet Note: Only create the configmaps for directories that you want to copy to OHS.\n  Create a Kubernetes secret for the container registry In this section you create a secret that stores the credentials for the container registry where the OHS image is stored.\nIf you are not using a container registry and have loaded the images on each of the worker nodes, then there is no need to create the registry secret.\n  Run the following command to create the secret:\n$ kubectl create secret docker-registry \u0026quot;regcred\u0026quot; --docker-server=\u0026lt;CONTAINER_REGISTRY\u0026gt; \\ --docker-username=\u0026quot;\u0026lt;USER_NAME\u0026gt;\u0026quot; \\ --docker-password=\u0026lt;PASSWORD\u0026gt; --docker-email=\u0026lt;EMAIL_ID\u0026gt; \\ --namespace=\u0026lt;domain_namespace\u0026gt; For example, if using Oracle Container Registry:\n$ kubectl create secret docker-registry \u0026quot;regcred\u0026quot; --docker-server=container-registry.oracle.com \\ --docker-username=\u0026quot;user@example.com\u0026quot; \\ --docker-password=password --docker-email=user@example.com \\ --namespace=ohsns Replace \u0026lt;USER_NAME\u0026gt; and \u0026lt;PASSWORD\u0026gt; with the credentials for the registry with the following caveats:\nIf using Oracle Container Registry to pull the OHS container image, this is the username and password used to login to Oracle Container Registry. Before you can use this image you must login to Oracle Container Registry , navigate to Middleware \u0026gt; ohs_cpu and accept the license agreement.\nIf using your own container registry to store the OHS container image, this is the username and password (or token) for your container registry.\nThe output will look similar to the following:\nsecret/regcred created   Create a Kubernetes secret for the OHS domain credentials In this section you create a secret that stores the credentials for the OHS domain.\n  Run the following command to create the secret:\n$ kubectl create secret generic ohs-secret -n \u0026lt;namespace\u0026gt; --from-literal=username=weblogic --from-literal=password='\u0026lt;password\u0026gt;' For example:\n$ kubectl create secret generic ohs-secret -n ohsns --from-literal=username=weblogic --from-literal=password='\u0026lt;password\u0026gt;` Replace \u0026lt;password\u0026gt; with a password of your choice.\nThe output will look similar to the following:\nsecret/ohs-secret created   Prepare the ohs.yaml file In this section you prepare the ohs.yaml file ready for OHS deployment.\n  Copy of the sample yaml files to $MYOHSFILES:\n$ cd $MYOHSFILES $ cp $SCRIPTDIR/*.yaml .   Edit the $MYOHSFILES/ohs.yaml and change the following parameters to match your installation:\nNote:\n \u0026lt;NAMESPACE\u0026gt;  to your namespace, for example ohsns. \u0026lt;IMAGE_NAME\u0026gt; to the correct image tag on Oracle Container Registry. If you are using your own container registry for the image, you will need to change the image location appropriately. If your own container registry is open, you do not need the imagePullSecrets. During the earlier creation of the configmaps, and secret, if you changed the names from the given examples, then you will need to update the values accordingly. All configMaps are shown for completeness. Remove any configMaps that you are not using, for example if you don\u0026rsquo;t require htdocs then remove the ohs-htdocs configMap. If you are not deploying webgate then remove the webgate-config and webgate-wallet configMaps, and so forth. If you have created any additional directories under htdocs, then add the additional entries in that match the configmap and directory names. All configMaps used must mount to the directories stated. Ports can be changed if required. Set DEPLOY_WG to true or false depending on whether webgate is to be deployed. If using SSL change \u0026lt;WALLET_NAME\u0026gt; to the wallet directory created under ohsConfig/webgate/config/wallet, for example mywallet. initialDelaySeconds may need to be changed to 10 on slower systems. See, Issues with LivenessProbe.    Click here to see an example ohs.yaml:   apiVersion: v1 kind: ConfigMap metadata: name: ohs-script-configmap namespace: ohsns data: ohs-script.sh: | #!/bin/bash mkdir -p /u01/oracle/bootdir /u01/oracle/config /u01/oracle/config/moduleconf /u01/oracle/config/webgate/config { echo -en \u0026quot;username=\u0026quot; \u0026amp;\u0026amp; cat /ohs-config/username \u0026amp;\u0026amp; echo -en \u0026quot;\\npassword=\u0026quot; \u0026amp;\u0026amp; cat /ohs-config/password; } \u0026gt; /u01/oracle/bootdir/domain.properties /u01/oracle/provisionOHS.sh --- apiVersion: apps/v1 kind: Deployment metadata: name: ohs-domain namespace: ohsns spec: progressDeadlineSeconds: 600 replicas: 1 selector: matchLabels: oracle: ohs template: metadata: labels: oracle: ohs spec: containers: - name: ohs image: image: container-registry.oracle.com/middleware/ohs_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October'24\u0026gt; env: - name: DEPLOY_WG value: \u0026quot;true\u0026quot; ports: - name: clear containerPort: 7777 - name: https containerPort: 4443 resources: requests: cpu: 1000m memory: 1Gi securityContext: allowPrivilegeEscalation: false capabilities: drop: - ALL privileged: false runAsNonRoot: true runAsUser: 1000 livenessProbe: exec: command: - /bin/bash - -c - pgrep httpd initialDelaySeconds: 10 periodSeconds: 5 readinessProbe: httpGet: port: 7777 path: /helloWorld.html volumeMounts: - name: ohs-secret mountPath: /ohs-config - name: ohs-config mountPath: /u01/oracle/config/moduleconf - name: ohs-htdocs mountPath: /u01/oracle/config/htdocs - name: ohs-myapp mountPath: /u01/oracle/config/htdocs/myapp - name: ohs-httpd mountPath: /u01/oracle/config/httpd - name: webgate-config mountPath: /u01/oracle/config/webgate/config - name: webgate-wallet mountPath: /u01/oracle/config/webgate/config/wallet - name: ohs-wallet mountPath: /u01/oracle/config/wallet/mywallet - name: script-volume mountPath: /ohs-bin readOnly: true command: [\u0026quot;/ohs-bin/ohs-script.sh\u0026quot;] imagePullSecrets: - name: regcred\taffinity: podAntiAffinity: preferredDuringSchedulingIgnoredDuringExecution: - weight: 100 podAffinityTerm: labelSelector: matchExpressions: - key: oracle operator: In values: - ohs topologyKey: \u0026quot;kubernetes.io/hostname\u0026quot; restartPolicy: Always securityContext: seccompProfile: type: RuntimeDefault terminationGracePeriodSeconds: 30 volumes: - name: ohs-secret secret: defaultMode: 0444 secretName: ohs-secret - name: script-volume configMap: defaultMode: 0555 name: ohs-script-configmap - name: ohs-config configMap: defaultMode: 0555 name: ohs-config - name: ohs-httpd configMap: defaultMode: 0555 name: ohs-httpd - name: ohs-htdocs configMap: defaultMode: 0555 name: ohs-htdocs - name: ohs-myapp configMap: defaultMode: 0555 name: ohs-myapp - name: webgate-config configMap: defaultMode: 0555 name: webgate-config - name: webgate-wallet configMap: defaultMode: 0555 name: webgate-wallet - name: ohs-wallet configMap: defaultMode: 0555 name: ohs-wallet strategy: type: RollingUpdate rollingUpdate: maxUnavailable: 1      Next Steps You are now ready to create the OHS container, see Create the OHS Container and Nodeport.\n"
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/create-oam-domains/",
	"title": "Create OAM domains",
	"tags": [],
	"description": "Create OAM domains on Kubernetes",
	"content": "Choose one of the following supported methods to create an OAM domain:\na. Create OAM domains Using WLST Offline Scripts\nb. Create OAM domains Using WDT Models\n"
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/create-oig-domains/",
	"title": "Create OIG domains",
	"tags": [],
	"description": "Create OIG domains on Kubernetes",
	"content": "Choose one of the following supported methods to create an OIG domain:\na. Create OIG domains Using WLST Offline Scripts\nb. Create OIG domains Using WDT Models\n"
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oud/create-oud-instances/",
	"title": "Create Oracle Unified Directory Instances",
	"tags": [],
	"description": "This document provides details of the oud-ds-rs Helm chart.",
	"content": " Introduction Create a Kubernetes namespace Create a Kubernetes secret for the container registry Create a Kubernetes secret for cronjob images The oud-ds-rs Helm chart Create OUD instances Enabling Assured Replication (Optional) Helm command output Verify the OUD deployment Verify the OUD replication Verify the cronjob Undeploy an OUD deployment Appendix A: Configuration parameters Appendix B: Environment Variables  Introduction This chapter demonstrates how to deploy Oracle Unified Directory (OUD) 12c instance(s) and replicated instances using the Helm package manager for Kubernetes.\nThe helm chart can be used to deploy an Oracle Unified Directory instance as a base, with configured sample entries, and multiple replicated Oracle Unified Directory instances/pods/services based on the specified replicaCount.\nBased on the configuration, this chart deploys the following objects in the specified namespace of a Kubernetes cluster.\n Service Account Secret Persistent Volume and Persistent Volume Claim Pod(s)/Container(s) for Oracle Unified Directory Instances Services for interfaces exposed through Oracle Unified Directory Instances Ingress configuration  Note: From July 22 (22.3.1) onwards OUD deployment is performed using StatefulSets.\nCreate a Kubernetes namespace Create a Kubernetes namespace for the OUD deployment by running the following command:\n$ kubectl create namespace \u0026lt;namespace\u0026gt; For example:\n$ kubectl create namespace oudns The output will look similar to the following:\nnamespace/oudns created Create a Kubernetes secret for the container registry Create a Kubernetes secret to stores the credentials for the container registry where the OUD image is stored. This step must be followed if using Oracle Container Registry or your own private container registry. If you are not using a container registry and have loaded the images on each of the master and worker nodes, you can skip this step.\n  Run the following command to create the secret:\nkubectl create secret docker-registry \u0026#34;orclcred\u0026#34; --docker-server=\u0026lt;CONTAINER_REGISTRY\u0026gt; \\ --docker-username=\u0026#34;\u0026lt;USER_NAME\u0026gt;\u0026#34; \\ --docker-password=\u0026lt;PASSWORD\u0026gt; --docker-email=\u0026lt;EMAIL_ID\u0026gt; \\ --namespace=\u0026lt;domain_namespace\u0026gt; For example, if using Oracle Container Registry:\n$ kubectl create secret docker-registry \u0026#34;orclcred\u0026#34; --docker-server=container-registry.oracle.com \\ --docker-username=\u0026#34;user@example.com\u0026#34; \\ --docker-password=password --docker-email=user@example.com \\ --namespace=oudns Replace \u0026lt;USER_NAME\u0026gt; and \u0026lt;PASSWORD\u0026gt; with the credentials for the registry with the following caveats:\n  If using Oracle Container Registry to pull the OUD container image, this is the username and password used to login to Oracle Container Registry. Before you can use this image you must login to Oracle Container Registry, navigate to Middleware \u0026gt; oud_cpu and accept the license agreement.\n  If using your own container registry to store the OUD container image, this is the username and password (or token) for your container registry.\n  The output will look similar to the following:\nsecret/orclcred created   Create a Kubernetes secret for cronjob images Once OUD is deployed, if the Kubernetes node where the OUD pod(s) is/are running goes down after the pod eviction time-out, the pod(s) don\u0026rsquo;t get evicted but move to a Terminating state. The pod(s) will then remain in that state forever. To avoid this problem a cron-job is created during OUD deployment that checks for any pods in Terminating state. If there are any pods in Terminating state, the cron job will delete them. The pods will then start again automatically. This cron job requires access to images on hub.docker.com. A Kubernetes secret must therefore be created to enable access to these images.\n  Create a Kubernetes secret to access the required images on hub.docker.com:\nNote: You must first have a user account on hub.docker.com:\n$ kubectl create secret docker-registry \u0026#34;dockercred\u0026#34; --docker-server=\u0026#34;https://index.docker.io/v1/\u0026#34; --docker-username=\u0026#34;\u0026lt;docker_username\u0026gt;\u0026#34; --docker-password=\u0026lt;password\u0026gt; --docker-email=\u0026lt;docker_email_credentials\u0026gt; --namespace=\u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl create secret docker-registry \u0026quot;dockercred\u0026quot; --docker-server=\u0026quot;https://index.docker.io/v1/\u0026quot; --docker-username=\u0026quot;username\u0026quot; --docker-password=\u0026lt;password\u0026gt; --docker-email=user@example.com --namespace=oudns The output will look similar to the following:\nsecret/dockercred created   The oud-ds-rs Helm chart The oud-ds-rs Helm chart allows you to create or deploy a group of replicated Oracle Unified Directory instances along with Kubernetes objects in a specified namespace.\nThe deployment can be initiated by running the following Helm command with reference to the oud-ds-rs Helm chart, along with configuration parameters according to your environment.\n$ cd $WORKDIR/kubernetes/helm $ helm install --namespace \u0026lt;namespace\u0026gt; \\ \u0026lt;Configuration Parameters\u0026gt; \\ \u0026lt;deployment/release name\u0026gt; \\ \u0026lt;Helm Chart Path/Name\u0026gt; Configuration Parameters (override values in chart) can be passed on with --set arguments on the command line and/or with -f / --values arguments when referring to files.\nNote: The examples in Create OUD instances below provide values which allow the user to override the default values provided by the Helm chart. A full list of configuration parameters and their default values is shown in Appendix A: Configuration parameters.\nFor more details about the helm command and parameters, please execute helm --help and helm install --help.\nCreate OUD instances You can create OUD instances using one of the following methods:\n Using a YAML file Using --set argument  Note: While it is possible to install sample data during the OID deployment is it not possible to load your own data via an ldif file . In order to load data in OUD, create the OUD deployment and then use ldapmodify post the ingress deployment. See Using LDAP utilities.\nUsing a YAML file   Navigate to the $WORKDIR/kubernetes/helm directory:\n$ cd $WORKDIR/kubernetes/helm   Create an oud-ds-rs-values-override.yaml as follows:\nimage: repository: \u0026lt;image_location\u0026gt; tag: \u0026lt;image_tag\u0026gt; pullPolicy: IfNotPresent imagePullSecrets: - name: orclcred oudConfig: # memory, cpu parameters for both requests and limits for oud instances resources: limits: cpu: \u0026#34;1\u0026#34; memory: \u0026#34;4Gi\u0026#34; requests: cpu: \u0026#34;500m\u0026#34; memory: \u0026#34;4Gi\u0026#34; rootUserPassword: \u0026lt;password\u0026gt; sampleData: \u0026#34;200\u0026#34; persistence: type: filesystem filesystem: hostPath: path: \u0026lt;persistent_volume\u0026gt;/oud_user_projects cronJob: kubectlImage: repository: bitnami/kubectl tag: \u0026lt;version\u0026gt; pullPolicy: IfNotPresent imagePullSecrets: - name: dockercred For example:\nimage: repository: container-registry.oracle.com/middleware/oud_cpu tag: 12.2.1.4-jdk8-ol8-\u0026lt;October\u0026#39;24\u0026gt; pullPolicy: IfNotPresent imagePullSecrets: - name: orclcred oudConfig: # memory, cpu parameters for both requests and limits for oud instances resources: limits: cpu: \u0026#34;1\u0026#34; memory: \u0026#34;8Gi\u0026#34; requests: cpu: \u0026#34;500m\u0026#34; memory: \u0026#34;4Gi\u0026#34; rootUserPassword: \u0026lt;password\u0026gt; sampleData: \u0026#34;200\u0026#34; persistence: type: filesystem filesystem: hostPath: path: /scratch/shared/oud_user_projects cronJob: kubectlImage: repository: bitnami/kubectl tag: 1.28.3 pullPolicy: IfNotPresent imagePullSecrets: - name: dockercred The following caveats exist:\n  Replace \u0026lt;password\u0026gt; with the relevant password.\n  sampleData: \u0026quot;200\u0026quot; will load 200 sample users into the default baseDN dc=example,dc=com. If you do not want sample data, remove this entry. If sampleData is set to 1,000,000 users or greater, then you must add the following entries to the yaml file to prevent inconsistencies in dsreplication:\ndeploymentConfig: startupTime: 720 period: 120 timeout: 60   The \u0026lt;version\u0026gt; in kubectlImage tag: should be set to the same version as your Kubernetes version (kubectl version). For example if your Kubernetes version is 1.28.3 set to 1.28.3.\n  If you are not using Oracle Container Registry or your own container registry for your OUD container image, then you can remove the following:\nimagePullSecrets: - name: orclcred   If your cluster does not have access to the internet to pull external images, such as bitnami/kubectl or busybox, you must load the images in a local container registry. You must then set the following:\ncronJob: kubectlImage: repository: container-registry.example.com/bitnami/kubectl tag: 1.28.3 pullPolicy: IfNotPresent busybox: image: container-registry.example.com/busybox   If using NFS for your persistent volume then change the persistence section as follows:\nNote: If you want to use NFS you should ensure that you have a default Kubernetes storage class defined for your environment that allows network storage.\nFor more information on storage classes, see Storage Classes.\npersistence: type: networkstorage networkstorage: nfs: path: \u0026lt;persistent_volume\u0026gt;/oud_user_projects server: \u0026lt;NFS IP address\u0026gt; # if true, it will create the storageclass. if value is false, please provide existing storage class (storageClass) to be used. storageClassCreate: true storageClass: oud-sc # if storageClassCreate is true, please provide the custom provisioner if any to use. If you do not have a custom provisioner, delete this line, and it will use the default class kubernetes.io/is-default-class. provisioner: kubernetes.io/is-default-class The following caveats exist:\n If you want to create your own storage class, set storageClassCreate: true. If storageClassCreate: true it is recommended to set storageClass to a value of your choice, and provisioner to the provisioner supported by your cloud vendor. If you have an existing storageClass that supports network storage, set storageClassCreate: false and storageClass to the NAME value returned in \u0026ldquo;kubectl get storageclass\u0026rdquo;. The provisioner can be ignored.    If using Block Device storage for your persistent volume then change the persistence section as follows:\nNote: If you want to use block devices you should ensure that you have a default Kubernetes storage class defined for your environment that allows dynamic storage. Each vendor has its own storage provider but it may not be configured to provide dynamic storage allocation.\nFor more information on storage classes, see Storage Classes.\npersistence: type: blockstorage # Specify Accessmode ReadWriteMany for NFS and for block ReadWriteOnce accessMode: ReadWriteOnce # if true, it will create the storageclass. if value is false, please provide existing storage class (storageClass) to be used. storageClassCreate: true storageClass: oud-sc # if storageClassCreate is true, please provide the custom provisioner if any to use or else it will use default. provisioner: oracle.com/oci The following caveats exist:\n If you want to create your own storage class, set storageClassCreate: true. If storageClassCreate: true it is recommended to set storageClass to a value of your choice, and provisioner to the provisioner supported by your cloud vendor. If you have an existing storageClass that supports dynamic storage, set storageClassCreate: false and storageClass to the NAME value returned in \u0026ldquo;kubectl get storageclass\u0026rdquo;. The provisioner can be ignored.    For resources, limits and requests, the example CPU and memory values shown are for development environments only. For Enterprise Deployments, please review the performance recommendations and sizing requirements in Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster.\nNote: Limits and requests for CPU resources are measured in CPU units. One CPU in Kubernetes is equivalent to 1 vCPU/Core for cloud providers, and 1 hyperthread on bare-metal Intel processors. An \u0026ldquo;m\u0026rdquo; suffix in a CPU attribute indicates ‘milli-CPU’, so 500m is 50% of a CPU. Memory can be expressed in various units, where one Mi is one IEC unit mega-byte (1024^2), and one Gi is one IEC unit giga-byte (1024^3). For more information, see Resource Management for Pods and Containers, Assign Memory Resources to Containers and Pods, and Assign CPU Resources to Containers and Pods.\nNote: The parameters above are also utilized by the Kubernetes Horizontal Pod Autoscaler (HPA). For more details on HPA, see Kubernetes Horizontal Pod Autoscaler.\n  If you plan on integrating OUD with other Oracle components then you must specify the following under the oudConfig: section:\n integration: \u0026lt;Integration option\u0026gt;  For example: oudConfig: etc... integration: \u0026lt;Integration option\u0026gt;  It is recommended to choose the option covering your minimal requirements. Allowed values include: `no-integration` (no integration), `basic` (Directory Integration Platform), `generic` (Directory Integration Platform, Database Net Services and E-Business Suite integration), `eus` (Directory Integration Platform, Database Net Services, E-Business Suite and Enterprise User Security integration). The default value is `no-integration` **Note**: This will enable the integration type only. To integrate OUD with the Oracle component referenced, refer to the relevant product component documentation.   If you want to enable Assured Replication, see Enabling Assured Replication (Optional).\n    Run the following command to deploy OUD:\n$ helm install --namespace \u0026lt;namespace\u0026gt; \\ --values oud-ds-rs-values-override.yaml \\ \u0026lt;release_name\u0026gt; oud-ds-rs For example:\n$ helm install --namespace oudns \\ --values oud-ds-rs-values-override.yaml \\ oud-ds-rs oud-ds-rs   Check the OUD deployment as per Verify the OUD deployment and Verify the OUD replication.\n  Using --set argument   Navigate to the $WORKDIR/kubernetes/helm directory:\n$ cd $WORKDIR/kubernetes/helm   Run the following command to create OUD instances:\n$ helm install --namespace \u0026lt;namespace\u0026gt; \\ --set oudConfig.rootUserPassword=\u0026lt;password\u0026gt; \\ --set persistence.filesystem.hostPath.path=\u0026lt;persistent_volume\u0026gt;/oud_user_projects \\ --set image.repository=\u0026lt;image_location\u0026gt;,image.tag=\u0026lt;image_tag\u0026gt; \\ --set oudConfig.sampleData=\u0026#34;200\u0026#34; \\ --set oudConfig.resources.limits.cpu=\u0026#34;1\u0026#34;,oudConfig.resources.limits.memory=\u0026#34;8Gi\u0026#34;,oudConfig.resources.requests.cpu=\u0026#34;500m\u0026#34;,oudConfig.resources.requests.memory=\u0026#34;4Gi\u0026#34; \\ --set cronJob.kubectlImage.repository=bitnami/kubectl,cronJob.kubectlImage.tag=\u0026lt;version\u0026gt; \\ --set cronJob.imagePullSecrets[0].name=\u0026#34;dockercred\u0026#34; \\ --set imagePullSecrets[0].name=\u0026#34;orclcred\u0026#34; \\ \u0026lt;release_name\u0026gt; oud-ds-rs For example:\n$ helm install --namespace oudns \\ --set oudConfig.rootUserPassword=\u0026lt;password\u0026gt; \\ --set persistence.filesystem.hostPath.path=/scratch/shared/oud_user_projects \\ --set image.repository=container-registry.oracle.com/middleware/oud_cpu,image.tag=12.2.1.4-jdk8-ol8-\u0026lt;October\u0026#39;24\u0026gt; \\ --set oudConfig.sampleData=\u0026#34;200\u0026#34; \\ --set oudConfig.resources.limits.cpu=\u0026#34;1\u0026#34;,oudConfig.resources.limits.memory=\u0026#34;8Gi\u0026#34;,oudConfig.resources.requests.cpu=\u0026#34;500m\u0026#34;,oudConfig.resources.requests.memory=\u0026#34;4Gi\u0026#34; \\ --set cronJob.kubectlImage.repository=bitnami/kubectl,cronJob.kubectlImage.tag=1.28.3 \\ --set cronJob.imagePullSecrets[0].name=\u0026#34;dockercred\u0026#34; \\ --set imagePullSecrets[0].name=\u0026#34;orclcred\u0026#34; \\ oud-ds-rs oud-ds-rs The following caveats exist:\n  Replace \u0026lt;password\u0026gt; with a the relevant password.\n  sampleData: \u0026quot;200\u0026quot; will load 200 sample users into the default baseDN dc=example,dc=com. If you do not want sample data, remove this entry. If sampleData is set to 1,000,000 users or greater, then you must add the following entries to the yaml file to prevent inconsistencies in dsreplication: --set deploymentConfig.startupTime=720,deploymentConfig.period=120,deploymentConfig.timeout=60.\n  The \u0026lt;version\u0026gt; in kubectlImage tag: should be set to the same version as your Kubernetes version (kubectl version). For example if your Kubernetes version is 1.28.3 set to 1.28.3.\n  If using using NFS for your persistent volume then use:\n--set persistence.networkstorage.nfs.path=\u0026lt;persistent_volume\u0026gt;/oud_user_projects,persistence.networkstorage.nfs.server:\u0026lt;NFS IP address\u0026gt;` \\ --set persistence.storageClassCreate=\u0026quot;true\u0026quot;,persistence.storageClass=\u0026quot;oud-sc\u0026quot;,persistence.provisioner=\u0026quot;kubernetes.io/is-default-class\u0026quot; \\ * If you want to create your own storage class, set `storageClassCreate: true`. If `storageClassCreate: true` it is recommended to set `storageClass` to a value of your choice, and `provisioner` to the provisioner supported by your cloud vendor. * If you have an existing storageClass that supports dynamic storage, set `storageClassCreate: false` and `storageClass` to the NAME value returned in \u0026quot;`kubectl get storageclass`\u0026quot;. The `provisioner` can be ignored.   If using using block storage for your persistent volume then use:\n--set persistence.type=\u0026quot;blockstorage\u0026quot;,persistence.accessMode=\u0026quot;ReadWriteOnce\u0026quot; \\ --set persistence.storageClassCreate=\u0026quot;true\u0026quot;,persistence.storageClass=\u0026quot;oud-sc\u0026quot;,persistence.provisioner=\u0026quot;oracle.com/oci\u0026quot; \\ * If you want to create your own storage class, set `storageClassCreate: true`. If `storageClassCreate: true` it is recommended to set `storageClass` to a value of your choice, and `provisioner` to the provisioner supported by your cloud vendor. * If you have an existing storageClass that supports dynamic storage, set `storageClassCreate: false` and `storageClass` to the NAME value returned in \u0026quot;`kubectl get storageclass`\u0026quot;. The `provisioner` can be ignored.   If you are not using Oracle Container Registry or your own container registry for your OUD container image, then you can remove the following: --set imagePullSecrets[0].name=\u0026quot;orclcred\u0026quot;.\n  For resources, limits and `requests1, the example CPU and memory values shown are for development environments only. For Enterprise Deployments, please review the performance recommendations and sizing requirements in Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster.\nNote: Limits and requests for CPU resources are measured in CPU units. One CPU in Kubernetes is equivalent to 1 vCPU/Core for cloud providers, and 1 hyperthread on bare-metal Intel processors. An \u0026ldquo;m\u0026rdquo; suffix in a CPU attribute indicates ‘milli-CPU’, so 500m is 50% of a CPU. Memory can be expressed in various units, where one Mi is one IEC unit mega-byte (1024^2), and one Gi is one IEC unit giga-byte (1024^3). For more information, see Resource Management for Pods and Containers, Assign Memory Resources to Containers and Pods, and Assign CPU Resources to Containers and Pods.\nNote: The parameters above are also utilized by the Kubernetes Horizontal Pod Autoscaler (HPA). For more details on HPA, see Kubernetes Horizontal Pod Autoscaler.\n  If you plan on integrating OUD with other Oracle components then you must specify the following:\n--set oudConfig.integration=\u0026lt;Integration option\u0026gt;  It is recommended to choose the option covering your minimal requirements. Allowed values include: `no-integration` (no integration), `basic` (Directory Integration Platform), `generic` (Directory Integration Platform, Database Net Services and E-Business Suite integration), `eus` (Directory Integration Platform, Database Net Services, E-Business Suite and Enterprise User Security integration). The default value is `no-integration` **Note**: This will enable the integration type only. To integrate OUD with the Oracle component referenced, refer to the relevant product component documentation.   If you want to enable Assured Replication, see Enabling Assured Replication (Optional).\n    Check the OUD deployment as per Verify the OUD deployment and Verify the OUD replication.\n  Enabling Assured Replication (Optional) If you want to enable assured replication, perform the following steps:\n  Create a directory on the persistent volume as follows:\n$ cd \u0026lt;persistent_volume\u0026gt; $ mkdir oud-repl-config $ sudo chown -R 1000:0 oud-repl-config For example:\n$ cd /scratch/shared $ mkdir oud-repl-config $ sudo chown -R 1000:0 oud-repl-config   Add the following section in the oud-ds-rs-values-override.yaml:\nreplOUD: envVars: - name: post_dsreplication_dsconfig_3 value: set-replication-domain-prop --domain-name ${baseDN} --advanced --set assured-type:safe-data --set assured-sd-level:2 --set assured-timeout:5s - name: execCmd_1 value: /u01/oracle/user_projects/${OUD_INSTANCE_NAME}/OUD/bin/dsconfig --no-prompt --hostname ${sourceHost} --port ${adminConnectorPort} --bindDN \u0026quot;${rootUserDN}\u0026quot; --bindPasswordFile /u01/oracle/user_projects/${OUD_INSTANCE_NAME}/admin/rootPwdFile.txt --trustAll set-replication-domain-prop --domain-name ${baseDN} --advanced --set assured-type:safe-data --set assured-sd-level:2 --set assured-timeout:5s --provider-name \u0026quot;Multimaster Synchronization\u0026quot; configVolume: enabled: true type: networkstorage storageClassCreate: true storageClass: oud-config provisioner: kubernetes.io/is-default-class networkstorage: nfs: server: \u0026lt;IP_address\u0026gt; path: \u0026lt;persistent_volume\u0026gt;/oud-repl-config mountPath: /u01/oracle/config-input The above will enable assured replication with assured type safe-data and assured-sd-level: 2.\nNote: If you prefer assured-type to be set to safe-read, then change to --set assured-type:safe-read and remove --set assured-sd-level:2.\nFor more information on OUD Assured Replication, and other options and levels, see, Understanding the Oracle Unified Directory Replication Model.\nThe following caveats exist:\n  post_dsreplication_dsconfig_N and execCmd_N should be a unique key - change the suffix accordingly. For more information on the environment variable and respective keys, see, Appendix B: Environment Variables.\n  For configVolume the storage can be networkstorage(nfs) or filesystem(hostPath) as the config volume path has to be accessible from all the Kuberenetes nodes. Please note that block storage is not supported for configVolume.\n  If you want to create your own storage class, set storageClassCreate: true. If storageClassCreate: true it is recommended to set storageClass to a value of your choice, and provisioner to the provisioner supported by your cloud vendor.\n  * If you have an existing storageClass that supports network storage, set `storageClassCreate: false` and `storageClass` to the NAME value returned in \u0026quot;`kubectl get storageclass`\u0026quot;. Please note that the storage-class should not be the one you used for the persistent volume earlier. The `provisioner` can be ignored.    Helm command output In all the examples above, the following output is shown following a successful execution of the helm install command.\nNAME: oud-ds-rs LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oudns STATUS: deployed REVISION: 4 NOTES: # # Copyright (c) 2020, Oracle and/or its affiliates. # # Licensed under the Universal Permissive License v 1.0 as shown at # https://oss.oracle.com/licenses/upl # # Since \u0026#34;nginx\u0026#34; has been chosen, follow the steps below to configure nginx ingress controller. Add Repo reference to helm for retriving/installing Chart for nginx-ingress implementation. command-# helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx Command helm install to install nginx-ingress related objects like pod, service, deployment, etc. # helm install --namespace \u0026lt;namespace for ingress\u0026gt; --values nginx-ingress-values-override.yaml lbr-nginx ingress-nginx/ingress-nginx For details of content of nginx-ingress-values-override.yaml refer README.md file of this chart. Run these commands to check port mapping and services: # kubectl --namespace \u0026lt;namespace for ingress\u0026gt; get services -o wide -w lbr-nginx-ingress-controller # kubectl describe --namespace \u0026lt;namespace for oud-ds-rs chart\u0026gt; ingress.extensions/oud-ds-rs-http-ingress-nginx # kubectl describe --namespace \u0026lt;namespace for oud-ds-rs chart\u0026gt; ingress.extensions/oud-ds-rs-admin-ingress-nginx Accessible interfaces through ingress: (External IP Address for LoadBalancer NGINX Controller can be determined through details associated with lbr-nginx-ingress-controller) 1. OUD Admin REST: Port: http/https 2. OUD Data REST: Port: http/https 3. OUD Data SCIM: Port: http/https 4. OUD LDAP/LDAPS: Port: ldap/ldaps 5. OUD Admin LDAPS: Port: ldaps Please refer to README.md from Helm Chart to find more details about accessing interfaces and configuration parameters. Verify the OUD deployment Run the following command to verify the OUD deployment:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; get pod,service,secret,pv,pvc,ingress -o wide For example:\n$ kubectl --namespace oudns get pod,service,secret,pv,pvc,ingress -o wide The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oud-ds-rs-0 1/1 Running 0 14m 10.244.1.180 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-1 1/1 Running 0 8m26s 10.244.1.181 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-2 0/1 Running 0 2m24s 10.244.1.182 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-pod-cron-job-27586680-p5d8q 0/1 Completed 0 50s 10.244.1.183 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service/oud-ds-rs ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1389/TCP,1636/TCP,1080/TCP,1081/TCP,1898/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-0 ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1898/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-0 service/oud-ds-rs-1 ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1898/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-1 service/oud-ds-rs-2 ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1898/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-2 service/oud-ds-rs-http-0 ClusterIP 10.104.112.93 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-0 service/oud-ds-rs-http-1 ClusterIP 10.103.105.70 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-1 service/oud-ds-rs-http-2 ClusterIP 10.110.160.107 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-2 service/oud-ds-rs-lbr-admin ClusterIP 10.99.238.222 \u0026lt;none\u0026gt; 1888/TCP,1444/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-lbr-http ClusterIP 10.101.250.196 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-lbr-ldap ClusterIP 10.104.149.90 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-ldap-0 ClusterIP 10.109.255.221 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-0 service/oud-ds-rs-ldap-1 ClusterIP 10.111.135.142 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-1 service/oud-ds-rs-ldap-2 ClusterIP 10.100.8.145 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-2 NAME TYPE DATA AGE secret/dockercred kubernetes.io/dockerconfigjson 1 4h24m secret/orclcred kubernetes.io/dockerconfigjson 1 14m secret/oud-ds-rs-creds opaque 8 14m secret/oud-ds-rs-tls-cert kubernetes.io/tls 2 14m secret/sh.helm.release.v1.oud-ds-rs.v1 helm.sh/release.v1 1 14m NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE VOLUMEMODE persistentvolume/oud-ds-rs-pv 20Gi RWX Delete Bound oudns/oud-ds-rs-pvc manual 14m Filesystem NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE VOLUMEMODE persistentvolumeclaim/oud-ds-rs-pvc Bound oud-ds-rs-pv 20Gi RWX manual 14m Filesystem NAME CLASS HOSTS ADDRESS PORTS AGE ingress.networking.k8s.io/oud-ds-rs-admin-ingress-nginx \u0026lt;none\u0026gt; oud-ds-rs-admin-0,oud-ds-rs-admin-0,oud-ds-rs-admin-1 + 3 more... 80, 443 14m ingress.networking.k8s.io/oud-ds-rs-http-ingress-nginx \u0026lt;none\u0026gt; oud-ds-rs-http-0,oud-ds-rs-http-1,oud-ds-rs-http-2 + 3 more... 80, 443 14m Note: If you are using block storage you will see slightly different entries for PV and PVC, for example:\nNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE VOLUMEMODE persistentvolume/ocid1.volume.oc1.iad.\u0026lt;unique_ID\u0026gt; 50Gi RWO Delete Bound oudns/oud-ds-rs-pv-oud-ds-rs-2 oud-sc 60m Filesystem persistentvolume/ocid1.volume.oc1.iad.\u0026lt;unique_ID\u0026gt; 50Gi RWO Delete Bound oudns/oud-ds-rs-pv-oud-ds-rs-1 oud-sc 67m Filesystem persistentvolume/ocid1.volume.oc1.iad.\u0026lt;unique_ID\u0026gt; 50Gi RWO Delete Bound oudns/oud-ds-rs-pv-oud-ds-rs-3 oud-sc 45m Filesystem NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE VOLUMEMODE persistentvolumeclaim/oud-ds-rs-pv-oud-ds-rs-1 Bound ocid1.volume.oc1.iad.\u0026lt;unique_ID\u0026gt; 50Gi RWO oud-sc 67m Filesystem persistentvolumeclaim/oud-ds-rs-pv-oud-ds-rs-2 Bound ocid1.volume.oc1.iad.\u0026lt;unique_ID\u0026gt; 50Gi RWO oud-sc 60m Filesystem persistentvolumeclaim/oud-ds-rs-pv-oud-ds-rs-3 Bound ocid1.volume.oc1.iad.\u0026lt;unique_ID\u0026gt; 50Gi RWO oud-sc 45m Filesystem Note: Initially pod/oud-ds-rs-0 will appear with a STATUS of 0/1 and it will take approximately 5 minutes before OUD is started (1/1). Once pod/oud-ds-rs-0 has a STATUS of 1/1, pod/oud-ds-rs-1 will appear with a STATUS of 0/1. Once pod/oud-ds-rs-1 is started (1/1), pod/oud-ds-rs-2 will appear. It will take around 15 minutes for all the pods to fully started.\nWhile the oud-ds-rs pods have a STATUS of 0/1 the pod is running but OUD server associated with it is currently starting. While the pod is starting you can check the startup status in the pod logs, by running the following command:\n$ kubectl logs \u0026lt;pod\u0026gt; -n oudns For example:\n$ kubectl logs oud-ds-rs-0 -n oudns Note : If the OUD deployment fails additionally refer to Troubleshooting for instructions on how describe the failing pod(s). Once the problem is identified follow Undeploy an OUD deployment to clean down the deployment before deploying again.\nKubernetes Objects Kubernetes objects created by the Helm chart are detailed in the table below:\n   Type Name Example Name Purpose     Service Account \u0026lt;deployment/release name\u0026gt; oud-ds-rs Kubernetes Service Account for the Helm Chart deployment   Secret \u0026lt;deployment/release name\u0026gt;-creds oud-ds-rs-creds Secret object for Oracle Unified Directory related critical values like passwords   Persistent Volume \u0026lt;deployment/release name\u0026gt;-pv oud-ds-rs-pv Persistent Volume for user_projects mount.   Persistent Volume Claim \u0026lt;deployment/release name\u0026gt;-pvc oud-ds-rs-pvc Persistent Volume Claim for user_projects mount.   Persistent Volume \u0026lt;deployment/release name\u0026gt;-pv-config oud-ds-rs-pv-config Persistent Volume for mounting volume in containers for configuration files like ldif, schema, jks, java.security, etc.   Persistent Volume Claim \u0026lt;deployment/release name\u0026gt;-pvc-config oud-ds-rs-pvc-config Persistent Volume Claim for mounting volume in containers for configuration files like ldif, schema, jks, java.security, etc.   Pod \u0026lt;deployment/release name\u0026gt;-0 oud-ds-rs-0 Pod/Container for base Oracle Unified Directory Instance which would be populated first with base configuration (like number of sample entries)   Pod \u0026lt;deployment/release name\u0026gt;-N oud-ds-rs-1, oud-ds-rs-2, \u0026hellip; Pod(s)/Container(s) for Oracle Unified Directory Instances - each would have replication enabled against base Oracle Unified Directory instance \u0026lt;deployment/release name\u0026gt;-0   Service \u0026lt;deployment/release name\u0026gt;-0 oud-ds-rs-0 Service for LDAPS Admin, REST Admin and Replication interfaces from base Oracle Unified Directory instance \u0026lt;deployment/release name\u0026gt;-0   Service \u0026lt;deployment/release name\u0026gt;-http-0 oud-ds-rs-http-0 Service for HTTP and HTTPS interfaces from base Oracle Unified Directory instance \u0026lt;deployment/release name\u0026gt;-0   Service \u0026lt;deployment/release name\u0026gt;-ldap-0 oud-ds-rs-ldap-0 Service for LDAP and LDAPS interfaces from base Oracle Unified Directory instance \u0026lt;deployment/release name\u0026gt;-0   Service \u0026lt;deployment/release name\u0026gt;-N oud-ds-rs-1, oud-ds-rs-2, \u0026hellip; Service(s) for LDAPS Admin, REST Admin and Replication interfaces from base Oracle Unified Directory instance \u0026lt;deployment/release name\u0026gt;-N   Service \u0026lt;deployment/release name\u0026gt;-http-N oud-ds-rs-http-1, oud-ds-rs-http-2, \u0026hellip; Service(s) for HTTP and HTTPS interfaces from base Oracle Unified Directory instance \u0026lt;deployment/release name\u0026gt;-N   Service \u0026lt;deployment/release name\u0026gt;-ldap-N oud-ds-rs-ldap-1, oud-ds-rs-ldap-2, \u0026hellip; Service(s) for LDAP and LDAPS interfaces from base Oracle Unified Directory instance \u0026lt;deployment/release name\u0026gt;-N   Service \u0026lt;deployment/release name\u0026gt;-lbr-admin oud-ds-rs-lbr-admin Service for LDAPS Admin, REST Admin and Replication interfaces from all Oracle Unified Directory instances   Service \u0026lt;deployment/release name\u0026gt;-lbr-http oud-ds-rs-lbr-http Service for HTTP and HTTPS interfaces from all Oracle Unified Directory instances   Service \u0026lt;deployment/release name\u0026gt;-lbr-ldap oud-ds-rs-lbr-ldap Service for LDAP and LDAPS interfaces from all Oracle Unified Directory instances   Ingress \u0026lt;deployment/release name\u0026gt;-admin-ingress-nginx oud-ds-rs-admin-ingress-nginx Ingress Rules for HTTP Admin interfaces.   Ingress \u0026lt;deployment/release name\u0026gt;-http-ingress-nginx oud-ds-rs-http-ingress-nginx Ingress Rules for HTTP (Data/REST) interfaces.     In the table above the \u0026lsquo;Example Name\u0026rsquo; for each Object is based on the value \u0026lsquo;oud-ds-rs\u0026rsquo; as deployment/release name for the Helm chart installation.  Verify the OUD replication Once all the PODs created are visible as READY (i.e. 1/1), you can verify your replication across multiple Oracle Unified Directory instances.\n  To verify the replication group, connect to the container and issue an OUD administration command to show the details. The name of the container can be found by issuing the following:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; -o jsonpath=\u0026#39;{.items[*].spec.containers[*].name}\u0026#39; For example:\n$ kubectl get pods -n oudns -o jsonpath=\u0026#39;{.items[*].spec.containers[*].name}\u0026#39; The output will look similar to the following:\noud-ds-rs oud-ds-rs oud-ds-rs Once you have the container name you can verify the replication status in the following ways:\n Run dresplication inside the pod Using kubectl commands    Run dresplication inside the pod   Run the following command to create a bash shell in the pod:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; exec -it -c \u0026lt;containername\u0026gt; \u0026lt;podname\u0026gt; -- bash For example:\n$ kubectl --namespace oudns exec -it -c oud-ds-rs oud-ds-rs-0 -- bash This will take you into the pod:\n[oracle@oud-ds-rs-0 oracle]$   From the prompt, use the dsreplication command to check the status of your replication group:\n$ cd /u01/oracle/user_projects/oud-ds-rs-0/OUD/bin $ ./dsreplication status --trustAll \\ --hostname oud-ds-rs-0 --port 1444 --adminUID admin \\ --dataToDisplay compat-view --dataToDisplay rs-connections The output will look similar to the following. Enter credentials where prompted:\n\u0026gt;\u0026gt;\u0026gt;\u0026gt; Specify Oracle Unified Directory LDAP connection parameters Password for user \u0026#39;admin\u0026#39;: Establishing connections and reading configuration ..... Done. dc=example,dc=com - Replication Enabled ======================================= Server : Entries : M.C. [1] : A.O.M.C. [2] : Port [3] : Encryption [4] : Trust [5] : U.C. [6] : Status [7] : ChangeLog [8] : Group ID [9] : Connected To [10] ---------------------:---------:----------:--------------:----------:----------------:-----------:----------:------------:---------------:--------------:------------------------------- oud-ds-rs-0:1444 : 202 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-0:1898 : : : : : : : : : : : (GID=1) oud-ds-rs-1:1444 : 202 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-1:1898 : : : : : : : : : : : (GID=1) oud-ds-rs-2:1444 : 202 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-2:1898 : : : : : : : : : : : (GID=1) Replication Server [11] : RS #1 : RS #2 : RS #3 -------------------------------:-------:-------:------ oud-ds-rs-0:1898 : -- : Yes : Yes (#1) : : : oud-ds-rs-1:1898 : Yes : -- : Yes (#2) : : : oud-ds-rs-2:1898 : Yes : Yes : -- (#3) : : : [1] The number of changes that are still missing on this element (and that have been applied to at least one other server). [2] Age of oldest missing change: the age (in seconds) of the oldest change that has not yet arrived on this element. [3] The replication port used to communicate between the servers whose contents are being replicated. [4] Whether the replication communication initiated by this element is encrypted or not. [5] Whether the directory server is trusted or not. Updates coming from an untrusted server are discarded and not propagated. [6] The number of untrusted changes. These are changes generated on this server while it is untrusted. Those changes are not propagated to the rest of the topology but are effective on the untrusted server. [7] The status of the replication on this element. [8] Whether the external change log is enabled for the base DN on this server or not. [9] The ID of the replication group to which the server belongs. [10] The replication server this server is connected to with its group ID between brackets. [11] This table represents the connections between the replication servers. The headers of the columns use a number as identifier for each replication server. See the values of the first column to identify the corresponding replication server for each number.   Type exit to exit the pod.\n  Using kubectl commands   The dsreplication status command can be invoked using the following kubectl command:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; exec -it -c \u0026lt;containername\u0026gt; \u0026lt;podname\u0026gt; -- \\ /u01/oracle/user_projects/\u0026lt;OUD Instance/Pod Name\u0026gt;/OUD/bin/dsreplication status \\ --trustAll --hostname \u0026lt;OUD Instance/Pod Name\u0026gt; --port 1444 --adminUID admin \\ --dataToDisplay compat-view --dataToDisplay rs-connections For example:\n$ kubectl --namespace oudns exec -it -c oud-ds-rs oud-ds-rs-0 -- \\ /u01/oracle/user_projects/oud-ds-rs-0/OUD/bin/dsreplication status \\ --trustAll --hostname oud-ds-rs-0 --port 1444 --adminUID admin \\ --dataToDisplay compat-view --dataToDisplay rs-connections The output will be the same as per Run dresplication inside the pod.\n  Verify OUD assured replication status Note: This section only needs to be followed if you enabled assured replication as per Enabling Assured Replication (Optional).\n  Run the following command to create a bash shell in the pod:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; exec -it -c \u0026lt;containername\u0026gt; \u0026lt;podname\u0026gt; -- bash For example:\n$ kubectl --namespace oudns exec -it -c oud-ds-rs oud-ds-rs-0 -- bash This will take you into the pod:\n[oracle@oud-ds-rs-0 oracle]$   At the prompt, enter the following commands:\n$ echo $bindPassword1 \u0026gt; /tmp/pwd.txt $ /u01/oracle/user_projects/${OUD_INSTANCE_NAME}/OUD/bin/dsconfig --no-prompt --hostname ${OUD_INSTANCE_NAME} --port ${adminConnectorPort} --bindDN \u0026#34;${rootUserDN}\u0026#34; --bindPasswordFile /tmp/pwd.txt --trustAll get-replication-domain-prop --domain-name ${baseDN} --advanced --property assured-type --property assured-sd-level --property assured-timeout --provider-name \u0026#34;Multimaster Synchronization\u0026#34; The output will look similar to the following:\nProperty : Value(s) -----------------:---------- assured-sd-level : 2 assured-timeout : 5 s assured-type : safe-data   Verify the cronjob   Run the following command to make sure the cronjob is created:\n$ kubectl get cronjob -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get cronjob -n oudns The output will look similar to the following:\nNAME SCHEDULE SUSPEND ACTIVE LAST SCHEDULE AGE oud-pod-cron-job */30 * * * * False 0 5m18s 19m   Run the following command to make sure the job(s) is created:\n$ kubectl get job -n \u0026lt;namespace\u0026gt; -o wide For example:\n$ kubectl get job -n oudns -o wide The output will look similar to the following:\nNAME COMPLETIONS DURATION AGE CONTAINERS IMAGES SELECTOR oud-pod-cron-job-27586680 1/1 1s 5m36s cron-kubectl bitnami/kubectl:1.28.3 controller-uid=700ab9f7-6094-488a-854d-f1b914de5f61   Disabling the cronjob If you need to disable the job, for example if maintenance needs to be performed on the node, you can disable the job as follows:\n  Run the following command to edit the cronjob:\n$ kubectl edit cronjob pod-cron-job -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl edit cronjob oud-pod-cron-job -n oudns Note: This opens an edit session for the cronjob where parameters can be changed using standard vi commands.\n  In the edit session search for suspend and change the vaule from false to true:\n... schedule: '*/30 * * * *' successfulJobsHistoryLimit: 3 suspend: true ...   Save the file and exit (wq!).\n  Run the following to make sure the cronjob is suspended:\n$ kubectl get cronjob -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get cronjob -n oudns The output will look similar to the following:\nNAME SCHEDULE SUSPEND ACTIVE LAST SCHEDULE AGE oud-pod-cron-job */30 * * * * True 0 7m47s 21m   To enable the cronjob again, repeat the above steps and set suspend to false.\n  Ingress Configuration With an OUD instance now deployed you are now ready to configure an ingress controller to direct traffic to OUD as per Configure an ingress for an OUD.\nUndeploy an OUD deployment Delete the OUD deployment   Find the deployment release name:\n$ helm --namespace \u0026lt;namespace\u0026gt; list For example:\n$ helm --namespace oudns list The output will look similar to the following:\nNAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION oud-ds-rs oudns 1 \u0026lt;DATE\u0026gt; deployed oud-ds-rs-0.2 12.2.1.4.0   Delete the deployment using the following command:\n$ helm uninstall --namespace \u0026lt;namespace\u0026gt; \u0026lt;release\u0026gt; For example:\n$ helm uninstall --namespace oudns oud-ds-rs release \u0026#34;oud-ds-rs\u0026#34; uninstalled   Run the following command to view the status:\n$ kubectl --namespace oudns get pod,service,secret,pv,pvc,ingress -o wide Initially the pods and persistent volume (PV) and persistent volume claim (PVC) will move to a Terminating status:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oud-ds-rs-0 1/1 Terminating 0 24m 10.244.1.180 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-1 1/1 Terminating 0 18m 10.244.1.181 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-2 1/1 Terminating 0 12m 10.244.1.182 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; NAME TYPE DATA AGE secret/default-token-msmmd kubernetes.io/service-account-token 3 3d20h secret/dockercred kubernetes.io/dockerconfigjson 1 3d20h secret/orclcred kubernetes.io/dockerconfigjson 1 3d20h NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE VOLUMEMODE persistentvolume/oud-ds-rs-pv 20Gi RWX Delete Terminating oudns/oud-ds-rs-pvc manual 24m Filesystem NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE VOLUMEMODE persistentvolumeclaim/oud-ds-rs-pvc Terminating oud-ds-rs-pv 20Gi RWX manual 24m Filesystem Run the command again until the pods, PV and PVC disappear.\n  If the PV or PVC\u0026rsquo;s don\u0026rsquo;t delete, remove them manually:\n$ kubectl delete pvc oud-ds-rs-pvc -n oudns $ kubectl delete pv oud-ds-rs-pv -n oudns Note: If using blockstorage, you will see a PV and PVC for each pod. Delete all of the PVC\u0026rsquo;s and PV\u0026rsquo;s using the above commands.\n  Delete the persistent volume contents Note: The steps below are not relevant for block storage.\n  Delete the contents of the oud_user_projects directory in the persistent volume:\n$ cd \u0026lt;persistent_volume\u0026gt;/oud_user_projects $ rm -rf * For example:\n$ cd /scratch/shared/oud_user_projects $ rm -rf *   Appendix A: Configuration Parameters The following table lists the configurable parameters of the oud-ds-rs chart and their default values.\n   Parameter Description Default Value     replicaCount Number of DS+RS instances/pods/services to be created with replication enabled against a base Oracle Unified Directory instance/pod. 3   restartPolicyName restartPolicy to be configured for each POD containing Oracle Unified Directory instance OnFailure   image.repository Oracle Unified Directory Image Registry/Repository and name. Based on this, image parameter would be configured for Oracle Unified Directory pods/containers oracle/oud   image.tag Oracle Unified Directory Image Tag. Based on this, image parameter would be configured for Oracle Unified Directory pods/containers 12.2.1.4.0   image.pullPolicy policy to pull the image IfnotPresent   imagePullSecrets.name name of Secret resource containing private registry credentials regcred   nameOverride override the fullname with this name    fullnameOverride Overrides the fullname with the provided string    serviceAccount.create Specifies whether a service account should be created true   serviceAccount.name If not set and create is true, a name is generated using the fullname template oud-ds-rs-\u0026lt; fullname \u0026gt;-token-\u0026lt; randomalphanum \u0026gt;   podSecurityContext Security context policies to add to the controller pod    securityContext Security context policies to add by default    service.type type of controller service to create ClusterIP   nodeSelector node labels for pod assignment    tolerations node taints to tolerate    affinity node/pod affinities    ingress.enabled  true   ingress.type Supported value: nginx nginx   ingress.nginx.http.host Hostname to be used with Ingress Rules. If not set, hostname would be configured according to fullname. Hosts would be configured as \u0026lt; fullname \u0026gt;-http.\u0026lt; domain \u0026gt;, \u0026lt; fullname \u0026gt;-http-0.\u0026lt; domain \u0026gt;, \u0026lt; fullname \u0026gt;-http-1.\u0026lt; domain \u0026gt;, etc.    ingress.nginx.http.domain Domain name to be used with Ingress Rules. In ingress rules, hosts would be configured as \u0026lt; host \u0026gt;.\u0026lt; domain \u0026gt;, \u0026lt; host \u0026gt;-0.\u0026lt; domain \u0026gt;, \u0026lt; host \u0026gt;-1.\u0026lt; domain \u0026gt;, etc.    ingress.nginx.http.backendPort  http   ingress.nginx.http.nginxAnnotations  { ingressClassName: \u0026ldquo;nginx\u0026quot;}   ingress.nginx.admin.host Hostname to be used with Ingress Rules. If not set, hostname would be configured according to fullname. Hosts would be configured as \u0026lt; fullname \u0026gt;-admin.\u0026lt; domain \u0026gt;, \u0026lt; fullname \u0026gt;-admin-0.\u0026lt; domain \u0026gt;, \u0026lt; fullname \u0026gt;-admin-1.\u0026lt; domain \u0026gt;, etc.    ingress.nginx.admin.domain Domain name to be used with Ingress Rules. In ingress rules, hosts would be configured as \u0026lt; host \u0026gt;.\u0026lt; domain \u0026gt;, \u0026lt; host \u0026gt;-0.\u0026lt; domain \u0026gt;, \u0026lt; host \u0026gt;-1.\u0026lt; domain \u0026gt;, etc.    ingress.nginx.admin.nginxAnnotations  { ingressClassName: \u0026ldquo;nginx\u0026rdquo; nginx.ingress.kubernetes.io/backend-protocol: \u0026ldquo;https\u0026quot;}   ingress.ingress.tlsSecret Secret name to use an already created TLS Secret. If such secret is not provided, one would be created with name \u0026lt; fullname \u0026gt;-tls-cert. If the TLS Secret is in different namespace, name can be mentioned as \u0026lt; namespace \u0026gt;/\u0026lt; tlsSecretName \u0026gt;    ingress.certCN Subject\u0026rsquo;s common name (cn) for SelfSigned Cert. \u0026lt; fullname \u0026gt;   ingress.certValidityDays Validity of Self-Signed Cert in days 365   secret.enabled If enabled it will use the secret created with base64 encoding. if value is false, secret would not be used and input values (through \u0026ndash;set, \u0026ndash;values, etc.) would be used while creation of pods. true   secret.name secret name to use an already created Secret oud-ds-rs-\u0026lt; fullname \u0026gt;-creds   secret.type Specifies the type of the secret Opaque   persistence.enabled If enabled, it will use the persistent volume. if value is false, PV and PVC would not be used and pods would be using the default emptyDir mount volume. true   persistence.pvname pvname to use an already created Persistent Volume , If blank will use the default name oud-ds-rs-\u0026lt; fullname \u0026gt;-pv   persistence.pvcname pvcname to use an already created Persistent Volume Claim , If blank will use default name oud-ds-rs-\u0026lt; fullname \u0026gt;-pvc   persistence.type supported values: either filesystem or networkstorage or blockstorage or custom filesystem   persistence.filesystem.hostPath.path The path location mentioned should be created and accessible from the local host provided with necessary privileges for the user. /scratch/shared/oud_user_projects   persistence.networkstorage.nfs.path Path of NFS Share location /scratch/shared/oud_user_projects   persistence.networkstorage.nfs.server IP or hostname of NFS Server 0.0.0.0   persistence.custom.* Based on values/data, YAML content would be included in PersistenceVolume Object    persistence.accessMode Specifies the access mode of the location provided. ReadWriteMany for Filesystem/NFS, ReadWriteOnce for block storage. ReadWriteMany   persistence.size Specifies the size of the storage 10Gi   persistence.storageClassCreate if true, it will create the storageclass. if value is false, please provide existing storage class (storageClass) to be used. empty   persistence.storageClass Specifies the storageclass of the persistence volume. empty   persistence.provisioner If storageClassCreate is true, provide the custom provisioner if any . kubernetes.io/is-default-class   persistence.annotations specifies any annotations that will be used { }   configVolume.enabled If enabled, it will use the persistent volume. If value is false, PV and PVC would not be used and pods would be using the default emptyDir mount volume. true   configVolume.mountPath If enabled, it will use the persistent volume. If value is false, PV and PVC would not be used and there would not be any mount point available for config false   configVolume.pvname pvname to use an already created Persistent Volume , If blank will use the default name oud-ds-rs-\u0026lt; fullname \u0026gt;-pv-config   configVolume.pvcname pvcname to use an already created Persistent Volume Claim , If blank will use default name oud-ds-rs-\u0026lt; fullname \u0026gt;-pvc-config   configVolume.type supported values: either filesystem or networkstorage or custom filesystem   configVolume.filesystem.hostPath.path The path location mentioned should be created and accessible from the local host provided with necessary privileges for the user. /scratch/shared/oud_user_projects   configVolume.networkstorage.nfs.path Path of NFS Share location /scratch/shared/oud_config   configVolume.networkstorage.nfs.server IP or hostname of NFS Server 0.0.0.0   configVolume.custom.* Based on values/data, YAML content would be included in PersistenceVolume Object    configVolume.accessMode Specifies the access mode of the location provided ReadWriteMany   configVolume.size Specifies the size of the storage 10Gi   configVolume.storageClass Specifies the storageclass of the persistence volume. empty   configVolume.annotations Specifies any annotations that will be used { }   configVolume.storageClassCreate If true, it will create the storageclass. if value is false, provide existing storage class (storageClass) to be used. true   configVolume.provisioner If configVolume.storageClassCreate is true, please provide the custom provisioner if any. kubernetes.io/is-default-class   oudPorts.adminldaps Port on which Oracle Unified Directory Instance in the container should listen for Administration Communication over LDAPS Protocol 1444   oudPorts.adminhttps Port on which Oracle Unified Directory Instance in the container should listen for Administration Communication over HTTPS Protocol. 1888   oudPorts.ldap Port on which Oracle Unified Directory Instance in the container should listen for LDAP Communication. 1389   oudPorts.ldaps Port on which Oracle Unified Directory Instance in the container should listen for LDAPS Communication. 1636   oudPorts.http Port on which Oracle Unified Directory Instance in the container should listen for HTTP Communication. 1080   oudPorts.https Port on which Oracle Unified Directory Instance in the container should listen for HTTPS Communication. 1081   oudPorts.replication Port value to be used while setting up replication server. 1898   oudConfig.baseDN BaseDN for Oracle Unified Directory Instances dc=example,dc=com   oudConfig.rootUserDN Root User DN for Oracle Unified Directory Instances cn=Directory Manager   oudConfig.rootUserPassword Password for Root User DN RandomAlphanum   oudConfig.sampleData To specify that the database should be populated with the specified number of sample entries. 0   oudConfig.sleepBeforeConfig Based on the value for this parameter, initialization/configuration of each Oracle Unified Directory replica would be delayed. 120   oudConfig.adminUID AdminUID to be configured with each replicated Oracle Unified Directory instance admin   oudConfig.adminPassword Password for AdminUID. If the value is not passed, value of rootUserPassword would be used as password for AdminUID. rootUserPassword   baseOUD.envVarsConfigMap Reference to ConfigMap which can contain additional environment variables to be passed on to POD for Base Oracle Unified Directory Instance. Following are the environment variables which would not be honored from the ConfigMap. instanceType, sleepBeforeConfig, OUD_INSTANCE_NAME, hostname, baseDN, rootUserDN, rootUserPassword, adminConnectorPort, httpAdminConnectorPort, ldapPort, ldapsPort, httpPort, httpsPort, replicationPort, sampleData. -   baseOUD.envVars Environment variables in Yaml Map format. This is helpful when its requried to pass environment variables through \u0026ndash;values file. List of env variables which would not be honored from envVars map is same as list of env var names mentioned for envVarsConfigMap. For a full list of environment variables, see Appendix B: Environment Variables. -   replOUD.envVarsConfigMap Reference to ConfigMap which can contain additional environment variables to be passed on to PODs for Replicated Oracle Unified Directory Instances. Following are the environment variables which would not be honored from the ConfigMap. instanceType, sleepBeforeConfig, OUD_INSTANCE_NAME, hostname, baseDN, rootUserDN, rootUserPassword, adminConnectorPort, httpAdminConnectorPort, ldapPort, ldapsPort, httpPort, httpsPort, replicationPort, sampleData, sourceHost, sourceServerPorts, sourceAdminConnectorPort, sourceReplicationPort, dsreplication_1, dsreplication_2, dsreplication_3, dsreplication_4, post_dsreplication_dsconfig_1, post_dsreplication_dsconfig_2 -   replOUD.envVars Environment variables in Yaml Map format. This is helpful when its required to pass environment variables through \u0026ndash;values file. List of env variables which would not be honored from envVars map is same as list of env var names mentioned for envVarsConfigMap. For a full list of environment variables, see Appendix B: Environment Variables. -   podManagementPolicy Defines the policy for pod management within the statefulset. Typical values are OrderedReady/Parallel OrderedReady   updateStrategy Allows you to configure and disable automated rolling updates for containers, labels, resource request/limits, and annotations for the Pods in a StatefulSet. Typical values are OnDelete/RollingUpdate RollingUpdate   busybox.image busy box image name. Used for initcontainers busybox   oudConfig.cleanupbeforeStart Used to remove the individual pod directories during restart. Recommended value is false. Note: Do not change the default value (false) as it will delete the existing data and clone it from base pod again. false   oudConfig.disablereplicationbeforeStop This parameter is used to disable replication when a pod is restarted. Recommended value is false. Note Do not change the default value (false), as changing the value will result in an issue where the pod won\u0026rsquo;t join the replication topology after a restart. false   oudConfig.resources.requests.memory This parameter is used to set the memory request for the OUD pod 4Gi   oudConfig.resources.requests.cpu This parameter is used to set the cpu request for the OUD pod 0.5   oudConfig.resources.limits.memory This parameter is used to set the memory limit for the OUD pod 4Gi   oudConfig.resources.limits.cpu This parameter is used to set the cpu limit for the OUD pod 1   replOUD.groupId Group ID to be used/configured with each Oracle Unified Directory instance in replicated topology. 1   service.lbrtype Type of load balancer Service to be created for admin, http,ldap services. Values allowed: ClusterIP/NodePort ClusterIP   oudPorts.nodePorts.adminldaps Public port on which the OUD instance in the container should listen for administration communication over LDAPS Protocol. The port number should be between 30000-32767. No duplicate values are allowed. Note: Set only if service.lbrtype is set as NodePort. If left blank then k8s will assign random ports in between 30000 and 32767.    oudPorts.nodePorts.adminhttps Public port on which the OUD instance in the container should listen for administration communication over HTTPS Protocol. The port number should be between 30000-32767. No duplicate values are allowed. Note: Set only if service.lbrtype is set as NodePort. If left blank then k8s will assign random ports in between 30000 and 32767.    oudPorts.nodePorts.ldap Public port on which the OUD instance in the container should listen for LDAP communication. The port number should be between 30000-32767. No duplicate values are allowed. Note: Set only if service.lbrtype is set as NodePort. If left blank then k8s will assign random ports in between 30000 and 32767.    oudPorts.nodePorts.ldaps Public port on which the OUD instance in the container should listen for LDAPS communication. The port number should be between 30000-32767. No duplicate values are allowed. Note: Set only if service.lbrtype is set as NodePort. If left blank then k8s will assign random ports in between 30000 and 32767.    oudPorts.nodePorts.http Public port on which the OUD instance in the container should listen for HTTP communication. The port number should be between 30000-32767. No duplicate values are allowed. Note: Set only if service.lbrtype is set as NodePort. If left blank then k8s will assign random ports in between 30000 and 32767.    oudPorts.nodePorts.https Public port on which the OUD instance in the container should listen for HTTPS communication. The port number should be between 30000-32767. No duplicate values are allowed. Note: Set only if service.lbrtype is set as NodePort. If left blank then k8s will assign random ports in between 30000 and 32767.    oudConfig.integration Specifies which Oracle components the server can be integrated with. It is recommended to choose the option covering your minimal requirements. Allowed values: no-integration (no integration), basic (Directory Integration Platform), generic (Directory Integration Platform, Database Net Services and E-Business Suite integration), eus (Directory Integration Platform, Database Net Services, E-Business Suite and Enterprise User Security integration) no-integration   elk.logStashImage The version of logstash you want to install logstash:8.3.1   elk.sslenabled If SSL is enabled for ELK set the value to true, or if NON-SSL set to false. This value must be lowercase TRUE   elk.eshosts The URL for sending logs to Elasticsearch. HTTP if NON-SSL is used https://elasticsearch.example.com:9200   elk.esuser The name of the user for logstash to access Elasticsearch logstash_internal   elk.espassword The password for ELK_USER password   elk.esapikey The API key details apikey   elk.esindex The log name oudlogs-00001   elk.imagePullSecrets secret to be used for pulling logstash image dockercred    Appendix B: Environment Variables    Environment Variable Description Default Value     ldapPort Port on which the Oracle Unified Directory instance in the container should listen for LDAP communication. Use \u0026lsquo;disabled\u0026rsquo; if you do not want to enable it. 1389   ldapsPort Port on which the Oracle Unified Directory instance in the container should listen for LDAPS communication. Use \u0026lsquo;disabled\u0026rsquo; if you do not want to enable it. 1636   rootUserDN DN for the Oracle Unified Directory instance root user. \u0026mdash;\u0026mdash;   rootUserPassword Password for the Oracle Unified Directory instance root user. \u0026mdash;\u0026mdash;   adminConnectorPort Port on which the Oracle Unified Directory instance in the container should listen for administration communication over LDAPS. Use \u0026lsquo;disabled\u0026rsquo; if you do not want to enable it. Note that at least one of the LDAP or the HTTP administration ports must be enabled. 1444   httpAdminConnectorPort Port on which the Oracle Unified Directory Instance in the container should listen for Administration Communication over HTTPS Protocol. Use \u0026lsquo;disabled\u0026rsquo; if you do not want to enable it. Note that at least one of the LDAP or the HTTP administration ports must be enabled. 1888   httpPort Port on which the Oracle Unified Directory Instance in the container should listen for HTTP Communication. Use \u0026lsquo;disabled\u0026rsquo; if you do not want to enable it. 1080   httpsPort Port on which the Oracle Unified Directory Instance in the container should listen for HTTPS Communication. Use \u0026lsquo;disabled\u0026rsquo; if you do not want to enable it. 1081   sampleData Specifies the number of sample entries to populate the Oracle Unified Directory instance with on creation. If this parameter has a non-numeric value, the parameter addBaseEntry is added to the command instead of sampleData. Similarly, when the ldifFile_n parameter is specified sampleData will not be considered and ldifFile entries will be populated. 0   adminUID User ID of the Global Administrator to use to bind to the server. This parameter is primarily used with the dsreplication command. \u0026mdash;\u0026mdash;   adminPassword Password for adminUID \u0026mdash;\u0026mdash;   bindDN1 BindDN to be used while setting up replication using dsreplication to connect to First Directory/Replication Instance. \u0026mdash;\u0026mdash;   bindPassword1 Password for bindDN1 \u0026mdash;\u0026mdash;   bindDN2 BindDN to be used while setting up replication using dsreplication to connect to Second Directory/Replication Instance. \u0026mdash;\u0026mdash;   bindPassword2 Password for bindDN2 \u0026mdash;\u0026mdash;   replicationPort Port value to be used while setting up a replication server. This variable is used to substitute values in dsreplication parameters. 1898   sourceHost Value for the hostname to be used while setting up a replication server. This variable is used to substitute values in dsreplication parameters. \u0026mdash;\u0026mdash;   initializeFromHost Value for the hostname to be used while initializing data on a new Oracle Unified Directory instance replicated from an existing instance. This variable is used to substitute values in dsreplication parameters. It is possible to have a different value for sourceHost and initializeFromHost while setting up replication with Replication Server, sourceHost can be used for the Replication Server and initializeFromHost can be used for an existing Directory instance from which data will be initialized. $sourceHost   serverTuning Values to be used to tune JVM settings. The default value is jvm-default. If specific tuning parameters are required, they can be added using this variable. jvm-default   offlineToolsTuning Values to be used to specify the tuning for offline tools. This variable if not specified will consider jvm-default as the default or specify the complete set of values with options if wanted to set to specific tuning jvm-default   generateSelfSignedCertificate Set to \u0026ldquo;true\u0026rdquo; if the requirement is to generate a self signed certificate when creating an Oracle Unified Directory instance. If no value is provided this value takes the default, \u0026ldquo;true\u0026rdquo;. If using a certificate generated separately this value should be set to \u0026ldquo;false\u0026rdquo;. true   usePkcs11Keystore Use a certificate in a PKCS#11 token that the replication gateway will use as servercertificate when accepting encrypted connections from the Oracle Directory Server Enterprise Edition server. Set to \u0026ldquo;true\u0026rdquo; if the requirement is to use the usePkcs11Keystore parameter when creating an Oracle Unified Directory instance. By default this parameter is not set. To use this option generateSelfSignedCertificate should be set to \u0026ldquo;false\u0026rdquo;. \u0026mdash;\u0026mdash;   enableStartTLS Enable StartTLS to allow secure communication with the directory server by using the LDAP port. By default this parameter is not set. To use this option generateSelfSignedCertificate should be set to \u0026ldquo;false\u0026rdquo;. \u0026mdash;\u0026mdash;   useJCEKS Specifies the path of a JCEKS that contains a certificate that the replication gateway will use as server certificate when accepting encrypted connections from the Oracle Directory Server Enterprise Edition server. If required this should specify the keyStorePath, for example, /u01/oracle/config/keystore. \u0026mdash;\u0026mdash;   useJavaKeystore Specify the path to the Java Keystore (JKS) that contains the server certificate. If required this should specify the path to the JKS, for example, /u01/oracle/config/keystore. By default this parameter is not set. To use this option generateSelfSignedCertificate should be set to \u0026ldquo;false\u0026rdquo;. \u0026mdash;\u0026mdash;   usePkcs12keyStore Specify the path to the PKCS#12 keystore that contains the server certificate. If required this should specify the path, for example, /u01/oracle/config/keystore.p12. By default this parameter is not set. \u0026mdash;\u0026mdash;   keyStorePasswordFile Use the password in the specified file to access the certificate keystore. A password is required when you specify an existing certificate (JKS, JCEKS, PKCS#11, orPKCS#12) as a server certificate. If required this should specify the path of the password file, for example, /u01/oracle/config/keystorepassword.txt. By default this parameter is not set. \u0026mdash;\u0026mdash;   eusPasswordScheme Set password storage scheme, if configuring Oracle Unified Directory for Enterprise User Security. Set this to a value of either \u0026ldquo;sha1\u0026rdquo; or \u0026ldquo;sha2\u0026rdquo;. By default this parameter is not set. \u0026mdash;\u0026mdash;   jmxPort Port on which the Directory Server should listen for JMX communication. Use \u0026lsquo;disabled\u0026rsquo; if you do not want to enable it. disabled   javaSecurityFile Specify the path to the Java security file. If required this should specify the path, for example, /u01/oracle/config/new_security_file. By default this parameter is not set. \u0026mdash;\u0026mdash;   schemaConfigFile_n \u0026lsquo;n\u0026rsquo; in the variable name represents a numeric value between 1 and 50. This variable is used to set the full path of LDIF files that need to be passed to the Oracle Unified Directory instance for schema configuration/extension. If required this should specify the path, for example, schemaConfigFile_1=/u01/oracle/config/00_test.ldif. \u0026mdash;\u0026mdash;   ldifFile_n \u0026lsquo;n\u0026rsquo; in the variable name represents a numeric value between 1 and 50. This variable is used to set the full path of LDIF files that need to be passed to the Oracle Unified Directory instance for initial data population. If required this should specify the path, for example, ldifFile_1=/u01/oracle/config/test1.ldif. \u0026mdash;\u0026mdash;   dsconfigBatchFile_n \u0026lsquo;n\u0026rsquo; in the variable name represents a numeric value between 1 and 50. This variable is used to set the full path of LDIF files that need to be passed to the Oracle Unified Directory instance for batch processing by the dsconfig command. If required this should specify the path, for example, dsconfigBatchFile_1=/u01/oracle/config/dsconfig_1.txt. When executing the dsconfig command the following values are added implicitly to the arguments contained in the batch file : ${hostname}, ${adminConnectorPort}, ${bindDN} and ${bindPasswordFile} \u0026mdash;\u0026mdash;   dstune_n \u0026lsquo;n\u0026rsquo; in the variable name represents a numeric value between 1 and 50. Allows commands and options to be passed to the dstune utility as a full command. \u0026mdash;\u0026mdash;   dsconfig_n \u0026lsquo;n\u0026rsquo; in the variable name represents a numeric value between 1 and 300. Each file represents a set of execution parameters for the dsconfig command. For each dsconfig execution, the following variables are added implicitly : ${hostname}, ${adminConnectorPort}, ${bindDN}, ${bindPasswordFile}. \u0026mdash;\u0026mdash;   dsreplication_n \u0026lsquo;n\u0026rsquo; in the variable name represents a numeric value between 1 and 50. Each file represents a set of execution parameters for the dsreplication command. For each dsreplication execution, the following variables are added implicitly : ${hostname}, ${ldapPort}, ${ldapsPort}, ${adminConnectorPort}, ${replicationPort}, ${sourceHost}, ${initializeFromHost}, and ${baseDN}. Depending on the dsreplication sub-command, the following variables are added implicitly : ${bindDN1}, ${bindPasswordFile1}, ${bindDN2}, ${bindPasswordFile2}, ${adminUID}, and ${adminPasswordFile}. \u0026mdash;\u0026mdash;   post_dsreplication_dsconfig_n \u0026lsquo;n\u0026rsquo; in the variable name represents a numeric value between 1 and 300. Each file represents a set of execution parameters for the dsconfig command to be run following execution of the dsreplication command. For each dsconfig execution, the following variables/values are added implicitly : \u0026ndash;provider-name \u0026ldquo;Multimaster Synchronization\u0026rdquo;, ${hostname}, ${adminConnectorPort}, ${bindDN}, ${bindPasswordFile}. \u0026mdash;\u0026mdash;   rebuildIndex_n \u0026lsquo;n\u0026rsquo; in the variable name represents a numeric value between 1 and 50. Each file represents a set of execution parameters for the rebuild-index command. For each rebuild-index execution, the following variables are added implicitly : ${hostname}, ${adminConnectorPort}, ${bindDN}, ${bindPasswordFile}, and ${baseDN}. \u0026mdash;\u0026mdash;   manageSuffix_n \u0026lsquo;n\u0026rsquo; in the variable name represents a numeric value between 1 and 50. Each file represents a set of execution parameters for the manage-suffix command. For each manage-suffix execution, the following variables are added implicitly : ${hostname}, ${adminConnectorPort}, ${bindDN}, ${bindPasswordFile}. \u0026mdash;\u0026mdash;   importLdif_n \u0026lsquo;n\u0026rsquo; in the variable name represents a numeric value between 1 and 50. Each file represents a set of execution parameters for the import-ldif command. For each import-ldif execution, the following variables are added implicitly : ${hostname}, ${adminConnectorPort}, ${bindDN}, ${bindPasswordFile}. \u0026mdash;\u0026mdash;   execCmd_n \u0026lsquo;n\u0026rsquo; in the variable name represents a numeric value between 1 and 300. Each file represents a command to be executed in the container. For each command execution, the following variables are replaced, if present in the command : ${hostname}, ${ldapPort}, ${ldapsPort}, ${adminConnectorPort}. \u0026mdash;\u0026mdash;   restartAfterRebuildIndex Specifies whether to restart the server after building the index. false   restartAfterSchemaConfig Specifies whether to restart the server after configuring the schema. false    Note For the following parameters above, the following statement applies:\n dsconfig_n dsreplication_n post_dsreplication_dsconfig_n rebuildIndex_n manageSuffix_n importLdif_n execCmd_n  If values are provided the following variables will be substituted with their values: ${hostname},${ldapPort},${ldapsPort},${adminConnectorPort},${replicationPort},${sourceHost},${initializeFromHost},${sourceAdminConnectorPort},${sourceReplicationPort},${baseDN},${rootUserDN},${adminUID},${rootPwdFile},${bindPasswordFile},${adminPwdFile},${bindPwdFile1},${bindPwdFile2}\n"
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oudsm/create-oudsm-instances/",
	"title": "Create Oracle Unified Directory Services Manager Instances",
	"tags": [],
	"description": "This document provides details of the oudsm Helm chart.",
	"content": " Introduction Create a Kubernetes namespace Create a Kubernetes secret for the container registry Create a persistent volume directory The oudsm Helm chart Create OUDSM instances Helm command output Verify the OUDSM deployment Undeploy an OUDSM deployment Appendix: Configuration parameters  Introduction This chapter demonstrates how to deploy Oracle Unified Directory Services Manager (OUDSM) 12c instance(s) using the Helm package manager for Kubernetes.\nBased on the configuration, this chart deploys the following objects in the specified namespace of a Kubernetes cluster.\n Service Account Secret Persistent Volume and Persistent Volume Claim Pod(s)/Container(s) for Oracle Unified Directory Services Manager Instances Services for interfaces exposed through Oracle Unified Directory Services Manager Instances Ingress configuration  Create a Kubernetes namespace Create a Kubernetes namespace for the OUDSM deployment by running the following command:\n$ kubectl create namespace \u0026lt;namespace\u0026gt; For example:\n$ kubectl create namespace oudsmns The output will look similar to the following:\nnamespace/oudsmns created Create a Kubernetes secret for the container registry Create a Kubernetes secret that stores the credentials for the container registry where the OUDSM image is stored. This step must be followed if using Oracle Container Registry or your own private container registry. If you are not using a container registry and have loaded the images on each of the master and worker nodes, you can skip this step.\n  Run the following command to create the secret:\nkubectl create secret docker-registry \u0026#34;orclcred\u0026#34; --docker-server=\u0026lt;CONTAINER_REGISTRY\u0026gt; \\ --docker-username=\u0026#34;\u0026lt;USER_NAME\u0026gt;\u0026#34; \\ --docker-password=\u0026lt;PASSWORD\u0026gt; --docker-email=\u0026lt;EMAIL_ID\u0026gt; \\ --namespace=\u0026lt;domain_namespace\u0026gt; For example, if using Oracle Container Registry:\nkubectl create secret docker-registry \u0026#34;orclcred\u0026#34; --docker-server=container-registry.oracle.com \\ --docker-username=\u0026#34;user@example.com\u0026#34; \\ --docker-password=password --docker-email=user@example.com \\ --namespace=oudsmns Replace \u0026lt;USER_NAME\u0026gt; and \u0026lt;PASSWORD\u0026gt; with the credentials for the registry with the following caveats:\n  If using Oracle Container Registry to pull the OUDSM container image, this is the username and password used to login to Oracle Container Registry. Before you can use this image you must login to Oracle Container Registry, navigate to Middleware \u0026gt; oudsm_cpu and accept the license agreement.\n  If using your own container registry to store the OUDSM container image, this is the username and password (or token) for your container registry.\n  The output will look similar to the following:\nsecret/orclcred created   Create a persistent volume directory As referenced in Prerequisites the nodes in the Kubernetes cluster must have access to a persistent volume such as a Network File System (NFS) mount or a shared file system.\nIn this example /scratch/shared/ is a shared directory accessible from all nodes.\n  On the master node run the following command to create a user_projects directory:\n$ cd \u0026lt;persistent_volume\u0026gt; $ mkdir oudsm_user_projects $ sudo chown -R 1000:0 oudsm_user_projects For example:\n$ cd /scratch/shared $ mkdir oudsm_user_projects $ sudo chown -R 1000:0 oudsm_user_projects   On the master node run the following to ensure it is possible to read and write to the persistent volume:\n$ cd \u0026lt;persistent_volume\u0026gt;/oudsm_user_projects $ touch file.txt $ ls filemaster.txt For example:\n$ cd /scratch/shared/oudsm_user_projects $ touch filemaster.txt $ ls filemaster.txt On the first worker node run the following to ensure it is possible to read and write to the persistent volume:\n$ cd /scratch/shared/oudsm_user_projects $ ls filemaster.txt $ touch fileworker1.txt $ ls fileworker1.txt Repeat the above for any other worker nodes e.g fileworker2.txt etc. Once proven that it\u0026rsquo;s possible to read and write from each node to the persistent volume, delete the files created.\n  The oudsm Helm chart The oudsm Helm chart allows you to create or deploy Oracle Unified Directory Services Manager instances along with Kubernetes objects in a specified namespace.\nThe deployment can be initiated by running the following Helm command with reference to the oudsm Helm chart, along with configuration parameters according to your environment.\ncd $WORKDIR/kubernetes/helm $ helm install --namespace \u0026lt;namespace\u0026gt; \\ \u0026lt;Configuration Parameters\u0026gt; \\ \u0026lt;deployment/release name\u0026gt; \\ \u0026lt;Helm Chart Path/Name\u0026gt; Configuration Parameters (override values in chart) can be passed on with --set arguments on the command line and/or with -f / --values arguments when referring to files.\nNote: The examples in Create OUDSM instances below provide values which allow the user to override the default values provided by the Helm chart. A full list of configuration parameters and their default values is shown in Appendix: Configuration parameters.\nFor more details about the helm command and parameters, please execute helm --help and helm install --help.\nCreate OUDSM instances You can create OUDSM instances using one of the following methods:\n Using a YAML file Using --set argument  Using a YAML file   Navigate to the $WORKDIR/kubernetes/helm directory:\n$ cd $WORKDIR/kubernetes/helm   Create an oudsm-values-override.yaml as follows:\nimage: repository: \u0026lt;image_location\u0026gt; tag: \u0026lt;image_tag\u0026gt; pullPolicy: IfNotPresent imagePullSecrets: - name: orclcred oudsm: adminUser: weblogic adminPass: \u0026lt;password\u0026gt; persistence: type: filesystem filesystem: hostPath: path: \u0026lt;persistent_volume\u0026gt;/oudsm_user_projects For example:\nimage: repository: container-registry.oracle.com/middleware/oudsm_cpu tag: 12.2.1.4-jdk8-ol8-\u0026lt;October\u0026#39;24\u0026gt; pullPolicy: IfNotPresent imagePullSecrets: - name: orclcred oudsm: adminUser: weblogic adminPass: \u0026lt;password\u0026gt; persistence: type: filesystem filesystem: hostPath: path: /scratch/shared/oudsm_user_projects The following caveats exist:\n  Replace \u0026lt;password\u0026gt; with a the relevant passwords.\n  If you are not using Oracle Container Registry or your own container registry for your OUD container image, then you can remove the following:\nimagePullSecrets: - name: orclcred   If using NFS for your persistent volume the change the persistence section as follows:\n  persistence: type: networkstorage networkstorage: nfs: path: \u0026lt;persistent_volume\u0026gt;/oudsm_user_projects server: \u0026lt;NFS IP address\u0026gt;   Run the following command to deploy OUDSM:\n$ helm install --namespace \u0026lt;namespace\u0026gt; \\ --values oudsm-values-override.yaml \\ \u0026lt;release_name\u0026gt; oudsm $ helm install --namespace oudsmns \\ --values oudsm-values-override.yaml \\ oudsm oudsm   Check the OUDSM deployment as per Verify the OUDSM deployment\n  Using --set argument   Navigate to the $WORKDIR/kubernetes/helm directory:\n$ cd $WORKDIR/kubernetes/helm   Run the following command to create OUDSM instance:\n$ helm install --namespace oudsmns \\ --set oudsm.adminUser=weblogic,oudsm.adminPass=\u0026lt;password\u0026gt;,persistence.filesystem.hostPath.path=\u0026lt;persistent_volume\u0026gt;/oudsm_user_projects,image.repository=\u0026lt;image_location\u0026gt;,image.tag=\u0026lt;image_tag\u0026gt; \\ --set imagePullSecrets[0].name=\u0026#34;orclcred\u0026#34; \\ \u0026lt;release_name\u0026gt; oudsm For example:\n$ helm install --namespace oudsmns \\ --set oudsm.adminUser=weblogic,oudsm.adminPass=\u0026lt;password\u0026gt;,persistence.filesystem.hostPath.path=/scratch/shared/oudsm_user_projects,image.repository=container-registry.oracle.com/middleware/oudsm_cpu,image.tag=12.2.1.4-jdk8-ol8-\u0026lt;October\u0026#39;24\u0026gt; \\ --set imagePullSecrets[0].name=\u0026#34;orclcred\u0026#34; \\ oudsm oudsm The following caveats exist:\n Replace \u0026lt;password\u0026gt; with a the relevant password. If you are not using Oracle Container Registry or your own container registry for your OUDSM container image, then you can remove the following: --set imagePullSecrets[0].name=\u0026quot;orclcred\u0026quot; If using using NFS for your persistent volume then use persistence.networkstorage.nfs.path=\u0026lt;persistent_volume\u0026gt;/oudsm_user_projects,persistence.networkstorage.nfs.server:\u0026lt;NFS IP address\u0026gt;.    Check the OUDSM deployment as per Verify the OUDSM deployment\n  Helm command output In all the examples above, the following output is shown following a successful execution of the helm install command.\nNAME: oudsm LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oudsmns STATUS: deployed REVISION: 1 TEST SUITE: None Verify the OUDSM deployment Run the following command to verify the OUDSM deployment:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; get pod,service,secret,pv,pvc,ingress -o wide For example:\n$ kubectl --namespace oudsmns get pod,service,secret,pv,pvc,ingress -o wide The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oudsm-1 1/1 Running 0 73m 10.244.0.19 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service/oudsm-1 ClusterIP 10.96.108.200 \u0026lt;none\u0026gt; 7001/TCP,7002/TCP 73m app.kubernetes.io/instance=oudsm,app.kubernetes.io/name=oudsm,oudsm/instance=oudsm-1 service/oudsm-lbr ClusterIP 10.96.41.201 \u0026lt;none\u0026gt; 7001/TCP,7002/TCP 73m app.kubernetes.io/instance=oudsm,app.kubernetes.io/name=oudsm NAME TYPE DATA AGE secret/orclcred kubernetes.io/dockerconfigjson 1 3h13m secret/oudsm-creds opaque 2 73m secret/oudsm-token-ksr4g kubernetes.io/service-account-token 3 73m secret/sh.helm.release.v1.oudsm.v1 helm.sh/release.v1 1 73m NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE VOLUMEMODE persistentvolume/oudsm-pv 30Gi RWX Retain Bound myoudsmns/oudsm-pvc manual 73m Filesystem NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE VOLUMEMODE persistentvolumeclaim/oudsm-pvc Bound oudsm-pv 30Gi RWX manual 73m Filesystem NAME HOSTS ADDRESS PORTS AGE ingress.extensions/oudsm-ingress-nginx oudsm-1,oudsm-2,oudsm + 1 more... 100.102.51.230 80 73m Note: It will take several minutes before all the services listed above show. While the oudsm pods have a STATUS of 0/1 the pod is started but the OUDSM server associated with it is currently starting. While the pod is starting you can check the startup status in the pod logs, by running the following command:\n$ kubectl logs oudsm-1 -n oudsmns Note : If the OUDSM deployment fails additionally refer to Troubleshooting for instructions on how describe the failing pod(s). Once the problem is identified follow Undeploy an OUDSM deployment to clean down the deployment before deploying again.\nKubernetes Objects Kubernetes objects created by the Helm chart are detailed in the table below:\n   Type Name Example Name Purpose     Service Account \u0026lt;deployment/release name\u0026gt; oudsm Kubernetes Service Account for the Helm Chart deployment   Secret \u0026lt;deployment/release name\u0026gt;-creds oudsm-creds Secret object for Oracle Unified Directory Services Manager related critical values like passwords   Persistent Volume \u0026lt;deployment/release name\u0026gt;-pv oudsm-pv Persistent Volume for user_projects mount.   Persistent Volume Claim \u0026lt;deployment/release name\u0026gt;-pvc oudsm-pvc Persistent Volume Claim for user_projects mount.   Pod \u0026lt;deployment/release name\u0026gt;-N oudsm-1, oudsm-2, \u0026hellip; Pod(s)/Container(s) for Oracle Unified Directory Services Manager Instances   Service \u0026lt;deployment/release name\u0026gt;-N oudsm-1, oudsm-2, \u0026hellip; Service(s) for HTTP and HTTPS interfaces from Oracle Unified Directory Services Manager instance \u0026lt;deployment/release name\u0026gt;-N   Ingress \u0026lt;deployment/release name\u0026gt;-ingress-nginx oudsm-ingress-nginx Ingress Rules for HTTP and HTTPS interfaces.     In the table above, the Example Name for each Object is based on the value \u0026lsquo;oudsm\u0026rsquo; as the deployment/release name for the Helm chart installation.  Ingress Configuration With an OUDSM instance now deployed you are now ready to configure an ingress controller to direct traffic to OUDSM as per Configure an ingress for an OUDSM.\nUndeploy an OUDSM deployment Delete the OUDSM deployment   Find the deployment release name:\n$ helm --namespace \u0026lt;namespace\u0026gt; list For example:\n$ helm --namespace oudsmns list The output will look similar to the following:\nNAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION oudsm oudsmns 2 \u0026lt;DATE\u0026gt; deployed oudsm-0.1 12.2.1.4.0   Delete the deployment using the following command:\n$ helm uninstall --namespace \u0026lt;namespace\u0026gt; \u0026lt;release\u0026gt; For example:\n$ helm uninstall --namespace oudsmns oudsm release \u0026#34;oudsm\u0026#34; uninstalled   Delete the persistent volume contents   Delete the contents of the oudsm_user_projects directory in the persistent volume:\n$ cd \u0026lt;persistent_volume\u0026gt;/oudsm_user_projects $ rm -rf * For example:\n$ cd /scratch/shared/oudsm_user_projects $ rm -rf *   Appendix: Configuration Parameters The following table lists the configurable parameters of the \u0026lsquo;oudsm\u0026rsquo; chart and their default values.\n   Parameter Description Default Value     replicaCount Number of Oracle Unified Directory Services Manager instances/pods/services to be created 1   restartPolicyName restartPolicy to be configured for each POD containing Oracle Unified Directory Services Manager instance OnFailure   image.repository Oracle Unified Directory Services Manager Image Registry/Repository and name. Based on this, image parameter would be configured for Oracle Unified Directory Services Manager pods/containers oracle/oudsm   image.tag Oracle Unified Directory Services Manager Image Tag. Based on this, image parameter would be configured for Oracle Unified Directory Services Manager pods/containers 12.2.1.4.0   image.pullPolicy policy to pull the image IfnotPresent   imagePullSecrets.name name of Secret resource containing private registry credentials regcred   nameOverride override the fullname with this name    fullnameOverride Overrides the fullname with the provided string    serviceAccount.create Specifies whether a service account should be created true   serviceAccount.name If not set and create is true, a name is generated using the fullname template oudsm-\u0026lt; fullname \u0026gt;-token-\u0026lt; randomalphanum \u0026gt;   podSecurityContext Security context policies to add to the controller pod    securityContext Security context policies to add by default    service.type type of controller service to create ClusterIP   nodeSelector node labels for pod assignment    tolerations node taints to tolerate    affinity node/pod affinities    ingress.enabled  true   ingress.type Supported value: nginx nginx   ingress.host Hostname to be used with Ingress Rules. If not set, hostname would be configured according to fullname. Hosts would be configured as \u0026lt; fullname \u0026gt;-http.\u0026lt; domain \u0026gt;, \u0026lt; fullname \u0026gt;-http-0.\u0026lt; domain \u0026gt;, \u0026lt; fullname \u0026gt;-http-1.\u0026lt; domain \u0026gt;, etc.    ingress.domain Domain name to be used with Ingress Rules. In ingress rules, hosts would be configured as \u0026lt; host \u0026gt;.\u0026lt; domain \u0026gt;, \u0026lt; host \u0026gt;-0.\u0026lt; domain \u0026gt;, \u0026lt; host \u0026gt;-1.\u0026lt; domain \u0026gt;, etc.    ingress.backendPort  http   ingress.nginxAnnotations  { kubernetes.io/ingress.class: \u0026ldquo;nginx\u0026quot;nginx.ingress.kubernetes.io/affinity-mode: \u0026ldquo;persistent\u0026rdquo; nginx.ingress.kubernetes.io/affinity: \u0026ldquo;cookie\u0026rdquo; }   ingress.ingress.tlsSecret Secret name to use an already created TLS Secret. If such secret is not provided, one would be created with name \u0026lt; fullname \u0026gt;-tls-cert. If the TLS Secret is in different namespace, name can be mentioned as \u0026lt; namespace \u0026gt;/\u0026lt; tlsSecretName \u0026gt;    ingress.certCN Subject\u0026rsquo;s common name (cn) for SelfSigned Cert. \u0026lt; fullname \u0026gt;   ingress.certValidityDays Validity of Self-Signed Cert in days 365   secret.enabled If enabled it will use the secret created with base64 encoding. if value is false, secret would not be used and input values (through \u0026ndash;set, \u0026ndash;values, etc.) would be used while creation of pods. true   secret.name secret name to use an already created Secret oudsm-\u0026lt; fullname \u0026gt;-creds   secret.type Specifies the type of the secret Opaque   persistence.enabled If enabled, it will use the persistent volume. if value is false, PV and PVC would not be used and pods would be using the default emptyDir mount volume. true   persistence.pvname pvname to use an already created Persistent Volume , If blank will use the default name oudsm-\u0026lt; fullname \u0026gt;-pv   persistence.pvcname pvcname to use an already created Persistent Volume Claim , If blank will use default name oudsm-\u0026lt; fullname \u0026gt;-pvc   persistence.type supported values: either filesystem or networkstorage or custom filesystem   persistence.filesystem.hostPath.path The path location mentioned should be created and accessible from the local host provided with necessary privileges for the user. /scratch/shared/oudsm_user_projects   persistence.networkstorage.nfs.path Path of NFS Share location /scratch/shared/oudsm_user_projects   persistence.networkstorage.nfs.server IP or hostname of NFS Server 0.0.0.0   persistence.custom.* Based on values/data, YAML content would be included in PersistenceVolume Object    persistence.accessMode Specifies the access mode of the location provided ReadWriteMany   persistence.size Specifies the size of the storage 10Gi   persistence.storageClass Specifies the storageclass of the persistence volume. empty   persistence.annotations specifies any annotations that will be used { }   oudsm.adminUser Weblogic Administration User weblogic   oudsm.adminPass Password for Weblogic Administration User    oudsm.startupTime Expected startup time. After specified seconds readinessProbe would start 900   oudsm.livenessProbeInitialDelay Paramter to decide livenessProbe initialDelaySeconds 1200   elk.logStashImage The version of logstash you want to install logstash:8.3.1   elk.sslenabled If SSL is enabled for ELK set the value to true, or if NON-SSL set to false. This value must be lowercase TRUE   elk.eshosts The URL for sending logs to Elasticsearch. HTTP if NON-SSL is used https://elasticsearch.example.com:9200   elk.esuser The name of the user for logstash to access Elasticsearch logstash_internal   elk.espassword The password for ELK_USER password   elk.esapikey The API key details apikey   elk.esindex The log name oudsmlogs-00001   elk.imagePullSecrets secret to be used for pulling logstash image dockercred    "
},
{
	"uri": "/fmw-kubernetes/24.4.1/ohs/create-ohs-container/",
	"title": "Create the OHS Container and Nodeport",
	"tags": [],
	"description": "Deploying the OHS Container and Nodeport",
	"content": "  Introduction\n  Create the OHS Nodeport\n  Create the OHS Container\n  Validating the OHS Container\na. Validating the OHS container file system\nb. Validating the OHS nodeport\n  Introduction This section demonstrates how to create the OHS container and OHS nodeport.\nThe OHS nodeport is the Kubernetes entry port (HTTP/HTTPS) for OHS , for example 31777 (HTTP) and 31443 (HTTPS).\nCreate the OHS Nodeport In this section you create the OHS nodeport using the $MYOHSFILES/ohs_service.yaml.\nThe nodeport is the entry point for OHS. For example http://ohs.example.com:31777 or https://ohs.example.com:31443\n  Edit the $MYOHSFILES/ohs_service.yaml and make the following changes:\n \u0026lt;NAMESPACE\u0026gt; to your namespace, for example ohsns. If you want your OHS node port to listen on something other that 31777 and 31443, change accordingly If you are using your own httpd.conf file and have changed the port to anything other than 7777, you must change the targetPort and port to match. If you are using your own ssl.conf file and have changed the port to anything other than 4443, you must change the targetPort and port to match.  kind: Service apiVersion: v1 metadata: name: ohs-domain-nodeport namespace: ohsns spec: selector: oracle: ohs type: NodePort ports: - port: 7777 name: http targetPort: 7777 nodePort: 31777 protocol: TCP - port: 4443 name: https targetPort: 4443 nodePort: 31443 protocol: TCP   Run the following command to create a Kubernetes service nodeport for OHS.\nNote: Administrators should be aware of the following:\n As this is a Kubernetes service the port is accessible on all the worker nodes in the cluster. If you create another OHS container on a different port, you will need to create another nodeport service for that OHS.  $ kubectl create -f $MYOHSFILES/ohs_service.yaml The output will look similar to the following:\nservice/ohs-domain-nodeport created   Validate the service has been created using the command:\n$ kubectl get service -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get service -n ohsns The output will look similar to the following:\nNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE ohs-domain-nodeport NodePort 10.98.163.75 \u0026lt;none\u0026gt; 7777:31777/TCP,4443:31443/TCP 22s   Create the OHS Container In this section you create the OHS container using the ohs.yaml file created in Prepare the ohs.yaml file.\n  Run the following command to create the OHS container:\n$ kubectl create -f $MYOHSFILES/ohs.yaml The output will look similar to the following:\nconfigmap/ohs-script-configmap created deployment.apps/ohs-domain created Run the following command to view the status of the pods:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; -w For example:\n$ kubectl get pods -n ohsns -w Whilst the OHS container is creating you, may see:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-vkp4s 0/1 ContainerCreating 0 2m13s To check what is happening while the pod is in ContainerCreating status, you can run:\nkubectl describe pod \u0026lt;podname\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe pod ohs-domain-d5b648bc5-vkp4s -n ohsns Once the container is created, it will go to a READY status of 0/1 with STATUS of Running. For example:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-vkp4s 1/1 Running 0 3m10s To check what is happening while the pod is in this status, you can run:\n$ kubectl logs -f \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; Once everything is started you should see the OHS is running (READY 1/1):\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-vkp4s 1/1 Running 0 4m10s If there are any failures, follow Troubleshooting.\n  Validating the OHS Container In this section you validate the OHS container and check you can access OHS using the nodeport.\nValidating the OHS container file system To validate the OHS container file system:\n  Run the following command to get the name of the OHS container:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods -n ohsns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-vkp4s 1/1 Running 0 5m34s   Run the following command to create a bash shell inside the container:\n$ kubectl exec -n \u0026lt;namespace\u0026gt; -ti \u0026lt;pod\u0026gt; -- /bin/bash For example:\n$ kubectl exec -n ohsns -ti ohs-domain-79f8f99575-8qwfh -- /bin/bash This will take you to a bash shell inside the container:\n[oracle@ohs-domain-75fbd9b597-z77d8 oracle]$   Inside the bash shell navigate to the /u01/oracle/user_projects/domains/ohsDomain/config/fmwconfig/components/OHS/ohs1/ directory:\ncd /u01/oracle/user_projects/domains/ohsDomain/config/fmwconfig/components/OHS/ohs1/ From within this directory, you can navigate around and list (ls) or cat any files you configured using the configmaps.\n  Validating the OHS nodeport In this section you validate the OHS nodeport by accessing the OHS URL\u0026rsquo;s.\nIn the examples below, ${OHS-HOSTNAME} refers to the hostname.domain of the server where the OHS nodeport was deployed. ${OHS-NODEPORT} refers to the nodePort specified in your ohs-service.yaml, for example 31777for HTTP, or 31443 for HTTPS.\nNote: If OHS is accessed via a loadbalancer, replace ${OHS-HOSTNAME} and ${OHS-NODEPORT} with the loadbalancer hostname.domain and port.\nIf you have any problems accessing the URL\u0026rsquo;s, refer to Troubleshooting.\nLaunch a browser and access the following:\nNote: If you have deployed OHS with WebGate, then it will depend on your policy setup as to whether the URL\u0026rsquo;s below are accessible or not.\na) The OHS homepage http(s)://${OHS-HOSTNAME}:${OHS-NODEPORT}.\nb) Any other files copied in your ohs-htdocs configmap, for example http(s)://${OHS-HOSTNAME}:${OHS-NODEPORT}/mypage.html.\nc) Any files from directories crested under htdocs, for example the ohs-myapp configmap, for example http(s)://${OHS-HOSTNAME}:${OHS-NODEPORT}/myapp.\nd) Any URI\u0026rsquo;s defined for mod_wl_ohs in your httpd.conf, ssl.conf or moduleconf/*.conf files, for example http(s)://${OHS-HOSTNAME}:${OHS-NODEPORT}/console.\ne) If WebGate is deployed, any protected applications, for example http(s)://${OHS-HOSTNAME}:${OHS-NODEPORT}/myprotectedapp.\n"
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/configure-ingress/",
	"title": "Configure an Ingress for an OAM domain",
	"tags": [],
	"description": "This document provides steps to configure an Ingress to direct traffic to the OAM domain.",
	"content": "Configuring an ingress for NGINX for the OAM Domain The instructions below explain how to set up NGINX as an ingress for the OAM domain.\nThe ingress can be configured in the following ways:\n Without SSL With SSL OAM URI\u0026rsquo;s are accessible from all hosts OAM URI\u0026rsquo;s are accessible using virtual hostnames only  The option you choose will depend on the architecture you are configuring. For example, if you have an architecture such as Oracle HTTP Server on an independent Kubernetes cluster, where SSL is terminated at the load balancer, then you would configure the ingress without SSL.\nIn almost all circumstances, the ingress should be configured to be accessible from all hosts (using host.enabled: false in the values.yaml). You can only configure ingress to use virtual hostnames only (using host.enabled: true in the values.yaml), if all of the following criteria are met:\n SSL is terminated at the load balancer The SSL port is 443 You have separate hostnames for OAM administration URL\u0026rsquo;s (for example https://admin.example.com/console), and OAM runtime URL\u0026rsquo;s (for example https://runtime.example.com/oam/server).  See, Prepare the values.yaml for the ingress for more details.\nThe steps to generate an ingress are as follows:\n Install NGINX Generate a SSL Certificate Create an ingress controller Prepare the values.yaml for the ingress Create the Ingress Verify that you can access the domain URL  Install NGINX Use helm to install NGINX.\n  Add the helm chart repository for NGINX using the following command:\n$ helm repo add stable https://kubernetes.github.io/ingress-nginx The output will look similar to the following:\n\u0026quot;stable\u0026quot; has been added to your repositories   Update the repository using the following command:\n$ helm repo update The output will look similar to the following:\nHang tight while we grab the latest from your chart repositories... ...Successfully got an update from the \u0026quot;stable\u0026quot; chart repository Update Complete. ⎈ Happy Helming!⎈   Generate a SSL Certificate This section should only be followed if you want to configure your ingress for SSL.\n  Generate a private key and certificate signing request (CSR) using a tool of your choice. Send the CSR to your certificate authority (CA) to generate the certificate.\nIf you want to use a certificate for testing purposes you can generate a self signed certificate using openssl:\n$ mkdir \u0026lt;workdir\u0026gt;/ssl $ cd \u0026lt;workdir\u0026gt;/ssl $ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj \u0026#34;/CN=\u0026lt;nginx-hostname\u0026gt;\u0026#34; For example:\n$ mkdir /scratch/OAMK8S/ssl $ cd /scratch/OAMK8S/ssl $ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj \u0026#34;/CN=masternode.example.com\u0026#34; Note: The CN should match the host.domain of the master node in order to prevent hostname problems during certificate verification.\nThe output will look similar to the following:\nGenerating a 2048 bit RSA private key ..........................................+++ .......................................................................................................+++ writing new private key to 'tls.key' -----   Create a secret for SSL by running the following command:\n$ kubectl -n oamns create secret tls \u0026lt;domain_uid\u0026gt;-tls-cert --key \u0026lt;workdir\u0026gt;/tls.key --cert \u0026lt;workdir\u0026gt;/tls.crt For example:\n$ kubectl -n oamns create secret tls accessdomain-tls-cert --key /scratch/OAMK8S/ssl/tls.key --cert /scratch/OAMK8S/ssl/tls.crt The output will look similar to the following:\nsecret/accessdomain-tls-cert created   Create an ingress controller In this section you create an ingress controller.\nIf you can connect directly to the master node IP address from a browser, then install NGINX with the --set controller.service.type=NodePort parameter.\nIf you are using a Managed Service for your Kubernetes cluster, for example Oracle Kubernetes Engine (OKE) on Oracle Cloud Infrastructure (OCI), and connect from a browser to the Load Balancer IP address, then use the --set controller.service.type=LoadBalancer parameter. This instructs the Managed Service to setup a Load Balancer to direct traffic to the NGINX ingress.\nThe instructions below use --set controller.service.type=NodePort. If using a managed service, change to --set controller.service.type=LoadBalancer.\nThe following sections show how to install the ingress with SSL or without SSL. Follow the relevant section based on your architecture.\nConfigure an ingress controller with SSL   To configure the ingress controller to use SSL, run the following command:\n$ helm install nginx-ingress -n \u0026lt;domain_namespace\u0026gt; --set controller.service.nodePorts.http=\u0026lt;http_port\u0026gt; --set controller.service.nodePorts.https=\u0026lt;https_port\u0026gt; --set controller.extraArgs.default-ssl-certificate=\u0026lt;domain_namespace\u0026gt;/\u0026lt;ssl_secret\u0026gt; --set controller.service.type=\u0026lt;type\u0026gt; --set controller.config.use-forwarded-headers=true --set controller.config.enable-underscores-in-headers=true --set controller.admissionWebhooks.enabled=false stable/ingress-nginx where:\n \u0026lt;domain_namespace\u0026gt; is your namespace, for example oamns. \u0026lt;http_port\u0026gt; is the HTTP port that you want the controller to listen on, for example 30777. \u0026lt;https_port\u0026gt; is the HTTPS port that you want the controller to listen on, for example 30443. \u0026lt;type\u0026gt; is the controller type. If using NodePort set to NodePort. If using a managed service set to LoadBalancer. If using LoadBalancer remove --set controller.service.nodePorts.http=\u0026lt;http_port\u0026gt; and --set controller.service.nodePorts.https=\u0026lt;https_port\u0026gt;. \u0026lt;ssl_secret\u0026gt; is the secret you created in Generate a SSL Certificate.  For example:\n$ helm install nginx-ingress -n oamns --set controller.service.nodePorts.http=30777 --set controller.service.nodePorts.https=30443 --set controller.extraArgs.default-ssl-certificate=oamns/accessdomain-tls-cert --set controller.service.type=NodePort --set controller.config.use-forwarded-headers=true --set controller.config.enable-underscores-in-headers=true --set controller.admissionWebhooks.enabled=false stable/ingress-nginx --version 4.7.2 The output will look similar to the following:\nNAME: nginx-ingress LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oamns STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The nginx-ingress controller has been installed. Get the application URL by running these commands: export HTTP_NODE_PORT=30777 export HTTPS_NODE_PORT=30443 export NODE_IP=$(kubectl --namespace oamns get nodes -o jsonpath=\u0026quot;{.items[0].status.addresses[1].address}\u0026quot;) echo \u0026quot;Visit http://$NODE_IP:$HTTP_NODE_PORT to access your application via HTTP.\u0026quot; echo \u0026quot;Visit https://$NODE_IP:$HTTPS_NODE_PORT to access your application via HTTPS.\u0026quot; An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1 kind: Ingress metadata: annotations: kubernetes.io/ingress.class: nginx name: example namespace: foo spec: ingressClassName: example-class rules: - host: www.example.com http: paths: - path: / pathType: Prefix backend: service: name: exampleService port: 80 # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls   Configure an ingress controller without SSL   To configure the ingress controller without SSL, run the following command:\n$ helm install nginx-ingress -n \u0026lt;domain_namespace\u0026gt; --set controller.service.nodePorts.http=\u0026lt;http_port\u0026gt; --set controller.service.type=NodePort --set controller.config.use-forwarded-headers=true --set controller.config.enable-underscores-in-headers=true --set controller.admissionWebhooks.enabled=false stable/ingress-nginx where:\n \u0026lt;domain_namespace\u0026gt; is your namespace, for example oamns. \u0026lt;http_port\u0026gt; is the HTTP port that you want the controller to listen on, for example 30777. \u0026lt;type\u0026gt; is the controller type. If using NodePort set to NodePort. If using a managed service set to LoadBalancer. If using LoadBalancer remove --set controller.service.nodePorts.http=\u0026lt;http_port\u0026gt;.  For example:\n$ helm install nginx-ingress -n oamns --set controller.service.nodePorts.http=30777 --set controller.service.type=NodePort --set controller.config.use-forwarded-headers=true --set controller.config.enable-underscores-in-headers=true --set controller.admissionWebhooks.enabled=false stable/ingress-nginx --version 4.7.2 The output will look similar to the following:\nNAME: nginx-ingress LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oamns STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The nginx-ingress controller has been installed. Get the application URL by running these commands: export HTTP_NODE_PORT=30777 export HTTPS_NODE_PORT=$(kubectl --namespace oamns get services -o jsonpath=\u0026quot;{.spec.ports[1].nodePort}\u0026quot; nginx-ingress-ingress-nginx-controller) export NODE_IP=$(kubectl --namespace oamns get nodes -o jsonpath=\u0026quot;{.items[0].status.addresses[1].address}\u0026quot;) echo \u0026quot;Visit http://$NODE_IP:$HTTP_NODE_PORT to access your application via HTTP.\u0026quot; echo \u0026quot;Visit https://$NODE_IP:$HTTPS_NODE_PORT to access your application via HTTPS.\u0026quot; An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1 kind: Ingress metadata: annotations: kubernetes.io/ingress.class: nginx name: example namespace: foo spec: ingressClassName: example-class rules: - host: www.example.com http: paths: - path: / pathType: Prefix backend: service: name: exampleService port: 80 # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls   Prepare the values.yaml for the ingress   Navigate to the following directory and make a copy of the values.yaml:\n$ cd $WORKDIR/kubernetes/charts/ingress-per-domain $ cp values.yaml $WORKDIR/   Edit the $WORKDIR/kubernetes/charts/ingress-per-domain/values.yaml and modify the following parameters if required:\n domainUID: - If you created your OAM domain with anything other than the default accessdomain, change accordingly. sslType: - Values supported are SSL and NONSSL. If you created your ingress controller to use SSL then set to SSL, otherwise set to NONSSL. hostName.enabled: false - This should be set to false in almost all circumstances. Setting to false allows OAM URI\u0026rsquo;s to be accessible from all hosts. Setting to true configures ingress for virtual hostnames only. See Configuring an ingress for NGINX for the OAM Domain for full details of the criteria that must be met set to this value to true. hostName.admin: \u0026lt;hostname\u0026gt; - Should only be set if hostName.enabled: true and sslType: NONSSL. This should be set to the hostname.domain of the URL you access OAM administration URL\u0026rsquo;s from, for example if you access the OAM Administration Console via https://admin.example.com/oamconsole, then set to admin.example.com. hostName.runtime: \u0026lt;hostname\u0026gt; - Should only be set if hostName.enabled: true. This should be set to the hostname.domain of the URL you access OAM runtime URL\u0026rsquo;s from, for example if the oam/server URI is accessed via https://runtime.example.com/oam/server, then set to runtime.example.com.  The following shows example files based on different configuration types:\n  Click here to see a values.yaml for SSL   # Load balancer type. Supported values are: NGINX type: NGINX # Type of Configuration Supported Values are : SSL and NONSSL sslType: SSL # domainType. Supported values are: oam domainType: oam #WLS domain as backend to the load balancer wlsDomain: domainUID: accessdomain adminServerName: AdminServer adminServerPort: 7001 adminServerSSLPort: oamClusterName: oam_cluster oamManagedServerPort: 14100 oamManagedServerSSLPort: policyClusterName: policy_cluster policyManagedServerPort: 15100 policyManagedServerSSLPort: # Host specific values hostName: enabled: false admin: runtime:      Click here to see a values.yaml for NONSSL using all hostnames   # Load balancer type. Supported values are: NGINX type: NGINX # Type of Configuration Supported Values are : SSL and NONSSL sslType: NONSSL # domainType. Supported values are: oam domainType: oam #WLS domain as backend to the load balancer wlsDomain: domainUID: accessdomain adminServerName: AdminServer adminServerPort: 7001 adminServerSSLPort: oamClusterName: oam_cluster oamManagedServerPort: 14100 oamManagedServerSSLPort: policyClusterName: policy_cluster policyManagedServerPort: 15100 policyManagedServerSSLPort: # Host specific values hostName: enabled: false admin: runtime:      Click here to see a values.yaml for NONSSL using virtual hostnames   # Load balancer type. Supported values are: NGINX type: NGINX # Type of Configuration Supported Values are : SSL and NONSSL sslType: NONSSL # domainType. Supported values are: oam domainType: oam #WLS domain as backend to the load balancer wlsDomain: domainUID: accessdomain adminServerName: AdminServer adminServerPort: 7001 adminServerSSLPort: oamClusterName: oam_cluster oamManagedServerPort: 14100 oamManagedServerSSLPort: policyClusterName: policy_cluster policyManagedServerPort: 15100 policyManagedServerSSLPort: # Host specific values hostName: enabled: true admin: admin.example.com runtime: runtime.example.com      Create the ingress   Run the following helm command to create the ingress:\n$ cd $WORKDIR $ helm install oam-nginx kubernetes/charts/ingress-per-domain --namespace \u0026lt;domain_namespace\u0026gt; --values kubernetes/charts/ingress-per-domain/values.yaml For example:\n$ cd $WORKDIR $ helm install oam-nginx kubernetes/charts/ingress-per-domain --namespace oamns --values kubernetes/charts/ingress-per-domain/values.yaml The output will look similar to the following:\nNAME: oam-nginx LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oamns STATUS: deployed REVISION: 1 TEST SUITE: None   Run the following command to show the ingress is created successfully:\n$ kubectl get ing -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get ing -n oamns If hostname.enabled: false, the output will look similar to the following:\nNAME CLASS HOSTS ADDRESS PORTS AGE accessdomain-nginx \u0026lt;none\u0026gt; * 80 5s If hostname.enabled: true, the output will look similar to the following:\nNAME CLASS HOSTS ADDRESS PORTS AGE oamadmin-ingress nginx admin.example.com 80 14s oamruntime-ingress nginx runtime.example.com 80 14s ``\n  Run the following command to check the ingress:\n$ kubectl describe ing \u0026lt;ingress\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe ing accessdomain-nginx -n oamns The output will look similar to the following for accessdomain-nginx:\nName: accessdomain-nginx Labels: app.kubernetes.io/managed-by=Helm Namespace: oamns Address: Ingress Class: \u0026lt;none\u0026gt; Default backend: \u0026lt;default\u0026gt; Rules: Host Path Backends ---- ---- -------- * /console accessdomain-adminserver:7001 (10.244.1.200:7001) /consolehelp accessdomain-adminserver:7001 (10.244.1.200:7001) /rreg/rreg accessdomain-adminserver:7001 (10.244.1.200:7001) /em accessdomain-adminserver:7001 (10.244.1.200:7001) /oamconsole accessdomain-adminserver:7001 (10.244.1.200:7001) /dms accessdomain-adminserver:7001 (10.244.1.200:7001) /oam/services/rest accessdomain-adminserver:7001 (10.244.1.200:7001) /iam/admin/config accessdomain-adminserver:7001 (10.244.1.200:7001) /iam/admin/diag accessdomain-adminserver:7001 (10.244.1.200:7001) /iam/access accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /oam/admin/api accessdomain-adminserver:7001 (10.244.1.200:7001) /oam/services/rest/access/api accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /access accessdomain-cluster-policy-cluster:15100 (10.244.2.126:15100) /oam accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) / accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) Annotations: meta.helm.sh/release-name: oam-nginx meta.helm.sh/release-namespace: oamns nginx.ingress.kubernetes.io/enable-access-log: false nginx.ingress.kubernetes.io/proxy-buffer-size: 2000k Events: \u0026lt;none\u0026gt; Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 33s nginx-ingress-controller Scheduled for sync The output will look similar to the following for oamadmin-ingress:\nName: oamadmin-ingress Labels: app.kubernetes.io/managed-by=Helm Namespace: oamns Address: Ingress Class: nginx Default backend: \u0026lt;default\u0026gt; Rules: Host Path Backends ---- ---- -------- admin.example.com /console accessdomain-adminserver:7001 (10.244.1.200:7001) /consolehelp accessdomain-adminserver:7001 (10.244.1.200:7001) /rreg/rreg accessdomain-adminserver:7001 (10.244.1.200:7001) /em accessdomain-adminserver:7001 (10.244.1.200:7001) /oamconsole accessdomain-adminserver:7001 (10.244.1.200:7001) /dms accessdomain-adminserver:7001 (10.244.1.200:7001) /oam/services/rest accessdomain-adminserver:7001 (10.244.1.200:7001) /iam/admin/config accessdomain-adminserver:7001 (10.244.1.200:7001) /oam/admin/api accessdomain-adminserver:7001 (10.244.1.200:7001) /iam/admin/diag accessdomain-adminserver:7001 (10.244.1.200:7001) /oam/services accessdomain-adminserver:7001 (10.244.1.200:7001) /iam/admin accessdomain-adminserver:7001 (10.244.1.200:7001) /oam/services/rest/11.1.2.0.0 accessdomain-adminserver:7001 (10.244.1.200:7001) /oam/services/rest/ssa accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /access accessdomain-cluster-policy-cluster:15100 (10.244.2.126:15100) Annotations: meta.helm.sh/release-name: oam-nginx meta.helm.sh/release-namespace: oamns nginx.ingress.kubernetes.io/affinity: cookie nginx.ingress.kubernetes.io/enable-access-log: false nginx.ingress.kubernetes.io/ingress.allow-http: true nginx.ingress.kubernetes.io/proxy-buffer-size: 2000k nginx.ingress.kubernetes.io/ssl-redirect: false Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 32s nginx-ingress-controller Scheduled for sync The output will look similar to the following for oamruntime-ingress:\nName: oamruntime-ingress Labels: app.kubernetes.io/managed-by=Helm Namespace: oamns Address: 10.106.62.184 Ingress Class: nginx Default backend: \u0026lt;default\u0026gt; Rules: Host Path Backends ---- ---- -------- runtime.example.com /ms_oauth accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /oam/services/rest/auth accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /oam/services/rest/access accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /oamfed accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /otpfp/ accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /oauth2 accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /oam accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /.well-known/openid-configuration accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /.well-known/oidc-configuration accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /CustomConsent accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) /iam/access accessdomain-cluster-oam-cluster:14100 (10.244.2.127:14100) Annotations: meta.helm.sh/release-name: oam-nginx meta.helm.sh/release-namespace: oamns nginx.ingress.kubernetes.io/affinity: cookie nginx.ingress.kubernetes.io/enable-access-log: false nginx.ingress.kubernetes.io/proxy-buffer-size: 2000k Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 3m34s (x2 over 4m10s) nginx-ingress-controller Scheduled for sync   To confirm that the new ingress is successfully routing to the domain\u0026rsquo;s server pods, run the following command to send a request to the OAM Administration Console:\nFor SSL:\n$ curl -v -k https://${HOSTNAME}:${PORT}/oamconsole For NON SSL:\n$ curl -v http://${HOSTNAME}:${PORT}/oamconsole The ${HOSTNAME}:${PORT} to use depends on the value set for hostName.enabled. If hostName.enabled: false use the hostname and port where the ingress controller is installed, for example http://masternode.example.com:30777.\nIf using hostName.enabled: true then you can only access via the admin hostname, for example https://admin.example.com/oamconsole. Note: You can only access via the admin URL if it is currently accessible and routing correctly to the ingress host and port.\nFor example:\n$ curl -v http://masternode.example.com:30777/oamconsole The output will look similar to the following. You should receive a 302 Moved Temporarily message:\n\u0026gt; GET /oamconsole HTTP/1.1 \u0026gt; Host: masternode.example:30777 \u0026gt; User-Agent: curl/7.61.1 \u0026gt; Accept: */* \u0026gt; \u0026lt; HTTP/1.1 302 Moved Temporarily \u0026lt; Date: \u0026lt;DATE\u0026gt; \u0026lt; Content-Type: text/html \u0026lt; Content-Length: 333 \u0026lt; Connection: keep-alive \u0026lt; Location: http://masternode.example.com:30777/oamconsole/ \u0026lt; X-Content-Type-Options: nosniff \u0026lt; X-Frame-Options: DENY \u0026lt; \u0026lt;html\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;302 Moved Temporarily\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body bgcolor=\u0026quot;#FFFFFF\u0026quot;\u0026gt; \u0026lt;p\u0026gt;This document you requested has moved temporarily.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;It's now at \u0026lt;a href=\u0026quot;http://masternode.example.com:30777/oamconsole/\u0026quot;\u0026gt;http://masternode.example.com:30777/oamconsole/\u0026lt;/a\u0026gt;.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; * Connection #0 to host doc-master.lcma.susengdev2phx.oraclevcn.com left intact   Verify that you can access the domain URLs After setting up the NGINX ingress, verify that the domain applications are accessible as per Validate Domain URLs \n"
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/configure-ingress/",
	"title": "Configure an ingress for an OIG domain",
	"tags": [],
	"description": "This document provides steps to configure an Ingress to direct traffic to the OIG domain.",
	"content": "Choose one of the following supported methods to configure an Ingress to direct traffic for your OIG domain.\n a. Using an Ingress with NGINX (non-SSL)  Steps to set up an Ingress for NGINX to direct traffic to the OIG domain (non-SSL).\n b. Using an Ingress with NGINX (SSL)  Steps to set up an Ingress for NGINX to direct traffic to the OIG domain using SSL.\n "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oud/configure-ingress/",
	"title": "Configure an Ingress for OUD",
	"tags": [],
	"description": "This document provides steps to configure an ingress controller to direct traffic to OUD.",
	"content": "  Introduction\n  Install NGINX\na. Configure the repository\nb. Create a namespace\nc. Install NGINX using helm\n  Access to interfaces through ingress\na. Changes in /etc/hosts to validate hostname based ingress rules\nb. Using LDAP utilities\nc. Validate access using LDAP\nd. Validate access using HTTPS\n  Introduction The instructions below explain how to set up NGINX as an ingress for OUD.\nBy default the ingress configuration only supports HTTP and HTTPS ports. To allow LDAP and LDAPS communication over TCP, configuration is required at the ingress controller/implementation level.\nInstall NGINX Use Helm to install NGINX.\nConfigure the repository   Add the Helm chart repository for installing NGINX using the following command:\n$ helm repo add stable https://kubernetes.github.io/ingress-nginx The output will look similar to the following:\n\u0026quot;stable\u0026quot; has been added to your repositories   Update the repository using the following command:\n$ helm repo update The output will look similar to the following:\nHang tight while we grab the latest from your chart repositories... ...Successfully got an update from the \u0026quot;stable\u0026quot; chart repository Update Complete. Happy Helming!   Create a namespace   Create a Kubernetes namespace for NGINX:\n$ kubectl create namespace \u0026lt;namespace\u0026gt; For example:\n$ kubectl create namespace mynginx The output will look similar to the following:\nnamespace/mynginx created   Install NGINX using helm   Create a $WORKDIR/kubernetes/helm/nginx-ingress-values-override.yaml that contains the following:\nNote: The configuration below:\n Assumes that you have oud-ds-rs installed with value oud-ds-rs as a deployment/release name in the namespace oudns. If using a different deployment name and/or namespace change appropriately. Deploys an ingress using LoadBalancer. If you prefer to use NodePort, change the configuration accordingly. For more details about NGINX configuration see: NGINX Ingress Controller.  # Configuration for additional TCP ports to be exposed through Ingress # Format for each port would be like: # \u0026lt;PortNumber\u0026gt;: \u0026lt;Namespace\u0026gt;/\u0026lt;Service\u0026gt; tcp: # Map 1389 TCP port to LBR LDAP service to get requests handled through any available POD/Endpoint serving LDAP Port 1389: oudns/oud-ds-rs-lbr-ldap:ldap # Map 1636 TCP port to LBR LDAP service to get requests handled through any available POD/Endpoint serving LDAPS Port 1636: oudns/oud-ds-rs-lbr-ldap:ldaps controller: admissionWebhooks: enabled: false extraArgs: # The secret referred to by this flag contains the default certificate to be used when accessing the catch-all server. # If this flag is not provided NGINX will use a self-signed certificate. # If the TLS Secret is in different namespace, name can be mentioned as \u0026lt;namespace\u0026gt;/\u0026lt;tlsSecretName\u0026gt; default-ssl-certificate: oudns/oud-ds-rs-tls-cert service: # controller service external IP addresses # externalIPs: # - \u0026lt; External IP Address \u0026gt; # To configure Ingress Controller Service as LoadBalancer type of Service # Based on the Kubernetes configuration, External LoadBalancer would be linked to the Ingress Controller Service type: LoadBalancer # Configuration for NodePort to be used for Ports exposed through Ingress # If NodePorts are not defied/configured, Node Port would be assigend automatically by Kubernetes # These NodePorts are helpful while accessing services directly through Ingress and without having External Load Balancer. nodePorts: # For HTTP Interface exposed through LoadBalancer/Ingress http: 30080 # For HTTPS Interface exposed through LoadBalancer/Ingress https: 30443 tcp: # For LDAP Interface 1389: 31389 # For LDAPS Interface 1636: 31636   To install and configure NGINX Ingress issue the following command:\n$ helm install --namespace \u0026lt;namespace\u0026gt; \\ --values nginx-ingress-values-override.yaml \\ lbr-nginx stable/ingress-nginx Where:\n lbr-nginx is your deployment name stable/ingress-nginx is the chart reference  For example:\n$ helm install --namespace mynginx \\ --values nginx-ingress-values-override.yaml \\ lbr-nginx stable/ingress-nginx The output will look similar to the following:\nNAME: lbr-nginx LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: mynginx STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The ingress-nginx controller has been installed. It may take a few minutes for the LoadBalancer IP to be available. You can watch the status by running 'kubectl --namespace mynginx get services -o wide -w lbr-nginx-ingress-nginx-controller' An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1beta1 kind: Ingress metadata: annotations: kubernetes.io/ingress.class: nginx name: example namespace: foo spec: rules: - host: www.example.com http: paths: - backend: serviceName: exampleService servicePort: 80 path: / # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls   Optional: Command helm upgrade to update nginx-ingress If required, an nginx-ingress deployment can be updated/upgraded with following command. In this example, nginx-ingress configuration is updated with an additional TCP port and Node Port for accessing the LDAP/LDAPS port of a specific POD:\n  Create a nginx-ingress-values-override.yaml that contains the following:\n# Configuration for additional TCP ports to be exposed through Ingress # Format for each port would be like: # \u0026lt;PortNumber\u0026gt;: \u0026lt;Namespace\u0026gt;/\u0026lt;Service\u0026gt; tcp: # Map 1389 TCP port to LBR LDAP service to get requests handled through any available POD/Endpoint serving LDAP Port 1389: oudns/oud-ds-rs-lbr-ldap:ldap # Map 1636 TCP port to LBR LDAP service to get requests handled through any available POD/Endpoint serving LDAPS Port 1636: oudns/oud-ds-rs-lbr-ldap:ldaps # Map specific ports for LDAP and LDAPS communication from individual Services/Pods # To redirect requests on 3890 port to oudns/oud-ds-rs-ldap-0:ldap 3890: oudns/oud-ds-rs-ldap-0:ldap # To redirect requests on 6360 port to oudns/oud-ds-rs-ldaps-0:ldap 6360: oudns/oud-ds-rs-ldap-0:ldaps # To redirect requests on 3891 port to oudns/oud-ds-rs-ldap-1:ldap 3891: oudns/oud-ds-rs-ldap-1:ldap # To redirect requests on 6361 port to oudns/oud-ds-rs-ldaps-1:ldap 6361: oudns/oud-ds-rs-ldap-1:ldaps # To redirect requests on 3892 port to oudns/oud-ds-rs-ldap-2:ldap 3892: oudns/oud-ds-rs-ldap-2:ldap # To redirect requests on 6362 port to oudns/oud-ds-rs-ldaps-2:ldap 6362: oudns/oud-ds-rs-ldap-2:ldaps # Map 1444 TCP port to LBR Admin service to get requests handled through any available POD/Endpoint serving Admin LDAPS Port 1444: oudns/oud-ds-rs-lbr-admin:adminldaps # To redirect requests on 4440 port to oudns/oud-ds-rs-0:adminldaps 4440: oudns/oud-ds-rs-0:adminldaps # To redirect requests on 4441 port to oudns/oud-ds-rs-1:adminldaps 4441: oudns/oud-ds-rs-1:adminldaps # To redirect requests on 4442 port to oudns/oud-ds-rs-2:adminldaps 4442: oudns/oud-ds-rs-2:adminldaps controller: admissionWebhooks: enabled: false extraArgs: # The secret referred to by this flag contains the default certificate to be used when accessing the catch-all server. # If this flag is not provided NGINX will use a self-signed certificate. # If the TLS Secret is in different namespace, name can be mentioned as \u0026lt;namespace\u0026gt;/\u0026lt;tlsSecretName\u0026gt; default-ssl-certificate: oudns/oud-ds-rs-tls-cert service: # controller service external IP addresses # externalIPs: # - \u0026lt; External IP Address \u0026gt; # To configure Ingress Controller Service as LoadBalancer type of Service # Based on the Kubernetes configuration, External LoadBalancer would be linked to the Ingress Controller Service type: LoadBalancer # Configuration for NodePort to be used for Ports exposed through Ingress # If NodePorts are not defied/configured, Node Port would be assigend automatically by Kubernetes # These NodePorts are helpful while accessing services directly through Ingress and without having External Load Balancer. nodePorts: # For HTTP Interface exposed through LoadBalancer/Ingress http: 30080 # For HTTPS Interface exposed through LoadBalancer/Ingress https: 30443 tcp: # For LDAP Interface referring to LBR LDAP services serving LDAP port 1389: 31389 # For LDAPS Interface referring to LBR LDAP services serving LDAPS port 1636: 31636 # For LDAP Interface from specific service oud-ds-rs-ldap-0 3890: 30890 # For LDAPS Interface from specific service oud-ds-rs-ldap-0 6360: 30360 # For LDAP Interface from specific service oud-ds-rs-ldap-1 3891: 30891 # For LDAPS Interface from specific service oud-ds-rs-ldap-1 6361: 30361 # For LDAP Interface from specific service oud-ds-rs-ldap-2 3892: 30892 # For LDAPS Interface from specific service oud-ds-rs-ldap-2 6362: 30362 # For LDAPS Interface referring to LBR Admin services serving adminldaps port 1444: 31444 # For Admin LDAPS Interface from specific service oud-ds-rs-0 4440: 30440 # For Admin LDAPS Interface from specific service oud-ds-rs-1 4441: 30441 # For Admin LDAPS Interface from specific service oud-ds-rs-2 4442: 30442   Run the following command to upgrade the ingress:\n$ helm upgrade --namespace \u0026lt;namespace\u0026gt; \\ --values nginx-ingress-values-override.yaml \\ lbr-nginx stable/ingress-nginx Where:\n lbr-nginx is your deployment name stable/ingress-nginx is the chart reference  For example:\n$ helm upgrade --namespace mynginx \\ --values nginx-ingress-values-override.yaml \\ lbr-nginx stable/ingress-nginx   Access to interfaces through ingress Using the Helm chart, ingress objects are created according to configuration. The following table details the rules configured in ingress object(s) for access to Oracle Unified Directory Interfaces through ingress.\n   Port NodePort Host Example Hostname Path Backend Service:Port Example Service Name:Port     http/https 30080/30443 \u0026lt;deployment/release name\u0026gt;-admin-0 oud-ds-rs-admin-0 * \u0026lt;deployment/release name\u0026gt;-0:adminhttps oud-ds-rs-0:adminhttps   http/https 30080/30443 \u0026lt;deployment/release name\u0026gt;-admin-N oud-ds-rs-admin-N * \u0026lt;deployment/release name\u0026gt;-N:adminhttps oud-ds-rs-1:adminhttps   http/https 30080/30443 \u0026lt;deployment/release name\u0026gt;-admin oud-ds-rs-admin * \u0026lt;deployment/release name\u0026gt;-lbr-admin:adminhttps oud-ds-rs-lbr-admin:adminhttps   http/https 30080/30443 * * /rest/v1/admin \u0026lt;deployment/release name\u0026gt;-lbr-admin:adminhttps oud-ds-rs-lbr-admin:adminhttps   http/https 30080/30443 \u0026lt;deployment/release name\u0026gt;-http-0 oud-ds-rs-http-0 * \u0026lt;deployment/release name\u0026gt;-http-0:http oud-ds-rs-http-0:http   http/https 30080/30443 \u0026lt;deployment/release name\u0026gt;-http-N oud-ds-rs-http-N * \u0026lt;deployment/release name\u0026gt;-http-N:http oud-ds-rs-http-N:http   http/https 30080/30443 \u0026lt;deployment/release name\u0026gt;-http oud-ds-rs-http * \u0026lt;deployment/release name\u0026gt;-lbr-http:http oud-ds-rs-lbr-http:http   http/https 30080/30443 * * /rest/v1/directory \u0026lt;deployment/release name\u0026gt;-lbr-http:http oud-ds-rs-lbr-http:http   http/https 30080/30443 * * /iam/directory \u0026lt;deployment/release name\u0026gt;-lbr-http:http oud-ds-rs-lbr-http:http     In the table above, example values are based on the value \u0026lsquo;oud-ds-rs\u0026rsquo; as the deployment/release name for Helm chart installation.The NodePorts mentioned in the table are according to ingress configuration described in previous section.When External LoadBalancer is not available/configured, interfaces can be accessed through NodePort on a Kubernetes node.\n For LDAP/LDAPS access (based on the updated/upgraded configuration mentioned in previous section)\n   Port NodePort Backend Service:Port Example Service Name:Port     1389 31389 \u0026lt;deployment/release name\u0026gt;-lbr-ldap:ldap oud-ds-rs-lbr-ldap:ldap   1636 31636 \u0026lt;deployment/release name\u0026gt;-lbr-ldap:ldap oud-ds-rs-lbr-ldap:ldaps   1444 31444 \u0026lt;deployment/release name\u0026gt;-lbr-admin:adminldaps oud-ds-rs-lbr-admin:adminldaps   3890 30890 \u0026lt;deployment/release name\u0026gt;-ldap-0:ldap oud-ds-rs-ldap-0:ldap   6360 30360 \u0026lt;deployment/release name\u0026gt;-ldap-0:ldaps oud-ds-rs-ldap-0:ldaps   3891 30891 \u0026lt;deployment/release name\u0026gt;-ldap-1:ldap oud-ds-rs-ldap-1:ldap   6361 30361 \u0026lt;deployment/release name\u0026gt;-ldap-1:ldaps oud-ds-rs-ldap-1:ldaps   3892 30892 \u0026lt;deployment/release name\u0026gt;-ldap-2:ldap oud-ds-rs-ldap-2:ldap   6362 30362 \u0026lt;deployment/release name\u0026gt;-ldap-2:ldaps oud-ds-rs-ldap-2:ldaps   4440 30440 \u0026lt;deployment/release name\u0026gt;-0:adminldaps oud-ds-rs-ldap-0:adminldaps   4441 30441 \u0026lt;deployment/release name\u0026gt;-1:adminldaps oud-ds-rs-ldap-1:adminldaps   4442 30442 \u0026lt;deployment/release name\u0026gt;-2:adminldaps oud-ds-rs-ldap-2:adminldaps     In the table above, example values are based on value \u0026lsquo;oud-ds-rs\u0026rsquo; as the deployment/release name for helm chart installation. The NodePorts mentioned in the table are according to Ingress configuration described in previous section. When external LoadBalancer is not available/configured, Interfaces can be accessed through NodePort on a Kubernetes Node.  Changes in /etc/hosts to validate hostname based ingress rules If it is not possible to have a LoadBalancer configuration updated to have host names added for Oracle Unified Directory Interfaces then the following entries can be added in /etc/hosts files on the host from where Oracle Unified Directory interfaces will be accessed.\n\u0026lt;IP Address of External LBR or Kubernetes Node\u0026gt;\toud-ds-rs-http oud-ds-rs-http-0 oud-ds-rs-http-1 oud-ds-rs-http-2 oud-ds-rs-http-N \u0026lt;IP Address of External LBR or Kubernetes Node\u0026gt;\toud-ds-rs-admin oud-ds-rs-admin-0 oud-ds-rs-admin-1 oud-ds-rs-admin-2 oud-ds-rs-admin-N  In the table above, host names are based on the value \u0026lsquo;oud-ds-rs\u0026rsquo; as the deployment/release name for Helm chart installation. When External LoadBalancer is not available/configured, Interfaces can be accessed through NodePort on Kubernetes Node.  Using LDAP utilities To use Oracle LDAP utilities such as ldapbind, ldapsearch, ldapmodify etc. you can either:\n  Run the LDAP commands from an OUD installation outside the Kubernetes cluster. This requires access to an On-Premises OUD installation oustide the Kubernetes cluster.\n  Run the LDAP commands from inside the OUD Kubernetes pod.\n$ kubectl exec -ti \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; -- bash For example:\n$ kubectl exec -ti oud-ds-rs-0 -n oudns -- bash This will take you into a bash session in the pod:\n[oracle@oud-ds-rs-0 oracle]$ Inside the container navigate to /u01/oracle/oud/bin to view the LDAP utilties:\n[oracle@oud-ds-rs-0 oracle]$ cd /u01/oracle/oud/bin [oracle@oud-ds-rs-0 bin]$ ls ldap* ldapcompare ldapdelete ldapmodify ldappasswordmodify ldapsearch Note: For commands that require an ldif file, copy the file into the \u0026lt;persistent_volume\u0026gt;/oud_user_projects directory:\n$ cp file.ldif \u0026lt;peristent_volume\u0026gt;/oud_user_projects For example:\n$ cp file.ldif /scratch/shared/oud_user_projects The file can then be viewed inside the pod:\n[oracle@oud-ds-rs-0 bin]$ cd /u01/oracle/user_projects [oracle@oud-ds-rs-0 user_projects]$ ls *.ldif file.ldif   Validate access using LDAP Note: The examples assume sample data was installed when creating the OUD instance.\nLDAP against External Load Balancer Note If your ingress is configured with type: LoadBalancer then you cannot connect to the external LoadBalancer hostname and ports from inside the pod and must connect from an OUD installation outside the cluster.\n  Command to perform ldapsearch against External LBR and LDAP port\n$OUD_HOME/bin/ldapsearch --hostname \u0026lt;External LBR\u0026gt; --port 1389 \\ -D \u0026#34;\u0026lt;Root User DN\u0026gt;\u0026#34; -w \u0026lt;Password for Root User DN\u0026gt; \\ -b \u0026#34;\u0026#34; -s base \u0026#34;(objectClass=*)\u0026#34; \u0026#34;*\u0026#34; The output will look similar to the following:\ndn: objectClass: top objectClass: ds-root-dse lastChangeNumber: 0 firstChangeNumber: 0 changelog: cn=changelog entryDN: pwdPolicySubentry: cn=Default Password Policy,cn=Password Policies,cn=config subschemaSubentry: cn=schema supportedAuthPasswordSchemes: SHA256 supportedAuthPasswordSchemes: SHA1 supportedAuthPasswordSchemes: SHA384 supportedAuthPasswordSchemes: SHA512 supportedAuthPasswordSchemes: MD5 numSubordinates: 1 supportedFeatures: 1.3.6.1.1.14 supportedFeatures: 1.3.6.1.4.1.4203.1.5.1 supportedFeatures: 1.3.6.1.4.1.4203.1.5.2 supportedFeatures: 1.3.6.1.4.1.4203.1.5.3 lastExternalChangelogCookie: vendorName: Oracle Corporation vendorVersion: Oracle Unified Directory 12.2.1.4.0 componentVersion: 4 releaseVersion: 1 platformVersion: 0 supportedLDAPVersion: 2 supportedLDAPVersion: 3 supportedControl: 1.2.826.0.1.3344810.2.3 supportedControl: 1.2.840.113556.1.4.1413 supportedControl: 1.2.840.113556.1.4.319 supportedControl: 1.2.840.113556.1.4.473 supportedControl: 1.2.840.113556.1.4.805 supportedControl: 1.3.6.1.1.12 supportedControl: 1.3.6.1.1.13.1 supportedControl: 1.3.6.1.1.13.2 supportedControl: 1.3.6.1.4.1.26027.1.5.2 supportedControl: 1.3.6.1.4.1.26027.1.5.4 supportedControl: 1.3.6.1.4.1.26027.1.5.5 supportedControl: 1.3.6.1.4.1.26027.1.5.6 supportedControl: 1.3.6.1.4.1.26027.2.3.1 supportedControl: 1.3.6.1.4.1.26027.2.3.2 supportedControl: 1.3.6.1.4.1.26027.2.3.4 supportedControl: 1.3.6.1.4.1.42.2.27.8.5.1 supportedControl: 1.3.6.1.4.1.42.2.27.9.5.2 supportedControl: 1.3.6.1.4.1.42.2.27.9.5.8 supportedControl: 1.3.6.1.4.1.4203.1.10.1 supportedControl: 1.3.6.1.4.1.4203.1.10.2 supportedControl: 2.16.840.1.113730.3.4.12 supportedControl: 2.16.840.1.113730.3.4.16 supportedControl: 2.16.840.1.113730.3.4.17 supportedControl: 2.16.840.1.113730.3.4.18 supportedControl: 2.16.840.1.113730.3.4.19 supportedControl: 2.16.840.1.113730.3.4.2 supportedControl: 2.16.840.1.113730.3.4.3 supportedControl: 2.16.840.1.113730.3.4.4 supportedControl: 2.16.840.1.113730.3.4.5 supportedControl: 2.16.840.1.113730.3.4.9 supportedControl: 2.16.840.1.113894.1.8.21 supportedControl: 2.16.840.1.113894.1.8.31 supportedControl: 2.16.840.1.113894.1.8.36 maintenanceVersion: 2 supportedSASLMechanisms: PLAIN supportedSASLMechanisms: EXTERNAL supportedSASLMechanisms: CRAM-MD5 supportedSASLMechanisms: DIGEST-MD5 majorVersion: 12 orclGUID: D41D8CD98F003204A9800998ECF8427E entryUUID: d41d8cd9-8f00-3204-a980-0998ecf8427e ds-private-naming-contexts: cn=schema hasSubordinates: true nsUniqueId: d41d8cd9-8f003204-a9800998-ecf8427e structuralObjectClass: ds-root-dse supportedExtension: 1.3.6.1.4.1.4203.1.11.1 supportedExtension: 1.3.6.1.4.1.4203.1.11.3 supportedExtension: 1.3.6.1.1.8 supportedExtension: 1.3.6.1.4.1.26027.1.6.3 supportedExtension: 1.3.6.1.4.1.26027.1.6.2 supportedExtension: 1.3.6.1.4.1.26027.1.6.1 supportedExtension: 1.3.6.1.4.1.1466.20037 namingContexts: cn=changelog namingContexts: dc=example,dc=com   Command to perform ldapsearch against External LBR and LDAP port for specific Oracle Unified Directory Interface\n$OUD_HOME/bin/ldapsearch --hostname \u0026lt;External LBR\u0026gt; --port 3890 \\ -D \u0026#34;\u0026lt;Root User DN\u0026gt;\u0026#34; -w \u0026lt;Password for Root User DN\u0026gt; \\ -b \u0026#34;\u0026#34; -s base \u0026#34;(objectClass=*)\u0026#34; \u0026#34;*\u0026#34;   LDAPS against Kubernetes NodePort for Ingress Controller Service In the example below LDAP utilities are executed from inside the oud-ds-rs-0 pod. If your ingress is configured with type: LoadBalancer you can connect to the Kubernetes hostname where the ingress is deployed using the NodePorts.\n  Command to perform ldapsearch against Kubernetes NodePort and LDAP port\n[oracle@oud-ds-rs-0 bin]$ ./ldapsearch --hostname \u0026lt;Kubernetes Node\u0026gt; --port 31636 \\ --useSSL --trustAll \\ -D \u0026#34;\u0026lt;Root User DN\u0026gt;\u0026#34; -w \u0026lt;Password for Root User DN\u0026gt; \\ -b \u0026#34;\u0026#34; -s base \u0026#34;(objectClass=*)\u0026#34; \u0026#34;*\u0026#34;   Validate access using HTTPS HTTPS/REST API against External LBR Host:Port Note: In all the examples below:\na) You need to have an external IP assigned at ingress level.\nb) | json_pp is used to format output in readable json format on the client side. It can be ignored if you do not have the json_pp library.\nc) Base64 of userDN:userPassword can be generated using echo -n \u0026quot;userDN:userPassword\u0026quot; | base64.\n  Command to invoke Data REST API:\n$curl --noproxy \u0026#34;*\u0026#34; -k --location \\ --request GET \u0026#39;https://\u0026lt;External LBR Host\u0026gt;/rest/v1/directory/uid=user.1,ou=People,dc=example,dc=com?scope=sub\u0026amp;attributes=*\u0026#39; \\ --header \u0026#39;Authorization: Basic \u0026lt;Base64 of userDN:userPassword\u0026gt;\u0026#39; | json_pp The output will look similar to the following:\n{ \u0026#34;msgType\u0026#34; : \u0026#34;urn:ietf:params:rest:schemas:oracle:oud:1.0:SearchResponse\u0026#34;, \u0026#34;totalResults\u0026#34; : 1, \u0026#34;searchResultEntries\u0026#34; : [ { \u0026#34;dn\u0026#34; : \u0026#34;uid=user.1,ou=People,dc=example,dc=com\u0026#34;, \u0026#34;attributes\u0026#34; : { \u0026#34;st\u0026#34; : \u0026#34;OH\u0026#34;, \u0026#34;employeeNumber\u0026#34; : \u0026#34;1\u0026#34;, \u0026#34;postalCode\u0026#34; : \u0026#34;93694\u0026#34;, \u0026#34;description\u0026#34; : \u0026#34;This is the description for Aaren Atp.\u0026#34;, \u0026#34;telephoneNumber\u0026#34; : \u0026#34;+1 390 103 6917\u0026#34;, \u0026#34;homePhone\u0026#34; : \u0026#34;+1 280 375 4325\u0026#34;, \u0026#34;initials\u0026#34; : \u0026#34;ALA\u0026#34;, \u0026#34;objectClass\u0026#34; : [ \u0026#34;top\u0026#34;, \u0026#34;inetorgperson\u0026#34;, \u0026#34;organizationalperson\u0026#34;, \u0026#34;person\u0026#34; ], \u0026#34;uid\u0026#34; : \u0026#34;user.1\u0026#34;, \u0026#34;sn\u0026#34; : \u0026#34;Atp\u0026#34;, \u0026#34;street\u0026#34; : \u0026#34;70110 Fourth Street\u0026#34;, \u0026#34;mobile\u0026#34; : \u0026#34;+1 680 734 6300\u0026#34;, \u0026#34;givenName\u0026#34; : \u0026#34;Aaren\u0026#34;, \u0026#34;mail\u0026#34; : \u0026#34;user.1@maildomain.net\u0026#34;, \u0026#34;l\u0026#34; : \u0026#34;New Haven\u0026#34;, \u0026#34;postalAddress\u0026#34; : \u0026#34;Aaren Atp$70110 Fourth Street$New Haven, OH 93694\u0026#34;, \u0026#34;pager\u0026#34; : \u0026#34;+1 850 883 8888\u0026#34;, \u0026#34;cn\u0026#34; : \u0026#34;Aaren Atp\u0026#34; } } ] }   Command to invoke Data REST API against specific Oracle Unified Directory Interface:\n$ curl --noproxy \u0026#34;*\u0026#34; -k --location \\ --request GET \u0026#39;https://oud-ds-rs-http-0/rest/v1/directory/uid=user.1,ou=People,dc=example,dc=com?scope=sub\u0026amp;attributes=*\u0026#39; \\ --header \u0026#39;Authorization: Basic \u0026lt;Base64 of userDN:userPassword\u0026gt;\u0026#39; | json_pp  For this example, it is assumed that the value \u0026lsquo;oud-ds-rs\u0026rsquo; is used as the deployment/release name for helm chart installation. It is assumed that \u0026lsquo;oud-ds-rs-http-0\u0026rsquo; points to an External LoadBalancer    HTTPS/REST API against Kubernetes NodePort for Ingress Controller Service Note: In all the examples below:\na) | json_pp is used to format output in readable json format on the client side. It can be ignored if you do not have the json_pp library.\nb) Base64 of userDN:userPassword can be generated using echo -n \u0026quot;userDN:userPassword\u0026quot; | base64.\nc) It is assumed that the value \u0026lsquo;oud-ds-rs\u0026rsquo; is used as the deployment/release name for helm chart installation.\n  Command to invoke Data SCIM API:\n$ curl --noproxy \u0026#34;*\u0026#34; -k --location \\ --request GET \u0026#39;https://\u0026lt;Kubernetes Node\u0026gt;:30443/iam/directory/oud/scim/v1/Users\u0026#39; \\ --header \u0026#39;Authorization: Basic \u0026lt;Base64 of userDN:userPassword\u0026gt;\u0026#39; | json_pp The output will look similar to the following:\n{ \u0026#34;Resources\u0026#34; : [ { \u0026#34;id\u0026#34; : \u0026#34;ad55a34a-763f-358f-93f9-da86f9ecd9e4\u0026#34;, \u0026#34;userName\u0026#34; : [ { \u0026#34;value\u0026#34; : \u0026#34;user.0\u0026#34; } ], \u0026#34;schemas\u0026#34; : [ \u0026#34;urn:ietf:params:scim:schemas:core:2.0:User\u0026#34;, \u0026#34;urn:ietf:params:scim:schemas:extension:oracle:2.0:OUD:User\u0026#34;, \u0026#34;urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\u0026#34; ], \u0026#34;meta\u0026#34; : { \u0026#34;location\u0026#34; : \u0026#34;http://\u0026lt;Kubernetes Node\u0026gt;:30443/iam/directory/oud/scim/v1/Users/ad55a34a-763f-358f-93f9-da86f9ecd9e4\u0026#34;, \u0026#34;resourceType\u0026#34; : \u0026#34;User\u0026#34; }, \u0026#34;addresses\u0026#34; : [ { \u0026#34;postalCode\u0026#34; : \u0026#34;50369\u0026#34;, \u0026#34;formatted\u0026#34; : \u0026#34;Aaccf Amar$01251 Chestnut Street$Panama City, DE 50369\u0026#34;, \u0026#34;streetAddress\u0026#34; : \u0026#34;01251 Chestnut Street\u0026#34;, \u0026#34;locality\u0026#34; : \u0026#34;Panama City\u0026#34;, \u0026#34;region\u0026#34; : \u0026#34;DE\u0026#34; } ], \u0026#34;urn:ietf:params:scim:schemas:extension:oracle:2.0:OUD:User\u0026#34; : { \u0026#34;description\u0026#34; : [ { \u0026#34;value\u0026#34; : \u0026#34;This is the description for Aaccf Amar.\u0026#34; } ], \u0026#34;mobile\u0026#34; : [ { \u0026#34;value\u0026#34; : \u0026#34;+1 010 154 3228\u0026#34; } ], \u0026#34;pager\u0026#34; : [ { \u0026#34;value\u0026#34; : \u0026#34;+1 779 041 6341\u0026#34; } ], \u0026#34;objectClass\u0026#34; : [ { \u0026#34;value\u0026#34; : \u0026#34;top\u0026#34; }, { \u0026#34;value\u0026#34; : \u0026#34;organizationalperson\u0026#34; }, { \u0026#34;value\u0026#34; : \u0026#34;person\u0026#34; }, { \u0026#34;value\u0026#34; : \u0026#34;inetorgperson\u0026#34; } ], \u0026#34;initials\u0026#34; : [ { \u0026#34;value\u0026#34; : \u0026#34;ASA\u0026#34; } ], \u0026#34;homePhone\u0026#34; : [ { \u0026#34;value\u0026#34; : \u0026#34;+1 225 216 5900\u0026#34; } ] }, \u0026#34;name\u0026#34; : [ { \u0026#34;givenName\u0026#34; : \u0026#34;Aaccf\u0026#34;, \u0026#34;familyName\u0026#34; : \u0026#34;Amar\u0026#34;, \u0026#34;formatted\u0026#34; : \u0026#34;Aaccf Amar\u0026#34; } ], \u0026#34;emails\u0026#34; : [ { \u0026#34;value\u0026#34; : \u0026#34;user.0@maildomain.net\u0026#34; } ], \u0026#34;phoneNumbers\u0026#34; : [ { \u0026#34;value\u0026#34; : \u0026#34;+1 685 622 6202\u0026#34; } ], \u0026#34;urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\u0026#34; : { \u0026#34;employeeNumber\u0026#34; : [ { \u0026#34;value\u0026#34; : \u0026#34;0\u0026#34; } ] } } , . . . }   Command to invoke Data SCIM API against specific Oracle Unified Directory Interface:\n$ curl --noproxy \u0026#34;*\u0026#34; -k --location \\ --request GET \u0026#39;https://oud-ds-rs-http-0:30443/iam/directory/oud/scim/v1/Users\u0026#39; \\ --header \u0026#39;Authorization: Basic \u0026lt;Base64 of userDN:userPassword\u0026gt;\u0026#39; | json_pp   HTTPS/REST Admin API Note: In all the examples below:\na) | json_pp is used to format output in readable json format on the client side. It can be ignored if you do not have the json_pp library.\nb) Base64 of userDN:userPassword can be generated using echo -n \u0026quot;userDN:userPassword\u0026quot; | base64.\n  Command to invoke Admin REST API against External LBR:\n$ curl --noproxy \u0026#34;*\u0026#34; -k --insecure --location \\ --request GET \u0026#39;https://\u0026lt;External LBR Host\u0026gt;/rest/v1/admin/?scope=base\u0026amp;attributes=vendorName\u0026amp;attributes=vendorVersion\u0026amp;attributes=ds-private-naming-contexts\u0026amp;attributes=subschemaSubentry\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Basic \u0026lt;Base64 of userDN:userPassword\u0026gt;\u0026#39; | json_pp The output will look similar to the following:\n{ \u0026#34;totalResults\u0026#34; : 1, \u0026#34;searchResultEntries\u0026#34; : [ { \u0026#34;dn\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;attributes\u0026#34; : { \u0026#34;vendorVersion\u0026#34; : \u0026#34;Oracle Unified Directory 12.2.1.4.0\u0026#34;, \u0026#34;ds-private-naming-contexts\u0026#34; : [ \u0026#34;cn=admin data\u0026#34;, \u0026#34;cn=ads-truststore\u0026#34;, \u0026#34;cn=backups\u0026#34;, \u0026#34;cn=config\u0026#34;, \u0026#34;cn=monitor\u0026#34;, \u0026#34;cn=schema\u0026#34;, \u0026#34;cn=tasks\u0026#34;, \u0026#34;cn=virtual acis\u0026#34;, \u0026#34;dc=replicationchanges\u0026#34; ], \u0026#34;subschemaSubentry\u0026#34; : \u0026#34;cn=schema\u0026#34;, \u0026#34;vendorName\u0026#34; : \u0026#34;Oracle Corporation\u0026#34; } } ], \u0026#34;msgType\u0026#34; : \u0026#34;urn:ietf:params:rest:schemas:oracle:oud:1.0:SearchResponse\u0026#34; }   Command to invoke Admin REST API against specific Oracle Unified Directory Admin Interface:\n$ curl --noproxy \u0026#34;*\u0026#34; -k --insecure --location \\ --request GET \u0026#39;https://oud-ds-rs-admin-0/rest/v1/admin/?scope=base\u0026amp;attributes=vendorName\u0026amp;attributes=vendorVersion\u0026amp;attributes=ds-private-naming-contexts\u0026amp;attributes=subschemaSubentry\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Basic \u0026lt;Base64 of userDN:userPassword\u0026gt;\u0026#39; | json_pp   Command to invoke Admin REST API against Kubernetes NodePort for Ingress Controller Service\n$ curl --noproxy \u0026#34;*\u0026#34; -k --insecure --location \\ --request GET \u0026#39;https://oud-ds-rs-admin-0:30443/rest/v1/admin/?scope=base\u0026amp;attributes=vendorName\u0026amp;attributes=vendorVersion\u0026amp;attributes=ds-private-naming-contexts\u0026amp;attributes=subschemaSubentry\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --header \u0026#39;Authorization: Basic \u0026lt;Base64 of userDN:userPassword\u0026gt;\u0026#39; | json_pp   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oudsm/configure-ingress/",
	"title": "Configure an Ingress for OUDSM",
	"tags": [],
	"description": "This document provides steps to configure an ingress controller to direct traffic to OUDSM.",
	"content": "  Introduction\n  Install NGINX\na. Configure the repository\nb. Create a namespace\nc. Install NGINX using helm\n  Access to interfaces through ingress\n  Introduction The instructions below explain how to set up NGINX as an ingress for OUDSM.\nInstall NGINX Use Helm to install NGINX.\nConfigure the repository   Add the Helm chart repository for installing NGINX using the following command:\n$ helm repo add stable https://kubernetes.github.io/ingress-nginx The output will look similar to the following:\n\u0026quot;stable\u0026quot; has been added to your repositories   Update the repository using the following command:\n$ helm repo update The output will look similar to the following:\nHang tight while we grab the latest from your chart repositories... ...Successfully got an update from the \u0026quot;stable\u0026quot; chart repository Update Complete. Happy Helming!   Create a namespace   Create a Kubernetes namespace for NGINX:\n$ kubectl create namespace \u0026lt;namespace\u0026gt; For example:\n$ kubectl create namespace mynginx The output will look similar to the following:\nnamespace/mynginx created   Install NGINX using helm   Create a $WORKDIR/kubernetes/helm/nginx-ingress-values-override.yaml that contains the following:\nNote: The configuration below deploys an ingress using LoadBalancer. If you prefer to use NodePort, change the configuration accordingly. For more details about NGINX configuration see: NGINX Ingress Controller.\ncontroller: admissionWebhooks: enabled: false extraArgs: # The secret referred to by this flag contains the default certificate to be used when accessing the catch-all server. # If this flag is not provided NGINX will use a self-signed certificate. # If the TLS Secret is in different namespace, name can be mentioned as \u0026lt;namespace\u0026gt;/\u0026lt;tlsSecretName\u0026gt; default-ssl-certificate: oudsmns/oudsm-tls-cert service: # controller service external IP addresses # externalIPs: # - \u0026lt; External IP Address \u0026gt; # To configure Ingress Controller Service as LoadBalancer type of Service # Based on the Kubernetes configuration, External LoadBalancer would be linked to the Ingress Controller Service type: LoadBalancer # Configuration for NodePort to be used for Ports exposed through Ingress # If NodePorts are not defined/configured, Node Port would be assigned automatically by Kubernetes # These NodePorts are helpful while accessing services directly through Ingress and without having External Load Balancer. nodePorts: # For HTTP Interface exposed through LoadBalancer/Ingress http: 30080 # For HTTPS Interface exposed through LoadBalancer/Ingress https: 30443   To install and configure NGINX ingress issue the following command:\n$ helm install --namespace \u0026lt;namespace\u0026gt; \\ --values nginx-ingress-values-override.yaml \\ lbr-nginx stable/ingress-nginx Where:\n lbr-nginx is your deployment name stable/ingress-nginx is the chart reference  For example:\n$ helm install --namespace mynginx \\ --values nginx-ingress-values-override.yaml \\ lbr-nginx stable/ingress-nginx The output will be similar to the following:\nNAME: lbr-nginx LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: mynginx STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The ingress-nginx controller has been installed. It may take a few minutes for the LoadBalancer IP to be available. You can watch the status by running 'kubectl --namespace mynginx get services -o wide -w lbr-nginx-ingress-nginx-controller' An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: example namespace: foo spec: ingressClassName: nginx rules: - host: www.example.com http: paths: - pathType: Prefix backend: service: name: exampleService port: number: 80 path: / # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls   Access to interfaces through ingress Using the Helm chart, ingress objects are created according to configuration. The following table details the rules configured in ingress object(s) for access to Oracle Unified Directory Services Manager Interfaces through ingress.\n   Port NodePort Host Example Hostname Path Backend Service:Port Example Service Name:Port     http/https 30080/30443 \u0026lt;deployment/release name\u0026gt;-N oudsm-N * \u0026lt;deployment/release name\u0026gt;-N:http oudsm-1:http   http/https 30080/30443 * * /oudsm/console \u0026lt;deployment/release name\u0026gt;-lbr:http oudsm-lbr:http     In the table above, the Example Name for each Object is based on the value \u0026lsquo;oudsm\u0026rsquo; as the deployment/release name for the Helm chart installation. The NodePorts mentioned in the table are according to ingress configuration described in previous section. When an External LoadBalancer is not available/configured, interfaces can be accessed through NodePort on the Kubernetes node.  Changes in /etc/hosts to validate hostname based ingress rules If it is not possible to have LoadBalancer configuration updated to have host names added for Oracle Unified Directory Services Manager Interfaces, then the following entries can be added in /etc/hosts files on the host from where Oracle Unified Directory Services Manager interfaces would be accessed.\n\u0026lt;IP Address of External LBR or Kubernetes Node\u0026gt;\toudsm oudsm-1 oudsm-2 oudsm-N  In the table above, host names are based on the value \u0026lsquo;oudsm\u0026rsquo; as the deployment/release name for the Helm chart installation. When an External LoadBalancer is not available/configured, Interfaces can be accessed through NodePort on the Kubernetes Node.  Validate OUDSM URL\u0026rsquo;s   Launch a browser and access the OUDSM console.\n If using an External LoadBalancer: https://\u0026lt;External LBR Host\u0026gt;/oudsm. If not using an External LoadBalancer use https://\u0026lt;Kubernetes Node\u0026gt;:30443/oudsm.    Access the WebLogic Administration console by accessing the following URL and login with weblogic/\u0026lt;password\u0026gt; where weblogic/\u0026lt;password\u0026gt; is the adminUser and adminPass set when creating the OUDSM instance.\n If using an External LoadBalancer: https://\u0026lt;External LBR Host\u0026gt;/console. If not using an External LoadBalancer use https://\u0026lt;Kubernetes Node\u0026gt;:30443/console.    "
},
{
	"uri": "/fmw-kubernetes/24.4.1/ohs/manage-ohs-containers/",
	"title": "Manage OHS Domains",
	"tags": [],
	"description": "This document provides steps to manage the OHS container.",
	"content": "Important considerations for Oracle HTTP Server containers in Kubernetes.\n a. Domain Lifecycle  Learn about the domain lifecycle of an OHS container.\n b. Modifying the OHS container  Learn about modifying the OHS configuration.\n c. Delete the OHS container  Learn about the steps to delete the OHS container.\n "
},
{
	"uri": "/fmw-kubernetes/24.4.1/ohs/create-or-update-image/",
	"title": "Create or update an image",
	"tags": [],
	"description": "Create or update an Oracle HTTP Server (OHS) container image used for deploying OHS domains.",
	"content": "As described in Prepare Your Environment you can create your own OHS container image. If you have access to the My Oracle Support (MOS), and there is a need to build a new image with an interim or one off patch, it is recommended to use the WebLogic Image Tool to build an Oracle HTTP Server image for production deployments.\nCreate or update an Oracle HTTP Server image using the WebLogic Image Tool Using the WebLogic Image Tool, you can create a new Oracle HTTP Server image with PSU\u0026rsquo;s and interim patches or update an existing image with one or more interim patches.\n Recommendations:\n Use create for creating a new Oracle HTTP Server image containing the Oracle HTTP Server binaries, bundle patch and interim patches. This is the recommended approach if you have access to the OHS patches because it optimizes the size of the image. Use update for patching an existing Oracle HTTP Server image with a single interim patch. Note that the patched image size may increase considerably due to additional image layers introduced by the patch application tool.   Create an image Set up the WebLogic Image Tool  Prerequisites Set up the WebLogic Image Tool Validate setup WebLogic Image Tool build directory WebLogic Image Tool cache  Prerequisites Verify that your environment meets the following prerequisites:\n Docker client and daemon on the build machine, with minimum Docker version 18.03.1.ce. Bash version 4.0 or later, to enable the command complete feature. JAVA_HOME environment variable set to the appropriate JDK location e.g: /scratch/export/oracle/product/jdk  Set up the WebLogic Image Tool To set up the WebLogic Image Tool:\n  Create a working directory and change to it:\n$ mkdir \u0026lt;workdir\u0026gt; $ cd \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/imagetool-setup $ cd /scratch/imagetool-setup   Download the latest version of the WebLogic Image Tool from the releases page.\n$ wget https://github.com/oracle/weblogic-image-tool/releases/download/release-X.X.X/imagetool.zip where X.X.X is the latest release referenced on the releases page.\n   Note: You must use WebLogic Image Tool 1.14.2 or later.\n   Unzip the release ZIP file in the imagetool-setup directory.\n$ unzip imagetool.zip   Execute the following commands to set up the WebLogic Image Tool:\n$ cd \u0026lt;workdir\u0026gt;/imagetool-setup/imagetool/bin $ source setup.sh For example:\n$ cd /scratch/imagetool-setup/imagetool/bin $ source setup.sh   Validate setup To validate the setup of the WebLogic Image Tool:\n  Enter the following command to retrieve the version of the WebLogic Image Tool:\n$ imagetool --version   Enter imagetool then press the Tab key to display the available imagetool commands:\n$ imagetool \u0026lt;TAB\u0026gt; cache create help rebase update   WebLogic Image Tool build directory The WebLogic Image Tool creates a temporary Docker context directory, prefixed by wlsimgbuilder_temp, every time the tool runs. Under normal circumstances, this context directory will be deleted. However, if the process is aborted or the tool is unable to remove the directory, it is safe for you to delete it manually. By default, the WebLogic Image Tool creates the Docker context directory under the user\u0026rsquo;s home directory. If you prefer to use a different directory for the temporary context, set the environment variable WLSIMG_BLDDIR:\n$ export WLSIMG_BLDDIR=\u0026#34;/path/to/buid/dir\u0026#34; WebLogic Image Tool cache The WebLogic Image Tool maintains a local file cache store. This store is used to look up where the OHS and JDK installers, and OHS patches reside in the local file system. By default, the cache store is located in the user\u0026rsquo;s $HOME/cache directory. Under this directory, the lookup information is stored in the .metadata file. All automatically downloaded patches also reside in this directory. You can change the default cache store location by setting the environment variable WLSIMG_CACHEDIR:\n$ export WLSIMG_CACHEDIR=\u0026#34;/path/to/cachedir\u0026#34; Set up additional build scripts Creating an Oracle HTTP Server container image using the WebLogic Image Tool requires additional container scripts for Oracle HTTP Server domains.\n  Clone the docker-images repository to set up those scripts. In these steps, this directory is DOCKER_REPO:\n$ cd \u0026lt;workdir\u0026gt;/imagetool-setup $ git clone https://github.com/oracle/docker-images.git For example:\n$ cd /scratch/imagetool-setup $ git clone https://github.com/oracle/docker-images.git    Note: If you want to create the image continue with the following steps, otherwise to update the image see update an image.\n Create an image After setting up the WebLogic Image Tool, follow these steps to use the WebLogic Image Tool to create a new Oracle HTTP Server image.\nExport the PWD variable In order for the WebLogic Image Tool to build OHS with all the latest patches, the image creation downloads patches from My Oracle Support.\nDuring the image build you are asked to enter your My Oracle Support credentials, however the password is passed as a variable. Set the variable as follows:\nexport MYPWD=\u0026quot;MY_ORACLE_SUPPORT_PWD\u0026quot; Download the Oracle HTTP Server installation binaries and patches You must download the required Oracle HTTP Server installation binaries and patches as listed below from Oracle Software Delivery Cloud and My Oracle Support. Save them in a directory of your choice.\nThe installation binaries and patches required are:\n  Oracle Web Tier 12.2.1.4.0\n V983369-01.zip    Oracle JDK v8\n jdk-8uXXX-linux-x64.tar.gz    Oracle Database 19c Upgrade for FMW 12.2.1.4.0 (OID/OHS/OTD homes only)\n Patch 34761383 DB Client 19c Upgrade for FMW 12.2.1.4.0 (OID/OHS/OTD homes only)    Update required build files The following files are used for creating the image:\n additionalBuildCmds.txt buildArgs    Create the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleHTTPServer/additionalBuildCmds.txt file as follows and change the following:\n[package-manager-packages] binutils make glibc-devel procps [final-build-commands] ENV PATH=$PATH:/u01/oracle/ohssa/oracle_common/common/bin \\ NM_PORT=5556 \\ OHS_LISTEN_PORT=7777 \\ OHS_SSL_PORT=4443 \\ MW_HOME=/u01/oracle/ohssa \\ DOMAIN_NAME=ohsDomain \\ OHS_COMPONENT_NAME=ohs1 \\ PATH=$PATH:$ORACLE_HOME/oracle_common/common/bin:$ORACLE_HOME/user_projects/domains/ohsDomain/bin:/u01/oracle/ \\ WLST_HOME=/u01/oracle/ohssa/oracle_common/common/bin COPY --chown=oracle:root files/create-sa-ohs-domain.py files/configureWLSProxyPlugin.sh files/mod_wl_ohs.conf.sample files/provisionOHS.sh files/start-ohs.py files/stop-ohs.py files/helloWorld.html /u01/oracle/ WORKDIR ${ORACLE_HOME} CMD [\u0026quot;/u01/oracle/provisionOHS.sh\u0026quot;] Note: oracle:root is used for OpenShift which has more stringent policies. Users who do not want those permissions can change to the permissions they require.\n  Create the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleHTTPServer/buildArgs file as follows and change the following:\n \u0026lt;workdir\u0026gt; to your working directory, for example /scratch/ %BUILDTAG% to the tag you want create for the image, for example oracle/ohs:12.2.1.4-db19 %JDK_VERSION% to the version of your JDK, for example 8uXXX \u0026lt;user\u0026gt; to your My Oracle Support username  create --tag=%BUILDTAG% --additionalBuildCommands /\u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleHTTPServer/additionalBuildCmds.txt --additionalBuildFiles \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/create-sa-ohs-domain.py,\u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/provisionOHS.sh,\u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/configureWLSProxyPlugin.sh,\u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/mod_wl_ohs.conf.sample,\u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/start-ohs.py,\u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/stop-ohs.py,\u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/helloWorld.html --type=OHS --pull --recommendedPatches --chown=oracle:root --user=\u0026lt;user\u0026gt; --passwordEnv=MYPWD --version=12.2.1.4.0 --jdkVersion=\u0026lt;latest jdk 8 update\u0026gt; For example:\ncreate --tag=oracle/ohs:12.2.1.4-db19 --additionalBuildCommands /scratch/imagetool-setup/docker-images/OracleHTTPServer/additionalBuildCmds.txt --additionalBuildFiles /scratch/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/create-sa-ohs-domain.py,/scratch/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/provisionOHS.sh,/scratch/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/configureWLSProxyPlugin.sh,/scratch/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/mod_wl_ohs.conf.sample,/scratch/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/start-ohs.py,/scratch/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/stop-ohs.py,/scratch/imagetool-setup/docker-images/OracleHTTPServer/dockerfiles/12.2.1.4.0/container-scripts/helloWorld.html --type=OHS --pull --recommendedPatches --chown=oracle:root --user=user@example.com --passwordEnv=MYPWD --version=12.2.1.4.0 --jdkVersion=8u421 Refer to this page for the complete list of options available with the WebLogic Image Tool create command.\n  Create the image   Add a JDK package to the WebLogic Image Tool cache. For example:\n$ imagetool cache addInstaller --type jdk --version 8uXXX --path \u0026lt;download location\u0026gt;/jdk-8uXXX-linux-x64.tar.gz where XXX is the JDK version downloaded.\n  Add the downloaded installation binaries to the WebLogic Image Tool cache. For example:\n$ imagetool cache addInstaller --type ohs --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/V983369-01.zip $ imagetool cache addInstaller --type db19 --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/p34761383_122140_Linux-x86-64.zip   Create the Oracle HTTP Server image:\n$ imagetool @\u0026lt;absolute path to buildargs file\u0026gt;  Note: Make sure that the absolute path to the buildargs file is prepended with a @ character, as shown in the example above.\n For example:\n$ imagetool @/scratch/imagetool-setup/docker-images/OracleHTTPServer/buildArgs   Check the created image using the docker images command:\n$ docker images | grep OHS The output will look similar to the following:\noracle/ohs:12.2.1.4-db19 12.2.1.4.0 ad732fc7c16b About a minute ago 3.83GB   If you want to see what patches were installed, you can run:\n$ imagetool inspect --image=\u0026lt;REPOSITORY\u0026gt;:\u0026lt;TAG\u0026gt; --patches For example:\n$ imagetool inspect --image=oracle/ohs:12.2.1.4-db19 --patches   Run the following command to save the container image to a tar file:\n$ docker save -o \u0026lt;path\u0026gt;/\u0026lt;file\u0026gt;.tar \u0026lt;image\u0026gt; For example:\n$ docker save -o $WORKDIR/ohs12.2.1.4-db19.tar oracle/ohs:12.2.1.4-db19   Update an image The steps below show how to update an existing Oracle HTTP Server image with an interim patch.\nThe container image to be patched must be loaded in the local docker images repository before attempting these steps.\nIn the examples below the image oracle/OHS:12.2.1.4.0 is updated with an interim patch.\n$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE oracle/ohs:12.2.1.4-db19 12.2.1.4.0 b051804ba15f 3 months ago 3.83GB   Set up the WebLogic Image Tool.\n  Download the required interim patch(es) and latest Opatch (28186730) from My Oracle Support. and save them in a directory of your choice.\n  Add the OPatch patch to the WebLogic Image Tool cache, for example:\n$ imagetool cache addEntry --key 28186730_13.9.4.2.17 --value \u0026lt;downloaded-patches-location\u0026gt;/p28186730_1394217_Generic.zip   Execute the imagetool cache addEntry command for each patch to add the required patch(es) to the WebLogic Image Tool cache. For example, to add patch p6666666_12214241121_Generic.zip:\nNote: This is not a real patch number, it is used purely for an example.\n$ imagetool cache addEntry --key=6666666_12.2.1.4.241121 --value \u0026lt;downloaded-patches-location\u0026gt;/p6666666_12214241121_Generic.zip   Provide the following arguments to the WebLogic Image Tool update command:\n –-fromImage - Identify the image that needs to be updated. In the example below, the image to be updated is oracle/OHS:12.2.1.4.0. –-patches - Multiple patches can be specified as a comma-separated list. --tag - Specify the new tag to be applied for the image being built.  Refer here for the complete list of options available with the WebLogic Image Tool update command.\n Note: The WebLogic Image Tool cache should have the latest OPatch zip. The WebLogic Image Tool will update the OPatch if it is not already updated in the image.\n For example:\n$ imagetool update --fromImage oracle/ohs:12.2.1.4-db19 --tag=oracle/ohs-new:12.2.1.4.0 --patches=6666666_12.2.1.4.241121 --opatchBugNumber=28186730_13.9.4.2.17  Note: If the command fails because the files in the image being upgraded are not owned by oracle:root, then add the parameter --chown \u0026lt;userid\u0026gt;:\u0026lt;groupid\u0026gt; to correspond with the values returned in the error.\n   Check the built image using the docker images command:\n$ docker images | grep OHS The output will look similar to the following:\nREPOSITORY TAG IMAGE ID CREATED SIZE oracle/ohs-new:12.2.1.4-db19 12.2.1.4.0 78ccd1ad67eb 5 minutes ago 4.5GB oracle/ohs:12.2.1.4-db19 12.2.1.4.0 b051804ba15f 3 months ago 3.83GB   Run the following command to save the patched container image to a tar file:\n$ docker save -o \u0026lt;path\u0026gt;/\u0026lt;file\u0026gt;.tar \u0026lt;image\u0026gt; For example:\n$ docker save -o $WORKDIR/ohs-new12.2.1.4-db19.tar oracle/ohs-new:12.2.1.4-db19:12.2.1.4.0   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oud/manage-oud-containers/",
	"title": "Manage Oracle Unified Directory Containers",
	"tags": [],
	"description": "This document provides steps manage Oracle Unified Directory containers.",
	"content": "Important considerations for Oracle Unified Directory instances in Kubernetes.\n a) Scaling Up/Down OUD Pods   Describes the steps for scaling up/down for OUD pods.\n b) Logging and Visualization for Helm Chart oud-ds-rs Deployment  Describes the steps for logging and visualization with Elasticsearch and Kibana.\n c) Monitoring an Oracle Unified Directory Instance  Describes the steps for Monitoring the Oracle Unified Directory environment.\n d. Kubernetes Horizontal Pod Autoscaler  Describes the steps for implementing the Horizontal Pod Autoscaler.\n "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oudsm/manage-oudsm-containers/",
	"title": "Manage Oracle Unified Directory Services Manager Containers",
	"tags": [],
	"description": "This document provides steps to manage Oracle Unified Directory Services Manager containers.",
	"content": "Important considerations for Oracle Unified Directory Services Manager instances in Kubernetes.\n a) Scaling Up/Down OUDSM Pods   Describes the steps for scaling up/down for OUDSM pods.\n b) Logging and Visualization for Helm Chart oudsm Deployment  Describes the steps for logging and visualization with Elasticsearch and Kibana.\n c) Monitoring an Oracle Unified Directory Services Manager Instance  Describes the steps for Monitoring the Oracle Unified Directory Services Manager environment.\n "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/validate-domain-urls/",
	"title": "Validate Domain URLs",
	"tags": [],
	"description": "Sample for validating domain urls.",
	"content": "In this section you validate the OAM domain URLs are accessible via the NGINX ingress.\nValidate the OAM domain urls via the Ingress Launch a browser and access the following URL\u0026rsquo;s. Login with the weblogic username and password (weblogic/\u0026lt;password\u0026gt;).\nNote: The ${HOSTNAME}:${PORT} depends on the architecture configured, and your ingress setup as per Configuring an ingress for NGINX for the OAM Domain.\n   Console or Page URL     WebLogic Administration Console http(s)://${HOSTNAME}:${PORT}/console   Oracle Enterprise Manager Console http(s)://${HOSTNAME}:${PORT}/em   Oracle Access Management Console http(s)://${HOSTNAME}:${PORT}/oamconsole   Oracle Access Management Console http(s)://${HOSTNAME}:${PORT}/access   Logout URL http(s)://${HOSTNAME}:${PORT}/oam/server/logout    Note: WebLogic Administration Console and Oracle Enterprise Manager Console should only be used to monitor the servers in the OAM domain. To control the Administration Server and OAM Managed Servers (start/stop) you must use Kubernetes. See Domain Life Cycle  for more information.\nThe browser will give certificate errors if you used a self signed certificate and have not imported it into the browsers Certificate Authority store. If this occurs you can proceed with the connection and ignore the errors.\nAfter validating the URL\u0026rsquo;s proceed to Post Install Configuration.\n"
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/validate-domain-urls/",
	"title": "Validate domain URLs",
	"tags": [],
	"description": "Sample for validating domain urls.",
	"content": "In this section you validate the OIG domain URLs that are accessible via the NGINX ingress.\nMake sure you know the master hostname and port before proceeding.\nValidate the OIG domain urls via the ingress Launch a browser and access the following URL\u0026rsquo;s. Use http or https depending on whether you configured your ingress for non-ssl or ssl.\nLogin to the WebLogic Administration Console and Oracle Enterprise Manager Console with the WebLogic username and password (weblogic/\u0026lt;password\u0026gt;).\nLogin to Oracle Identity Governance with the xelsysadm username and password (xelsysadm/\u0026lt;password\u0026gt;).\nNote: If using a load balancer for your ingress replace ${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT} with ${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT}.\n   Console or Page URL     WebLogic Administration Console https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/console   Oracle Enterprise Manager Console https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/em   Oracle Identity System Administration https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/sysadmin   Oracle Identity Self Service https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/identity    Note: WebLogic Administration Console and Oracle Enterprise Manager Console should only be used to monitor the servers in the OIG domain. To control the Administration Server and OIG Managed Servers (start/stop) you must use Kubernetes. See Domain Life Cycle  for more information.\nThe browser will give certificate errors if you used a self signed certifcate and have not imported it into the browsers Certificate Authority store. If this occurs you can proceed with the connection and ignore the errors.\nAfter the URL\u0026rsquo;s have been verified follow Post install configuration.\n"
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oud/create-or-update-image/",
	"title": "Create or update an image",
	"tags": [],
	"description": "Create or update an Oracle Unified Directory (OUD) container image used for deploying OUD domains.",
	"content": "As described in Prepare Your Environment you can create your own OUD container image. If you have access to the My Oracle Support (MOS), and there is a need to build a new image with an interim or one off patch, it is recommended to use the WebLogic Image Tool to build an Oracle Unified Directory image for production deployments.\nCreate or update an Oracle Unified Directory image using the WebLogic Image Tool Using the WebLogic Image Tool, you can create a new Oracle Unified Directory image with PSU\u0026rsquo;s and interim patches or update an existing image with one or more interim patches.\n Recommendations:\n Use create for creating a new Oracle Unified Directory image containing the Oracle Unified Directory binaries, bundle patch and interim patches. This is the recommended approach if you have access to the OUD patches because it optimizes the size of the image. Use update for patching an existing Oracle Unified Directory image with a single interim patch. Note that the patched image size may increase considerably due to additional image layers introduced by the patch application tool.   Create an image Set up the WebLogic Image Tool  Prerequisites Set up the WebLogic Image Tool Validate setup WebLogic Image Tool build directory WebLogic Image Tool cache  Prerequisites Verify that your environment meets the following prerequisites:\n Docker client and daemon on the build machine, with minimum Docker version 18.03.1.ce. Bash version 4.0 or later, to enable the command complete feature. JAVA_HOME environment variable set to the appropriate JDK location e.g: /scratch/export/oracle/product/jdk  Set up the WebLogic Image Tool To set up the WebLogic Image Tool:\n  Create a working directory and change to it:\n$ mdir \u0026lt;workdir\u0026gt; $ cd \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/imagetool-setup $ cd /scratch/imagetool-setup   Download the latest version of the WebLogic Image Tool from the releases page.\n$ wget https://github.com/oracle/weblogic-image-tool/releases/download/release-X.X.X/imagetool.zip where X.X.X is the latest release referenced on the releases page.\n  Unzip the release ZIP file in the imagetool-setup directory.\n$ unzip imagetool.zip   Execute the following commands to set up the WebLogic Image Tool:\n$ cd \u0026lt;workdir\u0026gt;/imagetool-setup/imagetool/bin $ source setup.sh For example:\n$ cd /scratch/imagetool-setup/imagetool/bin $ source setup.sh   Validate setup To validate the setup of the WebLogic Image Tool:\n  Enter the following command to retrieve the version of the WebLogic Image Tool:\n$ imagetool --version   Enter imagetool then press the Tab key to display the available imagetool commands:\n$ imagetool \u0026lt;TAB\u0026gt; cache create help rebase update   WebLogic Image Tool build directory The WebLogic Image Tool creates a temporary Docker context directory, prefixed by wlsimgbuilder_temp, every time the tool runs. Under normal circumstances, this context directory will be deleted. However, if the process is aborted or the tool is unable to remove the directory, it is safe for you to delete it manually. By default, the WebLogic Image Tool creates the Docker context directory under the user\u0026rsquo;s home directory. If you prefer to use a different directory for the temporary context, set the environment variable WLSIMG_BLDDIR:\n$ export WLSIMG_BLDDIR=\u0026#34;/path/to/buid/dir\u0026#34; WebLogic Image Tool cache The WebLogic Image Tool maintains a local file cache store. This store is used to look up where the Java, WebLogic Server installers, and WebLogic Server patches reside in the local file system. By default, the cache store is located in the user\u0026rsquo;s $HOME/cache directory. Under this directory, the lookup information is stored in the .metadata file. All automatically downloaded patches also reside in this directory. You can change the default cache store location by setting the environment variable WLSIMG_CACHEDIR:\n$ export WLSIMG_CACHEDIR=\u0026#34;/path/to/cachedir\u0026#34; Set up additional build scripts Creating an Oracle Unified Directory container image using the WebLogic Image Tool requires additional container scripts for Oracle Unified Directory domains.\n  Clone the docker-images repository to set up those scripts. In these steps, this directory is DOCKER_REPO:\n$ cd \u0026lt;workdir\u0026gt;/imagetool-setup $ git clone https://github.com/oracle/docker-images.git For example:\n$ cd /scratch/imagetool-setup $ git clone https://github.com/oracle/docker-images.git    Note: If you want to create the image continue with the following steps, otherwise to update the image see update an image.\n Create an image After setting up the WebLogic Image Tool, follow these steps to use the WebLogic Image Tool to create a new Oracle Unified Directory image.\nDownload the Oracle Unified Directory installation binaries and patches You must download the required Oracle Unified Directory installation binaries and patches as listed below from the Oracle Software Delivery Cloud and save them in a directory of your choice.\nThe installation binaries and patches required are:\n  Oracle Unified Directory 12.2.1.4.0\n fmw_12.2.1.4.0_oud.jar    OUD Patches:\n View document ID 2723908.1 on My Oracle Support. In the Container Image Download/Patch Details section, locate the Oracle Unified Directory (OUD) table. For the latest PSU click the README link in the Documentation column. In the README, locate the \u0026ldquo;Installed Software\u0026rdquo; section. All the patch numbers to be download are listed here. Download all these individual patches from My Oracle Support.    Oracle JDK v8\n jdk-8uXXX-linux-x64.tar.gz where XXX is the JDK version referenced in the README above.    Update required build files The following files in the code repository location \u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleUnifiedDirectory/imagetool/12.2.1.4.0 are used for creating the image:\n additionalBuildCmds.txt buildArgs    Edit the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleUnifiedDirectory/imagetool/12.2.1.4.0/buildArgs file and change %DOCKER_REPO%,%JDK_VERSION% and %BUILDTAG% appropriately.\nFor example:\ncreate --jdkVersion=8u321 --type oud --version=12.2.1.4.0 --tag=oud-latestpsu:12.2.1.4.0 --pull --installerResponseFile /scratch/imagetool-setup/docker-images/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/install/oud.response --additionalBuildCommands /scratch/imagetool-setup/docker-images/OracleUnifiedDirectory/imagetool/12.2.1.4.0/additionalBuildCmds.txt --additionalBuildFiles /scratch/imagetool-setup/docker-images/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/container-scripts   The \u0026lt;workdir\u0026gt;/imagetool-setup/imagetool/docker-images/OracleUnifiedDirectory/imagetool/12.2.1.4.0/additionalBuildCmds.txt contains additional build commands. You may edit this file if you want to customize the image further.\n  Create the image   Add a JDK package to the WebLogic Image Tool cache. For example:\n$ imagetool cache addInstaller --type jdk --version 8uXXX --path \u0026lt;download location\u0026gt;/jdk-8uXXX-linux-x64.tar.gz where XXX is the JDK version downloaded\n  Add the downloaded installation binaries to the WebLogic Image Tool cache. For example:\n$ imagetool cache addInstaller --type OUD --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_oud.jar   Add the downloaded OPatch patch to the WebLogic Image Tool cache. For example:\n$ imagetool cache addEntry --key 28186730_13.9.4.2.8 --value \u0026lt;download location\u0026gt;/p28186730_139428_Generic.zip   Add the rest of the downloaded product patches to the WebLogic Image Tool cache:\n$ imagetool cache addEntry --key \u0026lt;patch\u0026gt;_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p\u0026lt;patch\u0026gt;_122140_Generic.zip For example:\n$ imagetool cache addEntry --key 32971905_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33448950_122140_Generic.zip   Edit the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleUnifiedDirectory/imagetool/12.2.1.4.0/buildArgs file and append the product patches and opatch patch as follows:\n--patches 33448950_12.2.1.4.0 --opatchBugNumber=28186730_13.9.4.2.8 An example buildArgs file is now as follows:\ncreate --jdkVersion=8u321 --type oud --version=12.2.1.4.0 --tag=oud-latestpsu:12.2.1.4.0 --pull --installerResponseFile /scratch/imagetool-setup/docker-images/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/install/oud.response --additionalBuildCommands /scratch/imagetool-setup/docker-images/OracleUnifiedDirectory/imagetool/12.2.1.4.0/additionalBuildCmds.txt --additionalBuildFiles /scratch/imagetool-setup/docker-images/OracleUnifiedDirectory/dockerfiles/12.2.1.4.0/container-scripts --patches 33448950_12.2.1.4.0 --opatchBugNumber=28186730_13.9.4.2.8  Note: In the buildArgs file:\n --jdkVersion value must match the --version value used in the imagetool cache addInstaller command for --type jdk. --version value must match the --version value used in the imagetool cache addInstaller command for --type OUD.   Refer to this page for the complete list of options available with the WebLogic Image Tool create command.\n  Create the Oracle Unified Directory image:\n$ imagetool @\u0026lt;absolute path to buildargs file\u0026gt; --fromImage ghcr.io/oracle/oraclelinux:7-slim  Note: Make sure that the absolute path to the buildargs file is prepended with a @ character, as shown in the example above.\n For example:\n$ imagetool @\u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleUnifiedDirectory/imagetool/12.2.1.4.0/buildArgs --fromImage ghcr.io/oracle/oraclelinux:7-slim   Check the created image using the docker images command:\n$ docker images | grep oud The output will look similar to the following:\noud-latestpsu 12.2.1.4.0 30b02a692fa3 About a minute ago 1.04GB   Run the following command to save the container image to a tar file:\n$ docker save -o \u0026lt;path\u0026gt;/\u0026lt;file\u0026gt;.tar \u0026lt;image\u0026gt; For example:\n$ docker save -o $WORKDIR/oud-latestpsu.tar oud-latestpsu:12.2.1.4.0   Update an image The steps below show how to update an existing Oracle Unified Directory image with an interim patch.\nThe container image to be patched must be loaded in the local docker images repository before attempting these steps.\nIn the examples below the image oracle/oud:12.2.1.4.0 is updated with an interim patch.\n$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE oracle/oud 12.2.1.4.0 b051804ba15f 3 months ago 1.04GB   Set up the WebLogic Image Tool.\n  Download the required interim patch and latest Opatch (28186730) from My Oracle Support. and save them in a directory of your choice.\n  Add the OPatch patch to the WebLogic Image Tool cache, for example:\n$ imagetool cache addEntry --key 28186730_13.9.4.2.8 --value \u0026lt;downloaded-patches-location\u0026gt;/p28186730_139428_Generic.zip   Execute the imagetool cache addEntry command for each patch to add the required patch(es) to the WebLogic Image Tool cache. For example, to add patch p32701831_12214210607_Generic.zip:\n$ imagetool cache addEntry --key=33521773_12.2.1.4.211008 --value \u0026lt;downloaded-patches-location\u0026gt;/p33521773_12214211008_Generic.zip   Provide the following arguments to the WebLogic Image Tool update command:\n –-fromImage - Identify the image that needs to be updated. In the example below, the image to be updated is oracle/oud:12.2.1.4.0. –-patches - Multiple patches can be specified as a comma-separated list. --tag - Specify the new tag to be applied for the image being built.  Refer here for the complete list of options available with the WebLogic Image Tool update command.\n Note: The WebLogic Image Tool cache should have the latest OPatch zip. The WebLogic Image Tool will update the OPatch if it is not already updated in the image.\n For example:\n$ imagetool update --fromImage oracle/oud:12.2.1.4.0 --tag=oracle/oud-new:12.2.1.4.0 --patches=33521773_12.2.1.4.211008 --opatchBugNumber=28186730_13.9.4.2.8  Note: If the command fails because the files in the image being upgraded are not owned by oracle:oracle, then add the parameter --chown \u0026lt;userid\u0026gt;:\u0026lt;groupid\u0026gt; to correspond with the values returned in the error.\n   Check the built image using the docker images command:\n$ docker images | grep oud The output will look similar to the following:\nREPOSITORY TAG IMAGE ID CREATED SIZE oracle/oud-new 12.2.1.4.0 78ccd1ad67eb 5 minutes ago 1.11GB oracle/oud 12.2.1.4.0 b051804ba15f 3 months ago 1.04GB   Run the following command to save the patched container image to a tar file:\n$ docker save -o \u0026lt;path\u0026gt;/\u0026lt;file\u0026gt;.tar \u0026lt;image\u0026gt; For example:\n$ docker save -o $WORKDIR/oud-new.tar oracle/oud-new:12.2.1.4.0   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oudsm/create-or-update-image/",
	"title": "Create or update an image",
	"tags": [],
	"description": "Create or update an Oracle Unified Directory Services Manager (OUDSM) container image used for deploying OUDSM domains.",
	"content": "As described in Prepare Your Environment you can create your own OUDSM container image. If you have access to the My Oracle Support (MOS), and there is a need to build a new image with an interim or one off patch, it is recommended to use the WebLogic Image Tool to build an Oracle Unified Directory image for production deployments.\nCreate or update an Oracle Unified Directory Services Manager image using the WebLogic Image Tool Using the WebLogic Image Tool, you can create a new Oracle Unified Directory Services Manager image with PSU\u0026rsquo;s and interim patches or update an existing image with one or more interim patches.\n Recommendations:\n Use create for creating a new Oracle Unified Directory Services Manager image containing the Oracle Unified Directory Services Manager binaries, bundle patch and interim patches. This is the recommended approach if you have access to the OUDSM patches because it optimizes the size of the image. Use update for patching an existing Oracle Unified Directory Services Manager image with a single interim patch. Note that the patched image size may increase considerably due to additional image layers introduced by the patch application tool.   Create an image Set up the WebLogic Image Tool  Prerequisites Set up the WebLogic Image Tool Validate setup WebLogic Image Tool build directory WebLogic Image Tool cache  Prerequisites Verify that your environment meets the following prerequisites:\n Docker client and daemon on the build machine, with minimum Docker version 18.03.1.ce. Bash version 4.0 or later, to enable the command complete feature. JAVA_HOME environment variable set to the appropriate JDK location e.g: /scratch/export/oracle/product/jdk  Set up the WebLogic Image Tool To set up the WebLogic Image Tool:\n  Create a working directory and change to it:\n$ mdir \u0026lt;workdir\u0026gt; $ cd \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/imagetool-setup $ cd /scratch/imagetool-setup   Download the latest version of the WebLogic Image Tool from the releases page.\n$ wget https://github.com/oracle/weblogic-image-tool/releases/download/release-X.X.X/imagetool.zip where X.X.X is the latest release referenced on the releases page.\n  Unzip the release ZIP file in the imagetool-setup directory.\n$ unzip imagetool.zip   Execute the following commands to set up the WebLogic Image Tool:\n$ cd \u0026lt;workdir\u0026gt;/imagetool-setup/imagetool/bin $ source setup.sh For example:\n$ cd /scratch/imagetool-setup/imagetool/bin $ source setup.sh   Validate setup To validate the setup of the WebLogic Image Tool:\n  Enter the following command to retrieve the version of the WebLogic Image Tool:\n$ imagetool --version   Enter imagetool then press the Tab key to display the available imagetool commands:\n$ imagetool \u0026lt;TAB\u0026gt; cache create help rebase update   WebLogic Image Tool build directory The WebLogic Image Tool creates a temporary Docker context directory, prefixed by wlsimgbuilder_temp, every time the tool runs. Under normal circumstances, this context directory will be deleted. However, if the process is aborted or the tool is unable to remove the directory, it is safe for you to delete it manually. By default, the WebLogic Image Tool creates the Docker context directory under the user\u0026rsquo;s home directory. If you prefer to use a different directory for the temporary context, set the environment variable WLSIMG_BLDDIR:\n$ export WLSIMG_BLDDIR=\u0026#34;/path/to/buid/dir\u0026#34; WebLogic Image Tool cache The WebLogic Image Tool maintains a local file cache store. This store is used to look up where the Java, WebLogic Server installers, and WebLogic Server patches reside in the local file system. By default, the cache store is located in the user\u0026rsquo;s $HOME/cache directory. Under this directory, the lookup information is stored in the .metadata file. All automatically downloaded patches also reside in this directory. You can change the default cache store location by setting the environment variable WLSIMG_CACHEDIR:\n$ export WLSIMG_CACHEDIR=\u0026#34;/path/to/cachedir\u0026#34; Set up additional build scripts Creating an Oracle Unified Directory Services Manager container image using the WebLogic Image Tool requires additional container scripts for Oracle Unified Directory Services Manager domains.\n  Clone the docker-images repository to set up those scripts. In these steps, this directory is DOCKER_REPO:\n$ cd \u0026lt;workdir\u0026gt;/imagetool-setup $ git clone https://github.com/oracle/docker-images.git For example:\n$ cd /scratch/imagetool-setup $ git clone https://github.com/oracle/docker-images.git    Note: If you want to create the image continue with the following steps, otherwise to update the image see update an image.\n Create an image After setting up the WebLogic Image Tool, follow these steps to use the WebLogic Image Tool to create a new Oracle Unified Directory Services Manager image.\nDownload the Oracle Unified Directory Services Manager installation binaries and patches You must download the required Oracle Unified Directory Services Manager installation binaries and patches as listed below from the Oracle Software Delivery Cloud and save them in a directory of your choice.\nThe installation binaries and patches required are:\n  Oracle Unified Directory 12.2.1.4.0\n fmw_12.2.1.4.0_oud.jar    Oracle Fusion Middleware 12c Infrastructure 12.2.1.4.0\n fmw_12.2.1.4.0_infrastructure.jar    OUDSM and FMW Infrastructure Patches:\n View document ID 2723908.1 on My Oracle Support. In the Container Image Download/Patch Details section, locate the Oracle Unified Directory Services Manager (OUDSM) table. For the latest PSU click the README link in the Documentation column. In the README, locate the \u0026ldquo;Installed Software\u0026rdquo; section. All the patch numbers to be download are listed here. Download all these individual patches from My Oracle Support.    Oracle JDK v8\n jdk-8uXXX-linux-x64.tar.gz where XXX is the JDK version referenced in the README above.    Update required build files The following files in the code repository location \u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleUnifiedDirectorySM/imagetool/12.2.1.4.0 are used for creating the image:\n additionalBuildCmds.txt buildArgs    Edit the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleUnifiedDirectorySM/imagetool/12.2.1.4.0/buildArgs file and change %DOCKER_REPO%,%JDK_VERSION% and %BUILDTAG% appropriately.\nFor example:\ncreate --jdkVersion=8u321 --type oud_wls --version=12.2.1.4.0 --tag=oudsm-latestpsu:12.2.1.4.0 --pull --installerResponseFile /scratch/imagetool-setup/docker-images/OracleFMWInfrastructure/dockerfiles/12.2.1.4/install.file,/scratch/imagetool-setup/docker-images/OracleUnifiedDirectorySM/dockerfiles/12.2.1.4.0/install/oud.response --additionalBuildCommands /scratch/imagetool-setup/docker-images/OracleUnifiedDirectorySM/imagetool/12.2.1.4.0/additionalBuildCmds.txt --additionalBuildFiles /scratch/imagetool-setup/docker-images/OracleUnifiedDirectorySM/dockerfiles/12.2.1.4.0/container-scripts   The \u0026lt;workdir\u0026gt;/imagetool-setup/imagetool/docker-images/OracleUnifiedDirectorySM/imagetool/12.2.1.4.0/additionalBuildCmds.txt contains additional build commands. You may edit this file if you want to customize the image further.\n  Edit the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleFMWInfrastructure/dockerfiles/12.2.1.4/install.file and under the GENERIC section add the line INSTALL_TYPE=\u0026quot;Fusion Middleware Infrastructure\u0026rdquo;. For example:\n[GENERIC] INSTALL_TYPE=\u0026quot;Fusion Middleware Infrastructure\u0026quot; DECLINE_SECURITY_UPDATES=true SECURITY_UPDATES_VIA_MYORACLESUPPORT=false   Create the image   Add a JDK package to the WebLogic Image Tool cache. For example:\n$ imagetool cache addInstaller --type jdk --version 8uXXX --path \u0026lt;download location\u0026gt;/jdk-8uXXX-linux-x64.tar.gz where XXX is the JDK version downloaded\n  Add the downloaded installation binaries to the WebLogic Image Tool cache. For example:\n$ imagetool cache addInstaller --type OUD --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_oud.jar $ imagetool cache addInstaller --type fmw --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_infrastructure.jar   Add the downloaded OPatch patch to the WebLogic Image Tool cache. For example:\n$ imagetool cache addEntry --key 28186730_13.9.4.2.8 --value \u0026lt;download location\u0026gt;/p28186730_139428_Generic.zip   Add the rest of the downloaded product patches to the WebLogic Image Tool cache:\n$ imagetool cache addEntry --key \u0026lt;patch\u0026gt;_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p\u0026lt;patch\u0026gt;_122140_Generic.zip For example:\n$ imagetool cache addEntry --key 33727616_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33727616_122140_Generic.zip $ imagetool cache addEntry --key 33093748_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33093748_122140_Generic.zip $ imagetool cache addEntry --key 32720458_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32720458_122140_Generic.zip $ imagetool cache addEntry --key 33791665_12.2.1.4.220105 --value \u0026lt;download location\u0026gt;/p33791665_12214220105_Generic.zip $ imagetool cache addEntry --key 33723124_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33723124_122140_Generic.zip $ imagetool cache addEntry --key 32647448_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32647448_122140_Linux-x86-64.zip $ imagetool cache addEntry --key 33591019_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33591019_122140_Generic.zip $ imagetool cache addEntry --key 32999272_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32999272_122140_Generic.zip $ imagetool cache addEntry --key 33448950_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33448950_122140_Generic.zip $ imagetool cache addEntry --key 33697227_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33697227_122140_Generic.zip $ imagetool cache addEntry --key 33678607_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33678607_122140_Generic.zip $ imagetool cache addEntry --key 33735326_12.2.1.4.220105 --value \u0026lt;download location\u0026gt;/p33735326_12214220105_Generic.zip   Edit the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleUnifiedDirectorySM/imagetool/12.2.1.4.0/buildArgs file and append the product patches and opatch patch as follows:\n--patches 33727616_12.2.1.4.0,33093748_12.2.1.4.0,32720458_12.2.1.4.0,33791665_12.2.1.4.220105,33723124_12.2.1.4.0,32647448_12.2.1.4.0,33591019_12.2.1.4.0,32999272_12.2.1.4.0,33448950_12.2.1.4.0,32999272_12.2.1.4.0,33448950_12.2.1.4.0,33697227_12.2.1.4.0,33678607_12.2.1.4.0,33735326_12.2.1.4.220105 --opatchBugNumber=28186730_13.9.4.2.8 An example buildArgs file is now as follows:\ncreate --jdkVersion=8u321 --type oud_wls --version=12.2.1.4.0 --tag=oudsm-latestpsu:12.2.1.4.0 --pull --installerResponseFile /scratch/imagetool-setup/docker-images/OracleFMWInfrastructure/dockerfiles/12.2.1.4/install.file,/scratch/imagetool-setup/docker-images/OracleUnifiedDirectorySM/dockerfiles/12.2.1.4.0/install/oud.response --additionalBuildCommands /scratch/imagetool-setup/docker-images/OracleUnifiedDirectorySM/imagetool/12.2.1.4.0/additionalBuildCmds.txt --additionalBuildFiles /scratch/imagetool-setup/docker-images/OracleUnifiedDirectorySM/dockerfiles/12.2.1.4.0/container-scripts --patches 33727616_12.2.1.4.0,33093748_12.2.1.4.0,32720458_12.2.1.4.0,33791665_12.2.1.4.220105,33723124_12.2.1.4.0,32647448_12.2.1.4.0,33591019_12.2.1.4.0,32999272_12.2.1.4.0,33448950_12.2.1.4.0,33448950_12.2.1.4.0,33697227_12.2.1.4.0,33678607_12.2.1.4.0,33735326_12.2.1.4.220105 --opatchBugNumber=28186730_13.9.4.2.8  Note: In the buildArgs file:\n --jdkVersion value must match the --version value used in the imagetool cache addInstaller command for --type jdk. --version value must match the --version value used in the imagetool cache addInstaller command for --type OUDSM.   Refer to this page for the complete list of options available with the WebLogic Image Tool create command.\n  Create the Oracle Unified Directory Services Manager image:\n$ imagetool @\u0026lt;absolute path to buildargs file\u0026gt; --fromImage ghcr.io/oracle/oraclelinux:7-slim  Note: Make sure that the absolute path to the buildargs file is prepended with a @ character, as shown in the example above.\n For example:\n$ imagetool @\u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleUnifiedDirectorySM/imagetool/12.2.1.4.0/buildArgs --fromImage ghcr.io/oracle/oraclelinux:7-slim   Check the created image using the docker images command:\n$ docker images | grep oudsm The output will look similar to the following:\noudsm-latestpsu 12.2.1.4.0 f6dd9d2ca0e6 4 minutes ago 3.72GB   Run the following command to save the container image to a tar file:\n$ docker save -o \u0026lt;path\u0026gt;/\u0026lt;file\u0026gt;.tar \u0026lt;image\u0026gt; For example:\n$ docker save -o $WORKDIR/oudsm-latestpsu.tar oudsm-latestpsu:12.2.1.4.0   Update an image The steps below show how to update an existing Oracle Unified Directory Services Manager image with an interim patch.\nThe container image to be patched must be loaded in the local docker images repository before attempting these steps.\nIn the examples below the image oracle/oudsm:12.2.1.4.0 is updated with an interim patch.\n$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE oracle/oudsm 12.2.1.4.0 b051804ba15f 3 months ago 3.72GB   Set up the WebLogic Image Tool.\n  Download the required interim patch and latest Opatch (28186730) from My Oracle Support. and save them in a directory of your choice.\n  Add the OPatch patch to the WebLogic Image Tool cache, for example:\n$ imagetool cache addEntry --key 28186730_13.9.4.2.8 --value \u0026lt;downloaded-patches-location\u0026gt;/p28186730_139428_Generic.zip   Execute the imagetool cache addEntry command for each patch to add the required patch(es) to the WebLogic Image Tool cache. For example, to add patch p33521773_12214211008_Generic.zip:\n$ imagetool cache addEntry --key=33521773_12.2.1.4.211008 --value \u0026lt;downloaded-patches-location\u0026gt;/p33521773_12214211008_Generic.zip   Provide the following arguments to the WebLogic Image Tool update command:\n –-fromImage - Identify the image that needs to be updated. In the example below, the image to be updated is oracle/oudsm:12.2.1.4.0. –-patches - Multiple patches can be specified as a comma-separated list. --tag - Specify the new tag to be applied for the image being built.  Refer here for the complete list of options available with the WebLogic Image Tool update command.\n Note: The WebLogic Image Tool cache should have the latest OPatch zip. The WebLogic Image Tool will update the OPatch if it is not already updated in the image.\n For example:\n$ imagetool update --fromImage oracle/oudsm:12.2.1.4.0 --tag=oracle/oudsm-new:12.2.1.4.0 --patches=33521773_12.2.1.4.211008 --opatchBugNumber=28186730_13.9.4.2.8  Note: If the command fails because the files in the image being upgraded are not owned by oracle:oracle, then add the parameter --chown \u0026lt;userid\u0026gt;:\u0026lt;groupid\u0026gt; to correspond with the values returned in the error.\n   Check the built image using the docker images command:\n$ docker images | grep oudsm The output will look similar to the following:\nREPOSITORY TAG IMAGE ID CREATED SIZE oracle/oudsm-new 12.2.1.4.0 78ccd1ad67eb 5 minutes ago 1.11GB oracle/oudsm 12.2.1.4.0 b051804ba15f 3 months ago 1.04GB   Run the following command to save the patched container image to a tar file:\n$ docker save -o \u0026lt;path\u0026gt;/\u0026lt;file\u0026gt;.tar \u0026lt;image\u0026gt; For example:\n$ docker save -o $WORKDIR/oudsm-new.tar oracle/oudsm-new:12.2.1.4.0   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/ohs/patch-and-upgrade/",
	"title": "Patch and Upgrade",
	"tags": [],
	"description": "This document provides steps to patch or upgrade an OHS image.",
	"content": "This section shows you how to patch or upgrade the the OHS image used by an OHS container.\n  To show the version of the image the OHS container is currently running, run the following command:\n$ kubectl describe pod \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; | grep Image For example:\n$ kubectl describe pod ohs-domain-d5b648bc5-qsgts -n ohsns | grep Image The output will look similar to the following:\nImage: container-registry.oracle.com/middleware/ohs_cpu:12.2.1.4-jdk8-ol8-\u0026lt;version\u0026gt; Image ID: 9a7199ac903114793d6ad1f320010c3dbd59a39ad9bc987d926d3422a68603e7   Run the following command to update the container with the new image:\n$ kubectl set image deployment/ohs-domain -n \u0026lt;namespace\u0026gt; ohs=\u0026lt;new_image\u0026gt; For example:\n$ kubectl set image deployment/ohs-domain -n ohsns ohs=container-registry.oracle.com/middleware/ohs_cpu:12.2.1.4-jdk8-ol8-\u0026lt;new\u0026gt; The output will look similar to the following:\ndeployment.apps/ohs-domain image updated This command will perform a rolling restart of the OHS container by shutting down the existing OHS container and starting a new one.\n  Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n ohsns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE ohs-domain-5c9c9879d-kpt9j 0/1 ContainerCreating 0 8s ohs-domain-d5b648bc5-qsgts 1/1 Terminating 0 17h The existing OHS pod will move to a STATUS of Terminating and a new OHS pod will be started.\nTo check what is happening while the pods are in ContainerCreating status, you can run:\n$ kubectl describe pod \u0026lt;podname\u0026gt; -n \u0026lt;namespace\u0026gt; To check what is happening while the pods are in 0/1 Running status, you can run:\n$ kubectl logs -f \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; Keep running the kubectl get pods -n \u0026lt;namespace\u0026gt; command until the pod is Running and at READY 1\\1:\nNAME READY STATUS RESTARTS AGE ohs-domain-5c9c9879d-kpt9j 1/1 Running 0 6m40s   To show the OHS container is running the new image, run the following command:\n$ kubectl describe pod \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; | grep Image For example:\n$ kubectl describe pod ohs-domain-5c9c9879d-kpt9j -n ohsns | grep Image The output will look similar to the following:\nImage: container-registry.oracle.com/middleware/ohs_cpu:12.2.1.4-jdk8-ol8-\u0026lt;new\u0026gt; Image ID: 118c5c3713ddd6804cb699ecd0c7bd4a26ebf7e1427c5351c63244b5eb74ca94   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/post-install-config/",
	"title": "Post Install Configuration",
	"tags": [],
	"description": "Post install configuration.",
	"content": "Follow these post install configuration steps.\n Create a Server Overrides File Removing OAM Server from WebLogic Server 12c Default Coherence Cluster WebLogic Server Tuning Enable Virtualization Restart the domain  Create a Server Overrides File   Navigate to the following directory:\nFor OAM domains created with WLST:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/output/weblogic-domains/accessdomain For OAM domains created with WDT:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/   Create a setUserOverrides.sh with the following contents:\nDERBY_FLAG=false JAVA_OPTIONS=\u0026quot;${JAVA_OPTIONS} -Djava.net.preferIPv4Stack=true\u0026quot; MEM_ARGS=\u0026quot;-Xms8192m -Xmx8192m\u0026quot;   Copy the setUserOverrides.sh file to the Administration Server pod:\n$ chmod 755 setUserOverrides.sh $ kubectl cp setUserOverrides.sh oamns/accessdomain-adminserver:/u01/oracle/user_projects/domains/accessdomain/bin/setUserOverrides.sh Where oamns is the OAM namespace and accessdomain is the DOMAIN_NAME/UID.\n  Stop the OAM domain using the following command:\n$ kubectl -n \u0026lt;domain_namespace\u0026gt; patch domains \u0026lt;domain_uid\u0026gt; --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Never\u0026#34; }]\u0026#39; For example:\n$ kubectl -n oamns patch domains accessdomain --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Never\u0026#34; }]\u0026#39; The output will look similar to the following:\ndomain.weblogic.oracle/accessdomain patched   Check that all the pods are stopped:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Terminating 0 27m accessdomain-oam-policy-mgr1 1/1 Terminating 0 24m accessdomain-oam-server1 1/1 Terminating 0 24m nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 108m The Administration Server pod and Managed Server pods will move to a STATUS of Terminating. After a few minutes, run the command again and the pods should have disappeared:\nNAME READY STATUS RESTARTS AGE nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 109m   Start the domain using the following command:\n$ kubectl -n \u0026lt;domain_namespace\u0026gt; patch domains \u0026lt;domain_uid\u0026gt; --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;IfNeeded\u0026#34; }]\u0026#39; For example:\n$ kubectl -n oamns patch domains accessdomain --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;IfNeeded\u0026#34; }]\u0026#39; Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-introspector-mckp2 1/1 Running 0 8s nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 110m The Administration Server pod will start followed by the OAM Managed Servers pods. This process will take several minutes, so keep executing the command until all the pods are running with READY status 1/1:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 5m38s accessdomain-oam-policy-mgr1 1/1 Running 0 2m51s accessdomain-oam-server1 1/1 Running 0 2m50s nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 116m   Removing OAM Server from WebLogic Server 12c Default Coherence Cluster Exclude all Oracle Access Management (OAM) clusters (including Policy Manager and OAM runtime server) from the default WebLogic Server 12c coherence cluster by using the WebLogic Server Administration Console.\nFrom 12.2.1.3.0 onwards, OAM server-side session management uses the database and does not require coherence cluster to be established. In some environments, warnings and errors are observed due to default coherence cluster initialized by WebLogic. To avoid or fix these errors, exclude all of the OAM clusters from default WebLogic Server coherence cluster using the following steps:\n Login to the WebLogic Server Console at https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/console. Click Lock \u0026amp; Edit. In Domain Structure, expand Environment and select Coherence Clusters. Click defaultCoherenceCluster and select the Members tab. From Servers and Clusters, deselect all OAM clusters (oam_cluster and policy_cluster). Click Save. Click Activate changes.  WebLogic Server Tuning For production environments, the following WebLogic Server tuning parameters must be set:\nAdd Minimum Thread constraint to worker manager \u0026ldquo;OAPOverRestWM\u0026rdquo;  Login to the WebLogic Server Console at https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/console. Click Lock \u0026amp; Edit. In Domain Structure, click Deployments. On the Deployments page click Next until you see oam_server. Expand oam_server by clicking on the + icon, then click /iam/access/binding. Click the Configuration tab, followed by the Workload tab. Click wm/OAPOverRestWM Under Application Scoped Work Managed Components, click New. In Create a New Work Manager Component, select Minumum Threads Constraint and click Next. In Minimum Threads Constraint Properties enter the Count as 400 and click Finish. In the Save Deployment Plan change the Path to the value /u01/oracle/user_projects/domains/accessdomain/Plan.xml, where accessdomain is your domain_UID. Click OK and then Activate Changes.  Remove Max Thread Constraint and Capacity Constraint  Repeat steps 1-7 above. Under Application Scoped Work Managed Components select the check box for Capacity and MaxThreadsCount. Click Delete. In the Delete Work Manage Components screen, click OK to delete. Click on Release Configuration and then Log Out.  oamDS DataSource Tuning  Login to the WebLogic Server Console at https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/console. Click Lock \u0026amp; Edit. In Domain Structure, Expand Services and click Data Sources. Click on oamDS. In Settings for oamDS, select the Configuration tab, and then the Connection Pool tab. Change Initial Capacity, Maximum Capacity, and Minimum Capacity to 800 and click Save. Click Activate Changes.  Enable Virtualization  Log in to Oracle Enterprise Manager Fusion Middleware Control at https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/em Click WebLogic Domain \u0026gt; Security \u0026gt; Security Provider Configuration. Expand Security Store Provider. Expand Identity Store Provider. Click Configure. Add a custom property. Select virtualize property with value true and click OK. Click OK again to persist the change.  Restart the domain For the above changes to take effect, you must restart the OAM domain:\n  Stop the OAM domain using the following command:\n$ kubectl -n \u0026lt;domain_namespace\u0026gt; patch domains \u0026lt;domain_uid\u0026gt; --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Never\u0026#34; }]\u0026#39; For example:\n$ kubectl -n oamns patch domains accessdomain --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Never\u0026#34; }]\u0026#39; The output will look similar to the following:\ndomain.weblogic.oracle/accessdomain patched   Check that all the pods are stopped:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Terminating 0 27m accessdomain-oam-policy-mgr1 1/1 Terminating 0 24m accessdomain-oam-server1 1/1 Terminating 0 24m nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 108m The Administration Server pod and Managed Server pods will move to a STATUS of Terminating. After a few minutes, run the command again and the pods should have disappeared:\nNAME READY STATUS RESTARTS AGE nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 109m   Start the domain using the following command:\n$ kubectl -n \u0026lt;domain_namespace\u0026gt; patch domains \u0026lt;domain_uid\u0026gt; --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;IfNeeded\u0026#34; }]\u0026#39; For example:\n$ kubectl -n oamns patch domains accessdomain --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;IfNeeded\u0026#34; }]\u0026#39; Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-introspector-mckp2 1/1 Running 0 8s nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 110m The Administration Server pod will start followed by the OAM Managed Servers pods. This process will take several minutes, so keep executing the command until all the pods are running with READY status 1/1:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 5m38s accessdomain-oam-policy-mgr1 1/1 Running 0 2m51s accessdomain-oam-server1 1/1 Running 0 2m50s nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 116m   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/post-install-config/",
	"title": "Post install configuration",
	"tags": [],
	"description": "Post install configuration.",
	"content": "Follow these post install configuration steps.\n a. Post Install Tasks  Perform post install tasks.\n b. Install and configure connectors  Install and Configure Connectors.\n "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/configure-design-console/",
	"title": "Configure Design Console",
	"tags": [],
	"description": "Configure Design Console.",
	"content": "Configure an Ingress to allow Design Console to connect to your Kubernetes cluster.\n a. Using Design Console with NGINX(non-SSL)  Configure Design Console with NGINX(non-SSL).\n b. Using Design Console with NGINX(SSL)  Configure Design Console with NGINX(SSL).\n "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oud/patch-and-upgrade/",
	"title": "Patch and Upgrade",
	"tags": [],
	"description": "This document provides steps to patch or upgrade an OUD image",
	"content": "In this section you learn how to upgrade OUD from a previous version. Follow the section relevant to the version you are upgrading from.\n Upgrading to October 24 (24.4.1) from April 23 (23.2.1) or later Upgrading to October 24 (24.4.1) from October 22 (22.4.1) or January 23 (23.1.1) Upgrading to October 24 (24.4.1) from July 22 (22.3.1) Upgrading to October 24 (24.4.1) from releases prior to July 22 (22.3.1) Upgrading Elasticsearch and Kibana  Note: If on July 22 (22.3.1) or later, and have Kubernetes Horizontal Pod Autoscaler (HPA) enabled, you must disable HPA before performing the steps in the relevant upgrade section. See Delete the HPA.\nUpgrading to October 24 (24.4.1) from April 23 (23.2.1) or later The instructions below are for upgrading from April 23 (23.2.1) or later to October 24 (24.4.1).\nNote: If you are not using Oracle Container Registry or your own container registry, then you must first load the new container image on all nodes in your Kubernetes cluster.\n  Navigate to the $WORKDIR/kubernetes/helm directory:\n$ cd $WORKDIR/kubernetes/helm   Create a oud-patch-override.yaml file that contains:\nimage: repository: \u0026lt;image_location\u0026gt; tag: \u0026lt;image_tag\u0026gt; imagePullSecrets: - name: orclcred For example:\nimage: repository: container-registry.oracle.com/middleware/oud_cpu tag: 12.2.1.4-jdk8-ol8-\u0026lt;October\u0026#39;24\u0026gt; imagePullSecrets: - name: orclcred The following caveats exist:\n  If you are not using Oracle Container Registry or your own container registry for your OUD container image, then you can remove the following:\nimagePullSecrets: - name: orclcred     Run the following command to upgrade the deployment:\n$ helm upgrade --namespace \u0026lt;namespace\u0026gt; \\ --values oud-patch-override.yaml \\ \u0026lt;release_name\u0026gt; oud-ds-rs --reuse-values For example:\n$ helm upgrade --namespace oudns \\ --values oud-patch-override.yaml \\ oud-ds-rs oud-ds-rs --reuse-values   Upgrading to October 24 (24.4.1) from October 22 (22.4.1) or January 23 (23.1.1) The instructions below are for upgrading from October 22 (22.4.1) or January 23 (23.1.1), to October (24.4.1).\nNote: If you are not using Oracle Container Registry or your own container registry, then you must first load the new container image on all nodes in your Kubernetes cluster.\nScale down OUD   Make sure the base pod (oud-ds-rs-0) is running and healthy (READY 1/1) by running the following command:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods -n oudns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE oud-ds-rs-0 1/1 Running 0 21h oud-ds-rs-1 1/1 Running 0 20h oud-ds-rs-2 1/1 Running 0 20h   Ensure dsreplication is healthy by running the following command:\n$ $ kubectl --namespace \u0026lt;namespace\u0026gt; exec -it -c \u0026lt;containername\u0026gt; \u0026lt;podname\u0026gt; -- \\ /u01/oracle/user_projects/\u0026lt;OUD Instance/Pod Name\u0026gt;/OUD/bin/dsreplication status \\ --trustAll --hostname \u0026lt;OUD Instance/Pod Name\u0026gt; --port 1444 --adminUID admin \\ --dataToDisplay compat-view --dataToDisplay rs-connections For example:\n$ kubectl --namespace oudns exec -it -c oud-ds-rs oud-ds-rs-0 -- \\ /u01/oracle/user_projects/oud-ds-rs-0/OUD/bin/dsreplication status \\ --trustAll --hostname oud-ds-rs-0 --port 1444 --adminUID admin \\ --dataToDisplay compat-view --dataToDisplay rs-connections The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE \u0026gt;\u0026gt;\u0026gt;\u0026gt; Specify Oracle Unified Directory LDAP connection parameters Password for user 'admin': Establishing connections and reading configuration ..... Done. dc=example,dc=com - Replication Enabled ======================================= Server : Entries : M.C. [1] : A.O.M.C. [2] : Port [3] : Encryption [4] : Trust [5] : U.C. [6] : Status [7] : ChangeLog [8] : Group ID [9] : Connected To [10] ---------------------:---------:----------:--------------:----------:----------------:-----------:----------:------------:---------------:--------------:------------------------------- oud-ds-rs-0:1444 : 202 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-0:1898 : : : : : : : : : : : (GID=1) oud-ds-rs-1:1444 : 202 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-1:1898 : : : : : : : : : : : (GID=1) oud-ds-rs-2:1444 : 202 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-2:1898 : : : : : : : : : : : (GID=1) Replication Server [11] : RS #1 : RS #2 : RS #3 -------------------------------:-------:-------:------ oud-ds-rs-0:1898 : -- : Yes : Yes (#1) : : : oud-ds-rs-1:1898 : Yes : -- : Yes (#2) : : : oud-ds-rs-2:1898 : Yes : Yes : -- (#3) : : : etc...   Scale down OUD by reducing the replicas to 1:\n$ cd $WORKDIR/kubernetes/helm $ helm upgrade -n oudns --set replicaCount=1 oud-ds-rs oud-ds-rs --reuse-values Note: The $WORKDIR is the directory for your existing release, not October 24.\nThe output will be similar to the following:\nRelease \u0026quot;oud-ds-rs\u0026quot; has been upgraded. Happy Helming! NAME: oud-ds-rs LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oudns STATUS: deployed REVISION: 2 NOTES: etc.. Make sure the replica pods are shutdown before proceeding:\n$ kubectl get pods -n oudns NAME READY STATUS RESTARTS AGE oud-ds-rs-0 1/1 Running 0 21h Note: It will take several minutes before the replica pods disappear.\n  Backup OUD data   Take a backup of the OUD data for every pod in the NFS shared volume:\n$ kubectl exec -it -n oudns oud-ds-rs-0 -- bash [oracle@oud-ds-rs-0 oracle]$ cd user_projects [oracle@oud-ds-rs-0 user_projects]$ mkdir OUD_backup_\u0026lt;DATE\u0026gt; [oracle@oud-ds-rs-0 user_projects]$ cp -r oud-ds-rs-* OUD_backup_\u0026lt;DATE\u0026gt;/   Make sure the backup created successfully:\n[oracle@oud-ds-rs-0 user_projects]$ ls -l OUD_backup_\u0026lt;date\u0026gt; total 2 drwxr-x---. 5 oracle root 3 \u0026lt;DATE\u0026gt; oud-ds-rs-0 drwxr-x---. 5 oracle root 3 \u0026lt;DATE\u0026gt; oud-ds-rs-1 drwxr-x---. 5 oracle root 3 \u0026lt;DATE\u0026gt; oud-ds-rs-2   Remove the non-zero pod directories oud-ds-rs-1 and oud-ds-rs-2:\n[oracle@oud-ds-rs-0 user_projects]$ rm -rf oud-ds-rs-1 oud-ds-rs-2   Exit the oud-ds-rs-0 bash session:\n[oracle@oud-ds-rs-0 user_projects]$ exit   Setup the October 24 code repository to deploy OUD   Create a working directory on the persistent volume to setup the latest source code:\n$ mkdir \u0026lt;persistent_volume\u0026gt;/\u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/shared/OUDK8SJul24   Download the latest OUD deployment scripts from the OUD repository:\n$ cd \u0026lt;persistent_volume\u0026gt;/\u0026lt;workdir\u0026gt; $ git clone https://github.com/oracle/fmw-kubernetes.git --branch release/24.4.1 For example:\n$ mkdir /scratch/shared/OUDK8SJul24 $ git clone https://github.com/oracle/fmw-kubernetes.git --branch release/24.4.1   Set the $WORKDIR environment variable as follows:\n$ export WORKDIR=\u0026lt;workdir\u0026gt;/fmw-kubernetes/OracleUnifiedDirectory For example:\n$ export WORKDIR=/scratch/shared/OUDK8SJul24/fmw-kubernetes/OracleUnifiedDirectory   Update the OUD container image   Navigate to the $WORKDIR/kubernetes/helm directory:\n$ cd $WORKDIR/kubernetes/helm   Create a oud-patch-override.yaml file that contains:\nimage: repository: \u0026lt;image_location\u0026gt; tag: \u0026lt;image_tag\u0026gt; pullPolicy: IfNotPresent imagePullSecrets: - name: orclcred oudConfig: cleanupbeforeStart: false disablereplicationbeforeStop: false replicaCount: 3 For example:\nimage: repository: container-registry.oracle.com/middleware/oud_cpu tag: 12.2.1.4-jdk8-ol8-\u0026lt;October\u0026#39;24\u0026gt; pullPolicy: IfNotPresent imagePullSecrets: - name: orclcred oudConfig: cleanupbeforeStart: false disablereplicationbeforeStop: false replicaCount: 3 The following caveats exist:\n  If you are not using Oracle Container Registry or your own container registry for your OUD container image, then you can remove the following:\nimagePullSecrets: - name: orclcred     Run the following command to upgrade the deployment:\n$ cd $WORKDIR/kubernetes/helm $ helm upgrade --namespace \u0026lt;namespace\u0026gt; \\ --values oud-patch-override.yaml \\ \u0026lt;release_name\u0026gt; oud-ds-rs --reuse-values For example:\n$ cd $WORKDIR/kubernetes/helm $ helm upgrade --namespace oudns \\ --values oud-patch-override.yaml \\ oud-ds-rs oud-ds-rs --reuse-values The output should look similar to the following:\nRelease \u0026quot;oud-ds-rs\u0026quot; has been upgraded. Happy Helming! NAME: oud-ds-rs LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oudns STATUS: deployed REVISION: 3 NOTES: etc..   Verify the pods   After updating with the new image the pods will restart. Verify the pods are running:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; get pods For example:\n$ kubectl --namespace oudns get pods The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE oud-ds-rs-0 1/1 Running 0 11m oud-ds-rs-1 1/1 Running 0 28m oud-ds-rs-2 1/1 Running 0 22m ... Note: It will take several minutes before the pods oud-ds-rs-1 and oud-ds-rs-2 start, and oud-ds-rs-0 restarts. While the OUD pods have a STATUS of 0/1 the pods are started but the OUD server associated with it is currently starting.\n  Verify the pods are using the new image by running the following command:\n$ kubectl describe pod \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe pod oud-ds-rs-0 -n oudns | grep Image The output will look similar to the following:\n... Image: container-registry.oracle.com/middleware/oud_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October\u0026#39;24\u0026gt; Image ID: container-registry.oracle.com/middleware/oud_cpu@sha256:\u0026lt;sha256\u0026gt;   Ensure dsreplication is healthy by running the following command:\n$ $ kubectl --namespace \u0026lt;namespace\u0026gt; exec -it -c \u0026lt;containername\u0026gt; \u0026lt;podname\u0026gt; -- \\ /u01/oracle/user_projects/\u0026lt;OUD Instance/Pod Name\u0026gt;/OUD/bin/dsreplication status \\ --trustAll --hostname \u0026lt;OUD Instance/Pod Name\u0026gt; --port 1444 --adminUID admin \\ --dataToDisplay compat-view --dataToDisplay rs-connections For example:\n$ kubectl --namespace oudns exec -it -c oud-ds-rs oud-ds-rs-0 -- \\ /u01/oracle/user_projects/oud-ds-rs-0/OUD/bin/dsreplication status \\ --trustAll --hostname oud-ds-rs-0 --port 1444 --adminUID admin \\ --dataToDisplay compat-view --dataToDisplay rs-connections The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE \u0026gt;\u0026gt;\u0026gt;\u0026gt; Specify Oracle Unified Directory LDAP connection parameters Password for user 'admin': Establishing connections and reading configuration ..... Done. dc=example,dc=com - Replication Enabled ======================================= Server : Entries : M.C. [1] : A.O.M.C. [2] : Port [3] : Encryption [4] : Trust [5] : U.C. [6] : Status [7] : ChangeLog [8] : Group ID [9] : Connected To [10] ---------------------:---------:----------:--------------:----------:----------------:-----------:----------:------------:---------------:--------------:------------------------------- oud-ds-rs-0:1444 : 202 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-0:1898 : : : : : : : : : : : (GID=1) oud-ds-rs-1:1444 : 202 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-1:1898 : : : : : : : : : : : (GID=1) oud-ds-rs-2:1444 : 202 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-2:1898 : : : : : : : : : : : (GID=1) Replication Server [11] : RS #1 : RS #2 : RS #3 -------------------------------:-------:-------:------ oud-ds-rs-0:1898 : -- : Yes : Yes (#1) : : : oud-ds-rs-1:1898 : Yes : -- : Yes (#2) : : : oud-ds-rs-2:1898 : Yes : Yes : -- (#3) : : : etc...   Once the validation steps are performed and you are confident OUD is working correctly, you can optionally delete the OUD backup data in the NFS shared volume:\n$ kubectl exec -it -n oudns oud-ds-rs-0 -- bash [oracle@oud-ds-rs-0 oracle]$ cd user_projects/OUD_backup_\u0026lt;DATE\u0026gt;/ [oracle@oud-ds-rs-0 OUD_backup_\u0026lt;DATE\u0026gt;]$ rm -rf oud-ds-rs-0 oud-ds-rs-1 oud-ds-rs-2   Upgrading to October 24 (24.4.1) from July 22 (22.3.1) The instructions below are for upgrading from July 22 (22.3.1) to October 24 (24.4.1).\n Follow Upgrading to October 24 (24.4.1) from October 22 (22.4.1) or January 23 (23.1.1) to upgrade the image. Once the image is upgraded, follow Upgrading Elasticsearch and Kibana.  Upgrading to October 24 (24.4.1) from releases prior to July 22 (22.3.1) In releases prior to July 22 (22.3.1) OUD used pod based deployment. From July 22 (22.3.1) onwards OUD is deployed using StatefulSets.\nIf you are upgrading from a release prior to July 22 (22.3.1) you must follow the steps below to deploy a new OUD instance to use your existing OUD data in \u0026lt;persistent_volume\u0026gt;/oud_user_projects.\nNote: The steps below will incur a small outage.\nDelete the existing deployment   Find the deployment release name as follows:\n$ helm --namespace \u0026lt;namespace\u0026gt; list For example:\n$ helm --namespace oudns list The output will look similar to the following:\nNAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION oud-ds-rs oudns 1 \u0026lt;DATE\u0026gt; deployed oud-ds-rs-0.2 12.2.1.4.0   Delete the deployment using the following command:\n$ helm uninstall --namespace \u0026lt;namespace\u0026gt; \u0026lt;release\u0026gt; For example:\n$ helm uninstall --namespace oudns oud-ds-rs release \u0026#34;oud-ds-rs\u0026#34; uninstalled   Run the following command to view the status:\n$ kubectl --namespace oudns get pod,service,secret,pv,pvc,ingress -o wide Initially the pods and persistent volume (PV) and persistent volume claim (PVC) will move to a Terminating status:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oud-ds-rs-0 1/1 Terminating 0 24m 10.244.1.180 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-1 1/1 Terminating 0 18m 10.244.1.181 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-2 1/1 Terminating 0 12m 10.244.1.182 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; NAME TYPE DATA AGE secret/default-token-msmmd kubernetes.io/service-account-token 3 3d20h secret/dockercred kubernetes.io/dockerconfigjson 1 3d20h secret/orclcred kubernetes.io/dockerconfigjson 1 3d20h NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE VOLUMEMODE persistentvolume/oud-ds-rs-pv 20Gi RWX Delete Terminating oudns/oud-ds-rs-pvc manual 24m Filesystem NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE VOLUMEMODE persistentvolumeclaim/oud-ds-rs-pvc Terminating oud-ds-rs-pv 20Gi RWX manual 24m Filesystem Run the command again until the pods, PV and PVC disappear.\n  Setup the code repository to deploy OUD   Create a working directory on the persistent volume to setup the latest source code:\n$ mkdir \u0026lt;persistent_volume\u0026gt;/\u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/shared/OUDK8SJul24   Download the latest OUD deployment scripts from the OUD repository:\n$ cd \u0026lt;persistent_volume\u0026gt;/\u0026lt;workdir\u0026gt; $ git clone https://github.com/oracle/fmw-kubernetes.git --branch release/24.4.1 For example:\n$ cd /scratch/shared/OUDK8SJul24 $ git clone https://github.com/oracle/fmw-kubernetes.git --branch release/24.4.1   Set the $WORKDIR environment variable as follows:\n$ export WORKDIR=\u0026lt;workdir\u0026gt;/fmw-kubernetes/OracleUnifiedDirectory For example:\n$ export WORKDIR=/scratch/shared/OUDK8SJan24/fmw-kubernetes/OracleUnifiedDirectory   Create a new instance against your existing persistent volume   Navigate to the $WORKDIR/kubernetes/helm directory\n$ cd $WORKDIR/kubernetes/helm   Create an oud-ds-rs-values-override.yaml as follows:\nimage: repository: \u0026lt;image_location\u0026gt; tag: \u0026lt;image_tag\u0026gt; pullPolicy: IfNotPresent imagePullSecrets: - name: orclcred oudConfig: rootUserPassword: \u0026lt;password\u0026gt; sampleData: \u0026#34;200\u0026#34; persistence: type: filesystem filesystem: hostPath: path: \u0026lt;persistent_volume\u0026gt;/oud_user_projects cronJob: kubectlImage: repository: bitnami/kubectl tag: \u0026lt;version\u0026gt; pullPolicy: IfNotPresent imagePullSecrets: - name: dockercred For example:\nimage: repository: container-registry.oracle.com/middleware/oud_cpu tag: 12.2.1.4-jdk8-ol8-\u0026lt;October\u0026#39;24\u0026gt; pullPolicy: IfNotPresent imagePullSecrets: - name: orclcred oudConfig: rootUserPassword: \u0026lt;password\u0026gt; sampleData: \u0026#34;200\u0026#34; persistence: type: filesystem filesystem: hostPath: path: /scratch/shared/oud_user_projects cronJob: kubectlImage: repository: bitnami/kubectl tag: 1.28.3 pullPolicy: IfNotPresent imagePullSecrets: - name: dockercred The following caveats exist:\n  The \u0026lt;persistent_volume\u0026gt;/oud_user_projects must point to the directory used in your previous deployment otherwise your existing OUD data will not be used. Make sure you take a backup of the \u0026lt;persistent_volume\u0026gt;/oud_user_projects directory before proceeding further.\n  Replace \u0026lt;password\u0026gt; with the password used in your previous deployment.\n  The \u0026lt;version\u0026gt; in kubectlImage tag: should be set to the same version as your Kubernetes version (kubectl version). For example if your Kubernetes version is 1.28.3 set to 1.28.3.\n  If you are not using Oracle Container Registry or your own container registry for your OUD container image, then you can remove the following:\nimagePullSecrets: - name: orclcred   If using NFS for your persistent volume then change the persistence section as follows:\npersistence: type: networkstorage networkstorage: nfs: path: \u0026lt;persistent_volume\u0026gt;/oud_user_projects server: \u0026lt;NFS IP address\u0026gt;     Run the following command to deploy OUD:\n$ helm install --namespace \u0026lt;namespace\u0026gt; \\ --values oud-ds-rs-values-override.yaml \\ \u0026lt;release_name\u0026gt; oud-ds-rs For example:\n$ helm install --namespace oudns \\ --values oud-ds-rs-values-override.yaml \\ oud-ds-rs oud-ds-rs   Check the OUD deployment as per Verify the OUD deployment and Verify the OUD replication.\n  Upgrade Elasticsearch and Kibana by following Upgrading Elasticsearch and Kibana.\n  Upgrading Elasticsearch and Kibana This section shows how to upgrade Elasticsearch and Kibana. From October 22 (22.4.1) onwards, OUD logs should be stored on a centralized Elasticsearch and Kibana stack.\nNote: This section should only be followed if upgrading from July 22 (22.3.1) or earlier to October 24 (24.4.1). If you are upgrading from October 22 or later to October 24 do not follow this section.\nUndeploy Elasticsearch and Kibana From October 22 (22.4.1) onwards, OUD logs should be stored on a centralized Elasticsearch and Kibana (ELK) stack.\nDeployments prior to October 22 (22.4.1) used local deployments of Elasticsearch and Kibana.\nIf you are upgrading from July 22 (22.3.1) or earlier, to October 24 (24.4.1), you must first undeploy Elasticsearch and Kibana using the steps below:\n  Navigate to the $WORKDIR/kubernetes/helm directory and create a logging-override-values-uninstall.yaml with the following:\nelk: enabled: false   Run the following command to remove the existing ELK deployment:\n$ helm upgrade --namespace \u0026lt;domain_namespace\u0026gt; --values \u0026lt;valuesfile.yaml\u0026gt; \u0026lt;releasename\u0026gt; oud-ds-rs --reuse-values For example:\n$ helm upgrade --namespace oudns --values logging-override-values-uninstall.yaml oud-ds-rs oud-ds-rs --reuse-values   Deploy ElasticSearch and Kibana in centralized stack  Follow Install Elasticsearch stack and Kibana to deploy ElasticSearch and Kibana in a centralized stack.  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oudsm/patch-and-upgrade/",
	"title": "Patch and upgrade",
	"tags": [],
	"description": "This document provides steps to patch or upgrade an OUD image, and Elasticsearch and Kibana.",
	"content": "This section shows you how to upgrade the OUDSM image, and how to upgrade the Elasticsearch and Kibana stack.\nThe upgrade path taken depends on the version you are upgrading from.\nPlease refer to the Release Notes for information on which upgrade steps are necessary for the version you are upgrading to.\n a. Patch an image  Instructions on how to update your OUDSM Kubernetes cluster with a new OUDSM container image.\n b. Upgrade Elasticsearch and Kibana  Instructions on how to upgrade Elastic Search and Kibana.\n "
},
{
	"uri": "/fmw-kubernetes/24.4.1/ohs/troubleshooting/",
	"title": "Troubleshooting",
	"tags": [],
	"description": "How to Troubleshoot OHS container failure.",
	"content": " OHS Container in CreatingContainer status OHS Container in ImagePullBackOff OHS Container in 0/1 Running Status Issues with LivenessProbe Viewing OHS log files  The instructions in this section relate to problems creating OHS containers and viewing log files.\nOHS Container in CreatingContainer status During OHS container creation you may see:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-vkp4s 0/1 ContainerCreating 0 2m13s To check what is happening while the pod is in ContainerCreating status, you can run:\n$ kubectl describe pod \u0026lt;podname\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe pod ohs-domain-d5b648bc5-vkp4s -n ohsns The details of the above command can help identify possible problems.\nIn the Events, if you see Pulling image \u0026lt;image\u0026gt;, this means that the container is pulling the image from the container-registry. Depending on the speed of the network this could take 5-10 minutes. Once the image is pulled you should see the pod go to RUNNING 0/1 status, before eventually going to RUNNING 1\\1.\nOHS Container in ImagePullBackOff If you see the following:\nkubectl get pods -n ohsns NAME READY STATUS RESTARTS AGE ohs-domain-58b8dc4749-hzlc9 0/1 ImagePullBackOff 0 16s This could be because you have put the wrong image location in the ohs.yaml, there is a problem with the image itself, or the secrets created are incorrect.\nOnce the problem is identified and resolved, you can delete the container and try again:\n$ cd $MYOHSFILES $ kubectl delete -f ohs.yaml $ kubectl create -f ohs.yaml OHS Container in 0/1 Running Status During OHS container creation you may see:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-vkp4s 0/1 Running 0 2m13s This is normal behaviour during any startup, however the pod should eventually go to RUNNING 1/1\nWhilst the pod is in 0/1  status, you can check what is happening by running:\n$ kubectl logs -f \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; For example\n$ kubectl logs -f ohs-domain-d5b648bc5-vkp4s -n ohsns If there are any problems or errors during startup, they will be logged here.\nYou can also describe the pod to determine potential problems:\n$ kubectl describe pod \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe pod ohs-domain-d5b648bc5-vkp4s -n ohsns Additionally, you can view the OHS log files inside the container. See, Viewing OHS log files.\nDepending on the error, you may need to fix the files in the $MYOHSFILES/ohsConfig directories.\nOnce you have fixed your configuration files, you will need to delete the appropriate configmap(s) and recreate. For example if the problem was in httpd.conf, ssl.conf, or mod_wl_ohs.conf:\n$ cd $MYOHSFILES $ kubectl delete -f ohs.yaml $ kubectl delete cm ohs-httpd -n ohsns $ kubectl create cm -n ohsns ohs-httpd --from-file=ohsConfig/httpconf $ kubectl create -f ohs.yaml Issues with LivenessProbe If you see OHS Container in 0/1 Running Status and the container constantly restarts:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-vkp4s 0/1 Running 4 2m13s If this occurs and kubectl logs -f \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; is showing no errors, then run:\n$ kubectl describe pod \u0026lt;podname\u0026gt; -n \u0026lt;namespace\u0026gt; If the output shows:\n ---- ------ ---- ---- ------- Normal Scheduled 63s default-scheduler Successfully assigned ohsns/ohs-domain-857c5d97d5-8nnx9 to doc-worker1 Normal Pulled 17s (x2 over 62s) kubelet Container image \u0026quot;\u0026lt;image\u0026gt;\u0026quot; already present on machine Normal Created 17s (x2 over 62s) kubelet Created container ohs Normal Started 17s (x2 over 62s) kubelet Started container ohs Warning Unhealthy 2s (x9 over 61s) kubelet Readiness probe failed: Get \u0026quot;http://10.244.1.150:7777/helloWorld.html\u0026quot;: dial tcp 10.244.1.150:7777: connect: connection refused Warning Unhealthy 2s (x6 over 57s) kubelet Liveness probe failed: Normal Killing 2s (x2 over 47s) kubelet Container ohs failed liveness probe, will be restarted It\u0026rsquo;s possible the liveness probe is killing and restarting the container because the httpd process has not started before the liveness probe checks. This can happen on slow systems.\nIf this occurs delete the container:\n$ cd $MYOHSFILES $ kubectl delete -f ohs.yaml and edit the ohs.yaml file and increase the initialDelaySeconds from 10 to 30:\n livenessProbe: exec: command: - /bin/bash - -c - pgrep httpd initialDelaySeconds: 30 periodSeconds: 5 Then try creating the container again:\n$ cd $MYOHSFILES $ kubectl create -f ohs.yaml Viewing OHS log files To view OHS log files inside the container, run the following commands:\n$ kubectl exec -n \u0026lt;namespace\u0026gt; -ti \u0026lt;pod\u0026gt; -- /bin/bash For example:\n$ kubectl exec -n ohsns -ti ohs-domain-79f8f99575-8qwfh -- /bin/bash This will take you to a bash shell inside the container:\n[oracle@ohs-domain-75fbd9b597-z77d8 oracle]$ Inside the bash shell navigate to the /u01/oracle/user_projects/domains/ohsDomain/server/ohs1/logs directory:\n$ cd /u01/oracle/user_projects/domains/ohsDomain/server/ohs1/logs From within this directory, you can cat the OHS log files to help diagnose problems.\n"
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/validate-sso-using-webgate/",
	"title": "Validate a Basic SSO Flow using WebGate Registration ",
	"tags": [],
	"description": "Sample for validating a basic SSO flow using WebGate registration.",
	"content": "In this section you validate single-sign on works to the OAM Kubernetes cluster via Oracle WebGate.\nThe instructions below assume you have a running Oracle HTTP Server (OHS) (for example ohs1) and Oracle WebGate installed either in an on-premises setup, or in a Kubernetes cluster. If you are deploying OHS on a Kubernetes cluster, see the Supported Architectures.\nThe instructions also assume you have a working knowledge of OHS and WebGate.\nUpdate the OAM Hostname and Port for the Loadbalancer You must update OAM with the protocol, hostname.domain, and port for your OAM entry point.\nFor example:\n https://loadbalancer.example.com - if OAM URL\u0026rsquo;s are accessed directly via a load balancer URL, with hostname loadbalancer.example.com and port 443. https://ohs.example.com:4443 - if OAM URL\u0026rsquo;s are accessed directly via an OHS URL, with hostname ohs.example.com and port 4443. https://masternode.example.com:31501 - if OAM URL\u0026rsquo;s are accessed directly via the ingress controller, with hostname masternode.example.com and port 31501.  In the following examples change {HOSTNAME}:${PORT} accordingly.\n  Launch a browser and access the OAM console (https://${HOSTNAME}:${PORT}/oamconsole). Login with the weblogic username and password (weblogic/\u0026lt;password\u0026gt;).\n  Navigate to Configuration → Settings ( View ) → Access Manager.\n  Under Load Balancing modify the OAM Server Host and OAM Server Port, to point to the hostname.domain of your OAM entry point, for example loadbalancer.example.com and 443 respectively. In the OAM Server Protocol drop down list select https.\n  Under WebGate Traffic Load Balancer modify the OAM Server Host and OAM Server Port, to point to the hostname.domain of your OAM entry point, for example loadbalancer.example.com and 443 respectively. In the OAM Server Protocol drop down list select https.\n  Click Apply.\n  Register a WebGate Agent   Launch a browser, and access the OAM console.\n  Navigate to Application Security → Quick Start Wizards → SSO Agent Registration. Register the agent in the usual way.\n  After creating the agent, make sure the User Defined Parameters for OAMRestEndPointHostName, OAMRestEndPointPort, and OAMServerCommunicationMode are set to the same values as per Update the OAM Hostname and Port for the Loadbalancer. Click Apply.\n  Click Download to download the agent zip file and keep in a safe place. This file this will be required in Configure OHS to use the WebGate.\n  Configure the Application Domain   In the OAM console, navigate to Application Security → Application Domains. Click Search, and click the domain for the agent just created.\n  In the Application Domain page, under Resources, click Create and protect a simple resource, for example /myapp/**. Change the following:\n Type: HTTP Host Identifier: \u0026lt;your_application_domain\u0026gt; Protection Level: Protected Authentication Policy: Protected Resource Policy Authorization Policy: Protected Resource Policy  Note: The purpose of the above is to test a simple page protection works. Once everything is confirmed as working, you can configure your desired resources and policies.\n  Click Apply.\n  Create Host Identifiers   In the OAM console, navigate to Application Security → Access Manager → Host Identifiers. Click Search, and click the Name for the agent just created.\n  In the Host Name Variations, click Add.\n  In the new line that appears, add the details for any URL that will be used for this WebGate, for example if you access a protected URL via https://loadbalancer.example.com, then under Host Name enter loadbalancer.example.com and under Port enter 443. Click Apply.\n  Repeat for any other required URL\u0026rsquo;s.\n  Configure OHS to use the WebGate Follow the relevant section depending on whether your are using on-premises OHS, or OHS deployed in Kubernetes.\nOn-premises OHS installation The instructions in this section are for on-premises OHS installations only.\nIn all the examples below, change the directory path as appropriate for your installation.\n  Run the following command on the server with Oracle HTTP Server and WebGate installed:\n$ cd \u0026lt;OHS_ORACLE_HOME\u0026gt;/webgate/ohs/tools/deployWebGate $ ./deployWebGateInstance.sh -w \u0026lt;OHS_DOMAIN_HOME\u0026gt;/config/fmwconfig/components/OHS/ohs1 -oh \u0026lt;OHS_ORACLE_HOME\u0026gt; -ws ohs The output will look similar to the following:\nCopying files from WebGate Oracle Home to WebGate Instancedir   Run the following command to update the OHS configuration files appropriately:\n$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:\u0026lt;OHS_ORACLE_HOME\u0026gt;/lib $ cd \u0026lt;OHS_ORACLE_HOME\u0026gt;/webgate/ohs/tools/setup/InstallTools/ $ ./EditHttpConf -w \u0026lt;OHS_DOMAIN_HOME\u0026gt;/config/fmwconfig/components/OHS/ohs1 -oh \u0026lt;OHS_ORACLE_HOME\u0026gt; The output will look similar to the following:\nThe web server configuration file was successfully updated \u0026lt;OHS_DOMAIN_HOME\u0026gt;/config/fmwconfig/components/OHS/ohs1/httpd.conf has been backed up as \u0026lt;OHS_DOMAIN_HOME\u0026gt;/config/fmwconfig/components/OHS/ohs1/httpd.conf.ORIG   Copy the agent zip file downloaded earlier and copy to the OHS server, for example: \u0026lt;OHS_DOMAIN_HOME\u0026gt;/config/fmwconfig/components/OHS/ohs1/webgate/config. Extract the zip file.\n  Obtain the Certificate Authority (CA) certificate (cacert.pem) that signed the certificate for your OAM entry point. Copy to the to the same directory, for example: \u0026lt;OHS_DOMAIN_HOME\u0026gt;/config/fmwconfig/components/OHS/ohs1/webgate/config.\nNote:\n The CA certificate is the certificate that signed the certificate for your OAM entry point. For example if you access OAM directly via a load balancer, then this is the CA of the load balancer certificate. The file must be renamed to cacert.pem.    Restart Oracle HTTP Server.\n  Access the protected resource, for example https://ohs.example.com/myapp, and check you are redirected to the SSO login page. Login and make sure you are redirected successfully to the home page.\n  OHS deployed on Kubernetes If deploying OHS on Kubernetes you must copy the agent zip file downloaded earlier to the $WORKDIR/ohsConfig/webgate/config directory and extract it.\nSee Prepare your OHS configuration files for detailed instructions.\nChanging WebGate agent to use OAP Note: This section should only be followed if you need to change the OAM/WebGate Agent communication from HTTPS to OAP.\nTo change the WebGate agent to use OAP:\n  In the OAM Console click Application Security and then Agents.\n  Search for the agent you want modify and select it.\n  In the User Defined Parameters change:\na) OAMServerCommunicationMode from HTTPS to OAP. For example OAMServerCommunicationMode=OAP\nb) OAMRestEndPointHostName=\u0026lt;hostname\u0026gt; to the {$MASTERNODE-HOSTNAME}. For example OAMRestEndPointHostName=masternode.example.com\n  In the Server Lists section click Add to add a new server with the following values:\n Access Server: Other Host Name: \u0026lt;{$MASTERNODE-HOSTNAME}\u0026gt; Host Port: \u0026lt;oamoap-service NodePort\u0026gt;  Note: To find the value for Host Port run the following:\n$ kubectl describe svc accessdomain-oamoap-service -n oamns The output will look similar to the following:\nName: accessdomain-oamoap-service Namespace: oamns Labels: \u0026lt;none\u0026gt; Annotations: \u0026lt;none\u0026gt; Selector: weblogic.clusterName=oam_cluster Type: NodePort IP Families: \u0026lt;none\u0026gt; IP: 10.100.202.44 IPs: 10.100.202.44 Port: \u0026lt;unset\u0026gt; 5575/TCP TargetPort: 5575/TCP NodePort: \u0026lt;unset\u0026gt; 30540/TCP Endpoints: 10.244.5.21:5575,10.244.6.76:5575 Session Affinity: None External Traffic Policy: Cluster Events: \u0026lt;none\u0026gt; In the example above the NodePort is 30540.\n  Delete all servers in Server Lists except for the one just created, and click Apply.\n  Click Download to download the webgate zip file. Copy the zip file to the desired WebGate.\n  Delete the cache from \u0026lt;OHS_DOMAIN_HOME\u0026gt;/servers/ohs1/cache and restart Oracle HTTP Server.\n  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/manage-oam-domains/",
	"title": "Manage OAM Domains",
	"tags": [],
	"description": "This document provides steps to manage the OAM domain.",
	"content": "Important considerations for Oracle Access Management domains in Kubernetes.\n a. Domain Life Cycle  Learn about the domain life cycle of an OAM domain.\n b. WLST Administration Operations  Describes the steps for WLST administration using helper pod running in the same Kubernetes Cluster as OAM Domain.\n c. Logging and Visualization  Describes the steps for logging and visualization with Elasticsearch and Kibana.\n d. Monitoring an OAM domain  Describes the steps for Monitoring the OAM domain.\n e. Kubernetes Horizontal Pod Autoscaler  Describes the steps for implementing the Horizontal Pod Autoscaler.\n f. Delete the OAM domain home  Learn about the steps to cleanup the OAM domain home.\n "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/manage-oig-domains/",
	"title": "Manage OIG domains",
	"tags": [],
	"description": "This document provides steps to manage the OIG domain.",
	"content": "Important considerations for Oracle Identity Governance domains in Kubernetes.\n a. Domain life cycle  Learn about the domain lifecycle of an OIG domain.\n b. WLST administration operations  Describes the steps for WLST administration using helper pod running in the same Kubernetes Cluster as OIG Domain.\n c. Runnning OIG utilities  Describes the steps for running OIG utilities in Kubernetes.\n d. Logging and visualization  Describes the steps for logging and visualization with Elasticsearch and Kibana.\n e. Monitoring an OIG domain  Describes the steps for Monitoring the OIG domain and Publishing the logs to Elasticsearch.\n f. Kubernetes Horizontal Pod Autoscaler  Describes the steps for implementing the Horizontal Pod Autoscaler.\n g. Delete the OIG domain home  Learn about the steps to cleanup the OIG domain home.\n "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oud/troubleshooting/",
	"title": "Troubleshooting",
	"tags": [],
	"description": "How to Troubleshoot issues.",
	"content": " Check the status of a namespace View pod logs View pod description Known issues  Check the status of a namespace To check the status of objects in a namespace use the following command:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; get nodes,pod,service,secret,pv,pvc,ingress -o wide For example:\n$ kubectl --namespace oudns get pod,service,secret,pv,pvc,ingress -o wide The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oud-ds-rs-0 1/1 Running 0 14m 10.244.1.180 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-1 1/1 Running 0 8m26s 10.244.1.181 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-2 0/1 Running 0 2m24s 10.244.1.182 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-pod-cron-job-27586680-p5d8q 0/1 Completed 0 50s 10.244.1.183 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service/oud-ds-rs ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1389/TCP,1636/TCP,1080/TCP,1081/TCP,1898/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-0 ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1898/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-0 service/oud-ds-rs-1 ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1898/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-1 service/oud-ds-rs-2 ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1898/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-2 service/oud-ds-rs-http-0 ClusterIP 10.104.112.93 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-0 service/oud-ds-rs-http-1 ClusterIP 10.103.105.70 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-1 service/oud-ds-rs-http-2 ClusterIP 10.110.160.107 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-2 service/oud-ds-rs-lbr-admin ClusterIP 10.99.238.222 \u0026lt;none\u0026gt; 1888/TCP,1444/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-lbr-http ClusterIP 10.101.250.196 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-lbr-ldap ClusterIP 10.104.149.90 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-ldap-0 ClusterIP 10.109.255.221 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-0 service/oud-ds-rs-ldap-1 ClusterIP 10.111.135.142 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-1 service/oud-ds-rs-ldap-2 ClusterIP 10.100.8.145 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 14m app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-2 NAME TYPE DATA AGE secret/dockercred kubernetes.io/dockerconfigjson 1 4h24m secret/orclcred kubernetes.io/dockerconfigjson 1 14m secret/oud-ds-rs-creds opaque 8 14m secret/oud-ds-rs-tls-cert kubernetes.io/tls 2 14m secret/sh.helm.release.v1.oud-ds-rs.v1 helm.sh/release.v1 1 14m NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE VOLUMEMODE persistentvolume/oud-ds-rs-pv 20Gi RWX Delete Bound oudns/oud-ds-rs-pvc manual 14m Filesystem NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE VOLUMEMODE persistentvolumeclaim/oud-ds-rs-pvc Bound oud-ds-rs-pv 20Gi RWX manual 14m Filesystem NAME CLASS HOSTS ADDRESS PORTS AGE ingress.networking.k8s.io/oud-ds-rs-admin-ingress-nginx \u0026lt;none\u0026gt; oud-ds-rs-admin-0,oud-ds-rs-admin-0,oud-ds-rs-admin-1 + 3 more... 80, 443 14m ingress.networking.k8s.io/oud-ds-rs-http-ingress-nginx \u0026lt;none\u0026gt; oud-ds-rs-http-0,oud-ds-rs-http-1,oud-ds-rs-http-2 + 3 more... 80, 443 14m Include/exclude elements (nodes,pod,service,secret,pv,pvc,ingress) as required.\nView pod logs To view logs for a pod use the following command:\n$ kubectl logs \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl logs oud-ds-rs-0 -n oudns View pod description Details about a pod can be viewed using the kubectl describe command:\n$ kubectl describe pod \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe pod oud-ds-rs-0 -n oudns The output will look similar to the following:\nName: oud-ds-rs-0 Namespace: oudns Priority: 0 Node: \u0026lt;Worker Node\u0026gt;/100.105.18.114 Start Time: \u0026lt;DATE\u0026gt; Labels: app.kubernetes.io/instance=oud-ds-rs app.kubernetes.io/name=oud-ds-rs controller-revision-hash=oud-ds-rs-5c8b8f67c9 statefulset.kubernetes.io/pod-name=oud-ds-rs-0 Annotations: \u0026lt;none\u0026gt; Status: Running IP: 10.244.2.48 IPs: IP: 10.244.2.48 Controlled By: StatefulSet/oud-ds-rs Init Containers: mount-pv: Container ID: cri-o://905af11c6f032f2dfa18b1e3956d7936cb7dd04d9d0df0cfcf8ed061e6930b52 Image: \u0026lt;location\u0026gt;/busybox Image ID: \u0026lt;location\u0026gt;@sha256:2c8ed5408179ff4f53242a4bdd2706110ce000be239fe37a61be9c52f704c437 Port: \u0026lt;none\u0026gt; Host Port: \u0026lt;none\u0026gt; Command: /bin/sh -c Args: ordinal=${OUD_INSTANCE_NAME##*-}; if [[ ${CLEANUP_BEFORE_START} == \u0026quot;true\u0026quot; ]]; then if [[ \u0026quot;$ordinal\u0026quot; != \u0026quot;0\u0026quot; ]]; then cd /u01/oracle; rm -fr /u01/oracle/user_projects/$(OUD_INSTANCE_NAME)/OUD; fi; fi if [[ ${CONFIGVOLUME_ENABLED} == \u0026quot;true\u0026quot; ]]; then if [[ \u0026quot;$ordinal\u0026quot; == \u0026quot;0\u0026quot; ]]; then cp \u0026quot;/mnt/baseOUD.props\u0026quot; \u0026quot;${CONFIGVOLUME_MOUNTPATH}/config-baseOUD.props\u0026quot;; else cp \u0026quot;/mnt/replOUD.props\u0026quot; \u0026quot;${CONFIGVOLUME_MOUNTPATH}/config-replOUD.props\u0026quot;; fi; fi; State: Terminated Reason: Completed Exit Code: 0 Started: \u0026lt;DATE\u0026gt; Finished: \u0026lt;DATE\u0026gt; Ready: True Restart Count: 0 Environment: OUD_INSTANCE_NAME: oud-ds-rs-0 (v1:metadata.name) CONFIGVOLUME_ENABLED: false CONFIGVOLUME_MOUNTPATH: /u01/oracle/config-input CLEANUP_BEFORE_START: false Mounts: /u01/oracle/user_projects from oud-ds-rs-pv (rw) /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-65skp (ro) Containers: oud-ds-rs: Container ID: cri-o://d691b090dfbb1ee1b8606952497d80642424a82a2290071b325ea720098817c3 Image: container-registry.oracle.com/middleware/oud_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October'24\u0026gt; Image ID: container-registry.oracle.com/middleware/oud_cpu@sha256:faca16dbbcda1985ff567eefe3f2ca7bae6cbbb7ebcd296fffb040ce61e9396a Ports: 1444/TCP, 1888/TCP, 1389/TCP, 1636/TCP, 1080/TCP, 1081/TCP, 1898/TCP Host Ports: 0/TCP, 0/TCP, 0/TCP, 0/TCP, 0/TCP, 0/TCP, 0/TCP State: Running Started: \u0026lt;DATE\u0026gt; Ready: True Restart Count: 0 Limits: cpu: 1 memory: 4Gi Requests: cpu: 500m memory: 4Gi Liveness: tcp-socket :ldap delay=300s timeout=30s period=60s #success=1 #failure=5 Readiness: exec [/u01/oracle/container-scripts/checkOUDInstance.sh] delay=300s timeout=30s period=60s #success=1 #failure=10 Environment: instanceType: DS2RS_STS OUD_INSTANCE_NAME: oud-ds-rs-0 (v1:metadata.name) MY_NODE_NAME: (v1:spec.nodeName) MY_POD_NAME: oud-ds-rs-0 (v1:metadata.name) sleepBeforeConfig: 3 sourceHost: oud-ds-rs-0 baseDN: dc=example,dc=com rootUserDN: \u0026lt;set to the key 'rootUserDN' in secret 'oud-ds-rs-creds'\u0026gt; Optional: false rootUserPassword: \u0026lt;set to the key 'rootUserPassword' in secret 'oud-ds-rs-creds'\u0026gt; Optional: false adminUID: \u0026lt;set to the key 'adminUID' in secret 'oud-ds-rs-creds'\u0026gt; Optional: false adminPassword: \u0026lt;set to the key 'adminPassword' in secret 'oud-ds-rs-creds'\u0026gt; Optional: false bindDN1: \u0026lt;set to the key 'bindDN1' in secret 'oud-ds-rs-creds'\u0026gt; Optional: false bindPassword1: \u0026lt;set to the key 'bindPassword1' in secret 'oud-ds-rs-creds'\u0026gt; Optional: false bindDN2: \u0026lt;set to the key 'bindDN2' in secret 'oud-ds-rs-creds'\u0026gt; Optional: false bindPassword2: \u0026lt;set to the key 'bindPassword2' in secret 'oud-ds-rs-creds'\u0026gt; Optional: false sourceServerPorts: oud-ds-rs-0:1444 sourceAdminConnectorPort: 1444 sourceReplicationPort: 1898 sampleData: 200 adminConnectorPort: 1444 httpAdminConnectorPort: 1888 ldapPort: 1389 ldapsPort: 1636 httpPort: 1080 httpsPort: 1081 replicationPort: 1898 dsreplication_1: verify --hostname ${sourceHost} --port ${sourceAdminConnectorPort} --baseDN ${baseDN} --serverToRemove $(OUD_INSTANCE_NAME):${adminConnectorPort} --connectTimeout 600000 --readTimeout 600000 dsreplication_2: enable --host1 ${sourceHost} --port1 ${sourceAdminConnectorPort} --replicationPort1 ${sourceReplicationPort} --host2 $(OUD_INSTANCE_NAME) --port2 ${adminConnectorPort} --replicationPort2 ${replicationPort} --baseDN ${baseDN} --connectTimeout 600000 --readTimeout 600000 dsreplication_3: initialize --hostSource ${initializeFromHost} --portSource ${sourceAdminConnectorPort} --hostDestination $(OUD_INSTANCE_NAME) --portDestination ${adminConnectorPort} --baseDN ${baseDN} --connectTimeout 600000 --readTimeout 600000 dsreplication_4: verify --hostname $(OUD_INSTANCE_NAME) --port ${adminConnectorPort} --baseDN ${baseDN} --connectTimeout 600000 --readTimeout 600000 post_dsreplication_dsconfig_1: set-replication-domain-prop --domain-name ${baseDN} --set group-id:1 post_dsreplication_dsconfig_2: set-replication-server-prop --set group-id:1 Mounts: /u01/oracle/user_projects from oud-ds-rs-pv (rw) /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-65skp (ro) Conditions: Type Status Initialized True Ready True ContainersReady True PodScheduled True Volumes: oud-ds-rs-pv: Type: PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace) ClaimName: oud-ds-rs-pvc ReadOnly: false kube-api-access-65skp: Type: Projected (a volume that contains injected data from multiple sources) TokenExpirationSeconds: 3607 ConfigMapName: kube-root-ca.crt ConfigMapOptional: \u0026lt;nil\u0026gt; DownwardAPI: true QoS Class: Burstable Node-Selectors: \u0026lt;none\u0026gt; Tolerations: node.kubernetes.io/not-ready:NoExecute op=Exists for 300s node.kubernetes.io/unreachable:NoExecute op=Exists for 300s Events: \u0026lt;none\u0026gt; Known issues dsreplication output after scale up/down shows pod in unknown state Sometimes when scaling up or down, it is possible to get incorrect data in the dsreplication output. In the example below the replicaCount was changed from 4 to 3. The oud-ds-rs-3 server appears as \u0026lt;Unknown\u0026gt; when it should have disappeared:\ndc=example,dc=com - Replication Enabled ======================================= Server : Entries : M.C. [1] : A.O.M.C. [2] : Port [3] : Encryption [4] : Trust [5] : U.C. [6] : Status [7] : ChangeLog [8] : Group ID [9] : Connected To [10] -------------------------------:---------:----------:--------------:----------:----------------:-----------:----------:------------:---------------:--------------:------------------------------- oud-ds-rs-3:\u0026lt;Unknown\u0026gt; : -- : N/A : -- : 1898 : Disabled : -- : -- : Unknown : -- : N/A : -- [11] : : : : : : : : : : : oud-ds-rs-0:1444 : 39135 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-2:1898 : : : : : : : : : : : (GID=1) oud-ds-rs-1:1444 : 39135 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-1:1898 : : : : : : : : : : : (GID=1) oud-ds-rs-2:1444 : 39135 : 0 : 0 : 1898 : Disabled : Trusted : -- : Normal : Enabled : 1 : oud-ds-rs-2:1898 : : : : : : : : : : : (GID=1) Replication Server [12] : RS #1 : RS #2 : RS #3 : RS #4 ------------------------------:-------:-------:-------:------ oud-ds-rs-0:1898 (#1) : -- : Yes : Yes : N/A oud-ds-rs-1:1898 (#2) : Yes : -- : Yes : N/A oud-ds-rs-2:1898 (#3) : Yes : Yes : -- : N/A oud-ds-rs-3:1898 (#4) : No : No : No : -- In this situation perform the following steps to remove the server:\n  Run the following command to enter the OUD Kubernetes pod:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; exec -it -c \u0026lt;containername\u0026gt; \u0026lt;podname\u0026gt; -- bash For example:\nkubectl --namespace oudns exec -it -c oud-ds-rs oud-ds-rs-0 -- bash This will take you into the pod:\n[oracle@oud-ds-rs-0 oracle]$   Once inside the pod run the following command to create a password file:\necho \u0026lt;ADMIN_PASSWORD\u0026gt; \u0026gt; /tmp/adminpassword.txt   Run the following command to remove the replicationPort:\n/u01/oracle/oud/bin/dsreplication disable --hostname localhost --port $adminConnectorPort --adminUID admin --trustAll --adminPasswordFile /tmp/adminpassword.txt --no-prompt --unreachableServer oud-ds-rs-3:$replicationPort The output will look similar to the following:\nEstablishing connections and reading configuration ........ Done. The following errors were encountered reading the configuration of the existing servers: Could not connect to the server oud-ds-rs-3:1444. Check that the server is running and that is accessible from the local machine. Details: oud-ds-rs-3:1444 The tool will try to update the configuration in a best effort mode. Removing references to replication server oud-ds-rs-3:1898 ..... Done.   Run the following command to remove the adminConnectorPort:\n/u01/oracle/oud/bin/dsreplication disable --hostname localhost --port $adminConnectorPort --adminUID admin --trustAll --adminPasswordFile /tmp/adminpassword.txt --no-prompt --unreachableServer oud-ds-rs-3:$adminConnectorPort The output will look similar to the following:\nEstablishing connections and reading configuration ...... Done. Removing server oud-ds-rs-3:1444 from the registration information ..... Done.   Delete the password file:\nrm /tmp/adminpassword.txt   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oudsm/troubleshooting/",
	"title": "Troubleshooting",
	"tags": [],
	"description": "How to Troubleshoot issues.",
	"content": " Check the status of a namespace View pod logs View pod description  Check the status of a namespace To check the status of objects in a namespace use the following command:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; get nodes,pod,service,secret,pv,pvc,ingress -o wide For example:\n$ kubectl --namespace oudsmns get nodes,pod,service,secret,pv,pvc,ingress -o wide The output will look similar to the following:\n$ kubectl --namespace oudsmns get pod,service,secret,pv,pvc,ingress -o wide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oudsm-1 1/1 Running 0 18m 10.244.1.89 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service/oudsm-1 ClusterIP 10.101.79.110 \u0026lt;none\u0026gt; 7001/TCP,7002/TCP 18m app.kubernetes.io/instance=oudsm,app.kubernetes.io/name=oudsm,oudsm/instance=oudsm-1 service/oudsm-lbr ClusterIP 10.106.241.204 \u0026lt;none\u0026gt; 7001/TCP,7002/TCP 18m app.kubernetes.io/instance=oudsm,app.kubernetes.io/name=oudsm NAME TYPE DATA AGE secret/default-token-jtwn2 kubernetes.io/service-account-token 3 22h secret/orclcred kubernetes.io/dockerconfigjson 1 22h secret/oudsm-creds opaque 2 18m secret/oudsm-tls-cert kubernetes.io/tls 2 18m secret/oudsm-token-7kjff kubernetes.io/service-account-token 3 18m secret/sh.helm.release.v1.oudsm.v1 helm.sh/release.v1 1 18m NAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE VOLUMEMODE persistentvolume/oudsm-pv 20Gi RWX Delete Bound oudsmns/oudsm-pvc manual 18m Filesystem NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE VOLUMEMODE persistentvolumeclaim/oudsm-pvc Bound oudsm-pv 20Gi RWX manual 18m Filesystem NAME CLASS HOSTS ADDRESS PORTS AGE ingress.networking.k8s.io/oudsm-ingress-nginx \u0026lt;none\u0026gt; oudsm-1,oudsm 80, 443 18m Include/exclude elements (nodes,pod,service,secret,pv,pvc,ingress) as required.\nView pod logs To view logs for a pod use the following command:\n$ kubectl logs \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl logs oudsm-1 -n oudsmns View pod description Details about a pod can be viewed using the kubectl describe command:\n$ kubectl describe pod \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe pod oudsm-1 -n oudsmns The output will look similar to the following:\nName: oudsm-1 Namespace: oudsmns Priority: 0 Node: \u0026lt;worker-node\u0026gt;/100.102.48.28 Start Time: \u0026lt;DATE\u0026gt; Labels: app.kubernetes.io/instance=oudsm app.kubernetes.io/managed-by=Helm app.kubernetes.io/name=oudsm app.kubernetes.io/version=12.2.1.4.0 helm.sh/chart=oudsm-0.1 oudsm/instance=oudsm-1 Annotations: meta.helm.sh/release-name: oudsm meta.helm.sh/release-namespace: oudsmns Status: Running IP: 10.244.1.89 IPs: IP: 10.244.1.89 Containers: oudsm: Container ID: cri-o://37dbe00257095adc0a424b8841db40b70bbb65645451e0bc53718a0fd7ce22e4 Image: container-registry.oracle.com/middleware/oudsm_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October'24\u0026gt; Image ID: container-registry.oracle.com/middleware/oudsm_cpu@sha256:47960d36d502d699bfd8f9b1be4c9216e302db95317c288f335f9c8a32974f2c Ports: 7001/TCP, 7002/TCP Host Ports: 0/TCP, 0/TCP State: Running Started: \u0026lt;DATE\u0026gt; Ready: True Restart Count: 0 Liveness: http-get http://:7001/oudsm delay=1200s timeout=15s period=60s #success=1 #failure=3 Readiness: http-get http://:7001/oudsm delay=900s timeout=15s period=30s #success=1 #failure=3 Environment: DOMAIN_NAME: oudsmdomain-1 ADMIN_USER: \u0026lt;set to the key 'adminUser' in secret 'oudsm-creds'\u0026gt; Optional: false ADMIN_PASS: \u0026lt;set to the key 'adminPass' in secret 'oudsm-creds'\u0026gt; Optional: false ADMIN_PORT: 7001 ADMIN_SSL_PORT: 7002 WLS_PLUGIN_ENABLED: true Mounts: /u01/oracle/user_projects from oudsm-pv (rw) /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-9ht84 (ro) Conditions: Type Status Initialized True Ready True ContainersReady True PodScheduled True Volumes: oudsm-pv: Type: PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace) ClaimName: oudsm-pvc ReadOnly: false kube-api-access-9ht84: Type: Projected (a volume that contains injected data from multiple sources) TokenExpirationSeconds: 3607 ConfigMapName: kube-root-ca.crt ConfigMapOptional: \u0026lt;nil\u0026gt; DownwardAPI: true QoS Class: BestEffort Node-Selectors: \u0026lt;none\u0026gt; Tolerations: node.kubernetes.io/not-ready:NoExecute op=Exists for 300s node.kubernetes.io/unreachable:NoExecute op=Exists for 300s Events: Type Reason Age From Message ---- ------ ---- ---- ------- Warning FailedScheduling 39m default-scheduler 0/3 nodes are available: 3 pod has unbound immediate PersistentVolumeClaims. Normal Scheduled 39m default-scheduler Successfully assigned oudsmns/oudsm-1 to \u0026lt;worker-node\u0026gt; Normal Pulled 39m kubelet Container image \u0026quot;container-registry.oracle.com/middleware/oudsm_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October'24\u0026gt;\u0026quot; already present on machine Normal Created 39m kubelet Created container oudsm Normal Started 39m kubelet Started container oudsm "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/create-or-update-image/",
	"title": "Create or update an image",
	"tags": [],
	"description": "Create or update an Oracle Access Management (OAM) container image used for deploying OAM domains.",
	"content": "As described in Prepare Your Environment you can create your own OAM container image. If you have access to the My Oracle Support (MOS), and there is a need to build a new image with an interim or one off patch, it is recommended to use the WebLogic Image Tool to build an Oracle Access Management image for production deployments.\nCreate or update an Oracle Access Management image using the WebLogic Image Tool Using the WebLogic Image Tool, you can create a new Oracle Access Management image with PSU\u0026rsquo;s and interim patches or update an existing image with one or more interim patches.\n Recommendations:\n Use create for creating a new Oracle Access Management image containing the Oracle Access Management binaries, bundle patch and interim patches. This is the recommended approach if you have access to the OAM patches because it optimizes the size of the image. Use update for patching an existing Oracle Access Management image with a single interim patch. Note that the patched image size may increase considerably due to additional image layers introduced by the patch application tool.   Create an image Set up the WebLogic Image Tool  Prerequisites Set up the WebLogic Image Tool Validate setup WebLogic Image Tool build directory WebLogic Image Tool cache  Prerequisites Verify that your environment meets the following prerequisites:\n Docker client and daemon on the build machine, with minimum Docker version 18.03.1.ce. Bash version 4.0 or later, to enable the command complete feature. JAVA_HOME environment variable set to the appropriate JDK location e.g: /scratch/export/oracle/product/jdk  Set up the WebLogic Image Tool To set up the WebLogic Image Tool:\n  Create a working directory and change to it:\n$ mdir \u0026lt;workdir\u0026gt; $ cd \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/imagetool-setup $ cd /scratch/imagetool-setup   Download the latest version of the WebLogic Image Tool from the releases page.\n$ wget https://github.com/oracle/weblogic-image-tool/releases/download/release-X.X.X/imagetool.zip where X.X.X is the latest release referenced on the releases page.\n  Unzip the release ZIP file in the imagetool-setup directory.\n$ unzip imagetool.zip   Execute the following commands to set up the WebLogic Image Tool:\n$ cd \u0026lt;workdir\u0026gt;/imagetool-setup/imagetool/bin $ source setup.sh For example:\n$ cd /scratch/imagetool-setup/imagetool/bin $ source setup.sh   Validate setup To validate the setup of the WebLogic Image Tool:\n  Enter the following command to retrieve the version of the WebLogic Image Tool:\n$ imagetool --version   Enter imagetool then press the Tab key to display the available imagetool commands:\n$ imagetool \u0026lt;TAB\u0026gt; cache create help rebase update   WebLogic Image Tool build directory The WebLogic Image Tool creates a temporary Docker context directory, prefixed by wlsimgbuilder_temp, every time the tool runs. Under normal circumstances, this context directory will be deleted. However, if the process is aborted or the tool is unable to remove the directory, it is safe for you to delete it manually. By default, the WebLogic Image Tool creates the Docker context directory under the user\u0026rsquo;s home directory. If you prefer to use a different directory for the temporary context, set the environment variable WLSIMG_BLDDIR:\n$ export WLSIMG_BLDDIR=\u0026#34;/path/to/buid/dir\u0026#34; WebLogic Image Tool cache The WebLogic Image Tool maintains a local file cache store. This store is used to look up where the Java, WebLogic Server installers, and WebLogic Server patches reside in the local file system. By default, the cache store is located in the user\u0026rsquo;s $HOME/cache directory. Under this directory, the lookup information is stored in the .metadata file. All automatically downloaded patches also reside in this directory. You can change the default cache store location by setting the environment variable WLSIMG_CACHEDIR:\n$ export WLSIMG_CACHEDIR=\u0026#34;/path/to/cachedir\u0026#34; Set up additional build scripts Creating an Oracle Access Management container image using the WebLogic Image Tool requires additional container scripts for Oracle Access Management domains.\n  Clone the docker-images repository to set up those scripts. In these steps, this directory is DOCKER_REPO:\n$ cd \u0026lt;workdir\u0026gt;/imagetool-setup $ git clone https://github.com/oracle/docker-images.git For example:\n$ cd /scratch/imagetool-setup $ git clone https://github.com/oracle/docker-images.git    Note: If you want to create the image continue with the following steps, otherwise to update the image see update an image.\n Create an image After setting up the WebLogic Image Tool, follow these steps to use the WebLogic Image Tool to create a new Oracle Access Management image.\nDownload the Oracle Access Management installation binaries and patches You must download the required Oracle Access Management installation binaries and patches as listed below from the Oracle Software Delivery Cloud and save them in a directory of your choice.\nThe installation binaries and patches required are:\n  Oracle Identity and Access Management 12.2.1.4.0\n fmw_12.2.1.4.0_idm.jar    Oracle Fusion Middleware 12c Infrastructure 12.2.1.4.0\n fmw_12.2.1.4.0_infrastructure.jar    OAM and FMW Infrastructure Patches:\n View document ID 2723908.1 on My Oracle Support. In the Container Image Download/Patch Details section, locate the Oracle Access Management (OAM) table. For the latest PSU click the README link in the Documentation column. In the README, locate the \u0026ldquo;Installed Software\u0026rdquo; section. All the patch numbers to be download are listed here. Download all these individual patches from My Oracle Support.    Oracle JDK v8\n jdk-8uXXX-linux-x64.tar.gz where XXX is the JDK version referenced in the README above.    Update required build files The following files in the code repository location \u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleAccessManagement/imagetool/12.2.1.4.0 are used for creating the image:\n additionalBuildCmds.txt buildArgs    Edit the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleAccessManagement/imagetool/12.2.1.4.0/buildArgs file and change %DOCKER_REPO%, %JDK_VERSION% and %BUILDTAG% appropriately.\nFor example:\ncreate --jdkVersion=8u301 --type oam --version=12.2.1.4.0 --tag=oam-latestpsu:12.2.1.4.0 --pull --installerResponseFile /scratch/imagetool-setup/docker-images/OracleFMWInfrastructure/dockerfiles/12.2.1.4/install.file,/scratch/imagetool-setup/docker-images/OracleAccessManagement/dockerfiles/12.2.1.4.0/install/iam.response --additionalBuildCommands /scratch/imagetool-setup/docker-images/OracleAccessManagement/imagetool/12.2.1.4.0/addtionalBuildCmds.txt --additionalBuildFiles /scratch/imagetool-setup/docker-images/OracleAccessManagement/dockerfiles/12.2.1.4.0/container-scripts   Edit the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleFMWInfrastructure/dockerfiles/12.2.1.4/install.file and under the GENERIC section add the line INSTALL_TYPE=\u0026quot;Fusion Middleware Infrastructure\u0026rdquo;. For example:\n[GENERIC] INSTALL_TYPE=\u0026quot;Fusion Middleware Infrastructure\u0026quot; DECLINE_SECURITY_UPDATES=true SECURITY_UPDATES_VIA_MYORACLESUPPORT=false   Create the image   Add a JDK package to the WebLogic Image Tool cache. For example:\n$ imagetool cache addInstaller --type jdk --version 8uXXX --path \u0026lt;download location\u0026gt;/jdk-8uXXX-linux-x64.tar.gz where XXX is the JDK version downloaded\n  Add the downloaded installation binaries to the WebLogic Image Tool cache. For example:\n$ imagetool cache addInstaller --type fmw --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_infrastructure.jar $ imagetool cache addInstaller --type OAM --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_idm.jar   Add the downloaded OPatch patch to the WebLogic Image Tool cache. For example:\n$ imagetool cache addEntry --key 28186730_13.9.4.2.8 --value \u0026lt;download location\u0026gt;/p28186730_139428_Generic.zip   Add the rest of the downloaded product patches to the WebLogic Image Tool cache:\n$ imagetool cache addEntry --key \u0026lt;patch\u0026gt;_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p\u0026lt;patch\u0026gt;_122140_Generic.zip For example:\n$ imagetool cache addEntry --key 32971905_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32971905_122140_Generic.zip $ imagetool cache addEntry --key 20812896_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p20812896_122140_Generic.zip $ imagetool cache addEntry --key 32880070_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32880070_122140_Generic.zip $ imagetool cache addEntry --key 33059296_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33059296_122140_Generic.zip $ imagetool cache addEntry --key 32905339_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32905339_122140_Generic.zip $ imagetool cache addEntry --key 33084721_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33084721_122140_Generic.zip $ imagetool cache addEntry --key 31544353_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p31544353_122140_Linux-x86-64.zip $ imagetool cache addEntry --key 32957281_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32957281_122140_Generic.zip $ imagetool cache addEntry --key 33093748_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33093748_122140_Generic.zip   Edit the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleAccessManagement/imagetool/12.2.1.4.0/buildArgs file and append the product patches and opatch patch as follows:\n--patches 32971905_12.2.1.4.0,20812896_12.2.1.4.0,32880070_12.2.1.4.0,33059296_12.2.1.4.0,32905339_12.2.1.4.0,33084721_12.2.1.4.0,31544353_12.2.1.4.0,32957281_12.2.1.4.0,33093748_12.2.1.4.0 --opatchBugNumber=28186730_13.9.4.2.8 An example buildArgs file is now as follows:\ncreate --jdkVersion=8u301 --type oam --version=12.2.1.4.0 --tag=oam-latestpsu:12.2.1.4.0 --pull --installerResponseFile /scratch/imagetool-setup/docker-images/OracleFMWInfrastructure/dockerfiles/12.2.1.4/install.file,/scratch/imagetool-setup/docker-images/OracleAccessManagement/dockerfiles/12.2.1.4.0/install/iam.response --additionalBuildCommands /scratch/imagetool-setup/docker-images/OracleAccessManagement/imagetool/12.2.1.4.0/additionalBuildCmds.txt --additionalBuildFiles /scratch/imagetool-setup/docker-images/OracleAccessManagement/dockerfiles/12.2.1.4.0/container-scripts --patches 32971905_12.2.1.4.0,20812896_12.2.1.4.0,32880070_12.2.1.4.0,33059296_12.2.1.4.0,32905339_12.2.1.4.0,33084721_12.2.1.4.0,31544353_12.2.1.4.0,32957281_12.2.1.4.0,33093748_12.2.1.4.0 --opatchBugNumber=28186730_13.9.4.2.8  Note: In the buildArgs file:\n --jdkVersion value must match the --version value used in the imagetool cache addInstaller command for --type jdk. --version value must match the --version value used in the imagetool cache addInstaller command for --type OAM.   Refer to this page for the complete list of options available with the WebLogic Image Tool create command.\n  Create the Oracle Access Management image:\n$ imagetool @\u0026lt;absolute path to buildargs file\u0026gt; --fromImage ghcr.io/oracle/oraclelinux:7-slim  Note: Make sure that the absolute path to the buildargs file is prepended with a @ character, as shown in the example above.\n For example:\n$ imagetool @\u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleAccessManagement/imagetool/12.2.1.4.0/buildArgs --fromImage ghcr.io/oracle/oraclelinux:7-slim   Check the created image using the docker images command:\n$ docker images | grep oam The output will look similar to the following:\noam-latestpsu 12.2.1.4.0 ad732fc7c16b About a minute ago 3.35GB   Run the following command to save the container image to a tar file:\n$ docker save -o \u0026lt;path\u0026gt;/\u0026lt;file\u0026gt;.tar \u0026lt;image\u0026gt; For example:\n$ docker save -o $WORKDIR/oam-latestpsu.tar oam-latestpsu:12.2.1.4.0   Update an image The steps below show how to update an existing Oracle Access Management image with an interim patch.\nThe container image to be patched must be loaded in the local docker images repository before attempting these steps.\nIn the examples below the image oracle/oam:12.2.1.4.0 is updated with an interim patch.\n$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE oracle/oam 12.2.1.4.0 b051804ba15f 3 months ago 3.34GB   Set up the WebLogic Image Tool.\n  Download the required interim patch and latest Opatch (28186730) from My Oracle Support. and save them in a directory of your choice.\n  Add the OPatch patch to the WebLogic Image Tool cache, for example:\n$ imagetool cache addEntry --key 28186730_13.9.4.2.8 --value \u0026lt;downloaded-patches-location\u0026gt;/p28186730_139428_Generic.zip   Execute the imagetool cache addEntry command for each patch to add the required patch(es) to the WebLogic Image Tool cache. For example, to add patch p32701831_12214210607_Generic.zip:\n$ imagetool cache addEntry --key=32701831_12.2.1.4.210607 --value \u0026lt;downloaded-patches-location\u0026gt;/p32701831_12214210607_Generic.zip   Provide the following arguments to the WebLogic Image Tool update command:\n –-fromImage - Identify the image that needs to be updated. In the example below, the image to be updated is oracle/oam:12.2.1.4.0. –-patches - Multiple patches can be specified as a comma-separated list. --tag - Specify the new tag to be applied for the image being built.  Refer here for the complete list of options available with the WebLogic Image Tool update command.\n Note: The WebLogic Image Tool cache should have the latest OPatch zip. The WebLogic Image Tool will update the OPatch if it is not already updated in the image.\n For example:\n$ imagetool update --fromImage oracle/oam:12.2.1.4.0 --tag=oracle/oam-new:12.2.1.4.0 --patches=32701831_12.2.1.4.210607 --opatchBugNumber=28186730_13.9.4.2.8  Note: If the command fails because the files in the image being upgraded are not owned by oracle:oracle, then add the parameter --chown \u0026lt;userid\u0026gt;:\u0026lt;groupid\u0026gt; to correspond with the values returned in the error.\n   Check the built image using the docker images command:\n$ docker images | grep oam The output will look similar to the following:\nREPOSITORY TAG IMAGE ID CREATED SIZE oracle/oam-new 12.2.1.4.0 78ccd1ad67eb 5 minutes ago 3.8GB oracle/oam 12.2.1.4.0 b051804ba15f 3 months ago 3.34GB   Run the following command to save the patched container image to a tar file:\n$ docker save -o \u0026lt;path\u0026gt;/\u0026lt;file\u0026gt;.tar \u0026lt;image\u0026gt; For example:\n$ docker save -o $WORKDIR/oam-new.tar oracle/oam-new:12.2.1.4.0   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/create-or-update-image/",
	"title": "Create or update an image",
	"tags": [],
	"description": "Create or update an Oracle Identity Governance (OIG) container image used for deploying OIG domains",
	"content": "As described in Prepare Your Environment you can create your own OIG container image. If you have access to the My Oracle Support (MOS), and there is a need to build a new image with an interim or one off patch, it is recommended to use the WebLogic Image Tool to build an Oracle Identity Governance image for production deployments.\nCreate or update an Oracle Identity Governance image using the WebLogic Image Tool Using the WebLogic Image Tool, you can create a new Oracle Identity Governance image with PSU\u0026rsquo;s and interim patches or update an existing image with one or more interim patches.\n Recommendations:\n Use create for creating a new Oracle Identity Governance image containing the Oracle Identity Governance binaries, bundle patch and interim patches. This is the recommended approach if you have access to the OIG patches because it optimizes the size of the image. Use update for patching an existing Oracle Identity Governance image with a single interim patch. Note that the patched image size may increase considerably due to additional image layers introduced by the patch application tool.   Create an image Set up the WebLogic Image Tool  Prerequisites Set up the WebLogic Image Tool Validate setup WebLogic Image Tool build directory WebLogic Image Tool cache  Prerequisites Verify that your environment meets the following prerequisites:\n Docker client and daemon on the build machine, with minimum Docker version 18.03.1.ce. Bash version 4.0 or later, to enable the command complete feature. JAVA_HOME environment variable set to the appropriate JDK location e.g: /scratch/export/oracle/product/jdk  Set up the WebLogic Image Tool To set up the WebLogic Image Tool:\n  Create a working directory and change to it:\n$ mkdir \u0026lt;workdir\u0026gt; $ cd \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/imagetool-setup $ cd /scratch/imagetool-setup   Download the latest version of the WebLogic Image Tool from the releases page.\n$ wget https://github.com/oracle/weblogic-image-tool/releases/download/release-X.X.X/imagetool.zip where X.X.X is the latest release referenced on the releases page.\n  Unzip the release ZIP file in the imagetool-setup directory.\n$ unzip imagetool.zip   Execute the following commands to set up the WebLogic Image Tool:\n$ cd \u0026lt;workdir\u0026gt;/imagetool-setup/imagetool/bin $ source setup.sh For example:\n$ cd /scratch/imagetool-setup/imagetool/bin $ source setup.sh   Validate setup To validate the setup of the WebLogic Image Tool:\n  Enter the following command to retrieve the version of the WebLogic Image Tool:\n$ imagetool --version   Enter imagetool then press the Tab key to display the available imagetool commands:\n$ imagetool \u0026lt;TAB\u0026gt; cache create help rebase update   WebLogic Image Tool build directory The WebLogic Image Tool creates a temporary Docker context directory, prefixed by wlsimgbuilder_temp, every time the tool runs. Under normal circumstances, this context directory will be deleted. However, if the process is aborted or the tool is unable to remove the directory, it is safe for you to delete it manually. By default, the WebLogic Image Tool creates the Docker context directory under the user\u0026rsquo;s home directory. If you prefer to use a different directory for the temporary context, set the environment variable WLSIMG_BLDDIR:\n$ export WLSIMG_BLDDIR=\u0026#34;/path/to/buid/dir\u0026#34; WebLogic Image Tool cache The WebLogic Image Tool maintains a local file cache store. This store is used to look up where the Java, WebLogic Server installers, and WebLogic Server patches reside in the local file system. By default, the cache store is located in the user\u0026rsquo;s $HOME/cache directory. Under this directory, the lookup information is stored in the .metadata file. All automatically downloaded patches also reside in this directory. You can change the default cache store location by setting the environment variable WLSIMG_CACHEDIR:\n$ export WLSIMG_CACHEDIR=\u0026#34;/path/to/cachedir\u0026#34; Set up additional build scripts Creating an Oracle Identity Governance container image using the WebLogic Image Tool requires additional container scripts for Oracle Identity Governance domains.\n  Clone the docker-images repository to set up those scripts. In these steps, this directory is DOCKER_REPO:\n$ cd \u0026lt;workdir\u0026gt;/imagetool-setup $ git clone https://github.com/oracle/docker-images.git For example:\n$ cd /scratch/imagetool-setup $ git clone https://github.com/oracle/docker-images.git    Note: If you want to create the image continue with the following steps, otherwise to update the image see update an image.\n Create an image After setting up the WebLogic Image Tool, follow these steps to use the WebLogic Image Tool to create a new Oracle Identity Governance image.\nDownload the Oracle Identity Governance installation binaries and patches You must download the required Oracle Identity Governance installation binaries and patches as listed below from the Oracle Software Delivery Cloud and save them in a directory of your choice.\nThe installation binaries and patches required are:\n  Oracle Identity and Access Management 12.2.1.4.0\n fmw_12.2.1.4.0_idm.jar    Oracle Fusion Middleware 12c Infrastructure 12.2.1.4.0\n fmw_12.2.1.4.0_infrastructure.jar    Oracle SOA Suite for Oracle Middleware 12.2.1.4.0\n fmw_12.2.1.4.0_soa.jar    Oracle Service Bus 12.2.1.4.0\n fmw_12.2.1.4.0_osb.jar    OIG and FMW Infrastructure Patches:\n View document ID 2723908.1 on My Oracle Support. In the Container Image Download/Patch Details section, locate the Oracle Identity Governance (OIG) table. For the latest PSU click the README link in the Documentation column. In the README, locate the \u0026ldquo;Installed Software\u0026rdquo; section. All the patch numbers to be download are listed here. Download all these individual patches from My Oracle Support.    Oracle JDK v8\n jdk-8uXXX-linux-x64.tar.gz where XXX is the JDK version referenced in the README above.    Update required build files The following files in the code repository location \u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleIdentityGovernance/imagetool/12.2.1.4.0 are used for creating the image:\n additionalBuildCmds.txt buildArgs  . Edit the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleIdentityGovernance/imagetool/12.2.1.4.0/buildArgs file and change %DOCKER_REPO%, %JDK_VERSION% and %BUILDTAG% appropriately.\nFor example:\ncreate --jdkVersion=8u311 --type oig --chown oracle:root --version=12.2.1.4.0 --tag=oig-latestpsu:12.2.1.4.0 --pull --installerResponseFile /scratch/imagetool-setup/docker-images/OracleFMWInfrastructure/dockerfiles/12.2.1.4/install.file,/scratch/imagetool-setup/docker-images/OracleSOASuite/dockerfiles/12.2.1.4.0/install/soasuite.response,/scratch/imagetool-setup/docker-images/OracleSOASuite/dockerfiles/12.2.1.4.0/install/osb.response,/scratch/imagetool-setup/docker-images/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/idmqs.response --additionalBuildCommands /scratch/imagetool-setup/docker-images/OracleIdentityGovernance/imagetool/12.2.1.4.0/additionalBuildCmds.txt --additionalBuildFiles /scratch/imagetool-setup/docker-images/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/container-scripts   Edit the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleFMWInfrastructure/dockerfiles/12.2.1.4.0/install.file and under the GENERIC section add the line INSTALL_TYPE=\u0026quot;Fusion Middleware Infrastructure\u0026rdquo;. For example:\n[GENERIC] INSTALL_TYPE=\u0026quot;Fusion Middleware Infrastructure\u0026quot; DECLINE_SECURITY_UPDATES=true SECURITY_UPDATES_VIA_MYORACLESUPPORT=false   Create the image   Add a JDK package to the WebLogic Image Tool cache. For example:\n$ imagetool cache addInstaller --type jdk --version 8uXXX --path \u0026lt;download location\u0026gt;/jdk-8uXXX-linux-x64.tar.gz where XXX is the JDK version downloaded\n  Add the downloaded installation binaries to the WebLogic Image Tool cache. For example:\n$ imagetool cache addInstaller --type fmw --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_infrastructure.jar $ imagetool cache addInstaller --type soa --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_soa.jar $ imagetool cache addInstaller --type osb --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_osb.jar $ imagetool cache addInstaller --type idm --version 12.2.1.4.0 --path \u0026lt;download location\u0026gt;/fmw_12.2.1.4.0_idm.jar   Add the downloaded OPatch patch to the WebLogic Image Tool cache. For example:\n$ imagetool cache addEntry --key 28186730_13.9.4.2.8 --value \u0026lt;download location\u0026gt;/p28186730_139428_Generic.zip   Add the rest of the downloaded product patches to the WebLogic Image Tool cache:\n$ imagetool cache addEntry --key \u0026lt;patch\u0026gt;_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p\u0026lt;patch\u0026gt;_122140_Generic.zip For example:\n$ imagetool cache addEntry --key 33416868_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33416868_122140_Generic.zip $ imagetool cache addEntry --key 33453703_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33453703_122140_Generic.zip $ imagetool cache addEntry --key 32999272_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32999272_122140_Generic.zip $ imagetool cache addEntry --key 33093748_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33093748_122140_Generic.zip $ imagetool cache addEntry --key 33281560_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33281560_122140_Generic.zip $ imagetool cache addEntry --key 31544353_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p31544353_122140_Linux-x86-64.zip $ imagetool cache addEntry --key 33313802_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33313802_122140_Generic.zip $ imagetool cache addEntry --key 33408307_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33408307_122140_Generic.zip $ imagetool cache addEntry --key 33286160_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p33286160_122140_Generic.zip $ imagetool cache addEntry --key 32880070_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32880070_122140_Generic.zip $ imagetool cache addEntry --key 32905339_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32905339_122140_Generic.zip $ imagetool cache addEntry --key 32784652_12.2.1.4.0 --value \u0026lt;download location\u0026gt;/p32784652_122140_Generic.zip   Edit the \u0026lt;workdir\u0026gt;/imagetool-setup/docker-images/OracleIdentityGovernance/imagetool/12.2.1.4.0/buildArgs file and append the product patches and opatch patch as follows:\n--patches 33416868_12.2.1.4.0,33453703_12.2.1.4.0,32999272_12.2.1.4.0,33093748_12.2.1.4.0,33281560_12.2.1.4.0,31544353_12.2.1.4.0,33313802_12.2.1.4.0,33408307_12.2.1.4.0,33286160_12.2.1.4.0,32880070_12.2.1.4.0,32905339_12.2.1.4.0,32784652_12.2.1.4.0 --opatchBugNumber=28186730_13.9.4.2.8 An example buildArgs file is now as follows:\ncreate --jdkVersion=8u301 --type oig --version=12.2.1.4.0 --tag=oig-latestpsu:12.2.1.4.0 --pull --installerResponseFile /scratch/imagetool-setup/docker-images/OracleFMWInfrastructure/dockerfiles/12.2.1.4/install.file,/scratch/docker-images/OracleSOASuite/dockerfiles/12.2.1.4.0/install/soasuite.response,/scratch/docker-images/OracleSOASuite/dockerfiles/12.2.1.4.0/install/osb.response,/scratch/docker-images/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/idmqs.response --additionalBuildCommands /scratch/imagetool-setup/docker-images/OracleIdentityGovernance/imagetool/12.2.1.4.0/additionalBuildCmds.txt --additionalBuildFiles /scratch/imagetool-setup/docker-images/OracleIdentityGovernance/dockerfiles/12.2.1.4.0/container-scripts --patches 33416868_12.2.1.4.0,33453703_12.2.1.4.0,32999272_12.2.1.4.0,33093748_12.2.1.4.0,33281560_12.2.1.4.0,31544353_12.2.1.4.0,33313802_12.2.1.4.0,33408307_12.2.1.4.0,33286160_12.2.1.4.0,32880070_12.2.1.4.0,32905339_12.2.1.4.0,32784652_12.2.1.4.0 --opatchBugNumber=28186730_13.9.4.2.8  Note: In the buildArgs file:\n --jdkVersion value must match the --version value used in the imagetool cache addInstaller command for --type jdk. --version value must match the --version value used in the imagetool cache addInstaller command for --type idm.   Refer to this page for the complete list of options available with the WebLogic Image Tool create command.\n  Create the Oracle Identity Governance image:\n$ imagetool @\u0026lt;absolute path to buildargs file\u0026gt; --fromImage ghcr.io/oracle/oraclelinux:7-slim  Note: Make sure that the absolute path to the buildargs file is prepended with a @ character, as shown in the example above.\n For example:\n$ imagetool @\u0026lt;imagetool-setup-location\u0026gt;/docker-images/OracleIdentityGovernance/imagetool/12.2.1.4.0/buildArgs --fromImage ghcr.io/oracle/oraclelinux:7-slim   Check the created image using the docker images command:\n$ docker images | grep oig The output will look similar to the following:\noig-latestpsu 12.2.1.4.0 e391ed154bcb 50 seconds ago 4.43GB   Run the following command to save the container image to a tar file:\n$ docker save -o \u0026lt;path\u0026gt;/\u0026lt;file\u0026gt;.tar \u0026lt;image\u0026gt; For example:\n$ docker save -o $WORKDIR/oig-latestpsu.tar oig-latestpsu:12.2.1.4.0   Update an image The steps below show how to update an existing Oracle Identity Governance image with an interim patch.\nThe container image to be patched must be loaded in the local docker images repository before attempting these steps.\nIn the examples below the image oracle/oig:12.2.1.4.0 is updated with an interim patch.\n$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE oracle/oig 12.2.1.4.0 298fdb98e79c 3 months ago 4.42GB   Set up the WebLogic Image Tool.\n  Download the required interim patch and latest Opatch (28186730) from My Oracle Support. and save them in a directory of your choice.\n  Add the OPatch patch to the WebLogic Image Tool cache, for example:\n$ imagetool cache addEntry --key 28186730_13.9.4.2.8 --value \u0026lt;downloaded-patches-location\u0026gt;/p28186730_139428_Generic.zip   Execute the imagetool cache addEntry command for each patch to add the required patch(es) to the WebLogic Image Tool cache. For example, to add patch p32701831_12214210607_Generic.zip:\n$ imagetool cache addEntry --key=33165837_12.2.1.4.210708 --value \u0026lt;downloaded-patches-location\u0026gt;/p33165837_12214210708_Generic.zip   Provide the following arguments to the WebLogic Image Tool update command:\n –-fromImage - Identify the image that needs to be updated. In the example below, the image to be updated is oracle/oig:12.2.1.4.0. –-patches - Multiple patches can be specified as a comma-separated list. --tag - Specify the new tag to be applied for the image being built.  Refer here for the complete list of options available with the WebLogic Image Tool update command.\n Note: The WebLogic Image Tool cache should have the latest OPatch zip. The WebLogic Image Tool will update the OPatch if it is not already updated in the image.\n For example:\n$ imagetool update --fromImage oracle/oig:12.2.1.4.0 --tag=oracle/oig-new:12.2.1.4.0 --patches=33165837_12.2.1.4.210708 --opatchBugNumber=28186730_13.9.4.2.8  Note: If the command fails because the files in the image being upgraded are not owned by oracle:oracle, then add the parameter --chown \u0026lt;userid\u0026gt;:\u0026lt;groupid\u0026gt; to correspond with the values returned in the error.\n   Check the built image using the docker images command:\n$ docker images | grep oig The output will look similar to the following:\nREPOSITORY TAG IMAGE ID CREATED SIZE oracle/oig-new 12.2.1.4.0 0c8381922e95 16 seconds ago 4.91GB oracle/oig 12.2.1.4.0 298fdb98e79c 3 months ago 4.42GB   Run the following command to save the patched container image to a tar file:\n$ docker save -o \u0026lt;path\u0026gt;/\u0026lt;file\u0026gt;.tar \u0026lt;image\u0026gt; For example:\n$ docker save -o $WORKDIR/oig-new.tar oracle/oig-new:12.2.1.4.0   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/patch-and-upgrade/",
	"title": "Patch and Upgrade",
	"tags": [],
	"description": "This document provides steps to patch or upgrade an OAM image, WebLogic Kubernetes Operator, ELK, and Ingress.",
	"content": "This section shows you how to upgrade the WebLogic Kubernetes Operator, the OAM image, the Elasticsearch and Kibana stack, and the Ingress.\nThe upgrade path taken depends on the version you are upgrading from, and the version you are upgrading to.\nPlease refer to the Release Notes for information on which upgrade steps are necessary for the version you are upgrading to.\n a. Upgrade an operator release  Instructions on how to update the WebLogic Kubernetes Operator version.\n b. Patch an image  Instructions on how to update your OAM Kubernetes cluster with a new OAM container image.\n c. Upgrade Ingress  Instructions on how to upgrade the ingress.\n d. Upgrade Elasticsearch and Kibana  Instructions on how to upgrade Elastic Search and Kibana.\n "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/patch-and-upgrade/",
	"title": "Patch and upgrade",
	"tags": [],
	"description": "This document provides steps to patch or upgrade an OIG image, or WebLogic Kubernetes Operator.",
	"content": "This section shows you how to upgrade the WebLogic Kubernetes Operator, upgrade the OIG image, and patch the OIG domain. It also shows you how to upgrade the Elasticsearch and Kibana stack, and the Ingress.\nThe upgrade path taken depends on the version you are upgrading from, and the version you are upgrading to.\nPlease refer to the Release Notes for information on which upgrade steps are necessary for the version you are upgrading to.\n a. Upgrade an operator release  Instructions on how to update the WebLogic Kubernetes Operator version.\n b. Patch an image  Instructions on how to update your OIG Kubernetes cluster with a new OIG container image.\n c. Upgrade Ingress  Instructions on how to upgrade the ingress.\n d. Upgrade Elasticsearch and Kibana  Instructions on how to upgrade Elastic Search and Kibana.\n "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/troubleshooting/",
	"title": "Troubleshooting",
	"tags": [],
	"description": "How to Troubleshoot domain creation failure.",
	"content": "Domain creation failure with WLST The instructions in this section relate to problems creating OAM domains using WLST in Create OAM domain using WLST.\nIf the OAM domain creation fails, run the following to diagnose the issue:\n  Run the following command to diagnose the create domain job:\n$ kubectl logs \u0026lt;domain_job\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl logs accessdomain-create-fmw-infra-sample-domain-job-c6vfb -n oamns Also run:\n$ kubectl describe pod \u0026lt;domain_job\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe pod accessdomain-create-fmw-infra-sample-domain-job-c6vfb -n oamns Using the output you should be able to diagnose the problem and resolve the issue.\nClean down the failed domain creation by following steps 1-3 in Delete the OAM domain home. Then follow RCU schema creation onwards to recreate the RCU schema, kubernetes secrets for domain and RCU, the persistent volume and the persistent volume claim. Then execute the OAM domain creation steps again.\n  If any of the above commands return the following error:\nFailed to start container \u0026quot;create-fmw-infra-sample-domain-job\u0026quot;: Error response from daemon: error while creating mount source path '/scratch/shared/accessdomainpv ': mkdir /scratch/shared/accessdomainpv : permission denied then there is a permissions error on the directory for the PV and PVC and the following should be checked:\na) The directory has 777 permissions: chmod -R 777 \u0026lt;persistent_volume\u0026gt;/accessdomainpv.\nb) If it does have the permissions, check if an oracle user exists and the uid is 1000 and gid is 0.\nCreate the oracle user if it doesn\u0026rsquo;t exist and set the uid to 1000 and gid to 0.\nc) Edit the $WORKDIR/kubernetes/create-weblogic-domain-pv-pvc/create-pv-pvc-inputs.yaml and add a slash to the end of the directory for the weblogicDomainStoragePath parameter:\nweblogicDomainStoragePath: /scratch/shared/accessdomainpv/ Clean down the failed domain creation by following steps 1-3 in Delete the OAM domain home. Then follow RCU schema creation onwards to recreate the RCU schema, kubernetes secrets for domain and RCU, the persistent volume and the persistent volume claim. Then execute the OAM domain creation using WLST Offline Scripts steps again.\n  Domain creation failure with WDT Models The instructions in this section relate to problems creating OAM domains using WDT models in Create OAM domain using WDT Models.\nIf the domain creation fails while creating domain resources using the domain.yaml file, run the following steps to diagnose the issue:\n  Check the domain events, by running the following command:\nkubectl describe domain \u0026lt;domain name\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\nkubectl describe domain accessdomain -n oamns Using the output, you should be able to diagnose the problem and resolve the issue.\n  If the instrospector job fails due to validation errors, then you can recreate the domain resources using the commands:\nkubectl delete -f domain.yaml kubectl create -f domain.yaml   If the domain creation fails because of database issues:\na. Create a helper pod:\n kubectl run --image=container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October`24\u0026gt; --image-pull-policy=\u0026quot;IfNotPresent\u0026quot; --overrides='{\u0026quot;apiVersion\u0026quot;: \u0026quot;v1\u0026quot;,\u0026quot;spec\u0026quot;:{\u0026quot;imagePullSecrets\u0026quot;: [{\u0026quot;name\u0026quot;: \u0026quot;orclcred\u0026quot;}]}}' helper -n oamns -- sleep infinity ``\nb. Clean down the failed domain creation by following steps 1-3 in Delete the OAM domain home.\nc. Execute the steps in Create OAM domain using WDT Models again.\n  Note You might need to recreate the domain creation image depending upon the errors. Domain creation logs are stored in \u0026lt;persistent_volume\u0026gt;/domains/wdt-logs.\n  If there is any issues bringing up the AdminServer, OAM Server or Policy Server pods, you can run the following to check the logs:\n$ kubectl logs -n oamns \u0026lt;POD_name\u0026gt; If the above does not give any information you can also run:\n$ kubectl describe pod -n oamns   For more details related to debugging issues, refer to Domain Debugging.\n"
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/troubleshooting/",
	"title": "Troubleshooting",
	"tags": [],
	"description": "Sample for creating an OIG domain home on an existing PV or PVC, and the domain resource YAML file for deploying the generated OIG domain.",
	"content": "Domain creation failure with WLST scripts If the OIG domain creation fails, run the following to diagnose the issue:\n  Run the following command to diagnose the create domain job:\n$ kubectl logs \u0026lt;job_name\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl logs governancedomain-create-fmw-infra-sample-domain-job-9wqzb -n oigns Also run:\n$ kubectl describe pod \u0026lt;job_domain\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe pod governancedomain-create-fmw-infra-sample-domain-job-9wqzb -n oigns Using the output you should be able to diagnose the problem and resolve the issue.\nClean down the failed domain creation by following steps 1-3 in Delete the OIG domain home. Then follow RCU schema creation onwards to recreate the RCU schema, Kubernetes secrets for domain and RCU, the persistent volume and the persistent volume claim. Then execute the OIG domain creation steps again.\n  If any of the above commands return the following error:\nFailed to start container \u0026quot;create-fmw-infra-sample-domain-job\u0026quot;: Error response from daemon: error while creating mount source path '/scratch/shared/governancedomainpv ': mkdir /scratch/shared/governancedomainpv : permission denied then there is a permissions error on the directory for the PV and PVC and the following should be checked:\na) The directory has 777 permissions: chmod -R 777 \u0026lt;persistent_volume\u0026gt;/governancedomainpv.\nb) If it does have the permissions, check if an oracle user exists and the uid and gid equal 1000, for example:\n$ uid=1000(oracle) gid=1000(spg) groups=1000(spg),59968(oinstall),8500(dba),100(users),1007(cgbudba) Create the oracle user if it doesn\u0026rsquo;t exist and set the uid and gid to 1000.\nc) Edit the $WORKDIR/kubernetes/create-weblogic-domain-pv-pvc/create-pv-pvc-inputs.yaml and add a slash to the end of the directory for the weblogicDomainStoragePath parameter:\nweblogicDomainStoragePath: /scratch/shared/governancedomainpv/ Clean down the failed domain creation by following steps 1-3 in Delete the OIG domain home. Then follow RCU schema creation onwards to recreate the RCU schema, kubernetes secrets for domain and RCU, the persistent volume and the persistent volume claim. Then execute the OIG domain creation steps again.\n  Patch domain failures The instructions in this section relate to problems patching a deployment with a new image as per Patch an image.\n  If the OIG domain patching fails when running patch_oig_domain.sh, run the following to diagnose the issue:\n$ kubectl describe domain \u0026lt;domain name\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe domain governancedomain -n oigns Using the output you should be able to diagnose the problem and resolve the issue.\nIf the domain is already patched successfully and the script failed at the last step of waiting for pods to come up with the new image, then you do not need to rerun the script again after issue resolution. The pods will come up automatically once you resolve the underlying issue.\n  If the script is stuck at the following message for a long time:\n\u0026quot;[INFO] Waiting for weblogic pods to be ready..This may take several minutes, do not close the window. Check log /scratch/OIGK8Slatest/fmw-kubernetes/OracleIdentityGovernance/kubernetes/domain-lifecycle/log/oim_patch_log-\u0026lt;DATE\u0026gt;/monitor_weblogic_pods.log for progress\u0026quot; run the following command to diagnose the issue:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oigns Run the following to check the logs of the AdminServer, SOA server or OIM server pods, as there may be an issue that is not allowing the domain pods to start properly:\n$ kubectl logs \u0026lt;pod\u0026gt; -n oigns If the above does not glean any information you can also run:\n$ kubectl describe pod \u0026lt;pod\u0026gt; -n oigns Further diagnostic logs can also be found under the $WORKDIR/kubernetes/domain-lifecycle.\nOnce any issue is resolved the pods will come up automatically without the need to rerun the script.\n  Domain creation failure with WDT models The instructions in this section relate to problems creating OIG domains using WDT models Create OIG domain using WDT Models.\nIf the domain creation fails while creation domain resources using the domain.yaml file, run the following steps to diagnose the issue:\n  Check the domain events, by running the following command:\nkubectl describe domain \u0026lt;domain name\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\nkubectl describe domain governancedomain -n oigns Using the output, you should be able to diagnose the problem and resolve the issue.\n  If the instrospector job fails due to validation errors, then you can recreate the domain resources using the commands:\nkubectl delete -f domain.yaml kubectl create -f domain.yaml   If the domain creation fails because of database issues:\na. Create a helper pod:\n kubectl run --image=container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October`24\u0026gt; --image-pull-policy=\u0026quot;IfNotPresent\u0026quot; --overrides='{\u0026quot;apiVersion\u0026quot;: \u0026quot;v1\u0026quot;,\u0026quot;spec\u0026quot;:{\u0026quot;imagePullSecrets\u0026quot;: [{\u0026quot;name\u0026quot;: \u0026quot;orclcred\u0026quot;}]}}' helper -n oigns -- sleep infinity ``\nb. Clean down the failed domain creation by following steps 1-3 in Delete the OIG domain home.\nc. Execute the steps in Create OIG domain using WDT Models again.\n  Note You might need to recreate the domain creation image depending upon the errors. Domain creation logs are stored in \u0026lt;persistent_volume\u0026gt;/domains/wdt-logs.\n  If there is any issues while bringing up AdminServer, SOA Server or OIM Server, you can run the following to check the logs:\n$ kubectl logs \u0026lt;pod\u0026gt; -n oigns If the above does not give any information you can also run:\n$ kubectl describe pod \u0026lt;pod\u0026gt; -n oigns For more details related to debugging issues, refer to Domain Debugging.\n  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/",
	"title": "Oracle Identity Management on Kubernetes",
	"tags": [],
	"description": "This document lists all the Oracle Identity Management products deployment supported on Kubernetes.",
	"content": "Oracle Fusion Middleware on Kubernetes Oracle supports the deployment of the following Oracle Identity Management products on Kubernetes. Click on the appropriate document link below to get started on configuring the product.\nPlease note the following:\n  The individual product guides below for Oracle Access Management, Oracle Identity Governance, Oracle Unified Directory, and Oracle Unified Directory Services Manager, are for configuring that product on a Kubernetes cluster where no other Oracle Identity Management products will be deployed. For example, if you are deploying Oracle Access Management (OAM) only, then you can follow the Oracle Access Management guide. If you are deploying multiple Oracle Identity Management products on the same Kubernetes cluster, then you must follow the Enterprise Deployment Guide outlined in Enterprise Deployments. Please note, you also have the option to follow the Enterprise Deployment Guide even if you are only installing one product, such as OAM for example.\n  The individual product guides do not explain how to configure a Kubernetes cluster given the product can be deployed on any compliant Kubernetes vendor. If you need to understand how to configure a Kubernetes cluster ready for an Oracle Identity Management deployment, you should follow the Enterprise Deployment Guide in Enterprise Deployments.\n  The Enterprise Deployment Automation section also contains details on automation scripts that can:\n Automate the creation of a Kubernetes cluster on Oracle Cloud Infrastructure (OCI), ready for the deployment of Oracle Identity Management products. Automate the deployment of Oracle Identity Management products on any compliant Kubernetes cluster.     Enterprise Deployments  The complete Oracle Identity Management suite can be deployed in a production environment\n Oracle Access Management  The WebLogic Kubernetes Operator supports deployment of Oracle Access Management (OAM).\n Oracle Identity Governance  The WebLogic Kubernetes Operator supports deployment of Oracle Identity Governance (OIG).\n Oracle Internet Directory  Oracle Internet Directory provides a comprehensive Directory Solution for robust Identity Management\n Oracle Unified Directory  Oracle Unified Directory provides a comprehensive Directory Solution for robust Identity Management\n Oracle Unified Directory Services Manager  Oracle Unified Directory Services Manager provides an interface for managing instances of Oracle Unified Directory\n "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oud/manage-oud-containers/scaling-up-down/",
	"title": "a) Scaling Up/Down OUD Pods ",
	"tags": [],
	"description": "Describes the steps for scaling up/down for OUD pods.",
	"content": "Introduction This section describes how to increase or decrease the number of OUD pods in the Kubernetes deployment.\nNote: The instructions below are for scaling servers up or down manually. If you wish to use autoscaling, see Kubernetes Horizontal Pod Autoscaler. Please note, if you have enabled autoscaling, it is recommended to delete the autoscaler before running the commands below.\nView existing OUD pods By default the oud-ds-rs helm chart deployment starts three pods: oud-ds-rs-0 and two replica pods oud-ds-rs-1 and oud-ds-rs-2.\nThe number of pods started is determined by the replicaCount, which is set to 3 by default. A value of 3 starts the three pods above.\nTo scale up or down the number of OUD pods, set replicaCount accordingly.\nRun the following command to view the number of pods in the OUD deployment:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; get pods -o wide For example:\n$ kubectl --namespace oudns get pods -o wide The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oud-ds-rs-0 1/1 Running 0 22h 10.244.0.195 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-1 1/1 Running 0 22h 10.244.0.194 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-2 1/1 Running 0 22h 10.244.0.193 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; Scaling up OUD pods In this example, replicaCount is increased to 4 which creates a new OUD pod oud-ds-rs-3 with associated services created.\nYou can scale up the number of OUD pods using one of the following methods:\n Using a YAML file Using --set argument  Using a YAML file   Navigate to the $WORKDIR/kubernetes/helm directory:\n$ cd $WORKDIR/kubernetes/helm   Create a oud-scaleup-override.yaml file that contains:\nreplicaCount: 4   Run the following command to scale up the OUD pods:\n$ helm upgrade --namespace \u0026lt;namespace\u0026gt; \\ --values oud-scaleup-override.yaml \\ \u0026lt;release_name\u0026gt; oud-ds-rs --reuse-values For example:\n$ helm upgrade --namespace oudns \\ --values oud-scaleup-override.yaml \\ oud-ds-rs oud-ds-rs --reuse-values   Using --set argument   Run the following command to scale up the OUD pods:\n$ helm upgrade --namespace \u0026lt;namespace\u0026gt; \\ --set replicaCount=4 \\ \u0026lt;release_name\u0026gt; oud-ds-rs --reuse-values For example:\n$ helm upgrade --namespace oudns \\ --set replicaCount=4 \\ oud-ds-rs oud-ds-rs --reuse-values   Verify the pods   Verify the new OUD pod oud-ds-rs-3 and has started:\n$ kubectl get pod,service -o wide -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods,service -n oudns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oud-ds-rs-0 1/1 Running 0 22h 10.244.0.195 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-1 1/1 Running 0 22h 10.244.0.194 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-2 1/1 Running 0 22h 10.244.0.193 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-3 1/1 Running 0 17m 10.244.0.193 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service/oud-ds-rs ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1389/TCP,1636/TCP,1080/TCP,1081/TCP,1898/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-0 ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1898/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-0 service/oud-ds-rs-1 ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1898/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-1 service/oud-ds-rs-2 ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1898/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-2 service/oud-ds-rs-3 ClusterIP None \u0026lt;none\u0026gt; 1444/TCP,1888/TCP,1898/TCP 9m9s app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-3 service/oud-ds-rs-http-0 ClusterIP 10.104.112.93 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-0 service/oud-ds-rs-http-1 ClusterIP 10.103.105.70 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-1 service/oud-ds-rs-http-2 ClusterIP 10.110.160.107 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-2 service/oud-ds-rs-http-3 ClusterIP 10.102.93.179 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 9m9s app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-3 service/oud-ds-rs-lbr-admin ClusterIP 10.99.238.222 \u0026lt;none\u0026gt; 1888/TCP,1444/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-lbr-http ClusterIP 10.101.250.196 \u0026lt;none\u0026gt; 1080/TCP,1081/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-lbr-ldap ClusterIP 10.104.149.90 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs service/oud-ds-rs-ldap-0 ClusterIP 10.109.255.221 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-0 service/oud-ds-rs-ldap-1 ClusterIP 10.111.135.142 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-1 service/oud-ds-rs-ldap-2 ClusterIP 10.100.8.145 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 22h app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-2 service/oud-ds-rs-ldap-3 ClusterIP 10.111.177.46 \u0026lt;none\u0026gt; 1389/TCP,1636/TCP 9m9s app.kubernetes.io/instance=oud-ds-rs,app.kubernetes.io/name=oud-ds-rs,statefulset.kubernetes.io/pod-name=oud-ds-rs-3 Note: It will take several minutes before all the services listed above show. While the oud-ds-rs-3 pod has a STATUS of 0/1 the pod is started but the OUD server associated with it is currently starting. While the pod is starting you can check the startup status in the pod log, by running the following command:\n$ kubectl logs oud-ds-rs-3 -n oudns   Scaling down OUD pods Scaling down OUD pods is performed in exactly the same as in Scaling up OUD pods except the replicaCount is reduced to the required number of pods.\nOnce the kubectl command is executed the pod(s) will move to a Terminating state. In the example below replicaCount was reduced from 4 to 3 and hence oud-ds-rs-3 has moved to Terminating:\n$ kubectl get pods -n oudns NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oud-ds-rs-0 1/1 Running 0 22h 10.244.0.195 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-1 1/1 Running 0 22h 10.244.0.194 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-2 1/1 Running 0 22h 10.244.0.193 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-3 1/1 Terminating 0 21m 10.244.0.193 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; The pod will take a minute or two to stop and then will disappear:\n$ kubectl get pods -n oudns NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oud-ds-rs-0 1/1 Running 0 22h 10.244.0.195 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-1 1/1 Running 0 22h 10.244.0.194 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oud-ds-rs-2 1/1 Running 0 22h 10.244.0.193 \u0026lt;Worker Node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oudsm/manage-oudsm-containers/scaling-up-down/",
	"title": "a) Scaling Up/Down OUDSM Pods ",
	"tags": [],
	"description": "Describes the steps for scaling up/down for OUDSM pods.",
	"content": "Introduction This section describes how to increase or decrease the number of OUDSM pods in the Kubernetes deployment.\nView existing OUDSM pods By default the oudsm helm chart deployment starts one pod: oudsm-1.\nThe number of pods started is determined by the replicaCount, which is set to 1 by default. A value of 1 starts the pod above.\nTo scale up or down the number of OUDSM pods, set replicaCount accordingly.\nRun the following command to view the number of pods in the OUDSM deployment:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; get pods -o wide For example:\n$ kubectl --namespace oudsmns get pods -o wide The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oudsm-1 1/1 Running 0 73m 10.244.0.19 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; Scaling up OUDSM pods In this example, replicaCount is increased to 2 which creates a new OUDSM pod oudsm-2 with associated services created.\nYou can scale up the number of OUDSM pods using one of the following methods:\n Using a YAML file Using --set argument  Using a YAML file   Navigate to the $WORKDIR/kubernetes/helm directory:\n$ cd $WORKDIR/kubernetes/helm   Create a oudsm-scaleup-override.yaml file that contains:\nreplicaCount: 2   Run the following command to scale up the OUDSM pods:\n$ helm upgrade --namespace \u0026lt;namespace\u0026gt; \\ --values oudsm-scaleup-override.yaml \\ \u0026lt;release_name\u0026gt; oudsm --reuse-values For example:\n$ helm upgrade --namespace oudsmns \\ --values oudsm-scaleup-override.yaml \\ oudsm oudsm --reuse-values   Using --set argument   Run the following command to scale up the OUDSM pods:\n$ helm upgrade --namespace \u0026lt;namespace\u0026gt; \\ --set replicaCount=2 \\ \u0026lt;release_name\u0026gt; oudsm --reuse-values For example:\n$ helm upgrade --namespace oudsmns \\ --set replicaCount=2 \\ oudsm oudsm --reuse-values   Verify the pods   Verify the new OUDSM pod oudsm-2 has started:\n$ kubectl get pod,service -o wide -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods,service -n oudsmns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oudsm-1 1/1 Running 0 88m 10.244.0.19 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oudsm-2 1/1 Running 0 15m 10.245.3.45 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service/oudsm-1 ClusterIP 10.96.108.200 \u0026lt;none\u0026gt; 7001/TCP,7002/TCP 88m app.kubernetes.io/instance=oudsm,app.kubernetes.io/name=oudsm,oudsm/instance=oudsm-1 service/oudsm-2 ClusterIP 10.96.31.201 \u0026lt;none\u0026gt; 7001/TCP,7002/TCP 15m app.kubernetes.io/instance=oudsm,app.kubernetes.io/name=oudsm,oudsm/instance=oudsm-2 service/oudsm-lbr ClusterIP 10.96.41.201 \u0026lt;none\u0026gt; 7001/TCP,7002/TCP 73m app.kubernetes.io/instance=oudsm,app.kubernetes.io/name=oudsm Note: It will take several minutes before all the services listed above show. While the oudsm-2 pod has a STATUS of 0/1 the pod is started but the OUDSM server associated with it is currently starting. While the pod is starting you can check the startup status in the pod log, by running the following command:\n$ kubectl logs oudsm-2 -n oudsmns   Scaling down OUDSM pods Scaling down OUDSM pods is performed in exactly the same as in Scaling up OUDSM pods except the replicaCount is reduced to the required number of pods.\nOnce the kubectl command is executed the pod(s) will move to a Terminating state. In the example below replicaCount was reduced from 2 to 1 and hence oudsm-2 has moved to Terminating:\n$ kubectl get pods -n oudsmns NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oudsm-1 1/1 Running 0 92m 10.244.0.19 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/oudsm-2 1/1 Terminating 0 19m 10.245.3.45 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; The pod will take a minute or two to stop and then will disappear:\n$ kubectl get pods -n oudsmns NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oudsm-1 1/1 Running 0 94m 10.244.0.19 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/create-oam-domains/create-oam-domains-using-wlst/",
	"title": "a. Create OAM domains using WLST scripts",
	"tags": [],
	"description": "",
	"content": "  Introduction\n  Prerequisites\n  Prepare the create domain script\n  Run the create domain script\n  Set the OAM server memory parameters\n  Initializing the domain\n  Verify the results\na. Verify the domain, pods and services\nb. Verify the domain\nc. Verify the pods\n  Introduction The OAM deployment scripts demonstrate the creation of an OAM domain home on an existing Kubernetes persistent volume (PV) and persistent volume claim (PVC). The scripts also generate the domain YAML file, which can then be used to start the Kubernetes artifacts of the corresponding domain.\nNote: If you want to create the OAM domain using WDT models, skip the steps below and go to Create OAM Domains Using WDT Models.\nPrerequisites Before you begin, perform the following steps:\n Review the Domain resource documentation. Ensure that you have executed all the preliminary steps documented in Prepare your environment. Ensure that the database is up and running.  Prepare the create domain script The sample scripts for Oracle Access Management domain deployment are available at $WORKDIR/kubernetes/create-access-domain.\n  Make a copy of the create-domain-inputs.yaml file:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv $ cp create-domain-inputs.yaml create-domain-inputs.yaml.orig   Edit the create-domain-inputs.yaml and modify the following parameters. Save the file when complete:\ndomainUID: \u0026lt;domain_uid\u0026gt; domainHome: /u01/oracle/user_projects/domains/\u0026lt;domain_uid\u0026gt; image: \u0026lt;image_name\u0026gt;:\u0026lt;tag\u0026gt; imagePullSecretName: \u0026lt;container_registry_secret\u0026gt; weblogicCredentialsSecretName: \u0026lt;kubernetes_domain_secret\u0026gt; logHome: /u01/oracle/user_projects/domains/logs/\u0026lt;domain_uid\u0026gt; namespace: \u0026lt;domain_namespace\u0026gt; persistentVolumeClaimName: \u0026lt;pvc_name\u0026gt; rcuSchemaPrefix: \u0026lt;rcu_prefix\u0026gt; rcuDatabaseURL: \u0026lt;rcu_db_host\u0026gt;:\u0026lt;rcu_db_port\u0026gt;/\u0026lt;rcu_db_service_name\u0026gt; rcuCredentialsSecret: \u0026lt;kubernetes_rcu_secret\u0026gt; For example:\ndomainUID: accessdomain domainHome: /u01/oracle/user_projects/domains/accessdomain image: container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October\u0026#39;24\u0026gt; imagePullSecretName: orclcred weblogicCredentialsSecretName: accessdomain-credentials logHome: /u01/oracle/user_projects/domains/logs/accessdomain namespace: oamns persistentVolumeClaimName: accessdomain-domain-pvc rcuSchemaPrefix: OAMK8S rcuDatabaseURL: mydatabasehost.example.com:1521/orcl.example.com rcuCredentialsSecret: accessdomain-rcu-credentials   A full list of parameters in the create-domain-inputs.yaml file are shown below:\n   Parameter Definition Default     adminPort Port number for the Administration Server inside the Kubernetes cluster. 7001   adminNodePort Port number of the Administration Server outside the Kubernetes cluster. 30701   adminServerName Name of the Administration Server. AdminServer   clusterName Name of the WebLogic cluster instance to generate for the domain. By default the cluster name is oam_cluster for the OAM domain. oam_cluster   configuredManagedServerCount Number of Managed Server instances to generate for the domain. 5   createDomainFilesDir Directory on the host machine to locate all the files to create a WebLogic domain, including the script that is specified in the createDomainScriptName property. By default, this directory is set to the relative path wlst, and the create script will use the built-in WLST offline scripts in the wlst directory to create the WebLogic domain. It can also be set to the relative path wdt, and then the built-in WDT scripts will be used instead. An absolute path is also supported to point to an arbitrary directory in the file system. The built-in scripts can be replaced by the user-provided scripts or model files as long as those files are in the specified directory. Files in this directory are put into a Kubernetes config map, which in turn is mounted to the createDomainScriptsMountPath, so that the Kubernetes pod can use the scripts and supporting files to create a domain home. wlst   createDomainScriptsMountPath Mount path where the create domain scripts are located inside a pod. The create-domain.sh script creates a Kubernetes job to run the script (specified in the createDomainScriptName property) in a Kubernetes pod to create a domain home. Files in the createDomainFilesDir directory are mounted to this location in the pod, so that the Kubernetes pod can use the scripts and supporting files to create a domain home. /u01/weblogic   createDomainScriptName Script that the create domain script uses to create a WebLogic domain. The create-domain.sh script creates a Kubernetes job to run this script to create a domain home. The script is located in the in-pod directory that is specified in the createDomainScriptsMountPath property. If you need to provide your own scripts to create the domain home, instead of using the built-it scripts, you must use this property to set the name of the script that you want the create domain job to run. create-domain-job.sh   domainHome Home directory of the OAM domain. If not specified, the value is derived from the domainUID as /shared/domains/\u0026lt;domainUID\u0026gt;. /u01/oracle/user_projects/domains/accessdomain   domainPVMountPath Mount path of the domain persistent volume. /u01/oracle/user_projects/domains   domainUID Unique ID that will be used to identify this particular domain. Used as the name of the generated WebLogic domain as well as the name of the Kubernetes domain resource. This ID must be unique across all domains in a Kubernetes cluster. This ID cannot contain any character that is not valid in a Kubernetes service name. accessdomain   domainType Type of the domain. Mandatory input for OAM domains. You must provide one of the supported domain type value: oam (deploys an OAM domain) oam   exposeAdminNodePort Boolean indicating if the Administration Server is exposed outside of the Kubernetes cluster. false   exposeAdminT3Channel Boolean indicating if the T3 administrative channel is exposed outside the Kubernetes cluster. true   image OAM container image. The operator requires OAM 12.2.1.4. Refer to Obtain the OAM container image for details on how to obtain or create the image. oracle/oam:12.2.1.4.0   imagePullPolicy WebLogic container image pull policy. Legal values are IfNotPresent, Always, or Never IfNotPresent   imagePullSecretName Name of the Kubernetes secret to access the container registry to pull the OAM container image. The presence of the secret will be validated when this parameter is specified.    includeServerOutInPodLog Boolean indicating whether to include the server .out to the pod\u0026rsquo;s stdout. true   initialManagedServerReplicas Number of Managed Servers to initially start for the domain. 2   javaOptions Java options for starting the Administration Server and Managed Servers. A Java option can have references to one or more of the following pre-defined variables to obtain WebLogic domain information: $(DOMAIN_NAME), $(DOMAIN_HOME), $(ADMIN_NAME), $(ADMIN_PORT), and $(SERVER_NAME). -Dweblogic.StdoutDebugEnabled=false   logHome The in-pod location for the domain log, server logs, server out, and Node Manager log files. If not specified, the value is derived from the domainUID as /shared/logs/\u0026lt;domainUID\u0026gt;. /u01/oracle/user_projects/domains/logs/accessdomain   managedServerNameBase Base string used to generate Managed Server names. oam_server   managedServerPort Port number for each Managed Server. 8001   namespace Kubernetes namespace in which to create the domain. oamns   persistentVolumeClaimName Name of the persistent volume claim created to host the domain home. If not specified, the value is derived from the domainUID as \u0026lt;domainUID\u0026gt;-weblogic-sample-pvc. accessdomain-domain-pvc   productionModeEnabled Boolean indicating if production mode is enabled for the domain. true   serverStartPolicy Determines which WebLogic Server instances will be started. Legal values are Never, IfNeeded, AdminOnly. IfNeeded   t3ChannelPort Port for the T3 channel of the NetworkAccessPoint. 30012   t3PublicAddress Public address for the T3 channel. This should be set to the public address of the Kubernetes cluster. This would typically be a load balancer address. For development environments only: In a single server (all-in-one) Kubernetes deployment, this may be set to the address of the master, or at the very least, it must be set to the address of one of the worker nodes. If not provided, the script will attempt to set it to the IP address of the Kubernetes cluster   weblogicCredentialsSecretName Name of the Kubernetes secret for the Administration Server\u0026rsquo;s user name and password. If not specified, then the value is derived from the domainUID as \u0026lt;domainUID\u0026gt;-weblogic-credentials. accessdomain-domain-credentials   weblogicImagePullSecretName Name of the Kubernetes secret for the container registry, used to pull the WebLogic Server image.    serverPodCpuRequest, serverPodMemoryRequest, serverPodCpuCLimit, serverPodMemoryLimit The maximum amount of compute resources allowed, and minimum amount of compute resources required, for each server pod. Please refer to the Kubernetes documentation on Managing Compute Resources for Containers for details. Resource requests and resource limits are not specified.   rcuSchemaPrefix The schema prefix to use in the database, for example OAM1. You may wish to make this the same as the domainUID in order to simplify matching domains to their RCU schemas. OAM1   rcuDatabaseURL The database URL. oracle-db.default.svc.cluster.local:1521/devpdb.k8s   rcuCredentialsSecret The Kubernetes secret containing the database credentials. accessdomain-rcu-credentials   datasourceType Type of JDBC datasource applicable for the OAM domain. Legal values are agl and generic. Choose agl for Active GridLink datasource and generic for Generic datasource. For enterprise deployments, Oracle recommends that you use GridLink data sources to connect to Oracle RAC databases. See the Enterprise Deployment Guide for further details. generic    Note that the names of the Kubernetes resources in the generated YAML files may be formed with the value of some of the properties specified in the create-inputs.yaml file. Those properties include the adminServerName, clusterName and managedServerNameBase. If those values contain any characters that are invalid in a Kubernetes service name, those characters are converted to valid values in the generated YAML files. For example, an uppercase letter is converted to a lowercase letter and an underscore (\u0026quot;_\u0026quot;) is converted to a hyphen (\u0026quot;-\u0026quot;).\nThe sample demonstrates how to create an OAM domain home and associated Kubernetes resources for a domain that has one cluster only. In addition, the sample provides the capability for users to supply their own scripts to create the domain home for other use cases. The generated domain YAML file could also be modified to cover more use cases.\nRun the create domain script   Run the create domain script, specifying your inputs file and an output directory to store the generated artifacts:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv $ ./create-domain.sh -i create-domain-inputs.yaml -o /\u0026lt;path to output-directory\u0026gt; For example:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv $ ./create-domain.sh -i create-domain-inputs.yaml -o output The output will look similar to the following:\nInput parameters being used export version=\u0026quot;create-weblogic-sample-domain-inputs-v1\u0026quot; export adminPort=\u0026quot;7001\u0026quot; export adminServerName=\u0026quot;AdminServer\u0026quot; export domainUID=\u0026quot;accessdomain\u0026quot; export domainType=\u0026quot;oam\u0026quot; export domainHome=\u0026quot;/u01/oracle/user_projects/domains/accessdomain\u0026quot; export serverStartPolicy=\u0026quot;IfNeeded\u0026quot; export clusterName=\u0026quot;oam_cluster\u0026quot; export configuredManagedServerCount=\u0026quot;5\u0026quot; export initialManagedServerReplicas=\u0026quot;2\u0026quot; export managedServerNameBase=\u0026quot;oam_server\u0026quot; export managedServerPort=\u0026quot;14100\u0026quot; export image=\u0026quot;container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October'24\u0026gt;\u0026quot; export imagePullPolicy=\u0026quot;IfNotPresent\u0026quot; export imagePullSecretName=\u0026quot;orclcred\u0026quot; export productionModeEnabled=\u0026quot;true\u0026quot; export weblogicCredentialsSecretName=\u0026quot;accessdomain-credentials\u0026quot; export includeServerOutInPodLog=\u0026quot;true\u0026quot; export logHome=\u0026quot;/u01/oracle/user_projects/domains/logs/accessdomain\u0026quot; export httpAccessLogInLogHome=\u0026quot;true\u0026quot; export t3ChannelPort=\u0026quot;30012\u0026quot; export exposeAdminT3Channel=\u0026quot;false\u0026quot; export adminNodePort=\u0026quot;30701\u0026quot; export exposeAdminNodePort=\u0026quot;false\u0026quot; export namespace=\u0026quot;oamns\u0026quot; javaOptions=-Dweblogic.StdoutDebugEnabled=false export persistentVolumeClaimName=\u0026quot;accessdomain-domain-pvc\u0026quot; export domainPVMountPath=\u0026quot;/u01/oracle/user_projects/domains\u0026quot; export createDomainScriptsMountPath=\u0026quot;/u01/weblogic\u0026quot; export createDomainScriptName=\u0026quot;create-domain-job.sh\u0026quot; export createDomainFilesDir=\u0026quot;wlst\u0026quot; export rcuSchemaPrefix=\u0026quot;OAMK8S\u0026quot; export rcuDatabaseURL=\u0026quot;mydatabasehost.example.com:1521/orcl.example.com\u0026quot; export rcuCredentialsSecret=\u0026quot;accessdomain-rcu-credentials\u0026quot; export datasourceType=\u0026quot;generic\u0026quot; validateWlsDomainName called with accessdomain createFiles - valuesInputFile is create-domain-inputs.yaml createDomainScriptName is create-domain-job.sh Generating output/weblogic-domains/accessdomain/create-domain-job.yaml Generating output/weblogic-domains/accessdomain/delete-domain-job.yaml Generating output/weblogic-domains/accessdomain/domain.yaml Checking to see if the secret accessdomain-credentials exists in namespace oamns configmap/accessdomain-create-oam-infra-domain-job-cm created Checking the configmap accessdomain-create-oam-infra-domain-job-cm was created configmap/accessdomain-create-oam-infra-domain-job-cm labeled Checking if object type job with name accessdomain-create-oam-infra-domain-job exists No resources found in oamns namespace. Creating the domain by creating the job output/weblogic-domains/accessdomain/create-domain-job.yaml job.batch/accessdomain-create-oam-infra-domain-job created Waiting for the job to complete... status on iteration 1 of 20 pod accessdomain-create-oam-infra-domain-job-6tgw4 status is Running status on iteration 2 of 20 pod accessdomain-create-oam-infra-domain-job-6tgw4 status is Running status on iteration 3 of 20 pod accessdomain-create-oam-infra-domain-job-6tgw4 status is Running status on iteration 4 of 20 pod accessdomain-create-oam-infra-domain-job-6tgw4 status is Running status on iteration 5 of 20 pod accessdomain-create-oam-infra-domain-job-6tgw4 status is Running status on iteration 6 of 20 pod accessdomain-create-oam-infra-domain-job-6tgw4 status is Completed Domain accessdomain was created and will be started by the WebLogic Kubernetes Operator The following files were generated: output/weblogic-domains/accessdomain/create-domain-inputs.yaml output/weblogic-domains/accessdomain/create-domain-job.yaml output/weblogic-domains/accessdomain/domain.yaml Note: If the domain creation fails, refer to the Troubleshooting section.\nThe command creates a domain.yaml file required for domain creation.\n  Set the OAM server memory parameters By default, the java memory parameters assigned to the oam_server cluster are very small. The minimum recommended values are -Xms4096m -Xmx8192m. However, Oracle recommends you to set these to -Xms8192m -Xmx8192m in a production environment.\n  Navigate to the /output/weblogic-domains/\u0026lt;domain_uid\u0026gt; directory:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/output/weblogic-domains/\u0026lt;domain_uid\u0026gt; For example:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/output/weblogic-domains/accessdomain   Edit the domain.yaml file and inside name: accessdomain-oam-cluster, add the memory setting as below:\n serverPod: env: - name: USER_MEM_ARGS value: \u0026quot;-XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m\u0026quot; resources: limits: cpu: \u0026quot;2\u0026quot; memory: \u0026quot;8Gi\u0026quot; requests: cpu: \u0026quot;1000m\u0026quot; memory: \u0026quot;4Gi\u0026quot; For example:\napiVersion: weblogic.oracle/v1 kind: Cluster metadata: name: accessdomain-oam-cluster namespace: oamns spec: clusterName: oam_cluster serverService: precreateService: true serverPod: env: - name: USER_MEM_ARGS value: \u0026quot;-XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m\u0026quot; resources: limits: cpu: \u0026quot;2\u0026quot; memory: \u0026quot;8Gi\u0026quot; requests: cpu: \u0026quot;1000m\u0026quot; memory: \u0026quot;4Gi\u0026quot; replicas: 1 Note: The above CPU and memory values are for examples only. For Enterprise Deployments, please review the performance recommendations and sizing requirements in Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster.\nNote: Limits and requests for CPU resources are measured in CPU units. One CPU in Kubernetes is equivalent to 1 vCPU/Core for cloud providers, and 1 hyperthread on bare-metal Intel processors. An \u0026ldquo;m\u0026rdquo; suffix in a CPU attribute indicates ‘milli-CPU’, so 500m is 50% of a CPU. Memory can be expressed in various units, where one Mi is one IEC unit mega-byte (1024^2), and one Gi is one IEC unit giga-byte (1024^3). For more information, see Resource Management for Pods and Containers, Assign Memory Resources to Containers and Pods, and Assign CPU Resources to Containers and Pods.\nNote: The parameters above are also utilized by the Kubernetes Horizontal Pod Autoscaler (HPA). For more details on HPA, see Kubernetes Horizontal Pod Autoscaler.\nNote: If required you can also set the same resources and limits for the accessdomain-policy-cluster.\n  In the domain.yaml locate the section of the file starting with adminServer:. Under the env: tag add the following CLASSPATH entries. This is required for running the idmconfigtool from the Administration Server.\n- name: CLASSPATH value: \u0026quot;/u01/oracle/wlserver/server/lib/weblogic.jar\u0026quot; For example:\n# adminServer is used to configure the desired behavior for starting the administration server. adminServer: # adminService: # channels: # The Admin Server's NodePort # - channelName: default # nodePort: 30701 # Uncomment to export the T3Channel as a service # - channelName: T3Channel serverPod: # an (optional) list of environment variable to be set on the admin servers env: - name: USER_MEM_ARGS value: \u0026quot;-Djava.security.egd=file:/dev/./urandom -Xms512m -Xmx1024m \u0026quot; - name: CLASSPATH value: \u0026quot;/u01/oracle/wlserver/server/lib/weblogic.jar\u0026quot;   If required, you can add the optional parameter maxClusterConcurrentStartup to the spec section of the domain.yaml. This parameter specifies the number of managed servers to be started in sequence per cluster. For example if you updated the initialManagedServerReplicas to 4 in create-domain-inputs.yaml and only had 2 nodes, then setting maxClusterConcurrentStartup: 1 will start one managed server at a time on each node, rather than starting them all at once. This can be useful to take the strain off individual nodes at startup. Below is an example with the parameter added:\napiVersion: \u0026quot;weblogic.oracle/v9\u0026quot; kind: Domain metadata: name: accessdomain namespace: oamns labels: weblogic.domainUID: accessdomain spec: # The WebLogic Domain Home domainHome: /u01/oracle/user_projects/domains/accessdomain maxClusterConcurrentStartup: 1 # The domain home source type # Set to PersistentVolume for domain-in-pv, Image for domain-in-image, or FromModel for model-in-image domainHomeSourceType: PersistentVolume ....   Save the changes to domain.yaml\n  Initializing the domain   Create the Kubernetes resource using the following command:\n$ kubectl apply -f $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/output/weblogic-domains/\u0026lt;domain_uid\u0026gt;/domain.yaml For example:\n$ kubectl apply -f $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/output/weblogic-domains/accessdomain/domain.yaml The output will look similar to the following:\ndomain.weblogic.oracle/accessdomain created cluster.weblogic.oracle/accessdomain-oam-cluster created cluster.weblogic.oracle/accessdomain-policy-cluster created   Verify the results Verify the domain, pods and services   Verify the domain, servers pods and services are created and in the READY state with a status of 1/1, by running the following command:\n$ kubectl get all,domains -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get all,domains -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE pod/accessdomain-adminserver 1/1 Running 0 11m pod/accessdomain-create-oam-infra-domain-job-7c9r9 0/1 Completed 0 18m pod/accessdomain-oam-policy-mgr1 1/1 Running 0 3m31s pod/accessdomain-oam-server1 1/1 Running 0 3m31s pod/helper 1/1 Running 0 33m NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/accessdomain-adminserver ClusterIP None \u0026lt;none\u0026gt; 7001/TCP 11m service/accessdomain-cluster-oam-cluster ClusterIP 10.101.59.154 \u0026lt;none\u0026gt; 14100/TCP 3m31s service/accessdomain-cluster-policy-cluster ClusterIP 10.98.236.51 \u0026lt;none\u0026gt; 15100/TCP 3m31s service/accessdomain-oam-policy-mgr1 ClusterIP None \u0026lt;none\u0026gt; 15100/TCP 3m31s service/accessdomain-oam-policy-mgr2 ClusterIP 10.104.92.12 \u0026lt;none\u0026gt; 15100/TCP 3m31s service/accessdomain-oam-policy-mgr3 ClusterIP 10.96.244.37 \u0026lt;none\u0026gt; 15100/TCP 3m31s service/accessdomain-oam-policy-mgr4 ClusterIP 10.105.201.23 \u0026lt;none\u0026gt; 15100/TCP 3m31s service/accessdomain-oam-policy-mgr5 ClusterIP 10.110.12.227 \u0026lt;none\u0026gt; 15100/TCP 3m31s service/accessdomain-oam-server1 ClusterIP None \u0026lt;none\u0026gt; 14100/TCP 3m31s service/accessdomain-oam-server2 ClusterIP 10.96.137.33 \u0026lt;none\u0026gt; 14100/TCP 3m31s service/accessdomain-oam-server3 ClusterIP 10.103.178.35 \u0026lt;none\u0026gt; 14100/TCP 3m31s service/accessdomain-oam-server4 ClusterIP 10.97.254.78 \u0026lt;none\u0026gt; 14100/TCP 3m31s service/accessdomain-oam-server5 ClusterIP 10.105.65.104 \u0026lt;none\u0026gt; 14100/TCP 3m31s NAME COMPLETIONS DURATION AGE job.batch/accessdomain-create-oam-infra-domain-job 1/1 2m6s 18m NAME AGE domain.weblogic.oracle/accessdomain 12m NAME AGE cluster.weblogic.oracle/accessdomain-oam-cluster 11m cluster.weblogic.oracle/accessdomain-policy-cluster 11m Note: It will take several minutes before all the services listed above show. When a pod has a STATUS of 0/1 the pod is started but the OAM server associated with it is currently starting. While the pods are starting you can check the startup status in the pod logs, by running the following command:\n$ kubectl logs accessdomain-adminserver -n oamns $ kubectl logs accessdomain-oam-policy-mgr1 -n oamns $ kubectl logs accessdomain-oam-server1 -n oamns etc.. The default domain created by the script has the following characteristics:\n An Administration Server named AdminServer listening on port 7001. A configured OAM cluster named oam_cluster of size 5. A configured Policy Manager cluster named policy_cluster of size 5. One started OAM Managed Server, named oam_server1, listening on port 14100. One started Policy Manager Managed Servers named oam-policy-mgr1, listening on port 15100. Log files that are located in \u0026lt;persistent_volume\u0026gt;/logs/\u0026lt;domainUID\u0026gt;.    Verify the domain   Run the following command to describe the domain:\n$ kubectl describe domain \u0026lt;domain_uid\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl describe domain accessdomain -n oamns The output will look similar to the following:\nName: accessdomain Namespace: oamns Labels: weblogic.domainUID=accessdomain Annotations: \u0026lt;none\u0026gt; API Version: weblogic.oracle/v9 Kind: Domain Metadata: Creation Timestamp: \u0026lt;DATE\u0026gt; Generation: 1 Managed Fields: API Version: weblogic.oracle/v9 Fields Type: FieldsV1 fieldsV1: f:metadata: f:annotations: .: f:kubectl.kubernetes.io/last-applied-configuration: f:labels: .: f:weblogic.domainUID: f:spec: .: f:adminServer: .: f:adminChannelPortForwardingEnabled: f:serverPod: .: f:env: f:serverStartPolicy: f:clusters: f:dataHome: f:domainHome: f:domainHomeSourceType: f:failureRetryIntervalSeconds: f:failureRetryLimitMinutes: f:httpAccessLogInLogHome: f:image: f:imagePullPolicy: f:imagePullSecrets: f:includeServerOutInPodLog: f:logHome: f:logHomeEnabled: f:logHomeLayout: f:maxClusterConcurrentShutdown: f:maxClusterConcurrentStartup: f:maxClusterUnavailable: f:replicas: f:serverPod: .: f:env: f:volumeMounts: f:volumes: f:serverStartPolicy: f:webLogicCredentialsSecret: .: f:name: Manager: kubectl-client-side-apply Operation: Update Time: \u0026lt;DATE\u0026gt; API Version: weblogic.oracle/v9 Fields Type: FieldsV1 fieldsV1: f:status: .: f:clusters: f:conditions: f:observedGeneration: f:servers: f:startTime: Manager: Kubernetes Java Client Operation: Update Subresource: status Time: \u0026lt;DATE\u0026gt; Resource Version: 2074089 UID: e194d483-7383-4359-adb9-bf97de36518b Spec: Admin Server: Admin Channel Port Forwarding Enabled: true Server Pod: Env: Name: USER_MEM_ARGS Value: -Djava.security.egd=file:/dev/./urandom -Xms512m -Xmx1024m Name: CLASSPATH Value: /u01/oracle/wlserver/server/lib/weblogic.jar Server Start Policy: IfNeeded Clusters: Name: accessdomain-oam-cluster Name: accessdomain-policy-cluster Data Home: Domain Home: /u01/oracle/user_projects/domains/accessdomain Domain Home Source Type: PersistentVolume Failure Retry Interval Seconds: 120 Failure Retry Limit Minutes: 1440 Http Access Log In Log Home: true Image: container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October'24\u0026gt; Image Pull Policy: IfNotPresent Image Pull Secrets: Name: orclcred Include Server Out In Pod Log: true Log Home: /u01/oracle/user_projects/domains/logs/accessdomain Log Home Enabled: true Log Home Layout: ByServers Max Cluster Concurrent Shutdown: 1 Max Cluster Concurrent Startup: 0 Max Cluster Unavailable: 1 Replicas: 1 Server Pod: Env: Name: JAVA_OPTIONS Value: -Dweblogic.StdoutDebugEnabled=false Name: USER_MEM_ARGS Value: -Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx1024m Volume Mounts: Mount Path: /u01/oracle/user_projects/domains Name: weblogic-domain-storage-volume Volumes: Name: weblogic-domain-storage-volume Persistent Volume Claim: Claim Name: accessdomain-domain-pvc Server Start Policy: IfNeeded Web Logic Credentials Secret: Name: accessdomain-credentials Status: Clusters: Cluster Name: oam_cluster Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Label Selector: weblogic.domainUID=accessdomain,weblogic.clusterName=oam_cluster Maximum Replicas: 5 Minimum Replicas: 0 Observed Generation: 1 Ready Replicas: 1 Replicas: 1 Replicas Goal: 1 Cluster Name: policy_cluster Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Label Selector: weblogic.domainUID=accessdomain,weblogic.clusterName=policy_cluster Maximum Replicas: 5 Minimum Replicas: 0 Observed Generation: 1 Ready Replicas: 1 Replicas: 1 Replicas Goal: 1 Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Observed Generation: 1 Servers: Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: worker-node2 Pod Phase: Running Pod Ready: True Server Name: AdminServer State: RUNNING State Goal: RUNNING Cluster Name: oam_cluster Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: worker-node1 Pod Phase: Running Pod Ready: True Server Name: oam_server1 State: RUNNING State Goal: RUNNING Cluster Name: oam_cluster Server Name: oam_server2 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oam_cluster Server Name: oam_server3 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oam_cluster Server Name: oam_server4 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oam_cluster Server Name: oam_server5 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: policy_cluster Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: worker-node1 Pod Phase: Running Pod Ready: True Server Name: oam_policy_mgr1 State: RUNNING State Goal: RUNNING Cluster Name: policy_cluster Server Name: oam_policy_mgr2 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: policy_cluster Server Name: oam_policy_mgr3 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: policy_cluster Server Name: oam_policy_mgr4 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: policy_cluster Server Name: oam_policy_mgr5 State: SHUTDOWN State Goal: SHUTDOWN Start Time: \u0026lt;DATE\u0026gt; Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Created 15m weblogic.operator Domain accessdomain was created. Normal Available 2m56s weblogic.operator Domain accessdomain is available: a sufficient number of its servers have reached the ready state. Normal Completed 2m56s weblogic.operator Domain accessdomain is complete because all of the following are true: there is no failure detected, there are no pending server shutdowns, and all servers expected to be running are ready and at their target image, auxiliary images, restart version, and introspect version. In the Status section of the output, the available servers and clusters are listed.\n  Verify the pods   Run the following command to see the pods running the servers and which nodes they are running on:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; -o wide For example:\n$ kubectl get pods -n oamns -o wide The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES accessdomain-adminserver 1/1 Running 0 18m 10.244.6.63 10.250.42.252 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; accessdomain-create-oam-infra-domain-job-7c9r9 0/1 Completed 0 25m 10.244.6.61 10.250.42.252 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; accessdomain-oam-policy-mgr1 1/1 Running 0 10m 10.244.5.13 10.250.42.255 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; accessdomain-oam-server1 1/1 Running 0 10m 10.244.5.12 10.250.42.255 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; helper 1/1 Running 0 40m 10.244.6.60 10.250.42.252 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; You are now ready to configure an Ingress to direct traffic for your OAM domain as per Configure an Ingress for an OAM domain.\n  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/create-oig-domains/create-oig-domains-using-wlst/",
	"title": "a. Create OIG domains using WLST scripts",
	"tags": [],
	"description": "",
	"content": "  Introduction\n  Prerequisites\n  Prepare the create domain script\n  Run the create domain script\na. Generate the create domain script\nb. Setting the OIM server memory parameters\nc. Run the create domain scripts\n  Verify the results\na. Verify the domain, pods and services\nb. Verify the domain\nc. Verify the pods\n  Introduction The OIG deployment scripts demonstrate the creation of an OIG domain home on an existing Kubernetes persistent volume (PV) and persistent volume claim (PVC). The scripts also generate the domain YAML file, which can then be used to start the Kubernetes artifacts of the corresponding domain.\nNote: If you want to create the OIG domain using WDT models, skip the steps below and go to Create OIG Domains Using WDT Models.\nPrerequisites Before you begin, perform the following steps:\n Review the Domain resource documentation. Ensure that you have executed all the preliminary steps documented in Prepare your environment. Ensure that the database is up and running.  Prepare the create domain script The sample scripts for Oracle Identity Governance domain deployment are available at $WORKDIR/kubernetes/create-oim-domain.\n  Make a copy of the create-domain-inputs.yaml file:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv $ cp create-domain-inputs.yaml create-domain-inputs.yaml.orig   Edit the create-domain-inputs.yaml and modify the following parameters. Save the file when complete:\nNote: Do not edit any other parameters other than ones mentioned below.\ndomainUID: \u0026lt;domain_uid\u0026gt; domainHome: /u01/oracle/user_projects/domains/\u0026lt;domain_uid\u0026gt; image: \u0026lt;image_name\u0026gt; imagePullSecretName: \u0026lt;container_registry_secret\u0026gt; weblogicCredentialsSecretName: \u0026lt;kubernetes_domain_secret\u0026gt; logHome: /u01/oracle/user_projects/domains/logs/\u0026lt;domain_id\u0026gt; namespace: \u0026lt;domain_namespace\u0026gt; persistentVolumeClaimName: \u0026lt;pvc_name\u0026gt; rcuSchemaPrefix: \u0026lt;rcu_prefix\u0026gt; rcuDatabaseURL: \u0026lt;rcu_db_host\u0026gt;:\u0026lt;rcu_db_port\u0026gt;/\u0026lt;rcu_db_service_name\u0026gt; rcuCredentialsSecret: \u0026lt;kubernetes_rcu_secret\u0026gt; frontEndHost: \u0026lt;front_end_hostname\u0026gt; frontEndPort: \u0026lt;front_end_port\u0026gt; For example:\ndomainUID: governancedomain domainHome: /u01/oracle/user_projects/domains/governancedomain image: container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October'24\u0026gt; imagePullSecretName: orclcred weblogicCredentialsSecretName: oig-domain-credentials logHome: /u01/oracle/user_projects/domains/logs/governancedomain namespace: oigns persistentVolumeClaimName: governancedomain-domain-pvc rcuSchemaPrefix: OIGK8S rcuDatabaseURL: mydatabasehost.example.com:1521/orcl.example.com rcuCredentialsSecret: oig-rcu-credentials frontEndHost: example.com frontEndPort: 14100 Note: For now frontEndHost and front_end_port should be set to example.com and 14100 respectively. These values will be changed to the correct values in post installation tasks in Set OIMFrontendURL using MBeans.\n  A full list of parameters in the create-domain-inputs.yaml file are shown below:\n   Parameter Definition Default     adminPort Port number for the Administration Server inside the Kubernetes cluster. 7001   adminNodePort Port number of the Administration Server outside the Kubernetes cluster. 30701   adminServerName Name of the Administration Server. AdminServer   clusterName Name of the WebLogic cluster instance to generate for the domain. By default the cluster name is oimcluster for the OIG domain. oimcluster   configuredManagedServerCount Number of Managed Server instances to generate for the domain. 5   createDomainFilesDir Directory on the host machine to locate all the files to create a WebLogic domain, including the script that is specified in the createDomainScriptName property. By default, this directory is set to the relative path wlst, and the create script will use the built-in WLST offline scripts in the wlst directory to create the WebLogic domain. It can also be set to the relative path wdt, and then the built-in WDT scripts will be used instead. An absolute path is also supported to point to an arbitrary directory in the file system. The built-in scripts can be replaced by the user-provided scripts or model files as long as those files are in the specified directory. Files in this directory are put into a Kubernetes config map, which in turn is mounted to the createDomainScriptsMountPath, so that the Kubernetes pod can use the scripts and supporting files to create a domain home. wlst   createDomainScriptsMountPath Mount path where the create domain scripts are located inside a pod. The create-domain.sh script creates a Kubernetes job to run the script (specified in the createDomainScriptName property) in a Kubernetes pod to create a domain home. Files in the createDomainFilesDir directory are mounted to this location in the pod, so that the Kubernetes pod can use the scripts and supporting files to create a domain home. /u01/weblogic   createDomainScriptName Script that the create domain script uses to create a WebLogic domain. The create-domain.sh script creates a Kubernetes job to run this script to create a domain home. The script is located in the in-pod directory that is specified in the createDomainScriptsMountPath property. If you need to provide your own scripts to create the domain home, instead of using the built-it scripts, you must use this property to set the name of the script that you want the create domain job to run. create-domain-job.sh   domainHome Home directory of the OIG domain. If not specified, the value is derived from the domainUID as /shared/domains/\u0026lt;domainUID\u0026gt;. /u01/oracle/user_projects/domains/oimcluster   domainPVMountPath Mount path of the domain persistent volume. /u01/oracle/user_projects/domains   domainUID Unique ID that will be used to identify this particular domain. Used as the name of the generated WebLogic domain as well as the name of the Kubernetes domain resource. This ID must be unique across all domains in a Kubernetes cluster. This ID cannot contain any character that is not valid in a Kubernetes service name. oimcluster   exposeAdminNodePort Boolean indicating if the Administration Server is exposed outside of the Kubernetes cluster. false   exposeAdminT3Channel Boolean indicating if the T3 administrative channel is exposed outside the Kubernetes cluster. true   image OIG container image. The operator requires OIG 12.2.1.4. Refer to OIG domains for details on how to obtain or create the image. oracle/oig:12.2.1.4.0   imagePullPolicy WebLogic container image pull policy. Legal values are IfNotPresent, Always, or Never IfNotPresent   imagePullSecretName Name of the Kubernetes secret to access the container registry to pull the OIG container image. The presence of the secret will be validated when this parameter is specified.    includeServerOutInPodLog Boolean indicating whether to include the server .out to the pod\u0026rsquo;s stdout. true   initialManagedServerReplicas Number of Managed Servers to initially start for the domain. 2   javaOptions Java options for starting the Administration Server and Managed Servers. A Java option can have references to one or more of the following pre-defined variables to obtain WebLogic domain information: $(DOMAIN_NAME), $(DOMAIN_HOME), $(ADMIN_NAME), $(ADMIN_PORT), and $(SERVER_NAME). -Dweblogic.StdoutDebugEnabled=false   logHome The in-pod location for the domain log, server logs, server out, and Node Manager log files. If not specified, the value is derived from the domainUID as /shared/logs/\u0026lt;domainUID\u0026gt;. /u01/oracle/user_projects/domains/logs/oimcluster   managedServerNameBase Base string used to generate Managed Server names. oim_server   managedServerPort Port number for each Managed Server. 8001   namespace Kubernetes namespace in which to create the domain. oimcluster   persistentVolumeClaimName Name of the persistent volume claim created to host the domain home. If not specified, the value is derived from the domainUID as \u0026lt;domainUID\u0026gt;-weblogic-sample-pvc. oimcluster-domain-pvc   productionModeEnabled Boolean indicating if production mode is enabled for the domain. true   serverStartPolicy Determines which WebLogic Server instances will be started. Legal values are Never, IfNeeded, AdminOnly. IfNeeded   t3ChannelPort Port for the T3 channel of the NetworkAccessPoint. 30012   t3PublicAddress Public address for the T3 channel. This should be set to the public address of the Kubernetes cluster. This would typically be a load balancer address. For development environments only: In a single server (all-in-one) Kubernetes deployment, this may be set to the address of the master, or at the very least, it must be set to the address of one of the worker nodes. If not provided, the script will attempt to set it to the IP address of the Kubernetes cluster   weblogicCredentialsSecretName Name of the Kubernetes secret for the Administration Server\u0026rsquo;s user name and password. If not specified, then the value is derived from the domainUID as \u0026lt;domainUID\u0026gt;-weblogic-credentials. oimcluster-domain-credentials   weblogicImagePullSecretName Name of the Kubernetes secret for the container registry, used to pull the WebLogic Server image.    serverPodCpuRequest, serverPodMemoryRequest, serverPodCpuCLimit, serverPodMemoryLimit The maximum amount of compute resources allowed, and minimum amount of compute resources required, for each server pod. Please refer to the Kubernetes documentation on Managing Compute Resources for Containers for details. Resource requests and resource limits are not specified.   rcuSchemaPrefix The schema prefix to use in the database, for example OIGK8S. You may wish to make this the same as the domainUID in order to simplify matching domains to their RCU schemas. Note: The RCU schema prefix can only contain alpha-numeric characters, and contain no spaces, or other special characters. It must begin with a letter and be no longer than 8 characters. OIGK8S   rcuDatabaseURL The database URL. oracle-db.default.svc.cluster.local:1521/devpdb.k8s   rcuCredentialsSecret The Kubernetes secret containing the database credentials. oimcluster-rcu-credentials   frontEndHost The entry point URL for the OIM. Not set   frontEndPort The entry point port for the OIM. Not set   datasourceType Type of JDBC datasource applicable for the OIG domain. Legal values are agl and generic. Choose agl for Active GridLink datasource and generic for Generic datasource. For enterprise deployments, Oracle recommends that you use GridLink data sources to connect to Oracle RAC databases. See the Enterprise Deployment Guide for further details. generic    Note that the names of the Kubernetes resources in the generated YAML files may be formed with the value of some of the properties specified in the create-inputs.yaml file. Those properties include the adminServerName, clusterName and managedServerNameBase. If those values contain any characters that are invalid in a Kubernetes service name, those characters are converted to valid values in the generated YAML files. For example, an uppercase letter is converted to a lowercase letter and an underscore (\u0026quot;_\u0026quot;) is converted to a hyphen (\u0026quot;-\u0026quot;).\nThe sample demonstrates how to create an OIG domain home and associated Kubernetes resources for a domain that has one cluster only. In addition, the sample provides the capability for users to supply their own scripts to create the domain home for other use cases. The generated domain YAML file could also be modified to cover more use cases.\nRun the create domain script Generate the create domain script   Run the create domain script, specifying your inputs file and an output directory to store the generated artifacts:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv $ mkdir output $ ./create-domain.sh -i create-domain-inputs.yaml -o /\u0026lt;path to output-directory\u0026gt; For example:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv $ mkdir output $ ./create-domain.sh -i create-domain-inputs.yaml -o output The output will look similar to the following:\nInput parameters being used export version=\u0026quot;create-weblogic-sample-domain-inputs-v1\u0026quot; export adminPort=\u0026quot;7001\u0026quot; export adminServerName=\u0026quot;AdminServer\u0026quot; export domainUID=\u0026quot;governancedomain\u0026quot; export domainHome=\u0026quot;/u01/oracle/user_projects/domains/governancedomain\u0026quot; export serverStartPolicy=\u0026quot;IfNeeded\u0026quot; export clusterName=\u0026quot;oim_cluster\u0026quot; export configuredManagedServerCount=\u0026quot;5\u0026quot; export initialManagedServerReplicas=\u0026quot;1\u0026quot; export managedServerNameBase=\u0026quot;oim_server\u0026quot; export managedServerPort=\u0026quot;14000\u0026quot; export image=\u0026quot;container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October'24\u0026gt;\u0026quot; export imagePullPolicy=\u0026quot;IfNotPresent\u0026quot; export imagePullSecretName=\u0026quot;orclcred\u0026quot; export productionModeEnabled=\u0026quot;true\u0026quot; export weblogicCredentialsSecretName=\u0026quot;oig-domain-credentials\u0026quot; export includeServerOutInPodLog=\u0026quot;true\u0026quot; export logHome=\u0026quot;/u01/oracle/user_projects/domains/logs/governancedomain\u0026quot; export t3ChannelPort=\u0026quot;30012\u0026quot; export exposeAdminT3Channel=\u0026quot;false\u0026quot; export adminNodePort=\u0026quot;30701\u0026quot; export exposeAdminNodePort=\u0026quot;false\u0026quot; export namespace=\u0026quot;oigns\u0026quot; javaOptions=-Dweblogic.StdoutDebugEnabled=false export persistentVolumeClaimName=\u0026quot;governancedomain-domain-pvc\u0026quot; export domainPVMountPath=\u0026quot;/u01/oracle/user_projects/domains\u0026quot; export createDomainScriptsMountPath=\u0026quot;/u01/weblogic\u0026quot; export createDomainScriptName=\u0026quot;create-domain-job.sh\u0026quot; export createDomainFilesDir=\u0026quot;wlst\u0026quot; export rcuSchemaPrefix=\u0026quot;OIGK8S\u0026quot; export rcuDatabaseURL=\u0026quot;mydatabasehost.example.com:1521/orcl.example.com\u0026quot; export rcuCredentialsSecret=\u0026quot;oig-rcu-credentials\u0026quot; export frontEndHost=\u0026quot;example.com\u0026quot; export frontEndPort=\u0026quot;14100\u0026quot; export datasourceType=\u0026quot;generic\u0026quot; validateWlsDomainName called with governancedomain createFiles - valuesInputFile is create-domain-inputs.yaml createDomainScriptName is create-domain-job.sh Generating output/weblogic-domains/governancedomain/create-domain-job.yaml Generating output/weblogic-domains/governancedomain/delete-domain-job.yaml Generating output/weblogic-domains/governancedomain/domain.yaml Checking to see if the secret governancedomain-domain-credentials exists in namespace oigns configmap/governancedomain-create-fmw-infra-sample-domain-job-cm created Checking the configmap governancedomain-create-fmw-infra-sample-domain-job-cm was created configmap/governancedomain-create-fmw-infra-sample-domain-job-cm labeled Checking if object type job with name governancedomain-create-fmw-infra-sample-domain-job exists No resources found in oigns namespace. Creating the domain by creating the job output/weblogic-domains/governancedomain/create-domain-job.yaml job.batch/governancedomain-create-fmw-infra-sample-domain-job created Waiting for the job to complete... status on iteration 1 of 40 pod governancedomain-create-fmw-infra-sample-domain-job-8cww8 status is Running status on iteration 2 of 40 pod governancedomain-create-fmw-infra-sample-domain-job-8cww8 status is Running status on iteration 3 of 40 pod governancedomain-create-fmw-infra-sample-domain-job-8cww8 status is Running status on iteration 4 of 40 pod governancedomain-create-fmw-infra-sample-domain-job-8cww8 status is Running status on iteration 5 of 40 pod governancedomain-create-fmw-infra-sample-domain-job-8cww8 status is Running status on iteration 6 of 40 pod governancedomain-create-fmw-infra-sample-domain-job-8cww8 status is Running status on iteration 7 of 40 pod governancedomain-create-fmw-infra-sample-domain-job-8cww8 status is Running status on iteration 8 of 40 pod governancedomain-create-fmw-infra-sample-domain-job-8cww8 status is Running status on iteration 9 of 40 pod governancedomain-create-fmw-infra-sample-domain-job-8cww8 status is Running status on iteration 10 of 40 pod governancedomain-create-fmw-infra-sample-domain-job-8cww8 status is Running status on iteration 11 of 40 pod governancedomain-create-fmw-infra-sample-domain-job-8cww8 status is Completed Domain governancedomain was created and will be started by the WebLogic Kubernetes Operator The following files were generated: output/weblogic-domains/governancedomain/create-domain-inputs.yaml output/weblogic-domains/governancedomain/create-domain-job.yaml output/weblogic-domains/governancedomain/domain.yaml sed Completed $ Note: If the create domain script creation fails, refer to the Troubleshooting section.\n  Setting the OIM server memory parameters   Navigate to the /output/weblogic-domains/\u0026lt;domain_uid\u0026gt; directory:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/output/weblogic-domains/\u0026lt;domain_uid\u0026gt; For example:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/output/weblogic-domains/governancedomain   Edit the domain.yaml and locate the section of the file starting with: - clusterName: oim_cluster under governancedomain-oim-cluster. Add the following lines:\nserverPod: env: - name: USER_MEM_ARGS value: \u0026quot;-Djava.security.egd=file:/dev/./urandom -Xms2408m -Xmx8192m resources: limits: cpu: \u0026quot;2\u0026quot; memory: \u0026quot;8Gi\u0026quot; requests: cpu: \u0026quot;1000m\u0026quot; memory: \u0026quot;4Gi\u0026quot;\tThe file should looks as follows:\n... apiVersion: weblogic.oracle/v1 kind: Cluster metadata: name: governancedomain-oim-cluster namespace: oigns spec: clusterName: oim_cluster serverService: precreateService: true replicas: 0 serverPod: env: - name: USER_MEM_ARGS value: \u0026quot;-XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m\u0026quot; resources: limits: cpu: \u0026quot;2\u0026quot; memory: \u0026quot;8Gi\u0026quot; requests: cpu: \u0026quot;1000m\u0026quot; memory: \u0026quot;4Gi\u0026quot; ... Note: The above CPU and memory values are for examples only. For Enterprise Deployments, please review the performance recommendations and sizing requirements in Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster.\nNote: Limits and requests for CPU resources are measured in CPU units. One CPU in Kubernetes is equivalent to 1 vCPU/Core for cloud providers, and 1 hyperthread on bare-metal Intel processors. An \u0026ldquo;m\u0026rdquo; suffix in a CPU attribute indicates ‘milli-CPU’, so 500m is 50% of a CPU. Memory can be expressed in various units, where one Mi is one IEC unit mega-byte (1024^2), and one Gi is one IEC unit giga-byte (1024^3). For more information, see Resource Management for Pods and Containers, Assign Memory Resources to Containers and Pods, and Assign CPU Resources to Containers and Pods.\nNote: The parameters above are also utilized by the Kubernetes Horizontal Pod Autoscaler (HPA). For more details on HPA, see Kubernetes Horizontal Pod Autoscaler.\nNote: If required you can also set the same resources and limits for the governancedomain-soa-cluster.\n  Run the create domain scripts   Create the Kubernetes resource using the following command:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/output/weblogic-domains/\u0026lt;domain_uid\u0026gt; $ kubectl apply -f domain.yaml For example:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/output/weblogic-domains/governancedomain $ kubectl apply -f domain.yaml The output will look similar to the following:\ndomain.weblogic.oracle/governancedomain unchanged cluster.weblogic.oracle/governancedomain-oim-cluster created cluster.weblogic.oracle/governancedomain-soa-cluster created   Run the following command to view the status of the OIG pods:\n$ kubectl get pods -n oigns The output will initially look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-create-fmw-infra-sample-domain-job-8cww8 0/1 Completed 0 27m governancedomain-introspect-domain-job-p4brt 1/1 Running 0 6s helper 1/1 Running 0 3h30m The introspect-domain-job pod will be displayed first. Run the command again after several minutes and check to see that the Administration Server and SOA Server are both started. When started they should have STATUS = Running and READY = 1/1.\nNAME READY STATUS RESTARTS AGE/ governancedomain-adminserver 1/1 Running 0 7m30s governancedomain-create-fmw-infra-sample-domain-job-8cww8 0/1 Completed 0 35m governancedomain-soa-server1 1/1 Running 0 4m helper 1/1 Running 0 3h38m Note: It will take several minutes before all the pods listed above show. When a pod has a STATUS of 0/1 the pod is started but the OIG server associated with it is currently starting. While the pods are starting you can check the startup status in the pod logs, by running the following command:\n$ kubectl logs governancedomain-adminserver -n oigns $ kubectl logs governancedomain-soa-server1 -n oigns   Check the clusters using the following command:\n$ kubectl get cluster -n oigns The output will look similar to the following:\nNAME AGE governancedomain-oim-cluster 9m governancedomain-soa-cluster 9m   Start the OIM server using the following command:\n$ kubectl patch cluster -n \u0026lt;namespace\u0026gt; \u0026lt;OIMClusterName\u0026gt; --type=merge -p '{\u0026quot;spec\u0026quot;:{\u0026quot;replicas\u0026quot;:\u0026lt;initialManagedServerReplicas\u0026gt;}}' For example:\n$ kubectl patch cluster -n oigns governancedomain-oim-cluster --type=merge -p '{\u0026quot;spec\u0026quot;:{\u0026quot;replicas\u0026quot;:1}}' The output will look similar to the following:\ncluster.weblogic.oracle/governancedomain-oim-cluster patched   Run the following command to view the status of the OIG pods:\n$ kubectl get pods -n oigns The output will initially look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 7m30s governancedomain-create-fmw-infra-sample-domain-job-8cww8 0/1 Completed 0 35m governancedomain-oim-server1 1/1 Running 0 4m25s governancedomain-soa-server1 1/1 Running 0 4m helper 1/1 Running 0 3h38m Note: It will take several minutes before the governancedomain-oim-server1 pod has a STATUS of 1/1. While the pod is starting you can check the startup status in the pod log, by running the following command:\n$ kubectl logs governancedomain-oim-server1 -n oigns   Verify the results Verify the domain, pods and services   Verify the domain, servers pods and services are created and in the READY state with a STATUS of 1/1, by running the following command:\n$ kubectl get all,domains -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get all,domains -n oigns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE pod/governancedomain-adminserver 1/1 Running 0 19m30s pod/governancedomain-create-fmw-infra-sample-domain-job-8cww8 0/1 Completed 0 47m pod/governancedomain-oim-server1 1/1 Running 0 16m25s pod/governancedomain-soa-server1 1/1 Running 0 16m pod/helper 1/1 Running 0 3h50m NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/governancedomain-adminserver ClusterIP None \u0026lt;none\u0026gt; 7001/TCP 28m service/governancedomain-cluster-oim-cluster ClusterIP 10.106.198.40 \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 25m service/governancedomain-cluster-soa-cluster ClusterIP 10.102.218.11 \u0026lt;none\u0026gt; 8001/TCP 25m service/governancedomain-oim-server1 ClusterIP None \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 16m24s service/governancedomain-oim-server2 ClusterIP 10.97.32.112 \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 25m service/governancedomain-oim-server3 ClusterIP 10.100.233.109 \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 25m service/governancedomain-oim-server4 ClusterIP 10.96.154.17 \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 25m service/governancedomain-oim-server5 ClusterIP 10.103.222.213 \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 25m service/governancedomain-soa-server1 ClusterIP None \u0026lt;none\u0026gt; 8001/TCP 25m service/governancedomain-soa-server2 ClusterIP 10.104.43.118 \u0026lt;none\u0026gt; 8001/TCP 25m service/governancedomain-soa-server3 ClusterIP 10.110.180.120 \u0026lt;none\u0026gt; 8001/TCP 25m service/governancedomain-soa-server4 ClusterIP 10.99.161.73 \u0026lt;none\u0026gt; 8001/TCP 25m service/governancedomain-soa-server5 ClusterIP 10.97.67.196 \u0026lt;none\u0026gt; 8001/TCP 25m NAME COMPLETIONS DURATION AGE job.batch/governancedomain-create-fmw-infra-sample-domain-job 1/1 3m6s 125m NAME AGE domain.weblogic.oracle/governancedomain 24m NAME AGE cluster.weblogic.oracle/governancedomain-oim-cluster 23m cluster.weblogic.oracle/governancedomain-soa-cluster 23m   The default domain created by the script has the following characteristics:\n An Administration Server named AdminServer listening on port 7001. A configured OIG cluster named oig_cluster of size 5. A configured SOA cluster named soa_cluster of size 5. One started OIG managed Server, named oim_server1, listening on port 14000. One started SOA managed Server, named soa_server1, listening on port 8001. Log files that are located in \u0026lt;persistent_volume\u0026gt;/logs/\u0026lt;domainUID\u0026gt;  Verify the domain   Run the following command to describe the domain:\n$ kubectl describe domain \u0026lt;domain_uid\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe domain governancedomain -n oigns The output will look similar to the following:\nName: governancedomain Namespace: oigns Labels: weblogic.domainUID=governancedomain Annotations: \u0026lt;none\u0026gt; API Version: weblogic.oracle/v9 Kind: Domain Metadata: Creation Timestamp: \u0026lt;DATE\u0026gt; Generation: 1 Managed Fields: API Version: weblogic.oracle/v9 Fields Type: FieldsV1 fieldsV1: f:metadata: f:annotations: .: f:kubectl.kubernetes.io/last-applied-configuration: f:labels: .: f:weblogic.domainUID: f:spec: .: f:adminServer: .: f:adminChannelPortForwardingEnabled: f:serverPod: .: f:env: f:serverStartPolicy: f:clusters: f:dataHome: f:domainHome: f:domainHomeSourceType: f:failureRetryIntervalSeconds: f:failureRetryLimitMinutes: f:httpAccessLogInLogHome: f:image: f:imagePullPolicy: f:imagePullSecrets: f:includeServerOutInPodLog: f:logHome: f:logHomeEnabled: f:logHomeLayout: f:maxClusterConcurrentShutdown: f:maxClusterConcurrentStartup: f:maxClusterUnavailable: f:replicas: f:serverPod: .: f:env: f:volumeMounts: f:volumes: f:serverStartPolicy: f:webLogicCredentialsSecret: .: f:name: Manager: kubectl-client-side-apply Operation: Update Time: \u0026lt;DATE\u0026gt; API Version: weblogic.oracle/v9 Fields Type: FieldsV1 fieldsV1: f:status: .: f:clusters: f:conditions: f:observedGeneration: f:servers: f:startTime: Manager: Kubernetes Java Client Operation: Update Subresource: status Time: \u0026lt;DATE\u0026gt; Resource Version: 1247307 UID: 4933be73-df97-493f-a20c-bf1e24f6b3f2 Spec: Admin Server: Admin Channel Port Forwarding Enabled: true Server Pod: Env: Name: USER_MEM_ARGS Value: -Djava.security.egd=file:/dev/./urandom -Xms512m -Xmx1024m Server Start Policy: IfNeeded Clusters: Name: governancedomain-oim-cluster Name: governancedomain-soa-cluster Data Home: Domain Home: /u01/oracle/user_projects/domains/governancedomain Domain Home Source Type: PersistentVolume Failure Retry Interval Seconds: 120 Failure Retry Limit Minutes: 1440 Http Access Log In Log Home: true Image: container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October'24\u0026gt; Image Pull Policy: IfNotPresent Image Pull Secrets: Name: orclcred Include Server Out In Pod Log: true Log Home: /u01/oracle/user_projects/domains/logs/governancedomain Log Home Enabled: true Log Home Layout: ByServers Max Cluster Concurrent Shutdown: 1 Max Cluster Concurrent Startup: 0 Max Cluster Unavailable: 1 Replicas: 1 Server Pod: Env: Name: JAVA_OPTIONS Value: -Dweblogic.StdoutDebugEnabled=false Name: USER_MEM_ARGS Value: -Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx1024m Volume Mounts: Mount Path: /u01/oracle/user_projects/domains Name: weblogic-domain-storage-volume Volumes: Name: weblogic-domain-storage-volume Persistent Volume Claim: Claim Name: governancedomain-domain-pvc Server Start Policy: IfNeeded Web Logic Credentials Secret: Name: oig-domain-credentials Status: Clusters: Cluster Name: oim_cluster Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Label Selector: weblogic.domainUID=governancedomain,weblogic.clusterName=oim_cluster Maximum Replicas: 5 Minimum Replicas: 0 Observed Generation: 2 Ready Replicas: 1 Replicas: 1 Replicas Goal: 1 Cluster Name: soa_cluster Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Label Selector: weblogic.domainUID=governancedomain,weblogic.clusterName=soa_cluster Maximum Replicas: 5 Minimum Replicas: 0 Observed Generation: 1 Ready Replicas: 1 Replicas: 1 Replicas Goal: 1 Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Observed Generation: 1 Servers: Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: worker-node2 Pod Phase: Running Pod Ready: True Server Name: AdminServer State: RUNNING State Goal: RUNNING Cluster Name: oim_cluster Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: worker-node1 Pod Phase: Running Pod Ready: True Server Name: oim_server1 State: RUNNING State Goal: RUNNING Cluster Name: oim_cluster Server Name: oim_server2 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oim_cluster Server Name: oim_server3 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oim_cluster Server Name: oim_server4 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oim_cluster Server Name: oim_server5 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: soa_cluster Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: worker-node1 Pod Phase: Running Pod Ready: True Server Name: soa_server1 State: RUNNING State Goal: RUNNING Cluster Name: soa_cluster Server Name: soa_server2 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: soa_cluster Server Name: soa_server3 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: soa_cluster Server Name: soa_server4 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: soa_cluster Server Name: soa_server5 State: SHUTDOWN State Goal: SHUTDOWN Start Time: \u0026lt;DATE\u0026gt; Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Created 35m weblogic.operator Domain governancedomain was created. Normal Changed 34m (x1127 over 35m) weblogic.operator Domain governancedomain was changed. Warning Failed 34m (x227 over 35m) weblogic.operator Domain governancedomain failed due to 'Domain validation error': Cluster resource 'governancedomain-oim-cluster' not found in namespace 'oigns' Cluster resource 'governancedomain-soa-cluster' not found in namespace 'oigns'. Update the domain resource to correct the validation error. Warning Unavailable 17m weblogic.operator Domain governancedomain is unavailable: an insufficient number of its servers that are expected to be running are ready.\u0026quot;; Warning Incomplete 17m weblogic.operator Domain governancedomain is incomplete for one or more of the following reasons: there are failures detected, there are pending server shutdowns, or not all servers expected to be running are ready and at their target image, auxiliary images, restart version, and introspect version. Normal Completed 13m (x2 over 26m) weblogic.operator Domain governancedomain is complete because all of the following are true: there is no failure detected, there are no pending server shutdowns, and all servers expected to be running are ready and at their target image, auxiliary images, restart version, and introspect version. Normal Available 13m (x2 over 26m) weblogic.operator Domain governancedomain is available: a sufficient number of its servers have reached the ready state. In the Status section of the output, the available servers and clusters are listed.\n  Verify the pods   Run the following command to see the pods running the servers and which nodes they are running on:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; -o wide For example:\n$ kubectl get pods -n oigns -o wide The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES governancedomain-adminserver 1/1 Running 0 24m 10.244.1.42 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; governancedomain-create-fmw-infra-sample-domain-job-8cww8 0/1 Completed 0 52m 10.244.1.40 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; governancedomain-oim-server1 1/1 Running 0 52m 10.244.1.44 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; governancedomain-soa-server1 1/1 Running 0 21m 10.244.1.43 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; helper 1/1 Running 0 3h55m 10.244.1.39 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; You are now ready to configure an Ingress to direct traffic for your OIG domain as per Configure an ingress for an OIG domain.\n  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/manage-oam-domains/domain-lifecycle/",
	"title": "a. Domain Life Cycle",
	"tags": [],
	"description": "Learn about the domain life cycle of an OAM domain.",
	"content": " View existing OAM servers Starting/Scaling up OAM Managed servers Stopping/Scaling down OAM Managed servers Starting/Scaling up OAM Policy Managed servers Stopping/Scaling down OAM Policy Managed servers Stopping and starting the Administration Server and Managed Servers Domain lifecycle sample scripts  As OAM domains use the WebLogic Kubernetes Operator, domain lifecyle operations are managed using the WebLogic Kubernetes Operator itself.\nThis document shows the basic operations for starting, stopping and scaling servers in the OAM domain.\nFor more detailed information refer to Domain Life Cycle in the WebLogic Kubernetes Operator documentation.\nDo not use the WebLogic Server Administration Console or Oracle Enterprise Manager Console to start or stop servers.\n Note: The instructions below are for starting, stopping, or scaling servers manually. If you wish to use autoscaling, see Kubernetes Horizontal Pod Autoscaler. Please note, if you have enabled autoscaling, it is recommended to delete the autoscaler before running the commands below.\nView existing OAM servers The default OAM deployment starts the Administration Server (AdminServer), one OAM Managed Server (oam_server1) and one OAM Policy Manager server (oam_policy_mgr1).\nThe deployment also creates, but doesn\u0026rsquo;t start, four extra OAM Managed Servers (oam-server2 to oam-server5) and four more OAM Policy Manager servers (oam_policy_mgr2 to oam_policy_mgr5).\nAll these servers are visible in the WebLogic Server Console https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/console by navigating to Domain Structure \u0026gt; oamcluster \u0026gt; Environment \u0026gt; Servers.\nTo view the running servers using kubectl, run the following command:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oamns The output should look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 3h29m accessdomain-oam-policy-mgr1 1/1 Running 0 3h21m accessdomain-oam-server1 1/1 Running 0 3h21m nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 55m Starting/Scaling up OAM Managed Servers The number of OAM Managed Servers running is dependent on the replicas parameter configured for the oam-cluster. To start more OAM Managed Servers perform the following steps:\n  Run the following kubectl command to edit the oam-cluster:\n$ kubectl edit cluster accessdomain-oam-cluster -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl edit cluster accessdomain-oam-cluster -n oamns Note: This opens an edit session for the oam-cluster where parameters can be changed using standard vi commands.\n  In the edit session, search for spec:, and then look for the replicas parameter under clusterName: oam_cluster. By default the replicas parameter is set to \u0026ldquo;1\u0026rdquo; hence one OAM Managed Server is started (oam_server1):\n... spec: clusterName: oam_cluster replicas: 1 serverPod: env: - name: USER_MEM_ARGS value: -XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m ...   To start more OAM Managed Servers, increase the replicas value as desired. In the example below, two more managed servers will be started by setting replicas to \u0026ldquo;3\u0026rdquo;:\n... spec: clusterName: oam_cluster replicas: 3 serverPod: env: - name: USER_MEM_ARGS value: -XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m ...   Save the file and exit (:wq!)\nThe output will look similar to the following:\ncluster.weblogic.oracle/accessdomain-oam-cluster edited   Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 3h33m accessdomain-oam-policy-mgr1 1/1 Running 0 3h25m accessdomain-oam-server1 1/1 Running 0 3h25m accessdomain-oam-server2 0/1 Running 0 3h25m accessdomain-oam-server3 0/1 Pending 0 9s nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 59m Two new pods (accessdomain-oam-server2 and accessdomain-oam-server3) are started, but currently have a READY status of 0/1. This means oam_server2 and oam_server3 are not currently running but are in the process of starting. The servers will take several minutes to start so keep executing the command until READY shows 1/1:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 3h37m accessdomain-oam-policy-mgr1 1/1 Running 0 3h29m accessdomain-oam-server1 1/1 Running 0 3h29m accessdomain-oam-server2 1/1 Running 0 3h29m accessdomain-oam-server3 1/1 Running 0 3m45s nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 63m Note: To check what is happening during server startup when READY is 0/1, run the following command to view the log of the pod that is starting:\n$ kubectl logs \u0026lt;pod\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl logs accessdomain-oam-server3 -n oamns   Stopping/Scaling down OAM Managed Servers As mentioned in the previous section, the number of OAM Managed Servers running is dependent on the replicas parameter configured for the cluster. To stop one or more OAM Managed Servers, perform the following:\n  Run the following kubectl command to edit the oam-cluster:\n$ kubectl edit cluster accessdomain-oam-cluster -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl edit cluster accessdomain-oam-cluster -n oamns   In the edit session, search for spec:, and then look for the replicas parameter under clusterName: oam_cluster. In the example below replicas is set to \u0026ldquo;3\u0026rdquo;, hence three OAM Managed Servers are started (access-domain-oam_server1 - access-domain-oam_server3):\n... spec: clusterName: oam_cluster replicas: 3 serverPod: env: - name: USER_MEM_ARGS value: -XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m ...   To stop OAM Managed Servers, decrease the replicas value as desired. In the example below, we will stop two managed servers by setting replicas to \u0026ldquo;1\u0026rdquo;:\nspec: clusterName: oam_cluster replicas: 1 serverPod: env: - name: USER_MEM_ARGS value: -XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m ...   Save the file and exit (:wq!)\n  Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 3h45m accessdomain-oam-policy-mgr1 1/1 Running 0 3h37m accessdomain-oam-server1 1/1 Running 0 3h37m accessdomain-oam-server2 1/1 Running 0 3h37m accessdomain-oam-server3 1/1 Terminating 0 11m nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 71m One pod now has a STATUS of Terminating (accessdomain-oam-server3). The server will take a minute or two to stop. Once terminated the other pod (accessdomain-oam-server2) will move to Terminating and then stop. Keep executing the command until the pods have disappeared:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 3h48m accessdomain-oam-policy-mgr1 1/1 Running 0 3h40m accessdomain-oam-server1 1/1 Running 0 3h40m nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 74m   Starting/Scaling up OAM Policy Managed Servers The number of OAM Policy Managed Servers running is dependent on the replicas parameter configured for the policy-cluster. To start more OAM Policy Managed Servers perform the following steps:\n  Run the following kubectl command to edit the policy-cluster:\n$ kubectl edit cluster accessdomain-policy-cluster -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl edit cluster accessdomain-policy-cluster -n oamns Note: This opens an edit session for the policy-cluster where parameters can be changed using standard vi commands.\n  In the edit session, search for spec:, and then look for the replicas parameter under clusterName: policy_cluster. By default the replicas parameter is set to \u0026ldquo;1\u0026rdquo; hence one OAM Policy Managed Server is started (oam_policy_mgr1):\n... spec: clusterName: policy_cluster replicas: 1 serverService: precreateService: true ...   To start more OAM Policy Managed Servers, increase the replicas value as desired. In the example below, two more managed servers will be started by setting replicas to \u0026ldquo;3\u0026rdquo;:\n... spec: clusterName: policy_cluster replicas: 3 serverService: precreateService: true ...   Save the file and exit (:wq!)\nThe output will look similar to the following:\ncluster.weblogic.oracle/accessdomain-policy-cluster edited After saving the changes two new pods will be started (accessdomain-oam-policy-mgr2 and accessdomain-oam-policy-mgr3). After a few minutes they will have a READY status of 1/1. In the example below accessdomain-oam-policy-mgr2 and accessdomain-oam-policy-mgr3 are started:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 3h43m accessdomain-oam-policy-mgr1 1/1 Running 0 3h35m accessdomain-oam-policy-mgr2 1/1 Running 0 3h35m accessdomain-oam-policy-mgr3 1/1 Running 0 4m18s accessdomain-oam-server1 1/1 Running 0 3h35m nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 69m   Stopping/Scaling down OAM Policy Managed Servers As mentioned in the previous section, the number of OAM Policy Managed Servers running is dependent on the replicas parameter configured for the cluster. To stop one or more OAM Policy Managed Servers, perform the following:\n  Run the following kubectl command to edit the policy-cluster:\n$ kubectl edit cluster accessdomain-policy-cluster -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl edit cluster accessdomain-policy-cluster -n oamns   In the edit session, search for spec:, and then look for the replicas parameter under clusterName: policy_cluster. To stop OAM Policy Managed Servers, decrease the replicas value as desired. In the example below, we will stop two managed servers by setting replicas to \u0026ldquo;1\u0026rdquo;:\n... spec: clusterName: policy_cluster replicas: 1 serverService: precreateService: true ... After saving the changes one pod will move to a STATUS of Terminating (accessdomain-oam-policy-mgr3).\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 3h49m accessdomain-oam-policy-mgr1 1/1 Running 0 3h41m accessdomain-oam-policy-mgr2 1/1 Running 0 3h41m accessdomain-oam-policy-mgr3 1/1 Terminating 0 10m accessdomain-oam-server1 1/1 Running 0 3h41m nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 75m The pods will take a minute or two to stop, so keep executing the command until the pods has disappeared:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 3h50m accessdomain-oam-policy-mgr1 1/1 Running 0 3h42m accessdomain-oam-server1 1/1 Running 0 3h42m nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 76m   Stopping and Starting the Administration Server and Managed Servers To stop all the OAM Managed Servers and the Administration Server in one operation:\n  Run the following kubectl command to edit the domain:\n$ kubectl edit domain \u0026lt;domain_uid\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl edit domain accessdomain -n oamns   In the edit session, search for serverStartPolicy: IfNeeded under the domain spec:\n... volumeMounts: - mountPath: /u01/oracle/user_projects/domains name: weblogic-domain-storage-volume volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: accessdomain-domain-pvc serverStartPolicy: IfNeeded ...   Change serverStartPolicy: IfNeeded to Never as follows:\n... volumeMounts: - mountPath: /u01/oracle/user_projects/domains name: weblogic-domain-storage-volume volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: accessdomain-domain-pvc serverStartPolicy: Never ...   Save the file and exit (:wq!).\n  Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Terminating 0 3h52m accessdomain-oam-policy-mgr1 1/1 Terminating 0 3h44m accessdomain-oam-server1 1/1 Terminating 0 3h44m nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 78m The Administration Server pods and Managed Server pods will move to a STATUS of Terminating. After a few minutes, run the command again and the pods should have disappeared:\nNAME READY STATUS RESTARTS AGE nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 80m   To start the Administration Server and Managed Servers up again, repeat the previous steps but change serverStartPolicy: Never to IfNeeded as follows:\n... volumeMounts: - mountPath: /u01/oracle/user_projects/domains name: weblogic-domain-storage-volume volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: accessdomain-domain-pvc serverStartPolicy: IfNeeded ...   Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-introspector-jwqxw 1/1 Running 0 10s nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 81m The Administration Server pod will start followed by the OAM Managed Servers pods. This process will take several minutes, so keep executing the command until all the pods are running with READY status 1/1 :\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 10m accessdomain-oam-policy-mgr1 1/1 Running 0 7m35s accessdomain-oam-server1 1/1 Running 0 7m35s nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 92m   Domain lifecycle sample scripts The WebLogic Kubernetes Operator provides sample scripts to start up or shut down a specific Managed Server or cluster in a deployed domain, or the entire deployed domain.\nNote: Prior to running these scripts, you must have previously created and deployed the domain.\nThe scripts are located in the $WORKDIR/kubernetes/domain-lifecycle directory. For more information, see the README.\n"
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/manage-oig-domains/domain-lifecycle/",
	"title": "a. Domain life cycle",
	"tags": [],
	"description": "Learn about the domain lifecycle of an OIG domain.",
	"content": " View existing OIG servers Starting/Scaling up OIG Managed servers Stopping/Scaling down OIG Managed servers Stopping and starting the Administration Server and Managed Servers Domain lifecycle sample scripts  As OIG domains use the WebLogic Kubernetes Operator, domain lifecyle operations are managed using the WebLogic Kubernetes Operator itself.\nThis document shows the basic operations for starting, stopping and scaling servers in the OIG domain.\nFor more detailed information refer to Domain Life Cycle in the WebLogic Kubernetes Operator documentation.\nDo not use the WebLogic Server Administration Console or Oracle Enterprise Manager Console to start or stop servers.\n Note: The instructions below are for starting, stopping, or scaling servers manually. If you wish to use autoscaling, see Kubernetes Horizontal Pod Autoscaler. Please note, if you have enabled autoscaling, it is recommended to delete the autoscaler before running the commands below.\nView existing OIG Servers The default OIG deployment starts the Administration Server (AdminServer), one OIG Managed Server (oim_server1) and one SOA Managed Server (soa_server1).\nThe deployment also creates, but doesn\u0026rsquo;t start, four extra OIG Managed Servers (oim-server2 to oim-server5) and four more SOA Managed Servers (soa_server2 to soa_server5).\nAll these servers are visible in the WebLogic Server Administration Console https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/console by navigating to Domain Structure \u0026gt; governancedomain \u0026gt; Environment \u0026gt; Servers.\nTo view the running servers using kubectl, run the following command:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oigns The output should look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 23h governancedomain-oim-server1 1/1 Running 0 23h governancedomain-soa-server1 1/1 Running 0 23h Starting/Scaling up OIG Managed Servers The number of OIG Managed Servers running is dependent on the replicas parameter configured for the cluster. To start more OIG Managed Servers perform the following steps:\n  Run the following kubectl command to edit the oim_cluster:\n$ kubectl edit cluster \u0026lt;cluster_name\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl edit cluster governancedomain-oim-cluster -n oigns Note: This opens an edit session for the domain where parameters can be changed using standard vi commands.\n  In the edit session, search for spec:, and then look for the replicas parameter under clusterName: oim_cluster. By default the replicas parameter is set to \u0026ldquo;1\u0026rdquo; hence a single OIG Managed Server is started (oim_server1):\nspec: clusterName: oim_cluster replicas: 1 serverPod: env: - name: USER_MEM_ARGS value: -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m ...   To start more OIG Managed Servers, increase the replicas value as desired. In the example below, one more Managed Server will be started by setting replicas to \u0026ldquo;2\u0026rdquo;:\nspec: clusterName: oim_cluster replicas: 2 serverPod: env: - name: USER_MEM_ARGS value: -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m ...   Save the file and exit (:wq)\nThe output will look similar to the following:\ncluster.weblogic.oracle/governancedomain-oim-cluster edited   Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oigns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 23h governancedomain-oim-server1 1/1 Running 0 23h governancedomain-oim-server2 0/1 Running 0 7s governancedomain-soa-server1 1/1 Running 0 23h One new pod (governancedomain-oim-server2) is started, but currently has a READY status of 0/1. This means oim_server2 is not currently running but is in the process of starting. The server will take several minutes to start so keep executing the command until READY shows 1/1:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 23h governancedomain-oim-server1 1/1 Running 0 23h governancedomain-oim-server2 1/1 Running 0 5m27s governancedomain-soa-server1 1/1 Running 0 23h Note: To check what is happening during server startup when READY is 0/1, run the following command to view the log of the pod that is starting:\n$ kubectl logs \u0026lt;pod\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl logs governancedomain-oim-server2 -n oigns   Stopping/Scaling down OIG Managed Servers As mentioned in the previous section, the number of OIG Managed Servers running is dependent on the replicas parameter configured for the cluster. To stop one or more OIG Managed Servers, perform the following:\n  Run the following kubectl command to edit the oim_cluster:\n$ kubectl edit cluster \u0026lt;cluster_name\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl edit cluster governancedomain-oim-cluster -n oigns   In the edit session, search for spec:, and then look for the replicas parameter under clusterName: oim_cluster. In the example below replicas is set to \u0026ldquo;2\u0026rdquo; hence two OIG Managed Servers are started (oim_server1 and oim_server2):\nspec: clusterName: oim_cluster replicas: 2 serverPod: env: - name: USER_MEM_ARGS value: -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m ...   To stop OIG Managed Servers, decrease the replicas value as desired. In the example below, we will stop one Managed Server by setting replicas to \u0026ldquo;1\u0026rdquo;:\nspec: clusterName: oim_cluster replicas: 1 serverPod: env: - name: USER_MEM_ARGS value: -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m ...   Save the file and exit (:wq)\n  Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oigns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 23h governancedomain-oim-server1 1/1 Running 0 23h governancedomain-oim-server2 1/1 Terminating 0 7m30s governancedomain-soa-server1 1/1 Running 0 23h The exiting pod shows a STATUS of Terminating (governancedomain-oim-server2). The server may take a minute or two to stop, so keep executing the command until the pod has disappeared:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 23h governancedomain-oim-server1 1/1 Running 0 23h governancedomain-soa-server1 1/1 Running 0 23h   Stopping and Starting the Administration Server and Managed Servers To stop all the OIG Managed Servers and the Administration Server in one operation:\n  Run the following kubectl command to edit the domain:\n$ kubectl edit domain \u0026lt;domain_uid\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl edit domain governancedomain -n oigns   In the edit session search for serverStartPolicy: IfNeeded under the domain spec:\n... volumeMounts: - mountPath: /u01/oracle/user_projects/domains name: weblogic-domain-storage-volume volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: governancedomain-domain-pvc serverStartPolicy: IfNeeded webLogicCredentialsSecret: name: oig-domain-credentials ...   Change serverStartPolicy: IfNeeded to Never as follows:\n ... volumeMounts: - mountPath: /u01/oracle/user_projects/domains name: weblogic-domain-storage-volume volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: governancedomain-domain-pvc serverStartPolicy: Never webLogicCredentialsSecret: name: oig-domain-credentials ...   Save the file and exit (:wq).\n  Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oigns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Terminating 0 23h governancedomain-oim-server1 1/1 Terminating 0 23h governancedomain-soa-server1 1/1 Terminating 0 23h The AdminServer pod and Managed Server pods will move to a STATUS of Terminating. After a few minutes, run the command again and the pods should have disappeared:\nNo resources found in oigns namespace.   To start the Administration Server and Managed Servers up again, repeat the previous steps but change serverStartPolicy: Never to IfNeeded as follows:\n ... volumeMounts: - mountPath: /u01/oracle/user_projects/domains name: weblogic-domain-storage-volume volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: governancedomain-domain-pvc serverStartPolicy: IfNeeded webLogicCredentialsSecret: name: oig-domain-credentials ...   Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oigns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 0/1 Running 0 4s The Administration Server pod will start followed by the OIG Managed Servers pods. This process will take several minutes, so keep executing the command until all the pods are running with READY status 1/1 :\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 6m57s governancedomain-oim-server1 1/1 Running 0 4m33s governancedomain-soa-server1 1/1 Running 0 4m33s   Domain lifecycle sample scripts The WebLogic Kubernetes Operator provides sample scripts to start up or shut down a specific Managed Server or cluster in a deployed domain, or the entire deployed domain.\nNote: Prior to running these scripts, you must have previously created and deployed the domain.\nThe scripts are located in the $WORKDIR/kubernetes/domain-lifecycle directory. For more information, see the README.\n"
},
{
	"uri": "/fmw-kubernetes/24.4.1/ohs/manage-ohs-containers/domain-lifecycle/",
	"title": "a. Domain Lifecycle",
	"tags": [],
	"description": "Learn about the domain lifecycle of an OHS container.",
	"content": " View existing OHS servers Starting/Scaling up OHS servers Stopping/Scaling down OHS servers  This document shows the basic operations for scaling servers in OHS containers.\nView existing OHS servers The default OHS deployment starts one OHS server (assuming replicas: 1 in ohs.yaml).\nTo view the running OHS servers, run the following command:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods -n ohsns The output should look similar to the following:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-vkp4s 1/1 Running 0 5h17m Starting/Scaling up OHS Servers The number of OHS Servers running is dependent on the replicas parameter configured for OHS.\n  Run the following kubectl command to start additional OHS servers:\n$ kubectl -n \u0026lt;namespace\u0026gt; patch deployment ohs-domain -p \u0026#39;{\u0026#34;spec\u0026#34;: {\u0026#34;replicas\u0026#34;: \u0026lt;replica count\u0026gt;}}\u0026#39; where \u0026lt;replica count\u0026gt; is the number of OHS servers to start.\nIn the example below, two additional OHS servers are started:\n$ kubectl -n ohsns patch deployment ohs-domain -p \u0026#39;{\u0026#34;spec\u0026#34;: {\u0026#34;replicas\u0026#34;: 3}}\u0026#39; The output will look similar to the following:\ndeployment.apps/ohs-domain patched   Whilst the new OHS containers are being started, you can run the following command to monitor the progress:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; -w For example:\n$ kubectl get pods -n ohsns -w The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-2q8bw 0/1 ContainerCreating 0 26s ohs-domain-d5b648bc5-qvdjn 0/1 Running 0 26s ohs-domain-d5b648bc5-vkp4s 1/1 Running 0 5h21m Two new OHS pods have now been created, in this example ohs-domain-d5b648bc5-2q8bw and ohs-domain-d5b648bc5-qvdjn.\n  To check what is happening while the pods are in ContainerCreating status, you can run:\n$ kubectl describe pod \u0026lt;podname\u0026gt; -n \u0026lt;namespace\u0026gt;   To check what is happening while the pods are in 0/1 Running status, you can run:\n$ kubectl logs -f \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt;   Once everything is started you should see all the additional OHS containers are running (READY 1/1):\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-2q8bw 1/1 Running 0 9m34s ohs-domain-d5b648bc5-qvdjn 1/1 Running 0 9m34s ohs-domain-d5b648bc5-vkp4s 1/1 Running 0 5h30m   Stopping/Scaling down OHS Servers As mentioned in the previous section, the number of OHS servers running is dependent on the replicas parameter configured. To stop one or more OHS servers, perform the following steps:\n  Run the following kubectl command to scale down OHS servers:\n$ kubectl -n \u0026lt;namespace\u0026gt; patch deployment ohs-domain -p \u0026#39;{\u0026#34;spec\u0026#34;: {\u0026#34;replicas\u0026#34;: \u0026lt;replica count\u0026gt;}}\u0026#39; where \u0026lt;replica count\u0026gt; is the number of OHS servers you want to run.\nIn the example below, replicas is dropped to 1 so only one OHS is running:\n$ kubectl -n ohsns patch deployment ohs-domain -p \u0026#39;{\u0026#34;spec\u0026#34;: {\u0026#34;replicas\u0026#34;: 1}}\u0026#39; The output will look similar to the following:\ndeployment.apps/ohs-domain patched   Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods -n ohsns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-2q8bw 0/1 Terminating 0 12m ohs-domain-d5b648bc5-qvdjn 0/1 Terminating 0 12m ohs-domain-d5b648bc5-vkp4s 1/1 Running 0 5h31m Two pods now have a STATUS of Terminating. Keep executing the command until the pods have disappeared and you are left with the one OHS pod:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-vkp4s 1/1 Running 0 5h32m   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/enterprise-deployments/enterprise-deployment-guide/",
	"title": "a. Enterprise Deployment Guide",
	"tags": [],
	"description": "The Enterprise Deployment Guide shows how to deploy the entire Oracle Identity Management suite in a production environment",
	"content": "Enterprise Deployment Guide The Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster is a step by step guide that describes how to deploy the entire Oracle Identity and Access Management Suite in a production environment. It incorporates best practices learned over many years to ensure that your Identity and Access Management deployment maintains the highest levels of Availability and Security.\nIt includes:\n Preparing your On-premises Kubernetes, or Oracle Cloud Infrastructure Container Engine for Kubernetes (OCI OKE), for an Identity Management (IDM) Deployment. Deploying and configuring Oracle Unified Directory (OUD) seeding data needed by other IDM products. Deploying and Configuring an Ingress Controller. Deploying and Configuring the WebLogic Kubernetes Operator Deploying and Configuring Oracle Access Management (OAM) and integrating with OUD. Deploying and Configuring Oracle Identity Governance (OIG) and integrating with OUD and OAM. Deploying and Configuring Oracle Identity Role Intelligence (OIRI) and integrating with OIG. Deploying and configuring Oracle Advanced Authentication (OAA) and Oracle Adaptive Risk Management (OARM) and integrating with OAM. Deploying and Configuring Monitoring and Centralised logging and configuring IDM to send monitoring and logging information to it.  Additionally, as per Enterprise Deployment Automation, all of the above can be automated using open source scripts.\n"
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oudsm/patch-and-upgrade/patch-an-oudsm-image/",
	"title": "a. Patch an image",
	"tags": [],
	"description": "Instructions on how to update your OUDSM Kubernetes cluster with a new OUDSM container image.",
	"content": "Introduction In this section the Oracle Unified Directory Services Manager (OUDSM) deployment is updated with a new OUDSM container image.\nNote: If you are not using Oracle Container Registry or your own container registry, then you must first load the new container image on all nodes in your Kubernetes cluster.\nYou can update the deployment with a new OUDSM container image using one of the following methods:\n Using a YAML file Using --set argument  Using a YAML file   Navigate to the $WORKDIR/kubernetes/helm directory:\n$ cd $WORKDIR/kubernetes/helm   Create a oudsm-patch-override.yaml file that contains:\nimage: repository: \u0026lt;image_location\u0026gt; tag: \u0026lt;image_tag\u0026gt; imagePullSecrets: - name: orclcred For example:\nimage: repository: container-registry.oracle.com/middleware/oudsm_cpu tag: 12.2.1.4-jdk8-ol8-\u0026lt;October\u0026#39;24\u0026gt; imagePullSecrets: - name: orclcred The following caveats exist:\n  If you are not using Oracle Container Registry or your own container registry for your oudsm container image, then you can remove the following:\nimagePullSecrets: - name: orclcred     Run the following command to upgrade the deployment:\n$ helm upgrade --namespace \u0026lt;namespace\u0026gt; \\ --values oudsm-patch-override.yaml \\ \u0026lt;release_name\u0026gt; oudsm --reuse-values For example:\n$ helm upgrade --namespace oudsmns \\ --values oudsm-patch-override.yaml \\ oudsm oudsm --reuse-values   Using --set argument   Navigate to the $WORKDIR/kubernetes/helm directory:\n$ cd $WORKDIR/kubernetes/helm   Run the following command to update the deployment with a new OUDSM container image:\n$ helm upgrade --namespace \u0026lt;namespace\u0026gt; \\ --set image.repository=\u0026lt;image_location\u0026gt;,image.tag=\u0026lt;image_tag\u0026gt; \\ --set imagePullSecrets[0].name=\u0026#34;orclcred\u0026#34; \\ \u0026lt;release_name\u0026gt; oudsm --reuse-values For example:\n$ helm upgrade --namespace oudsmns \\ --set image.repository=container-registry.oracle.com/middleware/oudsm_cpu,image.tag=12.2.1.4-jdk8-ol8-\u0026lt;October\u0026#39;24\u0026gt; \\ --set imagePullSecrets[0].name=\u0026#34;orclcred\u0026#34; \\ oudsm oudsm --reuse-values The following caveats exist:\n If you are not using Oracle Container Registry or your own container registry for your OUDSM container image, then you can remove the following: --set imagePullSecrets[0].name=\u0026quot;orclcred\u0026quot;.    Verify the pods   After updating with the new image the pod will restart. Verify the pod is running:\n$ kubectl --namespace \u0026lt;namespace\u0026gt; get pods For example:\n$ kubectl --namespace oudsmns get pods The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/oudsm-1 1/1 Running 0 73m 10.244.0.19 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; Note: It will take several minutes before the pod starts. While the oudsm pods have a STATUS of 0/1 the pod is started but the OUDSM server associated with it is currently starting. While the pod is starting you can check the startup status in the pod logs, by running the following command:\n  Verify the pod is using the new image by running the following command:\n$ kubectl describe pod \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe pod oudsm-1 -n oudsmns The output will look similar to the following:\nName: oudsm-1 Namespace: oudsmns Priority: 0 Node: \u0026lt;worker-node\u0026gt;/100.102.48.28 Start Time: \u0026lt;DATE\u0026gt; Labels: app.kubernetes.io/instance=oudsm app.kubernetes.io/managed-by=Helm app.kubernetes.io/name=oudsm app.kubernetes.io/version=12.2.1.4.0 helm.sh/chart=oudsm-0.1 oudsm/instance=oudsm-1 Annotations: meta.helm.sh/release-name: oudsm meta.helm.sh/release-namespace: oudsmns Status: Running IP: 10.244.1.90 etc... Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Killing 22m kubelet Container oudsm definition changed, will be restarted Normal Created 21m (x2 over 61m) kubelet Created container oudsm Normal Pulling 21m kubelet Container image \u0026#34;container-registry.oracle.com/middleware/oudsm_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October\u0026#39;24\u0026gt;\u0026#34; Normal Started 21m (x2 over 61m) kubelet Started container oudsm   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/post-install-config/set_oimfronendurl_using_mbeans/",
	"title": "a. Post Install Tasks",
	"tags": [],
	"description": "Perform post install tasks.",
	"content": "Follow these post install configuration steps.\n Create a Server Overrides File Set OIMFrontendURL using MBeans  Create a Server Overrides File   Navigate to the following directory:\ncd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/output/weblogic-domains/governancedomain For OIG domains created with WDT:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/ ``\n  Create a setUserOverrides.sh with the following contents:\nDERBY_FLAG=false JAVA_OPTIONS=\u0026quot;${JAVA_OPTIONS} -Djava.net.preferIPv4Stack=true\u0026quot; MEM_ARGS=\u0026quot;-Xms8192m -Xmx8192m\u0026quot;   Copy the setUserOverrides.sh file to the Administration Server pod:\n$ chmod 755 setUserOverrides.sh $ kubectl cp setUserOverrides.sh oigns/governancedomain-adminserver:/u01/oracle/user_projects/domains/governancedomain/bin/setUserOverrides.sh Where oigns is the OIG namespace and governancedomain is the domain_UID.\n  Stop the OIG domain using the following command:\n$ kubectl -n \u0026lt;domain_namespace\u0026gt; patch domains \u0026lt;domain_uid\u0026gt; --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Never\u0026#34; }]\u0026#39; For example:\n$ kubectl -n oigns patch domains governancedomain --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Never\u0026#34; }]\u0026#39; The output will look similar to the following:\ndomain.weblogic.oracle/governancedomain patched   Check that all the pods are stopped:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oigns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Terminating 0 18h governancedomain-oim-server1 1/1 Terminating 0 18h governancedomain-soa-server1 1/1 Terminating 0 18h The Administration Server pods and Managed Server pods will move to a STATUS of Terminating. After a few minutes, run the command again and the pods should have disappeared:\nNo resources found in oigns namespace.   Start the domain using the following command:\n$ kubectl -n \u0026lt;domain_namespace\u0026gt; patch domains \u0026lt;domain_uid\u0026gt; --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;IfNeeded\u0026#34; }]\u0026#39; For example:\n$ kubectl -n oigns patch domains governancedomain --type=\u0026#39;json\u0026#39; -p=\u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/serverStartPolicy\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;IfNeeded\u0026#34; }]\u0026#39; Run the following kubectl command to view the pods:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pods -n oigns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-introspect-domain-job-7qx29 1/1 Running 0 8s The Administration Server pod will start followed by the OIG Managed Servers pods. This process will take several minutes, so keep executing the command until all the pods are running with READY status 1/1:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 6m4s governancedomain-oim-server1 1/1 Running 0 3m5s governancedomain-soa-server1 1/1 Running 0 3m5s   Set OIMFrontendURL using MBeans   Login to Oracle Enterprise Manager using the following URL:\nhttps://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/em\n  Click the Target Navigation icon in the top left of the screen and navigate to the following:\n Expand Identity and Access \u0026gt; Access \u0026gt; OIM \u0026gt; oim Right click the instance oim and select System MBean Browser Under Application Defined MBeans, navigate to oracle.iam, Server:oim_server1 \u0026gt; Application:oim \u0026gt; XMLConfig \u0026gt; Config \u0026gt; XMLConfig.DiscoveryConfig \u0026gt; Discovery.    Enter a new value for the OimFrontEndURL attribute, in the format:\n If using an External LoadBalancer for your ingress: https://${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT} If using NodePort for your ingress: https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}  If using HTTP instead of HTTPS for your ingress, change the URL appropriately.\nThen click Apply.\n  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/patch-and-upgrade/upgrade-an-operator-release/",
	"title": "a. Upgrade an operator release",
	"tags": [],
	"description": "Instructions on how to update the WebLogic Kubernetes Operator version.",
	"content": "These instructions apply to upgrading operators from 3.X.X to 4.X, or from within the 4.X release family as additional versions are released.\n  On the master node, download the new WebLogic Kubernetes Operator source code from the operator github project:\n$ mkdir \u0026lt;workdir\u0026gt;/weblogic-kubernetes-operator-4.X.X $ cd \u0026lt;workdir\u0026gt;/weblogic-kubernetes-operator-4.X.X $ git clone https://github.com/oracle/weblogic-kubernetes-operator.git --branch v4.X.X For example:\n$ mkdir /scratch/OAMK8S/weblogic-kubernetes-operator-4.X.X $ cd /scratch/OAMK8S/weblogic-kubernetes-operator-4.X.X $ git clone https://github.com/oracle/weblogic-kubernetes-operator.git --branch v4.X.X This will create the directory \u0026lt;workdir\u0026gt;/weblogic-kubernetes-operator-4.X.X/weblogic-kubernetes-operator\n  Run the following helm command to upgrade the operator:\n$ cd \u0026lt;workdir\u0026gt;/weblogic-kubernetes-operator-4.X.X/weblogic-kubernetes-operator $ helm upgrade --reuse-values --set image=ghcr.io/oracle/weblogic-kubernetes-operator:4.X.X --namespace \u0026lt;sample-kubernetes-operator-ns\u0026gt; --wait weblogic-kubernetes-operator kubernetes/charts/weblogic-operator For example:\n$ cd /scratch/OAMK8S/weblogic-kubernetes-operator-4.X.X/weblogic-kubernetes-operator $ helm upgrade --reuse-values --set image=ghcr.io/oracle/weblogic-kubernetes-operator:4.X.X --namespace opns --wait weblogic-kubernetes-operator kubernetes/charts/weblogic-operator The output will look similar to the following:\nRelease \u0026quot;weblogic-kubernetes-operator\u0026quot; has been upgraded. Happy Helming! NAME: weblogic-kubernetes-operator LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: opns STATUS: deployed REVISION: 2 TEST SUITE: None   Verify that the operator\u0026rsquo;s pod and services are running by executing the following command:\n$ kubectl get all -n \u0026lt;sample-kubernetes-operator-ns\u0026gt; For example:\n$ kubectl get all -n opns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE pod/weblogic-operator-b7d6df78c-mfrc4 1/1 Running 0 40s pod/weblogic-operator-webhook-7996b8b58b-frtwp 1/1 Running 0 42s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/weblogic-operator-webhook-svc ClusterIP 10.106.51.57 \u0026lt;none\u0026gt; 8083/TCP,8084/TCP 42s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/weblogic-operator 1/1 1 1 6d deployment.apps/weblogic-operator-webhook 1/1 1 1 42s NAME DESIRED CURRENT READY AGE replicaset.apps/weblogic-operator-5884685f4f 0 0 0 6d replicaset.apps/weblogic-operator-b7d6df78c 1 1 1 40s replicaset.apps/weblogic-operator-webhook-7996b8b58b 1 1 1 42s Note: When you upgrade a 3.x WebLogic Kubernetes Operator to 4.x, the upgrade process creates a WebLogic Domain resource conversion webhook deployment, and associated resources in the same namespace. The webhook automatically and transparently upgrades the existing WebLogic Domains from the 3.x schema to the 4.x schema. For more information, see Domain Upgrade in the WebLogic Kubernetes Operator documentation.\nNote: In WebLogic Kubernetes Operator 4.X, changes are made to serverStartPolicy that affect starting/stopping of the domain. Refer to the serverStartPolicy entry in the create-domain-inputs.yaml for more information. Also see Domain Life Cycle.\n  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/patch-and-upgrade/upgrade-an-operator-release/",
	"title": "a. Upgrade an operator release",
	"tags": [],
	"description": "Instructions on how to update the WebLogic Kubernetes Operator version.",
	"content": "These instructions apply to upgrading operators from 3.X.X to 4.X, or from within the 4.x release family as additional versions are released.\n  On the master node, download the new WebLogic Kubernetes Operator source code from the operator github project:\n$ mkdir \u0026lt;workdir\u0026gt;/weblogic-kubernetes-operator-4.X.X $ cd \u0026lt;workdir\u0026gt;/weblogic-kubernetes-operator-4.X.X $ git clone https://github.com/oracle/weblogic-kubernetes-operator.git --branch v4.X.X For example:\n$ mkdir /scratch/OIGK8S/weblogic-kubernetes-operator-4.X.X $ cd /scratch/OIGK8S/weblogic-kubernetes-operator-4.X.X $ git clone https://github.com/oracle/weblogic-kubernetes-operator.git --branch v4.X.X This will create the directory \u0026lt;workdir\u0026gt;/weblogic-kubernetes-operator-4.X.X/weblogic-kubernetes-operator\n  Run the following helm command to upgrade the operator:\n$ cd \u0026lt;workdir\u0026gt;/weblogic-kubernetes-operator-4.X.X/weblogic-kubernetes-operator $ helm upgrade --reuse-values --set image=ghcr.io/oracle/weblogic-kubernetes-operator:4.X.X --namespace \u0026lt;sample-kubernetes-operator-ns\u0026gt; --wait weblogic-kubernetes-operator kubernetes/charts/weblogic-operator For example:\n$ cd /scratch/OIGK8S/weblogic-kubernetes-operator-4.X.X/weblogic-kubernetes-operator $ helm upgrade --reuse-values --set image=ghcr.io/oracle/weblogic-kubernetes-operator:4.X.X --namespace operator --wait weblogic-kubernetes-operator kubernetes/charts/weblogic-operator The output will look similar to the following:\nRelease \u0026quot;weblogic-kubernetes-operator\u0026quot; has been upgraded. Happy Helming! NAME: weblogic-kubernetes-operator LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: operator STATUS: deployed REVISION: 2 TEST SUITE: None   Verify that the operator\u0026rsquo;s pod and services are running by executing the following command:\n$ kubectl get all -n \u0026lt;sample-kubernetes-operator-ns\u0026gt; For example:\n$ kubectl get all -n opns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE pod/weblogic-operator-b7d6df78c-mfrc4 1/1 Running 0 40s pod/weblogic-operator-webhook-7996b8b58b-frtwp 1/1 Running 0 42s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/weblogic-operator-webhook-svc ClusterIP 10.106.51.57 \u0026lt;none\u0026gt; 8083/TCP,8084/TCP 42s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/weblogic-operator 1/1 1 1 6d deployment.apps/weblogic-operator-webhook 1/1 1 1 42s NAME DESIRED CURRENT READY AGE replicaset.apps/weblogic-operator-5884685f4f 0 0 0 6d replicaset.apps/weblogic-operator-b7d6df78c 1 1 1 40s replicaset.apps/weblogic-operator-webhook-7996b8b58b 1 1 1 42s Note: When you upgrade a 3.x WebLogic Kubernetes Operator to 4.x, the upgrade process creates a WebLogic Domain resource conversion webhook deployment, and associated resources in the same namespace. The webhook automatically and transparently upgrades the existing WebLogic Domains from the 3.x schema to the 4.x schema. For more information, see Domain Upgrade in the WebLogic Kubernetes Operator documentation.\nNote: In WebLogic Kubernetes Operator 4.X, changes are made to serverStartPolicy that affect starting/stopping of the domain. Refer to the serverStartPolicy entry in the create-domain-inputs.yaml for more information. Also see Domain Life Cycle.\n  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/configure-ingress/ingress-nginx-setup-for-oig-domain-setup-on-k8s/",
	"title": "a. Using an Ingress with NGINX (non-SSL)",
	"tags": [],
	"description": "Steps to set up an Ingress for NGINX to direct traffic to the OIG domain (non-SSL).",
	"content": "Setting up an ingress for NGINX for the OIG domain on Kubernetes (non-SSL) The instructions below explain how to set up NGINX as an ingress for the OIG domain with non-SSL termination.\nNote: All the steps below should be performed on the master node.\n  Install NGINX\na. Configure the repository\nb. Create a namespace\nc. Install NGINX using helm\nd. Setup routing rules for the domain\n  Create an ingress for the domain\n  Verify that you can access the domain URL\n  Install NGINX Use helm to install NGINX.\nConfigure the repository   Add the Helm chart repository for NGINX using the following command:\n$ helm repo add stable https://kubernetes.github.io/ingress-nginx The output will look similar to the following:\n\u0026quot;stable\u0026quot; has been added to your repositories   Update the repository using the following command:\n$ helm repo update The output will look similar to the following:\nHang tight while we grab the latest from your chart repositories... ...Successfully got an update from the \u0026quot;stable\u0026quot; chart repository Update Complete. Happy Helming!   Create a namespace   Create a Kubernetes namespace for NGINX by running the following command:\n$ kubectl create namespace nginx The output will look similar to the following:\nnamespace/nginx created   Install NGINX using helm If you can connect directly to the master node IP address from a browser, then install NGINX with the --set controller.service.type=NodePort parameter.\nIf you are using a Managed Service for your Kubernetes cluster,for example Oracle Kubernetes Engine (OKE) on Oracle Cloud Infrastructure (OCI), and connect from a browser to the Load Balancer IP address, then use the --set controller.service.type=LoadBalancer parameter. This instructs the Managed Service to setup a Load Balancer to direct traffic to the NGINX ingress.\n  To install NGINX use the following helm command depending on if you are using NodePort or LoadBalancer:\na) Using NodePort\n$ helm install nginx-ingress -n nginx --set controller.service.type=NodePort --set controller.admissionWebhooks.enabled=false stable/ingress-nginx --version 4.7.2 The output will look similar to the following:\nNAME: nginx-ingress LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: nginx STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The ingress-nginx controller has been installed. Get the application URL by running these commands: export HTTP_NODE_PORT=$(kubectl --namespace nginx get services -o jsonpath=\u0026quot;{.spec.ports[0].nodePort}\u0026quot; nginx-ingress-ingress-nginx-controller) export HTTPS_NODE_PORT=$(kubectl --namespace nginx get services -o jsonpath=\u0026quot;{.spec.ports[1].nodePort}\u0026quot; nginx-ingress-ingress-nginx-controller) export NODE_IP=$(kubectl --namespace nginx get nodes -o jsonpath=\u0026quot;{.items[0].status.addresses[1].address}\u0026quot;) echo \u0026quot;Visit http://$NODE_IP:$HTTP_NODE_PORT to access your application via HTTP.\u0026quot; echo \u0026quot;Visit https://$NODE_IP:$HTTPS_NODE_PORT to access your application via HTTPS.\u0026quot; An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1 kind: Ingress metadata: annotations: kubernetes.io/ingress.class: nginx name: example namespace: foo spec: ingressClassName: example-class rules: - host: www.example.com http: paths: - path: / pathType: Prefix backend: service: name: exampleService port: 80 # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls b) Using LoadBalancer\n$ helm install nginx-ingress -n nginx --set controller.service.type=LoadBalancer --set controller.admissionWebhooks.enabled=false stable/ingress-nginx --version 4.7.2 The output will look similar to the following:\nNAME: nginx-ingress LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: nginx STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The nginx-ingress controller has been installed. It may take a few minutes for the LoadBalancer IP to be available. You can watch the status by running 'kubectl --namespace nginx get services -o wide -w nginx-ingress-controller' An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1 kind: Ingress metadata: annotations: kubernetes.io/ingress.class: nginx name: example namespace: foo spec: ingressClassName: example-class rules: - host: www.example.com http: paths: - path: / pathType: Prefix backend: service: name: exampleService port: 80 # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls   Setup routing rules for the domain   Setup routing rules by running the following commands:\n$ cd $WORKDIR/kubernetes/charts/ingress-per-domain Edit values.yaml and change the domainUID parameter to match your domainUID, for example domainUID: governancedomain. Also change sslType to NONSSL. The file should look as follows:\n# Load balancer type. Supported values are: NGINX type: NGINX # SSL configuration Type. Supported Values are : NONSSL,SSL sslType: NONSSL # domainType. Supported values are: oim domainType: oim #WLS domain as backend to the load balancer wlsDomain: domainUID: governancedomain adminServerName: AdminServer adminServerPort: 7001 adminServerSSLPort: soaClusterName: soa_cluster soaManagedServerPort: 8001 soaManagedServerSSLPort: oimClusterName: oim_cluster oimManagedServerPort: 14000 oimManagedServerSSLPort: # Host specific values hostName: enabled: false admin: runtime: internal: # Ngnix specific values nginx: nginxTimeOut: 180   Create an ingress for the domain   Create an Ingress for the domain (governancedomain-nginx), in the domain namespace by using the sample Helm chart:\n$ cd $WORKDIR $ helm install governancedomain-nginx kubernetes/charts/ingress-per-domain --namespace \u0026lt;namespace\u0026gt; --values kubernetes/charts/ingress-per-domain/values.yaml Note: The \u0026lt;workdir\u0026gt;/kubernetes/charts/ingress-per-domain/templates/nginx-ingress-nonssl.yaml has nginx.ingress.kubernetes.io/enable-access-log set to false. If you want to enable access logs then set this value to true before executing the command. Enabling access-logs can cause issues with disk space if not regularly maintained.\nFor example:\n$ cd $WORKDIR $ helm install governancedomain-nginx kubernetes/charts/ingress-per-domain --namespace oigns --values kubernetes/charts/ingress-per-domain/values.yaml The output will look similar to the following:\n$ helm install governancedomain-nginx kubernetes/charts/ingress-per-domain --namespace oigns --values kubernetes/charts/ingress-per-domain/values.yaml NAME: governancedomain-nginx LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oigns STATUS: deployed REVISION: 1 TEST SUITE: None   Run the following command to show the ingress is created successfully:\n$ kubectl get ing -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get ing -n oigns The output will look similar to the following:\nNAME CLASS HOSTS ADDRESS PORTS AGE governancedomain-nginx \u0026lt;none\u0026gt; * x.x.x.x 80 47s   Find the NodePort of NGINX using the following command (only if you installed NGINX using NodePort):\n$ kubectl get services -n nginx -o jsonpath=”{.spec.ports[0].nodePort}” nginx-ingress-ingress-nginx-controller The output will look similar to the following:\n31530   Run the following command to check the ingress:\n$ kubectl describe ing governancedomain-ingress -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe ing governancedomain-nginx -n oigns The output will look similar to the following:\nName: governancedomain-nginx Namespace: oigns Address: Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) Rules: Host Path Backends ---- ---- -------- * /console governancedomain-adminserver:7001 (10.244.2.50:7001) /consolehelp governancedomain-adminserver:7001 (10.244.2.50:7001) /em governancedomain-adminserver:7001 (10.244.2.50:7001) /ws_utc governancedomain-cluster-soa-cluster:8001 (10.244.2.51:8001) /soa governancedomain-cluster-soa-cluster:8001 (10.244.2.51:8001) /integration governancedomain-cluster-soa-cluster:8001 (10.244.2.51:8001) /soa-infra governancedomain-cluster-soa-cluster:8001 (10.244.2.51:8001) /identity governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /admin governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /oim governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /sysadmin governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /workflowservice governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /callbackResponseService governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /spml-xsd governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /HTTPClnt governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /reqsvc governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /iam governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /provisioning-callback governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /CertificationCallbackService governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /ucs governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /FacadeWebApp governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /OIGUI governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /weblogic governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) Annotations: meta.helm.sh/release-name: governancedomain-nginx meta.helm.sh/release-namespace: oigns nginx.ingress.kubernetes.io/affinity: cookie nginx.ingress.kubernetes.io/affinity-mode: persistent nginx.ingress.kubernetes.io/enable-access-log: false nginx.ingress.kubernetes.io/proxy-read-timeout: 180 nginx.ingress.kubernetes.io/proxy-send-timeout: 180 nginx.ingress.kubernetes.io/session-cookie-name: sticky Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 27s nginx-ingress-controller Scheduled for sync   To confirm that the new ingress is successfully routing to the domain\u0026rsquo;s server pods, run the following command to send a request to the URL for the WebLogic ReadyApp framework:\nNote: If using a load balancer for your ingress replace ${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT} with ${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT}.\n$ curl -v http://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/weblogic/ready For example:\na) For NodePort\n$ curl -v http://masternode.example.com:31530/weblogic/ready b) For LoadBalancer\n$ curl -v http://masternode.example.com:80/weblogic/ready The output will look similar to the following:\n$ curl -v http://masternode.example.com:31530/weblogic/ready * About to connect() to masternode.example.com port 31530 (#0) * Trying X.X.X.X... * Connected to masternode.example.com (X.X.X.X) port 31530 (#0) \u0026gt; GET /weblogic/ready HTTP/1.1 \u0026gt; User-Agent: curl/7.29.0 \u0026gt; Host: masternode.example.com:31530 \u0026gt; Accept: */* \u0026gt; \u0026lt; HTTP/1.1 200 OK \u0026lt; Server: nginx/1.19.2 \u0026lt; Date: \u0026lt;DATE\u0026gt; \u0026lt; Content-Length: 0 \u0026lt; Connection: keep-alive \u0026lt; * Connection #0 to host masternode.example.com left intact   Verify that you can access the domain URL After setting up the NGINX ingress, verify that the domain applications are accessible through the NGINX ingress port (for example 31530) as per Validate Domain URLs \n"
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oud/manage-oud-containers/logging-and-visualization/",
	"title": "b) Logging and Visualization for Helm Chart oud-ds-rs Deployment",
	"tags": [],
	"description": "Describes the steps for logging and visualization with Elasticsearch and Kibana.",
	"content": " Introduction Install Elasticsearch and Kibana Create a Kubernetes secret Enable Logstash  Upgrade OUD deployment with ELK configuration Verify the pods Troubleshooting   Verify and access the Kibana console  Introduction This section describes how to install and configure logging and visualization for the oud-ds-rs Helm chart deployment.\nThe ELK stack consists of Elasticsearch, Logstash, and Kibana. Using ELK you can gain insights in real-time from the log data from your applications.\n Elasticsearch is a distributed, RESTful search and analytics engine capable of solving a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data so you can discover the expected and uncover the unexpected. Logstash is an open source, server-side data processing pipeline that ingests data from a multitude of sources simultaneously, transforms it, and then sends it to your favorite “stash.” Kibana lets you visualize your Elasticsearch data and navigate the Elastic Stack. It gives you the freedom to select the way you give shape to your data. And you don’t always have to know what you\u0026rsquo;re looking for.  Install Elasticsearch and Kibana If you do not already have a centralized Elasticsearch (ELK) stack then you must configure this first. For details on how to configure the ELK stack, follow Installing Elasticsearch (ELK) Stack and Kibana\nCreate the logstash pod Variables used in this chapter In order to create the logstash pod, you must create a yaml file. This file contains variables which you must substitute with variables applicable to your ELK environment.\nMost of the values for the variables will be based on your ELK deployment as per Installing Elasticsearch (ELK) Stack and Kibana.\nThe table below outlines the variables and values you must set:\n   Variable Sample Value Description     \u0026lt;ELK_VER\u0026gt; 8.3.1 The version of logstash you want to install.   \u0026lt;ELK_SSL\u0026gt; true If SSL is enabled for ELK set the value to true, or if NON-SSL set to false. This value must be lowercase.   \u0026lt;ELK_HOSTS\u0026gt; https://elasticsearch.example.com:9200 The URL for sending logs to Elasticsearch. HTTP if NON-SSL is used.   \u0026lt;ELK_USER\u0026gt; logstash_internal The name of the user for logstash to access Elasticsearch.   \u0026lt;ELK_PASSWORD\u0026gt; password The password for ELK_USER.   \u0026lt;ELK_APIKEY\u0026gt; apikey The API key details.    You will also need the BASE64 version of the Certificate Authority (CA) certificate(s) that signed the certificate of the Elasticsearch server. If using a self-signed certificate, this is the self signed certificate of the Elasticsearch server. See Copying the Elasticsearch Certificate for details on how to get the correct certificate. In the example below the certificate is called elk.crt.\nCreate a kubernetes secret   Create a Kubernetes secret for Elasticsearch using the API Key or Password.\na) If ELK uses an API Key for authentication:\n$ kubectl create secret generic elasticsearch-pw-elastic -n \u0026lt;domain_namespace\u0026gt; --from-literal password=\u0026lt;ELK_APIKEY\u0026gt; For example:\n$ kubectl create secret generic elasticsearch-pw-elastic -n oudns --from-literal password=\u0026lt;ELK_APIKEY\u0026gt; The output will look similar to the following:\nsecret/elasticsearch-pw-elastic created b) If ELK uses a password for authentication:\n$ kubectl create secret generic elasticsearch-pw-elastic -n \u0026lt;domain_namespace\u0026gt; --from-literal password=\u0026lt;ELK_PASSWORD\u0026gt; For example:\n$ kubectl create secret generic elasticsearch-pw-elastic -n oudns --from-literal password=\u0026lt;ELK_PASSWORD\u0026gt; The output will look similar to the following:\nsecret/elasticsearch-pw-elastic created Note: It is recommended that the ELK Stack is created with authentication enabled. If no authentication is enabled you may create a secret using the values above.\n  Check that the dockercred secret that was created previously in Create a Kubernetes secret for cronjob images exists:\n$ kubectl get secret -n \u0026lt;domain_namespace\u0026gt; | grep dockercred For example,\n$ kubectl get secret -n oudns | grep dockercred The output will look similar to the following:\ndockercred kubernetes.io/dockerconfigjson 1 149m If the secret does not exist, create it as per Create a Kubernetes secret for cronjob images.\n  Enable logstash   Navigate to the $WORKDIR/kubernetes/helm directory and create a logging-override-values.yaml file as follows:\nelk: imagePullSecrets: - name: dockercred IntegrationEnabled: true logStashImage: logstash:\u0026lt;ELK_VER\u0026gt; logstashConfigMap: false esindex: oudlogs-00001 sslenabled: \u0026lt;ELK_SSL\u0026gt; eshosts: \u0026lt;ELK_HOSTS\u0026gt; # Note: We need to provide either esuser,espassword or esapikey esuser: \u0026lt;ELK_USER\u0026gt; espassword: elasticsearch-pw-elastic esapikey: elasticsearch-pw-elastic  Change the \u0026lt;ELK_VER\u0026gt;, \u0026lt;ELK_SSL\u0026gt;, \u0026lt;ELK_HOSTS\u0026gt;, and \u0026lt;ELK_USER\u0026gt; to match the values for your environment. If using SSL, replace the elk.crt in $WORKDIR/kubernetes/helm/oud-ds-rs/certs/ with the elk.crt for your ElasticSearch server. If using API KEY for your ELK authentication, leave both esuser: and espassword: with no value. If using a password for ELK authentication, leave esapi_key: but delete elasticsearch-pw-elastic. If no authentication is used for ELK, leave esuser, espassword, and esapi_key with no value assigned. The rest of the lines in the yaml file should not be changed.  For example:\nelk: imagePullSecrets: - name: dockercred IntegrationEnabled: true logStashImage: logstash:8.3.1 logstashConfigMap: false esindex: oudlogs-00001 sslenabled: true eshosts: https://elasticsearch.example.com:9200 # Note: We need to provide either esuser,espassword or esapikey esuser: logstash_internal espassword: elasticsearch-pw-elastic esapikey:   Upgrade OUD deployment with ELK configuration   Run the following command to upgrade the OUD deployment with the ELK configuration:\n$ helm upgrade --namespace \u0026lt;namespace\u0026gt; --values \u0026lt;valuesfile.yaml\u0026gt; \u0026lt;releasename\u0026gt; oud-ds-rs --reuse-values For example:\n$ helm upgrade --namespace oudns --values logging-override-values.yaml oud-ds-rs oud-ds-rs --reuse-values The output should look similar to the following:\nRelease \u0026quot;oud-ds-rs\u0026quot; has been upgraded. Happy Helming! NAME: oud-ds-rs LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oudns STATUS: deployed REVISION: 2 NOTES: # # Copyright (c) 2020, 2022, Oracle and/or its affiliates. # # Licensed under the Universal Permissive License v 1.0 as shown at # https://oss.oracle.com/licenses/upl # # Since \u0026quot;nginx\u0026quot; has been chosen, follow the steps below to configure nginx ingress controller. Add Repo reference to helm for retriving/installing Chart for nginx-ingress implementation. command-# helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx Command helm install to install nginx-ingress related objects like pod, service, deployment, etc. # helm install --namespace \u0026lt;namespace for ingress\u0026gt; --values nginx-ingress-values-override.yaml lbr-nginx ingress-nginx/ingress-nginx For details of content of nginx-ingress-values-override.yaml refer README.md file of this chart. Run these commands to check port mapping and services: # kubectl --namespace \u0026lt;namespace for ingress\u0026gt; get services -o wide -w lbr-nginx-ingress-controller # kubectl describe --namespace \u0026lt;namespace for oud-ds-rs chart\u0026gt; ingress.extensions/oud-ds-rs-http-ingress-nginx # kubectl describe --namespace \u0026lt;namespace for oud-ds-rs chart\u0026gt; ingress.extensions/oud-ds-rs-admin-ingress-nginx Accessible interfaces through ingress: (External IP Address for LoadBalancer NGINX Controller can be determined through details associated with lbr-nginx-ingress-controller) 1. OUD Admin REST: Port: http/https 2. OUD Data REST: Port: http/https 3. OUD Data SCIM: Port: http/https 4. OUD LDAP/LDAPS: Port: ldap/ldaps 5. OUD Admin LDAPS: Port: ldaps Please refer to README.md from Helm Chart to find more details about accessing interfaces and configuration parameters. Accessible interfaces through ingress: 1. OUD Admin REST: Port: http/https 2. OUD Data REST: Port: http/https 3. OUD Data SCIM: Port: http/https Please refer to README.md from Helm Chart to find more details about accessing interfaces and configuration parameters.   Verify the pods Using NFS Storage If you are using OUD with NFS or file system storage, a new logstash pod will be created.\n  Run the following command to check the logstash pod is created correctly:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods -n oudns The output should look similar to the following:\nNAME READY STATUS RESTARTS AGE oud-ds-rs-0 1/1 Running 0 150m oud-ds-rs-1 1/1 Running 0 143m oud-ds-rs-2 1/1 Running 0 137m oud-ds-rs-logstash-5dc8d94597-knk8g 1/1 Running 0 2m12s oud-pod-cron-job-27758370-wpfq7 0/1 Completed 0 66m oud-pod-cron-job-27758400-kd6pn 0/1 Completed 0 36m oud-pod-cron-job-27758430-ndmgj 0/1 Completed 0 6m33s Note: Wait a couple of minutes to make sure the pod has not had any failures or restarts. If the pod fails you can view the pod log using:\n$ kubectl logs -f oud-ds-rs-logstash-\u0026lt;pod\u0026gt; -n oudns See Troubleshooting for further details.\n  With Block Storage If you are using OUD with block devices, the logstash pod will run as a separate sidecar container in the OUD pods.\n  Run the following command to check the sidecar pod is created:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods -n oudns The output should look similar to the following:\nNAME READY STATUS RESTARTS AGE oud-ds-rs-0 2/2 Running 0 24m oud-ds-rs-1 2/2 Running 0 17m oud-ds-rs-2 2/2 Running 0 10m etc.. Notice the pods oud-ds-rs-0 - oud-ds-rs-2 have a READY status of 2/2.\nNote: The pods will terminate one at a time and restart to add the sidecar logstash container. For example oud-ds-rs-2 will terminate and restart. oud-ds-rs1 will not terminate until oud-ds-rs-2 is at 2/2. If any of the pods fail, you can view the pod logs using:\n$ kubectl logs -f oud-ds-rs-\u0026lt;pod\u0026gt; -c oud-ds-rs-logstash -n oudns ``\nSee Troubleshooting for further details.\n  Troubleshooting Most errors occur due to misconfiguration of the logging-override-values.yaml. This is usually because of an incorrect value set, or the certificate was not pasted with the correct indentation.\nIf the pod has errors, view the helm history to find the last working revision, for example:\n$ helm history oud-ds-rs -n oudns The output will look similar to the following:\nREVISION UPDATED STATUS CHART APP VERSION DESCRIPTION 1 \u0026lt;DATE\u0026gt; superseded oud-ds-rs-0.2 12.2.1.4.0 Install complete 2 \u0026lt;DATE\u0026gt; deployed oud-ds-rs-0.2 12.2.1.4.0 Upgrade complete Rollback to the previous working revision by running:\n$ helm rollback \u0026lt;release\u0026gt; \u0026lt;revision\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\nhelm rollback oud-ds-rs 1 -n oudns Once you have resolved the issue in the yaml files, run the helm upgrade command outlined earlier to recreate the logstash pod.\nVerify and access the Kibana console To access the Kibana console you will need the Kibana URL as per Installing Elasticsearch (ELK) Stack and Kibana.\nFor Kibana 7.7.x and below:\n  Access the Kibana console with http://\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;/app/kibana and login with your username and password.\n  From the Navigation menu, navigate to Management \u0026gt; Kibana \u0026gt; Index Patterns.\n  In the Create Index Pattern page enter oudlogs* for the Index pattern and click Next Step.\n  In the Configure settings page, from the Time Filter field name drop down menu select @timestamp and click Create index pattern.\n  Once the index pattern is created click on Discover in the navigation menu to view the OUD logs.\n  For Kibana version 7.8.X and above:\n  Access the Kibana console with http://\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;/app/kibana and login with your username and password.\n  From the Navigation menu, navigate to Management \u0026gt; Stack Management.\n  Click Data Views in the Kibana section.\n  Click Create Data View and enter the following information:\n Name: oudlogs* Timestamp: @timestamp    Click Create Data View.\n  From the Navigation menu, click Discover to view the log file entries.\n  From the drop down menu, select oudlogs* to view the log file entries.\n  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oudsm/manage-oudsm-containers/logging-and-visualization/",
	"title": "b) Logging and Visualization for Helm Chart oudsm Deployment",
	"tags": [],
	"description": "Describes the steps for logging and visualization with Elasticsearch and Kibana.",
	"content": "Introduction This section describes how to install and configure logging and visualization for the oudsm Helm chart deployment.\nThe ELK stack consists of Elasticsearch, Logstash, and Kibana. Using ELK you can gain insights in real-time from the log data from your applications.\n Elasticsearch is a distributed, RESTful search and analytics engine capable of solving a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data so you can discover the expected and uncover the unexpected. Logstash is an open source, server-side data processing pipeline that ingests data from a multitude of sources simultaneously, transforms it, and then sends it to your favorite “stash.” Kibana lets you visualize your Elasticsearch data and navigate the Elastic Stack. It gives you the freedom to select the way you give shape to your data. And you don’t always have to know what you\u0026rsquo;re looking for.  Install Elasticsearch and Kibana If you do not already have a centralized Elasticsearch (ELK) stack then you must configure this first. For details on how to configure the ELK stack, follow Installing Elasticsearch (ELK) Stack and Kibana\nCreate the logstash pod Variables used in this chapter In order to create the logstash pod, you must create a yaml file. This file contains variables which you must substitute with variables applicable to your ELK environment.\nMost of the values for the variables will be based on your ELK deployment as per Installing Elasticsearch (ELK) Stack and Kibana.\nThe table below outlines the variables and values you must set:\n   Variable Sample Value Description     \u0026lt;ELK_VER\u0026gt; 8.3.1 The version of logstash you want to install.   \u0026lt;ELK_SSL\u0026gt; true If SSL is enabled for ELK set the value to true, or if NON-SSL set to false. This value must be lowercase.   \u0026lt;ELK_HOSTS\u0026gt; https://elasticsearch.example.com:9200 The URL for sending logs to Elasticsearch. HTTP if NON-SSL is used.   \u0026lt;ELK_USER\u0026gt; logstash_internal The name of the user for logstash to access Elasticsearch.   \u0026lt;ELK_PASSWORD\u0026gt; password The password for ELK_USER.   \u0026lt;ELK_APIKEY\u0026gt; apikey The API key details.    You will also need the BASE64 version of the Certificate Authority (CA) certificate(s) that signed the certificate of the Elasticsearch server. If using a self-signed certificate, this is the self signed certificate of the Elasticsearch server. See Copying the Elasticsearch Certificate for details on how to get the correct certificate. In the example below the certificate is called elk.crt.\nCreate Kubernetes secrets   Create a Kubernetes secret for Elasticsearch using the API Key or Password.\na) If ELK uses an API Key for authentication:\n$ kubectl create secret generic elasticsearch-pw-elastic -n \u0026lt;domain_namespace\u0026gt; --from-literal password=\u0026lt;ELK_APIKEY\u0026gt; For example:\n$ kubectl create secret generic elasticsearch-pw-elastic -n oudsmns --from-literal password=\u0026lt;ELK_APIKEY\u0026gt; The output will look similar to the following:\nsecret/elasticsearch-pw-elastic created b) If ELK uses a password for authentication:\n$ kubectl create secret generic elasticsearch-pw-elastic -n \u0026lt;domain_namespace\u0026gt; --from-literal password=\u0026lt;ELK_PASSWORD\u0026gt; For example:\n$ kubectl create secret generic elasticsearch-pw-elastic -n oudsmns --from-literal password=\u0026lt;ELK_PASSWORD\u0026gt; The output will look similar to the following:\nsecret/elasticsearch-pw-elastic created Note: It is recommended that the ELK Stack is created with authentication enabled. If no authentication is enabled you may create a secret using the values above.\n  Create a Kubernetes secret to access the required images on hub.docker.com:\nNote: You must first have a user account on hub.docker.com:\n$ kubectl create secret docker-registry \u0026#34;dockercred\u0026#34; --docker-server=\u0026#34;https://index.docker.io/v1/\u0026#34; --docker-username=\u0026#34;\u0026lt;docker_username\u0026gt;\u0026#34; --docker-password=\u0026lt;password\u0026gt; --docker-email=\u0026lt;docker_email_credentials\u0026gt; --namespace=\u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl create secret docker-registry \u0026quot;dockercred\u0026quot; --docker-server=\u0026quot;https://index.docker.io/v1/\u0026quot; --docker-username=\u0026quot;username\u0026quot; --docker-password=\u0026lt;password\u0026gt; --docker-email=user@example.com --namespace=oudsmns The output will look similar to the following:\nsecret/dockercred created   Enable logstash   Navigate to the $WORKDIR/kubernetes/helm directory and create a logging-override-values.yaml file as follows:\nelk: imagePullSecrets: - name: dockercred IntegrationEnabled: true logStashImage: logstash:\u0026lt;ELK_VER\u0026gt; logstashConfigMap: false esindex: oudsmlogs-00001 sslenabled: \u0026lt;ELK_SSL\u0026gt; eshosts: \u0026lt;ELK_HOSTS\u0026gt; # Note: We need to provide either esuser,espassword or esapikey esuser: \u0026lt;ELK_USER\u0026gt; espassword: elasticsearch-pw-elastic esapikey: elasticsearch-pw-elastic  Change the \u0026lt;ELK_VER\u0026gt;, \u0026lt;ELK_SSL\u0026gt;, \u0026lt;ELK_HOSTS\u0026gt;, and \u0026lt;ELK_USER\u0026gt;, to match the values for your environment. If using SSL, replace the elk.crt in $WORKDIR/kubernetes/helm/oudsm/certs/ with the elk.crt for your ElasticSearch server. If using API KEY for your ELK authentication, leave both esuser: and espassword: with no value. If using a password for ELK authentication, leave esapi_key: but delete elasticsearch-pw-elastic. If no authentication is used for ELK, leave esuser, espassword, and esapi_key with no value assigned. The rest of the lines in the yaml file should not be changed.  For example:\nelk: imagePullSecrets: - name: dockercred IntegrationEnabled: true logStashImage: logstash:8.3.1 logstashConfigMap: false esindex: oudsmlogs-00001 sslenabled: true eshosts: https://elasticsearch.example.com:9200 # Note: We need to provide either esuser,espassword or esapikey esuser: logstash_internal espassword: elasticsearch-pw-elastic esapikey:   Upgrade oudsm deployment with ELK configuration   Run the following command to upgrade the oudsm deployment with the ELK configuration:\n$ helm upgrade --namespace \u0026lt;namespace\u0026gt; --values \u0026lt;valuesfile.yaml\u0026gt; \u0026lt;releasename\u0026gt; oudsm --reuse-values For example:\n$ helm upgrade --namespace oudsmns --values logging-override-values.yaml oudsm oudsm --reuse-values The output should look similar to the following:\nRelease \u0026quot;oudsm\u0026quot; has been upgraded. Happy Helming! NAME: oudsm LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oudsmns STATUS: deployed REVISION: 2 TEST SUITE: None   Verify the pods   Run the following command to check the logstash pod is created correctly:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods -n oudsmns The output should look similar to the following:\nNAME READY STATUS RESTARTS AGE oudsm-1 1/1 Running 0 51m oudsm-logstash-56dbcc6d9f-mxsgj 1/1 Running 0 2m7s Note: Wait a couple of minutes to make sure the pod has not had any failures or restarts. If the pod fails you can view the pod log using:\n$ kubectl logs -f oudsm-logstash-\u0026lt;pod\u0026gt; -n oudsmns Most errors occur due to misconfiguration of the logging-override-values.yaml. This is usually because of an incorrect value set, or the certificate was not pasted with the correct indentation.\nIf the pod has errors, view the helm history to find the last working revision, for example:\n$ helm history oudsm -n oudsmns The output will look similar to the following:\nREVISION UPDATED STATUS CHART APP VERSION DESCRIPTION 1 \u0026lt;DATE\u0026gt; superseded oudsm-0.1 12.2.1.4.0 Install complete 2 \u0026lt;DATE\u0026gt; deployed oudsm-0.1 12.2.1.4.0 Upgrade complete Rollback to the previous working revision by running:\n$ helm rollback \u0026lt;release\u0026gt; \u0026lt;revision\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\nhelm rollback oudsm 1 -n oudsmns Once you have resolved the issue in the yaml files, run the helm upgrade command outlined earlier to recreate the logstash pod.\n  Verify and access the Kibana console To access the Kibana console you will need the Kibana URL as per Installing Elasticsearch (ELK) Stack and Kibana.\nFor Kibana 7.7.x and below:\n  Access the Kibana console with http://\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;/app/kibana and login with your username and password.\n  From the Navigation menu, navigate to Management \u0026gt; Kibana \u0026gt; Index Patterns.\n  In the Create Index Pattern page enter oudsmlogs* for the Index pattern and click Next Step.\n  In the Configure settings page, from the Time Filter field name drop down menu select @timestamp and click Create index pattern.\n  Once the index pattern is created click on Discover in the navigation menu to view the OUDSM logs.\n  For Kibana version 7.8.X and above:\n  Access the Kibana console with http://\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;/app/kibana and login with your username and password.\n  From the Navigation menu, navigate to Management \u0026gt; Stack Management.\n  Click Data Views in the Kibana section.\n  Click Create Data View and enter the following information:\n Name: oudsmlogs* Timestamp: @timestamp    Click Create Data View.\n  From the Navigation menu, click Discover to view the log file entries.\n  From the drop down menu, select oudsmlogs* to view the log file entries.\n  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/create-oam-domains/create-oam-domains-using-wdt-models/",
	"title": "b. Create OAM domains using WDT models",
	"tags": [],
	"description": "",
	"content": "  Introduction\n  Prerequisites\n  Create OAM domains using WDT models\na. Prepare the persistent storage\nb. Create Kubernetes secrets for the domain and RCU\nc. Generate WDT models and the domain resource yaml file\nd. Build the Domain Creation Image\ne. Deploy the OAM domain resource\n  Verify the results\na. Verify the domain, pods and services\nb. Verify the domain\nc. Verify the pods\n  Introduction This section demonstrates the creation of an OAM domain home using sample WebLogic Deploy Tooling (WDT) model files.\nFrom WebLogic Kubernetes Operator version 4.1.2 onwards, you can provide a section, domain.spec.configuration.initializeDomainOnPV, to initialize an OAM domain on a persistent volume when it is first deployed. This eliminates the need to pre-create your OAM domain using sample Weblogic Scripting Tool (WLST) offline scripts.\nWith WLST offline scripts it is required to deploy a separate Kubernetes job that creates the domain on a persistent volume, and then deploy the domain with a custom resource YAML. The RCU schema also had to be created manually. Now, using WDT models, all the required information is specified in the domain custom resource YAML file, eliminating the requirement for a separate Kubernetes job. With WDT models, the WebLogic Kubernetes Operator will create the RCU schemas, create the persistent volume and claim, then create the WebLogic domain on the persistent volume, prior to starting the servers.\nNote: This is a one time only initialization. After the domain is created, subsequent updates to this section in the domain resource YAML file will not recreate or update the WebLogic domain. Subsequent domain lifecycle updates must be controlled by the WebLogic Server Administration Console, Enterprise Manager Console, WebLogic Scripting Tool (WLST), or other mechanisms.\nWeblogic Deploy Tooling (WDT) models are a convenient and simple alternative to WebLogic Scripting Tool (WLST) configuration scripts. They compactly define a WebLogic domain using model files, variable properties files, and application archive files. For more information about the model format and its integration, see Usage and Working with WDT Model files. The WDT model format is fully described in the open source, WebLogic Deploy Tooling GitHub project.\nThe main benefits of WDT are:\n A set of single-purpose tools supporting Weblogic domain configuration lifecycle operations. All tools work off of a shared, declarative model, eliminating the need to maintain specialized WLST scripts. WDT knowledge base understands the MBeans, attributes, and WLST capabilities/bugs across WLS versions.  The initializeDomainOnPv section:\n Creates the PersistentVolume (PV) and/or PersistenVolumeClaim (PVC). Creates the RCU schema. Creates the OAM domain home on the persistent volume based on the provided WDT models  Prerequisites Before you begin, perform the following steps:\n Review the Domain On PV documentation. Ensure that the database is up and running.  Create OAM domains using WDT models In this section you will:\n Prepare the persistent storage. Create Kubernetes secrets for the domain and RCU. Generate the WDT models and the domain resource yaml file. Build the domain creation image hosting the WDT models and WDT installation. Deploy the OAM domain resource  Note: In this section a domain creation image is built using the supplied model files and that image is used for domain creation. You will need your own container registry to upload the domain image to. Having your own container repository is a prerequisite before creating an OAM domain with WDT models. If you don\u0026rsquo;t have your own container registry, you can load the image on each node in the cluster instead. This documentation does not explain how to create your own container registry, or how to load the image onto each node. Consult your vendor specific documentation for more information.\nNote: Building a domain creation image is a one time activity. The domain creation image can be used to create an OAM domain in multiple environments. You do not need to rebuild the domain creation image every time you create a domain.\nPrepare the persistent storage As referenced in Prerequisites the nodes in the Kubernetes cluster must have access to a persistent volume such as a Network File System (NFS) mount or a shared file system.\nDomain on persistent volume (Domain on PV) is an operator domain home source type, which requires that the domain home exists on a persistent volume.\nWhen a container is started, it needs to mount that volume. The physical volume should be on a shared disk accessible by all the Kubernetes worker nodes because it is not known on which worker node the container will be started. In the case of Oracle Identity and Access Management, the persistent volume does not get erased when a container stops. This enables persistent configurations.\nThe example below uses an NFS mounted volume (\u0026lt;persistent_volume\u0026gt;/accessdomainpv). Other volume types can also be used. See the official Kubernetes documentation for Volumes.\nNote: The persistent volume directory needs to be accessible to both the master and worker node(s). In this example /scratch/shared/accessdomainpv is accessible from all nodes via NFS.\nTo create the persistent volume run the following commands:\n  Create the required directories:\n$ mkdir -p \u0026lt;persistent_volume\u0026gt;/accessdomainpv $ sudo chown -R 1000:0 \u0026lt;persistent_volume\u0026gt;/accessdomainpv For example:\n$ mkdir -p /scratch/shared/accessdomainpv $ sudo chown -R 1000:0 /scratch/shared/accessdomainpv   On the master node run the following command to ensure it is possible to read and write to the persistent volume:\ncd \u0026lt;persistent_volume\u0026gt;/accessdomainpv touch file.txt ls filemaster.txt For example:\ncd /scratch/shared/accessdomainpv touch filemaster.txt ls filemaster.txt   On the first worker node run the following to ensure it is possible to read and write to the persistent volume:\ncd /scratch/shared/accessdomainpv ls filemaster.txt touch fileworker1.txt ls fileworker1.txt   Repeat the above for any other worker nodes e.g fileworker2.txt etc. Once proven that it’s possible to read and write from each node to the persistent volume, delete the files created.\nFor more information on PV and PVC requirements, see Domain on Persistent Volume (PV).\n  Create Kubernetes secrets for the domain and RCU In this section you create the Kubernetes secrets for the OAM doman and RCU.\n  Create a Kubernetes secret for the domain using the create-weblogic-credentials script in the same Kubernetes namespace as the domain:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils $ ./create-secret.sh -l \u0026#34;username=weblogic\u0026#34; -l \u0026#34;password=\u0026lt;password\u0026gt;\u0026#34; -n \u0026lt;domain_namespace\u0026gt; -d \u0026lt;domain_uid\u0026gt; -s \u0026lt;domain-uid\u0026gt;-weblogic-credentials where:\n-n \u0026lt;domain_namespace\u0026gt; is the domain namespace you created in Create a namespace for Oracle Access Management. For example oamns.\n-d \u0026lt;domain_uid\u0026gt; is the domain UID that you want to create. For example, accessdomain.\n-s \u0026lt;domain-uid\u0026gt;-weblogic-credentials is the name of the secret for this namespace. Note: the secret name must follow this format (\u0026lt;domain-uid\u0026gt;-weblogic-credentials) or domain creation will fail.\nFor example:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils $ ./create-secret.sh -l \u0026#34;username=weblogic\u0026#34; -l \u0026#34;password=\u0026lt;password\u0026gt;\u0026#34; -n oamns -d accessdomain -s accessdomain-weblogic-credentials The output will look similar to the following:\n@@ Info: Setting up secret \u0026#39;accessdomain-weblogic-credentials\u0026#39;. secret/accessdomain-weblogic-credentials created secret/accessdomain-weblogic-credentials labeled   Verify the secret is created using the following command:\n$ kubectl get secret \u0026lt;kubernetes_domain_secret\u0026gt; -o yaml -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get secret accessdomain-weblogic-credentials -o yaml -n oamns apiVersion: v1 data: password: \u0026lt;password\u0026gt; username: d2VibG9naWM= kind: Secret metadata: creationTimestamp: \u0026#34;\u0026lt;DATE\u0026gt;\u0026#34; labels: weblogic.domainUID: accessdomain name: accessdomain-weblogic-credentials namespace: oamns resourceVersion: \u0026#34;44175245\u0026#34; uid: a135780e-6f3b-4be1-8643-f81bfb9ba399 type: Opaque   Create a Kubernetes secret for RCU in the same Kubernetes namespace, using the create-secrets.sh script:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils $ ./create-secret.sh -l \u0026#34;rcu_prefix=\u0026lt;rcu_prefix\u0026gt;\u0026#34; -l \u0026#34;rcu_schema_password=\u0026lt;rcu_schema_pwd\u0026gt;\u0026#34; -l \u0026#34;db_host=\u0026lt;db_host.domain\u0026gt;\u0026#34; -l \u0026#34;db_port=1521\u0026#34; -l \u0026#34;db_service=\u0026lt;service_name\u0026gt;\u0026#34; -l \u0026#34;dba_user=\u0026lt;sys_db_user\u0026gt;\u0026#34; -l \u0026#34;dba_password=\u0026lt;sys_db_pwd\u0026gt;\u0026#34; -n \u0026lt;domain_namespace\u0026gt; -d \u0026lt;domain_uid\u0026gt; -s \u0026lt;domain_uid\u0026gt;-rcu-credentials where\n\u0026lt;rcu_prefix\u0026gt; is the name of the RCU schema to be created.\n\u0026lt;rcu_schema_pwd\u0026gt; is the password you want to create for the RCU schema prefix.\n\u0026lt;db_host.domain\u0026gt; is the hostname.domain of the database.\n\u0026lt;sys_db_user\u0026gt; is the database user with sys dba privilege.\n\u0026lt;sys_db_pwd\u0026gt; is the sys database password.\n\u0026lt;domain_uid\u0026gt; is the domain_uid that you want to create. This must be the same domain_uid used in the domain secret. For example, accessdomain.\n\u0026lt;domain_namespace\u0026gt; is the domain namespace. This the domain namespace you created in Create a namespace for Oracle Access Management. For example oamns.\n\u0026lt;domain_uid\u0026gt;-rcu-credentials is the name of the rcu secret to create. Note: The secret name must follow this format (\u0026lt;domain_uid\u0026gt;-rcu-credentials) or domain creation will fail.\nFor example:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils $ ./create-secret.sh -l \u0026#34;rcu_prefix=OAMK8S\u0026#34; -l \u0026#34;rcu_schema_password=\u0026lt;password\u0026gt;\u0026#34; -l \u0026#34;db_host=mydatabasehost.example.com\u0026#34; -l \u0026#34;db_port=1521\u0026#34; -l \u0026#34;db_service=orcl.example.com\u0026#34; -l \u0026#34;dba_user=sys\u0026#34; -l \u0026#34;dba_password=\u0026lt;password\u0026gt;\u0026#34; -n oamns -d accessdomain -s accessdomain-rcu-credentials The output will look similar to the following:\n@@ Info: Setting up secret \u0026#39;accessdomain-rcu-credentials\u0026#39;. secret/accessdomain-rcu-credentials created secret/accessdomain-rcu-credentials labeled   Verify the secret is created using the following command:\n$ kubectl get secret \u0026lt;kubernetes_rcu_secret\u0026gt; -o yaml -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get secrets -n oamns accessdomain-rcu-credentials -o yaml The output will look similar to the following:\napiVersion: v1 data: db_host: \u0026lt;DB_HOST\u0026gt; db_port: MTUyMQ== db_service: \u0026lt;SERVICE_NAME\u0026gt; dba_password: \u0026lt;PASSWORD\u0026gt; dba_user: c3lz rcu_prefix: \u0026lt;RCU_PREFIX\u0026gt; rcu_schema_password: \u0026lt;RCU_PWD\u0026gt; kind: Secret metadata: creationTimestamp: \u0026#34;\u0026lt;DATE\u0026gt;\u0026#34; labels: weblogic.domainUID: accessdomain name: accessdomain-rcu-credentials namespace: oamns resourceVersion: \u0026#34;866948\u0026#34; uid: b5e3b4e0-9458-4413-a6ff-874e9af7511b type: Opaque   Generate WDT models and the domain resource yaml file In this section you generate the required WDT models for the OAM domain, along with the domain resource yaml file.\n  Navigate to the $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/generate_models_utils directory:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/generate_models_utils   Make a copy of the create-domain-wdt.yaml file:\n$ cp create-domain-wdt.yaml create-domain-wdt.yaml.orig   Edit the create-domain-wdt.yaml and modify the following parameters. Save the file when complete:\ndomainUID: \u0026lt;domain_uid\u0026gt; domainHome: /u01/oracle/user_projects/domains/\u0026lt;domain_uid\u0026gt; image: \u0026lt;image_name\u0026gt;:\u0026lt;tag\u0026gt; imagePullSecretName: \u0026lt;container_registry_secret\u0026gt; logHome: /u01/oracle/user_projects/domains/logs/\u0026lt;domain_uid\u0026gt; namespace: \u0026lt;domain_namespace\u0026gt; weblogicDomainStorageType: NFS weblogicDomainStorageNFSServer: \u0026lt;nfs_server\u0026gt; weblogicDomainStoragePath: \u0026lt;physical_path_of_persistent_storage\u0026gt; weblogicDomainStorageSize: 10G For example:\ndomainUID: accessdomain domainHome: /u01/oracle/user_projects/domains/accessdomain image: container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October'24\u0026gt; imagePullSecretName: orclcred logHome: /u01/oracle/user_projects/domains/logs/accessdomain namespace: oamns weblogicDomainStorageType: NFS weblogicDomainStorageNFSServer: mynfsserver weblogicDomainStoragePath: /scratch/shared/accessdomainpv weblogicDomainStorageSize: 10G ``\nNote : If using a shared file system instead of NFS, set weblogicDomainStorageType: HOST_PATH and remove weblogicDomainStorageNFSServer.\nA full list of parameters in the create-domain-wdt.yaml file are shown below:\n     Parameter Definition Default     adminPort Port number for the Administration Server inside the Kubernetes cluster. 7001   adminNodePort Port number for the Administration Server outside the Kubernetes cluster. 30701   configuredManagedServerCount Number of Managed Server instances to generate for the domain. 5   datasourceType Type of JDBC datasource applicable for the OAM domain. Legal values are agl and generic. Choose agl for Active GridLink datasource and generic for Generic datasource. For enterprise deployments, Oracle recommends that you use GridLink data sources to connect to Oracle RAC databases. See the Enterprise Deployment Guide for further details. generic   domainHome Home directory of the OAM domain. If not specified, the value is derived from the domainUID as /shared/domains/\u0026lt;domainUID\u0026gt;. /u01/oracle/user_projects/domains/accessdomain   domainPVMountPath Mount path of the domain persistent volume. /u01/oracle/user_projects/domains   domainUID Unique ID that will be used to identify this particular domain. Used as the name of the generated WebLogic domain as well as the name of the Kubernetes domain resource. This ID must be unique across all domains in a Kubernetes cluster. This ID cannot contain any character that is not valid in a Kubernetes service name. accessdomain   edgInstall Used only if performing an install using the Enterprise Deployment Guide. See, Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster. false   exposeAdminNodePort Boolean indicating if the Administration Server is exposed outside of the Kubernetes cluster. false   exposeAdminT3Channel Boolean indicating if the T3 administrative channel is exposed outside the Kubernetes cluster. true   image OAM container image. The operator requires OAM 12.2.1.4. Refer to Obtain the OAM container image for details on how to obtain or create the image. For WDT domains you must use April 24 or later. oracle/oam:12.2.1.4.0   imagePullSecretName Name of the Kubernetes secret to access the container registry to pull the OAM container image. The presence of the secret will be validated when this parameter is specified.    initialManagedServerReplicas Number of Managed Servers to initially start for the domain. 2   javaOptions Java options for starting the Administration Server and Managed Servers. A Java option can have references to one or more of the following pre-defined variables to obtain WebLogic domain information: $(DOMAIN_NAME), $(DOMAIN_HOME), $(ADMIN_NAME), $(ADMIN_PORT), and $(SERVER_NAME). -Dweblogic.StdoutDebugEnabled=false   logHome The in-pod location for the domain log, server logs, server out, and Node Manager log files. If not specified, the value is derived from the domainUID as /shared/logs/\u0026lt;domainUID\u0026gt;. /u01/oracle/user_projects/domains/logs/accessdomain   namespace Kubernetes namespace in which to create the domain. oamns   oamCPU Initial CPU Units, 1000m = 1 CPU core. 1000m   oamMaxCPU Initial memory allocated to pod. 2   oamMemory Initial memory allocated to a pod. 4Gi   oamMaxMemory Max memory a pod is allowed to consume. 8Gi   oamServerJavaParams The memory parameters to use for the OAM managed servers. \u0026quot;-Xms8192m -Xmx8192m\u0026quot;   productionModeEnabled Boolean indicating if production mode is enabled for the domain. true   t3PublicAddress Public address for the T3 channel. This should be set to the public address of the Kubernetes cluster. This would typically be a load balancer address. For development environments only: In a single server (all-in-one) Kubernetes deployment, this may be set to the address of the master, or at the very least, it must be set to the address of one of the worker nodes. If not provided, the script will attempt to set it to the IP address of the Kubernetes cluster   weblogicDomainStorageType Persistent volume storage type. Options are NFS for NFS volumes or HOST_PATH for shared file system. NFS   weblogicDomainStorageNFSServer Hostname or IP address of the NFS Server. nfsServer   weblogicDomainStoragePath Physical path to the persistent volume. /scratch/accessdomainpv   weblogicDomainStorageSize Total storage allocated to the persistent storage. 10Gi    Note: The above CPU and memory values are for examples only. For Enterprise Deployments, please review the performance recommendations and sizing requirements in Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster.\n Run the generate_wdt_models.sh, specifying your input file and an output directory to store the generated artifacts:\n $ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/generate_models_utils $ ./generate_wdt_models.sh -i create-domain-wdt.yaml -o \u0026lt;path_to_output_directory\u0026gt; For example:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/generate_models_utils $ ./generate_wdt_models.sh -i create-domain-wdt.yaml -o output The output will look similar to the following:\ninput parameters being used export version=\u0026quot;create-weblogic-sample-domain-inputs-v1\u0026quot; export adminPort=\u0026quot;7001\u0026quot; export domainUID=\u0026quot;accessdomain\u0026quot; export configuredManagedServerCount=\u0026quot;5\u0026quot; export initialManagedServerReplicas=\u0026quot;1\u0026quot; export productionModeEnabled=\u0026quot;true\u0026quot; export t3ChannelPort=\u0026quot;30012\u0026quot; export datasourceType=\u0026quot;generic\u0026quot; export edgInstall=\u0026quot;false\u0026quot; export domainHome=\u0026quot;/u01/oracle/user_projects/domains/accessdomain\u0026quot; export image=\u0026quot;container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October'24\u0026gt;\u0026quot; export imagePullSecretName=\u0026quot;orclcred\u0026quot; export logHome=\u0026quot;/u01/oracle/user_projects/domains/logs/accessdomain\u0026quot; export exposeAdminT3Channel=\u0026quot;false\u0026quot; export adminNodePort=\u0026quot;30701\u0026quot; export exposeAdminNodePort=\u0026quot;false\u0026quot; export namespace=\u0026quot;oamns\u0026quot; javaOptions=-Dweblogic.StdoutDebugEnabled=false export domainPVMountPath=\u0026quot;/u01/oracle/user_projects\u0026quot; export weblogicDomainStorageType=\u0026quot;NFS\u0026quot; export weblogicDomainStorageNFSServer=\u0026quot;mynfsServer\u0026quot; export weblogicDomainStoragePath=\u0026quot;/scratch/shared/accessdomainpv\u0026quot; export weblogicDomainStorageReclaimPolicy=\u0026quot;Retain\u0026quot; export weblogicDomainStorageSize=\u0026quot;10Gi\u0026quot; export oamServerJavaParams=\u0026quot;-Xms8192m -Xmx8192m\u0026quot; export oamMaxCPU=\u0026quot;2\u0026quot; export oamCPU=\u0026quot;1000m\u0026quot; export oamMaxMemory=\u0026quot;8Gi\u0026quot; export oamMemory=\u0026quot;4Gi\u0026quot; validateWlsDomainName called with accessdomain WDT model file, property file and sample domain.yaml are genereted successfully at output/weblogic-domains/accessdomain ``\nThis will generate domain.yaml, oam.yaml and oam.properties in output/weblogic-domains/accessdomain.\n  Copy the generated files to a $WORKDIR/yaml directory:\n $ mkdir $WORKDIR/yaml $ cp output/weblogic-domains/accessdomain/*.* $WORKDIR/yaml ``\n  Build the Domain Creation Image In this section you build a domain creation image to host the WDT model files and WebLogic Deploy Tooling (WDT) installer.\nDomain creation images are used for supplying WDT model files, WDT variables files, WDT application archive files (collectively known as WDT model files), and the directory where the WebLogic Deploy Tooling software is installed (known as the WDT Home), when deploying a domain using a Domain on PV model. You distribute WDT model files and the WDT executable using these images, and the WebLogic Kubernetes Operator uses them to manage the domain.\nNote: These images are only used for creating the domain and will not be used to update the domain. The domain creation image is used for domain creation only, it is not the product container image used for OAM.\nFor more details on creating the domain image, see Domain creation images.\nThe steps to build the domain creation image are shown in the sections below.\nPrerequisites Verify that your environment meets the following prerequisites:\n You have created the yaml files are per Generate WDT models and the domain resource yaml file. You have a container registry available to push the domain creation image to. A container image client on the build machine, such as Docker or Podman.  For Docker, a minimum version of 18.03.1.ce is required. For Podman, a minimum version of 3.0.1 is required.   An installed version of JDK to run Image Tool, version 8+. Proxies are set accordingly at the OS level if required.  Prepare the build domain image script The sample scripts for the Oracle Access Management domain image creation are available at $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image.\n  Navigate to the $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/properties directory:\n$ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/properties   Make a copy of the build-domain-creation-image.properties:\n$ cp build-domain-creation-image.properties build-domain-creation-image.properties.orig   Edit the build-domain-creation-image.properties and modify the following parameters. Save the file when complete:\nJAVA_HOME=\u0026lt;Java home location\u0026gt; IMAGE_TAG=\u0026lt;Image tag name\u0026gt; REPOSITORY= \u0026lt;Container image repository to push the image\u0026gt; REG_USER= \u0026lt;Container registry username\u0026gt; IMAGE_PUSH_REQUIRES_AUTH=\u0026lt;Whether image push requires authentication to the registry\u0026gt; WDT_MODEL_FILE=\u0026lt;Full Path to WDT Model file oam.yaml\u0026gt; WDT_VARIABLE_FILE=\u0026lt;Full path to WDT variable file oam.properties\u0026gt; WDT_ARCHIVE_FILE=\u0026lt;Full Path to WDT Archive file\u0026gt; WDT_VERSION=\u0026quot;Version of WebLogic Deploy Tool version to use\u0026quot; WIT_VERSION=\u0026quot;Version of WebLogic Image Tool to use\u0026quot; For example:\nJAVA_HOME=/scratch/jdk IMAGE_TAG=oam-aux-generic-v1 BASE_IMAGE=ghcr.io/oracle/oraclelinux:8-slim REPOSITORY=container-registry.example.com/mytenancy/idm REG_USER=mytenancy/myemail@example.com IMAGE_PUSH_REQUIRES_AUTH=true WDT_MODEL_FILE=\u0026quot;/scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/yaml/oam.yaml\u0026quot; WDT_VARIABLE_FILE=\u0026quot;/scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/oam.properties\u0026quot; WDT_ARCHIVE_FILE=\u0026quot;\u0026quot; WDT_VERSION=\u0026quot;3.5.3\u0026quot; WIT_VERSION=\u0026quot;1.12.1\u0026quot; A full list of parameters and descriptions in the build-domain-creation-image.properties file are shown below:\n     Parameter Definition Default     JAVA_HOME Path to the JAVA_HOME for the JDK8+.    IMAGE_TAG Image tag for the final domain creation image. oam-aux-generic-v1   BASE_IMAGE The Oracle Linux product container image to use as a base image. ghcr.io/oracle/oraclelinux:8-slim   REPOSITORY Container image repository that will host the domain creation image. iad.ocir.io/mytenancy/idm   REG_USER Username to authenticate to the \u0026lt;REGISTRY\u0026gt; and push the domain creation image. mytenancy/oracleidentitycloudservice/myemail@example.com   IMAGE_PUSH_REQUIRES_AUTH If authentication to \u0026lt;REGISTRY\u0026gt; is required then set to true, else set to false. If set to false, \u0026lt;REG_USER\u0026gt; is not required. true   WDT_MODEL_FILE Absolute path to WDT model file oam.yaml. For example $WORKDIR/yaml/oam.yaml.    WDT_MODEL_FILE Absolute path to WDT variable file oam.properties. For example $WORKDIR/yaml/oam.properties.    WDT_ARCHIVE_FILE Absolute path to WDT archive file.    WDT_VERSION WebLogic Deploy Tool version. If not specified the latest available version will be downloaded. It is recommended to use the default value. 3.5.3   WIT_VERSION WebLogic Image Tool Version. If not specified the latest available version will be downloaded. It is recommended to use the default value. 1.12.1   TARGET Select the target environment in which the created image will be used. Supported values: Default or OpenShift. See Additional Information. Default   CHOWN userid:groupid to be used for creating files within the image, such as the WDT installer, WDT model, and WDT archive. If the user or group does not exist in the image, they will be added with useradd/groupadd. oracle:oracle    Note: If IMAGE_PUSH_REQUIRES_AUTH=true, you must edit the $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/properties/.regpassword and change \u0026lt;REGISTRY_PASSWORD\u0026gt; to your registry password:\nREG_PASSWORD=\u0026quot;\u0026lt;REGISTRY_PASSWORD\u0026gt;\u0026quot; Run the build-domain-creation-image script   Execute the build-domain-creation-image.sh by specifying the input properties parameter files:\n $ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image $ ./build-domain-creation-image.sh -i properties/build-domain-creation-image.properties ``\nNote: If using a password file, you must add -p properties/.regpassword to the end of the command.\nExecuting this command will build the image and push it to the container registry.\nNote: You can use the same same domain creation image to create a domain in multiple environments, based on your need. You do not need to rebuild it every time during domain creation. This is a one time activity.\nThe output will look similar to the following:\n  Click here to see example output:   using WDT_DIR: /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir Using WDT_VERSION 3.5.3 Using WIT_DIR /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir Using WIT_VERSION 1.12.1 Using Image tag: oam-aux-generic-v1 using Base Image: ghcr.io/oracle/oraclelinux:8-slim using IMAGE_BUILDER_EXE /usr/bin/podman JAVA_HOME is set to /scratch/jdk @@ Info: WIT_INSTALL_ZIP_URL is '' @@ WIT_INSTALL_ZIP_URL is not set @@ imagetool.sh not found in /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/imagetool/bin. Installing imagetool... @@ Info: Downloading https://github.com/oracle/weblogic-image-tool/releases/download/release-1.12.1/imagetool.zip @@ Info: Downloading https://github.com/oracle/weblogic-image-tool/releases/download/release-1.12.1/imagetool.zip with https_proxy=\u0026quot;http://proxy.example.com:80\u0026quot; @@ Info: Archive downloaded to /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/imagetool.zip, about to unzip via '/home/opc/jdk/bin/jar xf'. @@ Info: imageTool cache does not contain a valid entry for wdt_3.5.3. Installing WDT @@ Info: WDT_INSTALL_ZIP_URL is '' @@ WDT_INSTALL_ZIP_URL is not set @@ Info: Downloading https://github.com/oracle/weblogic-deploy-tooling/releases/download/release-3.5.3/weblogic-deploy.zip @@ Info: Downloading https://github.com/oracle/weblogic-deploy-tooling/releases/download/release-3.5.3/weblogic-deploy.zip with https_proxy=\u0026quot;http://proxy.example.com:80\u0026quot; @@ Info: Archive downloaded to /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/weblogic-deploy.zip [INFO ] Successfully added to cache. wdt_3.5.3=/scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/weblogic-deploy.zip @@ Info: Install succeeded, imagetool install is in the /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/imagetool directory. Starting Building Image registry.example.com/mytenancy/idm:oam-aux-generic-v1 Login Succeeded! WDT_MODEL_FILE is set to /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/yaml/oam.yaml WDT_VARIABLE_FILE is set to /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/yaml/oam.properties Additional Build Commands file is set to /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/additonal-build-files/build-files.txt Additonal Build file is set to /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/additonal-build-files/OAM.json [INFO ] WebLogic Image Tool version 1.12.1 [INFO ] Image Tool build ID: 0c9aa58f-808b-4707-a11a-7766fb301cbb [INFO ] Temporary directory used for image build context: /home/oracle/wlsimgbuilder_temp1198331326550546381 [INFO ] Copying /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/additonal-build-files/OAM.json to build context folder. [INFO ] User specified fromImage ghcr.io/oracle/oraclelinux:8-slim [INFO ] Inspecting ghcr.io/oracle/oraclelinux:8-slim, this may take a few minutes if the image is not available locally. [INFO ] Copying /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/yaml/oam.yaml to build context folder. [INFO ] Copying /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/yaml/oam.properties to build context folder. [INFO ] Copying /scratch/OAMK8S/fmw-kubernetes/OracleAccessManagement/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/weblogic-deploy.zip to build context folder. [INFO ] Starting build: /usr/bin/podman build --no-cache --force-rm --tag registry.example.com/mytenancy/idm:oam-aux-generic-v1 --pull --build-arg http_proxy=http://proxy.example.com:80 --build-arg https_proxy=http://proxy.example.com:80 --build-arg no_proxy=localhost,127.0.0.0/8,.example.com,,/var/run/crio/crio.sock,X.X.X.X /home/oracle/wlsimgbuilder_temp1198331326550546381 [1/3] STEP 1/5: FROM ghcr.io/oracle/oraclelinux:8-slim AS os_update [1/3] STEP 2/5: LABEL com.oracle.weblogic.imagetool.buildid=\u0026quot;0c9aa58f-808b-4707-a11a-7766fb301cbb\u0026quot; --\u0026gt; ba91c351bf94 [1/3] STEP 3/5: USER root --\u0026gt; d8f89c65892a [1/3] STEP 4/5: RUN microdnf update \u0026amp;\u0026amp; microdnf install gzip tar unzip libaio libnsl jq findutils diffutils shadow-utils \u0026amp;\u0026amp; microdnf clean all Downloading metadata... Downloading metadata... Package Repository Size Upgrading: libgcc-8.5.0-20.0.3.el8.x86_64 ol8_baseos_latest 93.4 kB replacing libgcc-8.5.0-20.0.2.el8.x86_64 libstdc++-8.5.0-20.0.3.el8.x86_64 ol8_baseos_latest 474.6 kB replacing libstdc++-8.5.0-20.0.2.el8.x86_64 systemd-libs-239-78.0.4.el8.x86_64 ol8_baseos_latest 1.2 MB replacing systemd-libs-239-78.0.3.el8.x86_64 Transaction Summary: Installing: 0 packages Reinstalling: 0 packages Upgrading: 3 packages Obsoleting: 0 packages Removing: 0 packages Downgrading: 0 packages Downloading packages... Running transaction test... Updating: libgcc;8.5.0-20.0.3.el8;x86_64;ol8_baseos_latest Updating: libstdc++;8.5.0-20.0.3.el8;x86_64;ol8_baseos_latest Updating: systemd-libs;239-78.0.4.el8;x86_64;ol8_baseos_latest Cleanup: libstdc++;8.5.0-20.0.2.el8;x86_64;installed Cleanup: systemd-libs;239-78.0.3.el8;x86_64;installed Cleanup: libgcc;8.5.0-20.0.2.el8;x86_64;installed Complete. Package Repository Size Installing: diffutils-3.6-6.el8.x86_64 ol8_baseos_latest 369.3 kB findutils-1:4.6.0-21.el8.x86_64 ol8_baseos_latest 539.8 kB gzip-1.9-13.el8_5.x86_64 ol8_baseos_latest 170.7 kB jq-1.6-7.0.3.el8.x86_64 ol8_appstream 206.5 kB libaio-0.3.112-1.el8.x86_64 ol8_baseos_latest 33.4 kB libnsl-2.28-236.0.1.el8.7.x86_64 ol8_baseos_latest 111.4 kB oniguruma-6.8.2-2.1.el8_9.x86_64 ol8_appstream 191.5 kB unzip-6.0-46.0.1.el8.x86_64 ol8_baseos_latest 201.0 kB Transaction Summary: Installing: 8 packages Reinstalling: 0 packages Upgrading: 0 packages Obsoleting: 0 packages Removing: 0 packages Downgrading: 0 packages Downloading packages... Running transaction test... Installing: oniguruma;6.8.2-2.1.el8_9;x86_64;ol8_appstream Installing: jq;1.6-7.0.3.el8;x86_64;ol8_appstream Installing: unzip;6.0-46.0.1.el8;x86_64;ol8_baseos_latest Installing: libnsl;2.28-236.0.1.el8.7;x86_64;ol8_baseos_latest Installing: libaio;0.3.112-1.el8;x86_64;ol8_baseos_latest Installing: gzip;1.9-13.el8_5;x86_64;ol8_baseos_latest Installing: findutils;1:4.6.0-21.el8;x86_64;ol8_baseos_latest Installing: diffutils;3.6-6.el8;x86_64;ol8_baseos_latest Complete. Complete. --\u0026gt; 73fb79fa40b2 [1/3] STEP 5/5: RUN if [ -z \u0026quot;$(getent group oracle)\u0026quot; ]; then groupadd oracle || exit 1 ; fi \u0026amp;\u0026amp; if [ -z \u0026quot;$(getent group oracle)\u0026quot; ]; then groupadd oracle || exit 1 ; fi \u0026amp;\u0026amp; if [ -z \u0026quot;$(getent passwd oracle)\u0026quot; ]; then useradd -g oracle oracle || exit 1; fi \u0026amp;\u0026amp; mkdir -p /u01 \u0026amp;\u0026amp; chown oracle:oracle /u01 \u0026amp;\u0026amp; chmod 775 /u01 --\u0026gt; ff6cf74351d1 [2/3] STEP 1/4: FROM ff6cf74351d1e0124121321174eaa64ebefa0bc3eef80ec88caec12feb9e8fb3 AS wdt_build [2/3] STEP 2/4: RUN mkdir -p /auxiliary \u0026amp;\u0026amp; mkdir -p /auxiliary/models \u0026amp;\u0026amp; chown oracle:oracle /auxiliary --\u0026gt; a061b678fa0a [2/3] STEP 3/4: COPY --chown=oracle:oracle [\u0026quot;weblogic-deploy.zip\u0026quot;, \u0026quot;/tmp/imagetool/\u0026quot;] --\u0026gt; 3daccfef2f06 [2/3] STEP 4/4: RUN test -d /auxiliary/weblogic-deploy \u0026amp;\u0026amp; rm -rf /auxiliary/weblogic-deploy || echo Initial WDT install \u0026amp;\u0026amp; unzip -q \u0026quot;/tmp/imagetool/weblogic-deploy.zip\u0026quot; -d /auxiliary Initial WDT install --\u0026gt; b77b02f66a83 [3/3] STEP 1/12: FROM ff6cf74351d1e0124121321174eaa64ebefa0bc3eef80ec88caec12feb9e8fb3 AS final [3/3] STEP 2/12: ENV AUXILIARY_IMAGE_PATH=/auxiliary WDT_HOME=/auxiliary WDT_MODEL_HOME=/auxiliary/models --\u0026gt; 10dc1832266f [3/3] STEP 3/12: RUN mkdir -p /auxiliary \u0026amp;\u0026amp; chown oracle:oracle /auxiliary --\u0026gt; 0b85f8e7399a [3/3] STEP 4/12: COPY --from=wdt_build --chown=oracle:oracle /auxiliary /auxiliary/ --\u0026gt; c64bf2bef430 [3/3] STEP 5/12: RUN mkdir -p /auxiliary/models \u0026amp;\u0026amp; chown oracle:oracle /auxiliary/models --\u0026gt; d8817f84ab58 [3/3] STEP 6/12: COPY --chown=oracle:oracle [\u0026quot;oam.yaml\u0026quot;, \u0026quot;/auxiliary/models/\u0026quot;] --\u0026gt; 45b1d25264b9 [3/3] STEP 7/12: COPY --chown=oracle:oracle [\u0026quot;oam.properties\u0026quot;, \u0026quot;/auxiliary/models/\u0026quot;] --\u0026gt; 2ceba77ee226 [3/3] STEP 8/12: RUN chmod -R 640 /auxiliary/models/* --\u0026gt; 34385bac7974 [3/3] STEP 9/12: USER oracle --\u0026gt; 409f6e3ccce4 [3/3] STEP 10/12: WORKDIR /auxiliary --\u0026gt; aaa2f154f512 [3/3] STEP 11/12: COPY --chown=oracle:oracle files/OAM.json /auxiliary/weblogic-deploy/lib/typedefs --\u0026gt; c8a9d29106d3 [3/3] STEP 12/12: RUN chmod -R 755 /auxiliary [3/3] COMMIT registry.example.com/mytenancy/idm:oam-aux-generic-v1 --\u0026gt; 0797418499a1 Successfully tagged registry.example.com/mytenancy/idm:oam-aux-generic-v1 0797418499a1dfd6d2a28672948c17ed747291ad069cebca5fac1b0410978d75 [INFO ] Build successful. Build time=72s. Image tag=registry.example.com/mytenancy/idm:oam-aux-generic-v1 Getting image source signatures Copying blob 462ffb36555c done Copying blob 3db4d3748983 done Copying blob 7e9f3f6c7a0a done Copying blob 32aa5f13e19b done Copying blob d979da323f64 done Copying blob f18b9e5f415f done Copying blob aaaea7c1392f done Copying blob 5504fa641a87 done Copying blob 5aa81493c602 done Copying blob f56f992ba90d done Copying blob 2b1e0644fbd3 done Copying config a39dc6ae7f done Writing manifest to image destination Pushed image registry.example.com/mytenancy/idm/oam-aux-generic-v1 to image registry Docker Hub\t     Deploy the OAM domain resource In this section you modify the OAM domain.yaml and deploy the OAM domain using the build image created.\nModify the OAM domain.yaml In this section you modify the domain.yaml file in preparation for creating the OAM domain.\n  Edit the $WORKDIR/yaml/domain.yaml and update the %DOMAIN_CREATION_IMAGE% with the previously generated image name.\nNote: %DOMAIN_CREATION_IMAGE% takes the format of \u0026lt;REPOSITORY\u0026gt;:\u0026lt;TAG\u0026gt;:\ndomain: # Domain | DomainAndRCU createIfNotExists: DomainAndRCU # Image containing WDT installer and Model files. domainCreationImages: - image: '%DOMAIN_CREATION_IMAGE%' domainType: OAM For example:\ndomain: # Domain | DomainAndRCU createIfNotExists: DomainAndRCU # Image containing WDT installer and Model files. domainCreationImages: - image: 'container-registry.example.com/mytenancy/idm:oam-aux-generic-v1' domainType: OAM   In circumstances where you may be pulling the OAM product container image from Oracle Container Registry, and then the domain image from a private registry, you must first create a secret (privatecred) for the private registry. For example:\n$ kubectl create secret docker-registry \u0026quot;privatecred\u0026quot; --docker-server=container-registry.example.com \\ --docker-username=\u0026quot;user@example.com\u0026quot; \\ --docker-password=password --docker-email=user@example.com \\ --namespace=oamns Then specify both secrets for imagePullSecrets in the domain.yaml. For example:\n ... spec: # The WebLogic Domain Home domainHome: /u01/oracle/user_projects/domains/accessdomain # The domain home source type # Set to PersistentVolume for domain-in-pv, Image for domain-in-image, or FromModel for model-in-image domainHomeSourceType: PersistentVolume # The WebLogic Server image that the Operator uses to start the domain image: \u0026quot;container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October'24\u0026gt;\u0026quot; # imagePullPolicy defaults to \u0026quot;Always\u0026quot; if image version is :latest imagePullPolicy: IfNotPresent imagePullSecrets: - name: orclcred - name: privatecred # Identify which Secret contains the WebLogic Admin credentials ... For more information about the configuration parameters in domain.yaml, see Domain Resources.\n  Click here to see an example domain.yaml:   # Copyright (c) 2024, Oracle and/or its affiliates. # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. # # This is an example of how to define an OAM Domain. For details about the fields in domain specification, refer https://oracle.github.io/weblogic-kubernetes-operator/managing-domains/domain-resource/ # apiVersion: \u0026quot;weblogic.oracle/v9\u0026quot; kind: Domain metadata: name: accessdomain namespace: oamns labels: weblogic.domainUID: accessdomain spec: # The WebLogic Domain Home domainHome: /u01/oracle/user_projects/domains/accessdomain # The domain home source type # Set to PersistentVolume for domain-in-pv, Image for domain-in-image, or FromModel for model-in-image domainHomeSourceType: PersistentVolume # The WebLogic Server image that the Operator uses to start the domain image: \u0026quot;container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October'24\u0026gt;\u0026quot; # imagePullPolicy defaults to \u0026quot;Always\u0026quot; if image version is :latest imagePullPolicy: IfNotPresent # Add additional secret name if you are using a different registry for domain creation image. # Identify which Secret contains the credentials for pulling an image imagePullSecrets: - name: orclcred - name: privatecred # Identify which Secret contains the WebLogic Admin credentials webLogicCredentialsSecret: name: accessdomain-weblogic-credentials # Whether to include the server out file into the pod's stdout, default is true includeServerOutInPodLog: true # Whether to enable log home logHomeEnabled: true # Whether to write HTTP access log file to log home httpAccessLogInLogHome: true # The in-pod location for domain log, server logs, server out, introspector out, and Node Manager log files logHome: /u01/oracle/user_projects/domains/logs/accessdomain # An (optional) in-pod location for data storage of default and custom file stores. # If not specified or the value is either not set or empty (e.g. dataHome: \u0026quot;\u0026quot;) then the # data storage directories are determined from the WebLogic domain home configuration. dataHome: \u0026quot;\u0026quot; # serverStartPolicy legal values are \u0026quot;Never, \u0026quot;IfNeeded\u0026quot;, or \u0026quot;AdminOnly\u0026quot; # This determines which WebLogic Servers the Operator will start up when it discovers this Domain # - \u0026quot;Never\u0026quot; will not start any server in the domain # - \u0026quot;AdminOnly\u0026quot; will start up only the administration server (no managed servers will be started) # - \u0026quot;IfNeeded\u0026quot; will start all non-clustered servers, including the administration server and clustered servers up to the replica count serverStartPolicy: IfNeeded serverPod: initContainers: #DO NOT CHANGE THE NAME OF THIS INIT CONTAINER - name: compat-connector-init # OAM Product image, same as spec.image mentioned above image: \u0026quot;container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October'24\u0026gt;\u0026quot; imagePullPolicy: IfNotPresent command: [ \u0026quot;/bin/bash\u0026quot;, \u0026quot;-c\u0026quot;, \u0026quot;mkdir -p /u01/oracle/user_projects/domains/wdt-logs\u0026quot;] volumeMounts: - mountPath: /u01/oracle/user_projects name: weblogic-domain-storage-volume # a mandatory list of environment variable to be set on the servers env: - name: JAVA_OPTIONS value: -Dweblogic.StdoutDebugEnabled=false - name: USER_MEM_ARGS value: \u0026quot;-Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx1024m \u0026quot; - name: WLSDEPLOY_LOG_DIRECTORY value: \u0026quot;/u01/oracle/user_projects/domains/wdt-logs\u0026quot; - name: WLSDEPLOY_PROPERTIES value: \u0026quot;-Dwdt.config.disable.rcu.drop.schema=true\u0026quot; volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: accessdomain-domain-pvc volumeMounts: - mountPath: /u01/oracle/user_projects name: weblogic-domain-storage-volume # adminServer is used to configure the desired behavior for starting the administration server. adminServer: # adminService: # channels: # The Admin Server's NodePort # - channelName: default # nodePort: 30701 # Uncomment to export the T3Channel as a service # - channelName: T3Channel serverPod: # an (optional) list of environment variable to be set on the admin servers env: - name: USER_MEM_ARGS value: \u0026quot;-Djava.security.egd=file:/dev/./urandom -Xms512m -Xmx1024m \u0026quot; - name: CLASSPATH value: \u0026quot;/u01/oracle/wlserver/server/lib/weblogic.jar\u0026quot; configuration: secrets: [ accessdomain-rcu-credentials ] initializeDomainOnPV: persistentVolume: metadata: name: accessdomain-domain-pv spec: storageClassName: accessdomain-domain-storage-class capacity: # Total storage allocated to the persistent storage. storage: 10Gi # Reclaim policy of the persistent storage # # The valid values are: 'Retain', 'Delete', and 'Recycle' persistentVolumeReclaimPolicy: Retain # Persistent volume type for the persistent storage. # # The value must be 'hostPath' or 'nfs'. # # If using 'nfs', server must be specified. nfs: server: mynfserver # hostPath: path: \u0026quot;/scratch/shared/accessdomainpv\u0026quot; persistentVolumeClaim: metadata: name: accessdomain-domain-pvc spec: storageClassName: accessdomain-domain-storage-class resources: requests: storage: 10Gi volumeName: accessdomain-domain-pv domain: # Domain | DomainAndRCU createIfNotExists: DomainAndRCU # Image containing WDT installer and Model files. domainCreationImages: - image: 'container-registry.example.com/mytenancy/idm:oam-aux-generic-v1' domainType: OAM # References to Cluster resources that describe the lifecycle options for all # the Managed Server members of a WebLogic cluster, including Java # options, environment variables, additional Pod content, and the ability to # explicitly start, stop, or restart cluster members. The Cluster resource # must describe a cluster that already exists in the WebLogic domain # configuration. clusters: - name: accessdomain-oam-cluster - name: accessdomain-policy-cluster # The number of managed servers to start for unlisted clusters # replicas: 1 --- # This is an example of how to define a Cluster resource. apiVersion: weblogic.oracle/v1 kind: Cluster metadata: name: accessdomain-oam-cluster namespace: oamns spec: clusterName: oam_cluster serverService: precreateService: true replicas: 1 serverPod: serverPod: env: - name: USER_MEM_ARGS value: \u0026quot;-XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m \u0026quot; resources: limits: cpu: \u0026quot;2\u0026quot; memory: \u0026quot;8Gi\u0026quot; requests: cpu: \u0026quot;1000m\u0026quot; memory: \u0026quot;4Gi\u0026quot; --- # This is an example of how to define a Cluster resource. apiVersion: weblogic.oracle/v1 kind: Cluster metadata: name: accessdomain-policy-cluster namespace: oamns spec: clusterName: policy_cluster serverService: precreateService: true replicas: 1 ```    Note: By default, WebLogic operator will create the RCU schema using WDT tooling during every domain deployment. If the RCU Schema with the given prefix already exists, and error will be thrown and the domain creation will fail. If you want to delete the schema every time during domain deployment, then can use change the value \u0026quot;-Dwdt.config.disable.rcu.drop.schema=true\u0026quot; to \u0026quot;-Dwdt.config.disable.rcu.drop.schema=false\u0026quot;.\n  Optional WDT Models ConfigMap If required, you can provide a Kubernetes ConfigMap with additional WDT models and WDT variables files as supplements, or overrides, to those in domainCreationImages. For example in the output/weblogic-domains/accessdomain/domain.yaml:\n domain: ... domainCreationImages: ... domainCreationConfigMap: mymodel-domain-configmap The files inside domainCreationConfigMap must have file extensions, .yaml, .properties, or .zip.\n  To create a configmap run the following command:\n $ cd $WORKDIR/kubernetes/create-access-domain/domain-home-on-pv/wdt-utils $ ./create-configmap.sh -n oamns -d accessdomain -c mymodel-domain-configmap -f wdt_models/mymodel.yaml   For more information on the usage of additional configuration, see Optional WDT models ConfigMap.\nDeploy the OAM domain In this section you deploy the OAM domain using the domain.yaml.\n  Run the following command to create OAM domain resources:\n$ kubectl create -f $WORKDIR/yaml/domain.yaml The following steps will be performed by WebLogic Kubernetes Operator:\n Run the introspector job. The introspection job will create the RCU Schemas. The introspector job pod will create the domain on PV using the model provided in the domain creation image. The introspector job pod will execute OAM offline configuration actions post successful creation of domain via WDT. Brings up the Administration Server, OAM server (oam_server1), and the OAM Policy Managed Server (oam_policy_mgr1).  The output will look similar to the following:\ndomain.weblogic.oracle/accessdomain created cluster.weblogic.oracle/accessdomain-oam-cluster created cluster.weblogic.oracle/accessdomain-policy-cluster created Whilst the domain creation is running, you can run the following command to monitor the progress:\n$ kubectl get pods -n oamns -w You can also tail the logs for the pods by running:\n$ kubectl logs -f \u0026lt;pod\u0026gt; -n oamns WDT specific logs can be found in \u0026lt;persistent_volume\u0026gt;/domains/wdt-logs.\nOnce everything is started you should see the Administration Server and OAM servers are running:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 11m accessdomain-oam-policy-mgr1 1/1 Running 0 3m53s accessdomain-oam-server1 1/1 Running 0 3m53s   If there are any failures, follow Domain creation failure with WDT models in the Troubleshooting section.\nVerify the results Verify the domain, pods and services   Verify the domain, servers pods and services are created and in the READY state with a STATUS of 1/1, by running the following command:\n$ kubectl get all,domains -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get all,domains -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE pod/accessdomain-adminserver 1/1 Running 0 12m pod/accessdomain-oam-policy-mgr1 1/1 Running 0 4m19s pod/accessdomain-oam-server1 1/1 Running 0 4m19s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/accessdomain-adminserver ClusterIP None \u0026lt;none\u0026gt; 7001/TCP 12m service/accessdomain-cluster-oam-cluster ClusterIP 10.104.17.83 \u0026lt;none\u0026gt; 14100/TCP 4m19s service/accessdomain-cluster-policy-cluster ClusterIP 10.98.157.157 \u0026lt;none\u0026gt; 15100/TCP 4m19s service/accessdomain-oam-policy-mgr1 ClusterIP None \u0026lt;none\u0026gt; 15100/TCP 4m19s service/accessdomain-oam-policy-mgr2 ClusterIP 10.101.141.238 \u0026lt;none\u0026gt; 15100/TCP 4m19s service/accessdomain-oam-policy-mgr3 ClusterIP 10.107.167.143 \u0026lt;none\u0026gt; 15100/TCP 4m19s service/accessdomain-oam-policy-mgr4 ClusterIP 10.106.100.191 \u0026lt;none\u0026gt; 15100/TCP 4m19s service/accessdomain-oam-policy-mgr5 ClusterIP 10.105.5.126 \u0026lt;none\u0026gt; 15100/TCP 4m19s service/accessdomain-oam-server1 ClusterIP None \u0026lt;none\u0026gt; 14100/TCP 4m19s service/accessdomain-oam-server2 ClusterIP 10.98.248.74 \u0026lt;none\u0026gt; 14100/TCP 4m19s service/accessdomain-oam-server3 ClusterIP 10.106.224.54 \u0026lt;none\u0026gt; 14100/TCP 4m19s service/accessdomain-oam-server4 ClusterIP 10.104.241.109 \u0026lt;none\u0026gt; 14100/TCP 4m19s service/accessdomain-oam-server5 ClusterIP 10.96.189.205 \u0026lt;none\u0026gt; 14100/TCP 4m19s NAME AGE domain.weblogic.oracle/accessdomain 18m NAME AGE cluster.weblogic.oracle/accessdomain-oam-cluster 18m cluster.weblogic.oracle/accessdomain-policy-cluster 18m The default domain created by the script has the following characteristics:\n An Administration Server named AdminServer listening on port 7001. A configured OAM cluster named oam_cluster of size 5. A configured Policy cluster named policy_cluster of size 5. One started OAM managed Server, named oam_server1, listening on port 14100. One started Policy managed Server, named oam-policy-mgr1, listening on port 15100. Log files that are located in \u0026lt;persistent_volume\u0026gt;/logs/\u0026lt;domainUID\u0026gt;.    Verify the domain   Run the following command to describe the domain:\n$ kubectl describe domain \u0026lt;domain_uid\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe domain accessdomain -n oamns    Click here to see example output:   Name: accessdomain Namespace: oamns Labels: weblogic.domainUID=accessdomain Annotations: \u0026lt;none\u0026gt; API Version: weblogic.oracle/v9 Kind: Domain Metadata: Creation Timestamp: \u0026lt;DATE\u0026gt; Generation: 1 Managed Fields: API Version: weblogic.oracle/v9 Fields Type: FieldsV1 fieldsV1: f:metadata: f:labels: .: f:weblogic.domainUID: f:spec: .: f:adminServer: .: f:adminChannelPortForwardingEnabled: f:serverPod: .: f:env: f:serverStartPolicy: f:clusters: f:configuration: .: f:initializeDomainOnPV: .: f:domain: .: f:createIfNotExists: f:domainCreationImages: f:domainType: f:persistentVolume: .: f:metadata: .: f:name: f:spec: .: f:capacity: .: f:storage: f:nfs: .: f:path: f:server: f:persistentVolumeReclaimPolicy: f:storageClassName: f:persistentVolumeClaim: .: f:metadata: .: f:name: f:namespace: f:spec: .: f:resources: .: f:requests: .: f:storage: f:storageClassName: f:volumeName: f:overrideDistributionStrategy: f:secrets: f:dataHome: f:domainHome: f:domainHomeSourceType: f:failureRetryIntervalSeconds: f:failureRetryLimitMinutes: f:httpAccessLogInLogHome: f:image: f:imagePullPolicy: f:imagePullSecrets: f:includeServerOutInPodLog: f:logHome: f:logHomeEnabled: f:maxClusterConcurrentShutdown: f:maxClusterConcurrentStartup: f:maxClusterUnavailable: f:replaceVariablesInJavaOptions: f:replicas: f:serverPod: .: f:env: f:initContainers: f:volumeMounts: f:volumes: f:serverStartPolicy: f:webLogicCredentialsSecret: .: f:name: Manager: kubectl-create Operation: Update Time: \u0026lt;DATE\u0026gt; API Version: weblogic.oracle/v9 Fields Type: FieldsV1 fieldsV1: f:status: .: f:clusters: f:conditions: f:observedGeneration: f:servers: f:startTime: Manager: Kubernetes Java Client Operation: Update Subresource: status Time: \u0026lt;DATE\u0026gt; Resource Version: 981416 UID: e42ea8c3-9e23-44b9-bb27-e61040f972f5 Spec: Admin Server: Admin Channel Port Forwarding Enabled: true Server Pod: Env: Name: USER_MEM_ARGS Value: -Djava.security.egd=file:/dev/./urandom -Xms512m -Xmx1024m Name: CLASSPATH Value: /u01/oracle/wlserver/server/lib/weblogic.jar Server Start Policy: IfNeeded Clusters: Name: accessdomain-oam-cluster Name: accessdomain-policy-cluster Configuration: Initialize Domain On PV: Domain: Create If Not Exists: Domain Domain Creation Images: Image: container-registry.example.com/mytenancy/idm:oam-aux-generic-v1 Domain Type: OAM Persistent Volume: Metadata: Name: accessdomain-domain-pv Spec: Capacity: Storage: 10Gi Nfs: Path: /\u0026lt;NFS_PATH\u0026gt;/accessdomainpv Server: \u0026lt;IPADDRESS\u0026gt; Persistent Volume Reclaim Policy: Retain Storage Class Name: accessdomain-domain-storage-class Persistent Volume Claim: Metadata: Name: accessdomain-domain-pvc Namespace: oamns Spec: Resources: Requests: Storage: 10Gi Storage Class Name: accessdomain-domain-storage-class Volume Name: accessdomain-domain-pv Override Distribution Strategy: Dynamic Secrets: accessdomain-rcu-credentials Data Home: Domain Home: /u01/oracle/user_projects/domains/accessdomain Domain Home Source Type: PersistentVolume Failure Retry Interval Seconds: 120 Failure Retry Limit Minutes: 1440 Http Access Log In Log Home: true Image: container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October\u0026#39;24\u0026gt; Image Pull Policy: IfNotPresent Image Pull Secrets: Name: orclcred Include Server Out In Pod Log: true Log Home: /u01/oracle/user_projects/domains/logs/accessdomain Log Home Enabled: true Max Cluster Concurrent Shutdown: 1 Max Cluster Concurrent Startup: 0 Max Cluster Unavailable: 1 Replace Variables In Java Options: false Replicas: 1 Server Pod: Env: Name: JAVA_OPTIONS Value: -Dweblogic.StdoutDebugEnabled=false Name: WLSDEPLOY_LOG_DIRECTORY Value: /u01/oracle/user_projects/domains/wdt-logs Name: USER_MEM_ARGS Value: -Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx1024m Init Containers: Command: /bin/bash -c mkdir -p /u01/oracle/user_projects/domains/wdt-logs Image: container-registry.oracle.com/middleware/oam_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October\u0026#39;24\u0026gt; Image Pull Policy: IfNotPresent Name: compat-connector-init Volume Mounts: Mount Path: /u01/oracle/user_projects/ Name: weblogic-domain-storage-volume Volume Mounts: Mount Path: /u01/oracle/user_projects Name: weblogic-domain-storage-volume Volumes: Name: weblogic-domain-storage-volume Persistent Volume Claim: Claim Name: accessdomain-domain-pvc Server Start Policy: IfNeeded Web Logic Credentials Secret: Name: accessdomain-weblogic-credentials Status: Clusters: Cluster Name: oam_cluster Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Label Selector: weblogic.domainUID=accessdomain,weblogic.clusterName=oam_cluster Maximum Replicas: 5 Minimum Replicas: 0 Observed Generation: 1 Ready Replicas: 1 Replicas: 1 Replicas Goal: 1 Cluster Name: policy_cluster Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Label Selector: weblogic.domainUID=accessdomain,weblogic.clusterName=policy_cluster Maximum Replicas: 5 Minimum Replicas: 0 Observed Generation: 1 Ready Replicas: 1 Replicas: 1 Replicas Goal: 1 Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Observed Generation: 1 Servers: Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: worker-node2 Pod Phase: Running Pod Ready: True Server Name: AdminServer State: RUNNING State Goal: RUNNING Cluster Name: oam_cluster Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: worker-node1 Pod Phase: Running Pod Ready: True Server Name: oam_server1 State: RUNNING State Goal: RUNNING Cluster Name: oam_cluster Server Name: oam_server2 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oam_cluster Server Name: oam_server3 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oam_cluster Server Name: oam_server4 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oam_cluster Server Name: oam_server5 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: policy_cluster Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: worker-node1 Pod Phase: Running Pod Ready: True Server Name: oam_policy_mgr1 State: RUNNING State Goal: RUNNING Cluster Name: policy_cluster Server Name: oam_policy_mgr2 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: policy_cluster Server Name: oam_policy_mgr3 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: policy_cluster Server Name: oam_policy_mgr4 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: policy_cluster Server Name: oam_policy_mgr5 State: SHUTDOWN State Goal: SHUTDOWN Start Time: \u0026lt;DATE\u0026gt; Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Created 19m weblogic.operator Domain accessdomain was created. Warning Failed 19m weblogic.operator Domain accessdomain failed due to \u0026#39;Persistent volume claim unbound\u0026#39;: PersistentVolumeClaim \u0026#39;accessdomain-domain-pvc\u0026#39; is not bound; the status phase is \u0026#39;Pending\u0026#39;.. Operator is waiting for the persistent volume claim to be bound, it may be a temporary condition. If this condition persists, then ensure that the PVC has a correct volume name or storage class name and is in bound status.. Normal PersistentVolumeClaimBound 19m weblogic.operator The persistent volume claim is bound and ready. Normal Available 3m19s weblogic.operator Domain accessdomain is available: a sufficient number of its servers have reached the ready state. Normal Completed 3m19s weblogic.operator Domain accessdomain is complete because all of the following are true: there is no failure detected, there are no pending server shutdowns, and all servers expected to be running are ready and at their target image, auxiliary images, restart version, and introspect version.      Verify the pods   Run the following command to see the pods running the servers and which nodes they are running on:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; -o wide For example:\n$ kubectl get pods -n oamns -o wide The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES accessdomain-adminserver 1/1 Running 0 24m 10.244.2.14 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; accessdomain-oam-policy-mgr1 1/1 Running 0 16m 10.244.1.23 worker-node1 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; accessdomain-oam-server1 1/1 Running 0 16m 10.244.1.24 worker-node1 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt;   You are now ready to configure an Ingress to direct traffic for your OAM domain as per Configure an ingress For an OAM Domain.\n"
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/create-oig-domains/create-oig-domains-wdt/",
	"title": "b. Create OIG domains using WDT Models",
	"tags": [],
	"description": "",
	"content": "  Introduction\n  Prerequisites\n  Create OIG domains using WDT models\na. Prepare the persistent storage\nb. Create Kubernetes secrets for the domain and RCU\nc. Generate WDT models and the domain resource yaml file\nd. Build the Domain Creation Image\ne. Deploy the OIG domain resource\n  Verify the results\na. Verify the domain, pods and services\nb. Verify the domain\nc. Verify the pods\n  Introduction This section demonstrates the creation of an OIG domain home using sample WebLogic Deploy Tooling (WDT) model files.\nFrom WebLogic Kubernetes Operator version 4.1.2 onwards, you can provide a section, domain.spec.configuration.initializeDomainOnPV, to automatically initialize an OIG domain on a persistent volume when it is first deployed. This eliminates the need to pre-create your OIG domain using sample WebLogic Scripting Tool (WLST) offline scripts.\nWith WLST offline scripts it is required to deploy a separate Kubernetes job that creates the domain on a persistent volume, and then deploy the domain with a custom resource YAML. The RCU schema also had to be created and patched manually beforehand. Now, starting from Apr'24 release onwards, using WDT models, all the required information is specified in the domain custom resource YAML file, eliminating the requirement for running a separate Kubernetes job. With WDT models, the WebLogic Kubernetes Operator will create the PersistentVolume (PV) and PersistenVolumeClaim (PVC), create the RCU schemas and patch them, then create the OIG domain on the persistent volume, prior to starting the servers.\nNote: This is a one time only initialization. After the domain is created, subsequent updates to this section in the domain resource YAML file will not recreate or update the WebLogic domain. Subsequent domain lifecycle updates must be controlled by the WebLogic Server Administration Console, Enterprise Manager Console, WebLogic Scripting Tool (WLST), or other mechanisms.\nWebLogic Deploy Tooling (WDT) models are a convenient and simple alternative to WebLogic Scripting Tool (WLST) configuration scripts. They compactly define a WebLogic domain using model files, variable properties files, and application archive files. For more information about the model format and its integration, see Usage and Working with WDT Model files. The WDT model format is fully described in the open source, WebLogic Deploy Tooling GitHub project.\nThe main benefits of WDT are:\n A set of single-purpose tools supporting WebLogic domain configuration lifecycle operations. All tools work off of a shared, declarative model, eliminating the need to maintain specialized WLST scripts. WDT knowledge base understands the MBeans, attributes, and WLST capabilities/bugs across WLS versions.  The initializeDomainOnPv section:\n Creates the PersistentVolume (PV) and/or PersistenVolumeClaim (PVC). Creates and patches the RCU schema. Creates the OIG domain home on the persistent volume based on the provided WDT models  Prerequisites Before you begin, perform the following steps:\n Review the Domain On PV documentation. Ensure that the database is up and running.  Create OIG domains using WDT models In this section you will:\n Prepare the persistent storage. Create Kubernetes secrets for the domain and RCU. Generate WDT models and the domain resource yaml file. Build the domain creation image hosting the WDT models and WDT installation. Deploy the OIG domain resource.  Note: In this section a domain creation image is built using the supplied model files and that image is used for domain creation. You will need your own container registry to upload the domain image to. Having your own container repository is a prerequisite before creating an OIG domain with WDT models. If you don\u0026rsquo;t have your own container registry, you can load the image on each node in the cluster instead. This documentation does not explain how to create your own container registry, or how to load the image onto each node. Consult your vendor specific documentation for more information.\nNote: Building a domain creation image is a one time activity. The domain creation image can be used to create an OIG domain in multiple environments. You do not need to rebuild the domain creation image every time you create a domain.\nPrepare the persistent storage As referenced in Prerequisites the nodes in the Kubernetes cluster must have access to a persistent volume such as a Network File System (NFS) mount or a shared file system.\nDomain on persistent volume (Domain on PV) is an operator domain home source type, which requires that the domain home exists on a persistent volume.\nWhen a container is started, it needs to mount that volume. The physical volume should be on a shared disk accessible by all the Kubernetes worker nodes because it is not known on which worker node the container will be started. In the case of Oracle Identity and Access Management, the persistent volume does not get erased when a container stops. This enables persistent configurations.\nThe example below uses an NFS mounted volume (\u0026lt;persistent_volume\u0026gt;/governancedomainpv). Other volume types can also be used. See the official Kubernetes documentation for Volumes.\nNote: The persistent volume directory needs to be accessible to both the master and worker node(s). In this example /scratch/shared/governancedomainpv is accessible from all nodes via NFS.\nTo create the persistent volume run the following commands:\n  Create the required directories:\n$ mkdir -p \u0026lt;persistent_volume\u0026gt;/governancedomainpv $ sudo chown -R 1000:0 \u0026lt;persistent_volume\u0026gt;/governancedomainpv For example,\n$ mkdir -p /scratch/shared/governancedomainpv $ sudo chown -R 1000:0 /scratch/shared/governancedomainpv   On the master node run the following command to ensure it is possible to read and write to the persistent volume:\ncd \u0026lt;persistent_volume\u0026gt;/governancedomainpv touch file.txt ls filemaster.txt For example:\ncd /scratch/shared/governancedomainpv touch filemaster.txt ls filemaster.txt   On the first worker node run the following to ensure it is possible to read and write to the persistent volume:\ncd /scratch/shared/governancedomainpv ls filemaster.txt touch fileworker1.txt ls fileworker1.txt   Repeat the above for any other worker nodes e.g fileworker2.txt etc. Once proven that it’s possible to read and write from each node to the persistent volume, delete the files created.\nFor more information on PV and PVC requirements, see Domain on Persistent Volume (PV).\n  Create Kubernetes secrets for the domain and RCU   Create a Kubernetes secret for the domain using the create-secret.sh script in the same Kubernetes namespace as the domain:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils $ ./create-secret.sh -l \u0026#34;username=weblogic\u0026#34; -l \u0026#34;password=****\u0026#34; -n \u0026lt;domain_namespace\u0026gt; -d \u0026lt;domain_uid\u0026gt; -s \u0026lt;domain_uid\u0026gt;-weblogic-credentials where:\n-n \u0026lt;domain_namespace\u0026gt; is the domain namespace you created in Create a namespace for Oracle Identity Governance. For example oigns.\n-d \u0026lt;domain_uid\u0026gt; is the domain UID that you want to create. For example, governancedomain.\n-s \u0026lt;domain_uid\u0026gt;-weblogic-credentials is the name of the secret for this namespace. Note: The secret name must follow this format (\u0026lt;domain_uid\u0026gt;-weblogic-credentials) or domain creation will fail.\nFor example:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils $ ./create-secret.sh -l \u0026#34;username=weblogic\u0026#34; -l \u0026#34;password=\u0026lt;password\u0026gt;\u0026#34; -n oigns -d governancedomain -s governancedomain-weblogic-credentials The output will look similar to the following:\n@@ Info: Setting up secret \u0026#39;governancedomain-weblogic-credentials\u0026#39;. secret/governancedomain-weblogic-credentials created secret/governancedomain-weblogic-credentials labeled   Verify the secret is created using the following command:\n$ kubectl get secret \u0026lt;kubernetes_domain_secret\u0026gt; -o yaml -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get secret governancedomain-weblogic-credentials -o yaml -n oigns The output will look similar to the following:\napiVersion: v1 data: password: \u0026lt;password\u0026gt; username: d2VibG9naWM= kind: Secret metadata: creationTimestamp: \u0026quot;\u0026lt;DATE\u0026gt;\u0026quot; labels: weblogic.domainName: governancedomain weblogic.domainUID: governancedomain name: governancedomain-weblogic-credentials namespace: oigns resourceVersion: \u0026quot;3216738\u0026quot; uid: c2ec07e0-0135-458d-bceb-c648d2a9ac54 type: Opaque   Create a Kubernetes secret for RCU in the same Kubernetes namespace as the domain, using the create-secrets.sh script:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils $ ./create-secret.sh -l \u0026#34;rcu_prefix=\u0026lt;rcu_prefix\u0026gt;\u0026#34; -l \u0026#34;rcu_schema_password=\u0026lt;rcu_schema_pwd\u0026gt;\u0026#34; -l \u0026#34;db_host=\u0026lt;db_host.domain\u0026gt;\u0026#34; -l \u0026#34;db_port=\u0026lt;db_port\u0026gt;\u0026#34; -l \u0026#34;db_service=\u0026lt;service_name\u0026gt;\u0026#34; -l \u0026#34;dba_user=\u0026lt;sys_db_user\u0026gt;\u0026#34; -l \u0026#34;dba_password=\u0026lt;sys_db_pwd\u0026gt;\u0026#34; -n \u0026lt;domain_namespace\u0026gt; -d \u0026lt;domain_uid\u0026gt; -s \u0026lt;domain_uid\u0026gt;-rcu-credentials where\n\u0026lt;rcu_prefix\u0026gt; is the name of the RCU schema to be created.\n\u0026lt;rcu_schema_pwd\u0026gt; is the password you want to create for the RCU schema prefix.\n\u0026lt;db_host.domain\u0026gt; is the database server hostname.\n\u0026lt;db_port\u0026gt; is the database listener port.\n\u0026lt;service_name\u0026gt; is the database service name.\n\u0026lt;sys_db_user\u0026gt; is the database user with sys dba privilege.\n\u0026lt;sys_db_pwd\u0026gt; is the sys database password.\n\u0026lt;domain_uid\u0026gt; is the domain_uid that you want to create. This must be the same domain_uid used in the domain secret. For example, governancedomain.\n\u0026lt;domain_namespace\u0026gt; is the domain namespace you created in Create a namespace for Oracle Identity Governance. For example oigns.\n\u0026lt;domain_uid\u0026gt;-rcu-credentials is the name of the rcu secret to create. Note: The secret name must follow this format (\u0026lt;domain_uid\u0026gt;-rcu-credentials) or domain creation will fail.\nFor example:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils $ ./create-secret.sh -l \u0026#34;rcu_prefix=OIGK8S\u0026#34; -l \u0026#34;rcu_schema_password=\u0026lt;rcu_schema_password\u0026gt;\u0026#34; -l \u0026#34;db_host=mydatabasehost.example.com\u0026#34; -l \u0026#34;db_port=1521\u0026#34; -l \u0026#34;db_service=orcl.example.com\u0026#34; -l \u0026#34;dba_user=sys\u0026#34; -l \u0026#34;dba_password=\u0026lt;dba_password\u0026gt;\u0026#34; -n oigns -d governancedomain -s governancedomain-rcu-credentials The output will look similar to the following:\n@@ Info: Setting up secret \u0026#39;governancedomain-rcu-credentials\u0026#39;. secret/governancedomain-rcu-credentials created secret/governancedomain-rcu-credentials labeled   Verify the secret is created using the following command:\n$ kubectl get secret \u0026lt;kubernetes_rcu_secret\u0026gt; -o yaml -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get secret governancedomain-rcu-credentials -o yaml -n oigns The output will look similar to the following:\napiVersion: v1 data: db_host: \u0026lt;DB_HOST\u0026gt; db_port: MTUyMQ== db_service: \u0026lt;SERVICE_NAME\u0026gt; dba_password: \u0026lt;PASSWORD\u0026gt; dba_user: c3lz rcu_prefix: \u0026lt;RCU_PREFIX\u0026gt; rcu_schema_password: \u0026lt;RCU_PWD\u0026gt; kind: Secret metadata: creationTimestamp: \u0026#34;\u0026lt;DATE\u0026gt;\u0026#34; labels: weblogic.domainUID: governancedomain name: governancedomain-rcu-credentials namespace: oigns resourceVersion: \u0026#34;31695660\u0026#34; uid: 71cfcc73-4c96-42bd-b9a5-988ea9ed27ff type: Opaque   Generate WDT models and the domain resource yaml file In this section you generate the required WDT models for the OIG domain, along with the domain resource yaml file.\n  Navigate to the $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/generate_models_utils directory:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/generate_models_utils   Make a copy of the create-domain-wdt.yaml file:\n$ cp create-domain-wdt.yaml create-domain-wdt.yaml.orig   Edit the create-domain-wdt.yaml and modify the following parameters. Save the file when complete:\ndomainUID: \u0026lt;domain_uid\u0026gt; domainHome: /u01/oracle/user_projects/domains/\u0026lt;domain_uid\u0026gt; image: \u0026lt;image_name\u0026gt;:\u0026lt;tag\u0026gt; imagePullSecretName: \u0026lt;container_registry_secret\u0026gt; logHome: /u01/oracle/user_projects/domains/logs/\u0026lt;domain_uid\u0026gt; namespace: \u0026lt;domain_namespace\u0026gt; weblogicDomainStorageType: NFS weblogicDomainStorageNFSServer: \u0026lt;nfs_server\u0026gt; weblogicDomainStoragePath: \u0026lt;physical_path_of_persistent_storage\u0026gt; weblogicDomainStorageSize: 10G Note: The \u0026lt;domain_namespace\u0026gt; and \u0026lt;domain_uid\u0026gt; must be the same as those used in Creating Kubernetes secrets for the domain and RCU\nFor example:\ndomainUID: governancedomain domainHome: /u01/oracle/user_projects/domains/governancedomain image: container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October'24\u0026gt; imagePullSecretName: orclcred logHome: /u01/oracle/user_projects/domains/logs/governancedomain namespace: oigns weblogicDomainStorageType: NFS weblogicDomainStorageNFSServer: mynfsserver weblogicDomainStoragePath: /scratch/shared/governancedomain weblogicDomainStorageSize: 10G ``\nNote : If using a shared file system instead of NFS, set weblogicDomainStorageType: HOST_PATH and remove weblogicDomainStorageNFSServer.\nA full list of parameters in the create-domain-wdt.yaml file are shown below:\n     Parameter Definition Default     adminPort Port number for the Administration Server inside the Kubernetes cluster. 7001   adminNodePort Port number for the Administration Server outside the Kubernetes cluster. 30701   configuredManagedServerCount Number of Managed Server instances to generate for the domain. 5   datasourceType Type of JDBC datasource applicable for the OIG domain. Legal values are agl and generic. Choose agl for Active GridLink datasource and generic for Generic datasource. For enterprise deployments, Oracle recommends that you use GridLink data sources to connect to Oracle RAC databases. See the Enterprise Deployment Guide for further details. generic   domainHome Home directory of the OIG domain. If not specified, the value is derived from the domainUID as /shared/domains/\u0026lt;domainUID\u0026gt;. /u01/oracle/user_projects/domains/governancedomain   domainPVMountPath Mount path of the domain persistent volume. /u01/oracle/user_projects/domains   domainUID Unique ID that will be used to identify this particular domain. Used as the name of the generated WebLogic domain as well as the name of the Kubernetes domain resource. This ID must be unique across all domains in a Kubernetes cluster. This ID cannot contain any character that is not valid in a Kubernetes service name. governancedomain   edgInstall Used only if performing an install using the Enterprise Deployment Guide. See, Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster. false   exposeAdminNodePort Boolean indicating if the Administration Server is exposed outside of the Kubernetes cluster. false   exposeAdminT3Channel Boolean indicating if the T3 administrative channel is exposed outside the Kubernetes cluster. true   frontEndHost The entry point URL for the OIM. example.com   frontEndHost The entry point port for the OIM. 14000   image OIG container image. The operator requires OIG 12.2.1.4. Refer to Obtain the OIG container image for details on how to obtain or create the image. For WDT domains you must use April 24 or later. oracle/oig:12.2.1.4.0   imagePullSecretName Name of the Kubernetes secret to access the container registry to pull the OIG container image. The presence of the secret will be validated when this parameter is specified.    initialManagedServerReplicas Number of Managed Servers to initially start for the domain. 2   javaOptions Java options for starting the Administration Server and Managed Servers. A Java option can have references to one or more of the following pre-defined variables to obtain WebLogic domain information: $(DOMAIN_NAME), $(DOMAIN_HOME), $(ADMIN_NAME), $(ADMIN_PORT), and $(SERVER_NAME). -Dweblogic.StdoutDebugEnabled=false   logHome The in-pod location for the domain log, server logs, server out, and Node Manager log files. If not specified, the value is derived from the domainUID as /shared/logs/\u0026lt;domainUID\u0026gt;. /u01/oracle/user_projects/domains/logs/governancedomain   namespace Kubernetes namespace in which to create the domain. oigns   oimCPU Initial CPU Units, 1000m = 1 CPU core. 1000m   oimMaxCPU Max CPU Cores pod is allowed to consume. 2   oimMemory Initial memory allocated to a pod. 4Gi   oimMaxMemory Max memory a pod is allowed to consume. 8Gi   oimServerJavaParams The memory parameters to use for the OIG managed servers. \u0026quot;-Xms8192m -Xmx8192m\u0026quot;   productionModeEnabled Boolean indicating if production mode is enabled for the domain. true   soaCPU Initial CPU Units, 1000m = 1 CPU core. 1000m   soaMaxCPU Max CPU Cores pod is allowed to consume. 1   soaMemory Initial Memory pod allocated to a pod. 4Gi   soaMaxMemory Max Memory pod is allowed to consume. 10Gi   soaServerJavaParams The memory parameters to use for the SOA managed servers. \u0026quot;-Xms8192m -Xmx8192m\u0026quot;   t3PublicAddress Public address for the T3 channel. This should be set to the public address of the Kubernetes cluster. This would typically be a load balancer address. For development environments only: In a single server (all-in-one) Kubernetes deployment, this may be set to the address of the master, or at the very least, it must be set to the address of one of the worker nodes. If not provided, the script will attempt to set it to the IP address of the Kubernetes cluster   weblogicDomainStorageType Persistent volume storage type. Options are NFS for NFS volumes or HOST_PATH for shared file system. NFS   weblogicDomainStorageNFSServer Hostname or IP address of the NFS Server. nfsServer   weblogicDomainStoragePath Physical path to the persistent volume. /scratch/governancedomainpv   weblogicDomainStorageSize Total storage allocated to the persistent storage. 10Gi    Note: The above CPU and memory values are for examples only. For Enterprise Deployments, please review the performance recommendations and sizing requirements in Enterprise Deployment Guide for Oracle Identity and Access Management in a Kubernetes Cluster.\n Run the generate_wdt_models.sh, specifying your input file and an output directory to store the generated artifacts:\n $ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/generate_models_utils $ ./generate_wdt_models.sh -i create-domain-wdt.yaml -o \u0026lt;path_to_output_directory\u0026gt; For example:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/generate_models_utils $ ./generate_wdt_models.sh -i create-domain-wdt.yaml -o output The output will look similar to the following:\ninput parameters being used export version=\u0026quot;create-weblogic-sample-domain-inputs-v1\u0026quot; export adminPort=\u0026quot;7001\u0026quot; export domainUID=\u0026quot;governancedomain\u0026quot; export configuredManagedServerCount=\u0026quot;5\u0026quot; export initialManagedServerReplicas=\u0026quot;1\u0026quot; export productionModeEnabled=\u0026quot;true\u0026quot; export t3ChannelPort=\u0026quot;30012\u0026quot; export datasourceType=\u0026quot;generic\u0026quot; export edgInstall=\u0026quot;false\u0026quot; export domainHome=\u0026quot;/u01/oracle/user_projects/domains/governancedomain\u0026quot; export image=\u0026quot;container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October'24\u0026gt;\u0026quot; export imagePullSecretName=\u0026quot;orclcred\u0026quot; export logHome=\u0026quot;/u01/oracle/user_projects/domains/logs/governancedomain\u0026quot; export exposeAdminT3Channel=\u0026quot;false\u0026quot; export adminNodePort=\u0026quot;30701\u0026quot; export exposeAdminNodePort=\u0026quot;false\u0026quot; export namespace=\u0026quot;oigns\u0026quot; javaOptions=-Dweblogic.StdoutDebugEnabled=false export domainPVMountPath=\u0026quot;/u01/oracle/user_projects\u0026quot; export weblogicDomainStorageType=\u0026quot;NFS\u0026quot; export weblogicDomainStorageNFSServer=\u0026quot;mynfsServer\u0026quot; export weblogicDomainStoragePath=\u0026quot;/scratch/shared/governancedomainpv\u0026quot; export weblogicDomainStorageReclaimPolicy=\u0026quot;Retain\u0026quot; export weblogicDomainStorageSize=\u0026quot;10Gi\u0026quot; export frontEndHost=\u0026quot;example.com\u0026quot; export frontEndPort=\u0026quot;14000\u0026quot; export oimServerJavaParams=\u0026quot;-Xms8192m -Xmx8192m \u0026quot; export soaServerJavaParams=\u0026quot;-Xms8192m -Xmx8192m \u0026quot; export oimMaxCPU=\u0026quot;2\u0026quot; export oimCPU=\u0026quot;1000m\u0026quot; export oimMaxMemory=\u0026quot;8Gi\u0026quot; export oimMemory=\u0026quot;4Gi\u0026quot; export soaMaxCPU=\u0026quot;1\u0026quot; export soaCPU=\u0026quot;1000m\u0026quot; export soaMaxMemory=\u0026quot;10Gi\u0026quot; export soaMemory=\u0026quot;4Gi\u0026quot; validateWlsDomainName called with governancedomain WDT model file, property file and sample domain.yaml are genereted successfully at output/weblogic-domains/governancedomain ``\nThis will generate domain.yaml, oig.yaml and oig.properties in output/weblogic-domains/governancedomain.\n  Copy the generated files to a $WORKDIR/yaml directory:\n $ mkdir $WORKDIR/yaml $ cp output/weblogic-domains/governancedomain/*.* $WORKDIR/yaml ``\n  Build the Domain Creation Image In this section you build a domain creation image to host the WDT model files and WebLogic Deploy Tooling (WDT) installer.\nDomain creation images are used for supplying WDT model files, WDT variables files, WDT application archive files (collectively known as WDT model files), and the directory where the WebLogic Deploy Tooling software is installed (known as the WDT Home), when deploying a domain using a Domain on PV model. You distribute WDT model files and the WDT executable using these images, and the WebLogic Kubernetes Operator uses them to manage the domain.\nNote: These images are only used for creating the domain and will not be used to update the domain. The domain creation image is used for domain creation only, it is not the product container image used for OIG.\nFor more details on creating the domain image, see Domain creation images.\nThe steps to build the domain creation image are shown in the sections below.\nPrerequisites Verify that your environment meets the following prerequisites:\n You have created the yaml files are per Generate WDT models and the domain resource yaml file. You have a container registry available to push the domain creation image to. A container image client on the build machine, such as Docker or Podman.  For Docker, a minimum version of 18.03.1.ce is required. For Podman, a minimum version of 3.0.1 is required.   An installed version of JDK to run Image Tool, version 8+. Proxies are set accordingly at the OS level if required.  Prepare the build domain image script The sample scripts for the Oracle Identity Governance domain image creation are available at $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image.\n  Navigate to the $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/properties directory:\n$ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/properties   Make a copy of the build-domain-creation-image.properties:\n$ cp build-domain-creation-image.properties build-domain-creation-image.properties.orig   Edit the build-domain-creation-image.properties and modify the following parameters. Save the file when complete:\nJAVA_HOME=\u0026lt;Java home location\u0026gt; IMAGE_TAG=\u0026lt;Image tag name\u0026gt; REPOSITORY=\u0026lt;Container image repository to push the image\u0026gt; REG_USER= \u0026lt;Container registry username\u0026gt; IMAGE_PUSH_REQUIRES_AUTH=\u0026lt;Whether image push requires authentication to the registry\u0026gt; WDT_MODEL_FILE=\u0026lt;Full Path to WDT Model file oig.yaml\u0026gt; WDT_VARIABLE_FILE=\u0026lt;Full path to WDT variable file oig.properties\u0026gt; WDT_ARCHIVE_FILE=\u0026lt;Full Path to WDT Archive file\u0026gt; WDT_VERSION=\u0026quot;Version of WebLogic Deploy Tool version to use\u0026quot; WIT_VERSION=\u0026quot;Version of WebLogic Image Tool to use\u0026quot; For example:\nJAVA_HOME=/scratch/jdk IMAGE_TAG=oig-aux-generic-v1 BASE_IMAGE=ghcr.io/oracle/oraclelinux:8-slim REPOSITORY=container-registry.example.com/mytenancy/idm REG_USER=mytenancy/myemail@example.com IMAGE_PUSH_REQUIRES_AUTH=true WDT_MODEL_FILE=\u0026quot;/scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/yaml/oig.yaml\u0026quot; WDT_VARIABLE_FILE=\u0026quot;/scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/oig.properties\u0026quot; WDT_ARCHIVE_FILE=\u0026quot;\u0026quot; WDT_VERSION=\u0026quot;3.5.3\u0026quot; WIT_VERSION=\u0026quot;1.12.1\u0026quot; A full list of parameters and descriptions in the build-domain-creation-image.properties file are shown below:\n     Parameter Definition Default     JAVA_HOME Path to the JAVA_HOME for the JDK8+.    IMAGE_TAG Image tag for the final domain creation image. oig-aux-generic-v1   BASE_IMAGE The Oracle Linux product container image to use as a base image. ghcr.io/oracle/oraclelinux:8-slim   REPOSITORY Container image repository that will host the domain creation image. iad.ocir.io/mytenancy/idm   REG_USER Username to authenticate to the \u0026lt;REPOSITORY\u0026gt; and push the domain creation image. mytenancy/oracleidentitycloudservice/myemail@example.com   IMAGE_PUSH_REQUIRES_AUTH If authentication to \u0026lt;REPOSITORY\u0026gt; is required then set to true, else set to false. If set to false, \u0026lt;REG_USER\u0026gt; is not required. true   WDT_MODEL_FILE Absolute path to WDT model file oig.yaml. For example $WORKDIR/yaml/oig.yaml.    WDT_MODEL_FILE Absolute path to WDT variable file oig.properties. For example $WORKDIR/yaml/oig.properties.    WDT_ARCHIVE_FILE Absolute path to WDT archive file.    WDT_VERSION WebLogic Deploy Tool version. If not specified the latest available version will be downloaded. It is recommended to use the default value. 3.5.3   WIT_VERSION WebLogic Image Tool Version. If not specified the latest available version will be downloaded. It is recommended to use the default value. 1.12.1   TARGET Select the target environment in which the created image will be used. Supported values: Default or OpenShift. See Additional Information. Default   CHOWN userid:groupid to be used for creating files within the image, such as the WDT installer, WDT model, and WDT archive. If the user or group does not exist in the image, they will be added with useradd/groupadd. oracle:oracle    Note: If IMAGE_PUSH_REQUIRES_AUTH=true, you must edit the $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/properties/.regpassword and change \u0026lt;REGISTRY_PASSWORD\u0026gt; to your registry password.\nREG_PASSWORD=\u0026quot;\u0026lt;REPOSITORY_PASSWORD\u0026gt;\u0026quot; Run the build-domain-creation-image script   Execute the build-domain-creation-image.sh by specifying the input properties parameter files:\n $ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image $ ./build-domain-creation-image.sh -i properties/build-domain-creation-image.properties ``\nNote: If using a password file, you must add -p properties/.regpassword to the end of the command.\nExecuting this command will build the image and push it to the container image repository.\nThe output will look similar to the following:\n  Click here to see example output:   using WDT_DIR: /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir Using WDT_VERSION 3.5.3 Using WIT_DIR /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir Using WIT_VERSION 1.12.1 Using Image tag: oig-aux-generic-v1 using Base Image: ghcr.io/oracle/oraclelinux:8-slim using IMAGE_BUILDER_EXE /usr/bin/podman JAVA_HOME is set to /home/opc/jdk @@ Info: WIT_INSTALL_ZIP_URL is '' @@ WIT_INSTALL_ZIP_URL is not set @@ imagetool.sh not found in /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/imagetool/bin. Installing imagetool... @@ Info: Downloading https://github.com/oracle/weblogic-image-tool/releases/download/release-1.12.1/imagetool.zip @@ Info: Downloading https://github.com/oracle/weblogic-image-tool/releases/download/release-1.12.1/imagetool.zip with https_proxy=\u0026quot;http://proxy.example.com:80\u0026quot; @@ Info: Archive downloaded to /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/imagetool.zip, about to unzip via '/home/opc/jdk/bin/jar xf'. @@ Info: imageTool cache does not contain a valid entry for wdt_3.5.3. Installing WDT @@ Info: WDT_INSTALL_ZIP_URL is '' @@ WDT_INSTALL_ZIP_URL is not set @@ Info: Downloading https://github.com/oracle/weblogic-deploy-tooling/releases/download/release-3.5.3/weblogic-deploy.zip @@ Info: Downloading https://github.com/oracle/weblogic-deploy-tooling/releases/download/release-3.5.3/weblogic-deploy.zip with https_proxy=\u0026quot;http://proxy.example.com:80\u0026quot; @@ Info: Archive downloaded to /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/weblogic-deploy.zip [INFO ] Successfully added to cache. wdt_3.5.3=/scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/weblogic-deploy.zip @@ Info: Install succeeded, imagetool install is in the /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/imagetool directory. Starting Building Image container-registry.example.com/mytenancy/idm:oig-aux-generic-v1 Login Succeeded! WDT_MODEL_FILE is set to /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/yaml/oig.yaml WDT_VARIABLE_FILE is set to /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/yaml/oig.properties Additional Build Commands file is set to /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/additonal-build-files/build-files.txt Additonal Build file is set to /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/additonal-build-files/OIG.json [INFO ] WebLogic Image Tool version 1.12.1 [INFO ] Image Tool build ID: 88fdf00a-d97a-4ff7-b2d1-ad213bffeae1 [INFO ] Temporary directory used for image build context: /home/opc/wlsimgbuilder_temp8473580374961408286 [INFO ] Copying /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/additonal-build-files/OIG.json to build context folder. [INFO ] User specified fromImage ghcr.io/oracle/oraclelinux:8-slim [INFO ] Inspecting ghcr.io/oracle/oraclelinux:8-slim, this may take a few minutes if the image is not available locally. [INFO ] Copying /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/yaml/oig.yaml to build context folder. [INFO ] Copying /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/yaml/oig.properties to build context folder. [INFO ] Copying /scratch/OIGK8S/fmw-kubernetes/OracleIdentityGovernance/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils/build-domain-creation-image/workdir/weblogic-deploy.zip to build context folder. [INFO ] Starting build: /usr/bin/podman build --no-cache --force-rm --tag container-registry.example.com/mytenancy/idm:oig-aux-generic-v1 --pull --build-arg http_proxy=http://proxy.example.com:80 --build-arg https_proxy=http://proxy.example.com:80 --build-arg no_proxy=localhost,127.0.0.0/8,.example.com,,/var/run/crio/crio.sock,X.X.X.X,/var/run/crio/crio.sock,100.105.18.32 /home/opc/wlsimgbuilder_temp8473580374961408286 [1/3] STEP 1/5: FROM ghcr.io/oracle/oraclelinux:8-slim AS os_update [1/3] STEP 2/5: LABEL com.oracle.weblogic.imagetool.buildid=\u0026quot;88fdf00a-d97a-4ff7-b2d1-ad213bffeae1\u0026quot; --\u0026gt; 58df386c56c0 [1/3] STEP 3/5: USER root --\u0026gt; 14e154f7b87b [1/3] STEP 4/5: RUN microdnf update \u0026amp;\u0026amp; microdnf install gzip tar unzip libaio libnsl jq findutils diffutils shadow-utils \u0026amp;\u0026amp; microdnf clean all Downloading metadata... Downloading metadata... Package Repository Size Installing: glibc-gconv-extra-2.28-236.0.1.el8_9.12.x86_64 ol8_baseos_latest 1.6 MB Upgrading: glibc-2.28-236.0.1.el8_9.12.x86_64 ol8_baseos_latest 2.3 MB replacing glibc-2.28-236.0.1.el8.7.x86_64 glibc-common-2.28-236.0.1.el8_9.12.x86_64 ol8_baseos_latest 1.1 MB replacing glibc-common-2.28-236.0.1.el8.7.x86_64 glibc-minimal-langpack-2.28-236.0.1.el8_9.12.x86_64 ol8_baseos_latest 71.1 kB replacing glibc-minimal-langpack-2.28-236.0.1.el8.7.x86_64 systemd-libs-239-78.0.4.el8.x86_64 ol8_baseos_latest 1.2 MB replacing systemd-libs-239-78.0.3.el8.x86_64 Transaction Summary: Installing: 1 packages Reinstalling: 0 packages Upgrading: 4 packages Obsoleting: 0 packages Removing: 0 packages Downgrading: 0 packages Downloading packages... Running transaction test... Updating: glibc-common;2.28-236.0.1.el8_9.12;x86_64;ol8_baseos_latest Updating: glibc-minimal-langpack;2.28-236.0.1.el8_9.12;x86_64;ol8_baseos_latest Updating: glibc;2.28-236.0.1.el8_9.12;x86_64;ol8_baseos_latest Installing: glibc-gconv-extra;2.28-236.0.1.el8_9.12;x86_64;ol8_baseos_latest Updating: systemd-libs;239-78.0.4.el8;x86_64;ol8_baseos_latest Cleanup: systemd-libs;239-78.0.3.el8;x86_64;installed Cleanup: glibc;2.28-236.0.1.el8.7;x86_64;installed Cleanup: glibc-minimal-langpack;2.28-236.0.1.el8.7;x86_64;installed Cleanup: glibc-common;2.28-236.0.1.el8.7;x86_64;installed Complete. Package Repository Size Installing: diffutils-3.6-6.el8.x86_64 ol8_baseos_latest 369.3 kB findutils-1:4.6.0-21.el8.x86_64 ol8_baseos_latest 539.8 kB gzip-1.9-13.el8_5.x86_64 ol8_baseos_latest 170.7 kB jq-1.6-7.0.3.el8.x86_64 ol8_appstream 206.5 kB libaio-0.3.112-1.el8.x86_64 ol8_baseos_latest 33.4 kB libnsl-2.28-236.0.1.el8_9.12.x86_64 ol8_baseos_latest 112.3 kB oniguruma-6.8.2-2.1.el8_9.x86_64 ol8_appstream 191.5 kB unzip-6.0-46.0.1.el8.x86_64 ol8_baseos_latest 201.0 kB Transaction Summary: Installing: 8 packages Reinstalling: 0 packages Upgrading: 0 packages Obsoleting: 0 packages Removing: 0 packages Downgrading: 0 packages Downloading packages... Running transaction test... Installing: oniguruma;6.8.2-2.1.el8_9;x86_64;ol8_appstream Installing: jq;1.6-7.0.3.el8;x86_64;ol8_appstream Installing: unzip;6.0-46.0.1.el8;x86_64;ol8_baseos_latest Installing: libnsl;2.28-236.0.1.el8_9.12;x86_64;ol8_baseos_latest Installing: libaio;0.3.112-1.el8;x86_64;ol8_baseos_latest Installing: gzip;1.9-13.el8_5;x86_64;ol8_baseos_latest Installing: findutils;1:4.6.0-21.el8;x86_64;ol8_baseos_latest Installing: diffutils;3.6-6.el8;x86_64;ol8_baseos_latest Complete. Complete. --\u0026gt; 62016b4b1988 [1/3] STEP 5/5: RUN if [ -z \u0026quot;$(getent group oracle)\u0026quot; ]; then groupadd oracle || exit 1 ; fi \u0026amp;\u0026amp; if [ -z \u0026quot;$(getent group oracle)\u0026quot; ]; then groupadd oracle || exit 1 ; fi \u0026amp;\u0026amp; if [ -z \u0026quot;$(getent passwd oracle)\u0026quot; ]; then useradd -g oracle oracle || exit 1; fi \u0026amp;\u0026amp; mkdir -p /u01 \u0026amp;\u0026amp; chown oracle:oracle /u01 \u0026amp;\u0026amp; chmod 775 /u01 --\u0026gt; 77099c4f3707 [2/3] STEP 1/4: FROM 77099c4f37077d45015cebb456b1ce40ba075d7c2d24f5cb9f41c60efa679200 AS wdt_build [2/3] STEP 2/4: RUN mkdir -p /auxiliary \u0026amp;\u0026amp; mkdir -p /auxiliary/models \u0026amp;\u0026amp; chown oracle:oracle /auxiliary --\u0026gt; 82f0cd380d89 [2/3] STEP 3/4: COPY --chown=oracle:oracle [\u0026quot;weblogic-deploy.zip\u0026quot;, \u0026quot;/tmp/imagetool/\u0026quot;] --\u0026gt; a108b42804ca [2/3] STEP 4/4: RUN test -d /auxiliary/weblogic-deploy \u0026amp;\u0026amp; rm -rf /auxiliary/weblogic-deploy || echo Initial WDT install \u0026amp;\u0026amp; unzip -q \u0026quot;/tmp/imagetool/weblogic-deploy.zip\u0026quot; -d /auxiliary Initial WDT install --\u0026gt; 1432012f293d [3/3] STEP 1/12: FROM 77099c4f37077d45015cebb456b1ce40ba075d7c2d24f5cb9f41c60efa679200 AS final [3/3] STEP 2/12: ENV AUXILIARY_IMAGE_PATH=/auxiliary WDT_HOME=/auxiliary WDT_MODEL_HOME=/auxiliary/models --\u0026gt; fec3c77539d6 [3/3] STEP 3/12: RUN mkdir -p /auxiliary \u0026amp;\u0026amp; chown oracle:oracle /auxiliary --\u0026gt; ad9ca2b55f11 [3/3] STEP 4/12: COPY --from=wdt_build --chown=oracle:oracle /auxiliary /auxiliary/ --\u0026gt; 9fdf1ed52888 [3/3] STEP 5/12: RUN mkdir -p /auxiliary/models \u0026amp;\u0026amp; chown oracle:oracle /auxiliary/models --\u0026gt; 208de9fbed4a [3/3] STEP 6/12: COPY --chown=oracle:oracle [\u0026quot;oig.yaml\u0026quot;, \u0026quot;/auxiliary/models/\u0026quot;] --\u0026gt; c45884e3ad93 [3/3] STEP 7/12: COPY --chown=oracle:oracle [\u0026quot;oig.properties\u0026quot;, \u0026quot;/auxiliary/models/\u0026quot;] --\u0026gt; d0ae571589ed [3/3] STEP 8/12: RUN chmod -R 640 /auxiliary/models/* --\u0026gt; 08fe4c892394 [3/3] STEP 9/12: USER oracle --\u0026gt; 0a0bb84fd90c [3/3] STEP 10/12: WORKDIR /auxiliary --\u0026gt; aa4d6fe84415 [3/3] STEP 11/12: COPY --chown=oracle:oracle files/OIG.json /auxiliary/weblogic-deploy/lib/typedefs --\u0026gt; 40fabe477af7 [3/3] STEP 12/12: RUN chmod -R 755 /auxiliary [3/3] COMMIT container-registry.example.com/mytenancy/idm:oig-aux-generic-v1 --\u0026gt; ca9120fdeb0b Successfully tagged container-registry.example.com/mytenancy/idm:oig-aux-generic-v1 ca9120fdeb0b29ef447b959ccba9dae0b7f062a2b6b4c41680e2e72c7f591741 [INFO ] Build successful. Build time=63s. Image tag=container-registry.example.com/mytenancy/idm:oig-aux-generic-v1 Getting image source signatures Copying blob fa48179450c3 done Copying blob 43cd89792b11 done Copying blob db97724803c6 done Copying blob 8b4d3bacf0d7 done Copying blob 97961b141e48 done Copying blob affb88964094 done Copying blob cd6baebadbfd done Copying blob d1167c2b24bf done Copying blob 31b60d1b87d2 done Copying blob 2cc6de086f3c done Copying blob 4529e99c5305 done Copying config ca9120fdeb done Writing manifest to image destination Pushed image container-registry.example.com/mytenancy/idm:oig-aux-generic-v1 to image repository      Deploy the OIG domain resource In this section you modify the OIG domain.yaml and deploy the OIG domain using the build image created.\nModify the OIG domain.yaml In this section you modify the domain.yaml file in preparation for creating the OIG domain.\n  Edit the $WORKDIR/yaml/domain.yaml and update the %DOMAIN_CREATION_IMAGE% with the previously generated image name.\nNote: %DOMAIN_CREATION_IMAGE% takes the format of \u0026lt;REPOSITORY\u0026gt;:\u0026lt;TAG\u0026gt;:\ndomain: # Domain | DomainAndRCU createIfNotExists: DomainAndRCU # Image containing WDT installer and Model files. domainCreationImages: - image: '%DOMAIN_CREATION_IMAGE%' domainType: OIG For example:\ndomain: # Domain | DomainAndRCU createIfNotExists: DomainAndRCU # Image containing WDT installer and Model files. domainCreationImages: - image: 'container-registry.example.com/mytenancy/idm:oig-aux-generic-v1' domainType: OIG   In circumstances where you may be pulling the OIG product container image from Oracle Container Registry, and then the domain image from a private registry, you must first create a secret (privatecred) for the private registry. For example:\n$ kubectl create secret docker-registry \u0026quot;privatecred\u0026quot; --docker-server=container-registry.example.com \\ --docker-username=\u0026quot;user@example.com\u0026quot; \\ --docker-password=password --docker-email=user@example.com \\ --namespace=oigns Then specify both secrets for imagePullSecrets in the domain.yaml. For example:\n ... spec: # The WebLogic Domain Home domainHome: /u01/oracle/user_projects/domains/governancedomain # The domain home source type # Set to PersistentVolume for domain-in-pv, Image for domain-in-image, or FromModel for model-in-image domainHomeSourceType: PersistentVolume # The WebLogic Server image that the Operator uses to start the domain image: \u0026quot;container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October'24\u0026gt;\u0026quot; # imagePullPolicy defaults to \u0026quot;Always\u0026quot; if image version is :latest imagePullPolicy: IfNotPresent imagePullSecrets: - name: orclcred - name: privatecred # Identify which Secret contains the WebLogic Admin credentials ... ``\nFor more information about the configuration parameters in domain.yaml, see Domain Resources.\n  Click here to see an example domain.yaml:    # Copyright (c) 2024, Oracle and/or its affiliates. # Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl. # # This is an example of how to define an OIG Domain. For details about the fields in domain specification, refer https://oracle.github.io/weblogic-kubernetes-operator/managing-domains/domain-resource/ # apiVersion: \u0026quot;weblogic.oracle/v9\u0026quot; kind: Domain metadata: name: governancedomain namespace: oigns labels: weblogic.domainUID: governancedomain spec: # The WebLogic Domain Home domainHome: /u01/oracle/user_projects/domains/governancedomain # The domain home source type # Set to PersistentVolume for domain-in-pv, Image for domain-in-image, or FromModel for model-in-image domainHomeSourceType: PersistentVolume # The WebLogic Server image that the Operator uses to start the domain image: \u0026quot;container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October'24\u0026gt;\u0026quot; # imagePullPolicy defaults to \u0026quot;Always\u0026quot; if image version is :latest imagePullPolicy: IfNotPresent # Add additional secret name if you are using a different registry for domain creation image. # Identify which Secret contains the credentials for pulling an image imagePullSecrets: - name: orclcred - name: privatecred # Identify which Secret contains the WebLogic Admin credentials webLogicCredentialsSecret: name: governancedomain-weblogic-credentials # Whether to include the server out file into the pod's stdout, default is true includeServerOutInPodLog: true # Whether to enable log home logHomeEnabled: true # Whether to write HTTP access log file to log home httpAccessLogInLogHome: true # The in-pod location for domain log, server logs, server out, introspector out, and Node Manager log files logHome: /u01/oracle/user_projects/domains/logs/governancedomain # An (optional) in-pod location for data storage of default and custom file stores. # If not specified or the value is either not set or empty (e.g. dataHome: \u0026quot;\u0026quot;) then the # data storage directories are determined from the WebLogic domain home configuration. dataHome: \u0026quot;\u0026quot; # serverStartPolicy legal values are \u0026quot;Never, \u0026quot;IfNeeded\u0026quot;, or \u0026quot;AdminOnly\u0026quot; # This determines which WebLogic Servers the Operator will start up when it discovers this Domain # - \u0026quot;Never\u0026quot; will not start any server in the domain # - \u0026quot;AdminOnly\u0026quot; will start up only the administration server (no managed servers will be started) # - \u0026quot;IfNeeded\u0026quot; will start all non-clustered servers, including the administration server and clustered servers up to the replica count serverStartPolicy: IfNeeded serverPod: initContainers: #DO NOT CHANGE THE NAME OF THIS INIT CONTAINER - name: compat-connector-init # OIG Product image, same as spec.image mentioned above image: \u0026quot;container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October'24\u0026gt;\u0026quot; imagePullPolicy: IfNotPresent command: [ \u0026quot;/bin/bash\u0026quot;, \u0026quot;-c\u0026quot;, \u0026quot;mkdir -p /u01/oracle/user_projects/domains/ConnectorDefaultDirectory\u0026quot;, \u0026quot;mkdir -p /u01/oracle/user_projects/domains/wdt-logs\u0026quot;] volumeMounts: - mountPath: /u01/oracle/user_projects name: weblogic-domain-storage-volume # a mandatory list of environment variable to be set on the servers env: - name: JAVA_OPTIONS value: -Dweblogic.StdoutDebugEnabled=false - name: USER_MEM_ARGS value: \u0026quot;-Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx1024m \u0026quot; - name: WLSDEPLOY_LOG_DIRECTORY value: \u0026quot;/u01/oracle/user_projects/domains/wdt-logs\u0026quot; - name: FRONTENDHOST value: example.com - name: FRONTENDPORT value: \u0026quot;14000\u0026quot; - name: WLSDEPLOY_PROPERTIES value: \u0026quot;-Dwdt.config.disable.rcu.drop.schema=true\u0026quot; envFrom: - secretRef: name: governancedomain-rcu-credentials volumes: - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: governancedomain-domain-pvc volumeMounts: - mountPath: /u01/oracle/user_projects name: weblogic-domain-storage-volume # adminServer is used to configure the desired behavior for starting the administration server. adminServer: # adminService: # channels: # The Admin Server's NodePort # - channelName: default # nodePort: 30701 # Uncomment to export the T3Channel as a service # - channelName: T3Channel serverPod: # an (optional) list of environment variable to be set on the admin servers env: - name: USER_MEM_ARGS value: \u0026quot;-Djava.security.egd=file:/dev/./urandom -Xms512m -Xmx1024m \u0026quot; configuration: secrets: [ governancedomain-rcu-credentials ] initializeDomainOnPV: persistentVolume: metadata: name: governancedomain-domain-pv spec: storageClassName: governancedomain-domain-storage-class capacity: # Total storage allocated to the persistent storage. storage: 10Gi # Reclaim policy of the persistent storage # # The valid values are: 'Retain', 'Delete', and 'Recycle' persistentVolumeReclaimPolicy: Retain # Persistent volume type for the persistent storage. # # The value must be 'hostPath' or 'nfs'. # # If using 'nfs', server must be specified. nfs: server: mynfsserver # hostPath: path: \u0026quot;/scratch/shared/governancedomain\u0026quot; persistentVolumeClaim: metadata: name: governancedomain-domain-pvc spec: storageClassName: governancedomain-domain-storage-class resources: requests: storage: 10Gi volumeName: governancedomain-domain-pv domain: # Domain | DomainAndRCU createIfNotExists: DomainAndRCU # Image containing WDT installer and Model files. domainCreationImages: - image: 'container-registry.example.com/mytenancy/idm:oig-aux-generic-v1' domainType: OIG # References to Cluster resources that describe the lifecycle options for all # the Managed Server members of a WebLogic cluster, including Java # options, environment variables, additional Pod content, and the ability to # explicitly start, stop, or restart cluster members. The Cluster resource # must describe a cluster that already exists in the WebLogic domain # configuration. clusters: - name: governancedomain-oim-cluster - name: governancedomain-soa-cluster # The number of managed servers to start for unlisted clusters # replicas: 1 --- # This is an example of how to define a Cluster resource. apiVersion: weblogic.oracle/v1 kind: Cluster metadata: name: governancedomain-oim-cluster namespace: oigns spec: clusterName: oim_cluster serverService: precreateService: true replicas: 0 serverPod: env: - name: USER_MEM_ARGS value: \u0026quot;-Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m \u0026quot; resources: limits: cpu: \u0026quot;2\u0026quot; memory: \u0026quot;8Gi\u0026quot; requests: cpu: \u0026quot;1000m\u0026quot; memory: \u0026quot;4Gi\u0026quot; --- # This is an example of how to define a Cluster resource. apiVersion: weblogic.oracle/v1 kind: Cluster metadata: name: governancedomain-soa-cluster namespace: oigns spec: clusterName: soa_cluster serverService: precreateService: true replicas: 1 serverPod: env: - name: USER_MEM_ARGS value: \u0026quot;-Xms8192m -Xmx8192m \u0026quot; resources: limits: cpu: \u0026quot;1\u0026quot; memory: \u0026quot;10Gi\u0026quot; requests: cpu: \u0026quot;1000m\u0026quot; memory: \u0026quot;4Gi\u0026quot; ```    Note: By default, WebLogic operator will create the RCU schema using WDT tooling and patch them during every domain deployment. If the RCU Schema with the given prefix already exists, and error will be thrown and the domain creation will fail. If you want to delete the schema every time during domain deployment, then can change the value \u0026quot;-Dwdt.config.disable.rcu.drop.schema=true\u0026quot; to \u0026quot;-Dwdt.config.disable.rcu.drop.schema=false\u0026quot;.\n  Optional WDT Models ConfigMap If required, you can provide a Kubernetes ConfigMap with additional WDT models and WDT variables files as supplements, or overrides, to those in domainCreationImages. For example in the output/weblogic-domains/governancedomain/domain.yaml:\n domain: ... domainCreationImages: ... domainCreationConfigMap: mymodel-domain-configmap The files inside domainCreationConfigMap must have file extensions, .yaml, .properties, or .zip.\n  To create a configmap run the following command:\n $ cd $WORKDIR/kubernetes/create-oim-domain/domain-home-on-pv/wdt-utils $ ./create-configmap.sh -n oigns -d governancedomain -c mymodel-domain-configmap -f wdt_models/mymodel.yaml   For more information on the usage of additional configuration, see Optional WDT models ConfigMap.\nDeploy the OIG domain In this section you deploy the OIG domain using the domain.yaml.\n  Run the following command to create OIG domain resources:\n$ kubectl create -f $WORKDIR/yaml/domain.yaml The following steps will be performed by WebLogic Kubernetes Operator:\n Run the introspector job. The introspection job will create the RCU Schemas and then patch them. The introspector job pod will create the domain on PV using the model provided in the domain creation image. The introspector job pod will execute OIG offline configuration actions post successful creation of domain via WDT. Brings up the Administration Server, and the SOA Managed Server (soa_server1).  The output will look similar to the following:\ndomain.weblogic.oracle/governancedomain created cluster.weblogic.oracle/governancedomain-oim-cluster created cluster.weblogic.oracle/governancedomain-soa-cluster created Whilst the domain creation is running, you can run the following command to monitor the progress:\n$ kubectl get pods -n oigns -w You can also tail the logs for the pods by running:\n$ kubectl logs -f \u0026lt;pod\u0026gt; -n oigns WDT specific logs can be found in \u0026lt;persistent_volume\u0026gt;/domains/wdt-logs.\nOnce everything is started you should see the Administration Server and SOA server are running:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 13m governancedomain-soa-server1 1/1 Running 0 10m If there are any failures, follow Domain creation failure with WDT models in the Troubleshooting section.\nNote: Depending on the speed of your cluster, it can take around 25 minutes for all the pods to be in READY 1/1 state.\n  Start the OIM server by running the following command:\n $ kubectl patch cluster -n oigns governancedomain-oim-cluster --type=merge -p '{\u0026quot;spec\u0026quot;:{\u0026quot;replicas\u0026quot;:1}}' ``\nThe output will look similar to the following:\n cluster.weblogic.oracle/governancedomain-oim-cluster patched ``\nYou can view the status of the OIM server by running:\n $ kubectl get pods -n oigns -w ``\nOnce the OIM server is running, the output will look similar to the following:\n NAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 16m governancedomain-soa-server1 1/1 Running 0 13m governancedomain-oim-server1 1/1 Running 0 5m22s ``\n  Verify the results Verify the domain, pods and services   Verify the domain, servers pods and services are created and in the READY state with a STATUS of 1/1, by running the following command:\n$ kubectl get all,domains -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get all,domains -n oigns The output will look similar to the following:\n NAME READY STATUS RESTARTS AGE pod/governancedomain-adminserver 1/1 Running 0 25m pod/governancedomain-oim-server1 1/1 Running 0 7m18s pod/governancedomain-soa-server1 1/1 Running 0 20m NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/governancedomain-adminserver ClusterIP None \u0026lt;none\u0026gt; 7001/TCP 25m service/governancedomain-cluster-oim-cluster ClusterIP 10.102.36.107 \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 20m service/governancedomain-cluster-soa-cluster ClusterIP 10.102.230.187 \u0026lt;none\u0026gt; 8001/TCP 20m service/governancedomain-oim-server1 ClusterIP None \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 7m18s service/governancedomain-oim-server2 ClusterIP 10.111.183.16 \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 20m service/governancedomain-oim-server3 ClusterIP 10.107.144.169 \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 20m service/governancedomain-oim-server4 ClusterIP 10.110.18.114 \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 20m service/governancedomain-oim-server5 ClusterIP 10.106.220.13 \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 20m service/governancedomain-soa-server1 ClusterIP None \u0026lt;none\u0026gt; 8001/TCP 20m service/governancedomain-soa-server2 ClusterIP 10.104.204.68 \u0026lt;none\u0026gt; 8001/TCP 20m service/governancedomain-soa-server3 ClusterIP 10.110.104.108 \u0026lt;none\u0026gt; 8001/TCP 20m service/governancedomain-soa-server4 ClusterIP 10.103.117.118 \u0026lt;none\u0026gt; 8001/TCP 20m service/governancedomain-soa-server5 ClusterIP 10.101.65.38 \u0026lt;none\u0026gt; 8001/TCP 20m NAME AGE domain.weblogic.oracle/governancedomain 32m NAME AGE cluster.weblogic.oracle/governancedomain-oim-cluster 32m cluster.weblogic.oracle/governancedomain-soa-cluster 32m The default domain created by the sample WDT models has the following characteristics:\n An Administration Server named AdminServer listening on port 7001. A configured OIG cluster named oig_cluster of size 5. A configured SOA cluster named soa_cluster of size 5. One started OIG managed Server, named oim_server1, listening on port 14000. One started SOA managed Server, named soa_server1, listening on port 8001. Log files that are located in \u0026lt;persistent_volume\u0026gt;/logs/\u0026lt;domainUID\u0026gt;    Verify the domain   Run the following command to describe the domain:\n$ kubectl describe domain \u0026lt;domain_uid\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe domain governancedomain -n oigns    Click here to see example output:   Name: governancedomain Namespace: oigns Labels: weblogic.domainUID=governancedomain Annotations: \u0026lt;none\u0026gt; API Version: weblogic.oracle/v9 Kind: Domain Metadata: Creation Timestamp: \u0026lt;DATE\u0026gt; Generation: 1 Resource Version: 1013312 UID: b5b4446b-b056-431f-8ae4-db470ac7731e Spec: Admin Server: Admin Channel Port Forwarding Enabled: true Server Pod: Env: Name: USER_MEM_ARGS Value: -Djava.security.egd=file:/dev/./urandom -Xms512m -Xmx1024m Server Start Policy: IfNeeded Clusters: Name: governancedomain-oim-cluster Name: governancedomain-soa-cluster Configuration: Initialize Domain On PV: Domain: Create If Not Exists: DomainAndRCU Domain Creation Images: Image: container-registry.example.com/mytenancy/idm:oig-aux-generic-v1 Domain Type: OIG Persistent Volume: Metadata: Name: governancedomain-domain-pv Spec: Capacity: Storage: 10Gi Nfs: Path: /scratch/shared/governancedomainpv Server: mynfsserver Persistent Volume Reclaim Policy: Retain Storage Class Name: governancedomain-domain-storage-class Persistent Volume Claim: Metadata: Name: governancedomain-domain-pvc Spec: Resources: Requests: Storage: 10Gi Storage Class Name: governancedomain-domain-storage-class Volume Name: governancedomain-domain-pv Override Distribution Strategy: Dynamic Secrets: governancedomain-rcu-credentials Data Home: Domain Home: /u01/oracle/user_projects/domains/governancedomain Domain Home Source Type: PersistentVolume Failure Retry Interval Seconds: 120 Failure Retry Limit Minutes: 1440 Http Access Log In Log Home: true Image: container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October\u0026#39;24\u0026gt; Image Pull Policy: IfNotPresent Image Pull Secrets: Name: orclcred Name: privatecred Include Server Out In Pod Log: true Log Home: /u01/oracle/user_projects/domains/logs/governancedomain Log Home Enabled: true Max Cluster Concurrent Shutdown: 1 Max Cluster Concurrent Startup: 0 Max Cluster Unavailable: 1 Replace Variables In Java Options: false Replicas: 1 Server Pod: Env: Name: JAVA_OPTIONS Value: -Dweblogic.StdoutDebugEnabled=false Name: USER_MEM_ARGS Value: -Djava.security.egd=file:/dev/./urandom -Xms256m -Xmx1024m Name: WLSDEPLOY_LOG_DIRECTORY Value: /u01/oracle/user_projects/domains/wdt-logs Name: FRONTENDHOST Value: example.com Name: FRONTENDPORT Value: 14000 Name: WLSDEPLOY_PROPERTIES Value: -Dwdt.config.disable.rcu.drop.schema=true Env From: Secret Ref: Name: governancedomain-rcu-credentials Init Containers: Command: /bin/bash -c mkdir -p /u01/oracle/user_projects/domains/ConnectorDefaultDirectory mkdir -p /u01/oracle/user_projects/domains/wdt-logs Image: container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October\u0026#39;24\u0026gt; Image Pull Policy: IfNotPresent Name: compat-connector-init Volume Mounts: Mount Path: /u01/oracle/user_projects Name: weblogic-domain-storage-volume Volume Mounts: Mount Path: /u01/oracle/user_projects Name: weblogic-domain-storage-volume Volumes: Name: weblogic-domain-storage-volume Persistent Volume Claim: Claim Name: governancedomain-domain-pvc Server Start Policy: IfNeeded Web Logic Credentials Secret: Name: governancedomain-weblogic-credentials Status: Clusters: Cluster Name: oim_cluster Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Label Selector: weblogic.domainUID=governancedomain,weblogic.clusterName=oim_cluster Maximum Replicas: 5 Minimum Replicas: 0 Observed Generation: 2 Ready Replicas: 1 Replicas: 1 Replicas Goal: 1 Cluster Name: soa_cluster Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Label Selector: weblogic.domainUID=governancedomain,weblogic.clusterName=soa_cluster Maximum Replicas: 5 Minimum Replicas: 0 Observed Generation: 1 Ready Replicas: 1 Replicas: 1 Replicas Goal: 1 Conditions: Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Available Last Transition Time: \u0026lt;DATE\u0026gt; Status: True Type: Completed Observed Generation: 1 Servers: Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: doc-worker2 Pod Phase: Running Pod Ready: True Server Name: AdminServer State: RUNNING State Goal: RUNNING Cluster Name: oim_cluster Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: doc-worker1 Pod Phase: Running Pod Ready: True Server Name: oim_server1 State: RUNNING State Goal: RUNNING Cluster Name: oim_cluster Server Name: oim_server2 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oim_cluster Server Name: oim_server3 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oim_cluster Server Name: oim_server4 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: oim_cluster Server Name: oim_server5 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: soa_cluster Health: Activation Time: \u0026lt;DATE\u0026gt; Overall Health: ok Subsystems: Subsystem Name: ServerRuntime Symptoms: Node Name: doc-worker1 Pod Phase: Running Pod Ready: True Server Name: soa_server1 State: RUNNING State Goal: RUNNING Cluster Name: soa_cluster Server Name: soa_server2 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: soa_cluster Server Name: soa_server3 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: soa_cluster Server Name: soa_server4 State: SHUTDOWN State Goal: SHUTDOWN Cluster Name: soa_cluster Server Name: soa_server5 State: SHUTDOWN State Goal: SHUTDOWN Start Time: \u0026lt;DATE\u0026gt; Events: \u0026lt;none\u0026gt;      Verify the pods   Run the following command to see the pods running the servers and which nodes they are running on:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; -o wide For example:\n$ kubectl get pods -n oigns -o wide The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES governancedomain-adminserver 1/1 Running 0 26m 10.244.1.42 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none governancedomain-oim-server1 1/1 Running 0 7m56s 10.244.1.44 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; governancedomain-soa-server1 1/1 Running 0 21m 10.244.1.43 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; You are now ready to configure an Ingress to direct traffic for your OIG domain as per Configure an ingress for an OIG domain.\n  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/enterprise-deployments/enterprise-deployment-automation/",
	"title": "b. Enterprise Deployment Guide Automation Scripts",
	"tags": [],
	"description": "The Enterprise Deployment Automation scripts deploy the entire Oracle Identity and Access Management suite in a production environment automatically",
	"content": "Enterprise Deployment Automation The Enterprise Deployment Automation scripts allow you to deploy the entire Oracle Identity and Access Management suite in a production environment. You can use the scripts to:\n Automate the creation of a Kubernetes cluster on Oracle Cloud Infrastructure (OCI), ready for the deployment of Oracle Identity and Access Management products. See Automating the OCI Infrastructure Creation for the Identity and Access Management Kubernetes Cluster. Automate the deployment of Oracle Identity and Access Management products on any compliant Kubernetes cluster. See Automating the Identity and Access Management Enterprise Deployment.  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/post-install-config/install_and_configure_connectors/",
	"title": "b. Install and configure connectors",
	"tags": [],
	"description": "Install and Configure Connectors.",
	"content": "Download the connector   Download the Connector you are interested in from Oracle Identity Manager Connector Downloads.\n  Copy the connector zip file to a staging directory on the master node e.g. \u0026lt;workdir\u0026gt;/stage and unzip it:\n$ cp $HOME/Downloads/\u0026lt;connector\u0026gt;.zip \u0026lt;workdir\u0026gt;/\u0026lt;stage\u0026gt;/ $ cd \u0026lt;workdir\u0026gt;/\u0026lt;stage\u0026gt; $ unzip \u0026lt;connector\u0026gt;.zip $ chmod -R 755 * For example:\n$ cp $HOME/Downloads/Exchange-12.2.1.3.0.zip /scratch/OIGK8S/stage/ $ cd /scratch/OIGK8S/stage/ $ unzip exchange-12.2.1.3.0.zip $ chmod -R 755 *   Copy OIG connectors There are two options to copy OIG Connectors to your Kubernetes cluster:\n a) Copy the connector directly to the Persistent Volume b) Use the kubectl cp command to copy the connector to the Persistent Volume  It is recommended to use option a), however there may be cases, for example when using a Managed Service such as Oracle Kubernetes Engine on Oracle Cloud Infrastructure, where it may not be feasible to directly mount the domain directory. In such cases option b) should be used.\na) Copy the connector directly to the persistent volume   Copy the connector zip file to the persistent volume. For example:\n$ cp -R \u0026lt;path_to\u0026gt;/\u0026lt;connector\u0026gt; \u0026lt;persistent_volume\u0026gt;/governancedomainpv/ConnectorDefaultDirectory/ For example:\n$ cp -R /scratch/OIGK8S/stage/Exchange-12.2.1.3.0 /scratch/shared/governancedomainpv/ConnectorDefaultDirectory/   b) Use the kubectl cp command to copy the connector to the persistent volume   Run the following command to copy over the connector:\n$ kubectl -n \u0026lt;domain_namespace\u0026gt; cp \u0026lt;path_to\u0026gt;/\u0026lt;connector\u0026gt; \u0026lt;cluster_name\u0026gt;:/u01/oracle/idm/server/ConnectorDefaultDirectory/ For example:\n$ kubectl -n oigns cp /scratch/OIGK8S/stage/Exchange-12.2.1.3.0 governancedomain-oim-server1:/u01/oracle/idm/server/ConnectorDefaultDirectory/   Install the connector The connectors are installed as they are on a standard on-premises setup, via Application On Boarding or via Connector Installer.\nRefer to your Connector specific documentation for instructions.\n"
},
{
	"uri": "/fmw-kubernetes/24.4.1/ohs/manage-ohs-containers/modfy-ohs-config/",
	"title": "b. Modifying the OHS container",
	"tags": [],
	"description": "Learn about modifying the OHS configuration.",
	"content": "This document shows how to modify the OHS configuration after the OHS container is deployed.\nModifying the deployed OHS container configuration can be achieved in the following ways:\na. Editing the configuration files in $MYOHSFILES/ohsConfig.\nb. Running kubectl edit configmap.\nEditing the configuration files in the $MYOHSFILES/ohsConfig To edit the configuration files:\n  Edit the required files in the $MYOHSFILES/ohsConfig directories.\n  Delete the configmaps for any files you have changed. For example if you have changed httpd.conf and files in moduleconf, run:\n$ kubectl delete cm ohs-httpd -n ohsns $ kubectl delete cm ohs-config -n ohsns   Recreate the required configmaps:\n$ cd $MYOHSFILES $ kubectl create cm -n ohsns ohs-httpd --from-file=ohsConfig/httpconf $ kubectl create cm -n ohsns ohs-config --from-file=ohsConfig/moduleconf   Find the name of the existing OHS pod:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods -n ohsns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-vkp4s 1/1 Running 0 55s   Delete the pod using the following command:\n$ kubectl delete pod \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl delete pod ohs-domain-d5b648bc5-vkp4s -n ohsns The output will look similar to the following:\npod \u0026quot;ohs-domain-d5b648bc5-vkp4s\u0026quot; deleted   Run the following command to make sure the pod has restarted:\n$ kubectl get pods -n ohsns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-gdvnp 1/1 Running 0 39s   Running kubectl edit configmap   Run the following command to edit the OHS configuration:\n$ kubectl edit configmap \u0026lt;configmap\u0026gt; -n \u0026lt;namespace\u0026gt; Where \u0026lt;configmap\u0026gt; is either ohs-httpd or ohs-config to modify the httpd.conf and moduleconf files respectively.\nFor example:\n$ kubectl edit configmap ohs-httpd -n ohsns Note: This opens an edit session for the configmap where parameters can be changed using standard vi commands.\n  In the edit session, edit the required parameters accordingly. Save the file and exit (:wq!).\n  Find the name of the existing OHS pod:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods -n ohsns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-vkp4s 1/1 Running 0 2h33s   Delete the pod using the following command:\n$ kubectl delete pod \u0026lt;pod\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl delete pod ohs-domain-d5b648bc5-vkp4s -n ohsns The output will look similar to the following:\npod \u0026quot;ohs-domain-d5b648bc5-vkp4s\u0026quot; deleted   Run the following command to make sure the pod has restarted:\n$ kubectl get pods -n ohsns -w The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE ohs-domain-d5b648bc5-gdvnp 1/1 Running 0 39s   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/patch-and-upgrade/patch-an-image/",
	"title": "b. Patch an image",
	"tags": [],
	"description": "Instructions on how to update your OAM Kubernetes cluster with a new OAM container image.",
	"content": "Choose one of the following options to update your OAM kubernetes cluster to use the new image:\n Run the kubectl edit domain command Run the kubectl patch domain command  In all of the above cases, the WebLogic Kubernetes Operator will restart the Administration Server pod first and then perform a rolling restart on the OAM Managed Servers.\nNote: If you are not using Oracle Container Registry or your own container registry, then you must first load the new container image on all nodes in your Kubernetes cluster.\nRun the kubectl edit domain command   To update the domain with the kubectl edit domain command, run the following:\n$ kubectl edit domain \u0026lt;domainname\u0026gt; -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl edit domain accessdomain -n oamns If using Oracle Container Registry or your own container registry for your OAM container image, update the image to point at the new image, for example:\ndomainHomeInImage: false image: container-registry.oracle.com/middleware/oam_cpu:\u0026lt;tag\u0026gt; imagePullPolicy: IfNotPresent If you are not using a container registry and have loaded the image on each of the master and worker nodes, update the image to point at the new image:\ndomainHomeInImage: false image: oracle/oam:\u0026lt;tag\u0026gt; imagePullPolicy: IfNotPresent   Save the file and exit (:wq!)\n  Run the kubectl patch command   To update the domain with the kubectl patch domain command, run the following:\n$ kubectl patch domain \u0026lt;domain\u0026gt; -n \u0026lt;namespace\u0026gt; --type merge -p \u0026#39;{\u0026#34;spec\u0026#34;:{\u0026#34;image\u0026#34;:\u0026#34;newimage:tag\u0026#34;}}\u0026#39; For example, if using Oracle Container Registry or your own container registry for your OAM container image:\n$ kubectl patch domain accessdomain -n oamns --type merge -p \u0026#39;{\u0026#34;spec\u0026#34;:{\u0026#34;image\u0026#34;:\u0026#34;container-registry.oracle.com/middleware/oam_cpu:\u0026lt;tag\u0026gt;\u0026#34;}}\u0026#39; For example, if you are not using a container registry and have loaded the image on each of the master and worker nodes:\n$ kubectl patch domain accessdomain -n oamns --type merge -p \u0026#39;{\u0026#34;spec\u0026#34;:{\u0026#34;image\u0026#34;:\u0026#34;oracle/oam:\u0026lt;tag\u0026gt;\u0026#34;}}\u0026#39; The output will look similar to the following:\ndomain.weblogic.oracle/accessdomain patched   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/patch-and-upgrade/patch-an-image/",
	"title": "b. Patch an image",
	"tags": [],
	"description": "Instructions on how to update your OIG Kubernetes cluster with a new OIG container image.",
	"content": "Introduction The OIG domain patching script automatically performs the update of your OIG Kubernetes cluster with a new OIG container image.\nNote: Before following the steps below, you must have upgraded to WebLogic Kubernetes Operator 4.X.X.\nThe script executes the following steps sequentially:\n Checks if the helper pod exists in the given namespace. If yes, then it deletes the helper pod. Brings up a new helper pod with the new image. Stops the Administration Server, SOA and OIM managed servers using serverStartPolicy set as Never in the domain definition yaml. Waits for all servers to be stopped (default timeout 2000s) Introspects database properties including credentials from the job configmap or RCU Secrets. Performs database schema changes from the helper pod Starts the Administration Server, SOA and OIM managed servers by setting serverStartPolicy to IfNeeded and image to new image tag. Waits for all the servers to be ready (default timeout 2000s)  The script exits with a failure if a configurable timeout is reached before the target pod count is reached, depending upon the domain configuration. It also exits if there is any failure while patching the database schema and domain.\nNote: The script execution will cause downtime while patching the OIG deployment and database schemas.\nPrerequisites Before you begin, perform the following steps:\n  Review the Domain resource documentation.\n  Ensure that you have a running OIG deployment in your cluster.\n  Ensure that the database is up and running.\n  Download the latest code repository Download the latest code repository as follows:\n  Create a working directory to setup the source code.\n$ mkdir \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/OIGK8Slatest   Download the latest OIG deployment scripts from the OIG repository.\n$ cd \u0026lt;workdir\u0026gt; $ git clone https://github.com/oracle/fmw-kubernetes.git --branch release/24.4.1 For example:\n$ cd /scratch/OIGK8Slatest $ git clone https://github.com/oracle/fmw-kubernetes.git --branch release/24.4.1   Set the $WORKDIR environment variable as follows:\n$ export WORKDIR=\u0026lt;workdir\u0026gt;/fmw-kubernetes/OracleIdentityGovernance For example:\n$ export WORKDIR=/scratch/OIGK8Slatest/fmw-kubernetes/OracleIdentityGovernance   Run the patch domain script   Run the patch domain script as follows. Specify the inputs required by the script. If you need help understanding the inputs run the command help -h.\n$ cd $WORKDIR/kubernetes/domain-lifecycle $ ./patch_oig_domain.sh -h $ ./patch_oig_domain.sh -i \u0026lt;target_image_tag\u0026gt; -n \u0026lt;oig_namespace\u0026gt; For example:\n$ cd $WORKDIR/kubernetes/domain-lifecycle $ ./patch_oig_domain.sh -h $ ./patch_oig_domain.sh -i 12.2.1.4-jdk8-ol8-\u0026lt;October`24\u0026gt; -n oigns The output will look similar to the following\n[INFO] Found domain name: governancedomain [INFO] Image Registry: container-registry.oracle.com/middleware/oig_cpu [INFO] Domain governancedomain is currently running with image: container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol7-\u0026lt;July`24\u0026gt; current no of pods under governancedomain are 3 [INFO] The pod helper already exists in namespace oigns. [INFO] Deleting pod helper pod \u0026quot;helper\u0026quot; deleted [INFO] Fetched Image Pull Secret: orclcred [INFO] Creating new helper pod with image: container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October'24\u0026gt; pod/helper created Checking helper Running [INFO] Stopping Admin, SOA and OIM servers in domain governancedomain. This may take some time, monitor log /scratch/OIGK8Slatest/fmw-kubernetes/OracleIdentityGovernance/kubernetes/domain-lifecycle/log/oim_patch_log-\u0026lt;DATE\u0026gt;/stop_servers.log for details [INFO] All servers are now stopped successfully. Proceeding with DB Schema changes [INFO] Patching OIM schemas... [INFO] DB schema update successful. Check log /scratch/OIGK8Slatest/fmw-kubernetes/OracleIdentityGovernance/kubernetes/domain-lifecycle/log/oim_patch_log-\u0026lt;DATE\u0026gt;/patch_oim_wls.log for details [INFO] Starting Admin, SOA and OIM servers with new image container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October'24\u0026gt; [INFO] Waiting for 3 weblogic pods to be ready..This may take several minutes, do not close the window. Check log /scratch/OIGK8Slatest/fmw-kubernetes/OracleIdentityGovernance/kubernetes/domain-lifecycle/log/oim_patch_log-\u0026lt;DATE\u0026gt;/monitor_weblogic_pods.log for progress [SUCCESS] All servers under governancedomain are now in ready state with new image: container-registry.oracle.com/middleware/oig_cpu:12.2.1.4-jdk8-ol8-\u0026lt;October'24\u0026gt; The logs are available at $WORKDIR/kubernetes/domain-lifecycle by default. A custom log location can also be provided to the script.\nNote: If the patch domain script creation fails, refer to the Troubleshooting section.\n  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oudsm/patch-and-upgrade/upgrade-elk/",
	"title": "b. Upgrade Elasticsearch and Kibana",
	"tags": [],
	"description": "Instructions on how to upgrade Elastic Search and Kibana.",
	"content": "This section shows how to upgrade Elasticsearch and Kibana.\nTo determine if this step is required for the version you are upgrading from, refer to the Release Notes.\nDownload the latest code repository Download the latest code repository as follows:\n  Create a working directory to setup the source code.\n$ mkdir \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/OUDSMK8SJul24   Download the latest OUDSM deployment scripts from the OUDSM repository.\n$ cd \u0026lt;workdir\u0026gt; $ git clone https://github.com/oracle/fmw-kubernetes.git --branch release/24.4.1 For example:\n$ cd /scratch/OUDSMK8SJul24 $ git clone https://github.com/oracle/fmw-kubernetes.git --branch release/24.4.1   Set the $WORKDIR environment variable as follows:\n$ export WORKDIR=\u0026lt;workdir\u0026gt;/fmw-kubernetes/OracleUnifiedDirectorySM For example:\n$ export WORKDIR=/scratch/OUDSMK8SJul24/fmw-kubernetes/OracleUnifiedDirectorySM   Undeploy Elasticsearch and Kibana From October 22 (22.4.1) onwards, OUDSM logs should be stored on a centralized Elasticsearch and Kibana (ELK) stack.\nDeployments prior to October 22 (22.4.1) used local deployments of Elasticsearch and Kibana.\nIf you are upgrading from July 22 (22.3.1) or earlier, to April 24 (24.2.1), you must first undeploy Elasticsearch and Kibana using the steps below:\n  Navigate to the $WORKDIR/kubernetes/helm directory and create a logging-override-values-uninstall.yaml with the following:\nelk: enabled: false   Run the following command to remove the existing ELK deployment:\n$ helm upgrade --namespace \u0026lt;domain_namespace\u0026gt; --values \u0026lt;valuesfile.yaml\u0026gt; \u0026lt;releasename\u0026gt; oudsm --reuse-values For example:\n$ helm upgrade --namespace oudsmns --values logging-override-values-uninstall.yaml oudsm oudsm --reuse-values   Deploy Elasticsearch and Kibana in centralized stack  Follow Install Elasticsearch stack and Kibana to deploy Elasticsearch and Kibana in a centralized stack.  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/configure-ingress/ingress-nginx-setup-for-oig-domain-setup-on-k8s-ssl/",
	"title": "b. Using an Ingress with NGINX (SSL)",
	"tags": [],
	"description": "Steps to set up an Ingress for NGINX to direct traffic to the OIG domain using SSL.",
	"content": "Setting up an ingress for NGINX for the OIG domain on Kubernetes The instructions below explain how to set up NGINX as an ingress for the OIG domain with SSL termination.\nNote: All the steps below should be performed on the master node.\n  Create a SSL certificate\na. Generate SSL certificate\nb. Create a Kubernetes secret for SSL\n  Install NGINX\na. Configure the repository\nb. Create a namespace\nc. Install NGINX using helm\n  Create an ingress for the domain\n  Verify that you can access the domain URL\n  Create a SSL certificate Generate SSL certificate   Generate a private key and certificate signing request (CSR) using a tool of your choice. Send the CSR to your certificate authority (CA) to generate the certificate.\nIf you want to use a certificate for testing purposes you can generate a self signed certificate using openssl:\n$ mkdir \u0026lt;workdir\u0026gt;/ssl $ cd \u0026lt;workdir\u0026gt;/ssl $ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj \u0026#34;/CN=\u0026lt;nginx-hostname\u0026gt;\u0026#34; For example:\n$ mkdir /scratch/OIGK8S/ssl $ cd /scratch/OIGK8S/ssl $ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj \u0026#34;/CN=masternode.example.com\u0026#34; Note: The CN should match the host.domain of the master node in order to prevent hostname problems during certificate verification.\nThe output will look similar to the following:\nGenerating a 2048 bit RSA private key ..........................................+++ .......................................................................................................+++ writing new private key to 'tls.key' -----   Create a Kubernetes secret for SSL   Create a secret for SSL containing the SSL certificate by running the following command:\n$ kubectl -n oigns create secret tls \u0026lt;domain_uid\u0026gt;-tls-cert --key \u0026lt;workdir\u0026gt;/tls.key --cert \u0026lt;workdir\u0026gt;/tls.crt For example:\n$ kubectl -n oigns create secret tls governancedomain-tls-cert --key /scratch/OIGK8S/ssl/tls.key --cert /scratch/OIGK8S/ssl/tls.crt The output will look similar to the following:\nsecret/governancedomain-tls-cert created   Confirm that the secret is created by running the following command:\n$ kubectl get secret \u0026lt;domain_uid\u0026gt;-tls-cert -o yaml -n oigns For example:\n$ kubectl get secret governancedomain-tls-cert -o yaml -n oigns The output will look similar to the following:\napiVersion: v1 data: tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGVENDQWYyZ0F3SUJBZ0lKQUl3ZjVRMWVxZnljTUEwR0NTcUdTSWIzRFFFQkN3VUFNQ0V4SHpBZEJnTlYKQkFNTUZtUmxiakF4WlhadkxuVnpMbTl5WVdOc1pTNWpiMjB3SGhjTk1qQXdPREV3TVRReE9UUXpXaGNOTWpFdwpPREV3TVRReE9UUXpXakFoTVI4d0hRWURWUVFEREJaa1pXNHdNV1YyYnk1MWN5NXZjbUZqYkdVdVkyOXRNSUlCCklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEyY0lpVUhwcTRVZzBhaGR6aXkycHY2cHQKSVIza2s5REd2eVRNY0syaWZQQ2dtUU5CdHV6VXNFN0l4c294eldITmU5RFpXRXJTSjVON3Ym1lTzJkMVd2NQp1aFhzbkFTbnkwY1N9xVDNQSlpDVk1MK0llZVFKdnhaVjZaWWU4V2FFL1NQSGJzczRjYy9wcG1mc3pxCnErUi83cXEyMm9ueHNHaE9vQ1h1TlQvMFF2WXVzMnNucGtueWRKRHUxelhGbDREYkFIZGMvamNVK0NPWWROeS8KT3Iza2JIV0FaTkR4OWxaZUREOTRmNXZLcUF2V0FkSVJZa2UrSmpNTHg0VHo2ZlM0VXoxbzdBSTVuSApPQ1ZMblV5U0JkaGVuWTNGNEdFU0wwbnorVlhFWjRWVjRucWNjRmo5cnJ0Q29pT1BBNlgvNGdxMEZJbi9Qd0lECkFRQUJvMUF3VGpBZEJnTlZIUTRFRmdRVWw1VnVpVDBDT0xGTzcxMFBlcHRxSC9DRWZyY3dId1lEVlIwakJCZ3cKRm9BVWw1VnVpVDBDT0xGTzcxMFBlcHRxSC9DRWZyY3dEQVlEVlIwVEJBVXdBd0VCL3pBTkJna3Foa2lHOXcwQgpBUXNGQUFPQ0FRRUFXdEN4b2ZmNGgrWXZEcVVpTFFtUnpqQkVBMHJCOUMwL1FWOG9JQzJ3d1hzYi9KaVNuMHdOCjNMdHppejc0aStEbk1yQytoNFQ3enRaSkc3NVluSGRKcmxQajgzVWdDLzhYTlFCSUNDbTFUa3RlVU1jWG0reG4KTEZEMHpReFhpVzV0N1FHcWtvK2FjeTlhUnUvN3JRMXlNSE9HdVVkTTZETzErNXF4cTdFNXFMamhyNEdKejV5OAoraW8zK25UcUVKMHFQOVRocG96RXhBMW80OEY0ZHJybWdqd3ROUldEQVpBYmYyV1JNMXFKWXhxTTJqdU1FQWNsCnFMek1TdEZUQ2o1UGFTQ0NUV1VEK3ZlSWtsRWRpaFdpRm02dzk3Y1diZ0lGMlhlNGk4L2szMmF1N2xUTDEvd28KU3Q2dHpsa20yV25uUFlVMzBnRURnVTQ4OU02Z1dybklpZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV1d0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktVd2dnU2hBZ0VBQW9JQkFRRFp3aUpRZW1yaFNEUnEKRjNPTExhbS9xbTBoSGVTVDBNYS9KTXh3cmFKODhLQ1pBMEcyN05Td1Rzakd5akhOWWMxNzBObFlTdEluazN1cApkdVo0N1ozVmEvbTZGZXljQktmTFJ4SW84NnIwSmhQYzhsa0pVd3Y0aDU1QW0vRmxYcGxoN3hab1Q5SThkdXl6Cmh4eittbVorek9xcjVIL3VxcmJhaWZHd2FFNmdKZTQxUC9SQzlpNnpheWVtU2ZKMGtPN1hOY1dYZ05zQWQxeisKTnhUNEk1aDAzTDg2dmVSc2RZQmswUEgyVmw0TVAzaC9tOHFWdW5mK1NvQzlZQjBoRmlSNzRtTXd2SGhQUHA5TApoVFBXanNBam1jYzRKVXVkVEpJRjJGNmRqY1hnWVJJdlNmUDVWY1JuaFZYaWVweHdXUDJ1dTBLaUk0OERwZi9pCkNyUVVpZjgvQWdNQkFBRUNnZjl6cnE2TUVueTFNYWFtdGM2c0laWU1QSDI5R2lSVVlwVXk5bG1sZ3BqUHh3V0sKUkRDay9Td0FmZG9yd1Q2ejNVRk1oYWJ4UU01a04vVjZFYkJlamQxT15bjdvWTVEQWJRRTR3RG9SZWlrVApONndWU0FrVC92Z1RXc1RqRlY1bXFKMCt6U2ppOWtySkZQNVNRN1F2cUswQ3BHRlNhVjY2dW8ycktiNmJWSkJYCkxPZmZPMytlS0tVazBaTnE1Q1NVQk9mbnFoNVFJSGdpaDNiMTRlNjB6bndrNWhaMHBHZE9BQm9aTkoKZ21lanUyTEdzVWxXTjBLOVdsUy9lcUllQzVzQm9jaWlocmxMVUpGWnpPRUV6LzErT2cyemhmT29yTE9rMTIrTgpjQnV0cTJWQ2I4ZFJDaFg1ZzJ0WnBrdzgzcXN5RSt3M09zYlQxa0VDZ1lFQTdxUnRLWGFONUx1SENvWlM1VWhNCm1WcnYxTEg0eGNhaDJIZnMksrMHJqQkJONGpkZkFDMmF3R3ZzU1EyR0lYRzVGYmYyK0pwL1kxbktKOEgKZU80MzNLWVgwTDE4NlNNLzFVay9HSEdTek1CWS9KdGR6WkRrbTA4UnBwaTl4bExTeDBWUWtFNVJVcnJJcTRJVwplZzBOM2RVTHZhTVl1UTBrR2dncUFETUNnWUVBNlpqWCtjU2VMZ1BVajJENWRpUGJ1TmVFd2RMeFNPZDFZMUFjCkUzQ01YTWozK2JxQ3BGUVIrTldYWWVuVmM1QiszajlSdHVnQ0YyTkNSdVdkZWowalBpL243UExIRHdCZVY0bVIKM3VQVHJmamRJbFovSFgzQ2NjVE94TmlaajU4VitFdkRHNHNHOGxtRTRieStYRExIYTJyMWxmUk9sUVRMSyswVgpyTU93eU1VQ2dZRUF1dm14WGM4NWxZRW9hU0tkU0cvQk9kMWlYSUtmc2VDZHRNT2M1elJ0UXRsSDQwS0RscE54CmxYcXBjbVc3MWpyYzk1RzVKNmE1ZG5xTE9OSFZoWW8wUEpmSXhPU052RXI2MTE5NjRBMm5sZXRHYlk0M0twUkEKaHBPRHlmdkZoSllmK29kaUJpZFUyL3ZBMCtUczNSUHJzRzBSOUVDOEZqVDNaZVhaNTF1R0xPa0NnWUFpTmU0NwplQjRxWXdrNFRsMTZmZG5xQWpaQkpLR05xY2c1V1R3alpMSkp6R3owdCtuMkl4SFd2WUZFSjdqSkNmcHFsaDlqCmlDcjJQZVV3K09QTlNUTG1JcUgydzc5L1pQQnNKWXVsZHZ4RFdGVWFlRXg1aHpkNDdmZlNRRjZNK0NHQmthYnIKVzdzU3R5V000ZFdITHpDaGZMS20yWGJBd0VqNUQrbkN1WTRrZVFLQmdFSkRHb0puM1NCRXcra2xXTE85N09aOApnc3lYQm9mUW1lRktIS2NHNzFZUFhJbTRlV1kyUi9KOCt5anc5b1FJQ3o5NlRidkdSZEN5QlJhbWhoTmFGUzVyCk9MZUc0ejVENE4zdThUc0dNem9QcU13KzBGSXJiQ3FzTnpGWTg3ekZweEdVaXZvRWZLNE82YkdERTZjNHFqNGEKNmlmK0RSRSt1TWRMWTQyYTA3ekoKLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLQo= kind: Secret metadata: creationTimestamp: \u0026quot;\u0026lt;DATE\u0026gt;\u0026quot; name: governancedomain-tls-cert namespace: oigns resourceVersion: \u0026quot;3319899\u0026quot; uid: 274cc960-281a-494c-a3e3-d93c3abd051f type: kubernetes.io/tls   Install NGINX Use helm to install NGINX.\nConfigure the repository   Add the Helm chart repository for installing NGINX using the following command:\n$ helm repo add stable https://kubernetes.github.io/ingress-nginx The output will look similar to the following:\n\u0026quot;stable\u0026quot; has been added to your repositories   Update the repository using the following command:\n$ helm repo update The output will look similar to the following:\nHang tight while we grab the latest from your chart repositories... ...Successfully got an update from the \u0026quot;stable\u0026quot; chart repository Update Complete. Happy Helming!   Create a namespace   Create a Kubernetes namespace for NGINX:\n$ kubectl create namespace nginxssl The output will look similar to the following:\nnamespace/nginxssl created   Install NGINX using helm If you can connect directly to the master node IP address from a browser, then install NGINX with the --set controller.service.type=NodePort parameter.\nIf you are using a Managed Service for your Kubernetes cluster, for example Oracle Kubernetes Engine (OKE) on Oracle Cloud Infrastructure (OCI), and connect from a browser to the Load Balancer IP address, then use the --set controller.service.type=LoadBalancer parameter. This instructs the Managed Service to setup a Load Balancer to direct traffic to the NGINX ingress.\n  To install NGINX use the following helm command depending on if you are using NodePort or LoadBalancer:\na) Using NodePort\n$ helm install nginx-ingress -n nginxssl --set controller.extraArgs.default-ssl-certificate=oigns/governancedomain-tls-cert --set controller.service.type=NodePort --set controller.admissionWebhooks.enabled=false stable/ingress-nginx --version 4.7.2 The output will look similar to the following:\nNAME: nginx-ingress LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: nginxssl STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The nginx-ingress controller has been installed. Get the application URL by running these commands: export HTTP_NODE_PORT=$(kubectl --namespace nginxssl get services -o jsonpath=\u0026quot;{.spec.ports[0].nodePort}\u0026quot; nginx-ingress-controller) export HTTPS_NODE_PORT=$(kubectl --namespace nginxssl get services -o jsonpath=\u0026quot;{.spec.ports[1].nodePort}\u0026quot; nginx-ingress-controller) export NODE_IP=$(kubectl --namespace nginxssl get nodes -o jsonpath=\u0026quot;{.items[0].status.addresses[1].address}\u0026quot;) echo \u0026quot;Visit http://$NODE_IP:$HTTP_NODE_PORT to access your application via HTTP.\u0026quot; echo \u0026quot;Visit https://$NODE_IP:$HTTPS_NODE_PORT to access your application via HTTPS.\u0026quot; An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1 kind: Ingress metadata: annotations: kubernetes.io/ingress.class: nginx name: example namespace: foo spec: ingressClassName: example-class rules: - host: www.example.com http: paths: - path: / pathType: Prefix backend: serviceName: exampleService servicePort: 80 path: / # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls b) Using LoadBalancer\n$ helm install nginx-ingress -n nginxssl --set controller.extraArgs.default-ssl-certificate=oigns/governancedomain-tls-cert --set controller.service.type=LoadBalancer --set controller.admissionWebhooks.enabled=false stable/ingress-nginx --version 4.7.2 The output will look similar to the following:\nNAME: nginx-ingress LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: nginxssl STATUS: deployed REVISION: 1 TEST SUITE: None NOTES: The ingress-nginx controller has been installed. It may take a few minutes for the LoadBalancer IP to be available. You can watch the status by running 'kubectl --namespace nginxssl get services -o wide -w nginx-ingress-ingress-nginx-controller' An example Ingress that makes use of the controller: apiVersion: networking.k8s.io/v1 kind: Ingress metadata: annotations: kubernetes.io/ingress.class: nginx name: example namespace: foo spec: rules: - host: www.example.com http: paths: - path: / pathType: Prefix backend: service: name: exampleService port: 80 # This section is only required if TLS is to be enabled for the Ingress tls: - hosts: - www.example.com secretName: example-tls If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided: apiVersion: v1 kind: Secret metadata: name: example-tls namespace: foo data: tls.crt: \u0026lt;base64 encoded cert\u0026gt; tls.key: \u0026lt;base64 encoded key\u0026gt; type: kubernetes.io/tls   Setup routing rules for the domain   Setup routing rules by running the following commands:\n$ cd $WORKDIR/kubernetes/charts/ingress-per-domain Edit values.yaml and change the domainUID parameter to match your domainUID, for example domainUID: governancedomain. Change sslType to SSL. The file should look as follows:\n# Load balancer type. Supported values are: NGINX type: NGINX # SSL configuration Type. Supported Values are : NONSSL,SSL sslType: SSL # domainType. Supported values are: oim domainType: oim #WLS domain as backend to the load balancer wlsDomain: domainUID: governancedomain adminServerName: AdminServer adminServerPort: 7001 adminServerSSLPort: soaClusterName: soa_cluster soaManagedServerPort: 8001 soaManagedServerSSLPort: oimClusterName: oim_cluster oimManagedServerPort: 14000 oimManagedServerSSLPort: # Host specific values hostName: enabled: false admin: runtime: internal: # Ngnix specific values nginx: nginxTimeOut: 180   Create an ingress for the domain   Create an Ingress for the domain (governancedomain-nginx), in the domain namespace by using the sample Helm chart:\n$ cd $WORKDIR $ helm install governancedomain-nginx kubernetes/charts/ingress-per-domain --namespace oigns --values kubernetes/charts/ingress-per-domain/values.yaml Note: The $WORKDIR/kubernetes/charts/ingress-per-domain/templates/nginx-ingress-ssl.yaml has nginx.ingress.kubernetes.io/enable-access-log set to false. If you want to enable access logs then set this value to true before executing the command. Enabling access-logs can cause issues with disk space if not regularly maintained.\nFor example:\n$ cd $WORKDIR $ helm install governancedomain-nginx kubernetes/charts/ingress-per-domain --namespace oigns --values kubernetes/charts/ingress-per-domain/values.yaml The output will look similar to the following:\nNAME: governancedomain-nginx LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oigns STATUS: deployed REVISION: 1 TEST SUITE: None   Run the following command to show the ingress is created successfully:\n$ kubectl get ing -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get ing -n oigns The output will look similar to the following:\nNAME CLASS HOSTS ADDRESS PORTS AGE governancedomain-nginx \u0026lt;none\u0026gt; * x.x.x.x 80 49s   Find the node port of NGINX using the following command:\n$ kubectl get services -n nginxssl -o jsonpath=\u0026#34;{.spec.ports[1].nodePort}\u0026#34; nginx-ingress-ingress-nginx-controller The output will look similar to the following:\n32033   Run the following command to check the ingress:\n$ kubectl describe ing governancedomain-nginx -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl describe ing governancedomain-nginx -n oigns The output will look similar to the following:\nName: governancedomain-nginx Namespace: oigns Address: 10.111.175.104 Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) Rules: Host Path Backends ---- ---- -------- * /console governancedomain-adminserver:7001 (10.244.2.50:7001) /consolehelp governancedomain-adminserver:7001 (10.244.2.50:7001) /em governancedomain-adminserver:7001 (10.244.2.50:7001) /ws_utc governancedomain-cluster-soa-cluster:8001 (10.244.2.51:8001) /soa governancedomain-cluster-soa-cluster:8001 (10.244.2.51:8001) /integration governancedomain-cluster-soa-cluster:8001 (10.244.2.51:8001) /soa-infra governancedomain-cluster-soa-cluster:8001 (10.244.2.51:8001) /identity governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /admin governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /oim governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /sysadmin governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /workflowservice governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /callbackResponseService governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /spml-xsd governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /HTTPClnt governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /reqsvc governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /iam governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /provisioning-callback governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /CertificationCallbackService governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /ucs governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /FacadeWebApp governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /OIGUI governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) /weblogic governancedomain-cluster-oim-cluster:14000 (10.244.2.52:14000) Annotations: meta.helm.sh/release-name: governancedomain-nginx meta.helm.sh/release-namespace: oigns nginx.ingress.kubernetes.io/affinity: cookie nginx.ingress.kubernetes.io/affinity-mode: persistent nginx.ingress.kubernetes.io/configuration-snippet: more_clear_input_headers \u0026quot;WL-Proxy-Client-IP\u0026quot; \u0026quot;WL-Proxy-SSL\u0026quot;; more_set_input_headers \u0026quot;X-Forwarded-Proto: https\u0026quot;; more_set_input_headers \u0026quot;WL-Proxy-SSL: true\u0026quot;; nginx.ingress.kubernetes.io/enable-access-log: false nginx.ingress.kubernetes.io/ingress.allow-http: false nginx.ingress.kubernetes.io/proxy-buffer-size: 2000k nginx.ingress.kubernetes.io/proxy-read-timeout: 180 nginx.ingress.kubernetes.io/proxy-send-timeout: 180 nginx.ingress.kubernetes.io/session-cookie-name: sticky Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 18s (x2 over 38s) nginx-ingress-controller Scheduled for sync   To confirm that the new Ingress is successfully routing to the domain\u0026rsquo;s server pods, run the following command to send a request to the URL for the WebLogic ReadyApp framework:\nNote: If using a load balancer for your ingress replace ${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT} with ${LOADBALANCER-HOSTNAME}:${LOADBALANCER-PORT}.\n$ curl -v -k https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/weblogic/ready For example:\n$ curl -v -k https://masternode.example.com:32033/weblogic/ready The output will look similar to the following:\n$ curl -v -k https://masternode.example.com:32033/weblogic/ready * About to connect() to X.X.X.X port 32033 (#0) * Trying X.X.X.X... * Connected to masternode.example.com (X.X.X.X) port 32033 (#0) * Initializing NSS with certpath: sql:/etc/pki/nssdb * skipping SSL peer certificate verification * SSL connection using TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 * Server certificate: * subject: CN=masternode.example.com * start date: \u0026lt;DATE\u0026gt; * expire date: \u0026lt;DATE\u0026gt; * common name: masternode.example.com * issuer: CN=masternode.example.com \u0026gt; GET /weblogic/ready HTTP/1.1 \u0026gt; User-Agent: curl/7.29.0 \u0026gt; Host: X.X.X.X:32033 \u0026gt; Accept: */* \u0026gt; \u0026lt; HTTP/1.1 200 OK \u0026lt; Server: nginx/1.19.1 \u0026lt; Date: \u0026lt;DATE\u0026gt; \u0026lt; Content-Length: 0 \u0026lt; Connection: keep-alive \u0026lt; Strict-Transport-Security: max-age=15724800; includeSubDomains \u0026lt; * Connection #0 to host X.X.X.X left intact   Verify that you can access the domain URL After setting up the NGINX ingress, verify that the domain applications are accessible through the NGINX ingress port (for example 32033) as per Validate Domain URLs \n"
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/manage-oam-domains/wlst-admin-operations/",
	"title": "b. WLST Administration Operations",
	"tags": [],
	"description": "Describes the steps for WLST administration using helper pod running in the same Kubernetes Cluster as OAM Domain.",
	"content": "To use WLST to administer the OAM domain, use a helper pod in the same Kubernetes cluster as the OAM Domain.\n  Check to see if the helper pod exists by running:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; | grep helper For example:\n$ kubectl get pods -n oamns | grep helper The output should look similar to the following:\nhelper 1/1 Running 0 26h If the helper pod doesn\u0026rsquo;t exist then see Step 1 in Prepare your environment  to create it.\n  Run the following command to start a bash shell in the helper pod:\n$ kubectl exec -it helper -n \u0026lt;domain_namespace\u0026gt; -- /bin/bash For example:\n$ kubectl exec -it helper -n oamns -- /bin/bash This will take you into a bash shell in the running helper pod:\n[oracle@helper ~]$   Connect to WLST using the following command:\n$ cd $ORACLE_HOME/oracle_common/common/bin $ ./wlst.sh The output will look similar to the following:\nInitializing WebLogic Scripting Tool (WLST) ... Jython scans all the jar files it can find at first startup. Depending on the system, this process may take a few minutes to complete, and WLST may not return a prompt right away. Welcome to WebLogic Server Administration Scripting Shell Type help() for help on available commands wls:/offline\u0026gt;   To access t3 for the Administration Server connect as follows:\nwls:/offline\u0026gt; connect(\u0026#39;weblogic\u0026#39;,\u0026#39;\u0026lt;password\u0026gt;\u0026#39;,\u0026#39;t3://accessdomain-adminserver:7001\u0026#39;) The output will look similar to the following:\nConnecting to t3://accessdomain-adminserver:7001 with userid weblogic ... Successfully connected to Admin Server \u0026quot;AdminServer\u0026quot; that belongs to domain \u0026quot;accessdomain\u0026quot;. Warning: An insecure protocol was used to connect to the server. To ensure on-the-wire security, the SSL port or Admin port should be used instead. wls:/accessdomain/serverConfig/\u0026gt; Or to access t3 for the OAM Cluster service, connect as follows:\nconnect(\u0026#39;weblogic\u0026#39;,\u0026#39;\u0026lt;password\u0026gt;\u0026#39;,\u0026#39;t3://accessdomain-cluster-oam-cluster:14100\u0026#39;) The output will look similar to the following:\nConnecting to t3://accessdomain-cluster-oam-cluster:14100 with userid weblogic ... Successfully connected to managed Server \u0026quot;oam_server1\u0026quot; that belongs to domain \u0026quot;accessdomain\u0026quot;. Warning: An insecure protocol was used to connect to the server. To ensure on-the-wire security, the SSL port or Admin port should be used instead. wls:/accessdomain/serverConfig/\u0026gt;   Sample operations For a full list of WLST operations refer to WebLogic Server WLST Online and Offline Command Reference.\nDisplay servers wls:/accessdomain/serverConfig/\u0026gt; cd(\u0026#39;/Servers\u0026#39;) wls:/accessdomain/serverConfig/Servers\u0026gt; ls() dr-- AdminServer dr-- oam_policy_mgr1 dr-- oam_policy_mgr2 dr-- oam_policy_mgr3 dr-- oam_policy_mgr4 dr-- oam_policy_mgr5 dr-- oam_server1 dr-- oam_server2 dr-- oam_server3 dr-- oam_server4 dr-- oam_server5 wls:/accessdomain/serverConfig/Servers\u0026gt; Configure logging for managed servers Connect to the Administration Server and run the following:\nwls:/accessdomain/serverConfig/\u0026gt; domainRuntime() Location changed to domainRuntime tree. This is a read-only tree with DomainMBean as the root MBean. For more help, use help(\u0026#39;domainRuntime\u0026#39;) wls:/accessdomain/domainRuntime/\u0026gt; wls:/accessdomain/domainRuntime/\u0026gt; listLoggers(pattern=\u0026#34;oracle.oam.*\u0026#34;,target=\u0026#34;oam_server1\u0026#34;) ------------------------------------------+----------------- Logger | Level ------------------------------------------+----------------- oracle.oam | \u0026lt;Inherited\u0026gt; oracle.oam.admin.foundation.configuration | \u0026lt;Inherited\u0026gt; oracle.oam.admin.service.config | \u0026lt;Inherited\u0026gt; oracle.oam.agent | \u0026lt;Inherited\u0026gt; oracle.oam.agent-default | \u0026lt;Inherited\u0026gt; oracle.oam.audit | \u0026lt;Inherited\u0026gt; oracle.oam.binding | \u0026lt;Inherited\u0026gt; oracle.oam.certvalidation | \u0026lt;Inherited\u0026gt; oracle.oam.certvalidation.mbeans | \u0026lt;Inherited\u0026gt; oracle.oam.common.healthcheck | \u0026lt;Inherited\u0026gt; oracle.oam.common.runtimeent | \u0026lt;Inherited\u0026gt; oracle.oam.commonutil | \u0026lt;Inherited\u0026gt; oracle.oam.config | \u0026lt;Inherited\u0026gt; oracle.oam.controller | \u0026lt;Inherited\u0026gt; oracle.oam.default | \u0026lt;Inherited\u0026gt; oracle.oam.diagnostic | \u0026lt;Inherited\u0026gt; oracle.oam.engine.authn | \u0026lt;Inherited\u0026gt; oracle.oam.engine.authz | \u0026lt;Inherited\u0026gt; oracle.oam.engine.policy | \u0026lt;Inherited\u0026gt; oracle.oam.engine.ptmetadata | \u0026lt;Inherited\u0026gt; oracle.oam.engine.session | \u0026lt;Inherited\u0026gt; oracle.oam.engine.sso | \u0026lt;Inherited\u0026gt; oracle.oam.esso | \u0026lt;Inherited\u0026gt; oracle.oam.extensibility.lifecycle | \u0026lt;Inherited\u0026gt; oracle.oam.foundation.access | \u0026lt;Inherited\u0026gt; oracle.oam.idm | \u0026lt;Inherited\u0026gt; oracle.oam.install | \u0026lt;Inherited\u0026gt; oracle.oam.install.bootstrap | \u0026lt;Inherited\u0026gt; oracle.oam.install.mbeans | \u0026lt;Inherited\u0026gt; oracle.oam.ipf.rest.api | \u0026lt;Inherited\u0026gt; oracle.oam.oauth | \u0026lt;Inherited\u0026gt; oracle.oam.plugin | \u0026lt;Inherited\u0026gt; oracle.oam.proxy.oam | \u0026lt;Inherited\u0026gt; oracle.oam.proxy.oam.workmanager | \u0026lt;Inherited\u0026gt; oracle.oam.proxy.opensso | \u0026lt;Inherited\u0026gt; oracle.oam.pswd.service.provider | \u0026lt;Inherited\u0026gt; oracle.oam.replication | \u0026lt;Inherited\u0026gt; oracle.oam.user.identity.provider | \u0026lt;Inherited\u0026gt; wls:/accessdomain/domainRuntime/\u0026gt; Set the log level to TRACE:32:\nwls:/accessdomain/domainRuntime/\u0026gt; setLogLevel(target=\u0026#39;oam_server1\u0026#39;,logger=\u0026#39;oracle.oam\u0026#39;,level=\u0026#39;TRACE:32\u0026#39;,persist=\u0026#34;1\u0026#34;,addLogger=1) wls:/accessdomain/domainRuntime/\u0026gt; wls:/accessdomain/domainRuntime/\u0026gt; listLoggers(pattern=\u0026#34;oracle.oam.*\u0026#34;,target=\u0026#34;oam_server1\u0026#34;) ------------------------------------------+----------------- Logger | Level ------------------------------------------+----------------- oracle.oam | TRACE:32 oracle.oam.admin.foundation.configuration | \u0026lt;Inherited\u0026gt; oracle.oam.admin.service.config | \u0026lt;Inherited\u0026gt; oracle.oam.agent | \u0026lt;Inherited\u0026gt; oracle.oam.agent-default | \u0026lt;Inherited\u0026gt; oracle.oam.audit | \u0026lt;Inherited\u0026gt; oracle.oam.binding | \u0026lt;Inherited\u0026gt; oracle.oam.certvalidation | \u0026lt;Inherited\u0026gt; oracle.oam.certvalidation.mbeans | \u0026lt;Inherited\u0026gt; oracle.oam.common.healthcheck | \u0026lt;Inherited\u0026gt; oracle.oam.common.runtimeent | \u0026lt;Inherited\u0026gt; oracle.oam.commonutil | \u0026lt;Inherited\u0026gt; oracle.oam.config | \u0026lt;Inherited\u0026gt; oracle.oam.controller | \u0026lt;Inherited\u0026gt; oracle.oam.default | \u0026lt;Inherited\u0026gt; oracle.oam.diagnostic | \u0026lt;Inherited\u0026gt; oracle.oam.engine.authn | \u0026lt;Inherited\u0026gt; oracle.oam.engine.authz | \u0026lt;Inherited\u0026gt; oracle.oam.engine.policy | \u0026lt;Inherited\u0026gt; oracle.oam.engine.ptmetadata | \u0026lt;Inherited\u0026gt; oracle.oam.engine.session | \u0026lt;Inherited\u0026gt; oracle.oam.engine.sso | \u0026lt;Inherited\u0026gt; oracle.oam.esso | \u0026lt;Inherited\u0026gt; oracle.oam.extensibility.lifecycle | \u0026lt;Inherited\u0026gt; oracle.oam.foundation.access | \u0026lt;Inherited\u0026gt; oracle.oam.idm | \u0026lt;Inherited\u0026gt; oracle.oam.install | \u0026lt;Inherited\u0026gt; oracle.oam.install.bootstrap | \u0026lt;Inherited\u0026gt; oracle.oam.install.mbeans | \u0026lt;Inherited\u0026gt; oracle.oam.ipf.rest.api | \u0026lt;Inherited\u0026gt; oracle.oam.oauth | \u0026lt;Inherited\u0026gt; oracle.oam.plugin | \u0026lt;Inherited\u0026gt; oracle.oam.proxy.oam | \u0026lt;Inherited\u0026gt; oracle.oam.proxy.oam.workmanager | \u0026lt;Inherited\u0026gt; oracle.oam.proxy.opensso | \u0026lt;Inherited\u0026gt; oracle.oam.pswd.service.provider | \u0026lt;Inherited\u0026gt; oracle.oam.replication | \u0026lt;Inherited\u0026gt; oracle.oam.user.identity.provider | \u0026lt;Inherited\u0026gt; wls:/accessdomain/domainRuntime/\u0026gt; Verify that TRACE:32 log level is set by connecting to the Administration Server and viewing the logs:\n$ kubectl exec -it accessdomain-adminserver -n oamns -- /bin/bash [oracle@accessdomain-adminserver oracle]$ [oracle@accessdomain-adminserver oracle]$ cd /u01/oracle/user_projects/domains/accessdomain/servers/oam_server1/logs [oracle@accessdomain-adminserver logs]$ tail oam_server1-diagnostic.log [\u0026lt;DATE\u0026gt;] [oam_server1] [TRACE:32] [] [oracle.oam.config] [tid: Configuration Store Observer] [userId: \u0026lt;anonymous\u0026gt;] [ecid: 8b3ac37b-c7cf-46dd-aeee-5ed67886be21-0000000b,0:1795] [APP: oam_server] [partition-name: DOMAIN] [tenant-name: GLOBAL] [SRC_CLASS: oracle.security.am.admin.config.util.observable.ObservableConfigStore$StoreWatcher] [SRC_METHOD: run] Start of run before start of detection at 1,635,848,774,793. Detector: oracle.security.am.admin.config.util.observable.DbStoreChangeDetector:Database configuration store:DSN:jdbc/oamds. Monitor: { StoreMonitor: { disabled: \u0026#39;false\u0026#39; } } [\u0026lt;DATE\u0026gt;] [oam_server1] [TRACE] [] [oracle.oam.config] [tid: Configuration Store Observer] [userId: \u0026lt;anonymous\u0026gt;] [ecid: 8b3ac37b-c7cf-46dd-aeee-5ed67886be21-0000000b,0:1795] [APP: oam_server] [partition-name: DOMAIN] [tenant-name: GLOBAL] [SRC_CLASS: oracle.security.am.admin.config.util.store.StoreUtil] [SRC_METHOD: getContainerProperty] Configuration property CONFIG_HISTORY not specified [\u0026lt;DATE\u0026gt;] [oam_server1] [TRACE] [] [oracle.oam.config] [tid: Configuration Store Observer] [userId: \u0026lt;anonymous\u0026gt;] [ecid: 8b3ac37b-c7cf-46dd-aeee-5ed67886be21-0000000b,0:1795] [APP: oam_server] [partition-name: DOMAIN] [tenant-name: GLOBAL] [SRC_CLASS: oracle.security.am.admin.config.util.store.StoreUtil] [SRC_METHOD: getContainerProperty] Configuration property CONFIG not specified [\u0026lt;DATE\u0026gt;] [oam_server1] [TRACE:32] [] [oracle.oam.config] [tid: Configuration Store Observer] [userId: \u0026lt;anonymous\u0026gt;] [ecid: 8b3ac37b-c7cf-46dd-aeee-5ed67886be21-0000000b,0:1795] [APP: oam_server] [partition-name: DOMAIN] [tenant-name: GLOBAL] [SRC_CLASS: oracle.security.am.admin.config.util.store.DbStore] [SRC_METHOD: getSelectSQL] SELECT SQL:SELECT version from IDM_OBJECT_STORE where id = ? and version = (select max(version) from IDM_OBJECT_STORE where id = ?) [\u0026lt;DATE\u0026gt;] [oam_server1] [TRACE] [] [oracle.oam.config] [tid: Configuration Store Observer] [userId: \u0026lt;anonymous\u0026gt;] [ecid: 8b3ac37b-c7cf-46dd-aeee-5ed67886be21-0000000b,0:1795] [APP: oam_server] [partition-name: DOMAIN] [tenant-name: GLOBAL] [SRC_CLASS: oracle.security.am.admin.config.util.store.DbStore] [SRC_METHOD: load] Time (ms) to load key CONFIG:-1{FIELD_TYPES=INT, SELECT_FIELDS=SELECT version from IDM_OBJECT_STORE }:4 Performing WLST Administration via SSL   By default the SSL port is not enabled for the Administration Server or OAM Managed Servers. To configure the SSL port for the Administration Server and Managed Servers login to WebLogic Administration console https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/console and navigate to Lock \u0026amp; Edit -\u0026gt; Environment -\u0026gt;Servers -\u0026gt; server_name -\u0026gt;Configuration -\u0026gt; General -\u0026gt; SSL Listen Port Enabled -\u0026gt; Provide SSL Port ( For Administration Server: 7002 and for OAM Managed Server (oam_server1): 14101) - \u0026gt; Save -\u0026gt; Activate Changes.\nNote: If configuring the OAM Managed Servers for SSL you must enable SSL on the same port for all servers (oam_server1 through oam_server5)\n  Create a myscripts directory as follows:\n$ cd $WORKDIR/kubernetes/ $ mkdir myscripts $ cd myscripts For example:\n$ cd $WORKDIR/kubernetes/ $ mkdir myscripts $ cd myscripts   Create a sample yaml template file in the myscripts directory called \u0026lt;domain_uid\u0026gt;-adminserver-ssl.yaml to create a Kubernetes service for the Administration Server:\nNote: Update the domainName, domainUID and namespace based on your environment. For example:\napiVersion: v1 kind: Service metadata: labels: serviceType: SERVER weblogic.domainName: accessdomain weblogic.domainUID: accessdomain weblogic.resourceVersion: domain-v2 weblogic.serverName: AdminServer name: accessdomain-adminserverssl namespace: oamns spec: clusterIP: None ports: - name: default port: 7002 protocol: TCP targetPort: 7002 selector: weblogic.createdByOperator: \u0026quot;true\u0026quot; weblogic.domainUID: accessdomain weblogic.serverName: AdminServer type: ClusterIP and the following sample yaml template file \u0026lt;domain_uid\u0026gt;-oamcluster-ssl.yaml for the OAM Managed Server:\napiVersion: v1 kind: Service metadata: labels: serviceType: SERVER weblogic.domainName: accessdomain weblogic.domainUID: accessdomain weblogic.resourceVersion: domain-v2 name: accessdomain-oamcluster-ssl namespace: oamns spec: clusterIP: None ports: - name: default port: 14101 protocol: TCP targetPort: 14101 selector: weblogic.clusterName: oam_cluster weblogic.createdByOperator: \u0026quot;true\u0026quot; weblogic.domainUID: accessdomain type: ClusterIP   Apply the template using the following command for the AdminServer:\n$ kubectl apply -f \u0026lt;domain_uid\u0026gt;-adminserver-ssl.yaml For example:\n$ kubectl apply -f accessdomain-adminserver-ssl.yaml service/accessdomain-adminserverssl created and using the following command for the OAM Managed Server:\n$ kubectl apply -f \u0026lt;domain_uid\u0026gt;-oamcluster-ssl.yaml For example:\n$ kubectl apply -f accessdomain-oamcluster-ssl.yaml service/accessdomain-oamcluster-ssl created   Validate that the Kubernetes Services to access SSL ports are created successfully:\n$ kubectl get svc -n \u0026lt;domain_namespace\u0026gt; |grep ssl For example:\n$ kubectl get svc -n oamns |grep ssl The output will look similar to the following:\naccessdomain-adminserverssl ClusterIP None \u0026lt;none\u0026gt; 7002/TCP 102s accessdomain-oamcluster-ssl ClusterIP None \u0026lt;none\u0026gt; 14101/TCP 35s   Inside the bash shell of the running helper pod, run the following:\n[oracle@helper bin]$ export WLST_PROPERTIES=\u0026#34;-Dweblogic.security.SSL.ignoreHostnameVerification=true -Dweblogic.security.TrustKeyStore=DemoTrust\u0026#34; [oracle@helper bin]$ cd /u01/oracle/oracle_common/common/bin [oracle@helper bin]$ ./wlst.sh Initializing WebLogic Scripting Tool (WLST) ... Welcome to WebLogic Server Administration Scripting Shell Type help() for help on available commands wls:/offline\u0026gt; To connect to the Administration Server t3s service:\nwls:/offline\u0026gt; connect(\u0026#39;weblogic\u0026#39;,\u0026#39;\u0026lt;password\u0026gt;\u0026#39;,\u0026#39;t3s://accessdomain-adminserverssl:7002\u0026#39;) Connecting to t3s://accessdomain-adminserverssl:7002 with userid weblogic ... \u0026lt;\u0026lt;DATE\u0026gt;\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090905\u0026gt; \u0026lt;Disabling the CryptoJ JCE Provider self-integrity check for better startup performance. To enable this check, specify -Dweblogic.security.allowCryptoJDefaultJCEVerification=true.\u0026gt; \u0026lt;\u0026lt;DATE\u0026gt;\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090906\u0026gt; \u0026lt;Changing the default Random Number Generator in RSA CryptoJ from ECDRBG128 to HMACDRBG. To disable this change, specify -Dweblogic.security.allowCryptoJDefaultPRNG=true.\u0026gt; \u0026lt;\u0026lt;DATE\u0026gt;\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090909\u0026gt; \u0026lt;Using the configured custom SSL Hostname Verifier implementation: weblogic.security.utils.SSLWLSHostnameVerifier$NullHostnameVerifier.\u0026gt; Successfully connected to Admin Server \u0026#34;AdminServer\u0026#34; that belongs to domain \u0026#34;accessdomain\u0026#34;. wls:/accessdomain/serverConfig/\u0026gt; To connect to the OAM Managed Server t3s service:\nwls:/offline\u0026gt; connect(\u0026#39;weblogic\u0026#39;,\u0026#39;\u0026lt;password\u0026gt;\u0026#39;,\u0026#39;t3s://accessdomain-oamcluster-ssl:14101\u0026#39;) Connecting to t3s://accessdomain-oamcluster-ssl:14101 with userid weblogic ... \u0026lt;\u0026lt;DATE\u0026gt;\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090905\u0026gt; \u0026lt;Disabling the CryptoJ JCE Provider self-integrity check for better startup performance. To enable this check, specify -Dweblogic.security.allowCryptoJDefaultJCEVerification=true.\u0026gt; \u0026lt;\u0026lt;DATE\u0026gt;\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090906\u0026gt; \u0026lt;Changing the default Random Number Generator in RSA CryptoJ from ECDRBG128 to HMACDRBG. To disable this change, specify -Dweblogic.security.allowCryptoJDefaultPRNG=true.\u0026gt; \u0026lt;\u0026lt;DATE\u0026gt;\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090909\u0026gt; \u0026lt;Using the configured custom SSL Hostname Verifier implementation: weblogic.security.utils.SSLWLSHostnameVerifier$NullHostnameVerifier.\u0026gt; Successfully connected to managed Server \u0026#34;oam_server1\u0026#34; that belongs to domain \u0026#34;accessdomain\u0026#34;.   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/manage-oig-domains/wlst-admin-operations/",
	"title": "b. WLST administration operations",
	"tags": [],
	"description": "Describes the steps for WLST administration using helper pod running in the same Kubernetes Cluster as OIG Domain.",
	"content": "Invoke WLST and access Administration Server To use WLST to administer the OIG domain, use a helper pod in the same Kubernetes cluster as the OIG Domain.\n  Check to see if the helper pod exists by running:\n$ kubectl get pods -n \u0026lt;domain_namespace\u0026gt; | grep helper For example:\n$ kubectl get pods -n oigns | grep helper The output should look similar to the following:\nhelper 1/1 Running 0 26h If the helper pod doesn\u0026rsquo;t exist then see Step 1 in Prepare your environment  to create it.\n  Run the following command to start a bash shell in the helper pod:\n$ kubectl exec -it helper -n \u0026lt;domain_namespace\u0026gt; -- /bin/bash For example:\n$ kubectl exec -it helper -n oigns -- /bin/bash This will take you into a bash shell in the running helper pod:\n[oracle@helper ~]$   Connect to WLST using the following commands:\n[oracle@helper ~]$ cd $ORACLE_HOME/oracle_common/common/bin [oracle@helper ~]$ ./wlst.sh The output will look similar to the following:\nInitializing WebLogic Scripting Tool (WLST) ... Jython scans all the jar files it can find at first startup. Depending on the system, this process may take a few minutes to complete, and WLST may not return a prompt right away. Welcome to WebLogic Server Administration Scripting Shell Type help() for help on available commands wls:/offline\u0026gt;   To access t3 for the Administration Server connect as follows:\nwls:/offline\u0026gt; connect(\u0026#39;weblogic\u0026#39;,\u0026#39;\u0026lt;password\u0026gt;\u0026#39;,\u0026#39;t3://governancedomain-adminserver:7001\u0026#39;) The output will look similar to the following:\nConnecting to t3://governancedomain-adminserver:7001 with userid weblogic ... Successfully connected to Admin Server \u0026quot;AdminServer\u0026quot; that belongs to domain \u0026quot;governancedomain\u0026quot;. Warning: An insecure protocol was used to connect to the server. To ensure on-the-wire security, the SSL port or Admin port should be used instead. wls:/governancedomain/serverConfig/\u0026gt; Or to access t3 for the OIG Cluster service, connect as follows:\nwls:/offline\u0026gt; connect(\u0026#39;weblogic\u0026#39;,\u0026#39;\u0026lt;password\u0026gt;\u0026#39;,\u0026#39;t3://governancedomain-cluster-oim-cluster:14000\u0026#39;) The output will look similar to the following:\nConnecting to t3://governancedomain-cluster-oim-cluster:14000 with userid weblogic ... Successfully connected to managed Server \u0026quot;oim_server1\u0026quot; that belongs to domain \u0026quot;governancedomain\u0026quot;. Warning: An insecure protocol was used to connect to the server. To ensure on-the-wire security, the SSL port or Admin port should be used instead. wls:/governancedomain/serverConfig/\u0026gt;   Sample operations For a full list of WLST operations refer to WebLogic Server WLST Online and Offline Command Reference.\nDisplay servers wls:/governancedomain/serverConfig/\u0026gt; cd('/Servers') wls:/governancedomain/serverConfig/Servers\u0026gt; ls () dr-- AdminServer dr-- oim_server1 dr-- oim_server2 dr-- oim_server3 dr-- oim_server4 dr-- oim_server5 dr-- soa_server1 dr-- soa_server2 dr-- soa_server3 dr-- soa_server4 dr-- soa_server5 wls:/governancedomain/serverConfig/Servers\u0026gt; Performing WLST administration via SSL   By default the SSL port is not enabled for the Administration Server or OIG Managed Servers. To configure the SSL port for the Administration Server and Managed Servers login to WebLogic Administration console https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/console and navigate to Lock \u0026amp; Edit -\u0026gt; Environment -\u0026gt;Servers -\u0026gt; server_name -\u0026gt;Configuration -\u0026gt; General -\u0026gt; SSL Listen Port Enabled -\u0026gt; Provide SSL Port ( For Administration Server: 7002 and for OIG Managed Server (oim_server1): 14101) - \u0026gt; Save -\u0026gt; Activate Changes.\nNote: If configuring the OIG Managed Servers for SSL you must enable SSL on the same port for all servers (oim_server1 through oim_server4)\n  Create a myscripts directory as follows:\n$ cd $WORKDIR/kubernetes $ mkdir myscripts $ cd myscripts   Create a sample yaml template file in the myscripts directory called \u0026lt;domain_uid\u0026gt;-adminserver-ssl.yaml to create a Kubernetes service for the Administration Server:\nNote: Update the domainName, domainUID and namespace based on your environment.\napiVersion: v1 kind: Service metadata: labels: serviceType: SERVER weblogic.domainName: governancedomain weblogic.domainUID: governancedomain weblogic.resourceVersion: domain-v2 weblogic.serverName: AdminServer name: governancedomain-adminserver-ssl namespace: oigns spec: clusterIP: None ports: - name: default port: 7002 protocol: TCP targetPort: 7002 selector: weblogic.createdByOperator: \u0026quot;true\u0026quot; weblogic.domainUID: governancedomain weblogic.serverName: AdminServer type: ClusterIP and create the following sample yaml template file \u0026lt;domain_uid\u0026gt;-oim-cluster-ssl.yaml for the OIG Managed Server:\napiVersion: v1 kind: Service metadata: labels: serviceType: SERVER weblogic.domainName: governancedomain weblogic.domainUID: governancedomain weblogic.resourceVersion: domain-v2 name: governancedomain-cluster-oim-cluster-ssl namespace: oigns spec: clusterIP: None ports: - name: default port: 14101 protocol: TCP targetPort: 14101 selector: weblogic.clusterName: oim_cluster weblogic.createdByOperator: \u0026quot;true\u0026quot; weblogic.domainUID: governancedomain type: ClusterIP   Apply the template using the following command for the Administration Server:\n$ kubectl apply -f governancedomain-adminserver-ssl.yaml service/governancedomain-adminserver-ssl created or using the following command for the OIG Managed Server:\n$ kubectl apply -f governancedomain-oim-cluster-ssl.yaml service/governancedomain-cluster-oim-cluster-ssl created   Validate that the Kubernetes Services to access SSL ports are created successfully:\n$ kubectl get svc -n \u0026lt;domain_namespace\u0026gt; |grep ssl For example:\n$ kubectl get svc -n oigns |grep ssl The output will look similar to the following:\ngovernancedomain-adminserver-ssl ClusterIP None \u0026lt;none\u0026gt; 7002/TCP 74s governancedomain-cluster-oim-cluster-ssl ClusterIP None \u0026lt;none\u0026gt; 14101/TCP 21s   Connect to a bash shell of the helper pod:\n$ kubectl exec -it helper -n oigns -- /bin/bash   In the bash shell run the following:\n[oracle@helper bin]$ export WLST_PROPERTIES=\u0026#34;-Dweblogic.security.SSL.ignoreHostnameVerification=true -Dweblogic.security.TrustKeyStore=DemoTrust\u0026#34; [oracle@helper bin]$ cd /u01/oracle/oracle_common/common/bin [oracle@helper bin]$ ./wlst.sh Initializing WebLogic Scripting Tool (WLST) ... Welcome to WebLogic Server Administration Scripting Shell Type help() for help on available commands wls:/offline\u0026gt; Connect to the Administration Server t3s service:\nwls:/offline\u0026gt; connect(\u0026#39;weblogic\u0026#39;,\u0026#39;\u0026lt;password\u0026gt;\u0026#39;,\u0026#39;t3s://governancedomain-adminserver-ssl:7002\u0026#39;) Connecting to t3s://governancedomain-adminserver-ssl:7002 with userid weblogic ... \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090905\u0026gt; \u0026lt;Disabling the CryptoJ JCE Provider self-integrity check for better startup performance. To enable this check, specify -Dweblogic.security.allowCryptoJDefaultJCEVerification=true.\u0026gt; \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090906\u0026gt; \u0026lt;Changing the default Random Number Generator in RSA CryptoJ from ECDRBG128 to HMACDRBG. To disable this change, specify -Dweblogic.security.allowCryptoJDefaultPRNG=true.\u0026gt; \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090909\u0026gt; \u0026lt;Using the configured custom SSL Hostname Verifier implementation: weblogic.security.utils.SSLWLSHostnameVerifier$NullHostnameVerifier.\u0026gt; Successfully connected to Admin Server \u0026#34;AdminServer\u0026#34; that belongs to domain \u0026#34;governancedomain\u0026#34;. wls:/governancedomain/serverConfig/\u0026gt; To connect to the OIG Managed Server t3s service:\nwls:/offline\u0026gt; connect(\u0026#39;weblogic\u0026#39;,\u0026#39;\u0026lt;password\u0026gt;\u0026#39;,\u0026#39;t3s://governancedomain-cluster-oim-cluster-ssl:14101\u0026#39;) Connecting to t3s://governancedomain-cluster-oim-cluster-ssl:14101 with userid weblogic ... \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090905\u0026gt; \u0026lt;Disabling the CryptoJ JCE Provider self-integrity check for better startup performance. To enable this check, specify -Dweblogic.security.allowCryptoJDefaultJCEVerification=true.\u0026gt; \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090906\u0026gt; \u0026lt;Changing the default Random Number Generator in RSA CryptoJ from ECDRBG128 to HMACDRBG. To disable this change, specify -Dweblogic.security.allowCryptoJDefaultPRNG=true.\u0026gt; \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;Security\u0026gt; \u0026lt;BEA-090909\u0026gt; \u0026lt;Using the configured custom SSL Hostname Verifier implementation: weblogic.security.utils.SSLWLSHostnameVerifier$NullHostnameVerifier.\u0026gt; Successfully connected to managed Server \u0026#34;oim_server1\u0026#34; that belongs to domain \u0026#34;governancedomain\u0026#34;. wls:/governancedomain/serverConfig/\u0026gt;   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oud/manage-oud-containers/monitoring-oud-instance/",
	"title": "c) Monitoring an Oracle Unified Directory Instance",
	"tags": [],
	"description": "Describes the steps for Monitoring the Oracle Unified Directory environment.",
	"content": " Introduction Install Prometheus and Grafana  Create a Kubernetes namespace Add Prometheus and Grafana Helm repositories Install the Prometheus operator View Prometheus and Grafana objects created Add the NodePort   Verify using Grafana GUI  Introduction After the Oracle Unified Directory instance (OUD) is set up you can monitor it using Prometheus and Grafana.\nInstall Prometheus and Grafana Create a Kubernetes namespace   Create a Kubernetes namespace to provide a scope for Prometheus and Grafana objects such as pods and services that you create in the environment. To create your namespace issue the following command:\n$ kubectl create namespace \u0026lt;namespace\u0026gt; For example:\n$ kubectl create namespace monitoring The output will look similar to the following:\nnamespace/monitoring created   Add Prometheus and Grafana Helm repositories   Add the Prometheus and Grafana Helm repositories by issuing the following command:\n$ helm repo add prometheus https://prometheus-community.github.io/helm-charts The output will look similar to the following:\n\u0026#34;prometheus\u0026#34; has been added to your repositories   Run the following command to update the repositories:\n$ helm repo update The output will look similar to the following:\nHang tight while we grab the latest from your chart repositories... ...Successfully got an update from the \u0026#34;stable\u0026#34; chart repository ...Successfully got an update from the \u0026#34;prometheus\u0026#34; chart repository ...Successfully got an update from the \u0026#34;prometheus-community\u0026#34; chart repository Update Complete. Happy Helming!   Install the Prometheus operator   Install the Prometheus operator using the helm command:\n$ helm install \u0026lt;release_name\u0026gt; prometheus/kube-prometheus-stack -n \u0026lt;namespace\u0026gt; For example:\n$ helm install monitoring prometheus/kube-prometheus-stack -n monitoring The output should look similar to the following:\nNAME: monitoring LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: monitoring STATUS: deployed REVISION: 1 NOTES: kube-prometheus-stack has been installed. Check its status by running: kubectl --namespace monitoring get pods -l \u0026#34;release=monitoring\u0026#34; Visit https://github.com/prometheus-operator/kube-prometheus for instructions on how to create \u0026amp; configure Alertmanager and Prometheus instances using the Operator. Note: If your cluster does not have access to the internet to pull external images, such as prometheus or grafana, you must load the images in a local container registry. You must then install as follows:\nhelm install --set grafana.image.registry=\u0026quot;container-registry.example.com\u0026quot; --set grafana.image.repository=\u0026quot;grafana/grafana\u0026quot; --set grafana.image.tag=8.4.2 monitoring prometheus/kube-prometheus-stack -n monitoring   View Prometheus and Grafana Objects created View the objects created for Prometheus and Grafana by issuing the following command:\n$ kubectl get all,service,pod -o wide -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get all,service,pod -o wide -n monitoring The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/alertmanager-monitoring-kube-prometheus-alertmanager-0 2/2 Running 0 36s 10.244.1.78 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-grafana-578f79599c-qc9gd 3/3 Running 0 47s 10.244.2.200 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-kube-prometheus-operator-65cdf7995-kndgg 1/1 Running 0 47s 10.244.2.199 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-kube-state-metrics-56bfd4f44f-85l4p 1/1 Running 0 47s 10.244.1.76 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-prometheus-node-exporter-g2x9g 1/1 Running 0 47s 100.102.48.121 \u0026lt;master-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-prometheus-node-exporter-p9kkq 1/1 Running 0 47s 100.102.48.84 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-prometheus-node-exporter-rzhrd 1/1 Running 0 47s 100.102.48.28 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/prometheus-monitoring-kube-prometheus-prometheus-0 2/2 Running 0 35s 10.244.1.79 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service/alertmanager-operated ClusterIP None \u0026lt;none\u0026gt; 9093/TCP,9094/TCP,9094/UDP 36s app.kubernetes.io/name=alertmanager service/monitoring-grafana ClusterIP 10.110.193.30 \u0026lt;none\u0026gt; 80/TCP 47s app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=grafana service/monitoring-kube-prometheus-alertmanager ClusterIP 10.104.2.37 \u0026lt;none\u0026gt; 9093/TCP 47s alertmanager=monitoring-kube-prometheus-alertmanager,app.kubernetes.io/name=alertmanager service/monitoring-kube-prometheus-operator ClusterIP 10.99.162.229 \u0026lt;none\u0026gt; 443/TCP 47s app=kube-prometheus-stack-operator,release=monitoring service/monitoring-kube-prometheus-prometheus ClusterIP 10.108.161.46 \u0026lt;none\u0026gt; 9090/TCP 47s app.kubernetes.io/name=prometheus,prometheus=monitoring-kube-prometheus-prometheus service/monitoring-kube-state-metrics ClusterIP 10.111.162.185 \u0026lt;none\u0026gt; 8080/TCP 47s app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=kube-state-metrics service/monitoring-prometheus-node-exporter ClusterIP 10.109.21.136 \u0026lt;none\u0026gt; 9100/TCP 47s app=prometheus-node-exporter,release=monitoring service/prometheus-operated ClusterIP None \u0026lt;none\u0026gt; 9090/TCP 35s app.kubernetes.io/name=prometheus NAME DESIRED CURRENT READY UP-TO-DATE AVAILABLE NODE SELECTOR AGE CONTAINERS IMAGES SELECTOR daemonset.apps/monitoring-prometheus-node-exporter 3 3 3 3 3 \u0026lt;none\u0026gt; 47s node-exporter quay.io/prometheus/node-exporter:v1.3.1 app=prometheus-node-exporter,release=monitoring NAME READY UP-TO-DATE AVAILABLE AGE CONTAINERS IMAGES SELECTOR deployment.apps/monitoring-grafana 1/1 1 1 47s grafana-sc-dashboard,grafana-sc-datasources,grafana quay.io/kiwigrid/k8s-sidecar:1.15.6,quay.io/kiwigrid/k8s-sidecar:1.15.6,grafana/grafana:8.4.2 app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=grafana deployment.apps/monitoring-kube-prometheus-operator 1/1 1 1 47s kube-prometheus-stack quay.io/prometheus-operator/prometheus-operator:v0.55.0 app=kube-prometheus-stack-operator,release=monitoring deployment.apps/monitoring-kube-state-metrics 1/1 1 1 47s kube-state-metrics k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.4.1 app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=kube-state-metrics NAME DESIRED CURRENT READY AGE CONTAINERS IMAGES SELECTOR replicaset.apps/monitoring-grafana-578f79599c 1 1 1 47s grafana-sc-dashboard,grafana-sc-datasources,grafana quay.io/kiwigrid/k8s-sidecar:1.15.6,quay.io/kiwigrid/k8s-sidecar:1.15.6,grafana/grafana:8.4.2 app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=grafana,pod-template-hash=578f79599c replicaset.apps/monitoring-kube-prometheus-operator-65cdf7995 1 1 1 47s kube-prometheus-stack quay.io/prometheus-operator/prometheus-operator:v0.55.0 app=kube-prometheus-stack-operator,pod-template-hash=65cdf7995,release=monitoring replicaset.apps/monitoring-kube-state-metrics-56bfd4f44f 1 1 1 47s kube-state-metrics k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.4.1 app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=kube-state-metrics,pod-template-hash=56bfd4f44f NAME READY AGE CONTAINERS IMAGES statefulset.apps/alertmanager-monitoring-kube-prometheus-alertmanager 1/1 36s alertmanager,config-reloader quay.io/prometheus/alertmanager:v0.23.0,quay.io/prometheus-operator/prometheus-config-reloader:v0.55.0 statefulset.apps/prometheus-monitoring-kube-prometheus-prometheus 1/1 35s prometheus,config-reloader quay.io/prometheus/prometheus:v2.33.5,quay.io/prometheus-operator/prometheus-config-reloader:v0.55.0 Add the NodePort   Edit the grafana service to add the NodePort:\n$ kubectl edit service/\u0026lt;deployment_name\u0026gt;-grafana -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl edit service/monitoring-grafana -n monitoring Note: This opens an edit session for the domain where parameters can be changed using standard vi commands.\nChange the ports entry and add nodePort: 30091 and type: NodePort:\n ports: - name: http-web nodePort: 30091 port: 80 protocol: TCP targetPort: 3000 selector: app.kubernetes.io/instance: monitoring app.kubernetes.io/name: grafana sessionAffinity: None type: NodePort   Save the file and exit (:wq).\n  Verify Using Grafana GUI   Access the Grafana GUI using http://\u0026lt;HostIP\u0026gt;:\u0026lt;nodeport\u0026gt; and login with admin/prom-operator. Change the password when prompted.\n  Download the K8 Cluster Detail Dashboard json file from: https://grafana.com/grafana/dashboards/10856.\n  Import the Grafana dashboard by navigating on the left hand menu to Dashboards \u0026gt; Import. Click Upload JSON file and select the json downloaded file. In the Prometheus drop down box select Prometheus. Click Import. The dashboard should be displayed.\n  Verify your installation by viewing some of the customized dashboard views.\n  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oudsm/manage-oudsm-containers/monitoring-oudsm-instance/",
	"title": "c) Monitoring an Oracle Unified Directory Services Manager Instance",
	"tags": [],
	"description": "Describes the steps for Monitoring the Oracle Unified Directory Services Manager environment.",
	"content": " Introduction Install Prometheus and Grafana  Create a Kubernetes namespace Add Prometheus and Grafana Helm repositories Install the Prometheus operator View Prometheus and Grafana Objects Created Add the NodePort   Verify Using Grafana GUI  Introduction After the Oracle Unified Directory Services Manager instance is set up you can monitor it using Prometheus and Grafana.\nInstall Prometheus and Grafana Create a Kubernetes namespace   Create a Kubernetes namespace to provide a scope for Prometheus and Grafana objects such as pods and services that you create in the environment. To create your namespace issue the following command:\n$ kubectl create namespace \u0026lt;namespace\u0026gt; For example:\n$ kubectl create namespace monitoring The output will look similar to the following:\nnamespace/monitoring created   Add Prometheus and Grafana Helm repositories   Add the Prometheus and Grafana Helm repositories by issuing the following command:\n$ helm repo add prometheus https://prometheus-community.github.io/helm-charts The output will look similar to the following:\n\u0026#34;prometheus\u0026#34; has been added to your repositories   Run the following command to update the repositories:\n$ helm repo update The output will look similar to the following:\nHang tight while we grab the latest from your chart repositories... ...Successfully got an update from the \u0026#34;stable\u0026#34; chart repository ...Successfully got an update from the \u0026#34;prometheus\u0026#34; chart repository ...Successfully got an update from the \u0026#34;prometheus-community\u0026#34; chart repository Update Complete. Happy Helming!   Install the Prometheus operator   Install the Prometheus operator using the helm command:\n$ helm install \u0026lt;release_name\u0026gt; prometheus/kube-prometheus-stack -n \u0026lt;namespace\u0026gt; For example:\n$ helm install monitoring prometheus/kube-prometheus-stack -n monitoring The output should look similar to the following:\nNAME: monitoring LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: monitoring STATUS: deployed REVISION: 1 NOTES: kube-prometheus-stack has been installed. Check its status by running: kubectl --namespace monitoring get pods -l \u0026#34;release=monitoring\u0026#34; Visit https://github.com/prometheus-operator/kube-prometheus for instructions on how to create \u0026amp; configure Alertmanager and Prometheus instances using the Operator. Note: If your cluster does not have access to the internet to pull external images, such as prometheus or grafana, you must load the images in a local container registry. You must then set install as follows:\nhelm install --set grafana.image.registry=\u0026quot;container-registry.example.com\u0026quot; --set grafana.image.repository=\u0026quot;grafana/grafana\u0026quot; --set grafana.image.tag=8.3.4 monitoring prometheus/kube-prometheus-stack -n monitoring   View Prometheus and Grafana Objects created View the objects created for Prometheus and Grafana by issuing the following command:\n$ kubectl get all,service,pod -o wide -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get all,service,pod -o wide -n monitoring The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/alertmanager-monitoring-kube-prometheus-alertmanager-0 2/2 Running 0 27s 10.244.2.141 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-grafana-578f79599c-qqdfb 3/3 Running 0 34s 10.244.1.127 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-kube-prometheus-operator-65cdf7995-w6btr 1/1 Running 0 34s 10.244.1.126 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-kube-state-metrics-56bfd4f44f-5ls8t 1/1 Running 0 34s 10.244.2.139 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-prometheus-node-exporter-5b2f6 1/1 Running 0 34s 100.102.48.84 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-prometheus-node-exporter-fw9xh 1/1 Running 0 34s 100.102.48.28 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/monitoring-prometheus-node-exporter-s5n9g 1/1 Running 0 34s 100.102.48.121 \u0026lt;master-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/prometheus-monitoring-kube-prometheus-prometheus-0 2/2 Running 0 26s 10.244.1.128 \u0026lt;worker-node\u0026gt; \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service/alertmanager-operated ClusterIP None \u0026lt;none\u0026gt; 9093/TCP,9094/TCP,9094/UDP 27s app.kubernetes.io/name=alertmanager service/monitoring-grafana ClusterIP 10.110.97.252 \u0026lt;none\u0026gt; 80/TCP 34s app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=grafana service/monitoring-kube-prometheus-alertmanager ClusterIP 10.110.82.176 \u0026lt;none\u0026gt; 9093/TCP 34s alertmanager=monitoring-kube-prometheus-alertmanager,app.kubernetes.io/name=alertmanager service/monitoring-kube-prometheus-operator ClusterIP 10.104.147.173 \u0026lt;none\u0026gt; 443/TCP 34s app=kube-prometheus-stack-operator,release=monitoring service/monitoring-kube-prometheus-prometheus ClusterIP 10.110.109.245 \u0026lt;none\u0026gt; 9090/TCP 34s app.kubernetes.io/name=prometheus,prometheus=monitoring-kube-prometheus-prometheus service/monitoring-kube-state-metrics ClusterIP 10.107.111.214 \u0026lt;none\u0026gt; 8080/TCP 34s app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=kube-state-metrics service/monitoring-prometheus-node-exporter ClusterIP 10.108.97.196 \u0026lt;none\u0026gt; 9100/TCP 34s app=prometheus-node-exporter,release=monitoring service/prometheus-operated ClusterIP None \u0026lt;none\u0026gt; 9090/TCP 26s app.kubernetes.io/name=prometheus NAME DESIRED CURRENT READY UP-TO-DATE AVAILABLE NODE SELECTOR AGE CONTAINERS IMAGES SELECTOR daemonset.apps/monitoring-prometheus-node-exporter 3 3 3 3 3 \u0026lt;none\u0026gt; 34s node-exporter quay.io/prometheus/node-exporter:v1.3.1 app=prometheus-node-exporter,release=monitoring NAME READY UP-TO-DATE AVAILABLE AGE CONTAINERS IMAGES SELECTOR deployment.apps/monitoring-grafana 0/1 1 0 34s grafana-sc-dashboard,grafana-sc-datasources,grafana quay.io/kiwigrid/k8s-sidecar:1.15.6,quay.io/kiwigrid/k8s-sidecar:1.15.6,grafana/grafana:8.4.2 app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=grafana deployment.apps/monitoring-kube-prometheus-operator 1/1 1 1 34s kube-prometheus-stack quay.io/prometheus-operator/prometheus-operator:v0.55.0 app=kube-prometheus-stack-operator,release=monitoring deployment.apps/monitoring-kube-state-metrics 1/1 1 1 34s kube-state-metrics k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.4.1 app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=kube-state-metrics NAME DESIRED CURRENT READY AGE CONTAINERS IMAGES SELECTOR replicaset.apps/monitoring-grafana-578f79599c 1 1 0 34s grafana-sc-dashboard,grafana-sc-datasources,grafana quay.io/kiwigrid/k8s-sidecar:1.15.6,quay.io/kiwigrid/k8s-sidecar:1.15.6,grafana/grafana:8.4.2 app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=grafana,pod-template-hash=578f79599c replicaset.apps/monitoring-kube-prometheus-operator-65cdf7995 1 1 1 34s kube-prometheus-stack quay.io/prometheus-operator/prometheus-operator:v0.55.0 app=kube-prometheus-stack-operator,pod-template-hash=65cdf7995,release=monitoring replicaset.apps/monitoring-kube-state-metrics-56bfd4f44f 1 1 1 34s kube-state-metrics k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.4.1 app.kubernetes.io/instance=monitoring,app.kubernetes.io/name=kube-state-metrics,pod-template-hash=56bfd4f44f NAME READY AGE CONTAINERS IMAGES statefulset.apps/alertmanager-monitoring-kube-prometheus-alertmanager 1/1 27s alertmanager,config-reloader quay.io/prometheus/alertmanager:v0.23.0,quay.io/prometheus-operator/prometheus-config-reloader:v0.55.0 statefulset.apps/prometheus-monitoring-kube-prometheus-prometheus 1/1 26s prometheus,config-reloader quay.io/prometheus/prometheus:v2.33.5,quay.io/prometheus-operator/prometheus-config-reloader:v0.55.0 Add the NodePort   Edit the grafana service to add the NodePort:\n$ kubectl edit service/\u0026lt;deployment_name\u0026gt;-grafana -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl edit service/monitoring-grafana -n monitoring Note: This opens an edit session for the domain where parameters can be changed using standard vi commands.\nChange the ports entry and add nodePort: 30091 and type: NodePort:\n ports: - name: http-web nodePort: 30091 port: 80 protocol: TCP targetPort: 3000 selector: app.kubernetes.io/instance: monitoring app.kubernetes.io/name: grafana sessionAffinity: None type: NodePort   Save the file and exit (:wq).\n  Verify Using Grafana GUI   Access the Grafana GUI using http://\u0026lt;HostIP\u0026gt;:\u0026lt;nodeport\u0026gt; and login with admin/prom-operator. Change the password when prompted.\n  Download the K8 Cluster Detail Dashboard json file from: https://grafana.com/grafana/dashboards/10856.\n  Import the Grafana dashboard by navigating on the left hand menu to Dashboards \u0026gt; Import. Click Upload JSON file and select the json downloaded file. In the Prometheus drop down box select Prometheus. Click Import. The dashboard should be displayed.\n  Verify your installation by viewing some of the customized dashboard views.\n  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/ohs/manage-ohs-containers/delete-ohs-container/",
	"title": "c. Delete the OHS container",
	"tags": [],
	"description": "Learn about the steps to delete the OHS container.",
	"content": "The following commands show how to remove the OHS container, OHS nodeport service, configmaps, secrets, and namespace:\n  Run the following command to delete the OHS nodeport service:\n$ kubectl delete -f $MYOHSFILES/ohs_service.yaml   Run the following command to delete the OHS container:\n$ kubectl delete -f $MYOHSFILES/ohs.yaml   Run the following commands to delete any configmaps you have created, for example:\n$ kubectl delete cm -n ohsns ohs-config $ kubectl delete cm -n ohsns ohs-httpd $ kubectl delete cm -n ohsns ohs-htdocs $ kubectl delete cm -n ohsns ohs-myapp $ kubectl delete cm -n ohsns webgate-config $ kubectl delete cm -n ohsns webgate-wallet $ kubectl delete cm -n ohsns ohs-wallet   Run the following command to delete the secrets:\n$ kubectl delete secret regcred -n ohsns $ kubectl delete secret ohs-secret -n ohsns   Run the following command to delete the namespace:\n$ kubectl delete namespace ohsns   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/manage-oam-domains/logging-and-visualization/",
	"title": "c. Logging and Visualization",
	"tags": [],
	"description": "Describes the steps for logging and visualization with Elasticsearch and Kibana.",
	"content": "After the OAM domain is set up you can publish operator and WebLogic Server logs into Elasticsearch and interact with them in Kibana.\nInstall Elasticsearch stack and Kibana If you do not already have a centralized Elasticsearch (ELK) stack then you must configure this first. For details on how to configure the ELK stack, follow Installing Elasticsearch (ELK) Stack and Kibana\nCreate the logstash pod Variables used in this chapter In order to create the logstash pod, you must create several files. These files contain variables which you must substitute with variables applicable to your environment.\nMost of the values for the variables will be based on your ELK deployment as per Installing Elasticsearch (ELK) Stack and Kibana.\nThe table below outlines the variables and values you must set:\n   Variable Sample Value Description     \u0026lt;ELK_VER\u0026gt; 8.3.1 The version of logstash you want to install.   \u0026lt;ELK_SSL\u0026gt; true If SSL is enabled for ELK set the value to true, or if NON-SSL set to false. This value must be lowercase.   \u0026lt;ELK_HOSTS\u0026gt; https://elasticsearch.example.com:9200 The URL for sending logs to Elasticsearch. HTTP if NON-SSL is used.   \u0026lt;ELKNS\u0026gt; oamns The domain namespace.   \u0026lt;ELK_USER\u0026gt; logstash_internal The name of the user for logstash to access Elasticsearch.   \u0026lt;ELK_PASSWORD\u0026gt; password The password for ELK_USER.   \u0026lt;ELK_APIKEY\u0026gt; apikey The API key details.    You will also need the BASE64 version of the Certificate Authority (CA) certificate(s) that signed the certificate of the Elasticsearch server. If using a self-signed certificate, this is the self signed certificate of the Elasticsearch server. See Copying the Elasticsearch Certificate for details on how to get the correct certificate. In the example below the certificate is called elk.crt.\nCreate Kubernetes secrets   Create a Kubernetes secret for Elasticsearch using the API Key or Password.\na) If ELK uses an API Key for authentication:\n$ kubectl create secret generic elasticsearch-pw-elastic -n \u0026lt;domain_namespace\u0026gt; --from-literal password=\u0026lt;ELK_APIKEY\u0026gt; For example:\n$ kubectl create secret generic elasticsearch-pw-elastic -n oamns --from-literal password=\u0026lt;ELK_APIKEY\u0026gt; The output will look similar to the following:\nsecret/elasticsearch-pw-elastic created b) If ELK uses a password for authentication:\n$ kubectl create secret generic elasticsearch-pw-elastic -n \u0026lt;domain_namespace\u0026gt; --from-literal password=\u0026lt;ELK_PASSWORD\u0026gt; For example:\n$ kubectl create secret generic elasticsearch-pw-elastic -n oamns --from-literal password=\u0026lt;ELK_PASSWORD\u0026gt; The output will look similar to the following:\nsecret/elasticsearch-pw-elastic created Note: It is recommended that the ELK Stack is created with authentication enabled. If no authentication is enabled you may create a secret using the values above.\n  Create a Kubernetes secret to access the required images on hub.docker.com:\nNote: Before executing the command below, you must first have a user account on hub.docker.com.\nkubectl create secret docker-registry \u0026#34;dockercred\u0026#34; --docker-server=\u0026#34;https://index.docker.io/v1/\u0026#34; \\ --docker-username=\u0026#34;\u0026lt;DOCKER_USER_NAME\u0026gt;\u0026#34; \\ --docker-password=\u0026lt;DOCKER_PASSWORD\u0026gt; --docker-email=\u0026lt;DOCKER_EMAIL_ID\u0026gt; \\ --namespace=\u0026lt;domain_namespace\u0026gt; For example,\nkubectl create secret docker-registry \u0026#34;dockercred\u0026#34; --docker-server=\u0026#34;https://index.docker.io/v1/\u0026#34; \\ --docker-username=\u0026#34;user@example.com\u0026#34; \\ --docker-password=password --docker-email=user@example.com \\ --namespace=oamns The output will look similar to the following:\nsecret/dockercred created   Find the mountPath details   Run the following command to get the mountPath of your domain:\n$ kubectl describe domains \u0026lt;domain_uid\u0026gt; -n \u0026lt;domain_namespace\u0026gt; | grep \u0026#34;Mount Path\u0026#34; For example:\n$ kubectl describe domains accessdomain -n oamns | grep \u0026#34;Mount Path\u0026#34; If you deployed OAM using WLST, the output will look similar to the following:\nMount Path: /u01/oracle/user_projects/domains If you deployed OAM using WDT, the output will look similar to the following:\nMount Path: /u01/oracle/user_projects   Find the Domain Home and Log Home details   Run the following command to get the Domain Home and Log Home of your domain:\n$ kubectl describe domains \u0026lt;domain_uid\u0026gt; -n \u0026lt;domain_namespace\u0026gt; | egrep \u0026#34;Domain Home: | Log Home:\u0026#34; ``\nFor example:\n$ kubectl describe domains accessdomain -n oamns | egrep \u0026#34;Domain Home: | Log Home:\u0026#34; ``\nThe output will look similar to the following:\nDomain Home: /u01/oracle/user_projects/domains/accessdomain Http Access Log In Log Home: true Log Home: /u01/oracle/user_projects/domains/logs/accessdomain   Find the persistentVolumeClaim details   Run the following command to get the OAM domain persistence volume details:\n$ kubectl get pv -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pv -n oamns The output will look similar to the following:\nNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE accessdomain-domain-pv 10Gi RWX Retain Bound oamns/accessdomain-domain-pvc accessdomain-domain-storage-class 23h Make note of the CLAIM value, for example in this case accessdomain-domain-pvc.\n  Create the Configmap   Copy the elk.crt file to the $WORKDIR/kubernetes/elasticsearch-and-kibana directory.\n  Navigate to the $WORKDIR/kubernetes/elasticsearch-and-kibana directory and run the following:\nkubectl create configmap elk-cert --from-file=elk.crt -n \u0026lt;namespace\u0026gt; For example:\nkubectl create configmap elk-cert --from-file=elk.crt -n oamns The output will look similar to the following:\nconfigmap/elk-cert created   Create a logstash_cm.yaml file in the $WORKDIR/kubernetes/elasticsearch-and-kibana directory as follows:\napiVersion: v1 kind: ConfigMap metadata: name: oam-logstash-configmap namespace: \u0026lt;ELKNS\u0026gt; data: logstash.yml: | #http.host: \u0026quot;0.0.0.0\u0026quot; logstash-config.conf: | input { file { path =\u0026gt; \u0026quot;\u0026lt;Log Home\u0026gt;/**/logs/AdminServer*.log\u0026quot; tags =\u0026gt; \u0026quot;Adminserver_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;\u0026lt;Log Home\u0026gt;/**/logs/oam_policy_mgr*.log\u0026quot; tags =\u0026gt; \u0026quot;Policymanager_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;\u0026lt;Log Home\u0026gt;/**/logs/oam_server*.log\u0026quot; tags =\u0026gt; \u0026quot;Oamserver_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;\u0026lt;Domain Home\u0026gt;/servers/AdminServer/logs/AdminServer-diagnostic.log\u0026quot; tags =\u0026gt; \u0026quot;Adminserver_diagnostic\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;\u0026lt;Domain Home\u0026gt;/servers/**/logs/oam_policy_mgr*-diagnostic.log\u0026quot; tags =\u0026gt; \u0026quot;Policy_diagnostic\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;\u0026lt;Domain Home\u0026gt;/servers/AdminServer/logs/auditlogs/OAM/audit.log\u0026quot; tags =\u0026gt; \u0026quot;Audit_logs\u0026quot; start_position =\u0026gt; beginning } } filter { grok { match =\u0026gt; [ \u0026quot;message\u0026quot;, \u0026quot;\u0026lt;%{DATA:log_timestamp}\u0026gt; \u0026lt;%{WORD:log_level}\u0026gt; \u0026lt;%{WORD:thread}\u0026gt; \u0026lt;%{HOSTNAME:hostname}\u0026gt; \u0026lt;%{HOSTNAME:servername}\u0026gt; \u0026lt;%{DATA:timer}\u0026gt; \u0026lt;\u0026lt;%{DATA:kernel}\u0026gt;\u0026gt; \u0026lt;\u0026gt; \u0026lt;%{DATA:uuid}\u0026gt; \u0026lt;%{NUMBER:timestamp}\u0026gt; \u0026lt;%{DATA:misc}\u0026gt; \u0026lt;%{DATA:log_number}\u0026gt; \u0026lt;%{DATA:log_message}\u0026gt;\u0026quot; ] } if \u0026quot;_grokparsefailure\u0026quot; in [tags] { mutate { remove_tag =\u0026gt; [ \u0026quot;_grokparsefailure\u0026quot; ] } } } output { elasticsearch { hosts =\u0026gt; [\u0026quot;\u0026lt;ELK_HOSTS\u0026gt;\u0026quot;] cacert =\u0026gt; '/usr/share/logstash/config/certs/elk.crt' index =\u0026gt; \u0026quot;oamlogs-000001\u0026quot; ssl =\u0026gt; true ssl_certificate_verification =\u0026gt; false user =\u0026gt; \u0026quot;\u0026lt;ELK_USER\u0026gt;\u0026quot; password =\u0026gt; \u0026quot;${ELASTICSEARCH_PASSWORD}\u0026quot; api_key =\u0026gt; \u0026quot;${ELASTICSEARCH_PASSWORD}\u0026quot; } } Change the values in the above file as follows:\n Change the \u0026lt;ELKNS\u0026gt;, \u0026lt;ELK_HOSTS\u0026gt;, \u0026lt;ELK_SSL\u0026gt;, and \u0026lt;ELK_USER\u0026gt; to match the values for your environment. Change \u0026lt;Log Home\u0026gt; and \u0026lt;Domain Home\u0026gt; to match the Log Home and Domain Home returned earlier. If your domainUID is anything other than accessdomain, change each instance of accessdomain to your domainUID. If using API KEY for your ELK authentication, delete the user and password lines. If using a password for ELK authentication, delete the api_key line. If no authentication is used for ELK, delete the user, password, and api_key lines.  For example:\napiVersion: v1 kind: ConfigMap metadata: name: oam-logstash-configmap namespace: oamns data: logstash.yml: | #http.host: \u0026quot;0.0.0.0\u0026quot; logstash-config.conf: | input { file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/logs/accessdomain/**/logs/AdminServer*.log\u0026quot; tags =\u0026gt; \u0026quot;Adminserver_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/logs/accessdomain/**/logs/oam_policy_mgr*.log\u0026quot; tags =\u0026gt; \u0026quot;Policymanager_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/logs/accessdomain/**/logs/oam_server*.log\u0026quot; tags =\u0026gt; \u0026quot;Oamserver_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/accessdomain/servers/AdminServer/logs/AdminServer-diagnostic.log\u0026quot; tags =\u0026gt; \u0026quot;Adminserver_diagnostic\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/accessdomain/servers/**/logs/oam_policy_mgr*-diagnostic.log\u0026quot; tags =\u0026gt; \u0026quot;Policy_diagnostic\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/accessdomain/servers/AdminServer/logs/auditlogs/OAM/audit.log\u0026quot; tags =\u0026gt; \u0026quot;Audit_logs\u0026quot; start_position =\u0026gt; beginning } } filter { grok { match =\u0026gt; [ \u0026quot;message\u0026quot;, \u0026quot;\u0026lt;%{DATA:log_timestamp}\u0026gt; \u0026lt;%{WORD:log_level}\u0026gt; \u0026lt;%{WORD:thread}\u0026gt; \u0026lt;%{HOSTNAME:hostname}\u0026gt; \u0026lt;%{HOSTNAME:servername}\u0026gt; \u0026lt;%{DATA:timer}\u0026gt; \u0026lt;\u0026lt;%{DATA:kernel}\u0026gt;\u0026gt; \u0026lt;\u0026gt; \u0026lt;%{DATA:uuid}\u0026gt; \u0026lt;%{NUMBER:timestamp}\u0026gt; \u0026lt;%{DATA:misc}\u0026gt; \u0026lt;%{DATA:log_number}\u0026gt; \u0026lt;%{DATA:log_message}\u0026gt;\u0026quot; ] } if \u0026quot;_grokparsefailure\u0026quot; in [tags] { mutate { remove_tag =\u0026gt; [ \u0026quot;_grokparsefailure\u0026quot; ] } } } output { elasticsearch { hosts =\u0026gt; [\u0026quot;https://elasticsearch.example.com:9200\u0026quot;] cacert =\u0026gt; '/usr/share/logstash/config/certs/elk.crt' index =\u0026gt; \u0026quot;oamlogs-000001\u0026quot; ssl =\u0026gt; true ssl_certificate_verification =\u0026gt; false user =\u0026gt; \u0026quot;logstash_internal\u0026quot; password =\u0026gt; \u0026quot;${ELASTICSEARCH_PASSWORD}\u0026quot; } }   Run the following command to create the configmap:\n$ kubectl apply -f logstash_cm.yaml The output will look similar to the following:\nconfigmap/oam-logstash-configmap created   Deploy the logstash pod   Navigate to the $WORKDIR/kubernetes/elasticsearch-and-kibana directory and create a logstash.yaml file as follows:\napiVersion: apps/v1 kind: Deployment metadata: name: oam-logstash namespace: \u0026lt;ELKNS\u0026gt; spec: selector: matchLabels: k8s-app: logstash template: # create pods using pod definition in this template metadata: labels: k8s-app: logstash spec: imagePullSecrets: - name: dockercred containers: - command: - logstash image: logstash:\u0026lt;ELK_VER\u0026gt; imagePullPolicy: IfNotPresent name: oam-logstash env: - name: ELASTICSEARCH_PASSWORD valueFrom: secretKeyRef: name: elasticsearch-pw-elastic key: password resources: ports: - containerPort: 5044 name: logstash volumeMounts: - mountPath: \u0026lt;mountPath\u0026gt; name: weblogic-domain-storage-volume - name: shared-logs mountPath: /shared-logs - mountPath: /usr/share/logstash/pipeline/ name: oam-logstash-pipeline - mountPath: /usr/share/logstash/config/logstash.yml subPath: logstash.yml name: config-volume - mountPath: /usr/share/logstash/config/certs name: elk-cert volumes: - configMap: defaultMode: 420 items: - key: elk.crt path: elk.crt name: elk-cert name: elk-cert - configMap: defaultMode: 420 items: - key: logstash-config.conf path: logstash-config.conf name: oam-logstash-configmap name: oam-logstash-pipeline - configMap: defaultMode: 420 items: - key: logstash.yml path: logstash.yml name: oam-logstash-configmap name: config-volume - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: accessdomain-domain-pvc - name: shared-logs emptyDir: {}  Change the \u0026lt;ELKNS\u0026gt;, \u0026lt;ELK_VER\u0026gt; to match the values for your environment Change \u0026lt;mountPath\u0026gt; to match the mountPath returned earlier Change the claimName value to match the claimName returned earlier If your Kubernetes environment does not allow access to the internet to pull the logstash image, you must load the logstash image in your own container registry and change image: logstash:\u0026lt;ELK_VER\u0026gt; to the location of the image in your container registry e.g: container-registry.example.com/logstash:8.3.1  For example:\napiVersion: apps/v1 kind: Deployment metadata: name: oam-logstash namespace: oamns spec: selector: matchLabels: k8s-app: logstash template: # create pods using pod definition in this template metadata: labels: k8s-app: logstash spec: imagePullSecrets: - name: dockercred containers: - command: - logstash image: logstash:8.3.1 imagePullPolicy: IfNotPresent name: oam-logstash env: - name: ELASTICSEARCH_PASSWORD valueFrom: secretKeyRef: name: elasticsearch-pw-elastic key: password resources: ports: - containerPort: 5044 name: logstash volumeMounts: - mountPath: /u01/oracle/user_projects name: weblogic-domain-storage-volume - name: shared-logs mountPath: /shared-logs - mountPath: /usr/share/logstash/pipeline/ name: oam-logstash-pipeline - mountPath: /usr/share/logstash/config/logstash.yml subPath: logstash.yml name: config-volume - mountPath: /usr/share/logstash/config/certs name: elk-cert volumes: - configMap: defaultMode: 420 items: - key: elk.crt path: elk.crt name: elk-cert name: elk-cert - configMap: defaultMode: 420 items: - key: logstash-config.conf path: logstash-config.conf name: oam-logstash-configmap name: oam-logstash-pipeline - configMap: defaultMode: 420 items: - key: logstash.yml path: logstash.yml name: oam-logstash-configmap name: config-volume - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: accessdomain-domain-pvc - name: shared-logs emptyDir: {}   Deploy the logstash pod by executing the following command:\n$ kubectl create -f $WORKDIR/kubernetes/elasticsearch-and-kibana/logstash.yaml The output will look similar to the following:\ndeployment.apps/oam-logstash created   Run the following command to check the logstash pod is created correctly:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods -n oamns The output should look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 18h accessdomain-oam-policy-mgr1 1/1 Running 0 18h accessdomain-oam-server1 1/1 Running 1 18h nginx-ingress-ingress-nginx-controller-76fb7678f-k8rhq 1/1 Running 0 20h oam-logstash-bbbdf5876-85nkd 1/1 Running 0 4m23s Note: Wait a couple of minutes to make sure the pod has not had any failures or restarts. If the pod fails you can view the pod log using:\n$ kubectl logs -f oam-logstash-\u0026lt;pod\u0026gt; -n oamns Most errors occur due to misconfiguration of the logstash_cm.yaml or logstash.yaml. This is usually because of an incorrect value set, or the certificate was not pasted with the correct indentation.\nIf the pod has errors, delete the pod and configmap as follows:\n$ kubectl delete -f $WORKDIR/kubernetes/elasticsearch-and-kibana/logstash.yaml $ kubectl delete -f $WORKDIR/kubernetes/elasticsearch-and-kibana/logstash_cm.yaml Once you have resolved the issue in the yaml files, run the commands outlined earlier to recreate the configmap and logstash pod.\n  Verify and access the Kibana console To access the Kibana console you will need the Kibana URL as per Installing Elasticsearch (ELK) Stack and Kibana.\nFor Kibana 7.7.x and below:\n  Access the Kibana console with http://\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;/app/kibana and login with your username and password.\n  From the Navigation menu, navigate to Management \u0026gt; Kibana \u0026gt; Index Patterns.\n  In the Create Index Pattern page enter oamlogs* for the Index pattern and click Next Step.\n  In the Configure settings page, from the Time Filter field name drop down menu select @timestamp and click Create index pattern.\n  Once the index pattern is created click on Discover in the navigation menu to view the OAM logs.\n  For Kibana version 7.8.X and above:\n  Access the Kibana console with http://\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;/app/kibana and login with your username and password.\n  From the Navigation menu, navigate to Management \u0026gt; Stack Management.\n  Click Data Views in the Kibana section.\n  Click Create Data View and enter the following information:\n Name: oamlogs* Timestamp: @timestamp    Click Create Data View.\n  From the Navigation menu, click Discover to view the log file entries.\n  From the drop down menu, select oamlogs* to view the log file entries.\n  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/manage-oig-domains/running-oig-utilities/",
	"title": "c. Runnning OIG utilities",
	"tags": [],
	"description": "Describes the steps for running OIG utilities in Kubernetes.",
	"content": "Run OIG utlities inside the OIG Kubernetes cluster.\nRun utilities in an interactive bash shell   Access a bash shell inside the \u0026lt;domain_uid\u0026gt;-oim-server1 pod:\n$ kubectl -n oigns exec -it \u0026lt;domain_uid\u0026gt;-oim-server1 -- bash For example:\n$ kubectl -n oigns exec -it governancedomain-oim-server1 -- bash This will take you into a bash shell in the running \u0026lt;domain_uid\u0026gt;-oim-server1 pod:\n[oracle@governancedomain-oim-server1 oracle]$   Navigate to the /u01/oracle/idm/server/bin directory and execute the utility as required. For example:\n[oracle@governancedomain-oim-server1 oracle] cd /u01/oracle/idm/server/bin [oracle@governancedomain-oim-server1 bin]$ ./\u0026lt;filename\u0026gt;.sh Note: Some utilties such as PurgeCache.sh, GenerateSnapshot.sh etc, may prompt to enter the t3 URL, for example:\n[oracle@governancedomain-oim-server1 bin]$ sh GenerateSnapshot.sh For running the Utilities the following environment variables need to be set APP_SERVER is weblogic OIM_ORACLE_HOME is /u01/oracle/idm/ JAVA_HOME is /u01/jdk MW_HOME is /u01/oracle WL_HOME is /u01/oracle/wlserver DOMAIN_HOME is /u01/oracle/user_projects/domains/governancedomain Executing -Dweblogic.security.SSL.trustedCAKeyStore= in IPv4 mode [Enter Xellerate admin username :]xelsysadm [Enter password for xelsysadm :] [Threads to use [ 8 ]] [Enter serverURL :[t3://oimhostname:oimportno ]] To find the t3 URL run:\n$ kubectl get services -n oigns | grep oim-cluster The output will look similar to the following:\ngovernancedomain-cluster-oim-cluster ClusterIP 10.110.161.82 \u0026lt;none\u0026gt; 14002/TCP,14000/TCP 4d In this case the t3 URL is: t3://governancedomain-cluster-oim-cluster:14000.\n  Passing inputs as a jar/xml file   Copy the input file to pass to a directory of your choice.\n  Run the following command to copy the input file to the running governancedomain-oim-server1 pod.\n$ kubectl -n oigns cp /\u0026lt;path\u0026gt;/\u0026lt;inputFile\u0026gt; governancedomain-oim-server1:/u01/oracle/idm/server/bin/   Access a bash shell inside the governancedomain-oim-server1 pod:\n$ kubectl -n oigns exec -it governancedomain-oim-server1 -- bash This will take you into a bash shell in the running governancedomain-oim-server1 pod:\n[oracle@governancedomain-oim-server1 oracle]$   Navigate to the /u01/oracle/idm/server/bin directory and execute the utility as required, passing the input file. For example:\n[oracle@governancedomain-oim-server1 oracle] cd /u01/oracle/idm/server/bin [oracle@governancedomain-oim-server1 bin]$ ./\u0026lt;filename\u0026gt;.sh -inputFile \u0026lt;inputFile\u0026gt; Note As pods are stateless the copied input file will remain until the pod restarts.\n  Editing property/profile files To edit a property/profile file in the Kubernetes cluster:\n  Copy the input file from the pod to a on the local system, for example:\n$ kubectl -n oigns cp governancedomain-oim-server1:/u01/oracle/idm/server/bin/\u0026lt;file.properties_profile\u0026gt; /\u0026lt;path\u0026gt;/\u0026lt;file.properties_profile\u0026gt; Note: If you see the message tar: Removing leading '/' from member names this can be ignored.\n  Edit the \u0026lt;/path\u0026gt;/\u0026lt;file.properties_profile\u0026gt; in an editor of your choice.\n  Copy the file back to the pod:\n$ kubectl -n oigns cp /\u0026lt;path\u0026gt;/\u0026lt;file.properties_profile\u0026gt; governancedomain-oim-server1:/u01/oracle/idm/server/bin/ Note: As pods are stateless the copied input file will remain until the pod restarts. Preserve a local copy in case you need to copy files back after pod restart.\n  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/patch-and-upgrade/upgrade-an-ingress/",
	"title": "c. Upgrade Ingress",
	"tags": [],
	"description": "Instructions on how to upgrade the ingress.",
	"content": "This section shows how to upgrade the ingress.\nTo determine if this step is required for the version you are upgrading to, refer to the Release Notes.\nDownload the latest code repository Download the latest code repository as follows:\n  Create a working directory to setup the source code.\n$ mkdir \u0026lt;workdir\u0026gt; For example:\n$ mkdir /scratch/OAMK8Slatest   Download the latest OAM deployment scripts from the OAM repository.\n$ cd \u0026lt;workdir\u0026gt; $ git clone https://github.com/oracle/fmw-kubernetes.git --branch release/24.4.1 For example:\n$ cd /scratch/OAMK8Slatest $ git clone https://github.com/oracle/fmw-kubernetes.git --branch release/24.4.1   Set the $WORKDIR environment variable as follows:\n$ export WORKDIR=\u0026lt;workdir\u0026gt;/fmw-kubernetes/OracleAccessManagement For example:\n$ export WORKDIR=/scratch/OAMK8Slatest/fmw-kubernetes/OracleAccessManagement   Upgrading the ingress To upgrade the existing ingress rules, follow the steps below:\n  List the existing ingress:\n$ helm list -n oamns The output will look similar to the following:\nNAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION nginx-ingress oamns 1 \u0026lt;DATE\u0026gt; deployed ingress-nginx-4.3.0 1.4.0 oam-nginx oamns 1 \u0026lt;DATE\u0026gt; deployed ingress-per-domain-0.1.0 1.0   Edit the $WORKDIR/kubernetes/charts/ingress-per-domain/values.yaml and change the parameters to the same as you had when you initially configured the ingress. See Prepare the values.yaml for the ingress. For example:\n# Load balancer type. Supported values are: NGINX type: NGINX # SSL configuration Type. Supported Values are : NONSSL,SSL sslType: NONSSL # domainType. Supported values are: oam domainType: oam #WLS domain as backend to the load balancer wlsDomain: domainUID: accessdomain adminServerName: AdminServer adminServerPort: 7001 adminServerSSLPort: oamClusterName: oam_cluster oamManagedServerPort: 14100 oamManagedServerSSLPort: policyClusterName: policy_cluster policyManagedServerPort: 15100 policyManagedServerSSLPort: # Host specific values hostName: enabled: false admin: runtime:   Upgrade the oam-nginx with the following command:\n$ helm upgrade oam-nginx kubernetes/charts/ingress-per-domain/ --namespace oamns --values kubernetes/charts/ingress-per-domain/values.yaml --reuse-values The output will look similar to the following:\nRelease \u0026quot;oam-nginx\u0026quot; has been upgraded. Happy Helming! NAME: oam-nginx LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oamns STATUS: deployed REVISION: 2 TEST SUITE: None   List the ingress:\n$ kubectl get ing -n oamns The output will look similar to the following:\nNAME CLASS HOSTS ADDRESS PORTS AGE accessdomain-nginx \u0026lt;none\u0026gt; * 10.99.189.61 80 18s   Describe the ingress and make sure all the listed paths are accessible:\n$ kubectl describe ing accessdomain-nginx -n oamns The output will look similar to the following:\nName: accessdomain-nginx Labels: app.kubernetes.io/managed-by=Helm Namespace: oamns Address: 10.99.189.61 Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) Rules: Host Path Backends ---- ---- -------- * /console accessdomain-adminserver:7001 (10.244.1.224:7001) /consolehelp accessdomain-adminserver:7001 (10.244.1.224:7001) /rreg/rreg accessdomain-adminserver:7001 (10.244.1.224:7001) /em accessdomain-adminserver:7001 (10.244.1.224:7001) /oamconsole accessdomain-adminserver:7001 (10.244.1.224:7001) /dms accessdomain-adminserver:7001 (10.244.1.224:7001) /oam/services/rest accessdomain-adminserver:7001 (10.244.1.224:7001) /iam/admin/config accessdomain-adminserver:7001 (10.244.1.224:7001) /iam/admin/diag accessdomain-adminserver:7001 (10.244.1.224:7001) /iam/access accessdomain-cluster-oam-cluster:14100 (10.244.1.225:14100) /oam/admin/api accessdomain-adminserver:7001 (10.244.1.224:7001) /oam/services/rest/access/api accessdomain-cluster-oam-cluster:14100 (10.244.1.225:14100) /access accessdomain-cluster-policy-cluster:15100 (10.244.1.226:15100) / accessdomain-cluster-oam-cluster:14100 (10.244.1.225:14100) Annotations: meta.helm.sh/release-name: oam-nginx meta.helm.sh/release-namespace: oamns nginx.ingress.kubernetes.io/configuration-snippet: more_clear_input_headers \u0026quot;WL-Proxy-Client-IP\u0026quot; \u0026quot;WL-Proxy-SSL\u0026quot;; more_set_input_headers \u0026quot;X-Forwarded-Proto: https\u0026quot;; more_set_input_headers \u0026quot;WL-Proxy-SSL: true\u0026quot;; nginx.ingress.kubernetes.io/enable-access-log: false nginx.ingress.kubernetes.io/ingress.allow-http: false nginx.ingress.kubernetes.io/proxy-buffer-size: 2000k Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 55s (x2 over 63s) nginx-ingress-controller Scheduled for sync   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/patch-and-upgrade/upgrade-an-ingress/",
	"title": "c. Upgrade Ingress",
	"tags": [],
	"description": "Instructions on how to upgrade the ingress.",
	"content": "This section shows how to upgrade the ingress.\nTo determine if this step is required for the version you are upgrading to, refer to the Release Notes.\nUpgrading the ingress To upgrade the existing ingress rules, follow the steps below:\n  List the existing ingress:\n$ helm list -n \u0026lt;domain_namespace\u0026gt; For example:\n$ helm list -n oigns The output will look similar to the following:\nNAME NAMESPACE REVISION UPDATED STATUS CHART APP VERSION governancedomain-nginx oigns 1 \u0026lt;DATE\u0026gt; deployed ingress-per-domain-0.1.0 1.0   Make sure you have downloaded the latest code as per Download the latest code repository.\n  Edit the $WORKDIR/kubernetes/charts/ingress-per-domain/values.yaml and change the domainUID parameter to match your domainUID, for example domainUID: governancedomain. Change sslType to NONSSL or SSL depending on your existing configuration. For example:\n# Load balancer type. Supported values are: NGINX type: NGINX # SSL configuration Type. Supported Values are : NONSSL,SSL sslType: SSL # domainType. Supported values are: oim domainType: oim #WLS domain as backend to the load balancer wlsDomain: domainUID: governancedomain adminServerName: AdminServer adminServerPort: 7001 adminServerSSLPort: soaClusterName: soa_cluster soaManagedServerPort: 8001 soaManagedServerSSLPort: oimClusterName: oim_cluster oimManagedServerPort: 14000 oimManagedServerSSLPort: # Host specific values hostName: enabled: false admin: runtime: internal: # Ngnix specific values nginx: nginxTimeOut: 180   Upgrade the governancedomain-nginx with the following command:\n$ cd $WORKDIR $ helm upgrade \u0026lt;ingress\u0026gt; kubernetes/charts/ingress-per-domain/ --namespace \u0026lt;domain_namespace\u0026gt; --values kubernetes/charts/ingress-per-domain/values.yaml --reuse-values For example:\n$ cd $WORKDIR $ helm upgrade governancedomain-nginx kubernetes/charts/ingress-per-domain/ --namespace oigns --values kubernetes/charts/ingress-per-domain/values.yaml --reuse-values The output will look similar to the following:\nRelease \u0026quot;governancedomain-nginx\u0026quot; has been upgraded. Happy Helming! NAME: governancedomain-nginx LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: oigns STATUS: deployed REVISION: 2 TEST SUITE: None   List the ingress:\n$ kubectl get ing -n oigns The output will look similar to the following:\nNAME CLASS HOSTS ADDRESS PORTS AGE governancedomain-nginx \u0026lt;none\u0026gt; * 10.107.182.40 80 18s   Describe the ingress and make sure all the listed paths are accessible:\n$ kubectl describe ing governancedomain-nginx -n oigns The output will look similar to the following:\nName: governancedomain-nginx Namespace: oigns Address: 10.107.182.40 Default backend: default-http-backend:80 (\u0026lt;error: endpoints \u0026quot;default-http-backend\u0026quot; not found\u0026gt;) Rules: Host Path Backends ---- ---- -------- * /console governancedomain-adminserver:7001 (10.244.4.240:7001) /consolehelp governancedomain-adminserver:7001 (10.244.4.240:7001) /em governancedomain-adminserver:7001 (10.244.4.240:7001) /ws_utc governancedomain-cluster-soa-cluster:8001 (10.244.4.242:8001) /soa governancedomain-cluster-soa-cluster:8001 (10.244.4.242:8001) /integration governancedomain-cluster-soa-cluster:8001 (10.244.4.242:8001) /soa-infra governancedomain-cluster-soa-cluster:8001 (10.244.4.242:8001) /identity governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /admin governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /oim governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /sysadmin governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /workflowservice governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /callbackResponseService governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /spml-xsd governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /HTTPClnt governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /reqsvc governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /iam governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /provisioning-callback governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /CertificationCallbackService governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /ucs governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /FacadeWebApp governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /OIGUI governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) /weblogic governancedomain-cluster-oim-cluster:14000 (10.244.4.241:14000) Annotations: meta.helm.sh/release-name: governancedomain-nginx meta.helm.sh/release-namespace: oigns nginx.ingress.kubernetes.io/affinity: cookie nginx.ingress.kubernetes.io/affinity-mode: persistent nginx.ingress.kubernetes.io/configuration-snippet: more_clear_input_headers \u0026quot;WL-Proxy-Client-IP\u0026quot; \u0026quot;WL-Proxy-SSL\u0026quot;; more_set_input_headers \u0026quot;X-Forwarded-Proto: https\u0026quot;; more_set_input_headers \u0026quot;WL-Proxy-SSL: true\u0026quot;; nginx.ingress.kubernetes.io/enable-access-log: false nginx.ingress.kubernetes.io/ingress.allow-http: false nginx.ingress.kubernetes.io/proxy-buffer-size: 2000k nginx.ingress.kubernetes.io/proxy-read-timeout: 180 nginx.ingress.kubernetes.io/proxy-send-timeout: 180 nginx.ingress.kubernetes.io/session-cookie-name: sticky Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Sync 51m (x3 over 54m) nginx-ingress-controller Scheduled for sync   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oud/manage-oud-containers/hpa/",
	"title": "d. Kubernetes Horizontal Pod Autoscaler",
	"tags": [],
	"description": "Describes the steps for implementing the Horizontal Pod Autoscaler.",
	"content": " Prerequisite configuration Deploy the Kubernetes Metrics Server  Troubleshooting   Deploy HPA Testing HPA Delete the HPA Other considerations  Kubernetes Horizontal Pod Autoscaler (HPA) allows automatic scaling (up and down) of the OUD servers. If load increases then extra OUD servers will be started as required. Similarly, if load decreases, OUD servers will be automatically shutdown.\nFor more information on HPA, see Horizontal Pod Autoscaling.\nThe instructions below show you how to configure and run an HPA to scale OUD servers, based on CPU utilization or memory resource metrics.\nNote: If you enable HPA and then decide you want to start/stop/scale OUD servers manually as per Scaling Up/Down OUD Pods, it is recommended to delete HPA beforehand as per Delete the HPA.\nPrerequisite configuration In order to use HPA, OUD must have been created with the required resources parameter as per Create OUD instances. For example:\noudConfig: # memory, cpu parameters for both requests and limits for oud instances resources: limits: cpu: \u0026quot;1\u0026quot; memory: \u0026quot;8Gi\u0026quot; requests: cpu: \u0026quot;500m\u0026quot; memory: \u0026quot;4Gi\u0026quot; If you created the OUD servers at any point since July 22 (22.3.1) then these values are the defaults. You can check using the following command:\n$ helm show values oud-ds-rs -n oudns The output will look similar to the following:\n... # memory, cpu parameters for both requests and limits for oud instances resources: requests: memory: \u0026quot;4Gi\u0026quot; cpu: \u0026quot;500m\u0026quot; limits: memory: \u0026quot;8Gi\u0026quot; cpu: \u0026quot;2\u0026quot; ... Deploy the Kubernetes Metrics Server Before deploying HPA you must deploy the Kubernetes Metrics Server.\n  Check to see if the Kubernetes Metrics Server is already deployed:\n$ kubectl get pods -n kube-system | grep metric If a row is returned as follows, then Kubernetes Metric Server is deployed and you can move to Deploy HPA.\nmetrics-server-d9694457-mf69d 1/1 Running 0 5m13s   If no rows are returned by the previous command, then the Kubernetes Metric Server needs to be deployed. Run the following commands to get the components.yaml:\n$ mkdir $WORKDIR/kubernetes/hpa $ cd $WORKDIR/kubernetes/hpa $ wget https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml   Deploy the Kubernetes Metrics Server by running the following command:\n$ kubectl apply -f components.yaml The output will look similar to the following:\nserviceaccount/metrics-server created clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created clusterrole.rbac.authorization.k8s.io/system:metrics-server created rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created service/metrics-server created deployment.apps/metrics-server created apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created   Run the following command to check Kubernetes Metric Server is running:\n$ kubectl get pods -n kube-system | grep metric Make sure the pod has a READY status of 1/1:\nmetrics-server-d9694457-mf69d 1/1 Running 0 39s   Troubleshooting If the Kubernetes Metric Server does not reach the READY 1/1 state, run the following commands:\n$ kubectl describe pod \u0026lt;metrics-server-pod\u0026gt; -n kube-system $ kubectl logs \u0026lt;metrics-server-pod\u0026gt; -n kube-system If you see errors such as:\nReadiness probe failed: HTTP probe failed with statuscode: 500 and:\nE0907 13:07:50.937308 1 scraper.go:140] \u0026quot;Failed to scrape node\u0026quot; err=\u0026quot;Get \\\u0026quot;https://X.X.X.X:10250/metrics/resource\\\u0026quot;: x509: cannot validate certificate for 100.105.18.113 because it doesn't contain any IP SANs\u0026quot; node=\u0026quot;worker-node1\u0026quot; then you may need to install a valid cluster certificate for your Kubernetes cluster.\nFor testing purposes, you can resolve this issue by:\n  Delete the Kubernetes Metrics Server by running the following command:\n$ kubectl delete -f $WORKDIR/kubernetes/hpa/components.yaml   Edit the $WORKDIR/hpa/components.yaml and locate the args: section. Add kubelet-insecure-tls to the arguments. For example:\nspec: containers: - args: - --cert-dir=/tmp - --secure-port=4443 - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname - --kubelet-use-node-status-port - --kubelet-insecure-tls - --metric-resolution=15s image: registry.k8s.io/metrics-server/metrics-server:v0.6.4 ...   Deploy the Kubenetes Metrics Server using the command:\n$ kubectl apply -f components.yaml Run the following and make sure the READY status shows 1/1:\n$ kubectl get pods -n kube-system | grep metric The output should look similar to the following:\nmetrics-server-d9694457-mf69d 1/1 Running 0 40s   Deploy HPA The steps below show how to configure and run an HPA to scale OUD, based on the CPU or memory utilization resource metrics.\nAssuming the example OUD configuration in Create OUD instances, three OUD servers are started by default (oud-ds-rs-0, oud-ds-rs-1, oud-ds-rs-2).\nIn the following example an HPA resource is created, targeted at the statefulset oud-ds-rs. This resource will autoscale OUD servers from a minimum of 3 OUD servers up to 5 OUD servers. Scaling up will occur when the average CPU is consistently over 70%. Scaling down will occur when the average CPU is consistently below 70%.\n  Navigate to the $WORKDIR/kubernetes/hpa and create an autoscalehpa.yaml file that contains the following.\n# apiVersion: autoscaling/v2 kind: HorizontalPodAutoscaler metadata: name: oud-sts-hpa namespace: oudns spec: scaleTargetRef: apiVersion: apps/v1 kind: StatefulSet name: oud-ds-rs #statefulset name of oud behavior: scaleDown: stabilizationWindowSeconds: 60 scaleUp: stabilizationWindowSeconds: 60 minReplicas: 3 maxReplicas: 5 metrics: - type: Resource resource: name: cpu target: type: Utilization averageUtilization: 70 Note : minReplicas should match the number of OUD servers started by default. Set maxReplicas to the maximum amount of OUD servers that can be started.\nNote: To find the statefulset name, in this example oud-ds-rs, run \u0026ldquo;kubectl get statefulset -n oudns\u0026rdquo;.\nNote: For setting HPA based on Memory Metrics, update the metrics block with the following content. Please note we recommend using only CPU or Memory, not both.\nmetrics: - type: Resource resource: name: memory target: type: Utilization averageUtilization: 70   Run the following command to create the autoscaler:\n$ kubectl apply -f autoscalehpa.yaml The output will look similar to the following:\nhorizontalpodautoscaler.autoscaling/oud-sts-hpa created   Verify the status of the autoscaler by running the following:\n$ kubectl get hpa -n oudns The output will look similar to the following:\nNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE oud-sts-hpa StatefulSet/oud-ds-rs 5%/70% 3 5 3 33s In the example above, this shows that CPU is currently running at 5% for the oud-sts-hpa.\n  Testing HPA   Check the current status of the OUD servers:\n$ kubectl get pods -n oudns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE oud-ds-rs-0 1/1 Running 0 5h15m oud-ds-rs-1 1/1 Running 0 5h9m oud-ds-rs-2 1/1 Running 0 5h2m oud-pod-cron-job-28242120-bwtcz 0/1 Completed 0 61m oud-pod-cron-job-28242150-qf8fg 0/1 Completed 0 31m oud-pod-cron-job-28242180-q69lm 0/1 Completed 0 92s In the above oud-ds-rs-0, oud-ds-rs-0, oud-ds-rs-2 are running.\n  To test HPA can scale up the OUD servers, run the following commands:\n$ kubectl exec --stdin --tty oud-ds-rs-0 -n oudns -- /bin/bash This will take you inside a bash shell inside the oud-ds-rs-0 pod:\n[oracle@oud-ds-rs-0 oracle]$ Inside the bash shell, run the following command to increase the load on the CPU:\n[oracle@oud-ds-rs-0 oracle]$ dd if=/dev/zero of=/dev/null This command will continue to run in the foreground.\n  Repeat the step above for the oud-ds-rs-1 pod:\n$ kubectl exec --stdin --tty oud-ds-rs-1 -n oudns -- /bin/bash [oracle@oud-ds-rs-1 oracle]$ [oracle@oud-ds-rs-1 oracle]$ dd if=/dev/zero of=/dev/null   In a command window outside the bash shells, run the following command to view the current CPU usage:\n$ kubectl get hpa -n oudns The output will look similar to the following:\nNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE oud-sts-hpa StatefulSet/oud-ds-rs 125%/70% 3 5 3 5m15s In the above example the CPU has increased to 125%. As this is above the 70% limit, the autoscaler increases the replicas by starting additional OUD servers.\n  Run the following to see if any more OUD servers are started:\n$ kubectl get pods -n oudns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE oud-ds-rs-0 1/1 Running 0 5h50m oud-ds-rs-1 1/1 Running 0 5h44m oud-ds-rs-2 1/1 Running 0 5h37m oud-ds-rs-3 1/1 Running 0 9m29s oud-ds-rs-4 1/1 Running 0 5m17s oud-pod-cron-job-28242150-qf8fg 0/1 Completed 0 66m oud-pod-cron-job-28242180-q69lm 0/1 Completed 0 36m oud-pod-cron-job-28242210-kn7sv 0/1 Completed 0 6m28s In the example above one more OUD server has started (oud-ds-rs-4).\nNote: It may take some time for the server to appear and start. Once the server is at READY status of 1/1, the server is started.\n  To stop the load on the CPU, in both bash shells, issue a Control C, and then exit the bash shell:\n[oracle@oud-ds-rs-0 oracle]$ dd if=/dev/zero of=/dev/null ^C [oracle@oud-ds-rs-0 oracle]$ exit   Run the following command to view the current CPU usage:\n$ kubectl get hpa -n oudns The output will look similar to the following:\nNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE oud-sts-hpa StatefulSet/oud-ds-rs 4%/70% 3 5 5 40m In the above example CPU has dropped to 4%. As this is below the 70% threshold, you should see the autoscaler scale down the servers:\n$ kubectl get pods -n oudns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE oud-ds-rs-0 1/1 Running 0 5h54m oud-ds-rs-1 1/1 Running 0 5h48m oud-ds-rs-2 1/1 Running 0 5h41m oud-ds-rs-3 1/1 Running 0 13m oud-ds-rs-4 1/1 Terminating 0 8m27s oud-pod-cron-job-28242150-qf8fg 0/1 Completed 0 70m oud-pod-cron-job-28242180-q69lm 0/1 Completed 0 40m oud-pod-cron-job-28242210-kn7sv 0/1 Completed 0 10m Eventually, the extra server will disappear:\nNAME READY STATUS RESTARTS AGE oud-ds-rs-0 1/1 Running 0 5h57m oud-ds-rs-1 1/1 Running 0 5h51m oud-ds-rs-2 1/1 Running 0 5h44m oud-ds-rs-3 1/1 Running 0 16m oud-pod-cron-job-28242150-qf8fg 0/1 Completed 0 73m oud-pod-cron-job-28242180-q69lm 0/1 Completed 0 43m oud-pod-cron-job-28242210-kn7sv 0/1 Completed 0 13m   Delete the HPA   If you need to delete the HPA, you can do so by running the following command:\n$ cd $WORKDIR/kubernetes/hpa $ kubectl delete -f autoscalehpa.yaml   Other considerations  If HPA is deployed and you need to upgrade the OUD image, then you must delete the HPA before upgrading. Once the upgrade is successful you can deploy HPA again. If you choose to scale up or scale down an OUD server manually as per Scaling Up/Down OUD Pods, then it is recommended to delete the HPA before doing so.  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/manage-oig-domains/logging-and-visualization/",
	"title": "d. Logging and visualization",
	"tags": [],
	"description": "Describes the steps for logging and visualization with Elasticsearch and Kibana.",
	"content": "After the OIG domain is set up you can publish operator and WebLogic Server logs into Elasticsearch and interact with them in Kibana.\nInstall Elasticsearch and Kibana If you do not already have a centralized Elasticsearch (ELK) stack then you must configure this first. For details on how to configure the ELK stack, follow Installing Elasticsearch (ELK) Stack and Kibana\nCreate the logstash pod Variables used in this chapter In order to create the logstash pod, you must create several files. These files contain variables which you must substitute with variables applicable to your environment.\nMost of the values for the variables will be based on your ELK deployment as per Installing Elasticsearch (ELK) Stack and Kibana.\nThe table below outlines the variables and values you must set:\n   Variable Sample Value Description     \u0026lt;ELK_VER\u0026gt; 8.3.1 The version of logstash you want to install.   \u0026lt;ELK_SSL\u0026gt; true If SSL is enabled for ELK set the value to true, or if NON-SSL set to false. This value must be lowercase.   \u0026lt;ELK_HOSTS\u0026gt; https://elasticsearch.example.com:9200 The URL for sending logs to Elasticsearch. HTTP if NON-SSL is used.   \u0026lt;ELKNS\u0026gt; oigns The domain namespace.   \u0026lt;ELK_USER\u0026gt; logstash_internal The name of the user for logstash to access Elasticsearch.   \u0026lt;ELK_PASSWORD\u0026gt; password The password for ELK_USER.   \u0026lt;ELK_APIKEY\u0026gt; apikey The API key details.    You will also need the BASE64 version of the Certificate Authority (CA) certificate(s) that signed the certificate of the Elasticsearch server. If using a self-signed certificate, this is the self signed certificate of the Elasticsearch server. See Copying the Elasticsearch Certificate for details on how to get the correct certificate. In the example below the certificate is called elk.crt.\nCreate kubernetes secrets   Create a Kubernetes secret for Elasticsearch using the API Key or Password.\na) If ELK uses an API Key for authentication:\n$ kubectl create secret generic elasticsearch-pw-elastic -n \u0026lt;domain_namespace\u0026gt; --from-literal password=\u0026lt;ELK_APIKEY\u0026gt; For example:\n$ kubectl create secret generic elasticsearch-pw-elastic -n oigns --from-literal password=\u0026lt;ELK_APIKEY\u0026gt; The output will look similar to the following:\nsecret/elasticsearch-pw-elastic created b) If ELK uses a password for authentication:\n$ kubectl create secret generic elasticsearch-pw-elastic -n \u0026lt;domain_namespace\u0026gt; --from-literal password=\u0026lt;ELK_PASSWORD\u0026gt; For example:\n$ kubectl create secret generic elasticsearch-pw-elastic -n oigns --from-literal password=\u0026lt;ELK_PASSWORD\u0026gt; The output will look similar to the following:\nsecret/elasticsearch-pw-elastic created Note: It is recommended that the ELK Stack is created with authentication enabled. If no authentication is enabled you may create a secret using the values above.\n  Create a Kubernetes secret to access the required images on hub.docker.com:\nNote: Before executing the command below, you must first have a user account on hub.docker.com.\nkubectl create secret docker-registry \u0026#34;dockercred\u0026#34; --docker-server=\u0026#34;https://index.docker.io/v1/\u0026#34; \\ --docker-username=\u0026#34;\u0026lt;DOCKER_USER_NAME\u0026gt;\u0026#34; \\ --docker-password=\u0026lt;DOCKER_PASSWORD\u0026gt; --docker-email=\u0026lt;DOCKER_EMAIL_ID\u0026gt; \\ --namespace=\u0026lt;domain_namespace\u0026gt; For example,\nkubectl create secret docker-registry \u0026#34;dockercred\u0026#34; --docker-server=\u0026#34;https://index.docker.io/v1/\u0026#34; \\ --docker-username=\u0026#34;user@example.com\u0026#34; \\ --docker-password=password --docker-email=user@example.com \\ --namespace=oigns The output will look similar to the following:\nsecret/dockercred created   Find the mountPath details   Run the following command to get the mountPath of your domain:\n$ kubectl describe domains \u0026lt;domain_uid\u0026gt; -n \u0026lt;domain_namespace\u0026gt; | grep \u0026#34;Mount Path\u0026#34; For example:\n$ kubectl describe domains governancedomain -n oigns | grep \u0026#34;Mount Path\u0026#34; If you deployed OIG using WLST, the output will look similar to the following:\nMount Path: /u01/oracle/user_projects/domains If you deployed OIG using WDT, the output will look similar to the following:\nMount Path: /u01/oracle/user_projects   Find the Domain Home and Log Home details   Run the following command to get the Domain Home and Log Home of your domain:\n$ kubectl describe domains \u0026lt;domain_uid\u0026gt; -n \u0026lt;domain_namespace\u0026gt; | egrep \u0026#34;Domain Home: | Log Home:\u0026#34; ``\nFor example:\n$ kubectl describe domains governancedomain -n oigns | egrep \u0026#34;Domain Home: | Log Home:\u0026#34; ``\nThe output will look similar to the following:\nDomain Home: /u01/oracle/user_projects/domains/governancedomain Http Access Log In Log Home: true Log Home: /u01/oracle/user_projects/domains/logs/governancedomain   Find the persistentVolumeClaim details   Run the following command to get the OIG domain persistence volume details:\n$ kubectl get pv -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl get pv -n oigns The output will look similar to the following:\nNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE governancedomain-domain-pv 10Gi RWX Retain Bound oigns/governancedomain-domain-pvc governancedomain-oim-storage-class 28h Make note of the CLAIM value, for example in this case governancedomain-domain-pvc.\n  Create the Configmap   Copy the elk.crt file to the $WORKDIR/kubernetes/elasticsearch-and-kibana directory.\n  Navigate to the $WORKDIR/kubernetes/elasticsearch-and-kibana directory and run the following:\nkubectl create configmap elk-cert --from-file=elk.crt -n \u0026lt;namespace\u0026gt; For example:\nkubectl create configmap elk-cert --from-file=elk.crt -n oigns The output will look similar to the following:\nconfigmap/elk-cert created   Create a logstash_cm.yaml file in the $WORKDIR/kubernetes/elasticsearch-and-kibana directory as follows:\napiVersion: v1 kind: ConfigMap metadata: name: oig-logstash-configmap namespace: \u0026lt;ELKNS\u0026gt; data: logstash.yml: | #http.host: \u0026quot;0.0.0.0\u0026quot; logstash-config.conf: | input { file { path =\u0026gt; \u0026quot;\u0026lt;Log Home\u0026gt;/servers/AdminServer/logs/AdminServer*.log*\u0026quot; tags =\u0026gt; \u0026quot;Adminserver_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;\u0026lt;Log Home\u0026gt;/**/logs/soa_server*.log*\u0026quot; tags =\u0026gt; \u0026quot;soaserver_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;\u0026lt;Log Home\u0026gt;/**/logs/oim_server*.log*\u0026quot; tags =\u0026gt; \u0026quot;Oimserver_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;\u0026lt;Domain Home\u0026gt;/servers/AdminServer/logs/AdminServer-diagnostic.log*\u0026quot; tags =\u0026gt; \u0026quot;Adminserver_diagnostic\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;\u0026lt;Domain Home\u0026gt;/servers/**/logs/soa_server*-diagnostic.log*\u0026quot; tags =\u0026gt; \u0026quot;Soa_diagnostic\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;\u0026lt;Domain Home\u0026gt;/servers/**/logs/oim_server*-diagnostic.log*\u0026quot; tags =\u0026gt; \u0026quot;Oimserver_diagnostic\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;\u0026lt;Domain Home\u0026gt;/servers/**/logs/access*.log*\u0026quot; tags =\u0026gt; \u0026quot;Access_logs\u0026quot; start_position =\u0026gt; beginning } } filter { grok { match =\u0026gt; [ \u0026quot;message\u0026quot;, \u0026quot;\u0026lt;%{DATA:log_timestamp}\u0026gt; \u0026lt;%{WORD:log_level}\u0026gt; \u0026lt;%{WORD:thread}\u0026gt; \u0026lt;%{HOSTNAME:hostname}\u0026gt; \u0026lt;%{HOSTNAME:servername}\u0026gt; \u0026lt;%{DATA:timer}\u0026gt; \u0026lt;\u0026lt;%{DATA:kernel}\u0026gt;\u0026gt; \u0026lt;\u0026gt; \u0026lt;%{DATA:uuid}\u0026gt; \u0026lt;%{NUMBER:timestamp}\u0026gt; \u0026lt;%{DATA:misc} \u0026gt; \u0026lt;%{DATA:log_number}\u0026gt; \u0026lt;%{DATA:log_message}\u0026gt;\u0026quot; ] } if \u0026quot;_grokparsefailure\u0026quot; in [tags] { mutate { remove_tag =\u0026gt; [ \u0026quot;_grokparsefailure\u0026quot; ] } } } output { elasticsearch { hosts =\u0026gt; [\u0026quot;\u0026lt;ELK_HOSTS\u0026gt;\u0026quot;] cacert =\u0026gt; '/usr/share/logstash/config/certs/elk.crt' index =\u0026gt; \u0026quot;oiglogs-000001\u0026quot; ssl =\u0026gt; \u0026lt;ELK_SSL\u0026gt; ssl_certificate_verification =\u0026gt; false user =\u0026gt; \u0026quot;\u0026lt;ELK_USER\u0026gt;\u0026quot; password =\u0026gt; \u0026quot;${ELASTICSEARCH_PASSWORD}\u0026quot; api_key =\u0026gt; \u0026quot;${ELASTICSEARCH_PASSWORD}\u0026quot; } } Change the values in the above file as follows:\n Change the \u0026lt;ELKNS\u0026gt;, \u0026lt;ELK_HOSTS\u0026gt;, \u0026lt;ELK_SSL\u0026gt;, and \u0026lt;ELK_USER\u0026gt; to match the values for your environment. Change \u0026lt;Log Home\u0026gt; and \u0026lt;Domain Home\u0026gt; to match the Log Home and Domain Home returned earlier. If your domainUID is anything other than governancedomain, change each instance of governancedomain to your domainUID. If using API KEY for your ELK authentication, delete the user and password lines. If using a password for ELK authentication, delete the api_key line. If no authentication is used for ELK, delete the user, password, and api_key lines.  For example:\napiVersion: v1 kind: ConfigMap metadata: name: oig-logstash-configmap namespace: oigns data: logstash.yml: | #http.host: \u0026quot;0.0.0.0\u0026quot; logstash-config.conf: | input { file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/logs/governancedomain/servers/AdminServer/logs/AdminServer*.log*\u0026quot; tags =\u0026gt; \u0026quot;Adminserver_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/logs/governancedomain/**/logs/soa_server*.log*\u0026quot; tags =\u0026gt; \u0026quot;soaserver_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/logs/governancedomain/**/logs/oim_server*.log*\u0026quot; tags =\u0026gt; \u0026quot;Oimserver_log\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/governancedomain/servers/AdminServer/logs/AdminServer-diagnostic.log*\u0026quot; tags =\u0026gt; \u0026quot;Adminserver_diagnostic\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/governancedomain/servers/**/logs/soa_server*-diagnostic.log*\u0026quot; tags =\u0026gt; \u0026quot;Soa_diagnostic\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/governancedomain/servers/**/logs/oim_server*-diagnostic.log*\u0026quot; tags =\u0026gt; \u0026quot;Oimserver_diagnostic\u0026quot; start_position =\u0026gt; beginning } file { path =\u0026gt; \u0026quot;/u01/oracle/user_projects/domains/governancedomain/servers/**/logs/access*.log*\u0026quot; tags =\u0026gt; \u0026quot;Access_logs\u0026quot; start_position =\u0026gt; beginning } } filter { grok { match =\u0026gt; [ \u0026quot;message\u0026quot;, \u0026quot;\u0026lt;%{DATA:log_timestamp}\u0026gt; \u0026lt;%{WORD:log_level}\u0026gt; \u0026lt;%{WORD:thread}\u0026gt; \u0026lt;%{HOSTNAME:hostname}\u0026gt; \u0026lt;%{HOSTNAME:servername}\u0026gt; \u0026lt;%{DATA:timer}\u0026gt; \u0026lt;\u0026lt;%{DATA:kernel}\u0026gt;\u0026gt; \u0026lt;\u0026gt; \u0026lt;%{DATA:uuid}\u0026gt; \u0026lt;%{NUMBER:timestamp}\u0026gt; \u0026lt;%{DATA:misc} \u0026gt; \u0026lt;%{DATA:log_number}\u0026gt; \u0026lt;%{DATA:log_message}\u0026gt;\u0026quot; ] } if \u0026quot;_grokparsefailure\u0026quot; in [tags] { mutate { remove_tag =\u0026gt; [ \u0026quot;_grokparsefailure\u0026quot; ] } } } output { elasticsearch { hosts =\u0026gt; [\u0026quot;https://elasticsearch.example.com:9200\u0026quot;] cacert =\u0026gt; '/usr/share/logstash/config/certs/elk.crt' index =\u0026gt; \u0026quot;oiglogs-000001\u0026quot; ssl =\u0026gt; true ssl_certificate_verification =\u0026gt; false user =\u0026gt; \u0026quot;logstash_internal\u0026quot; password =\u0026gt; \u0026quot;${ELASTICSEARCH_PASSWORD}\u0026quot; } }   Run the following command to create the configmap:\n$ kubectl apply -f logstash_cm.yaml The output will look similar to the following:\nconfigmap/oig-logstash-configmap created   Deploy the logstash pod   Navigate to the $WORKDIR/kubernetes/elasticsearch-and-kibana directory and create a logstash.yaml file as follows:\napiVersion: apps/v1 kind: Deployment metadata: name: oig-logstash namespace: \u0026lt;ELKNS\u0026gt; spec: selector: matchLabels: k8s-app: logstash template: # create pods using pod definition in this template metadata: labels: k8s-app: logstash spec: imagePullSecrets: - name: dockercred containers: - command: - logstash image: logstash:\u0026lt;ELK_VER\u0026gt; imagePullPolicy: IfNotPresent name: oig-logstash env: - name: ELASTICSEARCH_PASSWORD valueFrom: secretKeyRef: name: elasticsearch-pw-elastic key: password resources: ports: - containerPort: 5044 name: logstash volumeMounts: - mountPath: \u0026lt;mountPath\u0026gt; name: weblogic-domain-storage-volume - name: shared-logs mountPath: /shared-logs - mountPath: /usr/share/logstash/pipeline/ name: oig-logstash-pipeline - mountPath: /usr/share/logstash/config/logstash.yml subPath: logstash.yml name: config-volume - mountPath: /usr/share/logstash/config/certs name: elk-cert volumes: - configMap: defaultMode: 420 items: - key: elk.crt path: elk.crt name: elk-cert name: elk-cert - configMap: defaultMode: 420 items: - key: logstash-config.conf path: logstash-config.conf name: oig-logstash-configmap name: oig-logstash-pipeline - configMap: defaultMode: 420 items: - key: logstash.yml path: logstash.yml name: oig-logstash-configmap name: config-volume - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: governancedomain-domain-pvc - name: shared-logs emptyDir: {}  Change the \u0026lt;ELKNS\u0026gt;, and \u0026lt;ELK_VER\u0026gt; to match the values for your environment Change \u0026lt;mountPath\u0026gt; to match the mountPath returned earlier Change the claimName value to match the claimName returned earlier If your Kubernetes environment does not allow access to the internet to pull the logstash image, you must load the logstash image in your own container registry and change image: logstash:\u0026lt;ELK_VER\u0026gt; to the location of the image in your container registry e.g: container-registry.example.com/logstash:8.3.1  For example:\napiVersion: apps/v1 kind: Deployment metadata: name: oig-logstash namespace: oigns spec: selector: matchLabels: k8s-app: logstash template: # create pods using pod definition in this template metadata: labels: k8s-app: logstash spec: imagePullSecrets: - name: dockercred containers: - command: - logstash image: logstash:8.3.1 imagePullPolicy: IfNotPresent name: oig-logstash env: - name: ELASTICSEARCH_PASSWORD valueFrom: secretKeyRef: name: elasticsearch-pw-elastic key: password resources: ports: - containerPort: 5044 name: logstash volumeMounts: - mountPath: /u01/oracle/user_projects name: weblogic-domain-storage-volume - name: shared-logs mountPath: /shared-logs - mountPath: /usr/share/logstash/pipeline/ name: oig-logstash-pipeline - mountPath: /usr/share/logstash/config/logstash.yml subPath: logstash.yml name: config-volume - mountPath: /usr/share/logstash/config/certs name: elk-cert volumes: - configMap: defaultMode: 420 items: - key: elk.crt path: elk.crt name: elk-cert name: elk-cert - configMap: defaultMode: 420 items: - key: logstash-config.conf path: logstash-config.conf name: oig-logstash-configmap name: oig-logstash-pipeline - configMap: defaultMode: 420 items: - key: logstash.yml path: logstash.yml name: oig-logstash-configmap name: config-volume - name: weblogic-domain-storage-volume persistentVolumeClaim: claimName: governancedomain-domain-pvc - name: shared-logs emptyDir: {}   Deploy the logstash pod by executing the following command:\n$ kubectl create -f $WORKDIR/kubernetes/elasticsearch-and-kibana/logstash.yaml The output will look similar to the following:\ndeployment.apps/oig-logstash created   Run the following command to check the logstash pod is created correctly:\n$ kubectl get pods -n \u0026lt;namespace\u0026gt; For example:\n$ kubectl get pods -n oigns The output should look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 90m governancedomain-oim-server1 1/1 Running 0 88m governancedomain-soa-server1 1/1 Running 0 88m oig-logstash-77fbbc66f8-lsvcw 1/1 Running 0 3m25s Note: Wait a couple of minutes to make sure the pod has not had any failures or restarts. If the pod fails you can view the pod log using:\n$ kubectl logs -f oig-logstash-\u0026lt;pod\u0026gt; -n oigns Most errors occur due to misconfiguration of the logstash_cm.yaml or logstash.yaml. This is usually because of an incorrect value set, or the certificate was not pasted with the correct indentation.\nIf the pod has errors, delete the pod and configmap as follows:\n$ kubectl delete -f $WORKDIR/kubernetes/elasticsearch-and-kibana/logstash.yaml $ kubectl delete -f $WORKDIR/kubernetes/elasticsearch-and-kibana/logstash_cm.yaml Once you have resolved the issue in the yaml files, run the commands outlined earlier to recreate the configmap and logstash pod.\n  Verify and access the Kibana console To access the Kibana console you will need the Kibana URL as per Installing Elasticsearch (ELK) Stack and Kibana.\nFor Kibana 7.7.x and below:\n  Access the Kibana console with http://\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;/app/kibana and login with your username and password.\n  From the Navigation menu, navigate to Management \u0026gt; Kibana \u0026gt; Index Patterns.\n  In the Create Index Pattern page enter oiglogs* for the Index pattern and click Next Step.\n  In the Configure settings page, from the Time Filter field name drop down menu select @timestamp and click Create index pattern.\n  Once the index pattern is created click on Discover in the navigation menu to view the OIG logs.\n  For Kibana version 7.8.X and above:\n  Access the Kibana console with http://\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;/app/kibana and login with your username and password.\n  From the Navigation menu, navigate to Management \u0026gt; Stack Management.\n  Click Data Views in the Kibana section.\n  Click Create Data View and enter the following information:\n Name: oiglogs* Timestamp: @timestamp    Click Create Data View.\n  From the Navigation menu, click Discover to view the log file entries.\n  From the drop down menu, select oiglogs* to view the log file entries.\n  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/manage-oam-domains/monitoring-oam-domains/",
	"title": "d. Monitoring an OAM domain",
	"tags": [],
	"description": "Describes the steps for Monitoring the OAM domain.",
	"content": "After the OAM domain is set up you can monitor the OAM instance using Prometheus and Grafana. See Monitoring a domain.\nThe WebLogic Monitoring Exporter uses the WLS RESTful Management API to scrape runtime information and then exports Prometheus-compatible metrics. It is deployed as a web application in a WebLogic Server (WLS) instance, version 12.2.1 or later, typically, in the instance from which you want to get metrics.\nThere are two ways to setup monitoring and you should choose one method or the other:\n Setup automatically using setup-monitoring.sh Setup using manual configuration  Setup automatically using setup-monitoring.sh The $WORKDIR/kubernetes/monitoring-service/setup-monitoring.sh sets up the monitoring for the OAM domain. It installs Prometheus, Grafana, WebLogic Monitoring Exporter and deploys the web applications to the OAM domain. It also deploys the WebLogic Server Grafana dashboard.\nFor usage details execute ./setup-monitoring.sh -h.\n  Edit the $WORKDIR/kubernetes/monitoring-service/monitoring-inputs.yaml and change the domainUID, domainNamespace, and weblogicCredentialsSecretName to correspond to your deployment. Also change wlsMonitoringExporterTooamCluster, wlsMonitoringExporterTopolicyCluster, exposeMonitoringNodePort to true. For example:\nversion: create-accessdomain-monitoring-inputs-v1 # Unique ID identifying your domain. # This ID must not contain an underscope (\u0026quot;_\u0026quot;), and must be lowercase and unique across all domains in a Kubernetes cluster. domainUID: accessdomain # Name of the domain namespace domainNamespace: oamns # Boolean value indicating whether to install kube-prometheus-stack setupKubePrometheusStack: true # Additional parameters for helm install kube-prometheus-stack # Refer https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml for additional parameters # Sample : # additionalParamForKubePrometheusStack: --set nodeExporter.enabled=false --set prometheusOperator.tls.enabled=false --set prometheusOperator.admissionWebhooks.enabled=false additionalParamForKubePrometheusStack: # Name of the monitoring namespace monitoringNamespace: monitoring # Name of the Admin Server adminServerName: AdminServer # # Port number for admin server adminServerPort: 7001 # Cluster name oamClusterName: oam_cluster # Port number for managed server oamManagedServerPort: 14100 # WebLogic Monitoring Exporter to Cluster wlsMonitoringExporterTooamCluster: true # Cluster name policyClusterName: policy_cluster # Port number for managed server policyManagedServerPort: 15100 # WebLogic Monitoring Exporter to Cluster wlsMonitoringExporterTopolicyCluster: true # Boolean to indicate if the adminNodePort will be exposed exposeMonitoringNodePort: true # NodePort to expose Prometheus prometheusNodePort: 32101 # NodePort to expose Grafana grafanaNodePort: 32100 # NodePort to expose Alertmanager alertmanagerNodePort: 32102 # Name of the Kubernetes secret for the Admin Server's username and password weblogicCredentialsSecretName: accessdomain-credentials Note: For WDT domains, weblogicCredentialsSecretName should be set to accessdomain-weblogic-credentials.\nNote: If your cluster does not have access to the internet to pull external images, such as grafana or prometheus, you must load the images in a local container registry. You must then set additionalParamForKubePrometheusStack to set the location of the image in your local container registry, for example:\n# Additional parameters for helm install kube-prometheus-stack # Refer https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml for additional parameters # Sample : # additionalParamForKubePrometheusStack: --set nodeExporter.enabled=false --set prometheusOperator.tls.enabled=false --set prometheusOperator.admissionWebhooks.enabled=false additionalParamForKubePrometheusStack: --set grafana.image.registry=\u0026quot;container-registry.example.com\u0026quot; --set grafana.image.repository=\u0026quot;grafana/grafana\u0026quot; --set grafana.image.tag=8.3.4   Run the following command to setup monitoring.\n$ cd $WORKDIR/kubernetes/monitoring-service $ ./setup-monitoring.sh -i monitoring-inputs.yaml The output should be similar to the following:\nMonitoring setup in monitoring in progress node/worker-node1 not labeled node/worker-node2 not labeled node/master-node not labeled Setup prometheus-community/kube-prometheus-stack started \u0026quot;prometheus-community\u0026quot; has been added to your repositories Hang tight while we grab the latest from your chart repositories... ...Successfully got an update from the \u0026quot;stable\u0026quot; chart repository ...Successfully got an update from the \u0026quot;prometheus\u0026quot; chart repository ...Successfully got an update from the \u0026quot;prometheus-community\u0026quot; chart repository ...Successfully got an update from the \u0026quot;appscode\u0026quot; chart repository Update Complete. ⎈ Happy Helming!⎈ Setup prometheus-community/kube-prometheus-stack in progress W0320 \u0026lt;DATE\u0026gt; 19121 warnings.go:70] policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+ W0320 \u0026lt;DATE\u0026gt; 19121 warnings.go:70] policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+ W0320 \u0026lt;DATE\u0026gt; 19121 warnings.go:70] policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+ .. W0320 \u0026lt;DATE\u0026gt; 19121 warnings.go:70] policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+ NAME: monitoring LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: monitoring STATUS: deployed REVISION: 1 NOTES: kube-prometheus-stack has been installed. Check its status by running: kubectl --namespace monitoring get pods -l \u0026quot;release=monitoring\u0026quot; Visit https://github.com/prometheus-operator/kube-prometheus for instructions on how to create \u0026amp; configure Alertmanager and Prometheus instances using the Operator. Setup prometheus-community/kube-prometheus-stack completed Deploy WebLogic Monitoring Exporter started Deploying WebLogic Monitoring Exporter with domainNamespace[oamns], domainUID[accessdomain], adminServerPodName[accessdomain-adminserver] % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 655 100 655 0 0 1564 0 --:--:-- --:--:-- --:--:-- 1566 100 2196k 100 2196k 0 0 2025k 0 0:00:01 0:00:01 --:--:-- 5951k created $WORKDIR/kubernetes/monitoring-service/scripts/wls-exporter-deploy dir created /tmp/ci-EHhB7bP847 /tmp/ci-EHhB7bP847 $WORKDIR/kubernetes/monitoring-service in temp dir adding: WEB-INF/weblogic.xml (deflated 61%) adding: config.yml (deflated 60%) $WORKDIR/kubernetes/monitoring-service created /tmp/ci-e7wPrlLlud 14:26 /tmp/ci-e7wPrlLlud $WORKDIR/kubernetes/monitoring-service in temp dir adding: WEB-INF/weblogic.xml (deflated 61%) adding: config.yml (deflated 60%) $WORKDIR/kubernetes/monitoring-service created /tmp/ci-U38XXs6d06 /tmp/ci-U38XXs6d06 $WORKDIR/kubernetes/monitoring-service in temp dir adding: WEB-INF/weblogic.xml (deflated 61%) adding: config.yml (deflated 60%) $WORKDIR/kubernetes/monitoring-service Initializing WebLogic Scripting Tool (WLST) ... Welcome to WebLogic Server Administration Scripting Shell Type help() for help on available commands Connecting to t3://accessdomain-adminserver:7001 with userid weblogic ... Successfully connected to Admin Server \u0026quot;AdminServer\u0026quot; that belongs to domain \u0026quot;accessdomain\u0026quot;. Warning: An insecure protocol was used to connect to the server. To ensure on-the-wire security, the SSL port or Admin port should be used instead. Deploying ......... Deploying application from /u01/oracle/wls-exporter-deploy/wls-exporter-adminserver.war to targets AdminServer (upload=true) ... \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating deploy operation for application, wls-exporter-adminserver [archive: /u01/oracle/wls-exporter-deploy/wls-exporter-adminserver.war], to AdminServer .\u0026gt; .Completed the deployment of Application with status completed Current Status of your Deployment: Deployment command type: deploy Deployment State : completed Deployment Message : no message Starting application wls-exporter-adminserver. \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating start operation for application, wls-exporter-adminserver [archive: null], to AdminServer .\u0026gt; Completed the start of Application with status completed Current Status of your Deployment: Deployment command type: start Deployment State : completed 14:27 Deployment command type: start Deployment State : completed Deployment Message : no message Deploying ......... Deploying application from /u01/oracle/wls-exporter-deploy/wls-exporter-oam.war to targets oam_cluster (upload=true) ... \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating deploy operation for application, wls-exporter-oam [archive: /u01/oracle/wls-exporter-deploy/wls-exporter-oam.war], to oam_cluster .\u0026gt; .Completed the deployment of Application with status completed Current Status of your Deployment: Deployment command type: deploy Deployment State : completed Deployment Message : no message Starting application wls-exporter-oam. \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating start operation for application, wls-exporter-oam [archive: null], to oam_cluster .\u0026gt; .Completed the start of Application with status completed Current Status of your Deployment: Deployment command type: start Deployment State : completed Deployment Message : no message Deploying ......... Deploying application from /u01/oracle/wls-exporter-deploy/wls-exporter-policy.war to targets policy_cluster (upload=true) ... \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating deploy operation for application, wls-exporter-policy [archive: /u01/oracle/wls-exporter-deploy/wls-exporter-policy.war], to policy_cluster .\u0026gt; .Completed the deployment of Application with status completed Current Status of your Deployment: Deployment command type: deploy Deployment State : completed Deployment Message : no message Starting application wls-exporter-policy. \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating start operation for application, wls-exporter-policy [archive: null], to policy_cluster .\u0026gt; .Completed the start of Application with status completed Current Status of your Deployment: Deployment command type: start Deployment State : completed Deployment Message : no message Disconnected from weblogic server: AdminServer Exiting WebLogic Scripting Tool. \u0026lt;DATE\u0026gt; \u0026lt;Warning\u0026gt; \u0026lt;JNDI\u0026gt; \u0026lt;BEA-050001\u0026gt; \u0026lt;WLContext.close() was called in a different thread than the one in which it was created.\u0026gt; 14:27 Deploy WebLogic Monitoring Exporter completed secret/basic-auth created servicemonitor.monitoring.coreos.com/wls-exporter created Deploying WebLogic Server Grafana Dashboard.... {\u0026quot;id\u0026quot;:25,\u0026quot;slug\u0026quot;:\u0026quot;weblogic-server-dashboard\u0026quot;,\u0026quot;status\u0026quot;:\u0026quot;success\u0026quot;,\u0026quot;uid\u0026quot;:\u0026quot;5yUwzbZWz\u0026quot;,\u0026quot;url\u0026quot;:\u0026quot;/d/5yUwzbZWz/weblogic-server-dashboard\u0026quot;,\u0026quot;version\u0026quot;:1} Deployed WebLogic Server Grafana Dashboard successfully Grafana is available at NodePort: 32100 Prometheus is available at NodePort: 32101 Altermanager is available at NodePort: 32102 ==============================================================   Prometheus service discovery After the ServiceMonitor is deployed, the wls-exporter should be discovered by Prometheus and be able to collect metrics.\n  Access the following URL to view Prometheus service discovery: http://${MASTERNODE-HOSTNAME}:32101/service-discovery\n  Click on serviceMonitor/oamns/wls-exporter/0 and then show more. Verify all the targets are mentioned.\n  Note : It may take several minutes for serviceMonitor/oamns/wls-exporter/0 to appear, so refresh the page until it does.\nGrafana dashboard   Access the Grafana dashboard with the following URL: http://${MASTERNODE-HOSTNAME}:32100 and login with admin/admin. Change your password when prompted.\n  In the Dashboards panel, click on WebLogic Server Dashboard. The dashboard for your OAM domain should be displayed. If it is not displayed, click the Search icon in the left hand menu and search for WebLogic Server Dashboard.\n  Cleanup To uninstall the Prometheus, Grafana, WebLogic Monitoring Exporter and the deployments, you can run the $WORKDIR/monitoring-service/kubernetes/delete-monitoring.sh script. For usage details execute ./delete-monitoring.sh -h.\n  To uninstall run the following command:\nFor example:\n$ cd $WORKDIR/kubernetes/monitoring-service $ ./delete-monitoring.sh -i monitoring-inputs.yaml $ kubectl delete namespace monitoring   Setup using manual configuration Install Prometheus, Grafana and WebLogic Monitoring Exporter manually. Create the web applications and deploy to the OAM domain.\nDeploy the Prometheus operator   Kube-Prometheus requires all nodes to be labelled with kubernetes.io/os=linux. To check if your nodes are labelled, run the following:\n$ kubectl get nodes --show-labels If the nodes are labelled the output will look similar to the following:\nNAME STATUS ROLES AGE VERSION LABELS worker-node1 Ready \u0026lt;none\u0026gt; 42d v1.20.10 beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=worker-node1,kubernetes.io/os=linux worker-node2 Ready \u0026lt;none\u0026gt; 42d v1.20.10 beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=worker-node2,kubernetes.io/os=linux master-node Ready master 42d v1.20.10 beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=master-node,kubernetes.io/os=linux,node-role.kubernetes.io/master= If the nodes are not labelled, run the following command:\n$ kubectl label nodes --all kubernetes.io/os=linux   Clone Prometheus by running the following commands:\n$ cd $WORKDIR/kubernetes/monitoring-service $ git clone https://github.com/coreos/kube-prometheus.git -b v0.7.0 Note: Please refer the compatibility matrix of Kube Prometheus. Please download the release of the repository according to the Kubernetes version of your cluster.\n  If your cluster does not have access to the internet to pull external images, such as grafana, you must load the images in a local container registry.\nFor grafana, edit the $WORKDIR/kubernetes/monitoring-service/kube-prometheus/manifests/grafana-deployment.yaml and change image: grafana/grafana:7.3.4 to your local container registry image location, for example image: container-registry.example.com/grafana/grafana:8.3.4.\nFor any other images check the $WORKDIR/kubernetes/monitoring-service/kube-prometheus/manifests/*deployment.yaml files.\n  Run the following command to create the namespace and custom resource definitions:\n$ cd $WORKDIR/kubernetes/monitoring-service/kube-prometheus $ kubectl create -f manifests/setup The output will look similar to the following:\nnamespace/monitoring created customresourcedefinition.apiextensions.k8s.io/alertmanagerconfigs.monitoring.coreos.com created customresourcedefinition.apiextensions.k8s.io/alertmanagers.monitoring.coreos.com created customresourcedefinition.apiextensions.k8s.io/podmonitors.monitoring.coreos.com created customresourcedefinition.apiextensions.k8s.io/probes.monitoring.coreos.com created customresourcedefinition.apiextensions.k8s.io/prometheuses.monitoring.coreos.com created customresourcedefinition.apiextensions.k8s.io/prometheusrules.monitoring.coreos.com created customresourcedefinition.apiextensions.k8s.io/servicemonitors.monitoring.coreos.com created customresourcedefinition.apiextensions.k8s.io/thanosrulers.monitoring.coreos.com created clusterrole.rbac.authorization.k8s.io/prometheus-operator created clusterrolebinding.rbac.authorization.k8s.io/prometheus-operator created deployment.apps/prometheus-operator created service/prometheus-operator created serviceaccount/prometheus-operator created   Run the following command to created the rest of the resources:\n$ kubectl create -f manifests/ The output will look similar to the following:\nalertmanager.monitoring.coreos.com/main created networkpolicy.networking.k8s.io/alertmanager-main created poddisruptionbudget.policy/alertmanager-main created prometheusrule.monitoring.coreos.com/alertmanager-main-rules created secret/alertmanager-main created service/alertmanager-main created serviceaccount/alertmanager-main created servicemonitor.monitoring.coreos.com/alertmanager-main created clusterrole.rbac.authorization.k8s.io/blackbox-exporter created clusterrolebinding.rbac.authorization.k8s.io/blackbox-exporter created configmap/blackbox-exporter-configuration created deployment.apps/blackbox-exporter created networkpolicy.networking.k8s.io/blackbox-exporter created service/blackbox-exporter created serviceaccount/blackbox-exporter created servicemonitor.monitoring.coreos.com/blackbox-exporter created secret/grafana-config created secret/grafana-datasources created configmap/grafana-dashboard-alertmanager-overview created configmap/grafana-dashboard-apiserver created configmap/grafana-dashboard-cluster-total created configmap/grafana-dashboard-controller-manager created configmap/grafana-dashboard-grafana-overview created configmap/grafana-dashboard-k8s-resources-cluster created configmap/grafana-dashboard-k8s-resources-namespace created configmap/grafana-dashboard-k8s-resources-node created configmap/grafana-dashboard-k8s-resources-pod created configmap/grafana-dashboard-k8s-resources-workload created configmap/grafana-dashboard-k8s-resources-workloads-namespace created configmap/grafana-dashboard-kubelet created configmap/grafana-dashboard-namespace-by-pod created configmap/grafana-dashboard-namespace-by-workload created configmap/grafana-dashboard-node-cluster-rsrc-use created configmap/grafana-dashboard-node-rsrc-use created configmap/grafana-dashboard-nodes-darwin created configmap/grafana-dashboard-nodes created configmap/grafana-dashboard-persistentvolumesusage created configmap/grafana-dashboard-pod-total created configmap/grafana-dashboard-prometheus-remote-write created configmap/grafana-dashboard-prometheus created configmap/grafana-dashboard-proxy created configmap/grafana-dashboard-scheduler created configmap/grafana-dashboard-workload-total created configmap/grafana-dashboards created deployment.apps/grafana created networkpolicy.networking.k8s.io/grafana created prometheusrule.monitoring.coreos.com/grafana-rules created service/grafana created serviceaccount/grafana created servicemonitor.monitoring.coreos.com/grafana created prometheusrule.monitoring.coreos.com/kube-prometheus-rules created clusterrole.rbac.authorization.k8s.io/kube-state-metrics created clusterrolebinding.rbac.authorization.k8s.io/kube-state-metrics created deployment.apps/kube-state-metrics created networkpolicy.networking.k8s.io/kube-state-metrics created prometheusrule.monitoring.coreos.com/kube-state-metrics-rules created service/kube-state-metrics created serviceaccount/kube-state-metrics created servicemonitor.monitoring.coreos.com/kube-state-metrics created prometheusrule.monitoring.coreos.com/kubernetes-monitoring-rules created servicemonitor.monitoring.coreos.com/kube-apiserver created servicemonitor.monitoring.coreos.com/coredns created servicemonitor.monitoring.coreos.com/kube-controller-manager created servicemonitor.monitoring.coreos.com/kube-scheduler created servicemonitor.monitoring.coreos.com/kubelet created clusterrole.rbac.authorization.k8s.io/node-exporter created clusterrolebinding.rbac.authorization.k8s.io/node-exporter created daemonset.apps/node-exporter created networkpolicy.networking.k8s.io/node-exporter created prometheusrule.monitoring.coreos.com/node-exporter-rules created service/node-exporter created serviceaccount/node-exporter created servicemonitor.monitoring.coreos.com/node-exporter created clusterrole.rbac.authorization.k8s.io/prometheus-k8s created clusterrolebinding.rbac.authorization.k8s.io/prometheus-k8s created networkpolicy.networking.k8s.io/prometheus-k8s created poddisruptionbudget.policy/prometheus-k8s created prometheus.monitoring.coreos.com/k8s created prometheusrule.monitoring.coreos.com/prometheus-k8s-prometheus-rules created rolebinding.rbac.authorization.k8s.io/prometheus-k8s-config created rolebinding.rbac.authorization.k8s.io/prometheus-k8s created rolebinding.rbac.authorization.k8s.io/prometheus-k8s created rolebinding.rbac.authorization.k8s.io/prometheus-k8s created role.rbac.authorization.k8s.io/prometheus-k8s-config created role.rbac.authorization.k8s.io/prometheus-k8s created role.rbac.authorization.k8s.io/prometheus-k8s created role.rbac.authorization.k8s.io/prometheus-k8s created service/prometheus-k8s created serviceaccount/prometheus-k8s created servicemonitor.monitoring.coreos.com/prometheus-k8s created apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created clusterrole.rbac.authorization.k8s.io/prometheus-adapter created clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created clusterrolebinding.rbac.authorization.k8s.io/prometheus-adapter created clusterrolebinding.rbac.authorization.k8s.io/resource-metrics:system:auth-delegator created clusterrole.rbac.authorization.k8s.io/resource-metrics-server-resources created configmap/adapter-config created deployment.apps/prometheus-adapter created networkpolicy.networking.k8s.io/prometheus-adapter created poddisruptionbudget.policy/prometheus-adapter created rolebinding.rbac.authorization.k8s.io/resource-metrics-auth-reader created service/prometheus-adapter created serviceaccount/prometheus-adapter created servicemonitor.monitoring.coreos.com/prometheus-adapter created clusterrole.rbac.authorization.k8s.io/prometheus-operator created clusterrolebinding.rbac.authorization.k8s.io/prometheus-operator created deployment.apps/prometheus-operator created networkpolicy.networking.k8s.io/prometheus-operator created prometheusrule.monitoring.coreos.com/prometheus-operator-rules created service/prometheus-operator created serviceaccount/prometheus-operator created servicemonitor.monitoring.coreos.com/prometheus-operator created   Provide external access for Grafana, Prometheus, and Alertmanager, by running the following commands:\n$ kubectl patch svc grafana -n monitoring --type=json -p \u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/type\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;NodePort\u0026#34; },{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/ports/0/nodePort\u0026#34;, \u0026#34;value\u0026#34;: 32100 }]\u0026#39; $ kubectl patch svc prometheus-k8s -n monitoring --type=json -p \u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/type\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;NodePort\u0026#34; },{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/ports/0/nodePort\u0026#34;, \u0026#34;value\u0026#34;: 32101 }]\u0026#39; $ kubectl patch svc alertmanager-main -n monitoring --type=json -p \u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/type\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;NodePort\u0026#34; },{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/ports/0/nodePort\u0026#34;, \u0026#34;value\u0026#34;: 32102 }]\u0026#39; Note: This assigns port 32100 to Grafana, 32101 to Prometheus, and 32102 to Alertmanager.\nThe output will look similar to the following:\nservice/grafana patched service/prometheus-k8s patched service/alertmanager-main patched   Verify that the Prometheus, Grafana, and Alertmanager pods are running in the monitoring namespace and the respective services have the exports configured correctly:\n$ kubectl get pods,services -o wide -n monitoring The output should look similar to the following:\nNAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod/alertmanager-main-0 2/2 Running 0 67s 10.244.1.7 worker-node1 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/alertmanager-main-1 2/2 Running 0 67s 10.244.2.26 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/alertmanager-main-2 2/2 Running 0 67s 10.244.1.8 worker-node1 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/grafana-f8cd57fcf-tmlqt 1/1 Running 0 65s 10.244.2.28 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/kube-state-metrics-587bfd4f97-l8knh 3/3 Running 0 65s 10.244.1.9 worker-node1 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/node-exporter-2ztpd 2/2 Running 0 65s 10.247.95.26 worker-node1 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/node-exporter-92sxb 2/2 Running 0 65s 10.250.40.59 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/node-exporter-d77tl 2/2 Running 0 65s 10.196.54.36 master-node \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/prometheus-adapter-69b8496df6-6gqrz 1/1 Running 0 65s 10.244.2.29 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/prometheus-k8s-0 2/2 Running 1 66s 10.244.2.27 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/prometheus-k8s-1 2/2 Running 1 66s 10.244.1.10 worker-node1 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/prometheus-operator-7649c7454f-9p747 2/2 Running 0 2m 10.244.2.25 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service/alertmanager-main NodePort 10.104.92.62 \u0026lt;none\u0026gt; 9093:32102/TCP 67s alertmanager=main,app=alertmanager service/alertmanager-operated ClusterIP None \u0026lt;none\u0026gt; 9093/TCP,9094/TCP,9094/UDP 67s app=alertmanager service/grafana NodePort 10.100.171.3 \u0026lt;none\u0026gt; 3000:32100/TCP 66s app=grafana service/kube-state-metrics ClusterIP None \u0026lt;none\u0026gt; 8443/TCP,9443/TCP 66s app.kubernetes.io/name=kube-state-metrics service/node-exporter ClusterIP None \u0026lt;none\u0026gt; 9100/TCP 66s app.kubernetes.io/name=node-exporter service/prometheus-adapter ClusterIP 10.109.248.92 \u0026lt;none\u0026gt; 443/TCP 66s name=prometheus-adapter service/prometheus-k8s NodePort 10.98.212.247 \u0026lt;none\u0026gt; 9090:32101/TCP 66s app=prometheus,prometheus=k8s service/prometheus-operated ClusterIP None \u0026lt;none\u0026gt; 9090/TCP 66s app=prometheus service/prometheus-operator ClusterIP None \u0026lt;none\u0026gt; 8443/TCP 2m1s app.kubernetes.io/component=controller,app.kubernetes.io/name=prometheus-operator   Deploy WebLogic Monitoring Exporter   Generate the WebLogic Monitoring Exporter deployment package. The wls-exporter.war package need to be updated and created for each listening port (Administration Server and Managed Servers) in the domain. Set the below environment values and run the script get-wls-exporter.sh to generate the required WAR files at ${WORKDIR}/kubernetes/monitoring-service/scripts/wls-exporter-deploy:\n$ cd $WORKDIR/kubernetes/monitoring-service/scripts $ export adminServerPort=7001 $ export wlsMonitoringExporterTopolicyCluster=true $ export policyManagedServerPort=15100 $ export wlsMonitoringExporterTooamCluster=true $ export oamManagedServerPort=14100 $ sh get-wls-exporter.sh The output will look similar to the following:\n % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 655 100 655 0 0 1107 0 --:--:-- --:--:-- --:--:-- 1108 100 2196k 100 2196k 0 0 1787k 0 0:00:01 0:00:01 --:--:-- 9248k created $WORKDIR/kubernetes/monitoring-service/scripts/wls-exporter-deploy dir domainNamespace is empty, setting to default oamns domainUID is empty, setting to default accessdomain weblogicCredentialsSecretName is empty, setting to default \u0026quot;accessdomain-domain-credentials\u0026quot; adminServerName is empty, setting to default \u0026quot;AdminServer\u0026quot; oamClusterName is empty, setting to default \u0026quot;oam_cluster\u0026quot; policyClusterName is empty, setting to default \u0026quot;policy_cluster\u0026quot; created /tmp/ci-Bu74rCBxwu /tmp/ci-Bu74rCBxwu $WORKDIR/kubernetes/monitoring-service/scripts in temp dir adding: WEB-INF/weblogic.xml (deflated 61%) adding: config.yml (deflated 60%) $WORKDIR/kubernetes/monitoring-service/scripts created /tmp/ci-RQv3rLbLsX /tmp/ci-RQv3rLbLsX $WORKDIR/kubernetes/monitoring-service/scripts in temp dir adding: WEB-INF/weblogic.xml (deflated 61%) adding: config.yml (deflated 60%) $WORKDIR/kubernetes/monitoring-service/scripts created /tmp/ci-DWIYlocP5e /tmp/ci-DWIYlocP5e $WORKDIR/kubernetes/monitoring-service/scripts in temp dir adding: WEB-INF/weblogic.xml (deflated 61%) adding: config.yml (deflated 60%) $WORKDIR/kubernetes/monitoring-service/scripts   Deploy the WebLogic Monitoring Exporter WAR files into the Oracle Access Management domain:\n$ cd $WORKDIR/kubernetes/monitoring-service/scripts $ kubectl cp wls-exporter-deploy \u0026lt;domain_namespace\u0026gt;/\u0026lt;domain_uid\u0026gt;-adminserver:/u01/oracle $ kubectl cp deploy-weblogic-monitoring-exporter.py \u0026lt;domain_namespace\u0026gt;/\u0026lt;domain_uid\u0026gt;-adminserver:/u01/oracle/wls-exporter-deploy $ kubectl exec -it -n \u0026lt;domain_namespace\u0026gt; \u0026lt;domain_uid\u0026gt;-adminserver -- /u01/oracle/oracle_common/common/bin/wlst.sh /u01/oracle/wls-exporter-deploy/deploy-weblogic-monitoring-exporter.py -domainName \u0026lt;domain_uid\u0026gt; -adminServerName AdminServer -adminURL \u0026lt;domain_uid\u0026gt;-adminserver:7001 -username weblogic -password \u0026lt;password\u0026gt; -oamClusterName oam_cluster -wlsMonitoringExporterTooamCluster true -policyClusterName policy_cluster -wlsMonitoringExporterTopolicyCluster true For example:\n$ cd $WORKDIR/kubernetes/monitoring-service/scripts $ kubectl cp wls-exporter-deploy oamns/accessdomain-adminserver:/u01/oracle $ kubectl cp deploy-weblogic-monitoring-exporter.py oamns/accessdomain-adminserver:/u01/oracle/wls-exporter-deploy $ kubectl exec -it -n oamns accessdomain-adminserver -- /u01/oracle/oracle_common/common/bin/wlst.sh /u01/oracle/wls-exporter-deploy/deploy-weblogic-monitoring-exporter.py -domainName accessdomain -adminServerName AdminServer -adminURL accessdomain-adminserver:7001 -username weblogic -password \u0026lt;password\u0026gt; -oamClusterName oam_cluster -wlsMonitoringExporterTooamCluster true -policyClusterName policy_cluster -wlsMonitoringExporterTopolicyCluster true The output will look similar to the following:\nInitializing WebLogic Scripting Tool (WLST) ... Welcome to WebLogic Server Administration Scripting Shell Type help() for help on available commands Connecting to t3://accessdomain-adminserver:7001 with userid weblogic ... Successfully connected to Admin Server \u0026quot;AdminServer\u0026quot; that belongs to domain \u0026quot;accessdomain\u0026quot;. Warning: An insecure protocol was used to connect to the server. To ensure on-the-wire security, the SSL port or Admin port should be used instead. Deploying ......... Deploying application from /u01/oracle/wls-exporter-deploy/wls-exporter-adminserver.war to targets AdminServer (upload=true) ... \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating deploy operation for application, wls-exporter-adminserver [archive: /u01/oracle/wls-exporter-deploy/wls-exporter-adminserver.war], to AdminServer .\u0026gt; ..Completed the deployment of Application with status completed Current Status of your Deployment: Deployment command type: deploy Deployment State : completed Deployment Message : no message Starting application wls-exporter-adminserver. \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating start operation for application, wls-exporter-adminserver [archive: null], to AdminServer .\u0026gt; .Completed the start of Application with status completed Current Status of your Deployment: Deployment command type: start Deployment State : completed Deployment Message : no message Deploying ......... Deploying application from /u01/oracle/wls-exporter-deploy/wls-exporter-oam.war to targets oam_cluster (upload=true) ... \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating deploy operation for application, wls-exporter-oam [archive: /u01/oracle/wls-exporter-deploy/wls-exporter-oam.war], to oam_cluster .\u0026gt; .Completed the deployment of Application with status completed Current Status of your Deployment: Deployment command type: deploy Deployment State : completed Deployment Message : no message Starting application wls-exporter-oam. \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating start operation for application, wls-exporter-oam [archive: null], to oam_cluster .\u0026gt; .Completed the start of Application with status completed Current Status of your Deployment: Deployment command type: start Deployment State : completed Deployment Message : no message Deploying ......... Deploying application from /u01/oracle/wls-exporter-deploy/wls-exporter-policy.war to targets policy_cluster (upload=true) ... \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating deploy operation for application, wls-exporter-policy [archive: /u01/oracle/wls-exporter-deploy/wls-exporter-policy.war], to policy_cluster .\u0026gt; .Completed the deployment of Application with status completed Current Status of your Deployment: Deployment command type: deploy Deployment State : completed Deployment Message : no message Starting application wls-exporter-policy. \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating start operation for application, wls-exporter-policy [archive: null], to policy_cluster .\u0026gt; .Completed the start of Application with status completed Current Status of your Deployment: Deployment command type: start Deployment State : completed Deployment Message : no message Disconnected from weblogic server: AdminServer Exiting WebLogic Scripting Tool. \u0026lt;DATE\u0026gt; \u0026lt;Warning\u0026gt; \u0026lt;JNDI\u0026gt; \u0026lt;BEA-050001\u0026gt; \u0026lt;WLContext.close() was called in a different thread than the one in which it was created.\u0026gt;   Configure Prometheus Operator Prometheus enables you to collect metrics from the WebLogic Monitoring Exporter. The Prometheus Operator identifies the targets using service discovery. To get the WebLogic Monitoring Exporter end point discovered as a target, you must create a service monitor pointing to the service.\nThe exporting of metrics from wls-exporter requires basicAuth, so a Kubernetes Secret is created with the user name and password that are base64 encoded. This Secret is used in the ServiceMonitor deployment. The wls-exporter-ServiceMonitor.yaml has basicAuth with credentials as username: weblogic and password: \u0026lt;password\u0026gt; in base64 encoded.\n  Run the following command to get the base64 encoded version of the weblogic password:\n$ echo -n \u0026#34;\u0026lt;password\u0026gt;\u0026#34; | base64 The output will look similar to the following:\nV2VsY29tZTE=   Update the $WORKDIR/kubernetes/monitoring-service/manifests/wls-exporter-ServiceMonitor.yaml and change the password: value to the value returned above. Also change the namespace: and weblogic.domainName: values to match your OAM namespace and domain name:\napiVersion: v1 kind: Secret metadata: name: basic-auth namespace: oamns data: password: V2VsY29tZTE= user: d2VibG9naWM= type: Opaque --- apiVersion: monitoring.coreos.com/v1 kind: ServiceMonitor metadata: name: wls-exporter namespace: oamns labels: k8s-app: wls-exporter release: monitoring spec: namespaceSelector: matchNames: - oamns selector: matchLabels: weblogic.domainName: accessdomain endpoints: - basicAuth: password: name: basic-auth key: password username: name: basic-auth key: user port: default relabelings: - action: labelmap regex: __meta_kubernetes_service_label_(.+) interval: 10s honorLabels: true path: /wls-exporter/metrics   Update the $WORKDIR/kubernetes/monitoring-service/manifests/prometheus-roleSpecific-domain-namespace.yaml and change the namespace to match your OAM namespace. For example:\napiVersion: rbac.authorization.k8s.io/v1 items: - apiVersion: rbac.authorization.k8s.io/v1 kind: Role metadata: name: prometheus-k8s namespace: oamns rules: - apiGroups: - \u0026quot;\u0026quot; resources: - services - endpoints - pods verbs: - get - list - watch kind: RoleList   Update the $WORKDIR/kubernetes/monitoring-service/manifests/prometheus-roleBinding-domain-namespace.yaml and change the namespace to match your OAM namespace. For example:\napiVersion: rbac.authorization.k8s.io/v1 items: - apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata: name: prometheus-k8s namespace: oamns roleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: prometheus-k8s subjects: - kind: ServiceAccount name: prometheus-k8s namespace: monitoring kind: RoleBindingList   Run the following command to enable Prometheus:\n$ cd $WORKDIR/kubernetes/monitoring-service/manifests $ kubectl apply -f . The output will look similar to the following:\nrolebinding.rbac.authorization.k8s.io/prometheus-k8s created role.rbac.authorization.k8s.io/prometheus-k8s created secret/basic-auth created servicemonitor.monitoring.coreos.com/wls-exporter created   Prometheus Service Discovery After the ServiceMonitor is deployed, the wls-exporter should be discovered by Prometheus and be able to collect metrics.\n  Access the following URL to view Prometheus service discovery: http://${MASTERNODE-HOSTNAME}:32101/service-discovery\n  Click on oamns/wls-exporter/0  and then show more. Verify all the targets are mentioned.\n  Grafana Dashboard   Access the Grafana dashboard with the following URL: http://${MASTERNODE-HOSTNAME}:32100 and login with admin/admin. Change your password when prompted.\n  Import the Grafana dashboard by navigating on the left hand menu to Create \u0026gt; Import. Copy the content from $WORKDIR/kubernetes/monitoring-service/config/weblogic-server-dashboard-import.json and paste. Then click Load and Import. The dashboard should be displayed in the Dashboards panel.\n  Cleanup To clean up a manual installation:\n  Run the following commands:\n$ cd $WORKDIR/kubernetes/monitoring-service/manifests/ $ kubectl delete -f .   Delete the deployments:\n$ cd $WORKDIR/kubernetes/monitoring-service/scripts/ $ kubectl cp undeploy-weblogic-monitoring-exporter.py \u0026lt;domain_namespace\u0026gt;/\u0026lt;domain_uid\u0026gt;-adminserver:/u01/oracle/wls-exporter-deploy $ kubectl exec -it -n \u0026lt;domain_namespace\u0026gt; \u0026lt;domain_uid\u0026gt;-adminserver -- /u01/oracle/oracle_common/common/bin/wlst.sh /u01/oracle/wls-exporter-deploy/undeploy-weblogic-monitoring-exporter.py -domainName \u0026lt;domain_uid\u0026gt; -adminServerName AdminServer -adminURL \u0026lt;domain_uid\u0026gt;-adminserver:7001 -username weblogic -password \u0026lt;password\u0026gt; -oamClusterName oam_cluster -wlsMonitoringExporterTooamCluster true -policyClusterName policy_cluster -wlsMonitoringExporterTopolicyCluster true   Delete Prometheus:\n$ cd $WORKDIR/kubernetes/monitoring-service/kube-prometheus $ kubectl delete -f manifests   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/patch-and-upgrade/upgrade-elk/",
	"title": "d. Upgrade Elasticsearch and Kibana",
	"tags": [],
	"description": "Instructions on how to upgrade Elastic Search and Kibana.",
	"content": "This section shows how to upgrade Elasticsearch and Kibana.\nTo determine if this step is required for the version you are upgrading to, refer to the Release Notes.\nUndeploy Elasticsearch and Kibana From October 22 (22.4.1) onwards, OAM logs should be stored on a centralized Elasticsearch and Kibana stack.\nDeployments prior to October 22 (22.4.1) used local deployments of Elasticsearch and Kibana.\nIf you are upgrading from July 22 (22.3.1) or earlier, to October 22 (22.4.1) or later, you must first undeploy Elasticsearch and Kibana using the steps below:\n  Make sure you have downloaded the latest code repository as per Download the latest code repository\n  Edit the $WORKDIR/kubernetes/elasticsearch-and-kibana/elasticsearch_and_kibana.yaml and change all instances of namespace to correspond to your deployment.\n  Delete the Elasticsearch and Kibana resources using the following command:\n$ kubectl delete -f $WORKDIR/kubernetes/elasticsearch-and-kibana/elasticsearch_and_kibana.yaml   Deploy Elasticsearch and Kibana in centralized stack  Follow Install Elasticsearch stack and Kibana to deploy Elasticsearch and Kibana in a centralized stack.  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/patch-and-upgrade/upgrade-elk/",
	"title": "d. Upgrade Elasticsearch and Kibana",
	"tags": [],
	"description": "Instructions on how to upgrade Elastic Search and Kibana.",
	"content": "This section shows how to upgrade Elasticsearch and Kibana.\nTo determine if this step is required for the version you are upgrading to, refer to the Release Notes.\nDownload the latest code repository  Make sure you have downloaded the latest code as per Download the latest code repository.  Undeploy Elasticsearch and Kibana From October 22 (22.4.1) onwards, OIG logs should be stored on a centralized Elasticsearch and Kibana stack.\nDeployments prior to October 22 (22.4.1) used local deployments of Elasticsearch and Kibana.\nIf you are upgrading from July 22 (22.3.1) or earlier, to October 22 (22.4.1) or later, you must first undeploy Elasticsearch and Kibana using the steps below:\n  Edit the $WORKDIR/kubernetes/elasticsearch-and-kibana/elasticsearch_and_kibana.yaml and change all instances of namespace to correspond to your deployment.\n  Delete the Elasticsearch and Kibana resources using the following command:\n$ kubectl delete -f $WORKDIR/kubernetes/elasticsearch-and-kibana/elasticsearch_and_kibana.yaml   Deploy Elasticsearch and Kibana in centralized stack  Follow Install Elasticsearch stack and Kibana to deploy Elasticsearch and Kibana in a centralized stack.  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/manage-oam-domains/hpa/",
	"title": "e. Kubernetes Horizontal Pod Autoscaler",
	"tags": [],
	"description": "Describes the steps for implementing the Horizontal Pod Autoscaler.",
	"content": " Prerequisite configuration Deploy the Kubernetes Metrics Server  Troubleshooting   Deploy HPA Testing HPA Delete the HPA Other considerations  Kubernetes Horizontal Pod Autoscaler (HPA) is supported from Weblogic Kubernetes Operator 4.0.X and later.\nHPA allows automatic scaling (up and down) of the OAM Managed Servers. If load increases then extra OAM Managed Servers will be started as required, up to the value configuredManagedServerCount defined when the domain was created (see Prepare the create domain script). Similarly, if load decreases, OAM Managed Servers will be automatically shutdown.\nFor more information on HPA, see Horizontal Pod Autoscaling.\nThe instructions below show you how to configure and run an HPA to scale an OAM cluster (accessdomain-oam-cluster) resource, based on CPU utilization or memory resource metrics. If required, you can also perform the following for the accessdomain-policy-cluster.\nNote: If you enable HPA and then decide you want to start/stop/scale OAM Managed servers manually as per Domain Life Cycle, it is recommended to delete HPA beforehand as per Delete the HPA.\nPrerequisite configuration In order to use HPA, the OAM domain must have been created with the required resources parameter. For OAM domains created with WLST scripts, this is as per Set the OAM server memory parameters. For OAM domains created with WDT models, the values should be set by default. For example:\nserverPod: env: - name: USER_MEM_ARGS value: \u0026quot;-XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m\u0026quot; resources: limits: cpu: \u0026quot;2\u0026quot; memory: \u0026quot;8Gi\u0026quot; requests: cpu: \u0026quot;1000m\u0026quot; memory: \u0026quot;4Gi\u0026quot; If you created the OAM domain without setting these parameters, then you can update the domain using the following steps:\n  Run the following command to edit the cluster:\n$ kubectl edit cluster accessdomain-oam-cluster -n oamns Note: This opens an edit session for the oam-cluster where parameters can be changed using standard vi commands.\n  In the edit session, search for spec:, and then look for the replicas parameter under clusterName: oam_cluster. Change the entry so it looks as follows:\nspec: clusterName: oam_cluster replicas: 1 serverPod: env: - name: USER_MEM_ARGS value: -XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m resources: limits: cpu: \u0026quot;2\u0026quot; memory: 8Gi requests: cpu: 1000m memory: 4Gi serverService: precreateService: true ...   Save the file and exit (:wq!)\nThe output will look similar to the following:\ncluster.weblogic.oracle/accessdomain-oam-cluster edited The OAM Managed Server pods will then automatically be restarted.\n  Deploy the Kubernetes Metrics Server Before deploying HPA you must deploy the Kubernetes Metrics Server.\n  Check to see if the Kubernetes Metrics Server is already deployed:\n$ kubectl get pods -n kube-system | grep metric If a row is returned as follows, then Kubernetes Metric Server is deployed and you can move to Deploy HPA.\nmetrics-server-d9694457-mf69d 1/1 Running 0 5m13s   If no rows are returned by the previous command, then the Kubernetes Metric Server needs to be deployed. Run the following commands to get the components.yaml:\n$ mkdir $WORKDIR/kubernetes/hpa $ cd $WORKDIR/kubernetes/hpa $ wget https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml   Deploy the Kubernetes Metrics Server by running the following command:\n$ kubectl apply -f components.yaml The output will look similar to the following:\nserviceaccount/metrics-server created clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created clusterrole.rbac.authorization.k8s.io/system:metrics-server created rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created service/metrics-server created deployment.apps/metrics-server created apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created   Run the following command to check Kubernetes Metric Server is running:\n$ kubectl get pods -n kube-system | grep metric Make sure the pod has a READY status of 1/1:\nmetrics-server-d9694457-mf69d 1/1 Running 0 39s   Troubleshooting If the Kubernetes Metric Server does not reach the READY 1/1 state, run the following commands:\n$ kubectl describe pod \u0026lt;metrics-server-pod\u0026gt; -n kube-system $ kubectl logs \u0026lt;metrics-server-pod\u0026gt; -n kube-system If you see errors such as:\nReadiness probe failed: HTTP probe failed with statuscode: 500 and:\nE0907 13:07:50.937308 1 scraper.go:140] \u0026quot;Failed to scrape node\u0026quot; err=\u0026quot;Get \\\u0026quot;https://100.105.18.113:10250/metrics/resource\\\u0026quot;: x509: cannot validate certificate for 100.105.18.113 because it doesn't contain any IP SANs\u0026quot; node=\u0026quot;worker-node1\u0026quot; then you may need to install a valid cluster certificate for your Kubernetes cluster.\nFor testing purposes, you can resolve this issue by:\n  Delete the Kubernetes Metrics Server by running the following command:\n$ kubectl delete -f $WORKDIR/kubernetes/hpa/components.yaml   Edit the $WORKDIR/hpa/components.yaml and locate the args: section. Add kubelet-insecure-tls to the arguments. For example:\nspec: containers: - args: - --cert-dir=/tmp - --secure-port=4443 - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname - --kubelet-use-node-status-port - --kubelet-insecure-tls - --metric-resolution=15s image: registry.k8s.io/metrics-server/metrics-server:v0.6.4 ...   Deploy the Kubenetes Metrics Server using the command:\n$ kubectl apply -f components.yaml Run the following and make sure the READY status shows 1/1:\n$ kubectl get pods -n kube-system | grep metric The output should look similar to the following:\nmetrics-server-d9694457-mf69d 1/1 Running 0 40s   Deploy HPA The steps below show how to configure and run an HPA to scale the accessdomain-oam-cluster, based on the CPU or memory utilization resource metrics.\nThe default OAM deployment creates the cluster accessdomain-oam-cluster which starts one OAM Managed Server (oam_server1). The deployment also creates, but doesn’t start, four extra OAM Managed Servers (oam-server2 to oam-server5).\nIn the following example an HPA resource is created, targeted at the cluster resource accessdomain-oam-cluster. This resource will autoscale OAM Managed Servers from a minimum of 1 cluster member up to 5 cluster members. Scaling up will occur when the average CPU is consistently over 70%. Scaling down will occur when the average CPU is consistently below 70%.\n  Navigate to the $WORKDIR/kubernetes/hpa and create an autoscalehpa.yaml file that contains the following.\n# apiVersion: autoscaling/v2 kind: HorizontalPodAutoscaler metadata: name: accessdomain-oam-cluster-hpa namespace: oamns spec: scaleTargetRef: apiVersion: weblogic.oracle/v1 kind: Cluster name: accessdomain-oam-cluster behavior: scaleDown: stabilizationWindowSeconds: 60 scaleUp: stabilizationWindowSeconds: 60 minReplicas: 1 maxReplicas: 5 metrics: - type: Resource resource: name: cpu target: type: Utilization averageUtilization: 70 Note : minReplicas and maxReplicas should match your current domain settings.\nNote: For setting HPA based on Memory Metrics, update the metrics block with the following content. Please note we recommend using only CPU or Memory, not both.\nmetrics: - type: Resource resource: name: memory target: type: Utilization averageUtilization: 70   Run the following command to create the autoscaler:\n$ kubectl apply -f autoscalehpa.yaml The output will look similar to the following:\nhorizontalpodautoscaler.autoscaling/accessdomain-oam-cluster-hpa created   Verify the status of the autoscaler by running the following:\n$ kubectl get hpa -n oamns The output will look similar to the following:\nNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE accessdomain-oam-cluster-hpa Cluster/accessdomain-oam-cluster 5%/70% 1 5 1 21s In the example above, this shows that CPU is currently running at 5% for the accessdomain-oam-cluster-hpa.\n  Testing HPA   Check the current status of the OAM Managed Servers:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 0/1 Running 0 141m accessdomain-oam-policy-mgr1 0/1 Running 0 138m accessdomain-oam-server1 1/1 Running 0 138m nginx-ingress-ingress-nginx-controller-5f9bdf4c9-f5trt 1/1 Running 0 4h33m In the above, only accessdomain-oam-server1 is running.\n  To test HPA can scale up the WebLogic cluster accessdomain-oam-cluster, run the following commands:\n$ kubectl exec --stdin --tty accessdomain-oam-server1 -n oamns -- /bin/bash This will take you inside a bash shell inside the oam_server1 pod:\n[oracle@accessdomain-oam-server1 oracle]$ Inside the bash shell, run the following command to increase the load on the CPU:\n[oracle@accessdomain-oam-server1 oracle]$ dd if=/dev/zero of=/dev/null This command will continue to run in the foreground.\n  In a command window outside the bash shell, run the following command to view the current CPU usage:\n$ kubectl get hpa -n oamns The output will look similar to the following:\nNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE accessdomain-oam-cluster-hpa Cluster/accessdomain-oam-cluster 470%/70% 1 5 1 21s In the above example the CPU has increased to 470%. As this is above the 70% limit, the autoscaler increases the replicas on the Cluster resource and the operator responds by starting additional cluster members.\n  Run the following to see if any more OAM Managed Servers are started:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 0/1 Running 143m accessdomain-oam-policy-mgr1 0/1 Running 0 140m accessdomain-oam-server1 1/1 Running 0 140m accessdomain-oam-server2 1/1 Running 0 3m20s accessdomain-oam-server3 1/1 Running 0 3m20s accessdomain-oam-server4 1/1 Running 0 3m19s accessdomain-oam-server5 1/1 Running 0 3m5s In the example above four more OAM Managed Servers have been started (oam-server2 - oam-server5).\nNote: It may take some time for the servers to appear and start. Once the servers are at READY status of 1/1, the servers are started.\n  To stop the load on the CPU, in the bash shell, issue a Control C, and then exit the bash shell:\n[oracle@accessdomain-oam-server1 oracle]$ dd if=/dev/zero of=/dev/null ^C [oracle@accessdomain-oam-server1 oracle]$ exit   Run the following command to view the current CPU usage:\n$ kubectl get hpa -n oamns The output will look similar to the following:\nNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE accessdomain-oam-cluster-hpa Cluster/accessdomain-oam-cluster 19%/70% 1 5 5 19m In the above example CPU has dropped to 19%. As this is below the 70% threshold, you should see the autoscaler scale down the servers:\n$ kubectl get pods -n oamns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 152m accessdomain-oam-policy-mgr1 1/1 Running 0 149m accessdomain-oam-server1 1/1 Running 0 149m accessdomain-oam-server2 1/1 Running 0 14m accessdomain-oam-server3 0/1 Terminating 0 14m nginx-ingress-ingress-nginx-controller-5f9bdf4c9-f5trt 1/1 Running 0 4h45m Eventually, all the servers except oam-server1 will disappear:\nNAME READY STATUS RESTARTS AGE accessdomain-adminserver 1/1 Running 0 154m accessdomain-oam-policy-mgr1 1/1 Running 0 151m accessdomain-oam-server1 1/1 Running 0 151m nginx-ingress-ingress-nginx-controller-5f9bdf4c9-f5trt 1/1 Running 0 4h47m   Delete the HPA   If you need to delete the HPA, you can do so by running the following command:\n$ cd $WORKDIR/kubernetes/hpa $ kubectl delete -f autoscalehpa.yaml   Other considerations  If HPA is deployed and you need to upgrade the OAM image, then you must delete the HPA before upgrading. Once the upgrade is successful you can deploy HPA again. If you choose to start/stop an OAM Managed Server manually as per Domain Life Cycle, then it is recommended to delete the HPA before doing so.  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/manage-oig-domains/monitoring-oim-domains/",
	"title": "e. Monitoring an OIG domain",
	"tags": [],
	"description": "Describes the steps for Monitoring the OIG domain and Publishing the logs to Elasticsearch.",
	"content": "After the OIG domain is set up you can monitor the OIG instance using Prometheus and Grafana. See Monitoring a domain.\nThe WebLogic Monitoring Exporter uses the WLS RESTful Management API to scrape runtime information and then exports Prometheus-compatible metrics. It is deployed as a web application in a WebLogic Server (WLS) instance, version 12.2.1 or later, typically, in the instance from which you want to get metrics.\nThere are two ways to setup monitoring and you should choose one method or the other:\n Setup automatically using setup-monitoring.sh Setup using manual configuration  Setup automatically using setup-monitoring.sh The $WORKDIR/kubernetes/monitoring-service/setup-monitoring.sh sets up the monitoring for the OIG domain. It installs Prometheus, Grafana, WebLogic Monitoring Exporter and deploys the web applications to the OIG domain. It also deploys the WebLogic Server Grafana dashboard.\nFor usage details execute ./setup-monitoring.sh -h.\n  Edit the $WORKDIR/kubernetes/monitoring-service/monitoring-inputs.yaml and change the domainUID, domainNamespace, and weblogicCredentialsSecretName to correspond to your deployment. Also change wlsMonitoringExporterTosoaCluster, wlsMonitoringExporterTooimCluster, exposeMonitoringNodePort to true. For example:\nversion: create-governancedomain-monitoring-inputs-v1 # Unique ID identifying your domain. # This ID must not contain an underscope (\u0026quot;_\u0026quot;), and must be lowercase and unique across all domains in a Kubernetes cluster. domainUID: governancedomain # Name of the domain namespace domainNamespace: oigns # Boolean value indicating whether to install kube-prometheus-stack setupKubePrometheusStack: true # Additional parameters for helm install kube-prometheus-stack # Refer https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml for additional parameters # Sample : # additionalParamForKubePrometheusStack: --set nodeExporter.enabled=false --set prometheusOperator.tls.enabled=false --set prometheusOperator.admissionWebhooks.enabled=false additionalParamForKubePrometheusStack: # Name of the monitoring namespace monitoringNamespace: monitoring # Name of the Admin Server adminServerName: AdminServer # # Port number for admin server adminServerPort: 7001 # Cluster name soaClusterName: soa_cluster # Port number for managed server soaManagedServerPort: 8001 # WebLogic Monitoring Exporter to Cluster wlsMonitoringExporterTosoaCluster: true # Cluster name oimClusterName: oim_cluster # Port number for managed server oimManagedServerPort: 14000 # WebLogic Monitoring Exporter to Cluster wlsMonitoringExporterTooimCluster: true # Boolean to indicate if the adminNodePort will be exposed exposeMonitoringNodePort: true # NodePort to expose Prometheus prometheusNodePort: 32101 # NodePort to expose Grafana grafanaNodePort: 32100 # NodePort to expose Alertmanager alertmanagerNodePort: 32102 # Name of the Kubernetes secret for the Admin Server's username and password weblogicCredentialsSecretName: governancedomain-weblogic-credentials Note: For WDT domains, weblogicCredentialsSecretName should be set to governancedomain-weblogic-credentials.\nNote: If your cluster does not have access to the internet to pull external images, such as grafana or prometheus, you must load the images in a local container registry. You must then set additionalParamForKubePrometheusStack to set the location of the image in your local container registry, for example:\n# Additional parameters for helm install kube-prometheus-stack # Refer https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml for additional parameters # Sample : # additionalParamForKubePrometheusStack: --set nodeExporter.enabled=false --set prometheusOperator.tls.enabled=false --set prometheusOperator.admissionWebhooks.enabled=false additionalParamForKubePrometheusStack: --set grafana.image.registry=\u0026quot;container-registry.example.com\u0026quot; --set grafana.image.repository=\u0026quot;grafana/grafana\u0026quot; --set grafana.image.tag=8.3.4   Run the following command to setup monitoring:\n$ cd $WORKDIR/kubernetes/monitoring-service $ ./setup-monitoring.sh -i monitoring-inputs.yaml The output should be similar to the following:\nMonitoring setup in monitoring in progress node/worker-node1 not labeled node/worker-node2 not labeled node/master-node not labeled Setup prometheus-community/kube-prometheus-stack started \u0026quot;prometheus-community\u0026quot; already exists with the same configuration, skipping Hang tight while we grab the latest from your chart repositories... ...Successfully got an update from the \u0026quot;stable\u0026quot; chart repository ...Successfully got an update from the \u0026quot;prometheus\u0026quot; chart repository ...Successfully got an update from the \u0026quot;prometheus-community\u0026quot; chart repository Update Complete. ⎈Happy Helming!⎈ Setup prometheus-community/kube-prometheus-stack in progress NAME: monitoring LAST DEPLOYED: \u0026lt;DATE\u0026gt; NAMESPACE: monitoring STATUS: deployed REVISION: 1 NOTES: kube-prometheus-stack has been installed. Check its status by running: kubectl --namespace monitoring get pods -l \u0026quot;release=monitoring\u0026quot; Visit https://github.com/prometheus-operator/kube-prometheus for instructions on how to create \u0026amp; configure Alertmanager and Prometheus instances using the Operator. Setup prometheus-community/kube-prometheus-stack completed Deploy WebLogic Monitoring Exporter started Deploying WebLogic Monitoring Exporter with domainNamespace[oigns], domainUID[governancedomain], adminServerPodName[governancedomain-adminserver] % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 655 100 655 0 0 1159 0 --:--:-- --:--:-- --:--:-- 1159 100 2196k 100 2196k 0 0 1763k 0 0:00:01 0:00:01 --:--:-- 20.7M created $WORKDIR/kubernetes/monitoring-service/scripts/wls-exporter-deploy dir created /tmp/ci-GJSQsiXrFE /tmp/ci-GJSQsiXrFE $WORKDIR/kubernetes/monitoring-service in temp dir adding: WEB-INF/weblogic.xml (deflated 61%) adding: config.yml (deflated 60%) $WORKDIR/kubernetes/monitoring-service created /tmp/ci-KeyZrdouMD /tmp/ci-KeyZrdouMD $WORKDIR/kubernetes/monitoring-service in temp dir adding: WEB-INF/weblogic.xml (deflated 61%) adding: config.yml (deflated 60%) $WORKDIR/kubernetes/monitoring-service created /tmp/ci-QE9HawIIgT /tmp/ci-QE9HawIIgT $WORKDIR/kubernetes/monitoring-service in temp dir adding: WEB-INF/weblogic.xml (deflated 61%) adding: config.yml (deflated 60%) $WORKDIR/kubernetes/monitoring-service Initializing WebLogic Scripting Tool (WLST) ... Welcome to WebLogic Server Administration Scripting Shell Type help() for help on available commands Connecting to t3://governancedomain-adminserver:7001 with userid weblogic ... Successfully connected to Admin Server \u0026quot;AdminServer\u0026quot; that belongs to domain \u0026quot;governancedomain\u0026quot;. Warning: An insecure protocol was used to connect to the server. To ensure on-the-wire security, the SSL port or Admin port should be used instead. Deploying ......... Deploying application from /u01/oracle/wls-exporter-deploy/wls-exporter-adminserver.war to targets AdminServer (upload=true) ... \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating deploy operation for application, wls-exporter-adminserver [archive: /u01/oracle/wls-exporter-deploy/wls-exporter-adminserver.war], to AdminServer .\u0026gt; .Completed the deployment of Application with status completed Current Status of your Deployment: Deployment command type: deploy Deployment State : completed Deployment Message : no message Starting application wls-exporter-adminserver. \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating start operation for application, wls-exporter-adminserver [archive: null], to AdminServer .\u0026gt; .Completed the start of Application with status completed Current Status of your Deployment: Deployment command type: start Deployment State : completed Deployment Message : no message Deploying ......... Deploying application from /u01/oracle/wls-exporter-deploy/wls-exporter-soa.war to targets soa_cluster (upload=true) ... \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating deploy operation for application, wls-exporter-soa [archive: /u01/oracle/wls-exporter-deploy/wls-exporter-soa.war], to soa_cluster .\u0026gt; .Completed the deployment of Application with status completed Current Status of your Deployment: Deployment command type: deploy Deployment State : completed Deployment Message : no message Starting application wls-exporter-soa. \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating start operation for application, wls-exporter-soa [archive: null], to soa_cluster .\u0026gt; .Completed the start of Application with status completed Current Status of your Deployment: Deployment command type: start Deployment State : completed Deployment Message : no message Deploying ......... Deploying application from /u01/oracle/wls-exporter-deploy/wls-exporter-oim.war to targets oim_cluster (upload=true) ... \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating deploy operation for application, wls-exporter-oim [archive: /u01/oracle/wls-exporter-deploy/wls-exporter-oim.war], to oim_cluster .\u0026gt; .Completed the deployment of Application with status completed Current Status of your Deployment: Deployment command type: deploy Deployment State : completed Deployment Message : no message Starting application wls-exporter-oim. \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating start operation for application, wls-exporter-oim [archive: null], to oim_cluster .\u0026gt; .Completed the start of Application with status completed Current Status of your Deployment: Deployment command type: start Deployment State : completed Deployment Message : no message Disconnected from weblogic server: AdminServer Exiting WebLogic Scripting Tool. \u0026lt;DATE\u0026gt; \u0026lt;Warning\u0026gt; \u0026lt;JNDI\u0026gt; \u0026lt;BEA-050001\u0026gt; \u0026lt;WLContext.close() was called in a different thread than the one in which it was created.\u0026gt; Deploy WebLogic Monitoring Exporter completed secret/basic-auth created servicemonitor.monitoring.coreos.com/wls-exporter created Deploying WebLogic Server Grafana Dashboard.... {\u0026quot;id\u0026quot;:25,\u0026quot;slug\u0026quot;:\u0026quot;weblogic-server-dashboard\u0026quot;,\u0026quot;status\u0026quot;:\u0026quot;success\u0026quot;,\u0026quot;uid\u0026quot;:\u0026quot;5yUwzbZWz\u0026quot;,\u0026quot;url\u0026quot;:\u0026quot;/d/5yUwzbZWz/weblogic-server-dashboard\u0026quot;,\u0026quot;version\u0026quot;:1} Deployed WebLogic Server Grafana Dashboard successfully Grafana is available at NodePort: 32100 Prometheus is available at NodePort: 32101 Altermanager is available at NodePort: 32102 ==============================================================   Prometheus service discovery After the ServiceMonitor is deployed, the wls-exporter should be discovered by Prometheus and be able to collect metrics.\n  Access the following URL to view Prometheus service discovery: http://${MASTERNODE-HOSTNAME}:32101/service-discovery\n  Click on serviceMonitor/oigns/wls-exporter/0 and then show more. Verify all the targets are mentioned.\n  Note : It may take several minutes for serviceMonitor/oigns/wls-exporter/0 to appear, so refresh the page until it does.\nGrafana dashboard   Access the Grafana dashboard with the following URL: http://${MASTERNODE-HOSTNAME}:32100 and login with admin/admin. Change your password when prompted.\n  In the Dashboards panel, click on WebLogic Server Dashboard. The dashboard for your OIG domain should be displayed. If it is not displayed, click the Search icon in the left hand menu and search for WebLogic Server Dashboard.\n  Cleanup To uninstall the Prometheus, Grafana, WebLogic Monitoring Exporter and the deployments, you can run the $WORKDIR/monitoring-service/kubernetes/delete-monitoring.sh script. For usage details execute ./delete-monitoring.sh -h\n  To uninstall run the following command:\n$ cd $WORKDIR/kubernetes/monitoring-service $ ./delete-monitoring.sh -i monitoring-inputs.yaml   Setup using manual configuration Install Prometheus, Grafana and WebLogic Monitoring Exporter manually. Create the web applications and deploy to the OIG domain.\nDeploy the Prometheus operator   Kube-Prometheus requires all nodes to be labelled with kubernetes.io/os=linux. To check if your nodes are labelled, run the following:\n$ kubectl get nodes --show-labels If the nodes are labelled the output will look similar to the following:\nNAME STATUS ROLES AGE VERSION LABELS worker-node1 Ready \u0026lt;none\u0026gt; 42d v1.20.10 beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=worker-node1,kubernetes.io/os=linux worker-node2 Ready \u0026lt;none\u0026gt; 42d v1.20.10 beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=worker-node2,kubernetes.io/os=linux master-node Ready master 42d v1.20.10 beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=master-node,kubernetes.io/os=linux,node-role.kubernetes.io/master= If the nodes are not labelled, run the following command:\n$ kubectl label nodes --all kubernetes.io/os=linux   Clone Prometheus by running the following commands:\n$ cd $WORKDIR/kubernetes/monitoring-service $ git clone https://github.com/coreos/kube-prometheus.git -b v0.7.0 Note: Please refer the compatibility matrix of Kube Prometheus. Please download the release of the repository according to the Kubernetes version of your cluster.\n  If your cluster does not have access to the internet to pull external images, such as grafana, you must load the images in a local container registry.\nFor grafana, edit the $WORKDIR/kubernetes/monitoring-service/kube-prometheus/manifests/grafana-deployment.yaml and change image: grafana/grafana:7.3.4 to your local container registry image location, for example image: container-registry.example.com/grafana/grafana:8.3.4.\nFor any other images check the $WORKDIR/kubernetes/monitoring-service/kube-prometheus/manifests/*deployment.yaml files.\n  Run the following command to create the namespace and custom resource definitions:\n$ cd $WORKDIR/kubernetes/monitoring-service/kube-prometheus $ kubectl create -f manifests/setup The output will look similar to the following:\nnamespace/monitoring created customresourcedefinition.apiextensions.k8s.io/alertmanagerconfigs.monitoring.coreos.com created customresourcedefinition.apiextensions.k8s.io/alertmanagers.monitoring.coreos.com created customresourcedefinition.apiextensions.k8s.io/podmonitors.monitoring.coreos.com created customresourcedefinition.apiextensions.k8s.io/probes.monitoring.coreos.com created customresourcedefinition.apiextensions.k8s.io/prometheuses.monitoring.coreos.com created customresourcedefinition.apiextensions.k8s.io/prometheusrules.monitoring.coreos.com created customresourcedefinition.apiextensions.k8s.io/servicemonitors.monitoring.coreos.com created customresourcedefinition.apiextensions.k8s.io/thanosrulers.monitoring.coreos.com created Warning: spec.template.spec.nodeSelector[beta.kubernetes.io/os]: deprecated since v1.14; use \u0026quot;kubernetes.io/os\u0026quot; instead clusterrole.rbac.authorization.k8s.io/prometheus-operator created clusterrolebinding.rbac.authorization.k8s.io/prometheus-operator created deployment.apps/prometheus-operator created service/prometheus-operator created serviceaccount/prometheus-operator created   Run the following command to created the rest of the resources:\n$ kubectl create -f manifests/ The output will look similar to the following:\nalertmanager.monitoring.coreos.com/main created secret/alertmanager-main created service/alertmanager-main created serviceaccount/alertmanager-main created servicemonitor.monitoring.coreos.com/alertmanager created secret/grafana-datasources created configmap/grafana-dashboard-apiserver created configmap/grafana-dashboard-cluster-total created configmap/grafana-dashboard-controller-manager created configmap/grafana-dashboard-k8s-resources-cluster created configmap/grafana-dashboard-k8s-resources-namespace created configmap/grafana-dashboard-k8s-resources-node created configmap/grafana-dashboard-k8s-resources-pod created configmap/grafana-dashboard-k8s-resources-workload created configmap/grafana-dashboard-k8s-resources-workloads-namespace created configmap/grafana-dashboard-kubelet created configmap/grafana-dashboard-namespace-by-pod created configmap/grafana-dashboard-namespace-by-workload created configmap/grafana-dashboard-node-cluster-rsrc-use created configmap/grafana-dashboard-node-rsrc-use created configmap/grafana-dashboard-nodes created configmap/grafana-dashboard-persistentvolumesusage created configmap/grafana-dashboard-pod-total created configmap/grafana-dashboard-prometheus-remote-write created configmap/grafana-dashboard-prometheus created configmap/grafana-dashboard-proxy created configmap/grafana-dashboard-scheduler created configmap/grafana-dashboard-statefulset created configmap/grafana-dashboard-workload-total created configmap/grafana-dashboards created Warning: spec.template.spec.nodeSelector[beta.kubernetes.io/os]: deprecated since v1.14; use \u0026quot;kubernetes.io/os\u0026quot; instead deployment.apps/grafana created service/grafana created serviceaccount/grafana created servicemonitor.monitoring.coreos.com/grafana created clusterrole.rbac.authorization.k8s.io/kube-state-metrics created clusterrolebinding.rbac.authorization.k8s.io/kube-state-metrics created deployment.apps/kube-state-metrics created service/kube-state-metrics created serviceaccount/kube-state-metrics created servicemonitor.monitoring.coreos.com/kube-state-metrics created clusterrole.rbac.authorization.k8s.io/node-exporter created clusterrolebinding.rbac.authorization.k8s.io/node-exporter created daemonset.apps/node-exporter created service/node-exporter created serviceaccount/node-exporter created servicemonitor.monitoring.coreos.com/node-exporter created apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created clusterrole.rbac.authorization.k8s.io/prometheus-adapter created clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created clusterrolebinding.rbac.authorization.k8s.io/prometheus-adapter created clusterrolebinding.rbac.authorization.k8s.io/resource-metrics:system:auth-delegator created clusterrole.rbac.authorization.k8s.io/resource-metrics-server-resources created configmap/adapter-config created deployment.apps/prometheus-adapter created rolebinding.rbac.authorization.k8s.io/resource-metrics-auth-reader created service/prometheus-adapter created serviceaccount/prometheus-adapter created servicemonitor.monitoring.coreos.com/prometheus-adapter created clusterrole.rbac.authorization.k8s.io/prometheus-k8s created clusterrolebinding.rbac.authorization.k8s.io/prometheus-k8s created servicemonitor.monitoring.coreos.com/prometheus-operator created prometheus.monitoring.coreos.com/k8s created rolebinding.rbac.authorization.k8s.io/prometheus-k8s-config created rolebinding.rbac.authorization.k8s.io/prometheus-k8s created rolebinding.rbac.authorization.k8s.io/prometheus-k8s created rolebinding.rbac.authorization.k8s.io/prometheus-k8s created role.rbac.authorization.k8s.io/prometheus-k8s-config created role.rbac.authorization.k8s.io/prometheus-k8s created role.rbac.authorization.k8s.io/prometheus-k8s created role.rbac.authorization.k8s.io/prometheus-k8s created prometheusrule.monitoring.coreos.com/prometheus-k8s-rules created service/prometheus-k8s created serviceaccount/prometheus-k8s created servicemonitor.monitoring.coreos.com/prometheus created servicemonitor.monitoring.coreos.com/kube-apiserver created servicemonitor.monitoring.coreos.com/coredns created servicemonitor.monitoring.coreos.com/kube-controller-manager created servicemonitor.monitoring.coreos.com/kube-scheduler created servicemonitor.monitoring.coreos.com/kubelet created   Provide external access for Grafana, Prometheus, and Alertmanager, by running the following commands:\n$ kubectl patch svc grafana -n monitoring --type=json -p \u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/type\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;NodePort\u0026#34; },{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/ports/0/nodePort\u0026#34;, \u0026#34;value\u0026#34;: 32100 }]\u0026#39; $ kubectl patch svc prometheus-k8s -n monitoring --type=json -p \u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/type\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;NodePort\u0026#34; },{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/ports/0/nodePort\u0026#34;, \u0026#34;value\u0026#34;: 32101 }]\u0026#39; $ kubectl patch svc alertmanager-main -n monitoring --type=json -p \u0026#39;[{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/type\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;NodePort\u0026#34; },{\u0026#34;op\u0026#34;: \u0026#34;replace\u0026#34;, \u0026#34;path\u0026#34;: \u0026#34;/spec/ports/0/nodePort\u0026#34;, \u0026#34;value\u0026#34;: 32102 }]\u0026#39; Note: This assigns port 32100 to Grafana, 32101 to Prometheus, and 32102 to Alertmanager.\nThe output will look similar to the following:\nservice/grafana patched service/prometheus-k8s patched service/alertmanager-main patched   Verify that the Prometheus, Grafana, and Alertmanager pods are running in the monitoring namespace and the respective services have the exports configured correctly:\n$ kubectl get pods,services -o wide -n monitoring The output should look similar to the following:\npod/alertmanager-main-0 2/2 Running 0 40s 10.244.1.29 worker-node1 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/alertmanager-main-1 2/2 Running 0 40s 10.244.2.68 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/alertmanager-main-2 2/2 Running 0 40s 10.244.1.28 worker-node1 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/grafana-f8cd57fcf-zpjh2 1/1 Running 0 40s 10.244.2.69 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/kube-state-metrics-587bfd4f97-zw9zj 3/3 Running 0 38s 10.244.1.30 worker-node1 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/node-exporter-2cgrm 2/2 Running 0 38s 10.196.54.36 master-node \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/node-exporter-fpl7f 2/2 Running 0 38s 10.247.95.26 worker-node1 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/node-exporter-kvvnr 2/2 Running 0 38s 10.250.40.59 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/prometheus-adapter-69b8496df6-9vfdp 1/1 Running 0 38s 10.244.2.70 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/prometheus-k8s-0 2/2 Running 0 37s 10.244.2.71 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/prometheus-k8s-1 2/2 Running 0 37s 10.244.1.31 worker-node1 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; pod/prometheus-operator-7649c7454f-g5b4l 2/2 Running 0 47s 10.244.2.67 worker-node2 \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE SELECTOR service/alertmanager-main NodePort 10.105.76.223 \u0026lt;none\u0026gt; 9093:32102/TCP 41s alertmanager=main,app=alertmanager service/alertmanager-operated ClusterIP None \u0026lt;none\u0026gt; 9093/TCP,9094/TCP,9094/UDP 40s app=alertmanager service/grafana NodePort 10.107.86.157 \u0026lt;none\u0026gt; 3000:32100/TCP 40s app=grafana service/kube-state-metrics ClusterIP None \u0026lt;none\u0026gt; 8443/TCP,9443/TCP 40s app.kubernetes.io/name=kube-state-metrics service/node-exporter ClusterIP None \u0026lt;none\u0026gt; 9100/TCP 39s app.kubernetes.io/name=node-exporter service/prometheus-adapter ClusterIP 10.102.244.224 \u0026lt;none\u0026gt; 443/TCP 39s name=prometheus-adapter service/prometheus-k8s NodePort 10.100.241.34 \u0026lt;none\u0026gt; 9090:32101/TCP 39s app=prometheus,prometheus=k8s service/prometheus-operated ClusterIP None \u0026lt;none\u0026gt; 9090/TCP 39s app=prometheus service/prometheus-operator ClusterIP None \u0026lt;none\u0026gt; 8443/TCP 47s app.kubernetes.io/component=controller,app.kubernetes.io/name=prometheus-operator   Deploy WebLogic Monitoring Exporter Generate the WebLogic Monitoring Exporter deployment package. The wls-exporter.war package need to be updated and created for each listening port (Administration Server and Managed Servers) in the domain.\n  Set the below environment values and run the script get-wls-exporter.sh to generate the required WAR files at ${WORKDIR}/kubernetes/monitoring-service/scripts/wls-exporter-deploy:\n$ cd $WORKDIR/kubernetes/monitoring-service/scripts $ export adminServerPort=7001 $ export wlsMonitoringExporterTosoaCluster=true $ export soaManagedServerPort=8001 $ export wlsMonitoringExporterTooimCluster=true $ export oimManagedServerPort=14000 $ sh get-wls-exporter.sh The output will look similar to the following:\n % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 655 100 655 0 0 1159 0 --:--:-- --:--:-- --:--:-- 1159 100 2196k 100 2196k 0 0 1430k 0 0:00:01 0:00:01 --:--:-- 8479k created $WORKDIR/kubernetes/monitoring-service/scripts/wls-exporter-deploy dir domainNamespace is empty, setting to default oimcluster domainUID is empty, setting to default oimcluster weblogicCredentialsSecretName is empty, setting to default \u0026quot;oimcluster-domain-credentials\u0026quot; adminServerPort is empty, setting to default \u0026quot;7001\u0026quot; soaClusterName is empty, setting to default \u0026quot;soa_cluster\u0026quot; oimClusterName is empty, setting to default \u0026quot;oim_cluster\u0026quot; created /tmp/ci-NEZy7NOfoz /tmp/ci-NEZy7NOfoz $WORKDIR/kubernetes/monitoring-service/scripts in temp dir adding: WEB-INF/weblogic.xml (deflated 61%) adding: config.yml (deflated 60%) $WORKDIR/kubernetes/monitoring-service/scripts created /tmp/ci-J7QJ4Nc1lo /tmp/ci-J7QJ4Nc1lo $WORKDIR/kubernetes/monitoring-service/scripts in temp dir adding: WEB-INF/weblogic.xml (deflated 61%) adding: config.yml (deflated 60%) $WORKDIR/kubernetes/monitoring-service/scripts created /tmp/ci-f4GbaxM2aJ /tmp/ci-f4GbaxM2aJ $WORKDIR/kubernetes/monitoring-service/scripts in temp dir adding: WEB-INF/weblogic.xml (deflated 61%) adding: config.yml (deflated 60%) $WORKDIR/kubernetes/monitoring-service/scripts   Deploy the WebLogic Monitoring Exporter WAR files into the Oracle Identity Governance domain:\n$ cd $WORKDIR/kubernetes/monitoring-service/scripts $ kubectl cp wls-exporter-deploy \u0026lt;domain_namespace\u0026gt;/\u0026lt;domain_uid\u0026gt;-adminserver:/u01/oracle $ kubectl cp deploy-weblogic-monitoring-exporter.py \u0026lt;domain_namespace\u0026gt;/\u0026lt;domain_uid\u0026gt;-adminserver:/u01/oracle/wls-exporter-deploy $ kubectl exec -it -n \u0026lt;domain_namespace\u0026gt; \u0026lt;domain_uid\u0026gt;-adminserver -- /u01/oracle/oracle_common/common/bin/wlst.sh /u01/oracle/wls-exporter-deploy/deploy-weblogic-monitoring-exporter.py -domainName \u0026lt;domain_uid\u0026gt; -adminServerName AdminServer -adminURL \u0026lt;domain_uid\u0026gt;-adminserver:7001 -username weblogic -password \u0026lt;password\u0026gt; -oimClusterName oim_cluster -wlsMonitoringExporterTooimCluster true -soaClusterName soa_cluster -wlsMonitoringExporterTosoaCluster true For example:\n$ cd $WORKDIR/kubernetes/monitoring-service/scripts $ kubectl cp wls-exporter-deploy oigns/governancedomain-adminserver:/u01/oracle $ kubectl cp deploy-weblogic-monitoring-exporter.py oigns/governancedomain-adminserver:/u01/oracle/wls-exporter-deploy $ kubectl exec -it -n oigns governancedomain-adminserver -- /u01/oracle/oracle_common/common/bin/wlst.sh /u01/oracle/wls-exporter-deploy/deploy-weblogic-monitoring-exporter.py -domainName governancedomain -adminServerName AdminServer -adminURL governancedomain-adminserver:7001 -username weblogic -password \u0026lt;password\u0026gt; -oimClusterName oim_cluster -wlsMonitoringExporterTooimCluster true -soaClusterName soa_cluster -wlsMonitoringExporterTosoaCluster true The output will look similar to the following:\nInitializing WebLogic Scripting Tool (WLST) ... Welcome to WebLogic Server Administration Scripting Shell Type help() for help on available commands Connecting to t3://governancedomain-adminserver:7001 with userid weblogic ... Successfully connected to Admin Server \u0026quot;AdminServer\u0026quot; that belongs to domain \u0026quot;governancedomaindomain\u0026quot;. Warning: An insecure protocol was used to connect to the server. To ensure on-the-wire security, the SSL port or Admin port should be used instead. Deploying ......... Deploying application from /u01/oracle/wls-exporter-deploy/wls-exporter-adminserver.war to targets AdminServer (upload=true) ... \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating deploy operation for application, wls-exporter-adminserver [archive: /u01/oracle/wls-exporter-deploy/wls-exporter-adminserver.war], to AdminServer .\u0026gt; .Completed the deployment of Application with status completed Current Status of your Deployment: Deployment command type: deploy Deployment State : completed Deployment Message : no message Starting application wls-exporter-adminserver. \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating start operation for application, wls-exporter-adminserver [archive: null], to AdminServer .\u0026gt; .Completed the start of Application with status completed Current Status of your Deployment: Deployment command type: start Deployment State : completed Deployment Message : no message Deploying ......... Deploying application from /u01/oracle/wls-exporter-deploy/wls-exporter-soa.war to targets soa_cluster (upload=true) ... \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating deploy operation for application, wls-exporter-soa [archive: /u01/oracle/wls-exporter-deploy/wls-exporter-soa.war], to soa_cluster .\u0026gt; ..Completed the deployment of Application with status completed Current Status of your Deployment: Deployment command type: deploy Deployment State : completed Deployment Message : no message Starting application wls-exporter-soa. \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating start operation for application, wls-exporter-soa [archive: null], to soa_cluster .\u0026gt; .Completed the start of Application with status completed Current Status of your Deployment: Deployment command type: start Deployment State : completed Deployment Message : no message Deploying ......... Deploying application from /u01/oracle/wls-exporter-deploy/wls-exporter-oim.war to targets oim_cluster (upload=true) ... \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating deploy operation for application, wls-exporter-oim [archive: /u01/oracle/wls-exporter-deploy/wls-exporter-oim.war], to oim_cluster .\u0026gt; .Completed the deployment of Application with status completed Current Status of your Deployment: Deployment command type: deploy Deployment State : completed Deployment Message : no message Starting application wls-exporter-oim. \u0026lt;DATE\u0026gt; \u0026lt;Info\u0026gt; \u0026lt;J2EE Deployment SPI\u0026gt; \u0026lt;BEA-260121\u0026gt; \u0026lt;Initiating start operation for application, wls-exporter-oim [archive: null], to oim_cluster .\u0026gt; .Completed the start of Application with status completed Current Status of your Deployment: Deployment command type: start Deployment State : completed Deployment Message : no message Disconnected from weblogic server: AdminServer Exiting WebLogic Scripting Tool. \u0026lt;DATE\u0026gt; \u0026lt;Warning\u0026gt; \u0026lt;JNDI\u0026gt; \u0026lt;BEA-050001\u0026gt; \u0026lt;WLContext.close() was called in a different thread than the one in which it was created.\u0026gt;   Configure Prometheus Operator Prometheus enables you to collect metrics from the WebLogic Monitoring Exporter. The Prometheus Operator identifies the targets using service discovery. To get the WebLogic Monitoring Exporter end point discovered as a target, you must create a service monitor pointing to the service.\nThe exporting of metrics from wls-exporter requires basicAuth, so a Kubernetes Secret is created with the user name and password that are base64 encoded. This Secret is used in the ServiceMonitor deployment. The wls-exporter-ServiceMonitor.yaml has basicAuth with credentials as username: weblogic and password: \u0026lt;password\u0026gt; in base64 encoded.\n  Run the following command to get the base64 encoded version of the weblogic password:\n$ echo -n \u0026#34;\u0026lt;password\u0026gt;\u0026#34; | base64 The output will look similar to the following:\nV2VsY29tZTE=   Update the $WORKDIR/kubernetes/monitoring-service/manifests/wls-exporter-ServiceMonitor.yaml and change the password: value to the value returned above. Also change any reference to the namespace and weblogic.domainName: values to match your OIG namespace and domain name. For example:\napiVersion: v1 kind: Secret metadata: name: basic-auth namespace: oigns data: password: V2VsY29tZTE= user: d2VibG9naWM= type: Opaque --- apiVersion: monitoring.coreos.com/v1 kind: ServiceMonitor metadata: name: wls-exporter namespace: oigns labels: k8s-app: wls-exporter release: monitoring spec: namespaceSelector: matchNames: - oigns selector: matchLabels: weblogic.domainName: governancedomain endpoints: - basicAuth: password: name: basic-auth key: password username: name: basic-auth key: user port: default relabelings: - action: labelmap regex: __meta_kubernetes_service_label_(.+) interval: 10s honorLabels: true path: /wls-exporter/metrics   Update the $WORKDIR/kubernetes/monitoring-service/manifests/prometheus-roleSpecific-domain-namespace.yaml and change the namespace to match your OIG namespace. For example:\napiVersion: rbac.authorization.k8s.io/v1 items: - apiVersion: rbac.authorization.k8s.io/v1 kind: Role metadata: name: prometheus-k8s namespace: oigns rules: - apiGroups: - \u0026quot;\u0026quot; resources: - services - endpoints - pods verbs: - get - list - watch kind: RoleList   Update the $WORKDIR/kubernetes/monitoring-service/manifests/prometheus-roleBinding-domain-namespace.yaml and change the namespace to match your OIG namespace. For example:\napiVersion: rbac.authorization.k8s.io/v1 items: - apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata: name: prometheus-k8s namespace: oigns roleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: prometheus-k8s subjects: - kind: ServiceAccount name: prometheus-k8s namespace: monitoring kind: RoleBindingList   Run the following command to enable Prometheus:\n$ cd $WORKDIR/kubernetes/monitoring-service/manifests $ kubectl apply -f . The output will look similar to the following:\nrolebinding.rbac.authorization.k8s.io/prometheus-k8s created role.rbac.authorization.k8s.io/prometheus-k8s created secret/basic-auth created servicemonitor.monitoring.coreos.com/wls-exporter created   Prometheus service discovery After the ServiceMonitor is deployed, the wls-exporter should be discovered by Prometheus and be able to collect metrics.\n  Access the following URL to view Prometheus service discovery: http://${MASTERNODE-HOSTNAME}:32101/service-discovery\n  Click on oigns/wls-exporter/0 and then show more. Verify all the targets are mentioned.\n  Note: It may take several minutes for oigns/wls-exporter/0 to appear, so refresh the page until it does.\nGrafana dashboard   Access the Grafana dashboard with the following URL: http://${MASTERNODE-HOSTNAME}:32100 and login with admin/admin. Change your password when prompted.\n  Import the Grafana dashboard by navigating on the left hand menu to Create \u0026gt; Import. Copy the content from $WORKDIR/kubernetes/monitoring-service/config/weblogic-server-dashboard-import.json and paste. Then click Load and Import. The dashboard should be displayed.\n  Cleanup To clean up a manual installation:\n  Run the following commands:\n$ cd $WORKDIR/kubernetes/monitoring-service/manifests/ $ kubectl delete -f .   Delete the deployments:\n$ cd $WORKDIR/kubernetes/monitoring-service/scripts/ $ kubectl cp undeploy-weblogic-monitoring-exporter.py \u0026lt;domain_namespace\u0026gt;/\u0026lt;domain_uid\u0026gt;-adminserver:/u01/oracle/wls-exporter-deploy $ kubectl exec -it -n \u0026lt;domain_namespace\u0026gt; \u0026lt;domain_uid\u0026gt;-adminserver -- /u01/oracle/oracle_common/common/bin/wlst.sh /u01/oracle/wls-exporter-deploy/undeploy-weblogic-monitoring-exporter.py -domainName \u0026lt;domain_uid\u0026gt; -adminServerName AdminServer -adminURL \u0026lt;domain_uid\u0026gt;-adminserver:7001 -username weblogic -password \u0026lt;password\u0026gt; -oimClusterName oim_cluster -wlsMonitoringExporterTooimCluster true -soaClusterName soa_cluster -wlsMonitoringExporterTosoaCluster true   Delete Prometheus:\n$ cd $WORKDIR/kubernetes/monitoring-service/kube-prometheus $ kubectl delete -f manifests $ kubectl delete -f manifests/setup   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/enterprise-deployments/",
	"title": "Enterprise Deployments",
	"tags": [],
	"description": "The complete Oracle Identity Management suite can be deployed in a production environment",
	"content": "Enterprise Deployments of Oracle Identity Management The entire Oracle Identity and Access Management Suite can be deployed in a production environment. See the following sections:\n a. Enterprise Deployment Guide   b. Enterprise Deployment Guide Automation Scripts   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/manage-oam-domains/delete-domain-home/",
	"title": "f. Delete the OAM domain home",
	"tags": [],
	"description": "Learn about the steps to cleanup the OAM domain home.",
	"content": "Sometimes in production, but most likely in testing environments, you might want to remove the domain home that is generated using the create-domain.sh script.\n  Run the following command to delete the domain:\n$ cd $WORKDIR/kubernetes/delete-domain $ ./delete-weblogic-domain-resources.sh -d \u0026lt;domain_uid\u0026gt; For example:\n$ cd $WORKDIR/kubernetes/delete-domain $ ./delete-weblogic-domain-resources.sh -d accessdomain   Drop the RCU schemas as follows:\n$ kubectl exec -it helper -n \u0026lt;domain_namespace\u0026gt; -- /bin/bash [oracle@helper ~]$ [oracle@helper ~]$ export CONNECTION_STRING=\u0026lt;db_host.domain\u0026gt;:\u0026lt;db_port\u0026gt;/\u0026lt;service_name\u0026gt; [oracle@helper ~]$ export RCUPREFIX=\u0026lt;rcu_schema_prefix\u0026gt; /u01/oracle/oracle_common/bin/rcu -silent -dropRepository -databaseType ORACLE -connectString $CONNECTION_STRING \\ -dbUser sys -dbRole sysdba -selectDependentsForComponents true -schemaPrefix $RCUPREFIX \\ -component MDS -component IAU -component IAU_APPEND -component IAU_VIEWER -component OPSS \\ -component WLS -component STB -component OAM -f \u0026lt; /tmp/pwd.txt For example:\n$ kubectl exec -it helper -n oamns -- /bin/bash [oracle@helper ~]$ export CONNECTION_STRING=mydatabasehost.example.com:1521/orcl.example.com [oracle@helper ~]$ export RCUPREFIX=OAMK8S /u01/oracle/oracle_common/bin/rcu -silent -dropRepository -databaseType ORACLE -connectString $CONNECTION_STRING \\ -dbUser sys -dbRole sysdba -selectDependentsForComponents true -schemaPrefix $RCUPREFIX \\ -component MDS -component IAU -component IAU_APPEND -component IAU_VIEWER -component OPSS \\ -component WLS -component STB -component OAM -f \u0026lt; /tmp/pwd.txt   Delete the contents of the persistent volume, for example:\n$ rm -rf \u0026lt;persistent_volume\u0026gt;/accessdomainpv/* For example:\n$ rm -rf /scratch/shared/accessdomainpv/*   Delete the WebLogic Kubernetes Operator, by running the following command:\n$ helm delete weblogic-kubernetes-operator -n opns   Delete the label from the OAM namespace:\n$ kubectl label namespaces \u0026lt;domain_namespace\u0026gt; weblogic-operator- For example:\n$ kubectl label namespaces oamns weblogic-operator-   Delete the service account for the operator:\n$ kubectl delete serviceaccount \u0026lt;sample-kubernetes-operator-sa\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl delete serviceaccount op-sa -n opns   Delete the operator namespace:\n$ kubectl delete namespace \u0026lt;sample-kubernetes-operator-ns\u0026gt; For example:\n$ kubectl delete namespace opns   To delete NGINX:\n$ helm delete oam-nginx -n \u0026lt;domain_namespace\u0026gt; For example:\n$ helm delete oam-nginx -n oamns Then run:\n$ helm delete nginx-ingress -n \u0026lt;domain_namespace\u0026gt; For example:\n$ helm delete nginx-ingress -n oamns   Delete the OAM namespace:\n$ kubectl delete namespace \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl delete namespace oamns   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/manage-oig-domains/hpa/",
	"title": "f. Kubernetes Horizontal Pod Autoscaler",
	"tags": [],
	"description": "Describes the steps for implementing the Horizontal Pod Autoscaler.",
	"content": " Prerequisite configuration Deploy the Kubernetes Metrics Server  Troubleshooting   Deploy HPA Testing HPA Delete the HPA Other considerations  Kubernetes Horizontal Pod Autoscaler (HPA) is supported from Weblogic Kubernetes Operator 4.0.X and later.\nHPA allows automatic scaling (up and down) of the OIG Managed Servers. If load increases then extra OIG Managed Servers will be started as required, up to the value configuredManagedServerCount defined when the domain was created (see Prepare the create domain script). Similarly, if load decreases, OIG Managed Servers will be automatically shutdown.\nFor more information on HPA, see Horizontal Pod Autoscaling.\nThe instructions below show you how to configure and run an HPA to scale an OIG cluster (governancedomain-oim-cluster) resource, based on CPU utilization or memory resource metrics. If required, you can also perform the following for the governancedomain-soa-cluster.\nNote: If you enable HPA and then decide you want to start/stop/scale OIG Managed servers manually as per Domain Life Cycle, it is recommended to delete HPA beforehand as per Delete the HPA.\nPrerequisite configuration In order to use HPA, the OIG domain must have been created with the required resources parameter as per Set the OIM server memory parameters. For example:\nserverPod: env: - name: USER_MEM_ARGS value: \u0026quot;-XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m\u0026quot; resources: limits: cpu: \u0026quot;2\u0026quot; memory: \u0026quot;8Gi\u0026quot; requests: cpu: \u0026quot;1000m\u0026quot; memory: \u0026quot;4Gi\u0026quot; If you created the OIG domain without setting these parameters, then you can update the domain using the following steps:\n  Run the following command to edit the cluster:\n$ kubectl edit cluster governancedomain-oim-cluster -n oigns Note: This opens an edit session for the governancedomain-oim-cluster where parameters can be changed using standard vi commands.\n  In the edit session, search for spec:, and then look for the replicas parameter under clusterName: oim_cluster. Change the entry so it looks as follows:\nspec: clusterName: oim_cluster replicas: 1 serverPod: env: - name: USER_MEM_ARGS value: -XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom -Xms8192m -Xmx8192m resources: limits: cpu: \u0026quot;2\u0026quot; memory: 8Gi requests: cpu: 1000m memory: 4Gi serverService: precreateService: true ...   Save the file and exit (:wq!)\nThe output will look similar to the following:\ncluster.weblogic.oracle/governancedomain-oim-cluster edited The OIG Managed Server pods will then automatically be restarted.\n  Deploy the Kubernetes Metrics Server Before deploying HPA you must deploy the Kubernetes Metrics Server.\n  Check to see if the Kubernetes Metrics Server is already deployed:\n$ kubectl get pods -n kube-system | grep metric If a row is returned as follows, then Kubernetes Metric Server is deployed and you can move to Deploy HPA.\nmetrics-server-d9694457-mf69d 1/1 Running 0 5m13s   If no rows are returned by the previous command, then the Kubernetes Metric Server needs to be deployed. Run the following commands to get the components.yaml:\n$ mkdir $WORKDIR/kubernetes/hpa $ cd $WORKDIR/kubernetes/hpa $ wget https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml   Deploy the Kubernetes Metrics Server by running the following command:\n$ kubectl apply -f components.yaml The output will look similar to the following:\nserviceaccount/metrics-server created clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created clusterrole.rbac.authorization.k8s.io/system:metrics-server created rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created service/metrics-server created deployment.apps/metrics-server created apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created   Run the following command to check Kubernetes Metric Server is running:\n$ kubectl get pods -n kube-system | grep metric Make sure the pod has a READY status of 1/1:\nmetrics-server-d9694457-mf69d 1/1 Running 0 39s   Troubleshooting If the Kubernetes Metric Server does not reach the READY 1/1 state, run the following commands:\n$ kubectl describe pod \u0026lt;metrics-server-pod\u0026gt; -n kube-system $ kubectl logs \u0026lt;metrics-server-pod\u0026gt; -n kube-system If you see errors such as:\nReadiness probe failed: HTTP probe failed with statuscode: 500 and:\nE0907 13:07:50.937308 1 scraper.go:140] \u0026quot;Failed to scrape node\u0026quot; err=\u0026quot;Get \\\u0026quot;https://100.105.18.113:10250/metrics/resource\\\u0026quot;: x509: cannot validate certificate for 100.105.18.113 because it doesn't contain any IP SANs\u0026quot; node=\u0026quot;worker-node1\u0026quot; then you may need to install a valid cluster certificate for your Kubernetes cluster.\nFor testing purposes, you can resolve this issue by:\n  Delete the Kubernetes Metrics Server by running the following command:\n$ kubectl delete -f $WORKDIR/kubernetes/hpa/components.yaml   Edit the $WORKDIR/kubernetes/hpa/components.yaml and locate the args: section. Add kubelet-insecure-tls to the arguments. For example:\nspec: containers: - args: - --cert-dir=/tmp - --secure-port=4443 - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname - --kubelet-use-node-status-port - --kubelet-insecure-tls - --metric-resolution=15s image: registry.k8s.io/metrics-server/metrics-server:v0.6.4 ...   Deploy the Kubenetes Metrics Server using the command:\n$ kubectl apply -f components.yaml Run the following and make sure the READY status shows 1/1:\n$ kubectl get pods -n kube-system | grep metric The output should look similar to the following:\nmetrics-server-d9694457-mf69d 1/1 Running 0 40s   Deploy HPA The steps below show how to configure and run an HPA to scale the governancedomain-oim-cluster, based on the CPU or memory utilization resource metrics.\nThe default OIG deployment creates the cluster governancedomain-oim-cluster which starts one OIG Managed Server (oim_server1). The deployment also creates, but doesn’t start, four extra OIG Managed Servers (oim-server2 to oim-server5).\nIn the following example an HPA resource is created, targeted at the cluster resource governancedomain-oim-cluster. This resource will autoscale OIG Managed Servers from a minimum of 1 cluster member up to 5 cluster members. Scaling up will occur when the average CPU is consistently over 70%. Scaling down will occur when the average CPU is consistently below 70%.\n  Navigate to the $WORKDIR/kubernetes/hpa and create an autoscalehpa.yaml file that contains the following.\n# apiVersion: autoscaling/v2 kind: HorizontalPodAutoscaler metadata: name: governancedomain-oim-cluster-hpa namespace: oigns spec: scaleTargetRef: apiVersion: weblogic.oracle/v1 kind: Cluster name: governancedomain-oim-cluster behavior: scaleDown: stabilizationWindowSeconds: 60 scaleUp: stabilizationWindowSeconds: 60 minReplicas: 1 maxReplicas: 5 metrics: - type: Resource resource: name: cpu target: type: Utilization averageUtilization: 70 Note : minReplicas and maxReplicas should match your current domain settings.\nNote: For setting HPA based on Memory Metrics, update the metrics block with the following content. Please note we recommend using only CPU or Memory, not both.\nmetrics: - type: Resource resource: name: memory target: type: Utilization averageUtilization: 70   Run the following command to create the autoscaler:\n$ kubectl apply -f autoscalehpa.yaml The output will look similar to the following:\nhorizontalpodautoscaler.autoscaling/governancedomain-oim-cluster-hpa created   Verify the status of the autoscaler by running the following:\n$ kubectl get hpa -n oigns The output will look similar to the following:\nNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE governancedomain-oim-cluster-hpa Cluster/governancedomain-oim-cluster 16%/70% 1 5 1 20s In the example above, this shows that CPU is currently running at 16% for the governancedomain-oim-cluster-hpa.\n  Testing HPA   Check the current status of the OIG Managed Servers:\n$ kubectl get pods -n oigns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 20m governancedomain-oim-server1 1/1 Running 0 17m governancedomain-soa-server1 1/1 Running 0 17m In the above only governancedomain-oim-server1 is running.\n  To test HPA can scale up the WebLogic cluster governancedomain-oim-cluster, run the following commands:\n$ kubectl exec --stdin --tty governancedomain-oim-server1 -n oigns -- /bin/bash This will take you inside a bash shell inside the oim_server1 pod:\n[oracle@governancedomain-oim-server1 oracle]$ Inside the bash shell, run the following command to increase the load on the CPU:\n[oracle@governancedomain-oim-server1 oracle]$ dd if=/dev/zero of=/dev/null This command will continue to run in the foreground.\n  In a command window outside the bash shell, run the following command to view the current CPU usage:\n$ kubectl get hpa -n oigns The output will look similar to the following:\nNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE governancedomain-oim-cluster-hpa Cluster/governancedomain-oim-cluster 386%/70% 1 5 1 2m47s In the above example the CPU has increased to 386%. As this is above the 70% limit, the autoscaler increases the replicas on the Cluster resource and the operator responds by starting additional cluster members.\n  Run the following to see if any more OIG Managed Servers are started:\n$ kubectl get pods -n oigns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 30m governancedomain-oim-server1 1/1 Running 0 27m governancedomain-oim-server2 1/1 Running 0 10m governancedomain-oim-server3 1/1 Running 0 10m governancedomain-oim-server4 1/1 Running 0 10m governancedomain-oim-server5 1/1 Running 0 10m governancedomain-soa-server1 1/1 Running 0 27m In the example above four more OIG Managed Servers have been started (oim-server2 - oim-server5).\nNote: It may take some time for the servers to appear and start. Once the servers are at READY status of 1/1, the servers are started.\n  To stop the load on the CPU, in the bash shell, issue a Control C, and then exit the bash shell:\n[oracle@governancedomain-oim-server1 oracle]$ dd if=/dev/zero of=/dev/null ^C [oracle@governancedomain-oim-server1 oracle]$ exit   Run the following command to view the current CPU usage:\n$ kubectl get hpa -n oigns The output will look similar to the following:\nNAME REFERENCE TARGETS MINPODS MAXPODS REPLICAS AGE governancedomain-oim-cluster-hpa Cluster/governancedomain-oim-cluster 33%/70% 1 5 5 37m In the above example CPU has dropped to 33%. As this is below the 70% threshold, you should see the autoscaler scale down the servers:\n$ kubectl get pods -n oigns The output will look similar to the following:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 43m governancedomain-oim-server1 1/1 Running 0 40m governancedomain-oim-server2 1/1 Running 0 13m governancedomain-oim-server3 1/1 Running 0 13m governancedomain-oim-server4 1/1 Running 0 13m governancedomain-oim-server5 0/1 Terminating 0 13m governancedomain-soa-server1 1/1 Running 0 40m Eventually, all the servers except oim-server1 will disappear:\nNAME READY STATUS RESTARTS AGE governancedomain-adminserver 1/1 Running 0 44m governancedomain-oim-server1 1/1 Running 0 41m governancedomain-soa-server1 1/1 Running 0 41m   Delete the HPA   If you need to delete the HPA, you can do so by running the following command:\n$ cd $WORKDIR/kubernetes/hpa $ kubectl delete -f autoscalehpa.yaml   Other considerations  If HPA is deployed and you need to upgrade the OIG image, then you must delete the HPA before upgrading. Once the upgrade is successful you can deploy HPA again. If you choose to start/stop an OIG Managed Server manually as per Domain Life Cycle, then it is recommended to delete the HPA before doing so.  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/manage-oig-domains/delete-domain-home/",
	"title": "g. Delete the OIG domain home",
	"tags": [],
	"description": "Learn about the steps to cleanup the OIG domain home.",
	"content": "Sometimes in production, but most likely in testing environments, you might want to remove the domain home that is generated using the create-domain.sh script.\n  Run the following command to delete the domain:\n$ cd $WORKDIR/kubernetes/delete-domain $ ./delete-weblogic-domain-resources.sh -d \u0026lt;domain_uid\u0026gt; For example:\n$ cd $WORKDIR/kubernetes/delete-domain $ ./delete-weblogic-domain-resources.sh -d governancedomain   Drop the RCU schemas as follows:\n$ kubectl exec -it helper -n \u0026lt;domain_namespace\u0026gt; -- /bin/bash [oracle@helper ~]$ [oracle@helper ~]$ export CONNECTION_STRING=\u0026lt;db_host.domain\u0026gt;:\u0026lt;db_port\u0026gt;/\u0026lt;service_name\u0026gt; [oracle@helper ~]$ export RCUPREFIX=\u0026lt;rcu_schema_prefix\u0026gt; /u01/oracle/oracle_common/bin/rcu -silent -dropRepository -databaseType ORACLE -connectString $CONNECTION_STRING \\ -dbUser sys -dbRole sysdba -selectDependentsForComponents true -schemaPrefix $RCUPREFIX \\ -component MDS -component IAU -component IAU_APPEND -component IAU_VIEWER -component OPSS \\ -component WLS -component STB -component OIM -component SOAINFRA -component UCSUMS -f \u0026lt; /tmp/pwd.txt For example:\n$ kubectl exec -it helper -n oigns -- /bin/bash [oracle@helper ~]$ export CONNECTION_STRING=mydatabasehost.example.com:1521/orcl.example.com [oracle@helper ~]$ export RCUPREFIX=OIGK8S /u01/oracle/oracle_common/bin/rcu -silent -dropRepository -databaseType ORACLE -connectString $CONNECTION_STRING \\ -dbUser sys -dbRole sysdba -selectDependentsForComponents true -schemaPrefix $RCUPREFIX \\ -component MDS -component IAU -component IAU_APPEND -component IAU_VIEWER -component OPSS \\ -component WLS -component STB -component OIM -component SOAINFRA -component UCSUMS -f \u0026lt; /tmp/pwd.txt   Delete the contents of the persistent volume:\n$ rm -rf \u0026lt;persistent_volume\u0026gt;/governancedomainpv/* For example:\n$ rm -rf /scratch/shared/governancedomainpv/*   Delete the WebLogic Kubernetes Operator, by running the following command:\n$ helm delete weblogic-kubernetes-operator -n opns   Delete the label from the OIG namespace:\n$ kubectl label namespaces \u0026lt;domain_namespace\u0026gt; weblogic-operator- For example:\n$ kubectl label namespaces oigns weblogic-operator-   Delete the service account for the operator:\n$ kubectl delete serviceaccount \u0026lt;sample-kubernetes-operator-sa\u0026gt; -n \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl delete serviceaccount op-sa -n opns   Delete the operator namespace:\n$ kubectl delete namespace \u0026lt;sample-kubernetes-operator-ns\u0026gt; For example:\n$ kubectl delete namespace opns   To delete NGINX:\n$ helm delete governancedomain-nginx-designconsole -n \u0026lt;domain_namespace\u0026gt; For example:\n$ helm delete governancedomain-nginx-designconsole -n oigns Then run:\n$ helm delete governancedomain-nginx -n \u0026lt;domain_namespace\u0026gt; For example:\n$ helm delete governancedomain-nginx -n oigns Then run:\n$ helm delete nginx-ingress -n \u0026lt;domain_namespace\u0026gt; For example:\n$ helm delete nginx-ingress -n nginxssl Then delete the NGINX namespace:\n$ kubectl delete namespace \u0026lt;namespace\u0026gt; For example:\n$ kubectl delete namespace nginxssl   Delete the OIG namespace:\n$ kubectl delete namespace \u0026lt;domain_namespace\u0026gt; For example:\n$ kubectl delete namespace oigns   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oam/",
	"title": "Oracle Access Management",
	"tags": [],
	"description": "The WebLogic Kubernetes Operator supports deployment of Oracle Access Management (OAM).",
	"content": "Oracle Access Management on Kubernetes Oracle supports the deployment of Oracle Access Management on Kubernetes. See the following sections:\n Introduction   Release Notes   Prerequisites   Prepare your environment   Create OAM domains   Configure an Ingress for an OAM domain   Validate Domain URLs   Post Install Configuration   Validate a Basic SSO Flow using WebGate Registration    Manage OAM Domains   Create or update an image   Patch and Upgrade   Troubleshooting   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/ohs/",
	"title": "Oracle HTTP Server",
	"tags": [],
	"description": "Oracle HTTP Server can be deployed on a Kubernetes cluster. Follow the instructions in this guide to set up Oracle HTTP Server on Kubernetes.",
	"content": "Oracle HTTP Server on Kubernetes Oracle supports the deployment of Oracle HTTP Server on Kubernetes. See the following sections:\n Introduction   Release Notes   Prerequisites   Prepare your environment   Create the OHS Container and Nodeport   Manage OHS Domains   Create or update an image   Patch and Upgrade   Troubleshooting   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oig/",
	"title": "Oracle Identity Governance",
	"tags": [],
	"description": "The WebLogic Kubernetes Operator supports deployment of Oracle Identity Governance (OIG).",
	"content": "Oracle Identity Governance on Kubernetes Oracle supports the deployment of Oracle Identity Governance on Kubernetes. See the following sections:\n Introduction   Release Notes   Prerequisites   Prepare your environment   Create OIG domains   Configure an ingress for an OIG domain   Validate domain URLs   Post install configuration   Configure Design Console   Manage OIG domains   Create or update an image   Patch and upgrade   Troubleshooting   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oid/",
	"title": "Oracle Internet Directory",
	"tags": [],
	"description": "Oracle Internet Directory provides a comprehensive Directory Solution for robust Identity Management",
	"content": "As of July 2022, container support has been removed for Oracle Internet Directory. Refer to document ID 2723908.1 on My Oracle Support for more details.\nDocumentation for earlier releases To view documentation for previous releases, see:\n Version 22.2.1 Version 21.4.2  "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oud/",
	"title": "Oracle Unified Directory",
	"tags": [],
	"description": "Oracle Unified Directory provides a comprehensive Directory Solution for robust Identity Management",
	"content": "Oracle Unified Directory on Kubernetes Oracle supports the deployment of Oracle Unified Directory on Kubernetes. See the following sections:\n Introduction   Release Notes   Prerequisites   Prepare Your Environment   Create Oracle Unified Directory Instances   Configure an Ingress for OUD   Manage Oracle Unified Directory Containers   Create or update an image   Patch and Upgrade   Troubleshooting   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/idm-products/oudsm/",
	"title": "Oracle Unified Directory Services Manager",
	"tags": [],
	"description": "Oracle Unified Directory Services Manager provides an interface for managing instances of Oracle Unified Directory",
	"content": "Oracle Unified Directory Services Manager on Kubernetes Oracle supports the deployment of Oracle Unified Directory Services Manager on Kubernetes. See the following sections:\n Introduction   Release Notes   Prerequisites   Prepare Your Environment   Create Oracle Unified Directory Services Manager Instances   Configure an Ingress for OUDSM   Manage Oracle Unified Directory Services Manager Containers   Create or update an image   Patch and upgrade   Troubleshooting   "
},
{
	"uri": "/fmw-kubernetes/24.4.1/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]