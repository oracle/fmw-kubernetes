<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oracle Fusion Middleware on Kubernetes</title>
    <link>/fmw-kubernetes/20.4.1/</link>
    <description>Recent content on Oracle Fusion Middleware on Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Apr 2019 06:46:23 -0500</lastBuildDate>
    
	<atom:link href="/fmw-kubernetes/20.4.1/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Domain Life Cycle</title>
      <link>/fmw-kubernetes/20.4.1/oam/manage-oam-domains/domain-lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oam/manage-oam-domains/domain-lifecycle/</guid>
      <description>As OAM domains use the Oracle WebLogic Server Kubernetes Operator, domain lifecyle operations are managed using the Oracle WebLogic Server Kubernetes Operator itself.
This document shows the basic operations for starting, stopping and scaling servers in the OAM domain.
For more detailed information refer to Domain Life Cycle in the Oracle WebLogic Server Kubernetes Operator documentation.
Do not use the WebLogic Server Administration Console or Oracle Enterprise Manager Console to start or stop servers.</description>
    </item>
    
    <item>
      <title>Domain Life Cycle</title>
      <link>/fmw-kubernetes/20.4.1/oig/manage-oig-domains/domain-lifecycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oig/manage-oig-domains/domain-lifecycle/</guid>
      <description>View Existing OIG Servers Starting/Scaling up OIG Managed Servers Stopping/Scaling down OIG Managed Servers Stopping and Starting the AdminServer and Managed Servers  As OIG domains use the Oracle WebLogic Kubernetes Operator, domain lifecyle operations are managed using the Oracle WebLogic Kubernetes Operator itself.
This document shows the basic operations for starting, stopping and scaling servers in the OIG domain.
For more detailed information refer to Domain Life Cycle in the Oracle WebLogic Kubernetes Operator documentation.</description>
    </item>
    
    <item>
      <title>WLST Administration Operations</title>
      <link>/fmw-kubernetes/20.4.1/oam/manage-oam-domains/wlst-admin-operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oam/manage-oam-domains/wlst-admin-operations/</guid>
      <description>To use WLST to administer the OAM domain, use the helper pod in the same Kubernetes cluster as the OAM Domain.
  Run the following command to start a bash shell in the helper pod (if one is not already running):
$ kubectl exec -it helper -n &amp;lt;domain_namespace&amp;gt; -- /bin/bash For example:
$ kubectl exec -it helper -n accessns -- /bin/bash This will take you into a bash shell in the running helper pod:</description>
    </item>
    
    <item>
      <title>WLST Administration Operations</title>
      <link>/fmw-kubernetes/20.4.1/oig/manage-oig-domains/wlst-admin-operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oig/manage-oig-domains/wlst-admin-operations/</guid>
      <description>Invoke WLST and Access Administration Server To use WLST to administer the OIG domain, use a helper pod in the same Kubernetes cluster as the OIG Domain.
  Run the following command to create a helper pod if one doesn&amp;rsquo;t already exist:
$ kubectl run helper --image &amp;lt;image_name&amp;gt; -n &amp;lt;domain_namespace&amp;gt; -- sleep infinity For example:
$ kubectl run helper --image oracle/oig:12.2.1.4.0 -n oimcluster -- sleep infinity The output will look similar to the following:</description>
    </item>
    
    <item>
      <title>Logging and Visualization</title>
      <link>/fmw-kubernetes/20.4.1/oam/manage-oam-domains/logging-and-visualization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oam/manage-oam-domains/logging-and-visualization/</guid>
      <description>After the OAM domain is set up you can publish operator and WebLogic Server logs into Elasticsearch and interact with them in Kibana.
In Prepare your environment if you decided to use the Elasticsearch and Kibana by setting the parameter elkIntegrationEnabled to true, then the steps below must be followed to complete the setup.
If you did not set elkIntegrationEnabled to true and want to do so post configuration, run the following command:</description>
    </item>
    
    <item>
      <title>Runnning OIG Utilities</title>
      <link>/fmw-kubernetes/20.4.1/oig/manage-oig-domains/running-oig-utilities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oig/manage-oig-domains/running-oig-utilities/</guid>
      <description>Run OIG utlities inside the OIG Kubernetes cluster.
Run utilities in an interactive bash shell   Access a bash shell inside the oimcluster-oim-server1 pod:
$ kubectl -n oimcluster exec -it oimcluster-oim-server1 -- bash This will take you into a bash shell in the running oimcluster-oim-server1 pod:
[oracle@oimcluster-oim-server1 oracle]$   Navigate to the /u01/oracle/idm/server/bin directory and execute the utility as required. For example:
[oracle@oimcluster-oim-server1 oracle] cd /u01/oracle/idm/server/bin [oracle@oimcluster-oim-server1 bin]$ .</description>
    </item>
    
    <item>
      <title>Logging and Visualization</title>
      <link>/fmw-kubernetes/20.4.1/oig/manage-oig-domains/logging-and-visualization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oig/manage-oig-domains/logging-and-visualization/</guid>
      <description>After the OIG domain is set up you can publish operator and WebLogic Server logs into Elasticsearch and interact with them in Kibana.
In Prepare your environment if you decided to use the Elasticsearch and Kibana by setting the parameter elkIntegrationEnabled to true, then the steps below must be followed to complete the setup.
If you did not set elkIntegrationEnabled to true and want to do so post configuration, run the following command:</description>
    </item>
    
    <item>
      <title>Monitoring an OAM domain</title>
      <link>/fmw-kubernetes/20.4.1/oam/manage-oam-domains/monitoring-oam-domains/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oam/manage-oam-domains/monitoring-oam-domains/</guid>
      <description>After the OAM domain is set up you can monitor the OAM instance using Prometheus and Grafana. See Monitoring a domain.
The WebLogic Monitoring Exporter uses the WLS RESTful Management API to scrape runtime information and then exports Prometheus-compatible metrics. It is deployed as a web application in a WebLogic Server (WLS) instance, version 12.2.1 or later, typically, in the instance from which you want to get metrics.
Deploy the Prometheus operator   Clone Prometheus by running the following commands:</description>
    </item>
    
    <item>
      <title>Delete the OAM domain home</title>
      <link>/fmw-kubernetes/20.4.1/oam/manage-oam-domains/delete-domain-home/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oam/manage-oam-domains/delete-domain-home/</guid>
      <description>Sometimes in production, but most likely in testing environments, you might want to remove the domain home that is generated using the create-domain.sh script.
  Run the following command to delete the jobs, domain, and configmaps:
$ kubectl delete jobs &amp;lt;domain_job&amp;gt; -n &amp;lt;domain_namespace&amp;gt; $ kubectl delete domain &amp;lt;domain_uid&amp;gt; -n &amp;lt;domain_namespace&amp;gt; $ kubectl delete configmaps &amp;lt;domain_job&amp;gt;-cm -n &amp;lt;domain_namespace&amp;gt; For example:
$ kubectl delete jobs accessinfra-create-oam-infra-domain-job -n accessns $ kubectl delete domain accessinfra -n accessns $ kubectl delete configmaps accessinfra-create-oam-infra-domain-job-cm -n accessns   Drop the RCU schemas as follows:</description>
    </item>
    
    <item>
      <title>Monitoring an OIG domain</title>
      <link>/fmw-kubernetes/20.4.1/oig/manage-oig-domains/monitoring-oim-domains/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oig/manage-oig-domains/monitoring-oim-domains/</guid>
      <description>After the OIG domain is set up you can monitor the OIG instance using Prometheus and Grafana. See Monitoring a domain.
The WebLogic Monitoring Exporter uses the WLS RESTful Management API to scrape runtime information and then exports Prometheus-compatible metrics. It is deployed as a web application in a WebLogic Server (WLS) instance, version 12.2.1 or later, typically, in the instance from which you want to get metrics.
Deploy the Prometheus operator   Clone Prometheus by running the following commands:</description>
    </item>
    
    <item>
      <title>Delete the OIG domain home</title>
      <link>/fmw-kubernetes/20.4.1/oig/manage-oig-domains/delete-domain-home/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oig/manage-oig-domains/delete-domain-home/</guid>
      <description>Sometimes in production, but most likely in testing environments, you might want to remove the domain home that is generated using the create-domain.sh script.
  Run the following command to delete the jobs, domain, and configmaps:
$ kubectl delete jobs &amp;lt;domain_job&amp;gt; -n &amp;lt;domain_namespace&amp;gt; $ kubectl delete domain &amp;lt;domain_uid&amp;gt; -n &amp;lt;domain_namespace&amp;gt; $ kubectl delete configmaps &amp;lt;domain_job&amp;gt;-cm -n &amp;lt;domain_namespace&amp;gt; For example:
$ kubectl delete jobs oimcluster-create-fmw-infra-sample-domain-job -n oimcluster $ kubectl delete domain oimcluster -n oimcluster $ kubectl delete configmaps oimcluster-create-fmw-infra-sample-domain-job-cm -n oimcluster   Drop the RCU schemas as follows:</description>
    </item>
    
    <item>
      <title>a) Logging and Visualization for Helm Chart oud-ds-rs Deployment</title>
      <link>/fmw-kubernetes/20.4.1/oud/manage-oud-containers/logging-and-visualization/</link>
      <pubDate>Fri, 22 Feb 2019 15:44:42 -0500</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oud/manage-oud-containers/logging-and-visualization/</guid>
      <description>Introduction Installation  Enable Elasticsearch, Logstash, and Kibana Create Data Mount Points Configure Logstash Install or Upgrade Oracle Unified Directory Container with ELK Configuration Configure ElasticSearch   Verify Using the Kibana Application  Introduction This section describes how to install and configure logging and visualization for the oud-ds-rs Helm Chart deployment.
The ELK stack consists of Elasticsearch, Logstash, and Kibana. Using ELK we can gain insights in real-time from the log data from your applications.</description>
    </item>
    
    <item>
      <title>a) Logging and Visualization for Helm Chart oudsm Deployment</title>
      <link>/fmw-kubernetes/20.4.1/oudsm/manage-oudsm-containers/logging-and-visualization/</link>
      <pubDate>Fri, 22 Feb 2019 15:44:42 -0500</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oudsm/manage-oudsm-containers/logging-and-visualization/</guid>
      <description>Introduction Installation  Enable Elasticsearch, Logstash, and Kibana Create Data Mount Points Configure Logstash Install or Upgrade Oracle Unified Directory Services Manager Container with ELK Configuration Configure ElasticSearch   Verify Using the Kibana Application  Introduction This section describes how to install and configure logging and visualization for the oudsm Helm Chart deployment.
The ELK stack consists of Elasticsearch, Logstash, and Kibana. Using ELK we can gain insights in real-time from the log data from your applications.</description>
    </item>
    
    <item>
      <title>b) Monitoring an Oracle Unified Directory Instance</title>
      <link>/fmw-kubernetes/20.4.1/oud/manage-oud-containers/monitoring-oud-instance/</link>
      <pubDate>Fri, 22 Feb 2019 15:44:42 -0500</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oud/manage-oud-containers/monitoring-oud-instance/</guid>
      <description>Introduction Install Prometheus and Grafana  Create a Kubernetes Namespace Add Prometheus and Grafana Helm Repositories Install the Prometheus Operator View Prometheus and Grafana Objects Created Add the NodePort   Verify Using Grafana GUI  Introduction After the Oracle Unified Directory instance is set up you can monitor it using Prometheus and Grafana.
Install Prometheus and Grafana Create a Kubernetes Namespace Create a Kubernetes namespace to provide a scope for Prometheus and Grafana objects such as pods and services that you create in the environment.</description>
    </item>
    
    <item>
      <title>b) Monitoring an Oracle Unified Directory Services Manager Instance</title>
      <link>/fmw-kubernetes/20.4.1/oudsm/manage-oudsm-containers/monitoring-oudsm-instance/</link>
      <pubDate>Fri, 22 Feb 2019 15:44:42 -0500</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oudsm/manage-oudsm-containers/monitoring-oudsm-instance/</guid>
      <description>Introduction Install Prometheus and Grafana  Create a Kubernetes Namespace Add Prometheus and Grafana Helm Repositories Install the Prometheus Operator View Prometheus and Grafana Objects Created Add the NodePort   Verify Using Grafana GUI  Introduction After the Oracle Unified Directory Services Manager instance is set up you can monitor it using Prometheus and Grafana.
Install Prometheus and Grafana Create a Kubernetes Namespace Create a Kubernetes namespace to provide a scope for Prometheus and Grafana objects such as pods and services that you create in the environment.</description>
    </item>
    
    <item>
      <title>a) Upgrade a Kubernetes cluster</title>
      <link>/fmw-kubernetes/20.4.1/oud/patch-and-upgrade/upgrade_a_kubernetes_cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oud/patch-and-upgrade/upgrade_a_kubernetes_cluster/</guid>
      <description>These instructions describe how to upgrade a Kubernetes cluster created using kubeadm on which an Oracle Unified Directory instance is deployed. A rolling upgrade approach is used to upgrade nodes (master and worker) of the Kubernetes cluster.
It is expected that there will be a down time during the upgrade of the Kubernetes cluster as the nodes need to be drained as part of the upgrade process.
 Prerequisites  Review Prerequisites and ensure that your Kubernetes cluster is ready for upgrade.</description>
    </item>
    
    <item>
      <title>a. Patch an image</title>
      <link>/fmw-kubernetes/20.4.1/oam/patch-and-upgrade/patch_an_image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oam/patch-and-upgrade/patch_an_image/</guid>
      <description>To update your OAM Kubernetes cluster with a new OAM Docker image, first install the new Docker image on all nodes in your Kubernetes cluster.
Once the new image is installed, choose one of the following options to update your OAM kubernetes cluster to use the new image:
 Run the kubectl edit domain command Run the kubectl patch domain command  In all of the above cases, the Oracle WebLogic Server Kubernetes Operator will restart the Administration Server pod first and then perform a rolling restart on the OAM Managed Servers.</description>
    </item>
    
    <item>
      <title>a. Patch an image</title>
      <link>/fmw-kubernetes/20.4.1/oig/patch-and-upgrade/patch_an_image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oig/patch-and-upgrade/patch_an_image/</guid>
      <description>To update your OIG Kubernetes cluster with a new OIG Docker image, first install the new Docker image on all nodes in your Kubernetes cluster.
Once the new image is installed choose one of the following options to update your OIG Kubernetes cluster to use the new image:
 Run the kubectl edit domain command Run the kubectl patch domain command  In all of the above cases, the Oracle WebLogic Kubernetes Operator will restart the Administration Server pod first and then perform a rolling restart on the OIG Managed Servers.</description>
    </item>
    
    <item>
      <title>a. Set OIMfrontendURL</title>
      <link>/fmw-kubernetes/20.4.1/oig/post-install-config/set_oimfronendurl_using_mbeans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oig/post-install-config/set_oimfronendurl_using_mbeans/</guid>
      <description>Set OIMFrontendURL using MBeans   Login to Oracle Enterprise Manager using the following URL:
https://${MASTERNODE-HOSTNAME}:${MASTERNODE-PORT}/em
  Click the Target Navigation icon in the top left of the screen and navigate to the following:
 Expand Identity and Access &amp;gt; Access &amp;gt; OIM &amp;gt; oim Right click the instance oim and select System MBean Browser Under Application Defined MBeans, navigate to oracle.iam, Server:oim_server1, Application:oim &amp;gt; XMLConfig &amp;gt; Config &amp;gt; XMLConfig.</description>
    </item>
    
    <item>
      <title>a. Using an Ingress with NGINX</title>
      <link>/fmw-kubernetes/20.4.1/oam/configure-ingress/ingress-nginx-setup-for-oam-domain-setup-on-k8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oam/configure-ingress/ingress-nginx-setup-for-oam-domain-setup-on-k8s/</guid>
      <description>Setting up an ingress for NGINX for the OAM Domain The instructions below explain how to set up NGINX as an ingress for the OAM domain with SSL termination.
Note: All the steps below should be performed on the master node.
 Generate a SSL Certificate Install NGINX Create an Ingress for the Domain Verify that You can Access the Domain URL  Generate a SSL Certificate   Generate a private key and certificate signing request (CSR) using a tool of your choice.</description>
    </item>
    
    <item>
      <title>a. Using an Ingress with NGINX (non-SSL)</title>
      <link>/fmw-kubernetes/20.4.1/oig/configure-ingress/ingress-nginx-setup-for-oig-domain-setup-on-k8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oig/configure-ingress/ingress-nginx-setup-for-oig-domain-setup-on-k8s/</guid>
      <description>Setting Up an ingress for NGINX for the OIG Domain on Kubernetes (non-SSL) The instructions below explain how to set up NGINX as an ingress for the OIG domain with non-SSL termination.
Note: All the steps below should be performed on the master node.
 Install NGINX  Configure the repository Create a Namespace Install NGINX using helm Setup Routing Rules for the Domain   Create an Ingress for the Domain Verify that You can Access the Domain URL Cleanup  Install NGINX Use helm to install NGINX.</description>
    </item>
    
    <item>
      <title>a. Using Design Console with NGINX(non-SSL)</title>
      <link>/fmw-kubernetes/20.4.1/oig/configure-design-console/using-the-design-console-with-nginx-non-ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oig/configure-design-console/using-the-design-console-with-nginx-non-ssl/</guid>
      <description>Configure an NGINX ingress (non-SSL) to allow Design Console to connect to your Kubernetes cluster.
Design Console is not installed as part of the OAM Kubernetes cluster so must be installed on a seperate client before following the steps below.
 Add the NGINX ingress using helm Note: If already using NGINX with non-SSL for OIG you can skip this section:
  Add the Helm chart repository for NGINX using the following command:</description>
    </item>
    
    <item>
      <title>a. Using Design Console with NGINX(SSL)</title>
      <link>/fmw-kubernetes/20.4.1/oig/configure-design-console/using-the-design-console-with-nginx-ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oig/configure-design-console/using-the-design-console-with-nginx-ssl/</guid>
      <description>Configure an NGINX ingress (SSL) to allow Design Console to connect to your Kubernetes cluster.
Design Console is not installed as part of the OAM Kubernetes cluster so must be installed on a seperate client before following the steps below.
 Generate SSL Certificate Note: If already using NGINX with SSL for OIG you can skip this section:
  Generate a private key and certificate signing request (CSR) using a tool of your choice.</description>
    </item>
    
    <item>
      <title>a. Using Design Console with Voyager(non-SSL)</title>
      <link>/fmw-kubernetes/20.4.1/oig/configure-design-console/using-the-design-console-with-voyager-non-ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oig/configure-design-console/using-the-design-console-with-voyager-non-ssl/</guid>
      <description>Configure a Voyager ingress (non-SSL) to allow Design Console to connect to your Kubernetes cluster.
Design Console is not installed as part of the OAM Kubernetes cluster so must be installed on a seperate client before following the steps below.
 Add the Voyager ingress using helm Note: If already using Voyager with non-SSL for OIG you can skip this section:
  Add the Helm chart repository for Voyager using the following command:</description>
    </item>
    
    <item>
      <title>a. Using Design Console with Voyager(SSL)</title>
      <link>/fmw-kubernetes/20.4.1/oig/configure-design-console/using-the-design-console-with-voyager-ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oig/configure-design-console/using-the-design-console-with-voyager-ssl/</guid>
      <description>Configure a Voyager ingress (SSL) to allow Design Console to connect to your Kubernetes cluster.
Design Console is not installed as part of the OAM Kubernetes cluster so must be installed on a seperate client before following the steps below.
 Generate SSL Certificate Note: If already using Voyager with SSL for OIG you can skip this section:
  Generate a private key and certificate signing request (CSR) using a tool of your choice.</description>
    </item>
    
    <item>
      <title>b) Upgrade a Kubernetes cluster</title>
      <link>/fmw-kubernetes/20.4.1/oudsm/patch-and-upgrade/upgrade_a_kubernetes_cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oudsm/patch-and-upgrade/upgrade_a_kubernetes_cluster/</guid>
      <description>These instructions describe how to upgrade a Kubernetes cluster created using kubeadm on which an Oracle Unified Directory Services Manager instance is deployed. A rolling upgrade approach is used to upgrade nodes (master and worker) of the Kubernetes cluster.
It is expected that there will be a down time during the upgrade of the Kubernetes cluster as the nodes need to be drained as part of the upgrade process.
 Prerequisites  Review Prerequisites and ensure that your Kubernetes cluster is ready for upgrade.</description>
    </item>
    
    <item>
      <title>b. Install and Configure Connectors</title>
      <link>/fmw-kubernetes/20.4.1/oig/post-install-config/install_and_configure_connectors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oig/post-install-config/install_and_configure_connectors/</guid>
      <description>Download the Connector   Download the Connector you are interested in from Oracle Identity Manager Connector Downloads.
  Copy the connector zip file to a staging directory on the master node e.g. /scratch/OIGDocker/stage and unzip it:
$ cp $HOME/Downloads/&amp;lt;connector&amp;gt;.zip &amp;lt;work directory&amp;gt;/&amp;lt;stage&amp;gt;/ $ cd &amp;lt;work directory&amp;gt;/&amp;lt;stage&amp;gt; $ unzip &amp;lt;connector&amp;gt;.zip For example:
$ cp $HOME/Downloads/Exchange-12.2.1.3.0.zip /scratch/OIGDocker/stage/ $ cd /scratch/OIGDockerK8S/stage/ $ unzip Exchange-12.2.1.3.0.zip   Create a directory in the persistent volume   On the master node run the following command to create a ConnectorDefaultDirectory:</description>
    </item>
    
    <item>
      <title>b. Upgrade an operator release</title>
      <link>/fmw-kubernetes/20.4.1/oam/patch-and-upgrade/upgrade_an_operator_release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oam/patch-and-upgrade/upgrade_an_operator_release/</guid>
      <description>These instructions apply to upgrading the operator within the 3.x release family as additional versions are released.
The new Oracle WebLogic Server Kubernetes Operator Docker image must be installed on the master node AND each of the worker nodes in your Kubernetes cluster. Alternatively you can place the image in a Docker registry that your cluster can access.
   Pull the Oracle WebLogic Server Kubernetes Operator 3.X.X image by running the following command on the master node:</description>
    </item>
    
    <item>
      <title>b. Upgrade an operator release</title>
      <link>/fmw-kubernetes/20.4.1/oig/patch-and-upgrade/upgrade_an_operator_release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oig/patch-and-upgrade/upgrade_an_operator_release/</guid>
      <description>These instructions apply to upgrading operators within the 3.x release family as additional versions are released.
The new Oracle WebLogic Kubernetes Operator Docker image must be installed on the master node AND each of the worker nodes in your Kubernetes cluster. Alternatively you can place the image in a Docker registry that your cluster can access.
   Pull the Oracle WebLogic Kubernetes Operator 3.X.X image by running the following command on the master node:</description>
    </item>
    
    <item>
      <title>b. Using an Ingress with NGINX (SSL)</title>
      <link>/fmw-kubernetes/20.4.1/oig/configure-ingress/ingress-nginx-setup-for-oig-domain-setup-on-k8s-ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oig/configure-ingress/ingress-nginx-setup-for-oig-domain-setup-on-k8s-ssl/</guid>
      <description>Setting Up an Ingress for NGINX for the OIG Domain on Kubernetes The instructions below explain how to set up NGINX as an ingress for the OIG domain with SSL termination.
Note: All the steps below should be performed on the master node.
 Create a SSL Certificate  Generate SSL Certificate Create a Kubernetes Secret for SSL   Install NGINX  Configure the repository Create a Namespace Install NGINX using helm   Create an Ingress for the Domain Verify that You can Access the Domain URL Cleanup  Create a SSL Certificate Generate SSL Certificate   Generate a private key and certificate signing request (CSR) using a tool of your choice.</description>
    </item>
    
    <item>
      <title>b. Using an Ingress with Voyager</title>
      <link>/fmw-kubernetes/20.4.1/oam/configure-ingress/ingress-voyager-setup-for-oam-domain-setup-on-k8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oam/configure-ingress/ingress-voyager-setup-for-oam-domain-setup-on-k8s/</guid>
      <description>Setting Up an Ingress for Voyager for the OAM Domain on K8S The instructions below explain how to set up Voyager as an Ingress for the OAM domain with SSL termination.
Note: All the steps below should be performed on the master node.
 Generate a SSL Certificate Install Voyager Create an Ingress for the Domain Verify that You can Access the Domain URL  Generate a SSL Certificate   Generate a private key and certificate signing request (CSR) using a tool of your choice.</description>
    </item>
    
    <item>
      <title>c. Upgrade a Kubernetes cluster</title>
      <link>/fmw-kubernetes/20.4.1/oam/patch-and-upgrade/upgrade_a_kubernetes_cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oam/patch-and-upgrade/upgrade_a_kubernetes_cluster/</guid>
      <description>These instructions describe how to upgrade a Kubernetes cluster created using kubeadm on which an OAM domain is deployed. A rolling upgrade approach is used to upgrade nodes (master and worker) of the Kubernetes cluster.
It is expected that there will be a down time during the upgrade of the Kubernetes cluster as the nodes need to be drained as part of the upgrade process.
 Prerequisites  Review Prerequisites and ensure that your Kubernetes cluster is ready for upgrade.</description>
    </item>
    
    <item>
      <title>c. Upgrade a Kubernetes cluster</title>
      <link>/fmw-kubernetes/20.4.1/oig/patch-and-upgrade/upgrade_a_kubernetes_cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oig/patch-and-upgrade/upgrade_a_kubernetes_cluster/</guid>
      <description>These instructions describe how to upgrade a Kubernetes cluster created using kubeadm on which an OIG domain is deployed. A rolling upgrade approach is used to upgrade nodes (master and worker) of the Kubernetes cluster.
It is expected that there will be a down time during the upgrade of the Kubernetes cluster as the nodes need to be drained as part of the upgrade process.
 Prerequisites  Review Prerequisites and ensure that your Kubernetes cluster is ready for upgrade.</description>
    </item>
    
    <item>
      <title>c. Using an Ingress with Voyager (non-SSL)</title>
      <link>/fmw-kubernetes/20.4.1/oig/configure-ingress/ingress-voyager-setup-for-oig-domain-setup-on-k8s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oig/configure-ingress/ingress-voyager-setup-for-oig-domain-setup-on-k8s/</guid>
      <description>Setting Up an Ingress for Voyager for the OIG Domain on Kubernetes The instructions below explain how to set up Voyager as an Ingress for the OIG domain with non-SSL termination.
Note: All the steps below should be performed on the master node.
 Install Voyager  Configure the repository Create Namespace and Install Voyager Setup Routing Rules for the Domain   Create an Ingress for the Domain Verify that You can Access the Domain URL Cleanup  Install Voyager Use Helm to install Voyager.</description>
    </item>
    
    <item>
      <title>d. Using an Ingress with Voyager (SSL)</title>
      <link>/fmw-kubernetes/20.4.1/oig/configure-ingress/ingress-voyager-setup-for-oig-domain-setup-on-k8s-ssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/fmw-kubernetes/20.4.1/oig/configure-ingress/ingress-voyager-setup-for-oig-domain-setup-on-k8s-ssl/</guid>
      <description>Setting Up an Ingress for Voyager for the OIG Domain on Kubernetes The instructions below explain how to set up Voyager as an Ingress for the OIG domain with SSL termination.
Note: All the steps below should be performed on the master node.
 Create a SSL Certificate  Generate SSL Certificate Create a Kubernetes Secret for SSL   Install Voyager  Configure the repository Create Namespace and Install Voyager Setup Routing Rules for the Domain   Create an Ingress for the Domain Verify that You can Access the Domain URL Cleanup  Create a SSL Certificate Generate SSL Certificate   Generate a private key and certificate signing request (CSR) using a tool of your choice.</description>
    </item>
    
  </channel>
</rss>